---

title: Exploit detection system with threat-aware microvisor
abstract: An exploit detection system deploys a threat-aware microvisor to facilitate real-time security analysis, including exploit detection and threat intelligence, of an operating system process executing on a node of a network environment. The microvisor may be organized as a main protection domain representative of the operating system process. In response to the process attempting to access a kernel resource for which it does not have permission, a capability violation may be generated at the main protection domain of the microvisor and a micro-virtual machine (VM) may be spawned as a container configured to encapsulate the process. The main protection domain may then be cloned to create a cloned protection domain that is representative of the process and that is bound to the spawned micro-VM. Capabilities of the cloned protection domain may be configured to be more restricted than the capabilities of the main protection domain with respect to access to the kernel resource. The restricted capabilities may be configured to generate more capability violations than those generated by the capabilities of the main protection domain and, in turn, enable further monitoring of the process as it attempts to access the kernel resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507935&OS=09507935&RS=09507935
owner: FireEye, Inc.
number: 09507935
owner_city: Milpitas
owner_country: US
publication_date: 20140328
---
The present application claims priority from commonly owned Provisional Patent Application No. 61 928 323 entitled Exploit Detection System with Threat Aware Microvisor filed on Jan. 16 2014 the contents of which are incorporated herein by reference.

The present disclosure relates to exploit detection and more specifically to an exploit detection system having a threat aware microvisor.

A virtual machine monitor VMM or hypervisor may be a hardware or software entity configured to create and run a software implementation of a computing platform or machine i.e. a virtual machine. The hypervisor may be implemented as a type 1 VMM executing directly on native hardware of the computing platform or a type 2 VMM executing within an operating system environment of the platform. The hypervisor may be further deployed in a virtualization system that fully simulates virtualizes physical hardware resources of the computing platform. Such a full virtualization system may support execution of a plurality of operating system instances inside a plurality of virtual machines wherein the operating system instances share the hardware resources of the platform. The hypervisor of the full virtualization system may manage such sharing by hiding the hardware resources of the computing platform from users e.g. application programs executing on each operating system instance and instead providing an abstract virtual computing platform. For example a hardware resource such as a network interface card NIC may be shared by enabling each virtual machine and its operating system instance to access a virtualized instance of the resource i.e. a virtual NIC.

Alternatively the hypervisor may be deployed in a virtualization system that supports a single computer program or process running inside of a virtual machine. Yet this type of virtualization system typically implements a language virtual machine environment configured specifically for a programming language e.g. a Java virtual machine.

A prior implementation of a virtualization system includes a special virtual machine and a hypervisor that creates other virtual machines each of which executes an independent instance of an operating system. Malicious code may be prevented from compromising resources of the system through the use of policy enforcement and containment analysis that isolates execution of the code within a virtual machine to block or inhibit its execution within the system i.e. outside of the virtual machine . However this implementation duplicates program code and data structures for each instance of the operating system that is virtualized. In addition the policy enforcement and containment may be directed to active often computationally intensive analysis of operating system data streams typically operating system version and patch specific to detect anomalous behavior.

Accordingly there is a need for an enhanced virtualization system that detects anomalous behavior of malware e.g. exploits and other malicious code threats and collects analytical information relating to such behavior in a light weight manner.

The embodiments described herein provide an exploit detection system that deploys a threat aware microvisor to facilitate real time security analysis including exploit detection and threat intelligence of operating system processes executing on a node of a network environment. The threat aware microvisor hereinafter microvisor may be embodied as a light weight module disposed beneath underlying an operating system kernel of the node to thereby control privileges i.e. access permissions to kernel resources such as one or more central processing units CPUs network interfaces memory and or devices of the node. Illustratively the microvisor may be configured to control access to one or more of the resources in response to a request by an operating system process to access the resource.

In an embodiment the microvisor may communicate with a type 0 virtual machine monitor VMM 0 over a privileged interface. VMM 0 is illustratively a pass through module configured to expose the kernel resources of the node to the operating system kernel. To that end VMM 0 may instantiate a virtual machine e.g. VM 0 as a container for the operating system kernel and its kernel resources wherein VM 0 includes instrumentation logic directed to detecting anomalous behavior which may be used in determining an exploit in any suspicious operating system process. The VMM 0 may also include instrumentation logic configured to analyze one or more interception points originated by the operating system process to invoke services of the operating system kernel. The instrumentation logic may analyze the interception point to determine whether it is suspicious and if so instantiate spawn one or more micro virtual machines VMs that cooperate with the microvisor to detect anomalous behavior which may be used in determining an exploit. Such spawning may result in creation of another module i.e. micro VM that is substantially similar to VM 0 but with different e.g. additional instrumentation logic. Similar to VM 0 the micro VM may be configured to communicate with the microvisor over the privileged interface. Notably the privileged interface may be embodied as a set of defined hyper calls.

In an embodiment the microvisor may be organized as a main protection domain representative of the operating system process. The main protection domain may include one or more execution contexts and capabilities defining permissions for the operating system process to access the kernel resources. In response to the process attempting to access a kernel resource for which it does not have permission a capability violation may be generated at the main protection domain of the microvisor and the micro VM may be spawned as a container configured to encapsulate the process. The main protection domain may then be cloned by copying the execution contexts and capabilities to create a cloned protection domain that is representative of the process and that is associated with bound to the spawned micro VM. The capabilities of the cloned protection domain may be configured to be more restricted than the capabilities of the main protection domain with respect to access to the kernel resources. Illustratively the restricted capabilities of the cloned protection domain may be configured to generate more capability violations than those generated by the capabilities of the main protection domain and in turn enable further monitoring of the process as it attempts to access the kernel resource.

Advantageously the instrumentation logic of VMM 0 and its spawned micro VM may be invoked in response to the interception point originated by the operating system process and the capability violations generated by the microvisor to provide real time security analysis including exploit detection and threat intelligence of the operating system process by the exploit detection system.

The memory may include a plurality of locations that are addressable by the CPU s and the network interface s for storing software program code including application programs and data structures associated with the embodiments described herein. The CPU may include processing elements or logic adapted to execute the software program code such as threat aware microvisor and manipulate the data structures such as system call table and process table . Exemplary CPUs may include families of instruction set architectures based on the x86 CPU from Intel Corporation of Santa Clara Calif. and the x64 CPU from Advanced Micro Devices of Sunnyvale Calif.

An operating system kernel portions of which are typically resident in memory and executed by the CPU functionally organizes the node by inter alia invoking operations in support of the application programs executing on the node. A suitable operating system kernel may include the Windows series of operating systems from Microsoft Corp of Redmond Wash. the MAC OS and IOS series of operating systems from Apple Inc. of Cupertino Calif. and versions of the Android operating system from Google Inc. of Mountain View Calif. among others. Suitable application programs may include Adobe Reader from Adobe Systems Inc. of San Jose Calif. and Microsoft Word from Microsoft Corp of Redmond Wash. Illustratively the application programs may be implemented via user mode processes of the kernel . As used herein a process e.g. a user mode process is an instance of software program code e.g. an application program executing in the operating system that may be separated decomposed into a plurality of threads wherein each thread is a sequence of execution within the process.

It will be apparent to those skilled in the art that other types of processing elements and memory including various computer readable media may be used to store and execute program instructions pertaining to the embodiments described herein. Also while the embodiments herein are described in terms of software program code and computer e.g. application programs stored in memory alternative embodiments also include the code programs being embodied as modules consisting of hardware software firmware or combinations thereof.

As a light weight module the microvisor may provide a virtualization layer having less functionality than a typical hypervisor. Accordingly the microvisor may cooperate with a unique virtual machine monitor VMM i.e. a type 0 VMM to provide additional virtualization functionality in an operationally and resource efficient manner. Unlike a type 1 or type 2 VMM hypervisor the type 0 VMM VMM 0 does not fully virtualize the kernel hardware resources of the node and supports execution of only one entire operating system instance inside one virtual machine i.e. VM 0. VMM 0 may thus instantiate VM 0 as a container for the operating system kernel and its kernel resources. In an embodiment VMM 0 may instantiate VM 0 as a module having instrumentation logic A directed to determination of an exploit in any suspicious operating system process kernel or user mode . Illustratively VMM 0 is a pass through module configured to expose the kernel resources of the node as controlled by microvisor to the operating system kernel . VMM 0 may also expose resources such as virtual CPUs threads wherein there is one to one mapping between the number of physical CPUs and the number of virtual CPUs that VMM 0 exposes to the operating system kernel . To that end VMM 0 may enable communication between the operating system kernel i.e. VM 0 and the microvisor over privileged interfaces and

The VMM 0 may include software program code e.g. executable machine code in the form of instrumentation logic including decision logic configured to analyze one or more interception points originated by one or more operating system processes to invoke the services e.g. accesses to the kernel resources of the operating system kernel . As used herein an interception point is a point in an instruction stream where control passes to e.g. is intercepted by either the microvisor VMM 0 or another virtual machine. An interception point may thus include inter alia a memory access request a function call or a system call. For example in response to an interception point VMM 0 may assume control over the operating system kernel to enable monitoring of activity including examination of a state of the process to determine its suspiciousness and to enable detection of exploits or other potentially malicious behavior of malware. Suspiciousness may thus denote anomalous behavior of a process or its interception point e.g. system call that is not expected during run time and therefore may indicate a certain probability of being an exploit.

An exploit may thus be construed broadly as information e.g. executable code data one or more commands that attempts to take advantage of a computer program or system vulnerability. Typically a vulnerability may be a coding error or artifact of a computer program that allows an attacker to alter legitimate control flow during processing of the computer program by an electronic device and thus causes the electronic device to experience undesirable or unexpected behaviors. The undesired or unexpected behaviors may include a communication based or execution based anomaly which for example could 1 alter the functionality of the electronic device executing application software in a malicious manner 2 alter the functionality of the electronic device executing the application software without any malicious intent and or 3 provide unwanted functionality which may be generally acceptable in another context. To illustrate a computer program may be considered a state machine where all valid states and transitions between states are managed and defined by the program in which case an exploit may be viewed as seeking to alter one or more of the states or transitions from those defined by the program. Malware may be construed broadly as computer code that executes an exploit or harms or coopts operation of an electronic device or misappropriates modifies or deletes data. Conventionally malware may often be designed with malicious intent.

As described herein a system call provides an interception point at which a switch in privilege levels occurs in the operating system i.e. from a privilege level of the user mode process to a privilege level of the operating system kernel. VMM 0 may intercept the system call and examine a state of the process issuing sending the call. The instrumentation logic of VMM 0 may analyze the system call to determine whether the call is suspicious and if so instantiate spawn one or more micro virtual machines VMs equipped with monitoring functions that cooperate with the microvisor to detect anomalous behavior which may be used in determining an exploit. As used herein the term micro VM denotes a virtual machine serving as a container that is restricted to a process as opposed to VM 0 which is spawned as a container for the entire operating system. Such spawning of a micro VM may result in creation of an instance of another module i.e. micro VM N that is substantially similar to VM 0 but with different e.g. additional instrumentation logic N illustratively directed to determination of an exploit in the suspicious process by e.g. monitoring its behavior. In an embodiment the spawned micro VM illustratively encapsulates an operating system process such as user mode process . In terms of execution operation of the process is controlled and synchronized by the operating system kernel however in terms of access to kernel resources operation of the encapsulated process is controlled by VMM 0. Notably there is no sharing of kernel resources among spawned micro VMs i.e. the resources accessible to a process encapsulated in a spawned micro VM are the same resources accessible by any spawned micro VM as well as VM 0 and VMM 0. In other words access to kernel resources is synchronized among the micro VMs and VM 0 by VMM 0 rather than virtually shared. Accordingly VMM 0 may contain computer executable instructions executed by the CPU to perform operations that initialize and implement the instrumentation logic as well as operations that spawn configure and control VM 0 and any of a plurality of micro VMs including instrumentation logic A N . Similar to VM 0 each micro VM may be configured to communicate with the microvisor via VMM 0 over privileged interfaces and . Notably the privileged interfaces and may be embodied as a set of defined hyper calls as described further herein.

In an embodiment the microvisor may be organized to include a plurality of protection domains e.g. PD 0 N illustratively bound to VM 0 and one or more micro VMs respectively. As used herein a protection domain is a container for various data structures such as execution contexts scheduling contexts and capabilities associated with the kernel resources accessible by an operating system process. Illustratively the protection domain may function at a granularity of an operating system process e.g. a user mode process and thus is a representation of the process. Accordingly the microvisor may provide a protection domain for the process and its run time threads executing in the operating system. The main protection domain PD0 of the microvisor controls all of the kernel resources available to the operating system kernel and hence the user mode process of VM 0 via VMM 0 and to that end may be associated with the services provided to the user mode process by the kernel . The spawned micro VM e.g. micro VM N is illustratively associated with bound to a copy of PD 0 e.g. PD N which in turn may be bound to the process wherein such binding may occur through memory context switching.

In response to a decision to spawn the micro VM N VMM 0 may issue a hyper call over interface to the microvisor requesting creation of the protection domain PD N. Upon receiving the hyper call the microvisor may copy i.e. clone the data structures e.g. execution contexts scheduling contexts and capabilities of PD 0 to create PD N for the micro VM N wherein PD N has essentially the same structure as PD 0 except for the capabilities associated with the kernel resources. As used herein a capability is a protection access control permission associated with a kernel resource. For example the capabilities for PD N may limit or restrict access to one or more of the kernel resources as instructed through one or more hyper calls from e.g. VMM 0 and or micro VM N over interface to the microvisor. Accordingly the microvisor may contain computer executable instructions executed by the CPU to perform operations that initialize clone and configure the protection domains. As a result each protection domain PD 0 N may include one or more execution contexts each of which is tightly linked to a respective scheduling context . Each execution context further interacts with the capabilities whose contents specify access control permissions i.e. protecting access to the kernel resources. Illustratively the capabilities may be organized as a list of access permissions for each kernel resource.

As used herein an execution context is illustratively a representation of a thread associated with an operating system process and to that end defines a state of the thread for execution on CPU . In an embodiment the execution context may include inter alia i contents of CPU registers ii pointers values on a stack iii a program counter and or iv allocation of memory via e.g. memory pages. The execution context is thus a static view of the state of thread and therefore its associated process. Accordingly the thread executes within the protection domain associated with the operating system process of which the thread is a part. For the thread to execute on a CPU e.g. as a virtual CPU its execution context is tightly linked to a scheduling context which may be configured to provide information for scheduling the execution context for execution on the CPU . Illustratively the scheduling context information may include a priority and a quantum time for execution of its linked execution context on CPU .

In an embodiment the capabilities may be organized as a set of access control permissions to the kernel resources to which the thread may request access. Thus each time the execution context of a thread requests access to a kernel resource the capabilities are examined. There is illustratively one set of capabilities for each protection domain such that access to kernel resources by each execution context i.e. each thread of an execution context of a protection domain may be defined by the set of capabilities . For example physical addresses of pages of memory resulting from mappings of virtual addresses to physical addresses may have associated access permissions e.g. read write read write within the protection domain. To enable an execution context to access a kernel resource such as a memory page the physical address of the page may have a capability that defines how the execution context may reference that page. Illustratively the capabilities may be examined by hardware e.g. a hardware page fault upon a memory access violation or by program code. As described herein violation of a capability in a protection domain may be an interception point which returns control to the VM e.g. VM 0 or micro VM N bound to the protection domain.

Advantageously the microvisor may be organized as separate protection domain containers for the operating system kernel PD 0 and one or more operating system processes PD N to facilitate further monitoring and understanding of behaviors of the process and its threads. Such organization of the microvisor also enforces separation between the protection domains to control the activity of the monitored process. Moreover the microvisor may enforce access to the kernel resources through the use of variously configured capabilities of the separate protection domains. Unlike previous virtualization systems separation of the protection domains to control access to kernel resources at a process granularity enables detection of anomalous behavior of an exploit. That is in addition to enforcing access to kernel resources the microvisor enables analysis of the operation of a process within a spawned micro VM to detect exploits or other malicious code threats that may constitute malware.

Assume a user mode process has one or more threads that run on one or more CPUs . Each thread has an associated execution context that defines its state. When executing on a CPU the thread may attempt to access a resource a memory page . VMM 0 may instruct the microvisor to configure the access permission to the memory page according to a definition of the capability within the protection domain bound to the process executing the thread. Assume further that the capability specifies that a protection domain e.g. PD 0 can have only read only access to the memory page. If the CPU attempts to write to that memory i.e. a write access a trap e.g. an exception such as a page fault or general protection fault may be generated by the CPU and the microvisor may report the trap via an exception handler to VMM 0. VMM 0 may decide that such write access should be allowed and instructs the microvisor to allow the access. Alternatively VMM 0 may decide that such write access warrants further analysis and spawns micro VM N. VMM 0 may then issue a hyper call to the microvisor requesting cloning of PD 0 to create PD N for the spawned micro VM N and further requesting a different set of capabilities for PD N to further monitor the process i.e. the capabilities of the protection domain bound to micro VM N may be altered . In an embodiment the different set of capabilities may be specified by instrumentation logic N of the spawned micro VM N. The instrumentation logic N may specify the different set of capabilities via one or more hyper calls over interfaces in order to receive further reports of any violations of capabilities e.g. traps and then specify the type of action to take in response to those reports.

For example the instrumentation logic of VMM 0 may specify a set of capabilities for PD 0 via a hyper call that is different from the capabilities specified for PD N by the instrumentation logic N of micro VM N via a different hyper call . Illustratively the capabilities of PD N may be more restricted than those of PD 0 in order to capture behavior not otherwise monitored by PD 0. Nevertheless PD 0 may have temporarily elevated protection requiring limited capabilities due to e.g. a malicious rootkit executing in the operating system kernel . In an embodiment the different set of capabilities requested by micro VM N for the cloned PD N may pertain to certain kernel resources such as memory regions as opposed to memory pages of the regions . Here the capabilities may not be configured to define access permissions at the granularity of memory pages e.g. 4K bytes because of the substantial memory resources i.e. page table entries needed to accommodate sufficient pages to cover large memory regions. Accordingly in an embodiment a region of memory may be associated with certain permissions read only write only as defined by the capabilities and micro VM N may subsequently fine grain e.g. enlarge or shrink that memory region to enable read or write only permissions to memory pages within the region.

In an embodiment the spawned micro VM N is generally equivalent to VM 0 and therefore exposes the kernel resources to the user mode process . Illustratively the spawned micro VM N is a copy of VM 0 that is restricted to monitoring e.g. tracing only that process . The instrumentation logic N of the spawned micro VM N may be configured to perform further instrumentation on the potentially suspicious system call and thus may issue one or more hyper calls over interfaces to PD N requesting e.g. more restricted changes to the capabilities of PD N. Moreover the micro VM N may issue one or more additional hyper calls to PD N to e.g. trace other system calls sent by the process to the operating system kernel .

The user mode processes and operating system kernel may execute in the user space of the micro virtualization architecture although it will be understood to those skilled in the art that the user mode processes may execute in another address space defined by the operating system kernel. Illustratively the operating system kernel may execute under control of the microvisor at a privilege level i.e. a logical privilege level lower than a highest privilege level of the microvisor but at a higher CPU privilege level than that of the user mode processes . In addition VMM 0 and its spawned VMs e.g. VM 0 and micro VM 1 may execute in user space of the architecture as processes having a relatively larger code base approximately 20 000 30 000 lines of code than the microvisor primarily due to the instrumentation logic . As a type 0 virtual machine monitor VMM 0 and its spawned VM 0 and micro VMs may execute at the highest logical privilege level of the microvisor. That is VMM 0 and its spawned VM 0 and micro VMs may operate under control of the microvisor at the highest microvisor privilege level but may not directly operate at the highest CPU hardware privilege level.

As used herein privileges are logical constructs illustratively defined by operations that may be performed executed at the various privilege levels of the micro virtualization architecture . That is operations that may be executed by the microvisor at the highest CPU privilege level may not be executed by VMM 0 at its privilege level. Similarly operations that may be executed by VMM 0 at the highest microvisor privilege level may not be executed by the operating system kernel at a lower microvisor privilege level . As an example of the latter VMM 0 may execute an operation e.g. via a hyper call to instruct the microvisor to create clone a protection domain whereas the operating system kernel may not execute such an operation. As described herein operations of the various privilege levels are expressed and enforced through the use of capabilities of the microvisor i.e. privileges are bound to capabilities as configured at the microvisor. Illustratively instrumentation logic may configure the capabilities of the protection domains within the microvisor to enable analysis of interception points. For example assume access to a memory page is configured via capabilities as read only for a protection domain and a process attempts to write to that memory page. Such a memory access request is an example of an interception point which may cause trigger a violation of a capability e.g. a trap and which may result in analysis of the process and the request by e.g. switching between the privilege levels of the architecture .

As used herein a hyper call is generally similar to a system call with a primary difference that the request for service is directed to the microvisor instead of the operating system kernel. Specifically the micro virtualization architecture provides a small limited set of hyper calls each having limited arguments as a way to switch between privilege levels of the architecture. Whereas a system call may enable switching between a user mode level e.g. of user mode process and a kernel level e.g. of operating system kernel of the operating system a hyper call enables switching from user space to kernel space of the micro virtualization architecture .

In an embodiment the hyper calls are embodied as inter process communication IPC messages exposed available to VMM 0 VM 0 and any spawned micro VMs. The hyper calls are generally originated by VMM 0 and directed to the microvisor over privileged interface although VM0 and the micro VMs may also originate one or more hyper calls IPC messages directed to the microvisor over privileged interface . However the hyper calls originated by VM 0 and the micro VMs may be more restricted than those originated by VMM 0. For example micro VM 1 may attempt to issue a hyper call that instructs the microvisor to create clone a protection domain but the capabilities of protection domain PD 1 which is bound to micro VM 1 may limit or preclude successful execution of such a hyper call. In contrast the hyper calls are not available to the operating system kernel and as such the kernel may not issue such calls to the microvisor.

The operating system kernel may be configured to include an operating system OS specific VMM extension adapted to communicate with VMM 0. The OS specific VMM extension illustratively contains executable machine code in the form of logic configured to provide an interface to VMM 0 and in particular the instrumentation logic that allows introspection examination and or interception of contents of internal structures of the operating system kernel . Such introspection may involve examination of data structures of the operating system kernel in a manner that obviates duplication of i.e. without duplicating those structures. Accordingly the OS specific VMM extension may contain computer executable instructions executed by the CPU to perform operations that implement communication with and introspection by VMM 0. For example assume it is desirable to acquire identifications IDs of the user mode processes running in the operating system and that the process IDs are stored in a data structure e.g. the process table of the operating system kernel . Instead of having to duplicate that data structure and its contents the VMM 0 can instruct the OS specific VMM extension to examine the process table and provide the ID of a process . Illustratively VMM 0 may communicate with the operating system kernel i.e. the OS specific VMM extension over a defined application programming interface API .

As noted the execution context of a thread e.g. of a user mode process executing on a CPU e.g. as a virtual CPU is tightly linked to a scheduling context . In an embodiment the scheduling context may include information defining a priority of execution for its linked execution context e.g. as implemented by one or more queues . Once linked to its execution context the scheduling context may be placed inserted onto an appropriate queue having a defined priority of execution. A global scheduler of the microvisor may cooperate with the scheduling context to schedule the context for execution on a CPU . Multiple execution contexts may be bound to a same CPU or multiple CPUs . Illustratively the global scheduler manages the queues of scheduling contexts to thereby manage the CPUs in an orderly manner. To that end the global scheduler may examine the queues and determine which scheduling context execution context may run on which CPU . The global scheduler may then dispatch the scheduling context to the appropriate CPU for execution of its linked execution context .

In an embodiment the microvisor may be configured to perform scheduling of execution contexts and verification of operational requests by the execution contexts with respect to capabilities . If there is a violation of the capabilities for a protection domain a trap e.g. an exception such as a page fault or general protection fault may be generated by the CPU or other hardware and serviced by an exception handler of the microvisor. For example if a process attempts to access a resource to which the capability specifies it does not have permission the CPU may generate the trap and the exception handler may report the violation to e.g. VMM 0 for analysis. In addition the microvisor may provide VMM 0 with state information associated with the execution context executing at the time of the trap. The capability violation may trigger invocation of the instrumentation logic of VMM 0 to determine whether the process is suspicious or even an exploit and if so an appropriate course of action. Depending on the seriousness of the violation e.g. a degree of suspicion of an exploit VMM 0 may decide to e.g. change a register value issue a capability change or spawn a micro VM micro VM 1 . VMM 0 may then provide instructions to the microvisor PD 0 as to a course of action.

For instance assume the capability violation arises from an attempt by the process to execute program instructions on a memory page not permitted to execute such instructions e.g. a page table entry associated with the memory page configured with a no execute bit . As a result a page fault exception may occur that triggers invocation of the instrumentation logic which may apply heuristics to determine whether the memory page likely contains an exploit as opposed to benign program instructions e.g. just in time JIT compiler program instructions. That is the instrumentation logic may apply the heuristics to rule out eliminate the likelihood that the capability violation i.e. page fault exception is caused by benign program instructions. Notably application of the heuristics may in part also occur in the instrumentation logic of the micro VM associated with the capability violation. Illustratively the heuristics perform static analysis of the memory page to determine whether the capability violation is consistent with JIT compiler generated program instructions such as Java and JavaScript available from Oracle Corporation of Redwood City Calif. To that end the heuristics may determine whether the memory page is allocated by the process and whether the contents of the memory page contain well known program instruction sequences and headers e.g. industry standard prefix and postfix generated instruction sequences and vendor identifying headers. In contrast exploits i.e. malware typically contain non standard program instruction sequences and unusual headers. As a result the heuristics may determine that a threshold of confidence i.e. suspicion of an exploit is exceeded when it is statistically likely the memory page contains an exploit.

Illustratively the instrumentation logic of VMM 0 may include monitoring logic configured to monitor and collect capability violations in response to one or more interception points to thereby infer an exploit e.g. statistical likelihood of an exploit . Inference of an exploit may also be realized through sequences of interception points wherein for example a system call followed by another system call having certain parameters may lead to an inference that the process sending the calls is an exploit. That is an exploit may be determined dynamically from analysis of sequences of interception points. The interception point thus provides an opportunity for VMM 0 to perform light weight analysis to evaluate a state of the process in order to detect a possible exploit without requiring any policy enforcement. That is policy enforcement is not necessary to detect the process as an exploit. VMM 0 may then decide to spawn a micro VM and configure the capabilities of its protection domain to enable deeper monitoring and analysis e.g. through interception points and capability violations in order to determine whether the process is an exploit. Notably the analysis may also classify the process as a type of exploit e.g. a stack overflow and may even identify the exploit. As a result the invocation of instrumentation and monitoring logic of VMM 0 and its spawned VMs in response to interception points originated by operating system processes and capability violations generated by the microvisor advantageously enhance the virtualization system described herein to provide an exploit detection system configured for real time security analysis of the operating system processes executing on the node.

VMM 0 may also log the state of the monitored process within system logger . In an embodiment the state of the process may be realized through the contents of the execution context e.g. CPU registers stack program counter and or allocation of memory executing at the time of each capability violation. In addition the state of the process may be realized through correlation of various activities or behavior of the monitored process. The logged state of the process may thereafter be exported from the system logger to another node of the network environment by e.g. forwarding the state as one or more IPC messages through VMM 0 VM 0 and OS specific VMM extension and onto a network protocol stack of the operating system kernel. The network protocol stack may then format the messages as one or more packets for transmission over the network .

At step VMM 0 may generate a hyper call in response to the system call notification that is forwarded over interface to protection domain PD0 of the microvisor which as noted illustratively executes at the highest CPU privilege level. At step the microvisor executes the hyper call e.g. via an interrupt to place the CPU into the highest privilege level and at step passes control to PD 0 i.e. the execution context associated with the thread to determine whether the thread may be granted access to the resource. At step the CPU may check the permission via the capabilities of the process thread via its execution context to access the requested resource. If it has the appropriate permission step the requested access of the thread is allowed to execute at step and the result of the execution may be returned to VMM 0 in step . Illustratively instrumentation logic of VMM 0 may determine whether further analysis of the result is warranted or whether the result can be returned to the operating system kernel . The procedure then ends at step .

However if the thread does not have the appropriate permission to access the resource at step i.e. the request violates a capability of PD 0 an exception occurs and a capability violation trap is generated that is serviced by the exception handler of the microvisor at step . The capability violation may then be reported to VMM 0 e.g. over interface at step along with illustratively an inquiry as to whether the requested access to the resource should proceed. For example assume the thread requests access to a page of the memory. The capabilities associated with protection domain PD 0 may be configured to e.g. deny read or write access to that memory page. Accordingly each time the thread attempts to read or write that memory page a capability violation e.g. an exception is generated by hardware that is serviced e.g. caught by the exception handler and pushed to VMM 0. VMM 0 may then determine whether or not to allow PD0 to execute the requested access to the resource.

In an embodiment VMM 0 may determine that the requested access is suspicious and at step decide to spawn a micro VM micro VM 1 to further analyze the access requested by the thread. VMM 0 may then issue a hyper call over interface to the microvisor instructing the microvisor to create PD 1 by e.g. cloning PD 0 step . At step VMM 0 may also instruct the microvisor to configure PD 1 with capabilities that are more restricted than PD 0 with respect to access to the kernel resources. At step micro VM 1 may monitor the process thread in response to violations of the restricted capabilities. That is the more restricted capabilities may be configured to generate more capability violations than those generated by the capabilities of PD 0 and in turn enable further monitoring of the thread process as it attempts to access kernel resources of the node. For instance the different restricted capabilities of PD 1 may generate more capability violations allowing for greater monitoring of behavior and thus push more reports to micro VM 1 in response to attempted accesses to different pages of memory or to different types of devices i.e. kernel resources . The micro VM 1 may then monitor the attempted accesses and their results to determine e.g. whether the process is an exploit attempting to inject malware into the node.

To that end the instrumentation logic of micro VM 1 may decide to trace e.g. monitor the thread e.g. of user mode process and shadow the requested resource i.e. the memory page . In an embodiment micro VM 1 may request shadowing e.g. using copy on write of the resource in order to perform further analysis and in that context shadowing is dependent on the instrumentation logic . Assume further that the instrumentation logic B of the micro VM 1 decides to trace user mode process and in particular trace its write access to the memory page. Once the process e.g. its thread attempts to access that page micro VM 1 may request allocation of a shadow memory page. Alternatively if different instrumentation of micro VM 1 decides to trace accesses by the process to e.g. a registry of the operating system which is typically a file micro VM 1 may request shadowing of those accesses to a file system of the node. Notably shadowing of accesses by the thread process may also be logged e.g. to system logger for further analysis.

Accordingly the micro VM 1 may issue a hyper call over interface to the microvisor requesting allocation of memory to be used as shadow memory for the page at step . In response the microvisor may allocate a shadow page of memory for use by the micro VM 1 to analyze the process thread and its write access at step . When the thread of the traced process sends a system call to access the memory page micro VM 1 may request that PD 1 resolve an original virtual address of that page to the different allocated shadow page. Thereafter every subsequent write access by the traced process may be analyzed via a copy on write operation that directs the write access to that shadow page. Assume also that user mode process attempts to access the memory page at the original virtual address. Here the memory access is directed to the memory page via PD 0 which may execute the request in an efficient manner so as to maintain a timely experience of a user of the user mode process . In contrast when the traced process attempts to access the memory page at the virtual address the memory access is directed through PD1 to the shadow page to enable deeper and potentially more time consuming analysis.

Illustratively the microvisor associates the kernel resource that the traced e.g. monitored process attempts to access to the actual resource that the protection domain PD 1 accesses e.g. the shadow memory page. In essence the microvisor implements shadowing but the shadowing is initiated and configured by micro VM 1. At step the instrumentation logic B of micro VM 1 may cooperate with instrumentation logic of VMM 0 to log capability violations of thread s process s accesses to the kernel resource in system logger as well as other events such as other access requests that may be used for correlation while shadowing observing the results of the accesses. Such logging and shadowing enables the microvisor to observe any and all potential attacking behavior threats exhibited by the process exploit . The logging of violations and threats may be collected and maintained as intelligence i.e. threat intelligence for further analysis and use by the microvisor and micro VM 1. The procedure then ends at step .

While there have been shown and described illustrative embodiments for deploying the threat aware microvisor in an exploit detection system of a node to control and analyze access requests associated with interception points to kernel resources of the node it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the embodiments herein. For example embodiments have been shown and described herein with relation to disposing the microvisor directly over native hardware of the node to enable the microvisor to execute at the highest CPU privilege level so as to virtualize the hardware and control access to the kernel resources of the node. However the embodiments in their broader sense are not so limited and may in fact allow disposing of the microvisor over a virtual machine which provides a virtualization layer overlaying the hardware. That is the microvisor may alternatively execute on i.e. be disposed over a hypervisor such as ESXi from VMware Inc. of Palo Alto Calif. which may virtualize and control privileges to the native hardware. For this alternative embodiment the microvisor may execute at a higher CPU privilege level than the software modules overlaying it yet at a lower CPU privilege level than the underlying virtualization layer.

Advantageously the threat aware microvisor described herein may be implemented in any node of a network environment to provide an enhanced virtualization system e.g. an exploit detection system configured to detect anomalous behavior indicative of exploits in real time operation of the node. In addition the microvisor may be implemented in a resource and operationally efficient i.e. light weight manner that maintains user experience at the node.

The foregoing description has been directed to specific embodiments. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the components and or elements described herein can be implemented as software encoded on a tangible non transitory computer readable medium e.g. disks and or CDs having program instructions executing on a computer hardware firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the embodiments herein. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the embodiments herein.

