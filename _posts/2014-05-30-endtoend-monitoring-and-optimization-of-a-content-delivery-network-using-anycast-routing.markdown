---

title: End-to-end monitoring and optimization of a content delivery network using anycast routing
abstract: Some embodiments implement systems and methods to monitor CDN performance from the end user's perspective. To achieve full end-to-end monitoring, the systems and methods monitor the performance of Anycast routing for routing an end user to the optimal PoP of the CDN and monitor the performance of different routes that deliver content from the optimally selected PoP back to the end user. Systems and methods are also provided to leverage the monitored performance in order to automatically optimize the performance of the CDN by optimizing or modifying Anycast routing and by performing route grooming as needed to ensure that the optimal route is selected to deliver content to different sets of end users that request content from a particular PoP.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09391856&OS=09391856&RS=09391856
owner: VERIZON DIGITAL MEDIA SERVICES INC.
number: 09391856
owner_city: Los Angeles
owner_country: US
publication_date: 20140530
---
This application is a continuation of U.S. nonprovisional application Ser. No. 13 286 470 entitled End to End Monitoring and Optimization of a Content Delivery Network using Anycast Routing filed Nov. 1 2011. The contents of application Ser. No. 13 286 470 are hereby incorporated by reference.

The present invention relates to a content delivery network CDN and more specifically to techniques to monitor and optimize the CDN.

Content delivery networks CDNs have greatly improved the way content is transferred across data networks such as the Internet. A CDN accelerates the delivery of content by reducing the distance that content travels in order to reach a destination. To do so the CDN strategically locates surrogate origin servers also referred to as caching servers or edge servers at various points of presence PoPs that are geographically proximate to large numbers of content consumers and the CDN utilizes a traffic management system to route requests for content hosted by the CDN to the edge server that can optimally deliver the requested content to the content consumer. As used hereafter optimal delivery of content refers to the most efficient available means with which content can be delivered from a server to an end user machine over a data network. Optimal delivery of content can be quantified in terms of latency jitter packet loss distance and overall end user experience.

Determination of the optimal edge server may be based on geographic proximity to the content consumer as well as other factors such as load capacity and responsiveness of the edge servers. The optimal edge server delivers the requested content to the content consumer in a manner that is more efficient than when origin servers of the content provider deliver the requested content. For example a CDN may locate edge servers in Los Angeles Dallas and New York. These edge servers may cache content that is published by a particular content provider with an origin server in Miami. When a content consumer in San Francisco submits a request for the published content the CDN will deliver the content from the Los Angeles edge server on behalf of the content provider as opposed to the much greater distance that would be required when delivering the content from the origin server in Miami. In this manner the CDN reduces the latency jitter and amount of buffering that is experienced by the content consumer. The CDN also allows the content provider to offload infrastructure configuration and maintenance costs while still having the ability to rapidly scale resources as needed. Content providers can therefore devote more time to the creation of content and less time to the creation of an infrastructure that delivers the created content to the content consumers.

As a result of these and other benefits many different CDNs are in operation today. Edgecast Akamai Limelight and CDNetworks are some examples of operating CDNs. One of the key differentiators between the CDNs is performance. Based on routing techniques number of PoPs load etc. some CDNs are able to consistently provide better performance when delivering content to end users than other CDNs. The improved performance may be on the order of tens or hundreds of milliseconds. For certain content such as streaming content the improved performance can make a noticeable difference for the end user experience. This performance difference can also be a determinant factor as to whether an end user completes a commercial transaction subscribes for a service or content or stays on the site of one content provider or visits a site of another content provider.

To differentiate itself from other CDNs on the basis of performance Edgecast utilizes Anycast routing. Anycast is a routing methodology that is well known in the art in which a content request is routed to the topologically nearest PoP from a group of PoPs that are all identified with the same destination address wherein each PoP of the group of PoPs contains at least one server that can serve the content requested by the end user. In this manner Edgecast resolves end user requests to servers within its CDN that can optimally serve the requested content to the end user.

While use of Anycast routing within the Edgecast CDN has proven to provide performance improvements over other routing methodologies used by other CDNs the decentralized and distributed control over Anycast routing renders existing monitoring tools unsuitable for Anycast performance analysis. To accurately monitor Anycast performance in a CDN environment it is necessary to derive performance results from the perspective of the CDN end users as it may be the case that in certain scenarios Anycast routing does not produce optimal routing for certain end users that request content from the CDN. For example servers of a first PoP being routed to by Anycast routing may deliver content to some end users less optimally than servers of a second PoP.

Furthermore a fully optimized CDN is one that is optimized from end to end. End to end optimization involves optimizing the entire end user experience from the routing of the end user to an optimal PoP to the optimized delivery of the requested content from the optimal PoP to the end user. The latter portion of the end user experience depends partly on the ability of a transit provider or peering neighbor connecting the PoP to the end user to deliver the content in an efficient manner. A CDN can utilize the routes of different transit providers and the routes of different peering neighbors to connect to the end users. The different routes are subject to different loads bandwidth delay packet loss etc. Therefore to fully optimize the CDN service it is necessary to monitor the performance of the different routes and to select the route that delivers content from a particular PoP of the CDN to a particular end user in the most efficient manner.

Accordingly there is a need to monitor Anycast performance in a CDN to identify optimization opportunities for the CDN whereby content delivery from the CDN to the end user can be improved in terms of one or more of latency jitter packet loss distance and overall end user experience. Specifically there is a need to perform such monitoring from the end users perspective in order to ascertain whether the Anycast selected PoP or server is the optimal PoP or server for the end user and to optimize Anycast routing when the selected PoP or server is not optimally selected by Anycast routing. There is further a need to monitor the performance of the different transit provider routes and the different peering neighbor routes connecting end users to the CDN services and to select the most efficient route for delivering content from different PoPs to different sets of end users.

It is an object of the embodiments described herein to perform end to end performance monitoring for a content delivery network CDN or any other service provider that provide a content delivery service from distributed network locations. To this end it is an object to monitor the performance of Anycast routing as it relates directly to the end users utilizing the services of the CDN. Furthermore it is an object to monitor the content delivery performance of the CDN on different transit provider routes and peering neighbor routes. It is also an object to leverage the performance monitoring results to optimize the performance of the CDN to resolve performance issues directly experienced by one or more end users.

To achieve these and other objects some embodiments implement systems and methods to monitor CDN performance from the end user s perspective. To achieve full end to end monitoring the systems and methods monitor the performance of Anycast routing for routing an end user to the optimal PoP of the CDN and monitor the performance of different routes that deliver content from the selected optimal PoP back to the end user. More specifically the monitoring determines whether the Anycast selected PoP is the optimal PoP for serving content to a particular end user and for identifying whether a route used by the selected PoP to deliver content to the particular end user is the optimal route. Systems and methods are also provided to leverage the monitored performance in order to automatically optimize the performance of the CDN by optimizing or modifying Anycast routing and by performing route grooming as needed to ensure that the optimal route is selected to deliver content to different sets of end users that request content from a particular PoP. In some embodiments the optimal route includes a route that is selected from routes of different transit providers and peering neighbors that connect the particular PoP to the sets of end users.

To perform the performance monitoring some embodiments embed monitoring code into various content that is served from 1 the PoPs of the CDN or 2 CDN partners that agree to embed the monitoring code into content that is served from their independently controlled servers. CDN partners may include content providers that operate one or more servers independent of the CDN and specialized monitoring servers of a third party monitoring service as some examples. When content embedded with the monitoring code is downloaded and processed by an end user machine the monitoring code causes the end user machine to derive end to end performance results for the CDN and to report the results back to a monitoring server at which point the performance results can be analyzed to identify optimization opportunities for the CDN. The monitoring server may be operated by the CDN or by a third party monitoring service.

The monitoring code includes instructions to cause the end user machine to contact a location identification service in order to identify a location for the end user machine. The monitoring code further includes instructions to cause the end user machine to download a beacon object from a PoP of the CDN that is identified as a result of Anycast routing and to download the same beacon object from a set of geographically proximate PoPs of the CDN that is identified based on the identified location of the end user machine. The monitoring code further includes instructions to cause the end user machine to measure the time to download the beacon object from the Anycast PoP and each PoP of the set of geographically proximate PoPs. Other performance monitoring may also be performed when downloading the beacon object for example to determine whether the end user machine is blocked from accessing the Anycast PoP that is addressed using an Anycast address. The time measurements and other monitoring results are then reported from the end user machine to the monitoring server for analysis in determining whether Anycast routing routes the end user to the optimal PoP and whether Anycast routing is blocked for certain end users.

In some embodiments the embedded code further includes instructions for monitoring the performance of different routes that a particular PoP can use to serve the beacon object to the end user machine. The routes include routes provided by different transit providers that fully or partially connect the particular PoP to the end user machine. Additionally the routes include the routes of zero or more peering neighbors that fully or partially connect the particular PoP to the end user machine. The monitoring code causes the end user machine to download the beacon object from the particular PoP using different routes and to measure the time it takes to download the beacon object using each of the different routes from that particular PoP. The end user machine reports the measurements to the monitoring server for analysis in determining whether the default route or route normally used to deliver content to a particular end user or group of end users is optimal or whether an alternate route should be used when delivering content from the particular PoP to the particular end user or group of end users.

In this manner the monitoring server over time accumulates an expansive set of monitoring data from which optimizations to the Anycast routing and route selection can be made. These optimizations include implementing rules that 1 modify Anycast routing to certain over utilized or under utilized PoPs 2 modify Anycast routing for perceived traffic patterns at different times e.g. day week season etc. or 3 modify Anycast routing for certain content types e.g. use Anycast routing to resolve requests for streaming content and use static routing to resolve request for small objects . In some embodiments the optimizations include route grooming to select the optimal route from multiple transit provider routes and from zero or more peering neighbor routes over which to optimally serve content to an end user or group of end users.

In the following detailed description numerous details examples and embodiments for systems and methods for end to end content delivery network CDN performance monitoring and optimization are set forth and described. As one skilled in the art would understand in light of the present description these systems and methods are not limited to the embodiments set forth and these systems and methods may be practiced without some of the specific details and examples discussed. Also reference is made to the accompanying figures which illustrate specific embodiments in which the systems and methods can be practiced. It is to be understood that other embodiments can be used and structural changes can be made without departing from the scope of the embodiments herein described.

To aid in the discussion below an overview of an exemplary CDN infrastructure is presented in . As shown in the infrastructure includes a distributed set of edge servers traffic management servers and an administrative server . The figure also illustrates the interactions that CDN customers including content providers have with the CDN and interactions that content consumers or end users have with the CDN.

Each edge server of the set of edge servers may represent a single physical machine or a cluster of machines that serves content on behalf of different content providers to end users. The cluster of machines may include a server farm for a geographically proximate set of physically separate machines or a set of virtual machines that execute over partitioned sets of resources of one or more physically separate machines. The set of edge servers are distributed across different edge regions of the Internet to facilitate the last mile delivery of content. Each cluster of servers at a particular region may represent a point of presence PoP of the CDN wherein an end user is typically routed to the closest PoP in order to download content from the CDN with the goal of reducing the time needed to deliver the content to the end user.

The traffic management servers route end users and more specifically end user issued requests for content to the one or more edge servers. Different CDN implementations utilize different traffic management schemes to achieve such routing to the optimal edge servers. For the purposes of the discussion that is to follow the traffic management scheme performs Anycast routing to identify a server from the set of servers that can optimally serve requested content to a particular end user requesting the content. However it should be apparent that the traffic management servers can include different combinations of Domain Name System DNS servers load balancers and routers performing Anycast or Border Gateway Protocol BGP routing.

The administrative server may include a central server of the CDN or a distributed set of interoperating servers that perform the configuration control and reporting functionality of the CDN. Content providers register with the administrative server in order to access services and functionality of the CDN. Accordingly content providers are also referred to as customers of the CDN. Once registered content providers can interface with the administrative server to specify a configuration upload content and view performance reports. The administrative server also aggregates statistics data from each server of the set of edge servers and processes the statistics to produce usage and performance reports. From these reports the content provider can better understand the demand for its content the performance provided by the CDN in delivering the content provider s content and the need for capacity reallocation among other uses.

To further aid in the discussion the terms transit provider and peering neighbor are defined. A transit provider is a backbone carrier of content that provides routes over which the content can traverse different networks of the Internet. Telia and NTT are some examples of transit providers whose routes can be used to exchange traffic between the different networks of the Internet. The networks or endpoints of the networks may be represented by the CDN PoPs end user machines and smaller autonomous systems ASes . ASes may include Internet Service Providers ISPs that provide Internet connectivity to sets of end users. The transit providers provide high bandwidth and low latency routes to connect the various networks albeit at a cost. In some embodiments transit provider routes can be avoided by peering with other networks such that the content traverses only between peered neighbor networks i.e. peering neighbors that do not charge to carry another peered neighbor s content based upon an established level of reciprocity. An optimal route to deliver content from a PoP to an end user is one that is optimal with respect to several criteria including cost latency number of hops jitter etc.

Some embodiments implement systems and methods to monitor end to end CDN performance. One aspect of end to end performance monitoring includes monitoring the performance of Anycast routing in the CDN from the end user s perspective. Such monitoring is used to determine whether the Anycast selected PoP is the PoP that optimally serves content to the end user or whether another geographically proximate PoP optimally serves content to the end user. Such monitoring is also used to determine whether certain end users are blocked from accessing certain PoPs with Anycast routing. Another aspect of end to end performance monitoring includes monitoring the content delivery performance for routes of different transit providers and peering neighbors that connect a PoP to an end user. Such monitoring reveals whether content is delivered to the end user using the most efficient route connecting the end user to the PoP.

These performance monitoring systems and methods generate reports to provide a holistic view of the CDN s performance from the perspective of the end users. The monitoring results and or reports can also be used to periodically identify optimization opportunities for improving Anycast routing performance and content delivery performance and to automatically implement the changes necessary to realize these optimizations as conditions in the CDN and across the network change. In this manner the systems and methods automatically tune the performance of the CDN such that the resulting optimizations address performance issues that the end users experience with regards to Anycast routing and content delivery thereby producing a direct end to end performance improvement in the capabilities of the CDN.

To perform the end to end CDN performance monitoring some embodiments utilize a combination of software and hardware components. These components may be developed and hosted by the CDN for internal use in monitoring and optimizing its CDN service. Alternatively these components may be developed and hosted by a third party monitoring service that monitors the performance of various CDNs and other service providers that serve content from distributed network locations. Accordingly the software and hardware components may be located on servers that are operated independent of the servers of the CDN but that are communicably coupled to the CDN to report the monitoring results and optimization opportunities to the CDN.

The software component includes monitoring code that is embedded into content that is requested by and executed by an end user machine. The content that is embedded with the monitoring code may be served from the edge servers of the CDN or from servers that are operated independent of the CDN. For instance the embedded content may be served from origin servers that are operated by different content providers that serve a base page i.e. base HyperText Markup Language HTML but that rely on edge servers of the CDN to serve objects embedded within the base page. As another example the embedded content may be served from servers that are operated by a monitoring service. Accordingly the embedded content can be served from any network accessible server and the embedded content can nevertheless be used in monitoring various performance aspects of a particular CDN service such as the below described Anycast performance monitoring and route performance monitoring.

The hardware component includes a monitoring server that aggregates the end user derived performance results from the end users executing the monitoring code. The monitoring server produces the performance reports detailing the end to end CDN performance as realized from the perspective of the end users. Additional analysis performed by the monitoring server may include identifying optimization opportunities for the CDN based on the aggregated monitoring results and depending on the integration of the monitoring server with the CDN the monitoring server may leverage the aggregated monitoring results to automatically optimize performance of the CDN on a continual basis as routing and route conditions change. The monitoring server may be integrated as part of the CDN infrastructure such that it is hosted and maintained by the CDN. In some embodiments the monitoring server is integrated with the command and control functions of the CDN administrative server. Alternatively the monitoring server may be hosted and maintained by a third party monitoring service that monitors the performance of a CDN on behalf of the CDN. The monitoring server can then communicably couple to an administrative server of the CDN to report the monitoring results and optimization opportunities back to the CDN. Alternatively a CDN administrator can access the monitoring server of the third party monitoring service in order to retrieve the monitoring results and optimization opportunities.

The addressing and procedures for reporting end user derived performance results to the monitoring server are included in the monitoring code. In so doing any end user machine that downloads content that is embedded with the monitoring code becomes a monitoring agent for the CDN. As a result the CDN can obtain a virtually unlimited number of vantage points for understanding and optimizing its performance in an automated way.

In some embodiments the monitoring code is a set of JavaScript instructions embedded at various points in Internet based content such as HTML pages CSS pages XML pages streaming content and other such content. An end user machine receives the content using existing Internet protocol and messaging e.g. HyperText Transfer Protocol HTTP GET request and processes the content in a browser or other application running on the end user machine. During processing of the content the end user machine will execute the monitoring code and produce various performance results related to the CDN service.

The CDN or monitoring service may designate what content is to be embedded with the monitoring code. This may include embedding the monitoring code into content of certain content providers that have permitted the CDN or monitoring service to do so. Additionally this may include embedding the monitoring code into content that is fully controlled by the CDN. Some such content includes status or error pages served by the CDN. For example HyperText Transfer Protocol HTTP 404 403 303 and 301 pages can be embedded with the monitoring code. Additionally base HTML pages of different content providers can be embedded with the monitoring code.

The listing below illustrates embedding monitoring code in a HTTP 404 error page that is served by the CDN a CDN partner or third party monitoring service when requested content is improperly identified or does not exist 

Of particular importance are lines 7 9 . In line 7 the instruction loads the Google Libraries Application Programming Interface API for location identification services the use of which is described below. In lines 8 and 9 the instruction loads a JavaScript file that contains the instructions for executing the Anycast performance monitoring and route performance monitoring in accordance with some embodiments. The performance monitoring is performed by the end user machine as it parses the HTML content to display the 404 error. In some embodiments the monitoring code is executed in the background by the end user machine so that the display of the user is unaffected. To do so the monitoring code is executed within one or more hidden HTML iframes that are loaded as part of the JavaScript file in lines 8 and 9 . Processes are provided with reference to the figures below to describe execution of the monitoring code to monitor Anycast routing performance and to monitor route performance.

The process obtains at the location or an estimate for the location of the end user machine. The process then calculates at the distance from the end user machine to a set of PoPs of the CDN. In some embodiments the set of PoPs includes all PoPs of the CDN such that the calculation step at calculates the distance from the end user machine to all PoPs of the CDN. In some embodiments the set of PoPs includes a subset of all PoPs of the CDN that are selected for monitoring. To perform the distance calculation the monitoring code of some embodiments is hardcoded with the location i.e. latitude and longitude coordinates for each PoP of the set of PoPs. However it should be apparent that a location for each PoP of the set of PoPs can be dynamically obtained by inserting an instruction in the monitoring code that causes the end user machine to retrieve the location information from a particular server of the CDN.

Based on the distance calculation the process identifies at a subset of the set of PoPs that are geographically proximate to the location of the end user machine. In some embodiments identifying the subset of the PoPs includes identifying the five PoPs that are geographically closest to the location of the end user machine. Each PoP is identified in the monitoring code with an IP address. The IP address may directly address a load balancing device of a particular PoP that distributes load across the edge servers operating in that particular PoP. It should be apparent that each PoP or load balancing device may also be assigned a second IP address that is an Anycast IP address.

In some embodiments the process also identifies at the Anycast PoP for the end user machine by submitting a request e.g. AJAX request to an Anycast IP address that is specified in the monitoring code and by extracting the identity of the Anycast PoP from the response header that is returned as a result of the submitted request. Identification of the Anycast PoP is performed prior to requesting and downloading the beacon object so that the process is able to distinguish between the Anycast PoP and the subset of PoPs that are geographically closest to the end user machine when downloading the beacon object at steps below. It should be apparent to one of ordinary skill in the art that the Anycast PoP can be identified in various other ways depending on the scripting language the monitoring code is implemented in and the level of access that the end user machine provides to the process. In some embodiments step for identifying the Anycast PoP prior to downloading the beacon object may be omitted when the process has access to the TCP IP stack of the end user machine and can extract the source IP address that is included in the packet containing the beacon object.

The process submits at requests to download the same beacon object from each PoP of the subset of PoPs and from the Anycast PoP. It may be the case that the Anycast PoP is one of the PoPs within the subset of PoPs however this does not impact the derived results or reporting. The beacon object is a file of negligible size approximately 10 kilobytes that is stored on servers of each of the PoPs. The request to download the beacon object from each PoP of the subset of PoPs is directly addressed to the unique IP address of each PoP. The request is typically in the form of an HTTP GET request. To download the beacon object from the Anycast PoP the process submits a request for the beacon object that is addressed to an Anycast IP address of the CDN.

The process starts at a different timer for each request. The timer may be started immediately before or immediately after sending of a request. Using the timers the process measures at the roundtrip time and other performance parameters associated with downloading the beacon object from the Anycast PoP and each of the subset of closest PoPs. In some embodiments other performance parameters can be derived by downloading different beacon objects from the PoPs wherein the different beacon objects may include objects with different sizes and or content types that are downloaded from each of the subset of PoPs and the Anycast PoP. By downloading one or more of the beacon objects the process can measure link congestion packet loss retransmits latency etc. Yet another performance parameter of importance when performing Anycast performance monitoring is determining which users are blocked from the Anycast PoP by intermediary networks connecting the end user to the Anycast PoP. This may occur for example when an intermediary network country or region has a particular policy such as an obscenity policy for content entering its network. As a result of the policy the intermediary network may ban certain content that is served by the CDN. However because the banned content and the acceptable content of the CDN may be accessed using the same Anycast address it may be the case that the intermediary network blocks certain end users from all content of the CDN. The monitoring code identifies such blockages when the beacon object cannot be downloaded from the Anycast PoP but can be downloaded from one or more of the geographically proximate PoPs that are directly addressed with a unique IP address instead of the Anycast address. Such monitoring is essential to the CDN to maintain service uptime and such blockages could otherwise be unknown to the CDN but for the ability to monitor Anycast performance from the end user perspective.

The process then reports at the results to the monitoring server and the process ends. The results may also include identification of the Anycast PoP and other PoPs from which the beacon object was downloaded i.e. IP addresses Virtual IP addresses assigned names etc. . The results may further identify the end user machine by including as some examples the end user machine IP address location and type of machine as part of the results that are reported to the monitoring server. In some embodiments the monitoring server automatically identifies the location of the end user machine that reports results based on the IP address of that machine. For example the monitoring server utilizes the Maxmind geolocation API to determine end user locations based on the IP address of the end user machine that is obtained from the source IP address field of the packet that includes the reported results. In some embodiments the IP address and procedure for reporting the results to the monitoring server is hardcoded in the monitoring code. In some embodiments the results are inserted as part of a URL that is passed to the monitoring server. As described below the monitoring server produces performance reports based on the end user derived performance results and may furthermore automatically optimize Anycast routing performance based on the Anycast performance monitoring performed by the end users.

Upon processing the embedded monitoring code the end user submits at a location request to the location identification service that then replies at to the end user with the end user s location. As noted above the monitoring code as a failover may also estimate the location of the end user based on the time zone in which the end user is located.

Though not shown in this figure the end user identifies 1 the PoP that is selected to service the end user as a result of Anycast routing i.e. the Anycast PoP and 2 a set of PoPs that are geographically closest to the end user . Next the end user starts multiple timers in conjunction with issuing requests at for the same beacon object from the Anycast PoP and the two PoPs and that are geographically closest to the end user . The end user measures at the roundtrip time to download the beacon object from the Anycast PoP measures at the roundtrip time to download the beacon object from the first closest PoP and measures at the roundtrip time to download the beacon object from the second closest PoP . The performance results i.e. roundtrip times measured at steps and as well as various identification information are then reported at to the monitoring server for analysis and CDN optimization as described in Section II below. The identification information includes identifying the PoP from which a particular measurement is derived identifying the end user and optionally identifying a location of the end user .

The monitoring code described above monitors Anycast performance from an end user s perspective and is useful in determining whether the end user is being routed to the optimal PoP from which to receive content and in determining if certain end users are blocked from accessing an Anycast address of the CDN. In some embodiments the monitoring server aggregates the monitoring results reported by a group of end users and the monitoring server organizes the results based on the location of the end users to generate reports that present a holistic view of the Anycast routing performance from the perspective of the end users. The reports can also be used to identify optimization opportunities for improving Anycast routing performance which the monitoring server can automatically implement in some embodiments. These optimizations can then ensure that an end user is routed to the optimal PoP even when the optimal PoP is different than the one that would otherwise be selected as a result of Anycast routing. For example the optimizations can resolve issues for end users that are blocked from accessing the CDN Anycast address.

The monitoring interval limits the Anycast performance monitoring to include performance results derived by end users during the specified interval. By continually updating the interval to include the latest set of aggregated results the monitoring server or a CDN administrator can obtain temporally relevant information from which the CDN service can be optimized.

In this figure column presents the median delay that end users experienced when downloading the beacon object from their Anycast selected PoP. Column presents the average delay that end users experienced when downloading the beacon object from their Anycast selected PoP. Columns and present the median and average rankings for identifying whether a PoP was indeed the optimal PoP for the end users that were routed to that PoP as a result of Anycast routing. To compute the average and median rankings for a particular PoP the monitoring server first computes a ranking for each end user that was routed to the particular PoP as a result of Anycast routing. A ranking of 1 indicates that the end user was able to download the beacon object from the Anycast PoP faster i.e. less delay than from other PoPs. A ranking of 2 indicates that the end user was able to download the beacon object from one PoP faster than from the Anycast PoP. Then for the end users of a particular Anycast PoP the monitoring server determines the median and average rankings.

Other reporting and uses of the Anycast performance monitoring results include identifying which end users are blocked from accessing content that is addressed using the CDN Anycast address identifying which end users are routed to which PoPs which ASes reach which PoPs which country states or geographic regions reach which PoPs which prefix addresses reach which PoPs what are the hot ASes that provide a majority of traffic to the CDN what is the beacon object download latency from the end user s perspective and the overall effectiveness of Anycast routing compared to other routing schemes.

To provide comprehensive end to end monitoring some embodiments further provide an independent or complimentary set of monitoring code to monitor performance of the transit provider routes and peering neighboring routes through which content can be served from a PoP to the end user. For reasons of performance and redundancy CDNs often connect their PoPs to other networks or ASes via multiple routes that are operated by different transit providers or neighboring networks that the CDN has an established peering relationship with. Through each of these routes the PoP is able to exchange traffic with the ASes in order to ultimately reach the end user. However each of the routes may provide different levels of performance as a result of experiencing different levels of congestion load delay etc. Moreover each of the routes may be subject to different costs considerations. Collectively these different levels of performance and cost consideration determine which route of the set of routes connecting a PoP to an end user is optimal. Therefore by measuring route performance and accounting for cost considerations the CDN can optimize its content delivery service to provide the best possible end user experience. Then together with the Anycast performance monitoring the CDN can fully optimize its service so that the end user is routed to the most optimal PoP and the end user receives content from that PoP through the most optimal route.

The monitoring code for route performance monitoring may be embedded in various content served by the CDN CDN partners or third party monitoring service. This may include embedding the monitoring code into content of certain content providers that have permitted the CDN or monitoring service to do so. Additionally this may include embedding the monitoring code into content that is fully controlled by the CDN. Some such content includes status or error pages served by the CDN. For example HyperText Transfer Protocol HTTP 404 403 303 and 301 pages can be embedded with the monitoring code. Additionally base HTML pages of different content providers can be embedded with the monitoring code

Next the process obtains at addressing for downloading the beacon object from different routes of the identified PoP s . In some embodiments the addressing for the routes to and from each PoP are hardcoded in the monitoring code. A route of a peering neighbor should one exist from a particular PoP to an end user can be identified with an Anycast IP address. In such instances when a request for the beacon object is received at the particular PoP with the Anycast IP address the particular PoP will submit the beacon object over a default route which would be the route of the peering neighbor if one exists as that route should be the most direct and least cost route from the particular PoP to the end user. Each transit provider route from the particular PoP to the end user is assigned a different IP address and each IP address is associated with a routing policy that is configured at the core router of the particular PoP. Based on the IP address and routing policy the core router determines what transit provider route to use to pass packets between the particular PoP i.e. a server of the PoP and the end user machine. For example when a request for the beacon object is sent to the IP addresses 1.1.1.1 and 1.1.1.2 it may be that the request is routed to the same PoP but when the beacon object is sent to the requesting end user the address 1.1.1.1 causes the core router of the PoP to serve the beacon object using a first transit provider route and the address 1.1.1.2 causes the core router of the PoP to serve the beacon object using a second transit provider route.

The process downloads at the beacon object from each identified PoP using all of the transit provider routes and zero or more peering neighbor routes available at each identified PoP. This includes starting different timers in conjunction with submitting multiple requests to the identified PoP wherein the requests include 1 the IP addresses assigned to the different transit provider routes for the identified PoP and 2 the Anycast IP address that causes the identified PoP to pass the beacon object through a default route that may include a route of a peering neighbor if one exists. The process at measures the roundtrip time and other performance parameters associated with downloading the beacon object using each of the routes from each of the identified PoP s . The process at reports the results to the monitoring server for analysis report generation and CDN optimization and the process ends. The results reported to the monitoring server may also include identification of the end user machine including as some examples the end user machine IP address location and type of machine.

In addition to identifying the performance of the different routes from a PoP to an end user the route performance monitoring may further reveal that certain ASes or intermediary networks in between the sending PoP and the receiving end user block the passage of the beacon object when the beacon object is contained in a packet addressed using the Anycast address. Specifically the monitoring server can identify such blockages when the end user does not receive the beacon object over a default route that is addressed with the Anycast address but does receive the beacon object over a transit provider route that is address with a unique IP address.

As noted above the monitoring code causes the end user machine to download the beacon object from the PoP using each of the routes and by requesting the beacon object using the different IP addresses assigned to each of the routes e.g. 1.1.1.1 for the route of TP1 1.1.1.2 for the route of TP2 and 1.1.1.3 for the route of peering neighbor . The monitoring code also causes the end user machine to measure the time required to download the beacon object using each of the routes and . Since each route is of different lengths has a different number of hops suffers different amounts of congestion etc. the resulting measurements reveal which route is the optimal route for serving content from the PoP to the end user . Also the resulting measurements reveal which route blocks content from the CDN to the end user. These performance results can then be used by the monitoring server to optimize CDN service as described below.

The monitoring code described above monitors route performance from an end user s perspective and is useful in determining whether the PoP is serving content to the end user using the optimal available route. The monitoring server receiving the end users route performance monitoring results generates reports that present a holistic view for the routes from the perspective of the end users. The reports can also be used to identify optimization opportunities for improving CDN performance by ensuring that the most optimal route is selected for the end users.

As shown for PoP the results of end user monitoring are used to derive median and mean delays for a default route a route provided by the transit provider Global Crossing GBLX a route provided by the transit provide nLayer a route provided by the transit provider NTT and a route provided by the transit provider Telia. The default route may be used to respond to requests that are addressed to an Anycast address whereas each of the transit provider routes may be used to respond to requests that are addressed to specific IP addresses assigned to each of the transit provider routes. In this figure the default route is a route provided by a peering neighbor.

Based on the derived results the CDN is able to determine that the default route the route of the peering neighbor from PoP is the optimal route because it suffers the least amount of delay when passing content from the PoP to the end users. This may occur since the route of the peering neighbor can be a more direct route from the PoP to the end user when the peering neighbor is a local telco that the end user uses as its ISP to connect to the Internet. In the event that the default route is not the optimal route for a particular PoP a CDN administrator can utilize the results to identify an optimization opportunity that can be realized by switching to a more optimal transit provider route for content that is served from that particular PoP. In some embodiments the results of are considered in conjunction with route costs to determine the optimal route.

In some embodiments the monitoring server aggregates the performance results derived by each of the end users and leverages the results to optimize performance of the CDN on a continual basis as routing and route conditions change. From this information the monitoring server can then automatically optimize Anycast routing for the CDN. Some optimizations that may be made include ensuring that certain users are routed to an optimal PoP even when the optimal PoP for those users is not the Anycast PoP and distributing loads from a hot AS across multiple PoPs rather than allow a single Anycast PoP for that AS from becoming overloaded. Another optimization includes providing alternative routing for certain end users that are unable to obtain CDN content using Anycast routing or an Anycast address. It should be apparent that other optimizations can be made based on the end user derived performance results and that the optimizations enumerated herein are not intended to be limiting in any way.

Once a sufficient set of performance monitoring results have been aggregated the process sorts at the performance monitoring results to identify monitoring results for a group of related end users. The group of related end users may include end users of the same AS end users having the same IP address prefix end users that are located at the same geographic region or end users that are served by the same Anycast PoP as some examples. The sorting step may be performed on a periodic basis. For example the sorting may be conducted daily based on performance monitoring results that have been aggregated over the past twenty four hours.

Next the process compares the performance results for a particular group of end users to determine at if Anycast routing is routing the particular group of end users to the optimal PoP wherein the optimal PoP for the purposes of this example is the PoP that is reachable by the particular group of end users with the least amount of delay. This determination can be made by comparing the beacon object download time for an Anycast PoP with the beacon object download times for other PoPs that are geographically proximate to the particular group of end users. When the Anycast PoP is identified to be less optimal than another PoP the process performs at a configuration change to modify a routing policy of the CDN such that the particular group of end users is no longer routed to the Anycast PoP but to the more optimal PoP. In some embodiments the configuration change involves modifying routing policies at the border routers of a particular AS or the border routers to which the particular group of end users arrive before being routed to a CDN PoP. In some embodiments the configuration change can be performed using border gateway protocol BGP route injection or by notifying intermediate ASes from which the particular group of end users arrive of a best path that deviates from the Anycast selected path. In some embodiments the configuration change can be performed by altering BGP parameters such as Multi Exit Disc Meds local preferences weights etc. or by prepending or appending values to BGP paths to impact Anycast routing. These configuration changes can also be performed to resolve blockages experienced by certain end users that are otherwise unable to access content from the CDN via Anycast routing or the CDN Anycast address. Otherwise the particular group of end users is being optimally routed by Anycast and no further optimizations are made at this stage and the process ends.

The above optimizations apply to Anycast routing to ensure that the end users are being routed to the optimal PoP even in scenarios where the Anycast selected PoP is less optimal than other available PoPs or the Anycast PoP is blocked. To complete the end to end CDN optimizations the monitoring system further leverages the performance monitoring results to configure selection of the optimal route to deliver content from the optimally selected PoP to the end users where the optimal route can be provided by any one of several transit provider routes or routes of one or more peering neighbors that connect the optimal CDN PoP to a set of end users.

The process selects at a next PoP for optimization. The process sorts at the aggregated performance results for the selected PoP. Next the process performs at a second sorting to identify the end users that are optimally served by each route from the selected PoP. The process analyzes at each set of end users that are optimally served by a particular route. Based on the analysis the process adjusts at routing policies at the core router of the selected PoP such that each set of end users being served by the selected PoP are served by an optimal route. For example a first set of end users coming from a first AS to a particular PoP may be optimally served using a route of a first transit provider while a second set of end users coming from a second AS to the particular PoP may be optimally served using a route of a second transit provider. In some embodiments the process adjusts the routing policies at the core router by inserting static routes BGP route injection or by making changes to BGP parameters such as AS based routing weights and other parameters available in commercial routers to force certain prefixes or AS paths to prefer certain transit or peering connections. These adjustments can also resolve blockages that are experienced by certain end users. For example a particular PoP may utilize a default route that is established with a peering neighboring to serve content to a set of end users that have the same IP address prefix. However the peering neighbor may block content that is served from the particular PoP to that IP address prefix using the peered route. Accordingly the process can adjust the routing policy at the core router of the particular PoP such that a different route provided by a transit provider is used to deliver content to the set of end users where the transit provider route avoids the peering neighbor that blocks the CDN content from being served.

The process then continues at to step for the next PoP until all PoPs have been optimized at which the process ends. The process can be performed periodically to adjust to changing route conditions thereby ensuring that the optimal route does not become stale over time. It should be apparent to one of ordinarily skill in the art that the optimization process of can be made more or less granular such that optimizations are performed on a per AS basis per IP address prefix basis or per end user basis.

Over time the monitoring server aggregates route performance monitoring results from the end users of the ASes and . From the aggregated results the monitoring server determines that the route of the second transit provider is more optimal than the route of the first transit provider for delivering content from the PoP to the first AS or to the end users that arrive from the first AS . Therefore the monitoring server automatically issues a configuration change to the core router of the PoP to optimize content delivery for the end users of the first AS . Specifically the configuration change overwrites a routing policy at the core router such that the route of the second transit provider is used for delivering content to the end users of the first AS instead of the default route of the first transit provider. From the aggregated results the monitoring server also determines that the default route from the PoP to the second AS is the optimal route and no further optimization need be made.

The monitoring and optimizations are repeated at regular intervals to account for changes in the routes. For example after six hours it may be the case that the route of the first transit provider once again is optimal with respect to the route of the second transit provider for serving content to the end users of the first AS . Consequently the monitoring server may issue a second configuration change to the core router of the PoP to revert back to the route of the transit provider when delivery content to the end users of the first AS .

Many of the above described processes and components are implemented as software processes that are specified as a set of instructions recorded on a computer readable storage medium also referred to as computer readable medium . When these instructions are executed by one or more computational element s such as processors or other computational elements like ASICs and FPGAs they cause the computational element s to perform the actions indicated in the instructions. Server computer and computing machine is meant in its broadest sense and can include any electronic device with a processor that executes instructions stored on computer readable media or that are obtained remotely over a network connection. Examples of computer readable media include but are not limited to CD ROMs flash drives RAM chips hard drives EPROMs etc. Furthermore almost everywhere that a server is identified as a component of the embodied invention it is understood that the server may be a single physical machine or a cluster of multiple physical machines performing related functions or virtualized servers co resident on a single physical machine or various combinations of the above.

The bus collectively represents all system peripheral and chipset buses that communicatively connect the numerous internal devices of the computer system . For instance the bus communicatively connects the processor with the read only memory the system memory and the permanent storage device . From these various memory units the processor retrieves instructions to execute and data to process in order to execute the processes of the invention. The processor is a processing device such as a central processing unit integrated circuit graphical processing unit etc.

The read only memory ROM stores static data and instructions that are needed by the processor and other modules of the computer system. The permanent storage device on the other hand is a read and write memory device. This device is a non volatile memory unit that stores instructions and data even when the computer system is off. Some embodiments of the invention use a mass storage device such as a magnetic or optical disk and its corresponding disk drive as the permanent storage device .

Other embodiments use a removable storage device such as a flash drive as the permanent storage device Like the permanent storage device the system memory is a read and write memory device. However unlike storage device the system memory is a volatile read and write memory such a random access memory RAM . The system memory stores some of the instructions and data that the processor needs at runtime. In some embodiments the processes are stored in the system memory the permanent storage device and or the read only memory .

The bus also connects to the input and output devices and . The input devices enable the user to communicate information and select commands to the computer system. The input devices include alphanumeric keypads including physical keyboards and touchscreen keyboards pointing devices also called cursor control devices . The input devices also include audio input devices e.g. microphones MIDI musical instruments etc. . The output devices display images generated by the computer system. The output devices include printers and display devices such as cathode ray tubes CRT or liquid crystal displays LCD .

Finally as shown in bus also couples computer to a network through a network adapter not shown . In this manner the computer can be a part of a network of computers such as a local area network LAN a wide area network WAN or an Intranet or a network of networks such as the internet. For example the computer may be communicably coupled through the network to an ingest server mid tier server edge server content provider streaming server or end user device.

As mentioned above the computer system may include one or more of a variety of different computer readable media. Some examples of such computer readable media include RAM ROM read only compact discs CD ROM recordable compact discs CD R rewritable compact discs CD RW read only digital versatile discs e.g. DVD ROM dual layer DVD ROM a variety of recordable rewritable DVDs e.g. DVD RAM DVD RW DVD RW etc. flash memory e.g. SD cards mini SD cards micro SD cards etc. magnetic and or solid state hard drives ZIP disks read only and recordable blu ray discs any other optical or magnetic media and floppy disks.

While the invention has been described with reference to numerous specific details one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. Thus one of ordinary skill in the art would understand that the invention is not to be limited by the foregoing illustrative details but rather is to be defined by the appended claims.

