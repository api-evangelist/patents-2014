---

title: Compromise free cloud data encryption and security
abstract: A cloud data encryption and security system includes a central computing authority and a network of computing devices. At least some of the computing devices are pod computing devices physically hosted by an operator. The pod computing devices include a central processing unit and a computer readable storage media in data communication with the central processing unit. Data is encrypted in the computer readable storage media so that the owner can access the data but the operator cannot access the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09607170&OS=09607170&RS=09607170
owner: 
number: 09607170
owner_city: 
owner_country: 
publication_date: 20140916
---
This application claims priority to U.S. Provisional Patent Application Ser. No. 61 988 125 filed on May 2 2014 and entitled COMPROMISE FREE CLOUD DATA ENCRYPTION AND SECURITY the disclosure of which is hereby incorporated by reference in its entirety.

Large commercial cloud computing database storage systems store and maintain data such as e mail bank statements contact lists documents etc. that belong to individuals and or companies that entrust such database providers with preserving the utmost privacy of their data. Such database storage systems are maintained by third party vendors that own and operate the servers and databases but do not own the data stored therein. Such third party vendors or maintainers generally have legitimate access to all the resources associated with the processing device within the servers that host the databases. These maintainers are typically people working for the large cloud computing database storage providers who perform general database maintenance such as backups upgrades security checks etc. on the system. Because the maintainers have control over the processing device that accesses the privately stored information in the database the maintainers are weak points in the security of the database system. Accordingly incidences of data theft have occurred as maintainers improperly search view and or steal data belonging to an individual or company who have entrusted the commercial storage provider for safe storage of private data. Additionally larger cloud database storage providers may employ hundreds of maintainers all of whom have access to the processing device and therefore the data thereby creating a higher potential for data theft.

In general terms this disclosure is directed to a compromise free cloud data encryption and security system. One aspect is a system comprising a central computing authority and a network of computing devices at least some of the computing devices being pod computing devices physically hosted by an operator. In this embodiment the pod computing devices include a first pod computing device comprising a central processing unit and computer readable storage media in data communication with the central processing unit. The computer readable storage media stores data instructions therein executable by the central processing unit and comprises volatile memory and non volatile memory in data communication with the central processing unit. The first pod computing device further comprises a data communication device configured to securely communicate using encrypted communications across a data communication network with a first user computing device the central computing authority and other computing devices in the network. The data instructions are executable by the processing device to cause the processing device to receive a first user identifier a first password and a private key from a first user assigned to the first pod computing device using the data communication device store the first user identifier and the password in the computer readable storage media to identify the first user as the owner of the first pod computing device and store the private key in the volatile memory such that the private key is erased from the computer readable storage media when the volatile memory loses power. Additionally provided is a database storing first user data in the non volatile memory wherein the first user data is encrypted in the database using the private key of the first user such that the first user data is not accessible to the operator hosting the first pod computing device. The data instructions are further executable by the processing device to cause the processing device to write user data to the database read encrypted user data from the database decrypt the encrypted user data and store unencrypted user data in the volatile memory index at least some of the user data to perform searching or sorting of the user data and execute an interface engine for communication with the first user computing device the interface engine comprising one of an application programming interface and an application configured to generate a user interface to interact with the first user through the first computing device.

In another aspect a pod computing device is provided the pod computing device comprises a processing device a communication device and a computer readable storage media. The pod computing device further comprises a volatile storage device and a non volatile storage device in data communication with the processing device the computer readable storage media storing data instructions. When the data instructions are executed by the processing device it causes the processing device to receive a private key from a remote user computing device through the communication device store the private key in the volatile storage device use the private key to encrypt and store data in the non volatile memory and use the private key to decrypt and retrieve data from the non volatile memory. Additionally provided is a database storing data in the non volatile memory wherein the data is encrypted in the database using the private key. Additionally the data instructions are further executable by the processing device to cause the processing device to write data to the database read encrypted data from the database decrypt the encrypted data and store unencrypted data in the volatile memory index at least some of the data to perform searching or sorting of the data and execute an interface engine for communication with the computing device the interface engine comprising one of an application programming interface and an application configured to generate a user interface.

In yet another aspect of the present disclosure a computer implemented method for registering a pod computing device to a user device using a cloud encryption system is provided. In this aspect the method comprises using a central server to communicate with the user device comprising receiving a request to register the user device providing a pod computing device from a plurality of pod computing devices to the user device providing a unique identification associated with the provided pod computing device to the user device and using the pod computing device to communicate with the user device. Communicating with the user device further comprises receiving from the user device a password and a key and storing the key in a volatile memory component of the pod computing device.

Various embodiments will be described in detail with reference to the drawings wherein like reference numerals represent like parts and assemblies throughout the several views. Reference to various embodiments does not limit the scope of the claims attached hereto. Additionally any examples set forth in this specification are not intended to be limiting and merely set forth some of the many possible embodiments for the appended claims.

Embodiments of the present disclosure provide a system and method for securely storing and maintaining data in a cloud database storage system that eliminates the need to trust third party vendors to maintain privately stored data. In particular embodiments presented herein relate to eliminating access to information by the hosting provider. Specifically embodiments of the present disclosure provide for each individual user separate hardware including a processing device memory and a storage device collectively referred to as a pod computing device. According to the aspects of the present disclosure a pod computing device can be located anywhere including a user s home or office. By physically separating each individual s processing devices each user associated with that pod computing device is the only person with legitimate access to the data stored in the storage device. As an additional security measure each pod computing device is configured to store in the storage device encrypted data that is accessible using a private key known only to the user. Such a system therefore also allows for searching and indexing of encrypted data stored in the secure database. Accordingly because control over the processing device that accesses the data stored in the storage device is given only to the individual user complete security over stored data is achieved.

In embodiments the storage device stores a database which is an organized collection of data. In this example the processing device is configured to communicate with the storage device . In some embodiments the communication refers to writing data to retrieving data from or viewing data stored in the database. In some embodiments a graph database is used to store data comprising records and edges. The records include data that can be arranged in fields and the edges define the relationships between records in the database. The graph database is further described with reference to .

As shown the user computing device exchanges data with the pod computing device over the network . In some embodiments the data exchanged between the user computing device and the pod computing device is encrypted using a standard encrypted network communication protocol such as secure sockets layer SSL protocol or other types of secure encrypted communication. In some embodiments a software application runs on the user computing device enabling the user to request view and generate data.

In some embodiments the user computing device also stores a private key which may be provided by the user for example. In some embodiments the processing device uses the private key to encrypt data that is stored in the database and to decrypt data that is retrieved from the database. In some embodiments the private key is a password such as a character string provided by the user that is stored on the user computing device and in volatile memory within the pod computing device such as random access memory RAM . In some embodiments the system memory is volatile memory. Because the private key is stored in volatile memory in the pod computing device any loss of power will erase the private key from memory. Accordingly any illegitimate action by another to obtain the key such as by physically breaking into or stealing the pod computing device will erase the private key from memory. Accordingly an added level of security is achieved rendering useless any attempt to illegitimately access the pod computing device which stores encrypted data.

As shown in this embodiment the network facilitates the exchange of data between the pod computing device and the user computing device . The network also facilitates communication between one or more pods. An example of a network is the Internet. The network can include multiple communication networks that collectively perform the data communication. Examples of such networks include the Internet a local area network a wireless or cellular communication network and the like.

Accordingly the example embodiment presents a secure cloud computing system using a hardware separated pod computing device which has a physical or virtual processing device that is not shared among several users. In embodiments in which the system implements a virtual processing device a single processing device is used and the functionalities of the single processing device are divided among several users. Accordingly the virtual processing device is a physical processing device that is securely shared among several users functioning as if it were multiple individual processing devices.

Additionally encrypted data is stored in a storage device that is decryptable using a private key stored on the user computing device .

The storage device includes non volatile memory. The storage device can be remote storage that is physically located remote from the processing device but in data communication with the processing device or can be local storage such as being physically located on the pod computing device or a combination of remote and local storage. In some embodiments communication with the remote data storage device utilizes a persistent storage interface. An example of a persistent storage interface is a network file system NFS protocol.

As discussed herein the communication between the pod computing device and the user computing device is a secure encrypted communication using for example the SSL protocol. In other embodiments other secure communication protocols are used.

In alternative embodiments achieving hardware separation may be done virtually rather than physically. In other words the processing device may be designed such that it understands at the hardware level the concept of an individual user and segregates the operations of one user from another using a hypervisor. Accordingly the processing device would to the outside world look like an array of processing devices one for each user.

Alternatively memory and storage can be physically mapped to a processing device as resources are needed but in a physically secure arrangement. In an example embodiment if a first user requires 1 gigabyte GB of solid state drive SSD and a second user requires 10 GB of SSD such allocations can be made using a secure mapping scheme having secure access rules. Either of these two alternative embodiments may present a lower cost solution from the embodiment shown wherein all pod computing devices are physically separated within the server computing device .

Additionally shown in this embodiment is a central authority that performs administrative functions and is in communication with the server computing device . In some embodiments the central authority is a central database that is accessible by each pod computing device in order to for example store pod identifications and public keys maintain system backups and software updates and store templates. Additionally in some embodiments the central authority is also responsible for initially setting up user accounts and allocating a pod computing device to users. As shown in this embodiment the central authority is independent from each of the pod computing devices and does not have authority to access data stored thereon or the private keys . In some embodiments the central authority includes an identification directory ID directory a public keys database a system updates and backup database and a universal templates database .

In an example embodiment the ID directory stores and maintains each the unique identification associated with each pod computing device . In some embodiments each pod computing device is associated with a unique identification that allows each pod computing device to be directly identifiable and accessible. In embodiments this unique identification is a uniform resource locator and in other embodiments it is the IP address of the pod computing device . Accordingly the central authority stores and maintains the ID directory in order to allow users to search for another user s unique identification in order to communicate with a particular user s pod computing device .

In some embodiments the central authority maintains a public key database for storing and making available to each user the public key associated with each pod computing device . Public keys are used to securely encrypt data that is sent from one pod computing device to another. In some embodiments public keys are generated by the pod computing device upon registration of the user computing device with the pod computing device . In other embodiments the user computing device or the central authority generates the public key.

In an example embodiment a sending pod computing device will initially search for the public key associated with the receiving pod computing device in the public key database . In some embodiments this is performed by first searching for the receiving pod computing device s unique identification in the ID directory and thereafter using the unique identification to search for or request the public key associated with the receiving pod computing device in the public key database . The sending pod computing device will thereafter encrypt the data with the public key associated with the receiving pod computing device. Once the data is encrypted with the public key associated with the receiving pod computing device the only way to decrypt the data is by using the private key associated with the receiving pod computing device. Accordingly in this example once the data is received the receiving pod computing device would decrypt the data with the private key known only to the user associated with the receiving pod computing device. Accordingly data can be securely exchanged between pods. Although the public key database is shown separately from the ID directory in some embodiments the unique pod identification and public keys are maintained in single database.

In an example embodiment the system updates and backup database stores software updates and system backups for each pod computing device . In an example embodiment the central authority maintains system updates and backups for each pod computing device . In embodiments the user issues a command to retrieve and thereafter install an update or to back up the system thereby preventing the central authority from independently upgrading or backing up the pod computing device . In some embodiments there are two types of backups a snapshot backup and an incremental backup. The snapshot backup is a full backup of the system at a specific period in time. Accordingly each subsequent snapshot backup performs a full backup of the system regardless if any changes are made. In contrast an incremental backup backs up each change that occurs in real time. Accordingly an incremental backup continuously backs up only incremental changes in the system. Regardless of the backup type the backed up system stored in the central system updates and backup database is encrypted using the private key thereby preventing any unwarranted access to the data.

The central authority performs administrative functions on the server computing device and pod computing devices stored thereon. In particular the central authority maintains a universal templates database . The universal templates database stores pre defined templates which define a field structure for data objects across all pod computing devices. For example the universal templates database may store an email template which defines various fields associated with an email such as recipient information sender information a subject text field and an email body text field. Alternatively a contact template may be saved in the universal templates database as having fields relating to a contact s first name last name company name email address phone number s fax number and address. Accordingly the universal templates database organizes a common format for storing templates so each pod computing device operates on the same format in order to maintain consistency. Accordingly these templates are saved in the universal templates database and made accessible across all pod computing devices . In alternative embodiments some template types are not meant to be publicly available and are therefore denoted as being available to individual pod computing devices and or groups. Accordingly some template types may be privately accessible to certain groups of pod computing devices such as a company. In some embodiments the universal template database stores the latest version of various templates which are thereafter stored in the storage device of each pod computing device .

As shown in this embodiment each user computing device includes a user interface application that sends messages such as remote calls to the associated pod computing device . In this embodiment the pod computing device has an application programming interface API that receives the calls directing the processor to perform certain functions. In this embodiment the user interface application generates a graphical user interface on the user computing device and is configured to make and receive calls to and from the pod computing device and or the central authority . Accordingly data is generated through the user interface application on the user computing device . Additionally the user interface application communicates with the central authority to update the pod computing device software or to back it up as disclosed herein.

Although the example embodiment describes the use of a user interface application a web page may alternatively be used wherein the pod computing device generates one or more web pages for direct user interaction with the pod thereby eliminating the need for a user interface application on a user computing device .

In some embodiments the pod computing device includes an interface engine for communication with a user computing device. In some embodiments the interface engine provides an application programming interface. An example of the application programming engine is the API engine described herein. In other embodiments the interface engine includes an application configured to generate a user interface to interact with the first user through the computing device. For example the interface engine operates as a web server that generates and sends web page data. The web page data is interpreted and displayed to the user such as through a browser software application running on the user computing device . Other embodiments include other interface engines.

In some embodiments the processing device stores the encrypted private key . As discussed herein in some embodiments the private key is stored within volatile memory of the pod computing device and is therefore erased upon loss of power to the pod computing device. In some embodiments this volatile memory is the system memory . In some embodiments the processing device encrypts data that is sent to the storage device using drive encryption methodologies. Accordingly all the data stored in the storage device is encrypted using the private key that is known only to the user. Thus any illegitimate attempt to access information in the storage device is rendered useless without the private key.

Additionally the processing device uses the private key to decrypt a data object as is requested by the user. For example if the processing device retrieves a data object from the storage device the processing device uses the private key to decrypt the retrieved data object.

As shown in this embodiment the pod computing device includes a communication device . In some embodiments this communication device is an Ethernet connection device including an Ethernet connector controller and drivers. The communication device also encrypts data that is sent over the network using the SSL transport protocol.

As an example if a user using the user computing device requests to view a data object stored in the storage device the processing device using the private key will decrypt the requested data object and route the requested data object to the communication device . The communication device will encrypt the data using the SSL transport protocol and send the encrypted data to the user computing device through the network . Thus according to embodiments of the present disclosure data is securely stored and transmitted such that only the user who owns the individual pod computing device has control over and access to data stored thereon.

In some embodiments the storage device stores thereon a database such as a graph database. In a graph database data objects are stored in the form of records and edges. As referred to herein data object refers to both records and edges. Each record can include various types of data. In some embodiments record data is stored in fields. For example a record such as a contact can include fields such as a person s first name last name company address phone number etc. Other records can include other data as desired. Records are connected with other records via edges which are also stored in the database . An edge defines a connection or a relationship between records. For example a first record such as a contact has fields such as a first name and a last name and a second record such as an appointment has fields such as a date and a time. In this example the first record and the second record are connected by an edge which defines the relationship between the two records.

Each record can include various types of data. In some embodiments the record data is stored in fields. For example record includes a type of contact. The record can include additional data arranged in a plurality of fields. An example of field data includes a first name Mary last name Smith as well as other fields such as but not limited to company title address city phone number etc. Other records include other data as desired.

Records are connected with other records via edges which are stored in database . For example edge defines a connection between record Larry Jones contact and record Call List folder . Edge defines a connection between record Larry Jones contact and record Interview for snippet . Similarly edge defines a relationship between record Interview for snippet and record Test e mail .

Record Larry Jones contact is connected with record Call List folder by edge and with record Interview about snippet by edge . Additionally record Test e mail is connected to record Interview about snippet by edge . Also shown in this embodiment record Mary Smith contact is connected with other records as illustrated by record which is connected by edge .

In some embodiments the graph database as discussed herein is useful to implement structured data communication. In some embodiments of the present disclosure data communication between pod computing devices is structured such that the records and edges defined in the graph database are sent to other pod computing devices as opposed to traditional data transfer in which simple text objects are exchanged. Accordingly by exchanging data records and the relationships edges between the data advanced data processing can occur by the recipient pod computing device . For example in the context in which a bank invoice is sent to a pod computing device the data is sent as a collection of database entries which is easily stored in the database . Accordingly a user can search and query the database stored on the pod computing device for the bank invoice information rather than entering the data manually. Although this embodiment refers to a graph database in alternative embodiments other database implementations are used such as for example a relational database.

As discussed herein the data encryption engine manages the encryption processes of the pod computing device . In some embodiments the data encryption engine manages the drive encryption performed on the data stored in the storage device . In particular the data encryption engine dynamically encrypts data using the private key as data is processed and stored by the processing device . The data encryption engine is also used to decrypt data that is retrieved from the storage device or from another pod computing device . Further in some embodiments the data encryption engine manages data encryption using a public key for data communicated to other pod computing devices . In some embodiments the data encryption engine further manages data decryption for data received by other pod computing devices .

In some embodiments the communication and API engine manages data communication between the user computing device central authority and other pod computing devices . In some embodiments the communication and API engine manages the search and storage of information stored on the pod computing device . Additionally in some embodiments the communication and API engine manages an API library that manages the specifications for various routines calls and data structures associated with the API such as the generation of a user interface. In other embodiments the communication and API engine manages a secure user log in process that checks user credentials when a user logs in and communicates with the pod computing device from the user computing device .

In some embodiments the communication and API engine manages data communication between the pod computing device and the central authority . For example the communication and API engine communicates with the central authority to retrieve a unique pod identification and or a public key in order to exchange data with another pod computing device . Additionally the communication and API engine contacts the central authority to perform a system update and or a system backup. Additionally in some embodiments the communication and API engine may contact the central authority to retrieve a universal template.

In some embodiments the communication and API engine manages data communication between pod computing devices . As disclosed in the aspects of the present disclosure pod computing devices share data using permissions set by users who own the data and system synchronization. In particular for each data object i.e. each record and edge for example the owning user assigns a permission such as for example public private and shared. The public permission allows any user to view the data object. The private permission allows only the user who owns the data to view the data object. The shared permission allows either identified users or identified groups to view the data object. For example a first user may share a data object with a second user by appropriately setting the permission associated with the data object. Alternatively or additionally the first user may share a data object with a group of users by setting the permission associated with a data object accordingly. Thus by sharing a data object with a group all users within that group may view the data object. Accordingly a data object is shared with another user by giving particular users and or groups permission to view the data object.

Once the permission is set synchronization is performed on that data object so as to create copies of that data object while maintaining the database structure as discussed herein. Those structured copies are then encrypted and sent to the designated pod computing device using the methods described herein. As discussed herein the data and its relationships are fully maintained as it is distributed to a recipient pod computing device . Accordingly the recipient pod computing device can store the data in a searchable format.

In some embodiments the user who owns the data object permits the sharing of updates to data object s . For example if a data object is shared with another user or a group of users any subsequent updates to that data object may also be shared. In some embodiments the user interface application operating on the user computing device is notified whether an update has occurred and thereafter requests the updated data object.

Accordingly the communication and API engine manages permissions associated with each data object i.e. whether a data object is public or private and hence whether data can be accessed by another pod computing device or a group.

In some embodiments the database engine manages how data is stored in the storage device . As discussed herein with reference to a database stored in the storage device is a graph database. Accordingly the database engine is responsible for defining records and edges and the associated permissions of the stored data.

Upon receiving the request to register message in some embodiments the central authority sends the user a message requesting registration information. In some embodiments this message involves seeking user identification information such as contact information. In some embodiments the request for registration information message is unnecessary as the user supplies this information initially in the request to register message . Upon receiving the request registration information message in some embodiments the user will send the requested contact information to the central authority . Upon receiving the requested information from the user the central authority will allocate a pod computing device to the requesting user and send a message to the user with the unique pod identification information. As discussed herein the unique pod identification information may refer to a unique IP address or URL of the pod computing device . Accordingly the user may now independently contact the pod computing device to continue the setup process.

The user may send a login request message to the pod computing device using the unique pod identification information. In some embodiments this refers to requesting the pod computing device to set up a password and private key. Accordingly in message the pod computing device prompts the user to enter a password and a private key . Upon receipt of message the user may send to the pod computing device a password and private key . As discussed herein the password is used to log into the user interface application whereas the private key is stored on the user computing device and in volatile memory within the pod computing device . Finally in some embodiments upon receiving a password and private key from the user the pod computing device generates a public key. As discussed herein the public key is used to encrypt data that is shared among and distributed to other pod computing devices . Accordingly the pod computing device sends the public key information to the central authority in message .

The computing device includes in some embodiments at least one processing device such as a central processing unit CPU . A variety of processing devices are available from a variety of manufacturers for example Intel or Advanced Micro Devices. In this example the computing device also includes a system memory and a system bus that couples various system components including the system memory to the processing device . The system bus is one of any number of types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures.

Examples of computing devices suitable for the computing device include a desktop computer a laptop computer a tablet computer a mobile computing device such as a smart phone an iPod or iPad mobile digital device or other mobile devices or other devices configured to process digital instructions.

The system memory includes read only memory and random access memory . A basic input output system containing the basic routines that act to transfer information within computing device such as during start up is typically stored in the read only memory .

The computing device also includes a secondary storage device in some embodiments such as a hard disk drive for storing digital data. The secondary storage device is connected to the system bus by a secondary storage interface . The secondary storage devices and their associated computer readable media provide nonvolatile storage of computer readable instructions including application programs and program modules data structures and other data for the computing device .

Although the exemplary environment described herein employs a hard disk drive as a secondary storage device other types of computer readable storage media are used in other embodiments. Examples of these other types of computer readable storage media include magnetic cassettes flash memory cards digital video disks Bernoulli cartridges compact disc read only memories digital versatile disk read only memories random access memories or read only memories. Some embodiments include non transitory media. Additionally such computer readable storage media can include local storage or cloud based storage.

A number of program modules can be stored in secondary storage device or memory including an operating system one or more application programs other program modules such as the software engines described herein and program data . The computing device can utilize any suitable operating system such as Microsoft Windows Google Chrome Apple OS and any other operating system suitable for a computing device.

In some embodiments a user provides inputs to the computing device through one or more input devices . Examples of input devices include a keyboard mouse microphone and touch sensor such as a touchpad or touch sensitive display . Other embodiments include other input devices . The input devices are often connected to the processing device through an input output interface that is coupled to the system bus . These input devices can be connected by any number of input output interfaces such as a parallel port serial port game port or a universal serial bus. Wireless communication between input devices and the interface is possible as well and includes infrared BLUETOOTH wireless technology 802.11a b g n cellular or other radio frequency communication systems in some possible embodiments.

In this example embodiment a display device such as a monitor liquid crystal display device projector or touch sensitive display device is also connected to the system bus via an interface such as a video adapter . In addition to the display device the computing device can include various other peripheral devices not shown such as speakers or a printer.

When used in a local area networking environment or a wide area networking environment such as the Internet the computing device is typically connected to the network through a network interface such as an Ethernet interface. Other possible embodiments use other communication devices. For example some embodiments of the computing device include a modem for communicating across the network.

The computing device typically includes at least some form of computer readable media. Computer readable media includes any available media that can be accessed by the computing device . By way of example computer readable media include computer readable storage media and computer readable communication media.

Computer readable storage media includes volatile and nonvolatile removable and non removable media implemented in any device configured to store information such as computer readable instructions data structures program modules or other data. Computer readable storage media includes but is not limited to random access memory read only memory electrically erasable programmable read only memory flash memory or other memory technology compact disc read only memory digital versatile disks or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information and that can be accessed by the computing device . Computer readable storage media does not include computer readable communication media.

Computer readable communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal refers to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example computer readable communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

The computing device illustrated in is also an example of programmable electronics which may include one or more such computing devices and when multiple computing devices are included such computing devices can be coupled together with a suitable data communication network so as to collectively perform the various functions methods or operations disclosed herein.

The various embodiments described above are provided by way of illustration only and should not be construed to limit the claims attached hereto. Those skilled in the art will readily recognize various modifications and changes that may be made without following the example embodiments and applications illustrated and described herein and without departing from the true spirit and scope of the following claims.

