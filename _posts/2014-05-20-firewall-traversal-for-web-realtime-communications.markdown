---

title: Firewall traversal for web real-time communications
abstract: The system and method monitor a secure Web Real Time Communication (WebRTC) session between browsers. To do so, a WebRTC application receives a first WebRTC offer with a fingerprint of a first browser to establish a secure communication session. The WebRTC application sends session information and the fingerprint of the first browser to a media relay. The WebRTC application receives a fingerprint of a media relay. A second WebRTC offer with a fingerprint of the media relay is sent to a second browser. An answer to the second WebRTC offer is received. Session information and the fingerprint of the second browser are sent to the media relay so the media relay can decrypt the secure communication session. The first WebRTC offer is answered. A secure communication session is established via the media relay using the fingerprints. The media relay, based on the fingerprints, can monitor the secure communication session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09380030&OS=09380030&RS=09380030
owner: Avay Inc.
number: 09380030
owner_city: Basking Ridge
owner_country: US
publication_date: 20140520
---
The systems and methods disclosed herein relate to firewall traversal for communication networks and in particular to firewalls facilitating communications between browsers.

Web Real Time Communication WebRTC is designed to allow secure real time communications between two web browsers. WebRTC was designed to prevent so called man in the middle attacks. To prevent man in the middle attacks the two browsers involved in a WebRTC session negotiate the SRTP encryption key in the media channel rather than the signaling channel. This prevents the web application and any proxies from learning of the key so that the media stream can be unencrypted by an intermediary. To have a secure communication session the browsers exchange fingerprints. A fingerprint is a unique identifier that is used to match a digital certificate such as an MD5 signature. Once the browsers have exchanged fingerprints the browsers setup a secure communication session relay by verifying that digital certificates exchanged by the browsers match fingerprints previously exchanged between the browsers. The secure communication session that is sometimes established via a media relay is secured directly between the browsers. The media relay is unable to decrypt any packets because the media relay was not involved in setting up the secure communication session.

While the use of WebRTC may work well in non corporate settings current implementations that use WebRTC have many shortcomings in a corporate environment. For example in most corporate environments the use of a firewall and corporate security restrictions are required so that content of communication sessions can be monitored and or controlled. Monitoring of content is designed to prevent security breaches such as Denial of Service attacks. Alternatively monitoring may be necessary to provide recording services for a communication session. However WebRTC s design to prevent man in the middle attacks prevents monitoring of a communication session e.g. a voice call . Having browsers setup communication sessions outside the firewall without regard to corporate security restrictions makes the use of WebRTC very limited in a corporate environment.

Systems and methods are provided to solve these and other problems and disadvantages of the prior art. The system and method monitor a secure WebRTC session between browsers. To do so a WebRTC application in a corporate network receives a first WebRTC offer with a first fingerprint of a first browser to establish a secure communication session. The WebRTC application sends session information and the first fingerprint of the first browser to a media relay. The WebRTC application also receives a second fingerprint of a media relay. A second WebRTC offer with the second fingerprint of the media relay is sent to a second browser. An answer to the second WebRTC offer is received by the WebRTC application. Session information and a third fingerprint of the second browser are sent to the media relay so the media relay can decrypt the secure communication session. The first WebRTC offer is answered by the WebRTC application by sending the second fingerprint of the media relay to the first browser. A secure communication session is established via the media relay using the first second and third fingerprints. The media relay based on the fingerprints and exchanged certificates can monitor the secure communication session.

In an embodiment first session information second session information and fingerprint of a media relay are received at a Web Real Time Communication WebRTC application. A first WebRTC offer with the first session information and the fingerprint of the media relay are sent from the WebRTC application to a first browser. A second WebRTC offer with the second session information and the fingerprint of the media relay are sent from the WebRTC application to a second browser. An answer to the first WebRTC offer with the first session information and a fingerprint of the first browser is received. An answer to the second WebRTC offer with the second session information and a fingerprint of the second browser is received. A secure communication session is established between the first browser and the second browser via the media relay. The first browser and the media relay use the fingerprint of the media relay and the fingerprint of the first browser to establish the secure communication session. The second browser and the media relay use the fingerprint of the media relay and the fingerprint of the second browser to establish the secure communication session.

The browsers A B can be any type of browser such as Internet Explorer Firefox Chrome Safari Opera a custom browser and the like. Although only two browsers A B are shown any number of browsers can be used to setup a WebRTC communication session. The browsers A B can run on a variety of communication devices. The communication device can be or may include any device that can communicate on the networks such as a Personal Computer PC a telephone a video system a cellular telephone a Personal Digital Assistant PDA a tablet device a notebook device a smart phone and the like.

The networks can be or may include any network that can send and receive information such as the Internet a Wide Area Network WAN a Local Area Network LAN a Voice over IP Network VoIP the Public Switched Telephone Network PSTN a packet switched network a circuit switched network a cellular network a combination of these and the like. The networks can use a variety of protocols such as Ethernet Internet Protocol IP Session Initiation Protocol SIP Integrated Services Digital Network ISDN WebRTC Representational State Transfer REST Hypertext Transfer Protocol HTTP Interactive Connectivity Establishment ICE Datagram Transportation Layer Security DTLS and or the like. In this example the network is a network that is a public and untrusted network such as the Internet and the network is a private network such as a corporate or enterprise network.

The edge server can be or may include any hardware software that can manage communications between the network and the network such as a firewall a session boarder controller a network address translator a combination of these and the like. The edge server further comprises a media relay . The media relay can be any hardware software that can relay media such as a voice data video data media streams text streams RTP streams and or the like.

The WebRTC application can be or may include any hardware software that can manage WebRTC communications between browsers A and B such as a .NET web server a J2EE web server a PHP web server and the like. The WebRTC application is shown separate from the edge server . However in some embodiments the WebRTC application can be part of the edge server .

A first user via browser A initiates a WebRTC communication session to the browser B. The browser A sends a first WebRTC offer to establish a secure communication session. The first WebRTC offer to establish the secure communication session contains a fingerprint of the browser A. The fingerprint of the browser A is a digital signature of a digital certificate of the browser A. For example the fingerprint of the browser can be a MD5 signature a SHA 1 signature a SHA 256 signature and the like. The fingerprint of the browser A is used by the media relay to establish the secure communication session by verifying a security key e.g. a digital certificate provided by the browser A when establishing the secure communication session between the browser A and the media relay .

The WebRTC application receives the first WebRTC offer to establish the secure communication session. The WebRTC application sends to the media relay session information and the fingerprint of the browser A. The session information can include information such as a unique identifier that identifies the communication session between the browser A and the media relay a pair of IP addresses of the browser A and the media relay one or more port numbers that correspond to ports on the browser A and or the media relay and the like. The session information is for the communication session between the browser A and the media relay . In one embodiment Representational State Transfer REST is used by the WebRTC application to communicate with the media relay . For example the WebRTC application can communicate with the media relay via a REST server not shown that communicates with the media relay .

The media relay receives the session information and the fingerprint of the browser A. In response to receiving the session information and the fingerprint of the browser A the media relay sends a fingerprint of the media relay to the WebRTC application . In addition session information is sent that may contain IP addresses port numbers and codecs of the media relay . The WebRTC application receives the fingerprint of the media relay . The WebRTC application sends a second WebRTC offer with a fingerprint of the media relay to the browser B. The browser B receives the second WebRTC offer with the fingerprint of the media relay .

The browser B sends an answer to the second WebRTC offer to the WebRTC application . The answer to the second WebRTC offer contains a fingerprint of the browser B. The fingerprint of the browser B is used by the media relay to verify a security key e.g. digital certificate of the browser B when establishing a secure communication session between the browser B and the media relay .

The WebRTC application receives the answer to the second WebRTC offer with the fingerprint of the browser B. The WebRTC application sends session information and the fingerprint of the browser B to the media relay . The session information can include information such a unique identifier that identifies the communication session between the browser B and the media relay a pair of IP addresses of the browser B and the media relay one or more port numbers that correspond to ports on the browser B and or the media relay and the like. The session information is for the communication session between the browser B and the media relay . The WebRTC application answers the first WebRTC offer by sending the fingerprint of the media relay to the browser A. In addition session information is sent that may contain IP addresses port numbers and codecs of the media relay . In one embodiment the answer to the first WebRTC offer includes a list of Interactive Connectivity Establishment ICE candidates. The list of ICE candidates can include various communication addresses that the sender can be reached at. The list of ICE candidates can include an alternative address. For example the list of ICE candidates may include addresses to reach the sender using voice video and Instant Messaging at different communication endpoints

The browser A establishes a secure communication session i.e. an encrypted communication session via the media relay to the browser B. The secure communication comprises two separate communication sessions one between the browser A and the media relay and a second one between the browser B and the media relay . The browser A and the media relay use the fingerprint of the browser A and the fingerprint of the media relay to confirm the digital certificates of the browser A and the media relay to establish a secure communication session from the browser A to the media relay . The browser B and the media relay use the fingerprint of the browser B and the fingerprint of the media relay to confirm the digital certificates of the browser B and the media relay to establish a secure communication session from the browser B to the media relay . The end result is a secure communication session between the browser A and the browser B. In one embodiment the secure communication session is established using Datagram Transportation Layer Security DTLS . In other embodiments other protocols can be used such as Secure Sockets Layer SSL and the like.

Since the media relay has the digital certificates of the secure communication session the media relay can be used to decrypt the secure communication session between the browser A and the browser B. The media relay can decrypt various types of packets in the secure communication session such as voice communications video communications Instant Messaging communications text communications and or the like.

By decrypting the secure communication session between the browser A and the browser B the media relay can monitor the secure communication session to prevent a denial of service attack prevent a distributed denial of service attack deny blacklisted clients fingerprint media prevent toll fraud prevent bandwidth fraud enforce Quality of Service QoS call recording and or the like. For example a denial of service attack or a distributed denial of service attack can be prevented by looking at the source addresses e.g. IP addresses of the WebRTC offers to establish the secure communication sessions. Blacklisted clients can be denied by looking at the source address of the WebRTC offer. Fingerprinting of media can be used to identify information within a media stream using techniques such as frame analysis motion changes voice analysis text analysis and or the like. Toll fraud can be prevented by looking at the network address of an offer or by monitoring information within a media stream. QoS of one communication session can be guaranteed over other communication sessions based on the address of the offer an address of the receiver of the offer a port number a protocol a type of media e.g. voice video and or text and or the like.

The WebRTC device can be or may include any hardware software that can manage a WebRTC session such as a WebRTC server a WebRTC gateway a communication device and or the like. The communication device can be or may include be any device that can communicate with the WebRTC device such as a Personal Computer PC a telephone a video system a cellular telephone a Personal Digital Assistant PDA a tablet device a notebook device and the like. The communication devices A B will typically communicate with the WebRTC device using a different protocol than WebRTC such as Session Initiation Protocol SIP H.323 video protocols instant messaging protocols text protocols and or the like. For example the WebRTC device may be a WebRTC gateway that communicates with the communication device A using SIP. In one embodiment the WebRTC device further comprises the browser D. The browser D may further comprise the WebRTC plug in B.

The browser C further comprises a WebRTC plug in A. In some embodiment the WebRTC plug in may be include as standard part of the browser C. The WebRTC plug in A can be used to distribute some of the functionality of the WebRTC application such as a fingerprint manipulation function of the WebRTC application . For example establishment of the secure communication session using the fingerprint of the media relay and a fingerprint of the browser C as described in can be incorporated into the WebRTC plug in A.

The edge server comprises the media relay and a Hypertext Transfer Protocol HTTP reverse proxy . Although not shown in the HTTP reverse proxy can work system described in . The HTTP reverse proxy can be or may include any hardware software that can be used to provide proxy services for HTTP connections. The HTTP reverse proxy is shown as part of the edge server . However in some embodiments the HTTP reverse proxy may be separate from the edge server. For example the HTTP reverse proxy may be within the network .

Typically WebRTC uses HTTP during the initial establishment of the secure communication session. The HTTP reverse proxy can be used to direct incoming WebRTC offers received via the network to the WebRTC application . Likewise the HTTP reverse proxy can be used to direct outgoing WebRTC offers initially sent from one of the browsers B D from the WebRTC application to the browser A or other browsers .

The HTTP reverse proxy can have a lookup table to direct incoming WebRTC offers to one or more WebRTC applications . For example the HTTP reverse proxy may direct incoming WebRTC offers to a first WebRTC application based on a first range of destination addresses of the communication devices of the browsers and direct WebRTC offers to a second WebRTC application based on a second range of destination addresses. The HTTP reverse proxy may direct all or only a portion of the incoming WebRTC offers to the one or more WebRTC applications . The HTTP reverse proxy can also be used to direct WebRTC offers to the WebRTC device . The HTTP reverse proxy can be used in the process described in and for all of the processes described herein.

In another embodiment the HTTP reverse proxy may direct the incoming WebRTC offers to different WebRTC applications based on the source address of the WebRTC offer. For example one WebRTC application may provide additional information to the edge server to provide enhanced security such as monitoring for a specific kind of security breach e.g. a denial of service attack or blacklisting the source address .

A first user via browser A initiates a WebRTC communication session with the WebRTC device . The browser A sends to the WebRTC application a first WebRTC offer to establish a secure communication session. The first WebRTC offer to establish the secure communication session contains a fingerprint of the browser A. The fingerprint of the browser A is a digital signature of a digital certificate of the browser A. In one embodiment the HTTP reverse proxy directs the first WebRTC offer to establish the secure communication session to the WebRTC device . Alternatively the first WebRTC offer can go directly to the WebRTC device .

The WebRTC device sends to the browser A an answer to the first WebRTC offer to establish the secure communication session. The answer to the first WebRTC offer includes a fingerprint of the WebRTC device . The browser A and the WebRTC device establish a secure communication session via the media relay using the fingerprints and digital certificates of the browser A and the WebRTC device . In one embodiment the answer to the first WebRTC offer includes a list of Interactive Connectivity Establishment ICE candidates. The list of ICE candidates can include various communication addresses that the sender can be reached at. The list of ICE candidates can include an alternative address. For example the list of ICE candidates may include addresses to reach the sender using voice video and Instant Messaging at different communication endpoints.

The WebRTC device sends session information of the secure communication session a security key of the browser A e.g. a security key of the WebRTC device to the media relay . Once the secure communication session has been established via the media relay the media relay decrypts the secure communication session between the browser A and the WebRTC device using the security key of the browser A and the security key of the WebRTC device . The decrypted communication session can then be monitored by the edge server to provide security services to the network . The media relay can use the session information to identify a specific session in the media relay and then use the security key of the browser A and the security key of the WebRTC device to decrypt the secure communication session.

In one embodiment Representational State Transfer REST is used by the WebRTC device to communicate with the media relay . For example the WebRTC device can communicate with the media relay via a REST server not shown that communicates with the media relay .

In one embodiment the WebRTC device can be a communication device with the browser D. In this embodiment the security key of the WebRTC device can be a security key of the browser D. The WebRTC plug in B can incorporate the functionality of the WebRTC device as described above.

In one embodiment the WebRTC device is a WebRTC gateway that is used to establish the secure WebRTC communication session between the browser A and one or more of the communication devices A B. In this embodiment the communication devices A B use different protocols such as Session Initiation Protocol SIP . The WebRTC device translates the WebRTC communication session to the other protocol in this example SIP . This allows the browser A to communicate with the communication device A and or B via the WebRTC device a WebRTC gateway .

In one embodiment instead of the browser A sending the first WebRTC offer the WebRTC application can initiate sending the first and second WebRTC offers. For example the WebRTC application could comprise a video conferencing application. After receiving at the WebRTC application first session information second session information and fingerprint of a media relay from the media relay the WebRTC application sends the first and second WebRTC offers to the browser A and the browser B to initiate a video call between the browser A and the browser B at a defined time or a video conference between more than two browsers .

When the WebRTC application sends the first WebRTC offer to the browser A the browser A would respond by sending the fingerprint of the browser A. Like discussed above when the WebRTC application sends the second WebRTC offer to the browser B it would receive the fingerprint of the browser B. The WebRTC application sends one or two fingerprints to the media relay . The media relay would then establish the communication session between each of the browsers A B in a similar manner as discussed above.

In this embodiment the order in which the WebRTC offers are sent received may vary according to implementation. For example the WebRTC offer from the browser B may be received and processed first. This would result in a communication session being established between the media relay and the browser B being established before the communication session between the media relay and the browser A. This process can also be implemented in the WebRTC plug ins A and B as well.

In the above descriptions the order of the steps and the information that is sent may vary according to implementation. Moreover some of the steps may be implemented in a single packet. For example the first second session information could be sent in a first packet and the fingerprint of the first browser second browser could be sent in different packets or the same packet. Likewise the WebRTC application could send the first session information fingerprint of the browser A and the second session information fingerprint of the browser A in the same packet.

The browser A sends in step a first WebRTC offer with a fingerprint of the browser A. The WebRTC application receives the first WebRTC offer with the fingerprint of the browser A in step . The WebRTC application sends to the media relay session information for the communication session between the browser A and the media relay and a fingerprint of the browser A in step . In response to receiving the session information and the fingerprint of the browser A the media relay sends a fingerprint of the media relay and session information e.g. IP addresses port numbers codecs etc. in step to the WebRTC application . The WebRTC application receives the fingerprint of the media relay sent in step .

The WebRTC application sends a second WebRTC offer with a fingerprint of the media relay and the session information to the browser B in step . The browser B sends in step an answer to the second WebRTC offer. The answer contains a fingerprint of the browser B and the session information. The WebRTC application receives the answer to the second WebRTC offer sent in step . The WebRTC application sends session information for the media relay and a fingerprint of the browser B in step to the media relay .

The media relay receives the session information and the fingerprint of the browser B sent in step . The media relay can optionally send a second fingerprint of the media relay in step to the WebRTC application along with session information. In this embodiment the media relay uses two digital certificates that correspond to two fingerprints of the media relay . The fingerprint of the media relay sent in step is for a digital certificate that is used by an interface of the media relay that accesses the network a public network . The fingerprint of the media relay that is sent in step is for digital certificate that is used by an interface of the media relay that accesses the network a private network . In another embodiment the media relay only sends one response to the messages sent in step and that includes two separate fingerprints session information of the media relay one for each interface .

The WebRTC application in step answers the WebRTC offer sent in step by sending the fingerprint of the media relay and the session information for the interface of the network if two fingerprints are used for the media relay . A secure communication session is established via the media relay between the browser A and the browser B as shown in steps A and B. The secure communication session between the browser A and the media relay use the fingerprint of the browser A and the fingerprint of the media relay along with the corresponding digital certificates. The secure communication session between the browser B and the media relay is established using the fingerprint of the browser B and the fingerprint of the media relay which can be a second separate fingerprint of the media relay on some embodiments along with the corresponding digital certificates. The media relay decrypts packets in the communication session between the browser A and the browser B in step .

A secure communication session is established via the media relay between the browser A and the WebRTC device as shown in step A B. The secure communication session is setup using security key s fingerprints of the browser A and the WebRTC device . The WebRTC device sends to the media relay session information for the secure communication session between the browser A and the WebRTC device a security key of the browser A and a security key of the WebRTC device in step . The media relay decrypts the secure communication session using the session information and the security key of the browser A and the security key of the WebRTC device in step . In another embodiment the browser C could be substituted for the WebRTC device .

Of course various changes and modifications to the illustrative embodiment described above will be apparent to those skilled in the art. These changes and modifications can be made without departing from the spirit and the scope of the system and method and without diminishing its attendant advantages. The following claims specify the scope of the invention. Those skilled in the art will appreciate that the features described above can be combined in various ways to form multiple variations of the invention. As a result the invention is not limited to the specific embodiments described above but only by the following claims and their equivalents.

