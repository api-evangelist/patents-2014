---

title: Centralized application programming interface monitoring tool
abstract: Methods and systems for the collecting and monitoring of information related to the performance of application programming interfaces (APIs) are provided. A method includes obtaining one or more various measurements of performance of the APIs, and assessing a performance status for each API based on the obtained one or more various measurements of performance. The method further includes displaying, the performance status for each API and the APIs, and searching for a particular API of the displayed APIs using a search technique configured to compare a keyword indicative of the particular API to all fields of JavaScript Object Notation (JSON) objects that have been used to define the APIs. The method further includes displaying the particular API including the performance status for the particular API, the one or more various measurements of performance for the particular API, and methods of the particular API, as a result of the searching.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09646092&OS=09646092&RS=09646092
owner: ADP, LLC
number: 09646092
owner_city: Roseland
owner_country: US
publication_date: 20141010
---
The invention relates to software performance and more particularly to methods and systems for the collecting and monitoring of information related to the performance of application programming interfaces.

An application programming interface API specifies how various software components should interact with each other. In addition to accessing databases or computer hardware such as hard disk drives or video cards an API can be used to ease the work of programming graphical user interface components to allow integration of new features into existing applications a so called plug in API or to share data between otherwise distinct applications. In practice many times an API comes in the form of a library that includes specifications for routines data structures object classes and variables. In some other cases notably for Simple Object Access Protocol SOAP and Representational State Transfer REST services an API comes as a specification of remote calls exposed to the API consumers.

An enterprise e.g. a corporation typically releases its API to third parties such that software developers can design products that are powered by the enterprise s services or shared data. To this end a robust API for accessing Web based software applications or Web tools has become useful for enterprises practicing business models such as Software as a Service SaaS and infrastructure as a service IaaS since a majority of customers of these enterprises require interoperability with other SaaS applications web services and legacy systems. Furthermore reliable performance of APIs is important for these enterprises to maintain services and customer loyalty and developing technologies and tools to monitor API performance metrics for the services that these enterprises use is a key step toward achieving that goal.

Technologies and tools have been developed to monitor API performance metrics for the services that enterprises use provide or need through the released APIs. However these technologies and tools provide users such as software developers with large amounts of performance data across the entire technology stack from the underlying Infrastructure resource metrics up through API level runtime parameters. The burden is then on the user such as the software developer to sift through this often voluminous performance data to pick out symptoms of potential performance bottlenecks and accordingly decides on an appropriate course of action. Although such monitoring and prompt decision making by a user are crucial from a performance perspective they can be extremely time consuming. In addition the quality of the result depends on the experience of the user reviewing the performance data and making decisions regarding future capacity needs.

In a first aspect of the invention a method is provided for providing performance data for a plurality of APIs. The method includes obtaining by a computer system one or more various measurements of performance of the APIs. The method further includes assessing by the computer system a performance status for each API based on the obtained one or more various measurements of performance. The method further includes displaying by the computer system the performance status for each API and the APIs. The method further includes searching by the computer system for a particular API of the displayed APIs using a search technique configured to compare a keyword indicative of the particular API to all fields of JavaScript Object Notation JSON objects that have been used to define the APIs. The method further includes displaying by the computer system the particular API including the performance status for the particular API the one or more various measurements of performance for the particular API and methods of the particular API as a result of the searching.

In another aspect of the invention a computer system is provided for collecting and monitoring performance data for a plurality of APIs. The computer system includes a hardware memory device that stores program instructions. The computer system further includes a processor that executes the program instructions and causes the computer system to obtain one or more various measurements of performance of the APIs on one or more computing devices operably connected to a network. The program instructions are further operable to causes the computer system to assess a performance status for each of the APIs based on the obtained one or more various measurements of performance. The program instructions are further operable to causes the computer system to display the performance status for each of the APIs. The program instructions are further operable to causes the computer system to initiate a live API call to a running application on the one or more computing devices using parameters of a method of one of the APIs. The program instructions are further operable to causes the computer system to receive data in an open standard format used by the API for transmitting data from a software application on the one or more computing devices.

In a further aspect of the invention a computer program product is provide for that includes computer readable program instructions stored on non transitory computer readable storage medium. The computer readable program instructions are operable to cause a computing device to obtain one or more various measurements of performance of a plurality of APIs. The computer readable program instructions are further operable to cause a computing device to assess a performance status for each API based on the obtained one or more various measurements of performance. The computer readable program instructions are further operable to cause a computing device to display at a computing device with a screen display at least a portion of a dashboard including the performance status for each API and the APIs. The computer readable program instructions are further operable to cause a computing device to detect a first input on the dashboard that initiates a comparison of a keyword indicative of a particular API to all fields of JavaScript Object Notation JSON objects that have been used to define the APIs. The computer readable program instructions are further operable to cause a computing device to in response to detecting the first input display methods of the particular API in a first additional window. The computer readable program instructions are further operable to cause a computing device to detect a second input at a location of a method on the first additional window. The computer readable program instructions are further operable to cause a computing device to in response to detecting the second input display parameters of the method in a second additional window. The computer readable program instructions are further operable to cause a computing device to detect a third input at a location of a mechanism on the second additional window. The computer readable program instructions are further operable to cause a computing device to in response to detecting the third input initiate a live API call to a running application on one or more computing devices using the parameters of the method of the particular API.

The invention relates to software performance and more particularly to methods and systems for the collecting and monitoring of information related to the performance of application programming interfaces APIs . More specifically implementations of the invention provide methods and systems for collecting and monitoring various measurements of performance of APIs such that a performance status of each API may be assessed and intuitively visualized and interacted with on a graphic user interface GUI . Advantageously in embodiments the methods and systems of the present invention may be implemented to improve API performance attract developers troubleshoot problems and ultimately make better business decisions related to API infrastructure.

In embodiments users on a network can access a website configured to collect and monitor various measurements of performance of APIs which may then be assessed to determine a performance status of each API. The various measurements of performance of APIs may include a total number of request messages a total number of errors a number of developers a number of applications in use a total response time a size of each request message duration of request processing a size of each message sent longest response time shortest response time and others and may be determined using various formulations known to those of skill in the art. For example the determination of a total number of errors may include monitoring and keeping a running count of errors generated by each API. As another example the determination of total response time may include the use of requests and time commands to measure the time of processing the request. By way of another example the determination of size of each request message may include retrieving size data from the header of each message.

In embodiments once the measurements of performance of APIs are assessed the API and performance status of each API may be visualized on a GUI at an instance in time. Additionally in embodiments the methods for each API may be accessed to retrieve greater detail concerning each API and a live API call may be made from the GUI using one or more methods of the API that return data in an open standard format e.g. JavaScript Object Notation JSON or extensible markup language XML used by the API for transmitting data between software applications. Advantageously the systems and methods of the present invention allow for the measurements of performance to be collected and assessed for each API and the API and performance status of each API to be visualized and interacted with via a web based GUI.

As shown in computing system includes a computing device . The computing device can be resident on a network infrastructure such as within a cloud environment or may be a separate independent computing device e.g. a computing device of a third party service provider . The computing device may include a bus a processor a storage device a system memory hardware device one or more input devices one or more output devices and a communication interface .

The bus permits communication among the components of computing device . For example bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures to provide one or more wired or wireless communication links or paths for transferring data and or power to from or between various other components of computing device .

The processor may be one or more conventional processors microprocessors or specialized dedicated processors that include processing circuitry operative to interpret and execute computer readable program instructions such as program instructions for controlling the operation and performance of one or more of the various other components of computing device for implementing the functionality steps and or performance of the present invention. In embodiments processor interprets and executes the processes steps functions and or operations of the present invention which may be operatively implemented by the computer readable program instructions. For example the processor may be configured to provide the functionality of collecting and monitoring various measurements of performance of APIs such that a performance status of each API may be assessed and intuitively visualized and interacted with on a GUI. In embodiments processor may receive input signals from one or more input devices and or drive output signals through one or more output devices . The input devices may be for example a keyboard or touch sensitive user interface UI as further described below. The output devices can be for example any display device printer etc. as further described below.

The storage device may include removable non removable volatile non volatile computer readable media such as but not limited to non transitory media such as magnetic and or optical recording media and their corresponding drives. The drives and their associated computer readable media provide for storage of computer readable program instructions data structures program modules and other data for operation of computing device in accordance with the different aspects of the present invention. In embodiments storage device may store operating system application programs and program data in accordance with aspects of the present invention.

The system memory may include one or more storage mediums including for example non transitory media such as flash memory permanent memory such as read only memory ROM semi permanent memory such as random access memory RAM any other suitable type of storage component or any combination thereof. In some embodiments an input output system BIOS including the basic routines that help to transfer information between the various other components of computing device such as during start up may be stored in the ROM. Additionally data and or program modules such as at least a portion of operating system application programs and or program data that are accessible to and or presently being operated on by processor may be contained in the RAM.

The one or more input devices may include one or more mechanisms that permit an operator to input information to computing device such as but not limited to a touch pad dial click wheel scroll wheel touch screen one or more buttons e.g. a keyboard mouse game controller track ball microphone camera proximity sensor light detector motion sensors biometric sensor and combinations thereof. The one or more output devices may include one or more mechanisms that output information to an operator such as but not limited to audio speakers headphones audio line outs visual displays antennas infrared ports tactile feedback printers or combinations thereof.

The communication interface may include any transceiver like mechanism e.g. a network interface a network adapter a modem or combinations thereof that enables computing device to communicate with remote devices or systems such as a mobile device or other computing devices such as for example a server in a networked environment e.g. cloud environment. For example computing device may be connected to remote devices or systems via one or more local area networks LAN and or one or more wide area networks WAN using communication interface .

As discussed herein computing system may be configured to collect and monitor various measurements of performance of APIs such that a performance status of each API may be assessed and intuitively visualized and interacted with on a GUI. In particular computing device may perform tasks e.g. process steps methods and or functionality in response to processor executing program instructions contained in a computer readable medium such as system memory . The program instructions may be read into system memory from another computer readable medium such as data storage device or from another device via the communication interface or server within or outside of a cloud environment. In embodiments an operator may interact with computing device via the one or more input devices and or the one or more output devices to facilitate performance of the tasks and or realize the end results of such tasks in accordance with aspects of the present invention. In additional or alternative embodiments hardwired circuitry may be used in place of or in combination with the program instructions to implement the tasks e.g. steps methods and or functionality consistent with the different aspects of the present invention. Thus the steps methods and or functionality disclosed herein can be implemented in any combination of hardware circuitry and software.

As depicted in cloud computing environment includes cloud resources that are made available to client devices via a network such as the Internet. Cloud resources can include a variety of hardware and or software computing resources such as servers databases storage networks applications and platforms. Cloud resources may be on a single network or a distributed network. Cloud resources may be distributed across multiple cloud computing systems and or individual network enabled computing devices. Client devices may comprise any suitable type of network enabled computing device such as servers desktop computers laptop computers handheld computers e.g. smartphones tablet computers set top boxes and network enabled hard drives. Cloud resources are typically provided and maintained by a service provider so that a client does not need to maintain resources on a local client device . In embodiments cloud resources may includes one or more computing system of that is specifically adapted to perform one or more of the functions and or processes described herein.

Cloud computing environment may be configured such that cloud resources provide computing resources to client devices through a variety of service models such as Software as a Service SaaS Platforms as a service PaaS Infrastructure as a Service IaaS and or any other cloud service models. Cloud resources may be configured in some cases to provide multiple service models to a client device . For example cloud resources can provide both SaaS and IaaS to a client device . Cloud resources may be configured in some cases to provide different service models to different client devices . For example cloud resources can provide SaaS to a first client device and PaaS to a second client device .

Cloud computing environment may be configured such that cloud resources provide computing resources to client devices through a variety of deployment models such as public private community hybrid and or any other cloud deployment model. Cloud resources may be configured in some cases to support multiple deployment models. For example cloud resources can provide one set of computing resources through a public deployment model and another set of computing resources through a private deployment model.

One or more cloud resources may be conceptually structured in multiple layers. In one example the layers include a firmware and hardware layer a kernel layer an infrastructure service layer a platform service layer and an application service layer. The firmware and hardware layer may be the lowest layer upon which the other layers are built and may include generic contributing nodes e.g. data centers computers and storage devices geographically distributed across the Internet and provide the physical resources for implementing the upper layers of the cloud service provider. The kernel layer is above the firmware and hardware layer and may include an operating system and or virtual machine manager that host the cloud infrastructure services. The kernel layer controls and communicates with the underlying firmware and hardware layer through one or more hardware firmware level APIs. The infrastructure service layer is above the kernel layer and may include virtualized resources such as virtual machines virtual storage e.g. virtual disks virtual network appliances e.g. firewalls and so on. The infrastructure service layer may also include virtualized services such as database services networking services file system services web hosting services load balancing services message queue services map services e mail services and so on. The platform service layer is above the infrastructure service layer and may include platforms and application frameworks that provide platform services such as an environment for running virtual machines or a framework for developing and launching a particular type of software application. The application service layer is above the platform service layer and may include a software application installed on one or more virtual machines or deployed in an application framework in the platform service layer. The software application can also communicate with one or more infrastructure service components e.g. firewalls databases web servers etc. in the infrastructure service layer.

In another example one or more cloud resources may be conceptually structured in functional abstraction layers including a hardware and software layer a virtualization layer a management layer and a workloads layer. The hardware and software layer may include hardware and software components such as mainframes RISC reduced instruction set computer architecture based servers storage devices networks and networking components application server software and database software. The virtualization layer may include virtual entities such as virtual servers virtual storage virtual networks virtual applications and virtual clients. The management layer may provide functions such as resource provisioning metering and pricing security user portals service level management and service level agreement planning and fulfillment. The workloads layer may provide functions for which the cloud computing environment is utilized such as mapping and navigation software development and lifecycle management data analytics and processing and transaction processing.

In embodiments software and or hardware that performs one or more of the aspects functions and or processes described herein may be accessed and or utilized by a client e.g. an enterprise or an end user as one or more of an SaaS PaaS and IaaS model in one or more of a private community public and hybrid cloud. Moreover although this disclosure includes a description of cloud computing the systems and methods described herein are not limited to cloud computing and instead can be implemented on any suitable computing environment.

Cloud resources may be configured to provide a variety of functionality that involves user interaction. Accordingly a user interface UI can be provided for communicating with cloud resources and or performing tasks associated with cloud resources . The UI can be accessed via a client device in communication with cloud resources . The UI can be configured to operate in a variety of client modes including a fat client mode a thin client mode or a hybrid client mode depending on the storage and processing capabilities of cloud resources and or client device . Therefore a UI can be implemented as a standalone application operating at the client device in some embodiments. In other embodiments a web browser based portal can be used to provide the UI. Any other configuration to access cloud resources can also be used in various implementations.

In embodiments the consumer computing device may be configured to communicate with the provider computing device to request a particular functionality or obtain one more sets of data e.g. car dealership data . For example the consumer computing device may communicate with the provider computing device using an API through the web server . More specifically consumer computing device may be configured to send a JavaScript request for procuring a particular functionality or obtaining one or more data sets to the web server via the network and a Java Database Connectivity JDBC API on the web server may forward the data request to the provider computing device via the network for requesting the particular functionality or retrieving the one or more data sets.

In embodiments central management console may be configured to manage secure data exchanges and shared network information utilizing stubs e.g. virtual API interface installed on one or more computing devices. For example central management console may be configured to instruct stubs installed on consumer computing device and or provider computing devices to perform secure data exchanges by establishing virtual pipes . In embodiments provider computing devices may be configured to provide a service such as to one or more consumer computing device s whereas consumer computing device may be configured to consume the service of provider computing devices . For example consumer computing device may request information or request an action to be performed by provider computing devices through an API exposed by the provider.

In embodiments stubs may be a predefined combination of generated program code and configurations stored and or run on various computing devices. For example stubs may be software libraries or in process agents with security protections abstracted from hardware and embedded in a virtual layer. In embodiments the libraries may include specifications for routines data structures object classes and variables. In embodiments stubs may be software defined virtual API interfaces that are designed to ensure safe consistent efficient and fully audited communications between processes for one or more running applications such as an exchange of data. For example running applications utilize APIs that specify how the running applications should interact with each other in order to share and process content between computing devices. In embodiments each running application on a particular computing device may have a unique stub responsible for securely exchanging data related to that running application .

In embodiments stubs may provide abstraction at a web service call level of running applications . For example stubs may provide a web service abstraction layer based on named components and relative Uniform Resource Identifiers URI with API defined headers and payloads. Advantageously stubs may convert an API web service call received from running applications into a raw HTTP call and transmit to a destination based on injected rules routing information and load balancing information received from central management console .

In embodiments stubs may be customized for a particular running application or may be a generic stub to be used with multiple different running applications . For example multiple running applications may use a shared stub library to handle API web service calls. In embodiments running applications may have multiple instances of the application running and may have a stub for each instance such that each instance on a single computing device may be recognized as one logical endpoint by central management console . In embodiments stubs may provide abstracted consistent security across multiple programming languages. For example stubs may be implemented in different computer languages based on the language used in running applications e.g. JAVA C SQL etc. . For example running applications based in JAVA may be provided with a JAVA stubs such that the stub may be configured to understand the API web service calls from the JAVA running applications and is capable of performing the called functions.

In embodiments stubs may provide a single level abstraction for establishing secure virtual pipes e.g. virtual connections such as TCP IP connections for the exchange of data directly between computing devices. For example when running applications on a first computing device initiates a web service call the web service call may be redirected by stubs on the first computing device such that those stubs will process the web service call. In embodiments stubs may process a web service call from running applications by converting the web service call into raw HTML encoding the HTML and transmitting the HTML data to a destination endpoint.

In embodiments stubs may also act as a module for handling rest calls from other devices forming http requests processing listening for requests and responding to requests. For example running applications may make an API web service call and stubs for the particular running applications may handle all the steps prior to transmitting the data such as encryption addressing throttling and or metering of the API call. Similarly if an endpoint computing device e.g. a computing device receiving the API call has a stub then stubs for the endpoint computing device may handle all the steps prior to handing the API web service call off to the appropriate running applications . For example stubs for the endpoint computing device will perform authentication handshaking decryption of the received data and or direct the received data to the proper running applications .

Continuing with respect to in embodiments the consumer computing devices and provider computing devices and and and or stubs may provide data to the webs server or central management console respectively for customized monitoring and control purposes. For example the consumer computing devices and provider computing devices and and and or stubs may provide live performance metrics and traffic information to the webs server or central management console respectively. The live performance metrics and traffic information may include various measurements of performance of APIs for running applications and on the consumer computing devices and and or provider computing devices and . In embodiments the various measurements of performance of APIs may include i a total number of request messages ii a total number of errors iii a number of developers iv a number of applications in use v a total response time vi a size of each request message vii duration of request processing viii a size of each message sent ix longest response time x shortest response time and others.

In embodiments using the live performance metrics and traffic information provided by the consumer computing devices and provider computing devices and and and or stubs the webs server or central management console may assess the various measurements of performance of APIs to determine a performance status of each API. For example the webs server or central management console may be configured to run a health determination process for determining a quantifiable health metric indicative of each API s health that is either weighted or non weighted using health metric techniques known to those of skill in the art. In additional embodiments the central management console may be configured to use the live performance metrics and traffic information to modify the rules transmitted to stubs to enable throttling of data metering of data pause and or resume operation. Also in additional embodiments central management console may instruct stubs to add tagging attributes to enable monitoring flows to create real time visualizations of the network and employ virtualization testing. For example central management console may track communications between computing devices without adding information to the data payload.

In embodiments the webs server or central management console may be further configured to generate a GUI built into a browser using programming language such as HyperText Markup Language tool kits e.g. open source modular JavaScript library such as Dojo toolkits and or widgets such as website or application widgets e.g. a GUI displayed on a computing device as discussed with respect to to visualize and allow for interaction of the API and performance status of each API. For example the webs server or central management console may be configured to visualize the API and performance status of each API in a GUI comprising a dashboard with status indicators for each API. Additionally in embodiments the webs server or central management console may be configured to allow a user to use a syntax search to search for a particular API select a historical time of the various APIs to change which various measurements of performance of APIs are being visualized in any given instance in time drill down an retrieve greater detail concerning the methods of each API and initiate a live API call from the GUI using one or more methods of an API of a running application and that return data in an open standard format used by the API for transmitting data between software applications.

In embodiments the webs server or central management console may comprise the functionality to expose API methods with clear documentation and execute a live call to an API s method by using parameters exposed from the web service with a clear definition of what each parameter serves. In additional embodiments a node.js server not shown may be configured to expose the API methods to the webs server or central management console using authentication services to verify user access to the methods. For example a user trying to obtain additional detail regarding a particular method of an API may be required to provide authentication or user access credential to the node.js server threw the webs server or central management console for access to one or more methods of the API.

At step a performance status may be determined for each API. For example the web server or central management console may be configured to run a health determination process for determining a quantifiable health metric indicative of each API s health that is either weighted or non weighted using health metric techniques know to those of skill in the art. For example the web server or central management console may be configured to analyze the various measurements of performance provided for each API and determine a quantifiable health metric for each API based on the analysis of the various measurements of performance provided for each API.

In embodiments the standard definitions for the various measurements of performance for the API may include i a total number of request messages ii a total number of errors iii a number of developers iv a number of applications in use v a total response time vi a size of each request message vii duration of request processing viii a size of each message sent ix longest response time x shortest response time and others. In embodiments the quantifiable health metric provided for the API may be determined based on all measurements being equally important e.g. non weighted . However in additional or alternative embodiments weights may be applied to one or more of the standard definitions for the various measurements of performance for example using a multiplier for establishing priority of one measurement over another e.g. weighted .

At step each API and its determined quantifiable health metric may be visualized or illustrated. In embodiments the visualization or illustration may be displayed as a GUI on a computing device e.g. output devices of computing device as discussed with respect to . For example the GUI may include a dashboard comprising each API a visual indicator of the quantifiable health metric for each API and a search bar for initiating a search for one or more APIs as discussed in detail herein with reference to .

At step each API may be selected or searched to drill down into or expose greater detail regarding each API. For example selection or search of the API may open an additional window comprising a performance status as of a particular time various measurements of performance a history mechanism for navigating through time such that the various measurements of performance may be seen at different instances in time and various methods utilized by the API as discussed in detail herein with reference to .

At step each of the various methods may be selected to drill down into or expose greater detail regarding each method. For example selection of a method may open an additional window comprising the purpose of method the request URL for each method in XML and or JSON format request parameters of the method error codes of the method and any additional notes for the method as discussed in detail herein with reference to .

At step a live API call may be initiated from the GUI using one or more methods of the selected API. In embodiments the graphic user interface may be used by a user to select a method to initiate a live API call from the GUI using the method of the selected API of a running application that returns data in an open standard format used by the API for transmitting data between software applications as discussed in detail herein with reference to .

The illustration may further include a search bar for initiating a search e.g. a syntax search for one or more APIs. In embodiments a user can utilize the search bar to search for a specific API using keywords that can be compared to names of APIs within the dashboard methods of various APIs and comments of web services as shown in . For example an API search result may be rendered within the web server or central management console based on the search of the keyword within the structure definition of an API. For example a JSON schema definition may be stored in a database e.g. a NoSQL database in the following format 

In additional or alternative embodiments a user can utilize the search bar to execute a FIND command for a keyword in order to find the location of a folder storing the api schemaName Definition.json . Thereafter the web server or management console knows the File Name and API method that has the keyword in any of the descriptions parameters or parameter descriptions themselves. Accordingly only sections of the html pgp xml file tree that have the keyword executed with the find command will be rendered as a result of executing a search via the search bar .

In embodiments the illustration may further allow for visualization of detailed information for each API as shown in . For example each API within the API monitor may be selectable e.g. clickable via an input device or searchable as described above with respect to the search bar to cause the web server or central management console to generate an additional window e.g. another web page or pop up window having an API dossier that illustrates additional information for each API that includes a description of the API a status of the API and various measurements of performance of the API including response times and error rates . The description includes a set of functions or routines performed by the API that accomplish a specific task or are allowed to interact with a specific software component. The status includes the status of the API such as operating normally performance issues service disruption and or informational messages as of a specific time. The response time includes data points provided in a graphical representation that are representative of a length of time that it takes to get a response from an API over a span of time e.g. the last 24 hours . Error rate includes data points provided in a graphical representation that are representative of a number of errors incurred by the API over a span of time e.g. the last 24 hours .

In embodiments the additional window may further include one or more mechanisms e.g. a pull down list and or search bar to switch to a different API directly from the additional window rather than navigating back to the preceding web page comprising illustration . The drop down list may present the APIs in any order for example the APIs may be presented in order of severity of status with service disruptions listed at the top of the list and operating normally listed towards the bottom of the list. The additional window may also include the details of the status which may be accessed by an informational message e.g. clickable via an input device . For example the details may include a description of the HTTP response.

In embodiments the additional window may further include a history mechanism that may be utilized via a user to manipulate the various measurements of performance of APIs to view snapshots of the various measurements of performance at a particular time which may be then be updated and displayed. Additionally the history mechanism may be configured to allow a user to scroll through the various measurements of performance by day and or hour. Accordingly it should be understood that embodiments of the present invention allow a user to review historical and or current data as a single snap shot or as a sequence of successive snapshots.

As shown in the additional window may also include an issue history that includes any issues experienced by the API over a span of a predefined period of time. The issue history may also include expanded details of the issues which may be accessed by an informational message e.g. clickable via an input device . The additional window also include the methods e.g. a method for retrieving all user data specified in an API request a method for retrieving individual records by record ID a method for downloading a file attached to a record etc. utilized by the API for accessing running applications. It should be understood that the methods described above are merely examples and such methods can be any methods for use with APIs to cause an application to perform a process without departing from the spirit and scope of the present invention.

In embodiments the additional window may further comprise i a mechanism not shown for listing the methods e.g. in a particular order or sequence ii a mechanism not shown for expanding the methods e.g. a opening the methods to reveal additional information regarding each method such as the purpose of method the request URL for each method in XML and or JSON format request parameters of the method error codes of the method and any additional notes for the method and iii a mechanism for obtaining a method e.g. a selectable e.g. clickable via an input device mechanism to cause the web server or central management console to generate an additional window e.g. new web page or a pop up window that illustrates implementation of a particular method as shown in .

In accordance with aspects of the invention the web server or central management console may comprise the functionality to expose the methods with understandable documentation including parameters exposed from the web service with a definition of what each parameter serves. For example a node.js server may be configured to expose the API methods to the web server or central management console using authentication services to verify user access to the methods. Accordingly a user trying to obtain additional detail regarding a particular method of an API may be required to provide authentication or user access credential to the node.js server threw the web server or central management console for access to one or more methods of the API.

In embodiments the additional window may allow for executing a live API call from the GUI using one or more methods of the selected API of a running application that returns data in an open standard format used by the API for transmitting data between software applications as shown in . For example each mechanism for obtaining a method shown in may be selectable e.g. clickable via an input device to cause the web server or central management console to generate the additional window e.g. new web page or a pop up window that illustrates implementation of the particular method including parameters for executing the method . In embodiments each parameter may be pre populated with values for exemplary running of the method or a user can modify the parameters with their own select values. The additional window may further comprise a mechanism for executing the method e.g. a selectable e.g. clickable via an input device mechanism to cause the web server or central management console to generate a call using the parameters and returns data in an open standard format e.g. XML or JSON used by the API for transmitting data between software applications.

At step a first input e.g. selection via input device may be detected on an API e.g. an API or as a search inquiry e.g. search bar in the displayed portion of the dashboard. At step in response to detecting the first input at least a portion of a first additional window may be opened that illustrates additional information for the API that was selected or searched via the first input. The additional information may include a description of the API a status of the API and various measurements of performance of the API including response times and error rates. The additional information may further include any issues with the API and the methods e.g. a method for retrieving all user data specified in an API request a method for retrieving individual records by record ID a method for downloading a file attached to a record etc. utilized by the API for accessing running applications.

While the portion of the first additional window is displayed at step a second input e.g. selection via input device may be detected on a method e.g. a method in the displayed portion of the first additional window. At step in response to detecting the second input at least a portion of a second additional window may be opened that illustrates additional information for the method such as parameters for executing the method.

While the portion of the second additional window is displayed at step a third input e.g. selection via input device may be detected on a mechanism within a portion of the second additional window e.g. mechanism . At step in response to detecting the third input a call may be executed using the parameters of the method that returns data in an open standard format e.g. XML or JSON used by the API for transmitting data between software applications as described with respect to .

In embodiments displaying the one or more windows may comprise displaying the one or more windows on top of the displayed portion of the dashboard and one or more interfaces. For example the one or more windows may be superimposed on top of the displayed portion of the dashboard and one or more interfaces. In some embodiments the one or more windows may be semitransparent or opaque. In alternative embodiments displaying the one or more windows may comprise opening the one or more windows in a separate web page.

As should be understood aspects of the present invention allow for the measurements of performance to be collected and assessed for each API and the API and performance status of each API to be visualized and interacted with via a web based GUI. More specifically the systems and methods of the present invention allow for a user to assess the performance of APIs based on measurements of performance at an instance in time via a user friendly GUI which allows the user to improve API performance attract developers troubleshoot problems and ultimately make better business decisions related to API infrastructure.

In embodiments the invention provides a computer implemented method for measurements of performance to be collected and assessed for each API on a network infrastructure and determinations assessments manipulations and modifications of the various measurements of performance that may be performed and displayed to a user via a GUI. In this case a computer system such as computing system can be provided on the network infrastructure and one or more systems such as the web server or central management console for performing the processes of the invention can be obtained e.g. created purchased used modified etc. and deployed on the network infrastructure.

In embodiments the invention provides systems and methods that perform the process of the invention based on a subscription business model. To this end a service provider could create maintain support etc. a computer infrastructure such as computing system that is configured to provide a service for example collecting and assessing measurements of performance for each API on a network infrastructure to a consumer. In return the service provider can receive payment from the consumer s under a subscription agreement such as a subscription price paid to have access to the computer infrastructure and or service.

The foregoing examples have been provided merely for the purpose of explanation and are in no way to be construed as limiting of the present invention. While aspects of the present invention have been described with reference to an exemplary embodiment it is understood that the words which have been used herein are words of description and illustration rather than words of limitation. Changes may be made within the purview of the appended claims as presently stated and as amended without departing from the scope and spirit of the present invention in its aspects. Although aspects of the present invention have been described herein with reference to particular means materials and embodiments the present invention is not intended to be limited to the particulars disclosed herein rather the present invention extends to all functionally equivalent structures methods and uses such as are within the scope of the appended claims.

