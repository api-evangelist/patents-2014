---

title: Intermediary for testing content and applications
abstract: A test device may include an application that accesses online content. In some examples, a test intermediary and/or a test user interface (UI) are downloaded to the test device in response to a request by the application for obtaining the content from a network location. The test intermediary may be positioned to receive communications between the application and the content during testing of the content and/or the application. For example, the test intermediary may intercept metrics and other callbacks passed between the content and the application during manual or automated testing. In some instances, the test intermediary may provide the metrics and/or other test outputs for display in the test user UI rendered on the test device. The content may be rendered to be functional within the test UI, and the existence of the test intermediary and/or the test UI may be transparent to the application and the content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09405660&OS=09405660&RS=09405660
owner: Amazon Technologies, Inc.
number: 09405660
owner_city: Seattle
owner_country: US
publication_date: 20140619
---
This application claims priority to and is a continuation of U.S. patent application Ser. No. 13 243 511 filed on Sep. 23 2011 the entire contents of which are incorporated herein by reference.

Some applications display web content or other online content in an interface provided by the application. As one example some types of applications such as applications that are executable on mobile devices or other computing devices use webview technology to enable access to online content from within the application. Thus rather than opening a browser outside the application or enabling full browser functionality within the application an application may render a webview that provides access to desired downloadable content such as a webpage typically with at least partial functionality. For instance the application displaying the webview may control or limit the amount of interaction that the user has with the online content displayed in the webview. The recent proliferation of mobile computing devices smart phones tablet computing devices digital media devices and the like has led to a huge increase in the number of applications devices and platforms that display online content within the native application.

This disclosure includes techniques and arrangements for performing testing of online technologies. For example the techniques may include testing of online content such as a webpage or other content that is downloaded and rendered by an application. Further the techniques may include testing of applications that download and render online content within the application such as in a webview or other interface provided by the application. In some implementations a test intermediary is provided between an application on a test device and online content rendered on the test device. As one example when the application requests content based on a particular uniform resource locator URL a computing device corresponding to the particular URL may provide the test intermediary in addition to or in place of the requested content. The test intermediary may insert itself between the application and the content for intercepting communications between the application and the content. For example the test intermediary may insert itself into the communication path between the content and the application based on knowledge of a communication agreement or configuration between the content and the application.

In some examples the test intermediary is implemented as executable code a computer program processor executable instructions computer readable instructions or other functional component that may be executed on a processor of the test device. For instance the test intermediary may be written in JavaScript HTML hypertext markup language Flash or other suitable programming language to provide a functional component that is maintained in a memory and executed by a processor to perform the functions described herein. In some implementations the test intermediary may be returned to the test device in response to a request for content made by the test device. Alternatively the test intermediary may be preloaded on the test device. The test intermediary may receive or intercept communications passed between content being tested and an application that accessed the content. As one non limiting example the test intermediary may be patched into or may patch itself into an application programming interface API that enables communication between the application and the content.

The content herein may by any code capable of generating or providing content that can be rendered by an application a browser or the like. In some implementations the content may be an interactive webpage viewable in a webview or other application interface provided by the application. As several non limiting examples the content may be implemented by instructions written in JavaScript HTML hypertext markup language Flash or other suitable programming language. Thus the content may include code or other processor executable instructions stored in a memory and executable on a processor to provide the content for display by the application.

In some examples a test user interface UI may also be delivered to the test device with the downloaded content and the test intermediary. The test UI may be rendered by the application on the test device along with the downloaded content. As one example the application may render the test UI in a functional application interface or framework such as a webview that combines or composites the original requested content within the test user interface. For example the content to be tested may be rendered within the test UI in a manner that enables the content to be fully functional for testing purposes. Furthermore the test UI may display test information in the test UI adjacent to the content being tested. For example the test UI may display test metrics test outputs test progress and other test information in real time while testing of the content is carried out. In some instances the test intermediary intercepts metrics and other communications between the application and the content and may provide these to the test UI for display to a user. Additionally in some instances the test intermediary may determine its own metrics related to the testing.

The test intermediary and the test UI may include the capability to use supporting technologies of the online content and any associated libraries. For example the test UI may be rendered in parallel with the content to be tested on the test device. The test UI and the test intermediary may share security based properties such as the same domain and protocols with the content to be tested. This arrangement also provides the test intermediary with functionality for capturing metrics and enabling simulated user interaction with the content. For example by intercepting and listening to parameters passed through callback interactions between the content and the application on the test device relevant metrics can be captured and recorded.

Furthermore rendering the test information side by side with the content being tested using the same libraries using similar coding technologies and the like also provides the test intermediary with the ability to interact directly with the content such as by triggering event listeners within the content. Consequently the test intermediary herein may include the capability to automate test interactions and record metrics data in real time when manual interaction or automated interaction is invoked. Additionally portability of the test intermediary may be at least equal to the portability of the content being tested and in some instances the test intermediary may be more portable because less modification may be required for adapting the test intermediary behaviors across platforms as compared with those of the content being tested.

The test intermediary may enable manual and or automated testing of the content through a test device such as a mobile device a computing device or other electronic device capable of displaying the content. For example automated testing of the functionality of the content can be performed with partial manual interaction to initiate the automated tests on the test device. Further the test intermediary can also enable manual testing of the content on the test device. The test intermediary and test UI can be used for testing of the content rendered within the application interface provided by the application executing on the device. Thus the test intermediary and test UI enable simultaneous testing of not only the content but also the interaction of the application with the content. For example real time presentation of metrics and test outputs in the test UI can help a user identify whether a bug or malfunction originates within the content or the application.

During either manual or automated testing the test metrics and or other test outputs may be captured or determined by the test intermediary and displayed in the test UI in real time adjacent to the content being tested. Additionally some implementations enable selection and execution of automated tests through interaction with the test UI displayed on the test device such as by selection of a particular test through activation of a drop down menu or the like. Examples of tests that can be executed may vary from very basic tests of the content such as whether the content loads correctly to more complex performance tests that test particular features user interface controls or functions of the content. In some examples the test intermediary may be used for performance testing in which tests are executed on the test device through the test intermediary and the test intermediary captures the test metrics to provide a reliable indication of performance of the content and or application on the test device. Regardless of whether the testing is performed manually or using automated interaction the test intermediary is able to capture various metrics regarding the testing and test results verify the state of the content using scripts that can inspect the content and perform other functions to facilitate the testing as described in additional detail below.

In some implementations the content being tested may be rendered in an inline frame iframe within the test UI also rendered by the application. In one particular example the content being tested is rendered within an iframe as part of a webview rendered on the test device that also includes the rendered test UI. Additionally the current state of the content can be verified by the test intermediary using scripts that inspect the state of the content. For example the test intermediary and test UI exist in the same domain IP protocol as the content so that the test intermediary is not subject to security restrictions which enables the test intermediary to directly determine the current functional state of the content. The test UI and the content are rendered as a single page by the application so that the test UI and test intermediary are transparent to the application and the content. As one example the application can load a webview page including the test UI and the content in the same fashion as the original content would have been loaded. For instance during rendering of the test UI the test intermediary or test UI may call another URL to render the original content in the iframe provided within the test UI. Furthermore the iframe containing the content may be malleable to the needs of the content such as with respect to sizing or URL parameters that determine properties of the device on which the test UI and the content are rendered. Further since the test UI is constructed in a manner similar to the original content the test UI may be as flexible and portable as the original content. Additionally in some implementations multiple iframes may be implemented in the test UI to enable contemporaneous display and testing of multiple different instances of content.

In addition in some implementations new code can be inserted into the content or existing code of the content can be edited by the test intermediary. For example by changing the code of the content during testing different forms of testing are possible such as for simulating various user cases that would otherwise be difficult to generate. Thus different content having different attributes may be generated automatically and tested by using the test intermediary to change one or more aspects of the code of the content during testing.

In some implementations the test intermediary is configured to initiate automated UI interactions that directly interface with the content to simulate actions that a user would perform while interacting with the content. Accordingly because the test intermediary coexists with the content the test intermediary is able to capture and resend callbacks which can serve as a method of controlling verifying and acting upon the content while the content itself can remain isolated and function as if it were in direct communication with the test device. Consequently upon implementation of the test intermediary the application callbacks do not interact directly with the content and instead all communication between the application and the web component may pass through the test intermediary.

Additionally in alternative implementations the test intermediary may enable automated testing of the content through simulation using a browser running on a computing device such as a personal computer or other test device. For instance simulated testing may be performed using a browser and a test simulation component that interacts with the test intermediary and which enables automation of a plurality of features that can be tested through browser DOM document object model validation. Additionally in some implementations the test simulator component communicates with the test intermediary to initiate UI interactions and perform other specified automated testing. For example some implementations may use a java code based test simulation component that issues instructions the test intermediary e.g. tap an image select a control etc. through the browser. The test automation may be inserted within the test intermediary code framework. Callbacks generated from the browser are accounted for by the test intermediary and communicated to the content by the test intermediary in a modified form if necessary.

Implementations herein provide an efficient and useful approach to testing online content applications and other technologies such as webview based application extensions online stores ecommerce sites and webpages rendered in a webview or as a web like page on a device. Unlike conventional test technologies the test intermediary herein can function with any application capable of displaying online content such as in a webview and is thus compatible with numerous devices operating systems and platforms. Further the test intermediary is compatible with and can leverage various standard libraries that are used by the content.

In addition the test intermediary may enable various types of UI tests to be performed such tests against javascript based event listeners while also providing a mechanism to temporarily remedy issues concerning cookies during testing. In addition because the test metrics may be displayed in real time a user can troubleshoot real time metrics information and determine which metrics are the results of which content or application events. Accordingly some implementations herein provide an application and browser agnostic test UI for testing of online content and technologies such as on devices that support webviews through applications and browsers.

Some implementations are described in the environment of testing webview technology such as webviews websites online applications and so forth. However the implementations herein are not limited to the particular examples provided and may be extended to other types of testing and other types of technologies as will be apparent to those of skill in the art in light of the disclosure herein.

The test device may be any type of device able to receive and render the content to be tested. Several nonlimiting examples of test devices include eBook reader devices and media players tablet computers desktop or personal computers cellular phones or smart phones and laptops or netbook computers to name a few. In illustrated example the test device includes an application and a display . The application may be any application that can receive and render online content . In some instances the test device may be a mobile device such as a smart phone or a tablet computing device and the application may be a mobile application. The application may be executed to generate an application interface capable of displaying online content . As one non limiting example the application interface may be a webview or similar interface created by the application to enable a user to interact with the downloaded content rendered in the application interface .

The communication link may include one or more of a direct connection a local area network LAN a wide area network WAN or any combination thereof and may include both wired and wireless communication technologies using any suitable protocols and communication techniques. In some implementations the communication link may be a LAN connection provided by a wireless router a network hub a network switch or the like. In other implementations the communication link may include the Internet. The host computing device s and the test device may communicate and interact with one another using any combination of suitable communication and networking protocols such as Internet protocol IP transmission control protocol TCP hypertext transfer protocol HTTP and so forth.

In some examples the test intermediary may be used during testing of the content and or the application on the test device . As one non limiting example the application may be activated to download online content such as content . Thus the application may send a content request to obtain content from a particular network location such as from a URL coded into or provided to the application. The content request may be received by the host computing device . In some examples rather than returning the requested content the specified URL returns the test intermediary . In other examples the URL returns both the test intermediary and the content . In yet other examples the URL returns the test intermediary the content and a test user interface UI . In still other examples the test intermediary and or the test UI may be present on the test device already. For instance the test intermediary and or the test user interface may be stored in a storage location on the test device . Additionally in some examples the test UI is not used and the test intermediary conducts automated testing on the content and reports the results to a remote location such as to the host computing device cloud storage not shown or the like.

As one non limiting example to initiate testing of the content on the test device a user may modify the application so that selection of a link in the application that would normally obtain the content instead directs to a URL that contains the test intermediary and or the test user interface in addition to or instead of the content . As another example the test intermediary and or the test user interface stored at a URL that is normally assigned to the content . In either event the user may activate a control in the application that causes the application to send the content request for obtaining the content . In some examples the requested content is returned with the test intermediary and the test UI while in other examples the content is obtained later by the test intermediary and or the test UI . For example the content may be called as the test UI is rendering in the application interface provided by the application .

The content may by any code capable of generating or providing content that may be rendered by an application a browser or the like. In some implementations the content may be an interactive webpage accessible through a webview or other application interface . For example the application executing on the test device may receive and render the content . As several non limiting examples the content may be implemented by instructions written in JavaScript HTML hypertext markup language Flash or other suitable code that is executable to provide the content to the application . As one concrete non limiting example the content may be an online store website webpage or the like. The test UI may be a graphic user interface that can be rendered by the application in the application interface to enable testing of the application and or the content . In some examples the test UI is provided by instructions written in the same language as the content or another language compatible with the content .

As mentioned above the application may generate or create an application interface for rendering the content for display to a user . In some implementations the application interface may be an application webview instance. Various different languages layout engines operating systems and platforms enable webviews such as WebKit developed in part by Apple Inc. of Cupertino Calif. and Android developed in part by Google Inc. of Menlo Park Calif. As one non limiting example webviews may be used for providing online content directly within a computer application typically without full browser functionality. For example the application may render the content in a window to display the content to a user without a conventional browser interface such as a browser address bar or other navigation and interface components typically associated with a browser. Webviews can provide custom user interfaces and enable implementation of interactive features such as interactive menus selectable items and so forth. Accordingly a webview is an example of an interface generated in association with an application to enable the application to display interactive online content. For example a webview instance enables both the interpreting of web languages and online technologies e.g. HTML cascading style sheets CSS JavaScript Flash as well as the displaying of rendered online content in an area of a specified size. Further while an application webview is provided as one example of the application interface implementations herein are not limited to application webviews but may include other types of application interfaces for presenting interactive online content by an application depending on the platform operating system and so forth of the test device.

In the illustrated example the test intermediary the test UI and the content are shown as being maintained on the same host computing device although in other examples the test intermediary and or the test UI may be provided at separate host computing devices from the content . The application may receive and render the test UI in response to the content request instead of or in addition to the content . Furthermore the content may be rendered in fully functional form within an inline frame iframe within the test UI in the application interface . As is known in the art an iframe is an HTML element that enables content to be placed within another frame. Thus the content in the iframe is able to exist and be interacted with separately from the exterior frame within which the iframe exists.

Placing the content into an iframe within the test UI enables implementations herein to display the test UI contemporaneously with the content being tested. Further the test intermediary may insert itself into a communication path between the content and the application to receive and or resend communications between the content and the application . Accordingly both the test UI and the test intermediary may be transparent to the application and the content .

As mentioned above the test intermediary and or the test UI may be utilized to perform manual or automated testing on the content . For example a user may manipulate one or more user interfaces or I O devices of the test device to conduct manual testing of the content and or to initiate automated testing. In some instances the testing of the content may also serve to test at least a portion of the application such as the portion of the application that is associated with display and interaction with the content . For example because the test metrics are displayed in real time during testing the user may be able to identify whether a bug is in the content or in the application .

The application renders and displays the content in the iframe within the test UI based on instructions for rendering the test UI . Because the content is contained within the iframe the content may maintain full functionality for receiving and responding to user interactions. Accordingly the user may manually interact with the content to perform manual testing of the content displayed in the application interface . Further as testing is performed test information may be provided to the test UI for display to the user . In the illustrated example the test UI includes a metrics output and a test output however other implementations of the test UI may include other outputs displays configurations or the like. Additionally the test UI may include a drop down menu that can be used to select an automated test to initiate the automated testing of the content .

As also mentioned above because the content is rendered in its own isolated iframe within the test UI the test UI may be displayed in a side by side or above below experience by placing the test UI adjacent to the iframe that maintains the content . Accordingly metrics data can be captured and formatted in real time for output in a metrics output area adjacent to the content to enable the user to view metrics as the testing is being conducted. Additionally the current state of the content can be determined by the test intermediary using scripts that inspect the state of the content and this information may be included in a test output area which also may be displayed adjacent to the iframe containing the content . Furthermore because the content is maintained in the separate iframe the user is able to view and interact with the elements of the content as if the test UI was not present.

The content may include various types of content and interactive features such as one or more user interface controls e.g. buttons hyperlinks text entry blocks interactive menus etc. text images video and so forth. In the illustrated example the content includes UI controls a search interface such as text entry search box a first selectable item a second selectable item a third selectable item and a fourth selectable item . As one non limiting example suppose that the content provides an online store or ecommerce site and the application includes a function that enables a user to access the online store to shop for one or more items such as a media item. The application may enable the user to select an item to obtain more information about the selected item. In this example when one of the selectable items such as item is selected one or more corresponding images and corresponding text is displayed adjacent to the selected item . Consequently the content may provide text that describes the selected item one or more images that depict the selected item and or one or more UI controls that enable the user to purchase the selected item browse for other items enter account information or the like. The user may also use the search interface to search for other items such as by keyword category or the like. Further depending on the configuration of the device in some implementations the content may be optimized for touch interaction or various other types of input output I O control.

Hence during manual testing of the content in this example the user may manually test each of the selectable items provided in the content to ensure that the images and text are properly rendered when a particular selectable item is selected. For example as illustrated in the user performs a manual UI interaction when the user uses an input mechanism or input object to select the third selectable item . Following the manual UI interaction the user may determine whether the image and text corresponds to the third selectable item and is properly rendered within the application interface . Furthermore the user may observe the metrics provided in the metrics output area which may provide a metric name and an elapsed time for each operation performed and other parameters and information relating to the operations performed by the content in response to the user interactions. The user may also observe any test outputs provided in the test output area such as the current state of the content the interaction performed and the like.

As illustrated in the user may also initiate automated testing through the test UI according to some implementations. For example by selecting the drop down menu the user may cause a test selection window to be displayed overlaid on the test UI . The test selection window may include one or more automated tests such as tests A C that are selectable by the user to initiate automated testing of the content . Thus the user may use the input object to select one of the tests as indicated in to initiate the automated testing.

As illustrated in as the automated testing is performed the user may be able to view the testing in real time as well as the displayed metrics in the metrics output area and test outputs in the test output area . In the illustrated example suppose that the automated test selects the first selectable item . The test output area may include the test output indicating that the first selectable item has been selected. Furthermore the metrics output may display one or more additional metrics corresponding to the selection of the first selectable item . In addition the user may observe whether the images and text correspond to the first selectable item and are rendered and displayed properly within the application interface . Further while a particular concrete example has been provided above for explanation purposes implementations herein are not limited to use with any particular type of online content testing techniques or the like.

As one nonlimiting example suppose that the first content instance is written in English and that the second content instance is written in a different language for providing the same or similar information performing the same or similar service or the like. Thus the interactive features and items contained in each content instance may differ somewhat in appearance between the two content instances . Consequently the two instances of web content may be tested contemporaneously in the single test UI contained within the application interface . Additionally the test UI may include separate metrics output areas and test output areas corresponding to the first iframe and the second iframe respectively. Accordingly the user may observe the metrics corresponding to the manual or automated testing performed on each of the separate instances of content . Furthermore while several example configurations of an application interface having a test UI rendered therein have been described for discussion purposes implementations herein are not limited to the particular examples provided.

In this example suppose that the user has activated the application on the test device and initiated an action that will result in the application obtaining and displaying online content such as the content . For instance the user may wish to test the performance of the content and or test the interaction of the content with the application . Thus the application may create a webview instance as indicated at that will be used to display the content to the user . Further the application directs the webview instance to access content from a specified URL. The webview instance initiates a request for the content from the specified URL such as by initiating an HTTP GET command for the specified URL as indicated at . Based on for example standard HTTP communication protocols the request for the content may be directed to the specified URL at the host computing device . The specified URL may include not only the requested content but also the test intermediary and the test UI . Alternatively as mentioned above in other implementations the specified URL may provide just the test intermediary and the content . In still other implementations the specified URL may include just the test intermediary and the test UI and the requested content may be obtained subsequently during rendering of the test UI .

As indicated at in the illustrated example the host computing device returns the requested content with the test intermediary and the test UI to the webview instance . As indicated at the webview instance interprets the received data and begins rendering the test UI and the content . The application has been listening for a received content flag or callback as indicated at from the webview instance . When the callback is detected then as indicated at the application instructs the webview to load a translation layer . The translation layer may be a piece of code that allows the application to communicate with the content . In some implementations the translation layer is specific to an operating system of the test device and may be fetched from another server may be provided with the application etc. The translation layer may form one half of an application programming interface API that defines the communication options and protocol between the content and the application . For example the API represents an agreement or specification between the application and the content as to what entities will be available at certain times during communication between the application and the content . In some examples the API may be a BrowserHost API which is compatible with e.g. the Apple iOS and Android operating systems.

In some implementations depending on the particular configuration of the test intermediary the application may insert the test intermediary into the communication path with the translation layer . In other implementations the test intermediary may insert itself into the communication path. For example the test intermediary may repatch and rewire all the functions of the API so that they point to functions in the test intermediary . The functions in the test intermediary may then be used to perform desired interactions collect observations modify or stop communications and requests and so forth. The test intermediary may be inserted during the initial rendering and startup of the content as described in this example such as when the translation layer is initiated. In other examples the test intermediary may insert itself into the communication path afterwards such as by emulating a start up sequence of the API . However the latter option results in missing of the startup conversation between the content and the application which may not be desirable in some types of testing.

During loading of the translation layer the translation layer sets up an agreed upon flag within the content that causes the content to send a notification when the rendering of the content is complete. For example during loading of the translation layer and possibly the test intermediary the rendering of the test UI and the content has been ongoing. For instance as part of the rendering the content may request additional content as indicated at such as obtaining additional images and scripts specified by the content . When the rendering is complete as indicated at the content may trip the agreed upon flag . The tripping of the flag begins the startup sequence for the API e.g. BrowserHost startup in some examples . As indicated at the webview instance loads the preparation layer that forms the other half of the API . For example the preparation layer may be a piece of code similar to the translation layer which however is configured for receiving communications from the content rather than the application . Accordingly the preparation layer and the translation layer enable communication between the application and the content according to agreed upon protocols and parameters.

With the insertion of the test intermediary into a communication path between the application and the content the test intermediary is able to not only observe the communications but also change or insert communications to perform various testing functions or to achieve various desired results. As mentioned above the test intermediary is configured to receive the communications from the preparation layer in place of the translation layer and receive communications from the translation layer in place of the preparation layer . Accordingly the communication path between the content and the application may traverse from the content to the preparation layer as indicated by arrow to the test intermediary as indicated by arrow to the translation layer as indicated by arrow to the webview instance as indicated by arrow and to the application as indicated by arrow with communications in the opposite direction along the communication path being the reverse.

In some instances the test intermediary may simply observe these communications and then forward the communications on to the respective intended layer . However in other instances the test intermediary may modify these communications or insert new communications in order to carry out certain functions or obtain desired effects such as for performing automated testing and providing test information to the test UI such as metrics and test outputs. Accordingly because the test intermediary operates within the communication path between the application and the content the test intermediary can typically perform any operation that the content can perform on any operating system or device able to render the content . For example this includes the ability to operate automated tests with the content across different devices and operating systems and report the test results to the test UI or other output location. This further enables testing of the same content features with applications on multiple devices to ensure that the content features applications and devices operate at least in accordance with minimum standards.

In an environment in which the test intermediary is not present the application and content may communicate one or more callbacks directly to one another. For example the application may receive callbacks from the content and the content may receive callbacks from the application . In some instances the callbacks may be specific functions or data required of an application that desires to access the content . In other instances the callbacks may include one or more metrics provided by the content to the application . Accordingly the callbacks may be provided according to the API discussed above whereby specific callbacks are available for specific needs of the content and the application . Several non limiting examples of callbacks include 1 whether the content is ready for interaction 2 a network status of the test device 3 accessing a link to a selectable item in the content 4 reporting metrics and 5 initializing a function by passing important data to name a few.

As one example the content may be configured to automatically record metrics to the application as part of the operation of the content and the application . As one non limiting example a metric may specify an action performed by the content and an amount of time elapsed to perform the action. Using a series of function calls and callbacks the content may collect the data pertaining to the metric and format the metric data. The content then passes the metric data to the preparation layer which passes the data to a specific record metric function defined in the translation layer . The translation layer takes the metric data and if necessary translates the metric data provided by the application into information that the application can understand. The translation layer then passes the metric data through the webview instance to the application which then does the appropriate action such as recording or storing the metric data as the application s own metric to be batch uploaded at some future point.

In the case in which the test intermediary is present in the example above the test intermediary receives the metric data in the callback from the content to the application . The test intermediary resends the callback to the translation layer and also may translate and or record the metric data. Additionally the test intermediary may provide the metric data to the test UI for display in the metrics output area of the test UI .

Another example may involve using the content to download a media item to the test device through the application . In a manner similar to that described above the content may inquire about the download progress of the media item using a callback such as StatusRequest item name . The content may receive no immediate reply from the application however some time later the application may respond using a similar sequence but in reverse and with different data i.e. using a replay StatusReply the downloading status . Accordingly in some implementations a communication functionality may use two way communication that uses one call for content to application communication and another different call for application to content reply. In other implementations however a single communication functionality may be used. Additionally in some examples a callback can originate with the application e.g. informing the content about the loss of wireless connectivity rather than originating just with the content .

Further because the test intermediary operates in the same sandbox as the content i.e. the same thread same domain and same security protocols the test intermediary can perform the same functions as the content . For example the test intermediary may support running test cases and reporting the results i.e. metrics and test outputs to the test UI . This allows the user to easily test the same features or functions on multiple devices and ensure that all models versions and so forth are operating in the same way.

When the test intermediary is included as in the example of the test intermediary receives one or more callbacks from the application to the content as indicated at observes or records the callbacks and resends these callbacks on to the content as indicated at . Similarly the test intermediary receives one or more callbacks from the content to the application as indicated at observes or records the callbacks and resends the callbacks to the application as indicated at . As mentioned above the callbacks may include one more metrics provided by the content e.g. a record metrics callback and or the application . The test intermediary may capture the metrics data included in the callbacks between the content and the application as indicated at and output any metrics data to the test UI as indicated at .

Further in some implementations because the test intermediary is patched between the translation layer and the preparation layer the test intermediary understands the communication contract between the application and the content . The test intermediary is able use this position to carry out various functions such as automatically adapting to an application or test device that is compatible with the content . Hence the test intermediary is portable across numerous different applications devices and platforms in a manner similar to the content . Additionally in some implementations the test intermediary may temporarily remedy issues involving cookies during the testing so that the content behaves in a normal manner during the testing.

In some implementations the test intermediary may utilize one or more libraries that are included with or used by the content . For example in some implementations the content may be written with code that relies on one or more libraries for functionality or for at least one feature. As one non limiting example if the content is written using JavaScript then the content may include or may utilize one or more available JavaScript libraries such as the jQuery library available from the Software Freedom Conservancy Inc. Brooklyn N.Y. or other suitable library. In some examples the library may be downloaded to the device as part of the content . Hence in some implementations the test intermediary and or the test UI may also be implemented using JavaScript or other suitable language and may make use of the same library as the content for at least one feature of the test intermediary or the test UI . Accordingly the test intermediary and the test UI may be executable code or other processor executable instructions maintained in a memory or other computer readable media and executed by one or more processors to perform the functions described herein.

Additionally the test intermediary can facilitate new functionality or edit existing functionality of the content and use custom callbacks that may only have use to the test intermediary . In some implementations the code of the content may be modified during the testing. For example as indicated at the test intermediary may insert new code into the content or may edit the existing code of the content . This enables testing of conditions that may not be easily triggered using standard user interface commands such as simulating certain operating conditions applying unusual time constraints or the like. For example as mentioned above the test intermediary may modify the content so that selection of each selectable item results in an error message such as for testing an error message display feature of the content . Other possible variations will also be apparent to those of skill in the art in light of the disclosure herein.

Furthermore as discussed above the test intermediary may perform automated testing on the content . As indicated at the test intermediary may initiate a series of user interface interactions with the content to simulate various use case scenarios such as selecting displayed items navigating the displayed content and so forth. Thus through function calls made directly to the content by the test intermediary through the communication path the test intermediary can directly initiate simulated user interaction with the content .

Additionally as testing manual or automated is carried out the test intermediary may determine a state of the content and or a current test function being performed as indicated at and provide this information as test output to the test UI as indicated at . For example as each step in a test is performed the step may be displayed on the test output area of the test UI . In other examples a current state of the content may be displayed such as downloading a media item idle etc.

As one example content A content B and content C may be different versions or instances of content for testing such as different versions of a webpage or online store for different platforms devices applications or the like. For example the test simulation component may be a plug in to the browser and may work in concert with the browser and the test intermediary to simulate testing of the content using the browser . In some instances the test simulation component may be an open source Selenium plugin available from SeleniumHQ under the Apache 2.0 License or other suitable test simulation component that automates browser operations. Thus the test simulation component may be used to cause the browser and the test intermediary to perform desired interactions with the content being tested to provide automated testing of one or more versions of the content .

In some implementations the test simulation component may be configured to cause the browser to perform a content request to a URL at which content A is located. In other implementations the user may manually cause the browser to download the content A . The browser may receive the content A and render the content A in a browser interface on the display . During rendering the browser interface may establish a communication path between the browser and the content A that includes an API e.g. having a translation layer and a preparation layer similar to the communication path and API described above with respect to . Further the test intermediary may be inserted into the communication path between the content A and the browser . For example the test intermediary may be similar to the test intermediary described above and may be patched into the functions of the API so that the test intermediary intercepts communications between the browser and the content A . The test simulation component serves as a controller that can automatically execute one or more tests on the content A by calling into the test intermediary and then aggregating one or more test logs to enable automated reports of each test. Thus the test simulation component may manage which URL i.e. version of the test content is loaded with what parameters and may enable sequential testing of multiple versions of content such as content A content B and content C for comparison and verification purposes.

As one non limiting example the test simulation component may sequentially deliver one or more instructions to the test intermediary which in turn communicates one or more automated UI interaction to the content A similar to the automated UI interactions described above. For example the test simulation component can issue JavaScript function calls which initialize one or more automated tests that reside within the test intermediary . In response to the automated tests of the test intermediary the content A may provide one or more metrics in communications to the browser which are intercepted by the test intermediary in the manner described above with respect to . For example the content A may provide metrics in communications to the browser in response to receiving one or more automated UI interactions from the test intermediary . The test intermediary may store the captured metrics in the test log or the like. Further when the testing of the content A is complete the test simulation component may next load another instance of the content such as content B for performing the testing. Additionally in some implementations the test UI may also be rendered on the display to enable a user to view the captured metrics and other test information in real time. Accordingly the example of enables automation of testing of multiple instances of the content using the test intermediary which does not require manual interaction to open the browser to the test intermediary or initiation of individual automated tests manually. Consequently the implementation of is useful for testing certain features of the content but unlike the examples of does not enable testing of the interaction of the content with a particular application on a test device or platform.

At block an application on a device sends a request for content to a specified network location. For example in response to a user interaction the application on the test device may send a request to download content from a specified URL.

At block the test device receives a test intermediary and a test UI in response to the request for content. In this example the test intermediary and the test UI may be provided to the test device over a network in response to the request for content made to the specified URL.

At block the test device receives the content requested by the request for content. In some examples the content requested may be received with the test intermediary and the test UI. In other examples the requested content may be received subsequently during rendering of the test UI.

At block the test UI is rendered in an application interface associated with the application. For example the test UI may be rendered in an application webview or other suitable application interface provided by the application.

At block the content is rendered in the test UI. For example the content requested by the request for content may be rendered in an inline frame iframe within the test UI.

At block the test intermediary is inserted into communication with the content and the application. For example in some implementations the test intermediary may be patched between a first part of an API and a second part of an API that specifies communications between the application and the content. In a particular example the test intermediary may be patched into the functions of a translation layer that communicates with the application and a preparation layer that communicates with the content.

At block the test intermediary receives at least one communication between the application and the content. For example the test intermediary may intercept callbacks and other communications between the content and the application and may resend these communications or send alternative communications for carrying out testing or achieving various other results with respect to the content.

At block the test intermediary provides test information corresponding to the at least one communication to the test UI. For example the test intermediary may provide test metrics test outputs or other test information to the test UI.

At block the test UI displays the test information contemporaneously with the content being tested. For example the test UI may display the test metrics test outputs and the like adjacent to the display of the content in the iframe within the test UI.

At block a manual UI interaction with the content is received at the test device. For example a user may manually interact with the content rendered in the test UI on the test device.

At block the test intermediary receives at least one communication in response to the manual UI interaction with the content. For example in response to the manual UI interaction the content may send a metric callback to the application. The test intermediary may receive this callback determine a metric and resend the callback to the application.

At block the test intermediary may provide test information corresponding to the at least one manual UI interaction to the test UI. For example the test intermediary may provide the determined metric to the test UI along with any other corresponding test outputs or test information.

At block the test information is displayed in the test UI contemporaneously with the content being tested. For example the test UI may display the captured metric and any other corresponding test information adjacent to the content in real time.

At block a selection of an automated test is received. For example the test UI may provide an interactive menu that enables a user to select an automated test to be performed with respect to the content on the test device.

At block the test intermediary initiates testing and provides an automated UI interaction to the content. For example in response to the selection of an automated test the test intermediary may perform the automated test by sending communications to the content. In some implementations the communications may include one or more automated UI interactions with the content.

At block the test intermediary receives at least one communication in response to the automated UI interaction. For example the test intermediary may intercept a communication of a metric from the content to the application made by the content in response to the automated UI interaction.

At block the test intermediary provides test information corresponding to the at least one automated UI interaction to the test UI. For example the test intermediary may provide at least one captured metric corresponding to the automated UI interaction to the test UI along with any other relevant test output or information.

At block the test UI displays the test information contemporaneously with the content being tested. For example the test UI may display the captured metric and any other corresponding test information adjacent to the content in real time.

At block content to be tested is loaded into a browser interface. For example a test simulation component may cause the browser to access and download a particular instance of content for testing.

At block a test intermediary is inserted into a communication path between the browser and the content. For example the test intermediary may be patched into communication with an API that enables communication between the browser and the content. One example of such an API is referred to herein as the BrowserHost API which is compatible with Apple iOS and Android operating systems.

At block the test intermediary receives at least one instruction to perform at least one automated UI interaction with the content. For example the test simulation component may instruct the test intermediary to perform one or more automated UI interactions with the content. In some implementations the test simulation component may instruct the test intermediary to commence with one or more automated tests included with the test intermediary.

At block an automated UI interaction is provided to the content. For example the test intermediary may communicate an automated UI interaction to the content through the communication path.

At block the test intermediary receives a communication in response to the automated UI interaction. For example the test intermediary may intercept a communication of a metric from the content to the browser made by the content in response to the automated UI interaction.

At block the test intermediary stores test information corresponding to the at least one automated UI interaction and the received communication to a test log. For example the test intermediary may provide at least one captured metric corresponding to the automated UI interaction to the test log along with any other relevant test output or test information.

The example processes described herein are only examples of processes provided for discussion purposes. Numerous other variations will be apparent to those of skill in the art in light of the disclosure herein. Further while the disclosure herein sets forth several examples of suitable frameworks architectures and environments for executing the processes implementations herein are not limited to the particular examples shown and discussed.

In the illustrated example the host computing device includes one or more processor s a memory and one or more communication interfaces . The processor s as well as the other processors described herein e.g. processor s and processor s may be a single processing unit or a number of processing units and may include single or multiple computing units or multiple cores. The processor s can be configured to fetch and execute computer readable instructions stored in the memory or other computer readable media.

The memory as well as the other memories described herein e.g. memory and memory may include volatile and nonvolatile memory and or removable and non removable media implemented in any type of technology for storage of information such as computer readable instructions data structures program modules or other data. Such memory includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape solid state storage magnetic disk storage RAID storage systems storage arrays network attached storage storage area networks cloud storage or any other medium which can be used to store the desired information and which can be accessed by a computing device. Depending on the configuration of the host computing device the memory may be a type of computer readable storage media and may be a non transitory storage media.

The memory may be used to store any number of components. For example the memory may store the test intermediary and or the test UI . The memory may further store the online content including content such as a webpage or website configured to provide one or more instances of content to be tested other content and an operating system for controlling and managing various functions of the host computing device . The host computing device may also include many other logical programmatic and physical components of which those described above are merely examples that are related to the discussion herein.

The communication interface s may include one or more interfaces and hardware components for enabling communication with various other devices such as test devices and or other computing devices such as computing device over the communication link . For example communication interface s may facilitate communication through one or more of the Internet cable networks cellular networks wireless networks e.g. Wi Fi cellular and wired networks. Various different approaches to implementations described herein can be implemented in various environments. For instance the communication link may include any appropriate network including an intranet the Internet a cellular network a LAN WAN VPN or any other such network or combination thereof. Components used for such a system can depend at least in part upon the type of network and or environment selected. Protocols and components for communicating via such networks are well known and will not be discussed herein in detail.

Host computing device s may further be equipped with various other input output I O devices . Such I O devices may include a display various user interface controls e.g. buttons joystick mouse keyboard touch screen etc. audio speakers connection ports and so forth.

The memory may be used to store any number of functional components that are executable on the processors . In many implementations these functional components comprise instructions or programs that are executable by the processors and that implement operational logic for performing the actions attributed above to the test device . In addition the memory may store various types of data that are referenced by the executable components.

In some implementations the memory may maintain one or more applications that are executable by the processor such as for accessing and rendering the content . The memory may further include the test intermediary and the test UI as functional components executable by the processor for performing the functions described herein. In some cases the test intermediary and test UI may be downloaded to the memory from a network location such as a URL in response to a request for the content to be tested. Memory may also store an operating system that may control the various functions of the test device .

The communication interface s may include one or more interfaces and hardware components for enabling communication with various other devices and modules such as the host computing devices over the communication link . For example communication interface s may facilitate communication through one or more of a LAN WAN the Internet cable networks cellular networks wireless networks e.g. Wi Fi cellular and wired networks or a direct connection.

In some implementations the display may be a touch sensitive or touchscreen display able to serve as an I O device. In addition to the display the test device may further be equipped with various other I O devices . Such I O devices may include various user interface controls e.g. buttons mouse joystick keyboard etc. audio speakers connection ports and so forth.

Furthermore this disclosure provides various example implementations as described and as illustrated in the drawings. However this disclosure is not limited to the implementations described and illustrated herein but can extend to other implementations as would be known or as would become known to those skilled in the art. Reference in the specification to one implementation this implementation these implementations or some implementations means that a particular feature structure or characteristic described is included in at least one implementation and the appearances of these phrases in various places in the specification are not necessarily all referring to the same implementation.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claims.

