---

title: Chatbots
abstract: In one aspect, the invention concerns a method of operating a chatbot to engage in a conversation with a correspondent the method comprises building a profile having plural profile variables for the correspondent; and during the conversation with the correspondent; selecting a node in the conversation data structure for processing based on the one or more profile variables, and processing the node to follow a conversation path based on the node's coded instructions and/or relationship with other nodes. In another aspect, the method comprises the steps of attempting to match the conversation data structure of the chatbot; if a matched node is found, selecting the matched node for processing; but if a matched node is not found, selecting a node for processing using a fuzzy search, or using a default procedure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09369410&OS=09369410&RS=09369410
owner: International Business Machines Corporation
number: 09369410
owner_city: Armonk
owner_country: US
publication_date: 20140107
---
The present application is related to PCT Application Nos. PCT AU2007 000912 and PCT AU2007 000916 the content of which is incorporated herein by reference.

This invention concerns chatbots that is computer agents designed to have conversations with human correspondents. In particular this invention concerns a method of operating a chatbot to engage in a conversation with a correspondent a method of building a chatbot a chatbot and a chatbot system. In another aspect this invention concerns software for implementing the methods.

Chatbots are becoming increasingly popular as an interesting and interactive medium for the provision of information. In a simple example a chatbot may replace a text based FAQ frequently asked questions facility on a web site. FAQ facilities generally provide a list of frequently asked questions and invite a correspondent to select one of them. Then the correspondent is automatically presented an answer. While this serves the purpose of conveying information it is dull.

By contrast a chatbot provides a conversational experience for interaction with correspondents. The correspondent can type a question and the chatbot will attempt to interpret it and then provide an answer. In the context of the FAQ facility if the correspondent submits one of the frequently asked questions using words the same as or similar to the question typically the chatbot will provide the prepared text answer exactly like the text based facility but in the context of chat.

Most previous chatbots operate in this way. The answer they present is a simple answer to a known question. If the question is unknown the chatbot simply offers a list of FAQ and invites the correspondent to select one. A significant problem with the use of most chatbots is the time it takes to program one. It typically takes months of programming and many hundreds of thousands of dollars for a user to create a workable chatbot.

In a first aspect the invention concerns a method of operating a chatbot to engage in a conversation with a correspondent 

Using this invention profile variables can be created that enable the chatbot owner to better personalise a conversation to assess the correspondent as for example a potential credit customer a potential employee etc. The information gathered about the correspondent can be combined with other sources of information and interpreted using assessment tools to produce for example a report on the correspondent s credit behaviour for the purposes of a credit risk management assessment or a report on the suitability of the correspondent for a particular job.

The step of creating a profile may include updating the value of a profile variable of the correspondent when a node is processed that node being coded with instructions to update the profile variable based on a profile update rule. The step of selecting a node for processing based on the one or more profile variables may include checking the one or more profile variables against respective pre determined values.

A profile variable may characterise one or more of content of the conversation the correspondent s interest personality and demographic one or more nodes processed in the conversation with the correspondent received input messages a process started or completed by the correspondent and an activity external to the conversation.

Further the method may comprise analysing a set of plural profile variables in a correspondent s profile and generating a report on the characteristics of the correspondent based on the analysis.

A received input message may be an explicit statement or unstructured content or activity either in textual or non textual form.

The method may further comprise customising delivery of information to the correspondent based on the correspondent s profile wherein one or more of the following is customised content layout presentation format robot action and source of the information. Customising delivery of information may be based on data extracted from a customer management system.

The method may further comprise performing an assessment on one or more of the correspondent s profile and an external source and reporting the result of the assessment.

In a second aspect the invention concerns a method of operating a chatbot to engage in a conversation with a correspondent 

The fuzzy search may comprise determining one or more nodes in the conversation data structure that are approximate matches to the received input message displaying the one or more output messages that are each associated with a nod to the correspondent and if the correspondent chooses one of the displayed messages selecting the node associated with the chosen message for processing. The received input message may then be recorded as a variation to a known input message that matches the node chosen by the correspondent.

The default procedure may comprise selecting a default node in the conversation data structure for processing and is only performed if no nodes are selected using the fuzzy search.

The step of matching the received input message with a node in the conversation data to structure or the fuzzy search or both may be based on a profile variable associated with the correspondent.

During the conversation the received input message or an output message from the chatbot to the correspondent is in textual or non textual form.

The method may further comprise analysing the received input message to determine a value for the profile variable associated with the correspondent.

The step of matching the received input message with a node in the conversation data structure may involve comparing the received input message with variations associated with that node until a matched variation is found. In this case the variations are either default variations or variations generated based on past conversations.

The step of matching the received input message with a node may further comprise the steps of translating the received input message into a compatible format using one or more internal translation dictionaries and comparing the translated message with the nodes in the conversation data structure. Matching the received input message with a node may be based on the length of the input message.

If the received input message is the correspondent s interaction with a webpage the method may further comprise automatically presenting one or more output messages to the correspondent based on the interaction.

The method may further comprise producing a report on conversations with one or more correspondents the report including properties of a profile variable associated with one or more correspondents.

Using the invention a chatbot can be created rapidly and easily without requiring any programming skills on the part of its designer. The conversation data structure provides a visual representation of possible conversations between the chatbot and correspondents and can be constructed to have long conditional conversation paths and to control the flow of a conversation.

Building the conversation data structure may comprise coding and or linking plural nodes associated with a conversation path to perform one of asking a series of questions to identify a correspondent s interests and intentions using a profile variable to select a node in the conversation data structure for processing and directing a correspondent down a conversation path to achieve a desired outcome.

The method may further comprise coding plural nodes to update each a profile variable for a correspondent according to a profile update rule wherein the training material sets out a list of profile variables and rules for updating them.

The training material may be stored in a central repository accessible by plural users to each build a chatbot. The training material may be one of a set of questions and responses a set of questions and responses ranked and grouped according to importance variations of a set of questions and answers a base personality with pre trained responses information that are specific to an industry or interest topic such as with or without pre trained responses a set of profile variables a conversation data structure or part of associated with another chatbot a text file describing a complex conversation data structure and a set of questions from a centralised dictionary of questions.

The method may further comprise providing a drag and drop to allow manual addition deletion and editing of a node in the conversation data structure and to code the node with instructions and to link the node to another node.

The method may further comprise generating a knowledge association dictionary that defines key relationships of terms and concepts in the training material the dictionary being updatable in real time when the chatbot is operated to engage in a conversation with a correspondent. In this case the training material comprises one or more of a set of frequently asked questions and answers a conversation data structure and input messages from a correspondent received during a conversation. The knowledge association dictionary may be shared among and updatable by multiple chatbots.

The method may further comprise automatically generating one or more variations to a known input message that can be matched to a node based on the training material. This step may be based the generated knowledge association dictionary.

In this case the unstructured text may comprise one or more of web pages emails web feeds chat transcripts data on a computer hard disk books.

In a fifth aspect the invention is a method of operating a chatbot to engage in a conversation with a correspondent 

Advantageously this dynamic node resolution feature gives the chatbot flexibility to dynamically switch between nodes or conversation paths in the conversation data structure.

The predetermined criteria may be whether the received input message answers a question asked by the chatbot in which case the selected second node is coded with instructions to ask the correspondent the same question. In another example the predetermined criteria may be whether the selected node is coded with instructions to process another node in which case the selected second node is a previously processed node in a conversation path different to that of the first node.

Referring first to the system comprises a chatbot server and database in communication with a plurality of users and correspondents over the Internet only two shown here for simplicity. The users are chatbot owners who create and manage chatbots using a chatflow application provided by the chatbot server . The user may be a natural person or a corporation.

The behaviour of a chatbot is defined by user generated knowledge in the form of a conversation data structure and optionally a pre trained base personality linked to the chatflow application and a knowledge association dictionary. During a conversation with a correspondent the interpretation engine on the chatbot server is operable to navigate the conversation data structure to interact with the correspondent .

A chatbot can be deployed and integrated into any online environments such as webpages intranets widgets instant messaging applications avatars in virtual world robots and games. This is made possible by the HTTP based application programming interface API that makes the chatbot s core chat functionality available to third party applications.

A chatbot can also be deployed and integrated into any environment where an input message is given including vehicles e.g. depressing the accelerator the fuel level dropping below a specific level machines e.g. turning a machine on selecting a function to be performed buildings e.g. opening a door turning on a light speaking to request adjustments to lighting and temperature control and mobile devices including phones and satellite navigation devices e.g. requesting a phone number requesting directions 

Referring now to the interface of the chatflow application provides a visual interface for a user to design a chatbot without having to write lines of codes. In this example the chatbot is designed to answer enquiries on banking products such as credit cards home loans and insurance and also to suggest suitable products based on a conversation with correspondent. The left hand pane of the visual interface shows a conversation data structure which encodes the knowledge and decision making capabilities of the chatbot.

A user does not require any programming skills to be able to use the advanced interface of the chatflow application . Instead the user merely has to add nodes to create a conversation data structure using one or more of the following methods.

The templates are training material which are used by the application to automatically build a conversation data structure of a chatbot. Based on the training material nodes are created and coded with instructions and linked to other nodes to form conversation paths. During a conversation with a correspondent the nodes will be processed according to these instructions and or relationship.

The interface further provides a menu bar with several drop down menus which allow the chatbot designer to find add delete and update profile variables and view profile reports add delete and update translations and stop words specific to the chatbot select and update the default action and display messages add delete and update display messages associated with the fuzzy matching search mechanism add delete and update elements of the chat window interface view export and delete conversations process and view statistical reports clear conversation related data refresh the graphical user interface perform a dictionary sync to exchange information with a centralised dictionary of questions Conversational Thesaurus which allows for sharing of input message variations across chatbots inspect nodes in the conversation data structure to identify and fix duplications broken conversation path links and broken related node links schedule various tasks to be automatically performed in relation to such as the chatbot including backups of content setting of nodes in the conversation data structure to offline unable to be searched or online able to be searched etc replace tags used within the conversation data structure add delete and update settings relating to the performance of the chatbot view add delete and update settings relating to the identification of the chatbot view add delete and update details about the chatbot owner provide assistance and training for the chatbot designer or user provide version information about the software.

The conversation data structure provides a visual representation of possible conversations between the chatbot and a correspondent. The interface also allows for tracking of changes to content in the conversation data structure and the alerting of identified parties when content in the conversation data structure has changed.

Nodes can be selected from the following node types listed on the toolbar to control the conversation flow of a chatbot. Each node type is coded with instructions which are processed by the interpretation engine during a conversation.

A special instance of the Input node allows the chatbot user to match to the input node when a correspondent s input message is equal to or greater in length to a number set for the special input node. For example if the input node is set to 200 then each input message from any correspondent of 200 characters or more will match to this input node. This can be used to present a specific response to a correspondent or to update a variable in the correspondent s profile.

For example it is used to identify long input messages which may indicate that the correspondent thinks they are talking to a human instead of a robot. The chatbot can then update the correspondents profile and choose a conversation path for example a commercial chatbot can indicate to the correspondent that it is a robot or a companion chatbot can assume the correspondent wants to believe it is human and follow more human like conversation paths.

In the chatbot shown in the nodes of the conversation data structure are organised under three main folder nodes Main Library and Global .

A user can create any conversation data structure via any desired combination of nodes. The nodes selected and the relationships between them depend on what the application the chatbot is designed for. This gives the user complete design control over the chatbot. Conversation paths can also be updated easily without long periods of re writing code.

The chatflow application also allows a user to clone the chatbot or export some components of the chatbot s knowledge to another chatbot. An import and export feature is also provided to allow a user to share or move an entire conversation data structure from one source to another. A user can export to a text file or another account and import from a text file or another account.

A base personality can be viewed as a pre trained chatbot which can act as the foundation intelligence for any chatbot. In the event that the interpretation engine is unable to match a correspondent s input to an Input Node and not sure on how to reply it can rely on a Base Personality Response Node B to come up with a reply. All base personalities are stored in the chatbot database see .

The chatflow application provides a straight forward base personality selection interface for a user to select a base personality type see . A user can select from one of the six personality types shown each characterised by a range of personality updatable profile attributes. Therefore when a user creates a new chatbot it may be the result of combining the base personality with the content and knowledge they explicitly created themselves. Any number of base personalities can be created and chosen from. This allows the chatbot to be customised according to the branding and image a user wishes to project. Alternatively the user can elect not to use a base personality.

Referring to and the chatflow application further has a classroom interface where by a user is prompted to submit responses to expected input messages from correspondents. The classroom is organized into standard and special lessons each representing a different topic area. A user can spend time in lessons and provide sample input messages and responses so as to train their chatbot.

The chatflow application also supports automatic and dynamic creation of chatbots using large bodies of new question and answer data to automatically train a chatbot in a new topic area. This provides the ability to automatically give a conversation interface to a body of textual content. All a user has to do is submit a set of documents such as web pages emails web feeds such as Real Simple Syndication RSS chat transcripts books etc to a chatbot and it will analyse them to improve its knowledge.

Specifically a chatbot can be automatically and dynamically created or trained following these steps 

The chatbot can also be operated to direct a conversation by determining whether a matched node that has been selected for processing and or a received input message satisfies a predetermined criteria if the determination is not in the affirmative selecting a previously processed node for processing.

For example the predetermined criteria may be whether an expected input node has been matched to by a correspondent s input message and if not returning to a previous node in order to redirect the correspondent to the unanswered question. This step involves dynamically resolving which node to process next based on the correspondent s input and the position of the last processed node in a conversation path.

In another example the predetermined criteria is whether the selected node processing is a node in the conversation data structure with no further instructions. Dynamic node resolution enables a chatbot to dynamically resolve which part of a conversation data structure to switch go. This is because conversation data structure can be designed in such a way that does not require the creator to explicitly connect all the various conversational paths at design time. This makes the conversation data structure able to be rendered flexibly at conversation time via Dynamic Node Resolution. In essence this gives the chatbot the ability to dynamically switch between nodes in the conversation data structure depending on user input and the context of the conversation.

Dynamic Node Resolution keeps a tracking trail of all nodes in the conversation data structure it has visited throughout a conversation. When the chatbot hits a point in the conversation data structure where it encounters no further instruction it looks back over the node trail to identify the most relevant point to return to and continue processing. It is important for Dynamic Node Resolution to go make to a relevant node so that when processing continues a Get User Input node is again encountered giving the user the ability to continue to chat and re enter input. In full action Dynamic Node Resolution significantly contributes to the perception of an intelligent chatbot one that can remember the past of a conversation and make smart decision on where to direct the conversation.

For example a conversation could be heading down the path A but the user then says something that results in the chatbot switching to Path B. Half way down path B the user could say something and the chatbot switches to Path C. Assuming Path C is completed and there are no explicit nodes instructions felling the chatbot where to go next Dynamic Node Resolution may make a decision to switch back to Path B and continue the chat. Later down the track of Path B the user may say something and that chatbot switches to Path D. In the same way Dynamic Node Resolution would be aware of this and when the end of Path D is encountered a switch back to Path B is made and then back up to Path A and so on.

Referring now to chatflow application provides interfaces to assist users in designing a chatbot. The interface provides a number of views associated with each node to assist users in designing a chatbot.

A user can add a an Input node and update the content of an Input node via a source file such as a spreadsheet or word processed document and import the changes to the chatbot using the Import function in the Node menu instead of or in addition to using this view.

The views provided depend on the node that is selected and highlighted in the conversation data structure .

The chatflow application provides a number of toolbar menus associated to assist users in designing a chatbot.

A chatbot can be designed to collect and remember a vast amount of information about its correspondents without the involvement of technical staff. The profiling capabilities allow the chatbot the ability to remember things about a correspondent so as to better personalise the conversation and to gather information about correspondents behaviour interests and intentions which is useful to the chatbot owner.

Using the interface in a user can define a profile variable by specifying a name a variable type and an initial value. Types include text number and yes no. Once a profile variable is defined a profile update rule can be assigned to the node using the Profile Update Rules View shown in .

During a conversation the interpretation engine is operable to update the value of a profile variable according to its profile update rule. For example if a correspondent s input message matches to a node e.g. What home loans do you have that has a profile rule associated with it e.g. set to yes for variable interested in home loan the correspondent s profile is updated to indicate that profile variable interested in home loans is set to yes . During a conversation the interpretation engine is also operable to perform profile cheeks at a Profile Check Node P . For example a Profile Check is could be set to check whether a correspondent s profile has been set to yes for the variable Interested in home loans . If the correspondent s profile is set to yes for that variable then it is matched to the Profile Check and the profile check node is processed. If the correspondent s profile is set to no for that variable the interpretation engine moves to the next point in the conversation data structure. Therefore a chatbot is able to build a correspondent s profile containing any number of profile variables such as age readiness to purchase contact details type of consumer willingness to pay products they are interested in credit worthiness psychological characteristics preferred learning styles and so on.

Referring now to a chatbot could be designed to track whether a correspondent is an investor using a series of Output Get User Input and input Nodes. The user would firstly have to define an Investor profile variable of type Yes No . The second step is to get the interpretation engine to determine whether the correspondent is an investor. This could be performed by adding an Output Node to display the question and a Get User Input Node to receive the correspondent s input. Then finally a profile update rule is added to an Input Node to instruct the interpretation engine to update the Investor variable of a correspondent s profile in a particular manner i.e. increment or decrement by an amount set to a number set to a text input set to yes or no if the node is matched to. In this case if the correspondent s input message can be matched to I am a property investor or any of its variations the Investor variable for that correspondent s profile will be set to Yes according to the profile update rule .

The correspondent s profile can be used to ensure that the conversation is highly personalised and is driven by the needs of an individual customer rather than a pre defined menu system. For example if the correspondent is identified as an investor they may be offered information about investment opportunities or if they are identified as a high value customer the correspondent may be automatically passed on to a real human for one to one attention. Profile variables for a correspondent include enquiries they have made processes they have started not completed or completed etc can be stored and used for future conversations with that correspondent.

The collected profile variables can also be used to cross sell other products that may be of interest to a correspondent. For example a correspondent who is interested in residential home loans may also be interested in home insurance. The profile variables can be used to generate detailed reports on user behaviour such as in which can also be used to improve the design of the conversation data structure over time and to provide the chatbot owner with information about the behaviour interests and intentions of correspondents.

The profile variables and profile information for a correspondent can also be linked into existing customer relationship software or data so that the customer relationship software can be used to update the profile variables and correspondent profiles and vice versa.

The information collected about a correspondent using profiling can be interpreted using psychological and other took and or combined with other information about the correspondent to provide an assessment of the correspondent for a particular situation such as in an employment recruitment setting or a credit risk assessment setting. Profile information for a correspondent can be stored for use in future conversations with the correspondent.

In another example a chatbot providing sales support may have a numerical profile variable set up for each product included in its content. Profile update rules of Increment by 1 may be applied to each node that reveal interest in a product for example nodes such as Tell me the features and benefits of Product X Tell me the price of Product X or How quickly can I get Product X . When a correspondent enters an input message that matches to one of these nodes the correspondent s profile is updated to show an interest in Product X of 1.

This information can be used in a number of ways. For example it could be aggregated to show the level of interest in an individual product or the relative levels of interest between different products. It could also be used to tailor the chatbot s responses to the correspondent.

In a further example a chatbot providing customer service and sales support in a banking context may have profile variables set up for income level asset level value of mortgage value of investments. The profile variables in this case might be set for example high income yes no assets over 1M yes no mortgage over 500K yes no and investments over 250K yes no . If a correspondent gives information for example when completing an application form about these aspects of their financial situation the profile for that customer will be updated with yes or no according to the information they have given. In this example a profile check node might be set to check whether all of the variables high income assets over 1M mortgage over 500K and investments over 250K were set to yes. If all of the variables were set to yes for that correspondent then a match would be created with the profile check node and the conversation would follow a particular set path for example the customer might be offered the opportunity to meet with a personal banker .

Another profile check node might be created to check whether only two of the variables were set to yes and if that was the case for a correspondent then there would be a match to that profile check node and the conversation would follow a different set path for example it might be suggested to the customer that a particular deposit account might increase their return on investment .

Depending on a correspondent s preferences psychological profile and learning style the interface representing the chatbot can also be automatically customised. This includes the content to be delivered the layout and presentation of the information to be delivered the format of the information such as using images webpages and multimedia files a response to the correspondent in the form of a robot action and the source of information. For example the chatbot can customise the language style of the information presented the level of detail given automatically loading webpages or providing a link for the correspondent to click including multimedia information presenting the information in 2D or 3D form etc.

The chatbot can also access existing customer management systems to draw information about a correspondent such as their name their history with an organisation such as applying for a home loan or booking a airplane flight etc and use this information within the conversation to establish rapport with the correspondent and to provide detailed information about the correspondent s personal situation such as account balance frequent flyer point balance loan approval status etc .

The chatbot can tailor the layout and presentation of the content to be delivered to the correspondent in a number of different ways. The chatbot can draw on an existing database of information about the correspondent including their expressed wishes regarding content delivery and information about their preferences inferred from their behaviour during conversations. For example some correspondents may prefer information delivered graphically rather than verbally some correspondents may prefer verbal information to be presented in point form rather than complete sentences some correspondents may be prefer a lot of detail rather than less detail.

Similarly the chatbot can choose the most appropriate external sources of information for the correspondent and the most appropriate method of delivering them. For example some correspondents may prefer the chatbot to automatically load a webpage rather than providing a link for the correspondent to click some correspondents may prefer information to be delivered in a multimedia format some correspondents may prefer information to be relayed using static images such as graphs maps or photographs etc.

Referring to again the chatbot database stores all chatbots created using the chatflow application by the users . Knowledge learned and developed within a particular chatbot can be stored globally in the chatbot database and shared with other chatbots. The idea here is to link Input Nodes I within a conversation data structure with entries in the Conversational Thesaurus via a dictionary link and Translation Dictionary stored in the chatbot database . and automatically update these entries when an Input Node I learns a new variation see . Advantageously when new chatbots are created by other users Input Nodes I can be linked to dictionary to automatically populate their knowledge with the latest. Performing a dictionary sync from within a chatbot exchanges variations between the chatbot and the Conversational Thesaurus.

The Conversational Thesaurus is an extensive centralised dictionary with thousands of conversational synonymous variations grouped together to form concepts across a range of topic areas. This thesaurus is used by the interpretation engine to match inputs during search in an effort to understand its meaning. For example here is a sample of the concept Hello in the conversational thesaurus 

In this particular example five variations items are shown as part of the Hello concept. Wildcard symbol means that one or more terms are expected to appear in its place. So if a correspondent were to enter input message Hi man a match would be made with Hi variation. A concept can be made up of one or more variations items. These variations items can be created automatically learned from conversations through the fuzzy search auto learning procedure and created by human knowledge engineers. They may be edited by human knowledge engineers for accuracy and suitable coverage. As explained with reference to the Input Node View in rig 4 variations for Input Nodes I in a conversational data structure are written in the same form as an entry in the Conversational Thesaurus .

Translation Dictionary is a dictionary accessible by the interpretation engine during matching to convert a correspondent s unnormalised input message into a format that is compatible with the variations stored with an Input Node I . Unnormalised inputs are those which contain misspellings slangs foreign language terms or other cultural language events. For example a correspondent could enter an unnormalised input cya 18r which does not have a direct match in the Conversational Thesaurus . The interpretation engine attempts to convert the unnormalised cya 18r into a normalised form See you later . In other words the Translations Dictionary is essentially responsible to hold mappings between unnormalised items and normalised items such as the following 

In addition to the centralised Translation Dictionary translations specific to a chatbot can be created and stored in the data for the chatbot. These translations are checked prior to the centralised Translation Dictionary and take precedence over those in the centralised Translation Dictionary . Chatbot database also stores base personalities template chatbots and knowledge association dictionaries which allow rapid creation of new chatbots.

Referring to the interpretation engine follows a top down left to right approach to the interpretation of the conversation data structure. At the beginning of a conversation with a correspondent the chatbot commonly introduces itself and explains its purpose to the correspondent. The interpretation engine starts at the top node sitting in the Main folder and processes that top node steps and . For example in the conversation data structure shown in the interpretation engine displays a greeting message coded with the top Output Node in the Main folder at the beginning of the conversation.

After processing the current node the interpretation engine determines whether that current node has any child nodes in which case it obtains a list of the child nodes and takes the top child node as the current node see steps and . Otherwise the interpretation engine moves down the conversation structure to the sibling nodes which are on the same level as the current node and processes the top sibling node see steps and . Continuing from the example in the top Output Node has a Get User Input Node related to it i.e. extending from it . The interpretation engine will process this Get User Input Node before navigating to its child Check and Default Nodes.

Referring now to and the processing step in depends on the type of node and the instructions coded with that node.

The Get User Input node is a place in the conversation data structure where the interpretation engine received input messages from a correspondent .

The matching step generally involves linguistic analysis of the received input message to identify the subject matter and the nature of any input from the correspondent . However matching may be performed according to any criteria such as the presence of keywords. In the context of FAQ it will often be useful to fuzzy match every input to a library of frequently asked questions. The matching process is ordered but may be reordered dynamically during a conversation. For instance at the beginning of a new conversation the process may be ordered so that a selection is made from a high level menu of options. During conversation however the process may be ordered to search all the nodes downstream of the current node. This matching step is performed by reference to the Conversational Thesaurus and Translations Dictionary in the chatbot database .

Input messages and outputs by the chatbot may be in textual or non textual form and may be an explicit statement or unstructured content or activity. For example an input message can include questions and comments typed into a user interface by the correspondent items clicked on in the chat interface other types of online activity such as clicking of links on a website clicking or tabbing to fields in a online form or other type of activity where inputs are sent via an external device to the chatbot e.g. turning on a light in a building speaking instructions to a system that controls aspects of a building such as air conditioning depressing the lerator on a vehicle requesting information of a satellite navigation system . Outputs by the chatbot can be text or an animation like smiling or loading a document or an action if the chatbot is in a machine or other activities.

The interpretation engine also determines whether the correspondent s profile needs to be updated according profile update rules for that Input Node created using the Profile Update Rules View in step and .

The direction a conversation takes depends on the structure and design of the conversation data structure. Typically a conversation path will navigate through a series of nodes which may involve at respective nodes matching the correspondent s input message performing an action reporting information to the correspondent and waiting for further input when a Get User Input Node G is encountered. This sequence may repeat many times before a conversation path is exhausted. While the conversation path is generally unidirectional there may be occasions where it is necessary to loop back.

The conversation path may also include many branches which may or may not be used depending upon the input from the correspondent. Each Profile Check P Check Node C and Get User Input G represents a conditional branch and the chatbot can vary the path depending on what the user says. This allows the chatbot to personalise a conversation with a correspondent rather than simply providing flat single answers to a single FAQ.

There will be instances where a correspondent s input cannot be matched to any of the Input Nodes I . A user can plan for such instances by adding one or more GoTo G Check C Base Personality Response B and Default D Nodes to instruct the interpretation engine to go to a specific branch to search for Input Nodes I in other folders to respond based on its base personality or to provide a default message to the correspondent respectively.

A Base Personality Response Node B can also be added to animate the chatbot at the beginning or during a conversation.

Often in a conversation with a chatbot a person will encounter a segment in the conversation where the chatbot does not understand what they said. There is an automated facility for handling this situation to extract the correct and matching response from the user and moving the conversation on the next point.

When no match can be found for the correspondent s input message a fuzzy search is performed to determine one or more nodes in the conversation data structure that are approximate matches to the received input message. And if fuzzy matching Input nodes can be found these are presented in a list to the correspondent. If the correspondent selects one of the suggested Inputs nodes from the list the correspondent s input message is associated with the Input node. Internally this process results in the generation of learning pairs 

These pairs are learning data that the interpretation engine uses to automatically improve its own knowledge base. Example of how an ambiguous input is matched with an accurate input is as follows 

If the correspondent chooses one of the above as a match the chatbot will record the received input message as a variation to a known input message that matches the node chosen by the correspondent. In this case the ambiguous input Can I go swimming near here in the ocean is mapped to Where are beaches I can swim that are close by . The learned input variation pair can be viewed by the user in the Auto Learn Input View see . Various actions can be performed using the correspondent s input message it can be permanently associated with the Input node selected by the correspondent it can be permanently associated with a different Input node selected by an human editor it can be used to0 create a new Input node it can be deleted.

There are two ways in which the API may be used to integrate its functionality into an application or website HTTP API and JavaScript API.

A HTTP API allows users to develop their own fully customised front end chat window. This front end user interface can communicate with the chat platform supported by the chatbot server via HTTP calls sending input and receiving responses.

HTTP API is a developer s interface into the functionality of chatbot server . It allows for the development of custom third party user interfaces and applications that can talk to the chatbot server to provide chat functionality. HTTP API allows easy integration of the chat functionality provided by the chatbot server in a straight forward effective way. The only requirement is for the application to have the ability to make HTTP requests and parse the response returned from the chatbot server .

JavaScript API allows integration with an existing MyCyberTwin chat window. In this case a user is only required to insert a couple of lines of HTML and JavaScript code into a web page or application to allow a correspondent to access a chatbot. It is sometimes necessary to send silent messages to the chatbot server . A silent message is not recorded as part of the conversation but triggers a response from the chatbot. Silent messages are typically used to get the chatbot to respond to a correspondent s actions rather than an input text. For example a silent message may be generated and sent to the chatbot server when a correspondent clicks on a form provided on a web page. An input message can be made silent using tag 1 and in this case silent message 1 what is this application form about is sent to the chatbot server to trigger a response.

The chatflow application also has the ability to generate statistics from conversational history between the chatbot and correspondents. There are three types of statistics chat statistics see and user input statistics and profile reports. Chat statistics report details on how many messages and the timing of the message where as user input statistics report on what people have been saying to the chatbot. A user can generate statistics on either by simply specifying a date range. Profile reports are reports on the correspondents scores against particular profile variables either on their own or in combination with other variables or reports. These profile reports can be generated for an individual correspondents or for aggregated groups of correspondents.

One or more reports summarising the conversations between the chatbot and one or more correspondents. The reports may include one or more of 

Advantageously the chatbot described here functions with more human like intelligence. For example if the correspondent asks a question that cannot be matched to a known question or asks an ambiguous question the chatbot can perform a search for the closest ranking match and present the answer to the correspondent or autonomously decide on the best answer using a detailed profile of the correspondent. The chatbot described here can also direct the correspondent down a long conversation path with conditional branching not just simple answer to known correspondent question. The chatbot has to interpret the question draw conclusions about the correspondent s intentions or react interactively to elicit more information until enough information has been assembled for it to answer.

The chatbot offers way to tailor the information to suit the correspondent and provides a mechanism for dynamically responding to in depth information about correspondents behaviour intentions and interests and other profile characteristics. The chatbot described here provides mechanisms that enable the tailoring of the chatbot s responses depending on information gathered about the correspondent so that the conversation is highly personalised. The chatbot described here also provides a mechanism for detailed reporting about a correspondent using information gathered during a conversation.

It will be appreciated by persons skilled in the art that numerous variations and or modifications may be made to the invention as shown in the specific embodiment without departing from the scope of the invention as broadly described. The present embodiments are therefore to be considered in all respects as illustrative and not restrictive.

For example the chatbot functionality is not limited to the FAQ space and can be applied in many other contexts. For instance the chatbot may be associated with an avatar in a virtual world and used to engage in conversations with real people or other avatars in the virtual world or they may be present in a personal companion robot or a machine or mobile device.

