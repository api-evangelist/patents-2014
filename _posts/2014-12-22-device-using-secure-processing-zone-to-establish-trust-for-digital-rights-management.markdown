---

title: Device using secure processing zone to establish trust for digital rights management
abstract: A DRM client on a device establishes trust with a DRM server for playback of digital content. The client executes in a secure execution environment, and the process includes (1) securely loading loader code from secure programmable memory and verifying it using a digital signature scheme and first key securely stored in the device; (2) by the verified loader code, loading DRM client code from the memory and verifying it using a digital signature scheme and second key included in the loader code; (3) by the verified DRM client code (a) obtaining a domain key from the memory; (b) encrypting the domain key with a device identifier using a DRM system key included in the DRM client code; and (c) sending the encrypted domain key and device identifier to the DRM server, whereby the device becomes registered to receive content licenses via secure communications encrypted using the domain key.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09281949&OS=09281949&RS=09281949
owner: ERICSSON AB
number: 09281949
owner_city: Stockholm
owner_country: SE
publication_date: 20141222
---
This application is a continuation of U.S. application Ser. No. 13 708 332 filed on Dec. 7 2012 which claims priority to U.S. Application No. 61 568 032 filed on Dec. 7 2011. The disclosures of which are incorporated herein by reference.

A procedure is described for establishing trust between a computerized device also called a client device and a server system for digital rights management DRM also referred to as a DRM server or backend . The technique is applicable to devices such as mobile smartphones or tablets more generally mobile devices as well as fixed devices such as set top boxes. In one embodiment the device may utilize a specialized processing chipset referred to as system on chip or SoC that incorporates several hardware components such as processor s WiFi and network interface controller content decryption and decoding etc.

The techniques herein utilize a processing arrangement including a secure execution environment such as the arrangement known by the name TrustZone. Such an arrangement generally requires some level of specific hardware support in any physical implementation. The arrangement includes two execution environments one being the secure environment and the other referred to as the non secure or normal environment. With the exception of a secure communication channel the normal environment does not have access to resources of the secure environment but the secure environment has full access to all resources including secure as well as non secure resources.

The DRM client utilizes the backend to help bootstrap a chain of trust to the backend so that DRM licenses can be served to enable protected content to be played. Key aspects of establishing the root of trust of the device and the application to the backend are described.

The components in the secure environment are responsible for establishing a root of trust with the backend to enable the client device to obtain decryption keys for decrypting content. It includes a secure kernel secure file system and DRM agent . It also includes a secure S portion of the DRM client DRM CLT S that works together with the non secure DRM client to establish the necessary trust as described below. In the remaining description the term DRM client may be used to refer to the paired DRM client portions as a single unit.

The non secure DRM client is mainly an interface via the API component between the content player and the secure DRM client . In particular the non secure DRM client only sends requests to the latter to register the device obtain a rights object for a particular media object and enable decryption and playing of the media object. The DRM Agent is an API layer to access the backend servers .

In one embodiment the secure environment may employ components of the so called TrustZone family including the secure processor S realized according to the ARM architecture as well as the secure kernel and secure file system which are specially tailored for security related uses. Establishing a root of trust is based on security features offered by the hardware SOC chipset that is embedded in a circuit board used to build a device e.g. mobile phone handset . While the chipset manufacturer provides the hardware the device manufacturer OEM loads firmware code such as the DRM client and DRM agent .

The initial step is device authentication in which it is established that the device is an authentic device running an unmodified version of the device O S the DRM Client portions and as well as DRM agent . The approach used is to begin with a secure boot process involving two levels of boot using a signature scheme such as RSA PSS Probabilistic Signature Scheme to verify the authenticity of the signatures of boot loaders and the DRM client. The DRM client is distributed as firmware and resides in flash memory of the device not ROM. It is included in the second level boot and thus it is necessary to authenticate the DRM client code by a process as described below. The device manufacturer uses a private key PrK to generate a signature of the firmware in the factory. This signature is verified at each boot. The DRM client is verified as part of the firmware. The device also contains the manufacturer s public key PuK to verify that the binary has not been modified. This verification code is stored in SoC ROM. The PuK must not be modifiable even if it is not confidential.

Next this root of trust is extended to include the backend . This involves securely sending a secret back to the backend . At this point the backend has verified the authenticity of the device and indirectly the authenticity of the client software. An application client that authenticates to its application backend server can subsequently use the DRM agent to request a media play. The DRM agent uses client certificates for mutual authentication when talking to the backend for verifying trust and obtaining rights object containing licenses pertaining to the specific device and the media selected. A content key is securely conveyed to the hardware player and the media is decrypted and rendered on the screen of the device . This workflow is shown in .

Establishing a root of trust begins with a secure boot procedure. This is implemented using the secure execution environment e.g. ARM TrustZone in addition to some hardware mechanisms that may be manufacturer specific.

For the secure boot process in one embodiment a manufacturer specific private key PvK is used to generate a signature of the firmware at its creation point. The DRM client may be deployed in this manner. The chain of trust begins with one component SoC ROM. Ideally the corresponding public key PuK is burnt into the ROM and used to authenticate the first bootloader. However putting the PuK on the SoC ROM means it is the same for the class of devices. To prevent class hacks OTP One Time Programmable poly silicon fuses may be used to store unique values in each SoC during device manufacture. For example a 256 bit hash of a 2 048 bit PuK can be stored. Thus the PuK is individualized to some collection of devices and its verification is via the hash burned into the OTP fuses. The PuK itself can be loaded from flash memory. The flash would contain all PuKs that may be usable and the specific one in use is identified by the hash.

For the code authentication the following steps are taken at boot time all operations in the secure environment 

Note that all communication between the secure and non secure environments are via a secure API which in the case of TrustZone is referred to as TZ API. This communication is necessary to allow the content player to communicate with the DRM agent .

Thus far it has been verified that the boot loaders and the DRM client code are genuine. It is still necessary to perform device level verification to establish for the backend that the device is a genuine device running a genuine O S . Device authentication includes communicating certain sensitive information to the backend in a secure manner. This step applies to each backend. Thus it is required to register the device for each different app . The device is validated through a secret value by a device validation service DV. The registration process is initiated by the app calling a register API with 2 arguments a URL pointing to the app s service backend AB and an opaque user authentication token that the app has obtained from the app s subscriber management server SN typically after a user authentication step done in the app . This triggers the authentication steps described below.

The DT may be generated in a secure manner in an entirely separate process then it is stored in the validation server DV. It is desirable to partition the devices into sub groups with different DTs in order to contain any damage from a breach.

The client SSL certificate signing request is generated based on a device generated local property called Device ID 2048 bits long that is stored in the secure file system . The Device ID is a confidential way of individualizing this device and is used as the client s private key CPrK. The Device ID is constructed at run time in the device from a hardware based random source and created only when the device registration is run. The combination of the individualized manufacturer PuK and the Device ID has a high degree of uniqueness.

The device is validated in the beginning when it first needs to acquire a client certificate and thereafter to renew the certificate when DT is revoked. A client certificate is specific to the device and may be used with multiple apps .

The above secret values are sent to the validation service DV after encryption with AES128 using DT as key. The hash DTH is not included in the encryption but sent together with the encrypted message.

The encryption with DT together with Step 2 below is a way to ensure the authenticity of the device . This is because the DT is installed into the secure file system by the OEM handset manufacturer or on their behalf by the chipset manufacturer and the secure file system guarantees confidentiality.

A backup value of DT also needs to be stored in the secure file system in order to renew the primary DT as explained below. The SSL client certificate s associated with a retired DT also need to be renewed.

All further client communication to the app s service backend AB are via the mutually authenticated SSL using the client certificate. The service backend AB can verify the signature using the DRM system public key DPuK.

Rights objects are sent over an SSL connection and stored encrypted in the secure file system e.g. using AES encryption or public key encryption in which case the client s public key is stored with the encrypted rights objects . Media keys are stored in the secure file system and provided to the media player in the secure environment . Media playback is via a hardware based decrypt and decode mechanism.

The DT stored in the secure file system may need to be renewed in the event of a security incident. This is achieved by using a revocation procedure where the old DT is renewed with a new one sent down to the device after establishment of trust. In step 2 of the Device Authentication the old DT is no longer accepted by the backend DV and an error is returned with a condition that rejects the old DT. In this event the secure DRM client retries with the backup DT. After the successful acceptance of the backup DT trust is established and a new DT is transmitted encrypted with the backup DT using AES 128. This new DT is then installed as the primary DT.

After the DT is renewed all old client certificates issued based on this must be renewed. This is achieved by forcing a new device registration. The process may be controlled so that not all clients are forced to renew at the same time.

While various embodiments of the invention have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined by the appended claims.

