---

title: Clustering and display of recipes
abstract: Recipes are hierarchically clustered into groups based on features of the recipes. Candidate clusters with a threshold number of clustered recipes having at least one feature in common are found by traversing the hierarchy. A plurality of clusters is selected for display to a user from among the candidates based on an objective function that considers the relevancy of the cluster as well as diversity of the clusters. A plurality of recipes within each selected cluster is selected for display to a user from among the recipes within the cluster based on an objective function that considers the quality of the recipe as well as the diversity of the recipes within the cluster. At least one feature that all of the recipes in a respective cluster have in common is used to generate a name for the cluster.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483547&OS=09483547&RS=09483547
owner: Yummly, Inc.
number: 09483547
owner_city: Redwood City
owner_country: US
publication_date: 20140530
---
Many techniques are known in the art for generating recommendations for a user based on the user s profile previous activities expressed preferences and other user specific features or data. In large datasets and data rich environments the number of generated recommendations may quickly swamp the user s ability to meaningfully engage with the recommendations or exhaust the user s patience in sorting through them.

In the context of a website and online service devoted to recipes quality recommendations are particularly important. One of the driving motivations for users of the service is to break away from familiar recipes and routine dishes. Thus it is desirable to surprise and delight the user with a variety of fresh intriguing recommendations likely to be of interest to the user and to display them in a way that can be easily grasped.

Embodiments include methods for hierarchically clustering recipes into groups based on features of the recipes. For example the distance between pairs of recipes is calculated based on features of the recipes and the closest pairs are iteratively grouped into clusters using an agglomerative hierarchical clustering technique. Candidate clusters with a threshold number of clustered recipes having at least one feature in common are found by traversing the hierarchy. A plurality of clusters is selected for display to a user from among the candidates based on an objective function that considers the relevancy of the cluster as well as diversity of the clusters. A plurality of recipes within each selected cluster is selected for display to a user from among the recipes within the cluster based on an objective function that considers the quality of the recipe as well as the diversity of the recipes within the cluster. At least one feature that all of the recipes in a respective cluster have in common is used to generate a name for the cluster.

Additional embodiments include computer readable storage media storing computer executable instructions for performing the steps described above. Further embodiments include systems comprising a processor for executing the computer executable instructions.

The features and advantages described in the specification are not all inclusive and in particular many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter.

The Figures FIGS. and the following description describe certain embodiments by way of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

Reference will now be made in detail to several embodiments examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality.

A recipe source is a repository of recipes accessible by the recipe clustering server . In one embodiment the recipe source is a server hosting a webpage displaying recipes through a markup language e.g. HTML or another structured document format. A recipe source may implement an application programming interface API functionality to provide recipe access to applications native to an operating system on a client device . The recipe source may be implemented using a server described further with respect to .

Alternatively or additionally a recipe source is a repository containing recipes in a structured document format. The repository may be a non transitory computer readable storage medium e.g. a hard disk drive an optical disc a flash memory accessible to the recipe clustering server through the network or through a removable storage media interface. Non transitory computer readable storage media are further described with respect to .

The recipe clustering server hosts recipes for display to the user of a client device . In one embodiment the recipe clustering server retrieves recipes from a recipe source and analyzes the recipes to enable more uniform presentation through client devices and to enable more efficient organization of recipes. The recipe clustering server organizes recipes to present clustered recipes to a user of a client device . As another example the recipe clustering server maintains a user profile to log a user s preferences dietary restrictions search behavior and culinary tastes. This user profile may be used to recommend items to a user and to increase relevance of search results to the user. The recipe clustering server includes a scoring module and a clustering module .

The scoring module scores recipes using any technique known to those of skill in the art and passes the scored recipes to the clustering module . For example the scoring module may generate recipe recommendations for a user by considering any combination of factors including the user s profile the user s past activities including positive feedback on recipes and previous searches and the user s social connections to score item based recommendations content based recommendations or any combination of the two. Alternatively the scoring module may score recipes according to their relevance to a query entered by a user or score recipes according to their popularity with users for example.

In one embodiment the score assigned to each recipe by the scoring module indicates how strongly the recipe is recommended for the user plus or minus any score enhancements or penalties that are assessed. Although the specifics of the scoring criteria may vary based on implementation details the recipes with the best scores are the ones where there is a higher likelihood that the user will be interested in the recipe as compared to the recipes with lower scores. The scoring of recipes can be accomplished using a scoring technique that enforces any policy determined by the administrators of the recipe clustering server and optionally the user receiving the recipe recommendations. An initial score may be determined from a scoring function that calculates how likely the user is to be interested in each recommended recipe based on the user s profile previous activities social connections and or any other factors. In other words the initial scoring may be a measure of the relevancy of the recipe to a user. Additionally policies can be implemented so as to boost the calculated initial scores of recipes that are deemed desirable based on one or more features of the recipe and or penalize the calculated initial scores of the recipes that are deemed undesirable based on one or more features of the recipe. For example a policy that highly values new recipes over recipes that the user has seen before may be implemented by providing a positive score modifier to any recipe that the user had not seen before providing a negative score modifier to any recipe that the user has seen before or some combination of the two. Similar policies could be used to modify the scores of recipes using produce in season or out of season recipes from particular sources popular recipes or modify the scores of the recipes using any other features of the recipes. As further described below the adjusted score is used in part to determine which recipes are displayed to the user.

The clustering module of the recipe clustering server clusters the recipes. Although hundreds or thousands of recipes may be recommended for a user in view of particular scoring techniques employed by the scoring module the user is spared from having the sift through them one by one. Instead the individual recipes are clustered into groups where each group shares a common feature. Optionally only a few high quality members of each of a plurality of groups are formatted for display to the user and a name is selected for display in association with the group that represents the unifying feature of the group. Thus the user can quickly navigate through a plurality of groups to identify recipes of interest. The clustering module is described further with respect to .

The client device accesses recipes through the network and presents the accessed recipes to the user using presentation module . In one embodiment the client device is a computer which is described further below with respect to . Example client devices include a desktop a laptop a tablet a mobile device a smart television and a wearable device. Using the client device a user may access recipes from the recipe clustering server . The presentation module may comprise software such as a web browser or another application for viewing recipes from the recipe clustering server .

The network enables communications among the entities connected to it through one or more local area networks and or wide area networks. In one embodiment the network is the Internet and uses standard wired and or wireless communications technologies and or protocols. The network can include links using technologies such as Ethernet 802.11 worldwide interoperability for microwave access WiMAX long term evolution LTE 3G 4G digital subscriber line DSL asynchronous transfer mode ATM InfiniBand and or PCI Express Advanced Switching. Similarly the networking protocols used on the networks can include multiprotocol label switching MPLS transmission control protocol Internet protocol TCP IP User Datagram Protocol UDP hypertext transport protocol HTTP simple mail transfer protocol SMTP and or file transfer protocol FTP . The network may include multiple sub networks linked to transfer data.

The data exchanged over the network can be represented using technologies and or formats including hypertext markup language HTML extensible markup language XML and or JavaScript Object Notation JSON . In addition all or some of the transmitted data can be encrypted using conventional encryption technologies such as the secure sockets layer SSL transport layer security TLS virtual private networks VPNs and or Internet Protocol security IPsec . In another embodiment the entities use custom and or dedicated data communications technologies instead of or in addition to the ones described above.

The clustering module receives recipes from the scoring module and the knowledge graph of the clustering module establishes relationships that are not explicit in the recipes. The recommended recipes generally include at least a recipe title an ingredient list and preparation steps and may include additional metadata such as preparation time difficulty level source of the recipe e.g. from a blog from an online magazine etc. recipe author serving size number of servings cooking technique and the like. The knowledge graph contains a graph representing food knowledge. The nodes of the graph represent ingredients ingredient abstractions cooking techniques and cooking equipment. Example nodes of the graph include apple gala apple fruit slicing peeling knife and peeler. Ingredient abstractions are broader categories of ingredients. For example steak is an abstraction of rib eye steak. A node may be an abstraction with respect another node and an ingredient with respect to another node. For example beef is an abstraction of Wagyu beef and meat is a further abstraction of beef. 

The nodes of the food knowledge graph may contain attributes of a particular object on the graph. For example nodes representing ingredients contain nutritional density information and associated allergens and dietary restrictions. Nodes representing abstractions may similarly contain average nutritional density information as well as attributes e.g. allergens such as gluten or nuts dietary restrictions such as halal vegan or kosher common to child ingredients of a parent abstraction. As another example nodes representing cooking techniques and cooking equipment indicate difficulty of using cooking equipment or learning a cooking technique.

Nodes of the food knowledge graph are connected by edges that indicate relationships between the nodes. The food knowledge graph has different types of edges representing different relationships and two nodes may be connected by more than one edge. For example one type of edge explicitly indicates the parent child relationship between an ingredient and an abstraction e.g. black beans are a kind of beans . Another type of edge between two nodes representing two ingredients indicates that the ingredients have equivalent nutritional content e.g. a Fuji apple is the nutritional equivalent of a gala apple . Edges may connect similar nodes such as an edge representing substitutability between ingredients represented by two nodes. An edge between a node representing an ingredient and a node representing cooking equipment or a cooking technique indicates that the cooking equipment or technique is commonly used with that ingredient e.g. potatoes are often used with ovens potatoes are often baked . Similarly an edge between a node representing a cooking technique and a node representing cooking equipment indicates that the cooking equipment may be used in a cooking technique e.g. an oven is used for baking .

In addition to ingredients abstractions of ingredients cooking techniques and cooking equipment the knowledge graph may contain nodes representing units of measure e.g. cup ounce cubic centimeter pinch . These nodes may have attributes indicating common abbreviations of the unit of measure and edges between these nodes may represent unit conversions between dimensionally consistent units of measure. Hence the nodes attributes of nodes and edges between nodes serve to organize food knowledge into the knowledge graph . The components of the clustering module draw upon the food knowledge in the knowledge graph to generate features of recipes and ultimately to cluster recipes for presentation to a user.

The feature extraction module extracts features of recipes using the knowledge graph . Examples of extracted features of a recipe include an associated holiday e.g. an Easter recipe a Halloween recipe a Thanksgiving recipe etc. a course e.g. an appetizer a dessert etc. a cuisine an Italian recipe a Thai recipe a Mexican recipe etc. an ingredient used in the recipe a source of the recipe a brand used in the recipe a dish e.g. macaroni and cheese broccoli soup deviled eggs a cooking technique e.g. grilling baking etc. and many others. Features can be extracted from recipes using machine learning techniques applied to a corpus of training data that has been classified by hand. Thus models can be trained to recognize features of newly acquired recipes for scoring purposes. Rather than discarding these features that have been learned about recipes the feature extraction module can use these features again for clustering recipes as described below.

Optionally the features extracted from the recipes by the feature extraction module that are used as inputs for the clustering engine are selected to be interpretable to the user as well as good descriptors of recipes. For example knowing that a recipe has blueberries provides more information about the recipe than knowing that the recipe has salt or butter. Two measures of descriptiveness are 1 frequency a feature that applies to more recipes is less descriptive and 2 whether the feature is mentioned in the recipe title which shows the recipe author views this feature as important. Other measures of descriptiveness may also be used in other implementations.

The clustering engine defines and computes the distance between recipes based on the extracted features of the recipes. The more similar two recipes are to each other the closer the recipes will mapped to each other. The distance between recipes can be inferred with reference to the knowledge graph for example to determine what cooking techniques are equivalent to each other how closely related two ingredients are what foods are associated with a particular holiday and the like. In one embodiment the clustering engine examines a large plurality e.g. several hundred recipes in a pairwise comparison to determine which two recipes are the closest. Using an agglomerative hierarchical clustering technique the clustering engine iteratively combines recipes and clusters starting with the closet pairs to form a hierarchical tree structure. In one implementation recipes and clusters are combined if they are within a threshold distance of each other and the threshold distance is relaxed iteratively to create successive levels of the hierarchy. For example whereas the threshold distance may be x for the first level of clustering the threshold distance may be 2x for the second level of clustering and 3x for the third level of clustering. Alternatively the minimum distance cluster pair can be merged at each iteration regardless of the distance. The minimum distances naturally become larger over the course of iterations of merging the closest pair s .

The cluster selection module selects clusters by traversing the tree structure produced by the agglomerative hierarchical clustering performed by the clustering engine . In one embodiment clusters are only considered for display if they have a threshold minimum number of recipes and if all the members of the cluster have at least one feature in common. In one implementation the hierarchical tree structure is traversed starting from the root to identify clusters that satisfy these two criteria. This generates a list of clusters. Other algorithms for traversing the tree structure may also be used. For example if larger more general clusters are desired starting from the root the tree is traversed toward the leaves until a cluster satisfies the threshold minimum number of recipes and all the members of the cluster have at least one feature in common. If more specific clusters are desired the traversal is continued as long as both children of the current cluster i.e. the two clusters that were merged to form the current cluster meet the criteria.

The cluster selection module may be configured to select a diversity of clusters for display to the users while still selecting among clusters that contain the highest scoring recipes. In one implementation the cluster selection module ranks the recipes within each respective cluster by score. The cluster selection module may also calculate a cluster score based on the scores associated the recipes within the cluster. For example in various implementations the cluster score may be the average of the scores of the recipes within the cluster or the cluster score may be median score of the top 10 scoring recipes within the cluster or many other techniques of calculating a combined score for the cluster may be used.

The cluster selection module uses an objective function that considers relevance and diversity. One computationally efficient way to optimize this objective function is to use a greedy algorithm. The greedy algorithm seeks a diversity of clusters while seeking high scoring clusters to select the combination of clusters to display to the user. Any suitable greedy algorithm known to those of skill in the art can be used for these purposes. For example the cluster that has the highest cluster score may be selected first and then the next cluster is selected based on the distance between the clusters that have already been chosen and the rest of the candidate clusters. The best next selection may be determined by maximizing the value of the function meanScore fn. 1 where meanScore c is the average score of the cluster a is a scaling factor C denotes the set of clusters selected in previous iterations of the algorithm and meanDist c C is the distance between the cluster in view of the clusters that have already been chosen. The cluster selection module iteratively selects clusters until a threshold number of clusters e.g. 5 10 20 or any other number have been selected for display to the user.

Optionally the recipes to display within a cluster are also selected by the cluster selection module by applying another objective function that considers relevance and diversity. One computationally efficient way to optimize this objective function is to use a greedy algorithm. The greedy algorithm selects a diversity of recipes within the cluster while still selecting high scoring recipes within the cluster. The recipe within the cluster that has the highest score may be selected first and then the next recipe is selected based on the distance between the recipes that have already been chosen and the rest of the recipes in the cluster. The best next selection may be determined by maximizing the value of the function Score fn. 2 where Score r is the score of the recipe is a scaling factor R denotes the set of recipes selected in previous iterations of the algorithm and meanDist r R is the distance between the recipe in view of the recipes that have already been chosen. The cluster selection module iteratively selects recipes within a cluster until a threshold number of recipes for the cluster e.g. 5 10 or any other number have been selected for display to the user.

The naming module selects a name for each cluster. The name of each cluster is representative of at least one feature that all of the members of the cluster have in common. For example the cluster may be named for the source of the recipes in the cluster an ingredient that is present in each of the recipes in the cluster a holiday to which all of the recipes in the cluster are related a course in which all of the recipes in the cluster could be served a cuisine that describes all of the recipes in the cluster or any other features that all the members of the cluster have in common. Optionally the naming module may map the at least one feature that all the members of the cluster have in common to a stock phrase that introduces the feature. For example for recipe sources the stock phrase may be Recommended Recipes from with the blank filled in with the common source of the recipes for the cluster. For ingredients the stock phrase may be Experimenting with or Recommended Recipes with the blank filled in with the ingredient that the recipes in the cluster share. Such stock phrases simplify the naming of the cluster so that it can be implemented automatically.

The storage device is a non transitory computer readable storage medium such as a hard drive compact disk read only memory CD ROM DVD or a solid state memory device. The memory holds instructions and data used by the processor . The input interfaces may include a touch screen interface a mouse track ball or other type of pointing device a keyboard a scanner or other conventional digitizer or some combination thereof and is used to input data into the computer . The graphics adapter displays images and other information on the display . The network adapter couples the computer to one or more computer networks.

The computer is adapted to execute computer program modules e.g. the scoring module clustering module . As used herein the term module refers to computer program logic used to provide the specified functionality. Thus a module may be implemented in hardware firmware and or software. In one embodiment program modules are stored on the storage device loaded into the memory and executed by the processor .

The type of computer used by the entities of the environment can vary depending upon the embodiment. For example the recipe source or recipe clustering server may include multiple computers communicating with each other through the network to provide the functionality described herein. Such computers may lack some of the components described above such as graphics adapters and displays . As another example the client device is implemented on a mobile device laptop or tablet containing at least some of the components of the computer .

In step a set of features from the recipes are extracted for example by using the knowledge graph of the clustering module. Examples of extracted features of a recipe include an associated holiday a course a cuisine an ingredient used in the recipe a source a brand a dish a cooking technique and many others. These features are retained for use by the clustering engine to cluster recipes according to their features.

In step based on the set of features a plurality of clusters of recipes are determined at least some of which are selected for display to a user. A method of determining clusters of recipes for display based on a set of features is described in detail with reference to .

In step the distances between pairs of recipes based on features in the recipes are determined. The distance between recipes can be inferred with reference to the knowledge graph for example to determine what cooking techniques are equivalent to each other how closely related two ingredients are what foods are associated with a particular holiday and the like. In one embodiment first a set of binary features for the recipes are computed using the extracted features discussed above. Each recipe can be represented as a feature vector and any distance function known to those of skill in the art can be used to determine the distance. In one embodiment the distance between a pair or recipes is calculated as the Jacaard distance between the features of the recipes.

In step the recipes are clustered based on the distances between the pairs of the recipes. For example the closest pairs of recipes are iteratively grouped to form an agglomerative hierarchical clustering. is an illustration of agglomerative hierarchical clustering in accordance with an embodiment. In this example the levels are represented as horizontal layers stacked vertically into a hierarchical tree structure. As the levels increase the threshold distance metric under which recipes will be clustered together increases. Thus at level only two pairs of recipes AB and EF were close enough to have been clustered but by level all of the recipes A F were close enough together to have been clustered. Alternatively at each level the closest pair or pairs of clusters may be merged regardless of the distance. The distance between the closest un merged pairs remaining naturally becomes larger over the course of iterations of merging the pair s that were previously the closest. In one embodiment to compute the distance between a pair of clusters the maximum distance among any pair of recipes one in each cluster is computed. For example if we have clusters r1 r2 and r3 r4 the distance between the clusters is Max dist 1 3 dist 2 3 dist 1 4 dist 2 4 fn. 3 which finds the maximum distance among any pair of recipes between the clusters where one member of each pair is in each cluster. This is sometimes referred to as complete linkage or maximum linkage agglomerative clustering by those of skill in the art.

In step candidate clusters that have at least a threshold number of clustered recipes and that have members that have at least one feature in common with the other members of the respective candidate cluster are identified. For example a cluster selection module may traverse the tree structure produced by the agglomerative hierarchical clustering performed by the clustering engine to find all clusters that have at least 10 members where each of the members has a feature in common with the other members of that cluster such as containing the same ingredient being the same cuisine type etc.

In step clusters to display to the user are selected from among the candidate clusters based on an objective function. As described above with reference to an objective function is employed to select a diverse plurality of high scoring clusters for display to the user.

In step the recipes within the selected clusters to display to the user are selected from among all of the recipes within the selected cluster based on an objective function. As described above with reference to another objective function can be employed to select a diverse plurality of high scoring recipes within the cluster.

It is noted that in some alternative embodiments the recipes within clusters may be selected before clusters are selected to display to the user. In other words steps and may be performed in the reverse order. The particular recipes selected for display within each cluster can affect selection of clusters for example if the cluster score and distance calculations only factor in the recipes selected for display and exclude any contribution from the non selected members of the cluster.

In step the selecting clusters are named for example by operation of the naming module of the clustering module of the recipe clustering server . The name of each cluster is representative of at least one feature that all of the members of the cluster have in common and the name may include one or more stock phrases that introduce the feature for which the cluster is named.

Accordingly at the conclusion of the method illustrated in a diverse plurality of clusters of recipes have been selected that are likely to be appealing to the user and the composition of the selected recipes within each cluster have been selected to be diverse while still being high scoring recipes within the cluster. These recipes can be formatted for display to the user by the recipe clustering server or the presentation module of the client device .

Optionally recipes that are not a member of any selected cluster at the conclusion of the method illustrated in may be added to a special cluster for example named Also Try. Such a cluster may be used as a catch all for recipes that were perhaps high scoring on their own but were not similar to enough other recipes to form a cluster with the threshold number of members or were not in a cluster with a strong cluster score. The special cluster may be used to add variety to the display of recipes.

Some portions of the above description describe the embodiments in terms of algorithmic processes or operations. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs comprising instructions for execution by a processor or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of functional operations as modules without loss of generality. The modules described herein represent an implementation of one embodiment but various other embodiments may include additional fewer or different modules to implement the methods systems or non transitory computer readable media delineated in the accompanying claims. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the disclosure. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the described subject matter is not limited to the precise construction and components disclosed herein and that various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein.

