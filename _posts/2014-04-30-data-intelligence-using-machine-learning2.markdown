---

title: Data intelligence using machine learning
abstract: Apparatuses, systems, methods, and computer program products are presented for performing data analytics using machine learning. An unsupervised learning module is configured to assemble an unstructured data set into multiple versions of an organized data set. A supervised learning module is configured to generate one or more machine learning ensembles based on each version of multiple versions of an organized data set and to determine which machine learning ensemble exhibits a highest predictive performance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09646262&OS=09646262&RS=09646262
owner: PUREPREDICTIVE, INC.
number: 09646262
owner_city: Sandy
owner_country: US
publication_date: 20140430
---
This application claims priority to U.S. Provisional Patent Application No. 61 836 135 entitled Data Intelligence Using Machine Learning and filed on Jun. 17 2013 for Kelly D. Phillipps et al. which is incorporated herein by reference.

The present disclosure in various embodiments relates to data intelligence and more particularly relates to data intelligence using machine learning.

Business intelligence BI may include processing and analysis of data for business purposes. Businesses typically accumulate large amounts of data with different data created for different purposes and by different sources.

Because potentially related data across a business entity may have different formatting and in many cases is not identified or indexed as being related business opportunities may be missed. Further manual location and organization of related data can be time consuming and inaccurate. Even if portions of data location and or organization may be automated a human typically reviews the data making imprecise manual approximations and assumptions.

An apparatus is presented for performing data analytics using machine learning. In one embodiment an extract module is configured to extract data from one or more structured data sources. A load module in a further embodiment is configured to load data into an unstructured data set. An unsupervised learning module in certain embodiments is configured to assemble an unstructured data set into an organized data set using a plurality of unsupervised learning techniques.

Another apparatus for performing data analytics using machine learning is presented. In one embodiment an unsupervised learning module is configured to assemble an unstructured data set into multiple versions of an organized data set. A supervised learning module in certain embodiments is configured to generate one or more machine learning ensembles based on each version of multiple versions of an organized data set and to determine which machine learning ensemble exhibits a highest predictive performance.

A method is presented for performing data analytics using machine learning. A method in one embodiment includes extracting data from one or more data sources. In a further embodiment a method includes loading data into an unstructured data set having an unstructured format. A method in certain embodiments includes assembling an unstructured data set into an organized data set having a structured format. In another embodiment a method includes generating one or more learned functions based on an organized data set.

Aspects of the present disclosure may be embodied as an apparatus system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable storage media having computer readable program code embodied thereon.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network. Where a module or portions of a module are implemented in software the software portions are stored on one or more computer readable storage media.

Any combination of one or more computer readable storage media may be utilized. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing.

More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM a digital versatile disc DVD a Blu ray disc an optical storage device a magnetic tape a Bernoulli drive a magnetic disk a magnetic storage device a punch card integrated circuits other digital processing apparatus memory devices or any suitable combination of the foregoing but would not include propagating signals. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Python C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present disclosure. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment but mean one or more but not all embodiments unless expressly specified otherwise. The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise. An enumerated listing of items does not imply that any or all of the items are mutually exclusive and or mutually inclusive unless expressly specified otherwise. The terms a an and the also refer to one or more unless expressly specified otherwise.

Furthermore the described features structures or characteristics of the disclosure may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the disclosure. However the disclosure may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the disclosure.

Aspects of the present disclosure are described below with reference to schematic flowchart diagrams and or schematic block diagrams of methods apparatuses systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the schematic flowchart diagrams and or schematic block diagrams and combinations of blocks in the schematic flowchart diagrams and or schematic block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the schematic flowchart diagrams and or schematic block diagrams block or blocks.

These computer program instructions may also be stored in a computer readable storage medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable storage medium produce an article of manufacture including instructions which implement the function act specified in the schematic flowchart diagrams and or schematic block diagrams block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The schematic flowchart diagrams and or schematic block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of apparatuses systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the schematic flowchart diagrams and or schematic block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s .

It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more blocks or portions thereof of the illustrated figures.

Although various arrow types and line types may be employed in the flowchart and or block diagrams they are understood not to limit the scope of the corresponding embodiments. Indeed some arrows or other connectors may be used to indicate only the logical flow of the depicted embodiment. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted embodiment. It will also be noted that each block of the block diagrams and or flowchart diagrams and combinations of blocks in the block diagrams and or flowchart diagrams can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The description of elements in each figure may refer to elements of proceeding figures. Like numbers refer to like elements in all figures including alternate embodiments of like elements.

In general the data intelligence module is configured to extract data from one or more structured data sources . The extracted data may then be loaded into an unstructured data set. In certain embodiments the data intelligence module then uses one or more unsupervised learning techniques to identify relationship between data in the unstructured data set and or assemble the data into an organized data set. The organized data set may include all of that data from the unstructured data set or a subset of the data such as one or more assembled instances. The resulting organized data set and or identified relationships can then be used to create learned functions that may provide predictive results based on the data from the structured data sources.

Thus in certain embodiments the data intelligence module instead of or in addition to an Extract Transform and Load ETL process the data intelligence module may use an Extract Load and Learn ELL process to assemble data and or to provide business intelligence using machine learning. Thus in certain embodiments this process effectively eliminates the most time consuming step of Transformation within the traditional ETL process and then relying on unsupervised and or supervised learning processes to assemble a meaningful instead of through the traditional use of manual human intervention with its accompanying errors and bias.

The data intelligence module may be configured to identify one or more data sources e.g. an automated scan based on user input or the like and to extract data from the identified data sources e.g. extract the data . Instead of or in addition to transforming the data into a rigid structured format in which certain metadata or other information associated with the data and or the data sources may be lost incorrect transformations may be made or the like the data intelligence module may load the data in an unstructured format and automatically determine relationships between the data e.g. load the data . The data intelligence module may use machine learning as described below to identify relationships between data in an unstructured format assemble the data into a structured format evaluate the correctness of the identified relationships and assembled data and or provide machine learning functions to a user based on the extracted and loaded data e.g. in either a raw or pre processed form and or evaluate the predictive performance of the machine learning functions e.g. learn from the data .

In certain embodiments the data intelligence module assembles data into an organized format using one or more unsupervised learning techniques. These unsupervised learning techniques can identify relationship between data elements in an unstructured format and use those relationships to provide join instructions and or to join related data . Unsupervised learning is described in greater detail below with reference to .

In certain embodiments the data intelligence module can use the organized data derived from the unsupervised learning techniques in supervised learning methods to generate one or more machine learning ensembles. These machine learning ensembles may be used to respond to analysis requests e.g. processing collected and coordinated data using machine learning and to provide machine learning results such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation or other results. Supervised machine learning as used herein comprises one or more modules computer executable program code logic hardware and or other entities configured to learn from or train on input data and to apply the learning or training to provide results or analysis for subsequent data. Supervised learning and generating machine learning ensembles or other machine learning program code is described in greater detail below with reference to through .

In one embodiment the data intelligence module may provide access or otherwise use predictive analytics. Predictive analytics is the study of past performance or patterns found in historical and transactional data to identify behavior and trends in unknown future events. This may be accomplished using a variety of techniques including statistics modeling machine learning data mining and others.

One term for large complex historical data sets is Big Data. Examples of Big Data include web logs social networks blogs system log files call logs customer data user feedback RFID and sensor data social networks Internet search indexing call detail records military surveillance and complex data in astronomic biogeochemical genomics and atmospheric sciences. These data sets may often be so large and complex that they are awkward and difficult to work with using traditional tools.

In certain embodiments prediction may be applied through at least two general techniques Regression and Classification. Regression models attempt to fit a mathematical equation to approximate the relationship between the variables being analyzed. These models may include Discrete Choice models such as Logistic Regression Multinomial Logistic Regression Probit Regression or the like. When factoring in time Time Series models may be used such as Auto Regression AR Moving Average MA ARMA AR Conditional Heteroskedasticity ARCH Generalized ARCH GARCH and Vector AR VAR. Other models include Survival or Duration analysis Classification and Regression Trees CART Multivariate Adaptive Regression Splines MARS and the like.

Classification is a form of artificial intelligence that uses computational power to execute complex algorithms in an effort to emulate human cognition. One underlying problem however remains determining the set of all possible behaviors given all possible inputs is much too large to be included in a set of observed examples. Classification methods may include Neural Networks Radial Basis Functions Support Vector Machines Nave Bayes k Nearest Neighbors Geospatial Predictive modeling and the like.

Each of these forms of modeling make assumptions about the data set and model the given data however some models are more accurate than others and none of the models are ideal. Historically using predictive analytics or other machine learning tools was a cumbersome and difficult process often involving the engagement of a Data Scientist or other expert. Any easier to use tools or interfaces for general business users however typically fall short in that they still require heavy lifting by IT personnel in order to present and massage data and results. A Data Scientist typically must determine the optimal class of learning machines that would be the most applicable for a given data set and rigorously test the selected hypothesis by first fine tuning the learning machine parameters and second by evaluating results fed by trained data.

The data intelligence module in certain embodiments generates machine learning ensembles or other machine learning program code for the clients with little or no input from a Data Scientist or other expert by generating a large number of learned functions from multiple different classes evaluating combining and or extending the learned functions synthesizing selected learned functions and organizing the synthesized learned functions into a machine learning ensemble. The data intelligence module in one embodiment services analysis requests for the clients using the generated machine learning ensembles or other machine learning program code.

By generating a large number of learned functions without regard to the effectiveness of the generated learned functions without prior knowledge of the generated learned functions suitability or the like and evaluating the generated learned functions in certain embodiments the data intelligence module may provide machine learning ensembles or other machine learning program code that are customized and finely tuned for a particular machine learning application data from a specific client or the like without excessive intervention or fine tuning. The data intelligence module in a further embodiment may generate and evaluate a large number of learned functions using parallel computing on multiple processors such as a massively parallel processing MPP system or the like. Machine learning ensembles or other machine learning program code are described in greater detail below with regard to and .

The data intelligence module may service machine learning requests to clients locally executing on the same host computing device as the data intelligence module by providing an API to clients receiving function calls from clients providing a hardware command interface to clients or otherwise providing a local channel to clients . In a further embodiment the data intelligence module may service machine learning requests to clients over a data network such as a local area network LAN a wide area network WAN such as the Internet as a cloud service a wireless network a wired network or another data network .

In one embodiment the extract module is configured to gather collect or otherwise extract data from one or more data sources . Additionally in certain embodiments prior to extracting data the extract module may identify the data sources from which it will or may extract data . For example the extract module may automatically scan data sources to which the extract module has access to identify available data sources. In another example the extract module receives manual user input that identifies one or more data sources and or specific data within the one or more data sources to be extracted. In yet another example the extract module identifies data sources based on one or more declared business objectives of the data intelligence module . The objectives may be received manually or automatically deduced. In certain embodiments the extract module is configured to extract data from the running data source that is not solely dedicated to providing data to the data intelligence module .

The extract module may extract data from its native structured sources . In certain embodiments the data sources from which data is extracted by the extract module are structured data sources or data sources that primarily include structured data. Structured data includes data with a predictable structure or data model a description of the objects represented by the data and or a description of the object s properties and relationships or is organized in a predefined manner. Conversely unstructured data is data that does not have a predefined data model a description of the objects represented by the data and or a description of the object s properties and relationships or is not organized in a predefined manner. Semi structured data is a form of structured data that does not conform with the formal structure of data models associated with relational databases or other forms of data tables but nonetheless contains tags or other markers to separate semantic elements and enforce hierarchies of records and fields within the data.

The extract module can extract various types of data that may be used by the unsupervised learning module and the supervised learning module . Non limiting examples of data that the can extract include spreadsheets and spreadsheet data documents emails text files database files log files transaction records purchase orders metadata executable code schema information or definitions structured query language SQL statements predictive byte code executable code with its data manipulation and reporting instructions such as SQL code data definition instructions and other types of data . The extract module in a further embodiment may extract or mine specific feature sets from a data set based on the data set s relationships and or relevance to a declared business goal as determined by the supervised learning module or the like.

The load module may load the data into an unstructured data set including a Big Data data set. In certain embodiments the load module may load the data into a relational database management system such as a binary large object BLOB . The load module may also load the data into an unstructured or semi structured solution such as or as an Apache Hadoop or other like solution. The load module can maintain at least a portion or all of the data s original information e.g. metadata context formatting . As such the load module can load data in an unstructured or semi structured format.

By loading data into a large data set of unstructured and or semi structured data the unsupervised learning module and or the supervised learning module may be able to discover relationships through machine learning as opposed to using manual human labor. In certain embodiments the unsupervised learning module may create substantially comprehensive instances to form an organized data set using joins cross products or the like as described herein.

In certain embodiments the load module may cooperate with the unsupervised learning module to assemble or restructure the unstructured data set. In some embodiments the unsupervised learning module is a subcomponent of the load module . In other embodiments these are separate modules as shown in . For simplicity of discussion the following description will refer to these modules as separate module with separate functions though as mentioned in some embodiments these modules ma share some or all of their functions.

The unsupervised learning module may assemble the unstructured data set which was loaded by the load module into an organized data set. As mentioned the organized data set may include all or just some of the data from the unstructured data set. The organized data set may include one or more instances formed by formed by an organizing data elements of the data set using joins cross products and other unsupervised learning techniques as described herein. The organized data set can be a combined data warehouse which comprises multiple data marts. The load module and or the unsupervised learning module can suggest define or create data marts identifying the constituent parts or the like by combining and analyzing features of disparate tables or other data sources . The process of assembling an organized data set may include defining relationships e.g. connections distances and or confidences between data elements of the unstructured data set using a plurality of unsupervised learning techniques. In general unsupervised learning techniques attempt to discover structure in unstructured or semi structured data. Examples of unsupervised learning techniques described with reference to .

Optionally the unsupervised learning module may provide output results e.g. probabilities connections distances instances or the like that inform or populate a probabilistic graph database a metadata layer for a probabilistic graph database or the like. The unsupervised learning module may populate other data structures displays visualizations or the like with output results. In some embodiments the data intelligence module includes or communicates with a visualization module not shown for displaying results from the unsupervised learning module and or the supervised learning module .

In certain embodiments the unsupervised learning module can identify or receive target concepts or business objectives that identifies what type of predictions are needed or request by a data intelligence module and or end user. This may involve requesting manual input from a user or identifying a known objective concept. Non limiting examples of business objective may include identify what types of products customers in a given zip code purchase identifying which department of a company has the highest efficiency or overhead or identifying what type of product a target demographic is likely to purchase next year. The unsupervised learning module can configure unsupervised learning techniques to identify relationships among data element of the data set that relate to the target concept or business objective. For example the unsupervised learning module can configure a clustering algorithm an unsupervised learning technique to cluster around concepts related to the target concept or business objective.

The unsupervised learning module may use supervised learning such as one or more machine learning ensembles or other predictive programs to provide feedback to the unsupervised learning module . Since the data used by the unsupervised learning module is generally unlabeled it may be difficult to evaluate the accuracy of the structuring of the resulting organized data set with the unsupervised learning module alone. Accordingly in certain embodiments the supervised learning module can evaluate the accuracy of the structure of the organized data set. The supervised learning module can use machine learning to generate one or more learned functions and or machine learning ensembles based on the organized data set. The supervised learning module can then evaluate the predictive performance of the one or more learned functions and or machine learning ensembles to provide an evaluation of the structuring of the organized data set. A detailed description of the general operation of the supervised learning module is provided below with reference to .

Given the large amount of processing power and time that may be required by the unsupervised learning module to develop the organized data set in certain embodiments the unsupervised learning module is configured to assemble a subset or sample of the unstructured data set into an organized trial data set. This organized trial data set may be developed faster since it can required less processing power and time to process with the unsupervised learning techniques. Additionally or alternatively in some embodiments the unsupervised learning module may be configured to perform abbreviated or partial analysis when developing the organized trial data set in order to expedite the development process.

The organized trial data set may be input into the supervised learning module for evaluation as previously described. Based on the results of the evaluation the supervised learning module and or another module of the data intelligence module may assess the accuracy of the organized trial data set.

In certain embodiments the unsupervised learning module is configured to assemble the unstructured data set into multiple versions of an organized data set. For instance the unsupervised learning module can assemble tens hundreds or thousands of versions of organized data sets. Each version can be assembled using a unique combination of unsupervised learning techniques and thus each version may identify different relationships between data elements of the data set. Additionally or alternatively the unsupervised learning module can assemble two or more versions of organized data sets using the same combination of unsupervised learning techniques but by varying the parameters key concepts or business objectives used by the unsupervised learning techniques. As such each version of the organized data sets may be substantially different. Furthermore the unsupervised learning module can assemble each of these versions of the organized data set based only on a subset or sample of the unstructured data set as previously described such that each version is an organized trial data set. By assembling a large number of data sets in this way without regard to accuracy the probability that an accurate data set is developed increases.

To evaluate these versions of the organized data sets the supervised learning module can be configured to generate one or more machine learning ensemble based on each of the multiple versions of the structured data set. Each of these machine learning ensembles can be evaluate by the supervised learning module which can then determine which version exhibits the highest predictive performance. Predictive performance may indicate which machine learning ensemble can predict unknown values with the highest degree of accuracy. These predictions may be evaluated using test data as discussed herein. The data intelligence module may use the machine learning ensemble with the highest predictive performance to provide predictive functionality to the user. Unused data sets may be discarded.

The results of these evaluations may also be utilized by the supervised learning module and or another module of the data intelligence module to identify which unique combination of unsupervised learning techniques was used to assemble the version of the organized data set that exhibited the highest predictive performance. In instances where the organized data set that exhibited the highest predictive performance is a trial data set as previously described the unsupervised learning module can assemble a more complete data set using the same unique combination unsupervised learning techniques used to develop the trial data set but by processing the complete set of data from the unstructured data set. Similarly if the unsupervised learning module formed the trial data set using an abbreviated or partial analysis a complete analysis can be performed. The supervised learning module can then generate one or more learned functions or machine learning ensembles based on the complete data set. These learned functions or machine learning ensembles can be used by the data intelligence module to provide predictive results to the end user s .

As mentioned in certain embodiments the unsupervised learning module is configured to create one or more data sets that can be input into the supervised learning module . For example the organized data set assembled by the unsupervised learning module can be input into the supervised learning module . Additionally in certain embodiments the unsupervised learning module is configured to create training data from the structured data set. For example the unsupervised learning module can assemble the data elements in one or more instances that can be used to train the supervised learning module . The supervised learning module can be configured to use the training data to generate machine learning ensembles.

In one embodiment the supervised learning module is configured to populate a data visualization tool a report or the like based on probabilistic relationships derived from machine learning. These tools may be displayed via a visualization module not shown as previously mentioned. The supervised learning module in a further embodiment may update the original data sources such as one or more databases or the like with the predicted machine learning results. Alternatively in some embodiments the data intelligence module includes an update module not shown configured to update the one or more data sources with predicted results generated by the one or more machine learning ensembles.

The supervised learning module may provide machine learning results for strategic decision making and analysis. If the data is material and the unsupervised learning module has made optimal connections the loaded unstructured data set may not need to be precise. The supervised learning module in certain embodiments may not provide precise operational reporting but accurate analytics reporting. The supervised learning module in one embodiment may dynamically generate one or more machine learning ensembles or other predictive programs using unstructured or semi structured data from the load module as training data test data and or workload data as described below.

In this manner the extract module may first extract data into general buckets e.g. clusters or focal points the unsupervised learning module may process and mine the extracted data to form relationships without knowing specific uses for the data just mapping confidence intervals or distances then feed the data and or the confidence intervals or distances to the supervised learning module e.g. the definition of a problem statement goal action label or the like . The supervised learning module in certain embodiments may provide a report a visualization or the like for produced machine learning results or may otherwise catalog the machine learning results for business intelligence or the like.

In one embodiment the load module or the unsupervised learning module may add time variance to the data set enabling the supervised learning module to refresh or regenerate the machine learning ensembles or other predictive programs at various time intervals. The supervised learning module may guide an end user in terms of governance prioritization or the like to find an optimal business value providing value based prioritization or the like.

As described below with regard to the supervised learning module may be configured to generate machine learning using a compiler virtual machine paradigm. The supervised learning module may generate a machine learning ensemble with executable program code e.g. program script instructions assembly code byte code object code or the like for multiple learned functions a metadata rule set an orchestration module or the like. The supervised learning module may provide a predictive virtual machine or interpreter configured to execute the program code of a machine learning ensemble with workload data to provide one or more machine learning results.

Reference will now be made to which illustrates one embodiment of an unsupervised learning module . As shown embodiments of the unsupervised learning module can include multiple sub modules including a clustering module a semantic distance module a metadata mining module a report processing module a data characterization module a search results correlation module a SQL query processing module an access frequency module and an external enrichment module . Each of these modules is configured to perform at least one unsupervised learning technique.

Unsupervised learning techniques generally seek to summarize and explain key features of a data set. Non limiting examples of unsupervised techniques include hidden Markov models blind signal separation using feature extraction techniques for dimensionality reduction and each of the techniques performed by the modules of the unsupervised learning module cluster analysis mining metadata from the data in the unstructured data set identifying relationships in data of the unstructured data set based on one or more of analyzing process reports and analyzing process SQL queries identifying relationships in data of the unstructured data set by identifying semantic distances between data in the unstructured data set using statistical data to determine a relationship between data in the unstructured data set identifying relationships in data of the unstructured data set based on analyzing the access frequency of data of the unstructured data set querying external data sources to determine a relationship between data in the unstructured data set and text search results correlation .

As mentioned generally the unsupervised learning module can determine relationships between data loaded by the load module into an unstructured data set. For instance the unsupervised learning module can connect data based on confidence intervals confidence metrics distances or the like indicating the proximity measures and metrics inherent in the unstructured data set such as schema and Entity Relationship Descriptions ERD integrity constraints foreign key and primary key relationships parsing SQL queries reports spreadsheets data warehouse information or the like. For example the unsupervised learning module may derive one or more relationships across heterogeneous data sets based on probabilistic relationships derived from machine learning such as the unsupervised learning module . The unsupervised learning module may determine at a feature level or the like the distance between data points based on one or more probabilistic relationships derived from machine learning such as the unsupervised learning module . In addition to identifying simple relationships between data element the unsupervised learning module may also determine a chain or tree comprising multiple relationships between different data elements.

In some embodiments as part of one or more unstructured learning technique the unsupervised learning module may establish a confidence value a confidence metric a distance or the like collectively confidence metric through clustering and or other machine learning techniques e.g. the unsupervised learning module the supervised learning module that a certain field belongs to a feature is associated or related to other data or the like. For example if the load module and or the supervised learning module finds a ship to zip code and a sold to zip code in two different tables the load module and or the supervised learning module may determine certain confidence metrics that they are the same are related or the like.

In some unsupervised learning techniques the unsupervised learning module may determine a confidence that data of an instance belongs together is related or the like. The unsupervised learning module may determine that a person and a zip code in one table and a customer number and zip code in another table belong together and thus join these instances or rows together and provide a confidence metric behind the join. The load module or the unsupervised learning module may store a confidence metric representing a likelihood that a field belongs to an instance and or a different confidence value that the field belongs in a feature. The load module and or the supervised learning module may use the confidence values confidence metrics or distances to determine an intersection between the row and the column indicating where to put the field with confidence so that the field may be fed to and processed by the supervised learning module .

In this manner the unsupervised learning module and or the supervised learning module may eliminate a transformation step in data warehousing and replace the precision and deterministic behavior with an imprecise probabilistic behavior e.g. store the data in an unstructured or semi structured manner . Maintaining data in an unstructured or semi structured format without transforming the data may allow the load module and or the supervised learning module to identify signal that would otherwise have been eliminated by a manual transformation may eliminate the effort of performing the manual transformation or the like. The unsupervised learning module and or the supervised learning module may not only automate and make business intelligence more efficient but may also make business intelligence more effective due to the signal component that may have been erased through a manual transformations.

Referring still to in some unsupervised learning techniques the unsupervised module may make a first pass of the data to identify a first set of relationships distances and or confidences that satisfy a simplicity threshold. For example unique data such as customer identifiers phone numbers zip codes or the like may be relatively easy to connect without exhaustive processing. The unsupervised learning module in a further embodiment may make a second pass of data that is unable to be processed by the unsupervised learning module in the first pass e.g. data that fails to satisfy the simplicity threshold is more difficult to connect or the like .

For the remaining data in the second pass the unsupervised learning module may perform an exhaustive analysis analyzing each potential connection or relationship between different data elements. For example the unsupervised learning module may perform additional unsupervised learning techniques e.g. cross product a Cartesian joinder or the like for the remaining data in the second pass e.g. analyzing each possible data connection or combination for the remaining data thereby identifying probabilities or confidences of which connections or combinations are valid should be maintained or the like. In this manner the unsupervised learning module may overcome computational complexity by approaching a logarithmic problem in a linear manner. In some embodiments the unsupervised learning module and the supervised learning module using the techniques described herein may repeatedly substantially continuously and or indefinitely process data over time continuously refining accuracy of connections and combinations.

More particular reference will not be made to each of the modules shown in and each of the unsupervised learning techniques performed by each. As shown in one embodiment the unsupervised learning module includes a clustering module . The clustering module can be configured to perform one or more clustering analysis on the unstructured data loaded by the load module . Clustering involves grouping a set of objects in such a way that objects in the same group cluster are more similar in at least one sense to each other than to those in other clusters. Non limiting examples of clustering algorithms include hierarchical clustering k means algorithm kernel based clustering algorithms density based clustering algorithms spectral clustering algorithms. In one embodiment the clustering module utilizes decision tree clustering with pseudo labels.

In certain embodiments the clustering module identifies one or more key concepts to cluster around. These key concepts may be based of the key concept or business objective of the data intelligence module as previously mentioned. In some instances the clustering module may additionally or alternatively cluster around a column row or other data feature that have the highest or a high degree of uniqueness.

The clustering module may use focal points clusters or the like to determine relationships between distances between and or confidences for data. By using focal points clustering or the like to break up large amounts of data the unsupervised learning module may efficiently determine relationships distances and or confidences for the data.

As mentioned the unsupervised learning module may utilize multiple unsupervised learning techniques to assemble an organized data set. In one embodiment the unsupervised learning module uses at least one clustering technique to assemble each organized data set. In other embodiments some organized data sets may be assembled without using a clustering technique.

In certain embodiments the unsupervised learning module includes a semantic distance module . The semantic distance module is configured to identify the meaning in language and words using in the unstructured data of the unstructured data set and use that meaning to identify relationships between data elements.

In certain embodiments the unsupervised learning module includes a metadata mining module . The metadata mining module is configured to data mine declared metadata to identify relationships between metadata and data described by the metadata. For example the metadata mining module may identify table row and column names and draw relationships between them.

In certain embodiments the unsupervised learning module includes a report processing module . The report processing module is configured to analyze and or read reports and other documents. The report processing module can identify associations and patterns in these documents that indicate how the data in the unstructured data set is organized. These associations and patterns can be used to identify relationships between data elements in the unstructured data set.

In certain embodiments the unsupervised learning module includes a data characterization module . The data characterization module is configured to use statistical data to ascertain the likelihood of similarities across a column row family. For example the data characterization module can calculate the maximum and minimum values in a column row the average column length and the number of distinct values in a column. These statistics can assist the unsupervised learning module to identify the likelihood that two or more columns row are related. For instance two data sets that have a maximum value of 10 and 10 000 respectively may be less likely to be related than two data sets that have identical maximum values.

In certain embodiments the unsupervised learning module includes a search results correlation module . The search results correlation module is configured to correlate data based on common text search results. These search results may include minor text and spelling variations for each word. Accordingly the search results correlation module may identify words that may be a variant abbreviation misspelling conjugation or derivation of other words. These identifications may be used by other unsupervised learning techniques.

In certain embodiments the unsupervised learning module includes a SQL processing module . The search results correlation module is configured to harvest queries in a live database including SQL queries. These queries and the results of such queries can be utilized to determine or define a distance between relationships within a data set. Similarly the unsupervised learning module or SQL processing module may harvest SQL statements or other data in real time from a running database database manager or other data source . The SQL processing module may parse and or analyze SQL queries to determine relationships. For example a WHERE statement a JOIN statement or the like may relate certain features of data. The load module in a further embodiment may use data definition metadata e.g. primary keys foreign keys feature names or the like to determine relationships.

In certain embodiments the unsupervised learning module includes an access frequency module . The access frequency module is configured to identify correlations between data based on the frequency at which data is accesses what data is accessed at the same time access count time of day data is accessed and the like. For example the access frequency module can target highly accessed data first and use access patterns to determine possible relationships. More specifically the access frequency module can poll a database system s buffer cache metrics for highly accessed database blocks and store that access pattern information in the data set to be used to identify relationships between the highly accessed data.

In certain embodiments the unsupervised learning module includes an external enrichment module . The external enrichment module is configured to access external sources if the confidence metric between features of a data set is below a threshold. Non limiting examples of external sources include the Internet an Internet search engine an online encyclopedia or reference site or the like. For example if a telephone area code column is not related to other columns it may be queried to an external source to establish relationships between telephone area codes and zip codes or mailing addresses.

While not an unsupervised learning technique the unsupervised learning module can be configured to query the user ask a human for information that is lacking or for assistance in determining relationships between features of the unstructured data set.

In addition to the use of unsupervised learning techniques the unsupervised learning module can be aided in determining relationships between data elements of the unstructured data set and in assembling organized data sets by the supervised learning module . As mentioned the organized data set s assembled by the unsupervised learning module can be evaluated by the supervised learning module . Using these evaluations the unsupervised learning module can identify which relationships are more likely and which are less like. The unsupervised learning module can use that information to improve the accuracy of its processes.

Furthermore in some embodiments the unsupervised learning module may use a machine learning ensemble such as predictive program code as an input to unsupervised learning to determine probabilistic relationships between data points. The unsupervised learning module may use relevant influence factors from supervised learning e.g. a machine learning ensemble or other predictive program code to enhance unsupervised mining activities in defining the distance between data points in a data set. The unsupervised learning module may define the confidence that a data element is associated with a specific instance with a specific feature or the like.

The data receiver module in certain embodiments is configured to receive data from the organized data set including training data test data workload data or the like from a client from the load module or the unsupervised learning module either directly or indirectly. The data receiver module in various embodiments may receive data over a local channel such as an API a shared library a hardware command interface or the like over a data network such as wired or wireless LAN WAN the Internet a serial connection a parallel connection or the like. In certain embodiments the data receiver module may receive data indirectly from a client from the load module the unsupervised learning module or the like through an intermediate module that may pre process reformat or otherwise prepare the data for the supervised learning module . The data receiver module may support structured data unstructured data semi structured data or the like.

One type of data that the data receiver module may receive as part of a new ensemble request or the like is initialization data. The supervised learning module in certain embodiments may use initialization data to train and test learned functions from which the supervised learning module may build a machine learning ensemble . Initialization data may comprise the trial data set the organized data set historical data statistics Big Data customer data marketing data computer system logs computer application logs data networking logs or other data that a client provides to the data receiver module with which to build initialize train and or test a machine learning ensemble .

Another type of data that the data receiver module may receive as part of an analysis request or the like is workload data. The supervised learning module in certain embodiments may process workload data using a machine learning ensemble to obtain a result such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation an evaluation or the like. Workload data for a specific machine learning ensemble in one embodiment has substantially the same format as the initialization data used to train and or evaluate the machine learning ensemble . For example initialization data and or workload data may include one or more features. As used herein a feature may comprise a column category data type attribute characteristic label or other grouping of data. For example in embodiments where initialization data and or workload data that is organized in a table format a column of data may be a feature. Initialization data and or workload data may include one or more instances of the associated features. In a table format where columns of data are associated with features a row of data is an instance.

As described below with regard to in one embodiment the data receiver module may maintain client data including the organized data set such as initialization data and or workload data in a data repository where the function generator module the machine learning compiler module or the like may access the data. In certain embodiments as described below the function generator module and or the machine learning compiler module may divide initialization data into subsets using certain subsets of data as training data for generating and training learned functions and using certain subsets of data as test data for evaluating generated learned functions.

The function generator module in certain embodiments is configured to generate a plurality of learned functions based on training data from the data receiver module . A learned function as used herein comprises a computer readable code that accepts an input and provides a result. A learned function may comprise a compiled code a script text a data structure a file a function or the like. In certain embodiments a learned function may accept instances of one or more features as input and provide a result such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation an evaluation or the like. In another embodiment certain learned functions may accept instances of one or more features as input and provide a subset of the instances a subset of the one or more features or the like as an output. In a further embodiment certain learned functions may receive the output or result of one or more other learned functions as input such as a Bayes classifier a Boltzmann machine or the like.

The function generator module may generate learned functions from multiple different machine learning classes models or algorithms. For example the function generator module may generate decision trees decision forests kernel classifiers and regression machines with a plurality of reproducing kernels non kernel regression and classification machines such as logistic CART multi layer neural nets with various topologies Bayesian type classifiers such as Nave Bayes and Boltzmann machines logistic regression multinomial logistic regression probit regression AR MA ARMA ARCH GARCH VAR survival or duration analysis MARS radial basis functions support vector machines k nearest neighbors geospatial predictive modeling and or other classes of learned functions.

In one embodiment the function generator module generates learned functions pseudo randomly without regard to the effectiveness of the generated learned functions without prior knowledge regarding the suitability of the generated learned functions for the associated training data or the like. For example the function generator module may generate a total number of learned functions that is large enough that at least a subset of the generated learned functions are statistically likely to be effective. As used herein pseudo randomly indicates that the function generator module is configured to generate learned functions in an automated manner without input or selection of learned functions machine learning classes or models for the learned functions or the like by a Data Scientist expert or other user.

The function generator module in certain embodiments generates as many learned functions as possible for a requested machine learning ensemble given one or more parameters or limitations. A client may provide a parameter or limitation for learned function generation as part of a new ensemble request or the like to an interface module as described below with regard to such as an amount of time an allocation of system resources such as a number of processor nodes or cores or an amount of volatile memory a number of learned functions runtime constraints on the requested ensemble such as an indicator of whether or not the requested ensemble should provide results in real time and or another parameter or limitation from a client .

The number of learned functions that the function generator module may generate for building a machine learning ensemble may also be limited by capabilities of the system such as a number of available processors or processor cores a current load on the system a price of remote processing resources over the data network or other hardware capabilities of the system available to the function generator module . The function generator module may balance the hardware capabilities of the system with an amount of time available for generating learned functions and building a machine learning ensemble to determine how many learned functions to generate for the machine learning ensemble .

In one embodiment the function generator module may generate at least 50 learned functions for a machine learning ensemble . In a further embodiment the function generator module may generate hundreds thousands or millions of learned functions or more for a machine learning ensemble . By generating an unusually large number of learned functions from different classes without regard to the suitability or effectiveness of the generated learned functions for training data in certain embodiments the function generator module ensures that at least a subset of the generated learned functions either individually or in combination are useful suitable and or effective for the training data without careful curation and fine tuning by a Data Scientist or other expert.

Similarly by generating learned functions from different machine learning classes without regard to the effectiveness or the suitability of the different machine learning classes for training data the function generator module in certain embodiments may generate learned functions that are useful suitable and or effective for the training data due to the sheer amount of learned functions generated from the different machine learning classes. This brute force trial and error approach to generating learned functions in certain embodiments eliminates or minimizes the role of a Data Scientist or other expert in generation of a machine learning ensemble .

The function generator module in certain embodiments divides initialization data from the data receiver module into various subsets of training data and may use different training data subsets different combinations of multiple training data subsets or the like to generate different learned functions. The function generator module may divide the initialization data into training data subsets by feature by instance or both. For example a training data subset may comprise a subset of features of initialization data a subset of features of initialization data a subset of both features and instances of initialization data or the like. Varying the features and or instances used to train different learned functions in certain embodiments may further increase the likelihood that at least a subset of the generated learned functions are useful suitable and or effective. In a further embodiment the function generator module ensures that the available initialization data is not used in its entirety as training data for any one learned function so that at least a portion of the initialization data is available for each learned function as test data which is described in greater detail below with regard to the function evaluator module of .

In one embodiment the function generator module may also generate additional learned functions in cooperation with the machine learning compiler module . The function generator module may provide a learned function request interface allowing the machine learning compiler module or another module a client or the like to send a learned function request to the function generator module requesting that the function generator module generate one or more additional learned functions. In one embodiment a learned function request may include one or more attributes for the requested one or more learned functions. For example a learned function request in various embodiments may include a machine learning class for a requested learned function one or more features for a requested learned function instances from initialization data to use as training data for a requested learned function runtime constraints on a requested learned function or the like. In another embodiment a learned function request may identify initialization data training data or the like for one or more requested learned functions and the function generator module may generate the one or more learned functions pseudo randomly as described above based on the identified data.

The machine learning compiler module in one embodiment is configured to form a machine learning ensemble using learned functions from the function generator module . As used herein a machine learning ensemble comprises an organized set of a plurality of learned functions. Providing a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation or another result using a machine learning ensemble in certain embodiments may be more accurate than using a single learned function.

The machine learning compiler module is described in greater detail below with regard to . The machine learning compiler module in certain embodiments may combine and or extend learned functions to form new learned functions may request additional learned functions from the function generator module or the like for inclusion in a machine learning ensemble . In one embodiment the machine learning compiler module evaluates learned functions from the function generator module using test data to generate evaluation metadata. The machine learning compiler module in a further embodiment may evaluate combined learned functions extended learned functions combined extended learned functions additional learned functions or the like using test data to generate evaluation metadata.

The machine learning compiler module in certain embodiments maintains evaluation metadata in a metadata library as described below with regard to . The machine learning compiler module may select learned functions e.g. learned functions from the function generator module combined learned functions extended learned functions learned functions from different machine learning classes and or combined extended learned functions for inclusion in a machine learning ensemble based on the evaluation metadata. In a further embodiment the machine learning compiler module may synthesize the selected learned functions into a final synthesized function or function set for a machine learning ensemble based on evaluation metadata. The machine learning compiler module in another embodiment may include synthesized evaluation metadata in a machine learning ensemble for directing data through the machine learning ensemble or the like.

In one embodiment the feature selector module determines which features of initialization data to use in the machine learning ensemble and in the associated learned functions and or which features of the initialization data to exclude from the machine learning ensemble and from the associated learned functions. As described above initialization data and the training data and test data derived from the initialization data may include one or more features. Learned functions and the machine learning ensembles that they form are configured to receive and process instances of one or more features. Certain features may be more predictive than others and the more features that the machine learning compiler module processes and includes in the generated machine learning ensemble the more processing overhead used by the machine learning compiler module and the more complex the generated machine learning ensemble becomes. Additionally certain features may not contribute to the effectiveness or accuracy of the results from a machine learning ensemble but may simply add noise to the results.

The feature selector module in one embodiment cooperates with the function generator module and the machine learning compiler module to evaluate the effectiveness of various features based on evaluation metadata from the metadata library described below. For example the function generator module may generate a plurality of learned functions for various combinations of features and the machine learning compiler module may evaluate the learned functions and generate evaluation metadata. Based on the evaluation metadata the feature selector module may select a subset of features that are most accurate or effective and the machine learning compiler module may use learned functions that utilize the selected features to build the machine learning ensemble . The feature selector module may select features for use in the machine learning ensemble based on evaluation metadata for learned functions from the function generator module combined learned functions from the combiner module extended learned functions from the extender module combined extended functions synthesized learned functions from the synthesizer module or the like.

In a further embodiment the feature selector module may cooperate with the machine learning compiler module to build a plurality of different machine learning ensembles for the same initialization data or training data each different machine learning ensemble utilizing different features of the initialization data or training data. The machine learning compiler module may evaluate each different machine learning ensemble using the function evaluator module described below and the feature selector module may select the machine learning ensemble and the associated features which are most accurate or effective based on the evaluation metadata for the different machine learning ensembles . In certain embodiments the machine learning compiler module may generate tens hundreds thousands millions or more different machine learning ensembles so that the feature selector module may select an optimal set of features e.g. the most accurate most effective or the like with little or no input from a Data Scientist expert or other user in the selection process.

In one embodiment the machine learning compiler module may generate a machine learning ensemble for each possible combination of features from which the feature selector module may select. In a further embodiment the machine learning compiler module may begin generating machine learning ensembles with a minimal number of features and may iteratively increase the number of features used to generate machine learning ensembles until an increase in effectiveness or usefulness of the results of the generated machine learning ensembles fails to satisfy a feature effectiveness threshold. By increasing the number of features until the increases stop being effective in certain embodiments the machine learning compiler module may determine a minimum effective set of features for use in a machine learning ensemble so that generation and use of the machine learning ensemble is both effective and efficient. The feature effectiveness threshold may be predetermined or hard coded may be selected by a client as part of a new ensemble request or the like may be based on one or more parameters or limitations or the like.

During the iterative process in certain embodiments once the feature selector module determines that a feature is merely introducing noise the machine learning compiler module excludes the feature from future iterations and from the machine learning ensemble . In one embodiment a client may identify one or more features as required for the machine learning ensemble in a new ensemble request or the like. The feature selector module may include the required features in the machine learning ensemble and select one or more of the remaining optional features for inclusion in the machine learning ensemble with the required features.

In a further embodiment based on evaluation metadata from the metadata library the feature selector module determines which features from initialization data and or training data are adding noise are not predictive are the least effective or the like and excludes the features from the machine learning ensemble . In other embodiments the feature selector module may determine which features enhance the quality of results increase effectiveness or the like and selects the features for the machine learning ensemble .

In one embodiment the feature selector module causes the machine learning compiler module to repeat generating combining extending and or evaluating learned functions while iterating through permutations of feature sets. At each iteration the function evaluator module may determine an overall effectiveness of the learned functions in aggregate for the current iteration s selected combination of features. Once the feature selector module identifies a feature as noise introducing the feature selector module may exclude the noisy feature and the machine learning compiler module may generate a machine learning ensemble without the excluded feature. In one embodiment the predictive correlation module determines one or more features instances of features or the like that correlate with higher confidence metrics e.g. that are most effective in predicting results with high confidence . The predictive correlation module may cooperate with be integrated with or otherwise work in concert with the feature selector module to determine one or more features instances of features or the like that correlate with higher confidence metrics. For example as the feature selector module causes the machine learning compiler module to generate and evaluate learned functions with different sets of features the predictive correlation module may determine which features and or instances of features correlate with higher confidence metrics are most effective or the like based on metadata from the metadata library .

The predictive correlation module in certain embodiments is configured to harvest metadata regarding which features correlate to higher confidence metrics to determine which feature was predictive of which outcome or result or the like. In one embodiment the predictive correlation module determines the relationship of a feature s predictive qualities for a specific outcome or result based on each instance of a particular feature. In other embodiments the predictive correlation module may determine the relationship of a feature s predictive qualities based on a subset of instances of a particular feature. For example the predictive correlation module may discover a correlation between one or more features and the confidence metric of a predicted result by attempting different combinations of features and subsets of instances within an individual feature s dataset and measuring an overall impact on predictive quality accuracy confidence or the like. The predictive correlation module may determine predictive features at various granularities such as per feature per subset of features per instance or the like.

In one embodiment the predictive correlation module determines one or more features with a greatest contribution to a predicted result or confidence metric as the machine learning compiler module forms the machine learning ensemble based on evaluation metadata from the metadata library or the like. For example the machine learning compiler module may build one or more synthesized learned functions that are configured to provide one or more features with a greatest contribution as part of a result. In another embodiment the predictive correlation module may determine one or more features with a greatest contribution to a predicted result or confidence metric dynamically at runtime as the machine learning ensemble determines the predicted result or confidence metric. In such embodiments the predictive correlation module may be part of integrated with or in communication with the machine learning ensemble . The predictive correlation module may cooperate with the machine learning ensemble such that the machine learning ensemble provides a listing of one or more features that provided a greatest contribution to a predicted result or confidence metric as part of a response to an analysis request.

In determining features that are predictive or that have a greatest contribution to a predicted result or confidence metric the predictive correlation module may balance a frequency of the contribution of a feature and or an impact of the contribution of the feature. For example a certain feature or set of features may contribute to the predicted result or confidence metric frequently for each instance or the like but have a low impact. Another feature or set of features may contribute relatively infrequently but has a very high impact on the predicted result or confidence metric e.g. provides at or near 100 confidence or the like . While the predictive correlation module is described herein as determining features that are predictive or that have a greatest contribution in other embodiments the predictive correlation module may determine one or more specific instances of a feature that are predictive have a greatest contribution to a predicted result or confidence metric or the like.

In the depicted embodiment the machine learning compiler module includes a combiner module . The combiner module combines learned functions forming sets strings groups trees or clusters of combined learned functions. In certain embodiments the combiner module combines learned functions into a prescribed order and different orders of learned functions may have different inputs produce different results or the like. The combiner module may combine learned functions in different combinations. For example the combiner module may combine certain learned functions horizontally or in parallel joined at the inputs and at the outputs or the like and may combine certain learned functions vertically or in series feeding the output of one learned function into the input of another learned function.

The combiner module may determine which learned functions to combine how to combine learned functions or the like based on evaluation metadata for the learned functions from the metadata library generated based on an evaluation of the learned functions using test data as described below with regard to the function evaluator module . The combiner module may request additional learned functions from the function generator module for combining with other learned functions. For example the combiner module may request a new learned function with a particular input and or output to combine with an existing learned function or the like.

While the combining of learned functions may be informed by evaluation metadata for the learned functions in certain embodiments the combiner module combines a large number of learned functions pseudo randomly forming a large number of combined functions. For example the combiner module in one embodiment may determine each possible combination of generated learned functions as many combinations of generated learned functions as possible given one or more limitations or constraints a selected subset of combinations of generated learned functions or the like for evaluation by the function evaluator module . In certain embodiments by generating a large number of combined learned functions the combiner module is statistically likely to form one or more combined learned functions that are useful and or effective for the training data.

In the depicted embodiment the machine learning compiler module includes an extender module . The extender module in certain embodiments is configured to add one or more layers to a learned function. For example the extender module may extend a learned function or combined learned function by adding a probabilistic model layer such as a Bayesian belief network layer a Bayes classifier layer a Boltzmann layer or the like.

Certain classes of learned functions such as probabilistic models may be configured to receive either instances of one or more features as input or the output results of other learned functions such as a classification and a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation an evaluation or the like. The extender module may use these types of learned functions to extend other learned functions. The extender module may extend learned functions generated by the function generator module directly may extend combined learned functions from the combiner module may extend other extended learned functions may extend synthesized learned functions from the synthesizer module or the like.

In one embodiment the extender module determines which learned functions to extend how to extend learned functions or the like based on evaluation metadata from the metadata library . The extender module in certain embodiments may request one or more additional learned functions from the function generator module and or one or more additional combined learned functions from the combiner module for the extender module to extend.

While the extending of learned functions may be informed by evaluation metadata for the learned functions in certain embodiments the extender module generates a large number of extended learned functions pseudo randomly. For example the extender module in one embodiment may extend each possible learned function and or combination of learned functions may extend a selected subset of learned functions may extend as many learned functions as possible given one or more limitations or constraints or the like for evaluation by the function evaluator module . In certain embodiments by generating a large number of extended learned functions the extender module is statistically likely to form one or more extended learned functions and or combined extended learned functions that are useful and or effective for the training data.

In the depicted embodiment the machine learning compiler module includes a synthesizer module . The synthesizer module in certain embodiments is configured to organize a subset of learned functions into the machine learning ensemble as synthesized learned functions . In a further embodiment the synthesizer module includes evaluation metadata from the metadata library of the function evaluator module in the machine learning ensemble as a synthesized metadata rule set so that the machine learning ensemble includes synthesized learned functions and evaluation metadata the synthesized metadata rule set for the synthesized learned functions .

The learned functions that the synthesizer module synthesizes or organizes into the synthesized learned functions of the machine learning ensemble may include learned functions directly from the function generator module combined learned functions from the combiner module extended learned functions from the extender module combined extended learned functions or the like. As described below in one embodiment the function selector module selects the learned functions for the synthesizer module to include in the machine learning ensemble . In certain embodiments the synthesizer module organizes learned functions by preparing the learned functions and the associated evaluation metadata for processing workload data to reach a result. For example as described below the synthesizer module may organize and or synthesize the synthesized learned functions and the synthesized metadata rule set for the orchestration module to use to direct workload data through the synthesized learned functions to produce a result.

In one embodiment the function evaluator module evaluates the synthesized learned functions that the synthesizer module organizes and the synthesizer module synthesizes and or organizes the synthesized metadata rule set based on evaluation metadata that the function evaluation module generates during the evaluation of the synthesized learned functions from the metadata library or the like.

In the depicted embodiment the machine learning compiler module includes a function evaluator module . The function evaluator module is configured to evaluate learned functions using test data or the like. The function evaluator module may evaluate learned functions generated by the function generator module learned functions combined by the combiner module described above learned functions extended by the extender module described above combined extended learned functions synthesized learned functions organized into the machine learning ensemble by the synthesizer module described above or the like.

Test data for a learned function in certain embodiments comprises a different subset of the initialization data for the learned function than the function generator module used as training data. The function evaluator module in one embodiment evaluates a learned function by inputting the test data into the learned function to produce a result such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation an evaluation or another result.

Test data in certain embodiments comprises a subset of initialization data with a feature associated with the requested result removed so that the function evaluator module may compare the result from the learned function to the instances of the removed feature to determine the accuracy and or effectiveness of the learned function for each test instance. For example if a client has requested a machine learning ensemble to predict whether a customer will be a repeat customer and provided historical customer information as initialization data the function evaluator module may input a test data set comprising one or more features of the initialization data other than whether the customer was a repeat customer into the learned function and compare the resulting predictions to the initialization data to determine the accuracy and or effectiveness of the learned function.

The function evaluator module in one embodiment is configured to maintain evaluation metadata for an evaluated learned function in the metadata library . The evaluation metadata in certain embodiments comprises log data generated by the function generator module while generating learned functions the function evaluator module while evaluating learned functions or the like.

In one embodiment the evaluation metadata includes indicators of one or more training data sets that the function generator module used to generate a learned function. The evaluation metadata in another embodiment includes indicators of one or more test data sets that the function evaluator module used to evaluate a learned function. In a further embodiment the evaluation metadata includes indicators of one or more decisions made by and or branches taken by a learned function during an evaluation by the function evaluator module . The evaluation metadata in another embodiment includes the results determined by a learned function during an evaluation by the function evaluator module . In one embodiment the evaluation metadata may include evaluation metrics learning metrics effectiveness metrics convergence metrics or the like for a learned function based on an evaluation of the learned function. An evaluation metric learning metrics effectiveness metric convergence metric or the like may be based on a comparison of the results from a learned function to actual values from initialization data and may be represented by a correctness indicator for each evaluated instance a percentage a ratio or the like. Different classes of learned functions in certain embodiments may have different types of evaluation metadata.

The metadata library in one embodiment provides evaluation metadata for learned functions to the feature selector module the predictive correlation module the combiner module the extender module and or the synthesizer module . The metadata library may provide an API a shared library one or more function calls or the like providing access to evaluation metadata. The metadata library in various embodiments may store or maintain evaluation metadata in a database format as one or more flat files as one or more lookup tables as a sequential log or log file or as one or more other data structures. In one embodiment the metadata library may index evaluation metadata by learned function by feature by instance by training data by test data by effectiveness and or by another category or attribute and may provide query access to the indexed evaluation metadata. The function evaluator module may update the metadata library in response to each evaluation of a learned function adding evaluation metadata to the metadata library or the like.

The function selector module in certain embodiments may use evaluation metadata from the metadata library to select learned functions for the combiner module to combine for the extender module to extend for the synthesizer module to include in the machine learning ensemble or the like. For example in one embodiment the function selector module may select learned functions based on evaluation metrics learning metrics effectiveness metrics convergence metrics or the like. In another embodiment the function selector module may select learned functions for the combiner module to combine and or for the extender module to extend based on features of training data used to generate the learned functions or the like.

The machine learning ensemble in certain embodiments provides machine learning results for an analysis request by processing workload data of the analysis request using a plurality of learned functions e.g. the synthesized learned functions . As described above results from the machine learning ensemble in various embodiments may include a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation an evaluation and or another result. For example in one embodiment the machine learning ensemble provides a classification and a confidence metric for each instance of workload data input into the machine learning ensemble or the like. Workload data in certain embodiments may be substantially similar to test data but the missing feature from the initialization data is not known and is to be solved for by the machine learning ensemble . A classification in certain embodiments comprises a value for a missing feature in an instance of workload data such as a prediction an answer or the like. For example if the missing feature represents a question the classification may represent a predicted answer and the associated confidence metric may be an estimated strength or accuracy of the predicted answer. A classification in certain embodiments may comprise a binary value e.g. yes or no a rating on a scale e.g. 4 on a scale of 1 to 5 or another data type for a feature. A confidence metric in certain embodiments may comprise a percentage a ratio a rating on a scale or another indicator of accuracy effectiveness and or confidence.

In the depicted embodiment the machine learning ensemble includes an orchestration module . The orchestration module in certain embodiments is configured to direct workload data through the machine learning ensemble to produce a result such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation an evaluation and or another result. In one embodiment the orchestration module uses evaluation metadata from the function evaluator module and or the metadata library such as the synthesized metadata rule set to determine how to direct workload data through the synthesized learned functions of the machine learning ensemble . As described below with regard to in certain embodiments the synthesized metadata rule set comprises a set of rules or conditions from the evaluation metadata of the metadata library that indicate to the orchestration module which features instances or the like should be directed to which synthesized learned function .

For example the evaluation metadata from the metadata library may indicate which learned functions were trained using which features and or instances how effective different learned functions were at making predictions based on different features and or instances or the like. The synthesizer module may use that evaluation metadata to determine rules for the synthesized metadata rule set indicating which features which instances or the like the orchestration module the orchestration module should direct through which learned functions in which order or the like. The synthesized metadata rule set in one embodiment may comprise a decision tree or other data structure comprising rules which the orchestration module may follow to direct workload data through the synthesized learned functions of the machine learning ensemble .

The interface module in certain embodiments is configured to receive requests from clients to provide results to a client or the like. The supervised learning module for example may act as a client requesting a machine learning ensemble from the interface module or the like. The interface module may provide a machine learning interface to clients such as an API a shared library a hardware command interface or the like over which clients may make requests and receive results. The interface module may support new ensemble requests from clients allowing clients to request generation of a new machine learning ensemble from the supervised learning module or the like. As described above a new ensemble request may include initialization data one or more ensemble parameters a feature query question or the like for which a client would like a machine learning ensemble to predict a result or the like. The interface module may support analysis requests for a result from a machine learning ensemble . As described above an analysis request may include workload data a feature query question or the like a machine learning ensemble or may include other analysis parameters.

In certain embodiments the supervised learning module may maintain a library of generated machine learning ensembles from which clients may request results. In such embodiments the interface module may return a reference pointer or other identifier of the requested machine learning ensemble to the requesting client which the client may use in analysis requests. In another embodiment in response to the supervised learning module generating a machine learning ensemble to satisfy a new ensemble request the interface module may return the actual machine learning ensemble to the client for the client to manage and the client may include the machine learning ensemble in each analysis request.

The interface module may cooperate with the supervised learning module to service new ensemble requests may cooperate with the machine learning ensemble to provide a result to an analysis request or the like. The supervised learning module in the depicted embodiment includes the function generator module the feature selector module the predictive correlation module and the machine learning compiler module as described above. The supervised learning module in the depicted embodiment also includes a data repository .

The data repository in one embodiment stores initialization data so that the function generator module the feature selector module the predictive correlation module and or the machine learning compiler module may access the initialization data to generate combine extend evaluate and or synthesize learned functions and machine learning ensembles . The data repository may provide initialization data indexed by feature by instance by training data subset by test data subset by new ensemble request or the like. By maintaining initialization data in a data repository in certain embodiments the supervised learning module ensures that the initialization data is accessible throughout the machine learning ensemble building process for the function generator module to generate learned functions for the feature selector module to determine which features should be used in the machine learning ensemble for the predictive correlation module to determine which features correlate with the highest confidence metrics for the combiner module to combine learned functions for the extender module to extend learned functions for the function evaluator module to evaluate learned functions for the synthesizer module to synthesize learned functions and or metadata rule sets or the like.

In the depicted embodiment the data receiver module is integrated with the interface module to receive initialization data including training data and test data from new ensemble requests. The data receiver module stores initialization data in the data repository . The function generator module is in communication with the data repository in one embodiment so that the function generator module may generate learned functions based on training data sets from the data repository . The feature selector module and or the predictive correlation module in certain embodiments may cooperate with the function generator module and or the machine learning compiler module to determine which features to use in the machine learning ensemble which features are most predictive or correlate with the highest confidence metrics or the like.

Within the machine learning compiler module the combiner module the extender module and the synthesizer module are each in communication with both the function generator module and the function evaluator module . The function generator module as described above may generate an initial large amount of learned functions from different classes or the like which the function evaluator module evaluates using test data sets from the data repository . The combiner module may combine different learned functions from the function generator module to form combined learned functions which the function evaluator module evaluates using test data from the data repository . The combiner module may also request additional learned functions from the function generator module .

The extender module in one embodiment extends learned functions from the function generator module and or the combiner module . The extender module may also request additional learned functions from the function generator module . The function evaluator module evaluates the extended learned functions using test data sets from the data repository . The synthesizer module organizes combines or otherwise synthesizes learned functions from the function generator module the combiner module and or the extender module into synthesized learned functions for the machine learning ensemble . The function evaluator module evaluates the synthesized learned functions and the synthesizer module organizes or synthesizes the evaluation metadata from the metadata library into a synthesized metadata rule set for the synthesized learned functions .

As described above as the function evaluator module evaluates learned functions from the function generator module the combiner module the extender module and or the synthesizer module the function evaluator module generates evaluation metadata for the learned functions and stores the evaluation metadata in the metadata library . In the depicted embodiment in response to an evaluation by the function evaluator module the function selector module selects one or more learned functions based on evaluation metadata from the metadata library . For example the function selector module may select learned functions for the combiner module to combine for the extender module to extend for the synthesizer module to synthesize or the like.

The example combined learned functions combined by the combiner module or the like include various instances of forests of decision trees configured to receive or process features N S a collection of combined trees with support vector machine decision nodes with specific kernels their parameters and the features used to define the input space of features T U as well as combined functions in the form of trees with a regression decision at the root and linear tree node decisions at the leaves configured to receive or process features L R.

Component class extended learned functions extended by the extender module or the like include a set of extended functions such as a forest of trees with tree decisions at the roots and various margin classifiers along the branches which have been extended with a layer of Boltzmann type Bayesian probabilistic classifiers. Extended learned function includes a tree with various regression decisions at the roots a combination of standard tree and regression decision tree and the branches are extended by a Bayes classifier layer trained with a particular training set exclusive of those used to train the nodes.

If the interface module receives a new ensemble request the data receiver module receives training data for the new ensemble as initialization data or the like. The function generator module generates a plurality of learned functions based on the received training data from different machine learning classes. The function evaluator module evaluates the plurality of generated learned functions to generate evaluation metadata. The combiner module combines learned functions based on the metadata from the evaluation . The combiner module may request that the function generator module generate additional learned functions for the combiner module to combine.

The function evaluator module evaluates the combined learned functions and generates additional evaluation metadata. The extender module extends one or more learned functions by adding one or more layers to the one or more learned functions such as a probabilistic model layer or the like. In certain embodiments the extender module extends combined learned functions based on the evaluation of the combined learned functions. The extender module may request that the function generator module generate additional learned functions for the extender module to extend. The function evaluator module evaluates the extended learned functions. The function selector module selects at least two learned functions such as the generated learned functions the combined learned functions the extended learned functions or the like based on evaluation metadata from one or more of the evaluations .

The synthesizer module synthesizes the selected learned functions into synthesized learned functions . The function evaluator module evaluates the synthesized learned functions to generate a synthesized metadata rule set . The synthesizer module organizes the synthesized learned functions and the synthesized metadata rule set into a machine learning ensemble . The interface module provides a result to the requesting client such as the machine learning ensemble a reference to the machine learning ensemble an acknowledgment or the like and the interface module continues to monitor requests.

If the interface module receives an analysis request the data receiver module receives workload data associated with the analysis request. The orchestration module directs the workload data through a machine learning ensemble associated with the received analysis request to produce a result such as a classification a confidence metric an inferred function a regression function an answer a recognized pattern a recommendation an evaluation and or another result. The interface module provides the produced result to the requesting client and the interface module continues to monitor requests.

A new instance of workload data is presented to the machine learning ensemble through the interface module . The data is processed through the data receiver module and configured for the particular analysis request as initiated by a client . In this embodiment the orchestration module evaluates a certain set of features associates with the data instance against a set of thresholds contained within the synthesized metadata rule set .

A binary decision passes the instance to in one case a certain combined and extended function configured for features A F or in the other case a different parallel combined function configured to predict against a feature set G M. In the first case if the output confidence passes a certain threshold as given by the meta data rule set the instance is passed to a synthesized extended regression function for final evaluation else the instance is passed to a combined collection whose output is a weighted voted based processing a certain set of features. In the second case a different combined function with a simple vote output results in the instance being evaluated by a set of base learned functions extended by a Boltzmann type extension or if a prescribed threshold is meet the output of the synthesized function is the simple vote. The interface module provides the result of the orchestration module directing workload data through the machine learning ensemble to a requesting client and the method continues.

The present disclosure may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the disclosure is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

