---

title: Trust level activation
abstract: An isolation execution environment provides an application with limited resources to execute an application. The application may require access to secured resources associated with a particular trust level that are outside of the isolation execution environment. A trust activation engine determines the trust level associated with a request for a resource and operates differently based on the trust level. A broker process may be used to execute components providing access to resources having a partial trust level in an execution environment that is separate from the isolation execution environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09465948&OS=09465948&RS=09465948
owner: MICROSOFT TECHNOLOGY LICENSING LLC.
number: 09465948
owner_city: Redmond
owner_country: US
publication_date: 20141130
---
This application is a continuation of Ser. No. 13 186 474 filed on Jul. 20 2011 entitled TRUST LEVEL ACTIVATION the entirety of which is incorporated herein by reference.

The proliferation of network computing has enabled users to acquire code from various sources ranging from trusted systems to unknown sources. The code can be downloaded from the Internet contained in documents or attached to an email. The code may contain bugs or vulnerabilities that can be exploited by malicious code that may access resources protected from a user. The execution of such code may damage a computer system and or result in obtaining a user s sensitive and private data.

An isolation execution environment is one type of code security mechanism that attempts to address the security concerns with acquiring code from unknown or untrusted sources. An isolation execution environment executes code within an environment that has restrictions to prohibit the code from accessing resources outside of the isolation execution environment. In this manner the code cannot compromise the host system. However such restrictions do not offer any flexibility in allowing the application to utilize resources outside of the isolation execution environment.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

An isolation execution environment may be used to execute applications in order to prevent the application from unintentionally or maliciously affecting other executing applications or resources and from leaking sensitive data. The isolation is facilitated by controlling the resources that are accessible to the application in the isolation execution environment. A component such as an application programming interface API may be used to access the resource and is associated with a trust level that reflects the level of security associated with the resource.

A trust activation engine determines whether or not a low privilege application may execute the API associated with a resource and under what conditions. A base trust component may be executed in the isolation execution environment of the low privilege application. A full trust component may never be executed directly by the low privilege application. For a partial trust component the trust activation engine activates a broker process separate from the isolation execution environment to execute the partial trust component. In this manner the low privilege application is shielded from the methods of the API used to access the resource yet obtains the benefits of accessing the resource associated with the partial trust component.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.

Various embodiments are directed to a technology that extends the reach of application code executing in an isolated execution environment to operating system runtime components. An isolation execution environment may be used to execute applications in order to prevent the application from unintentionally or maliciously affecting other executing applications or resources and from leaking sensitive data. The isolation is facilitated by controlling the resources that are accessible to an application. The resources are categorized by a trust level that denotes the security level of the resource. The applications are categorized by a privilege level that denotes the application s security level to access resources. A high privilege application may access all resources and a low privilege application may access certain trust level resources under varying conditions. The technology described herein permits a low privilege application to access certain operating system runtime components in a manner that minimizes risks to a user s sensitive data and computing environment.

In an embodiment an application may be downloaded from a server such as an application store. The downloaded application may be in the form of a package that contains application code and a manifest file. The application code may be any type of computer executable instructions such as without limitation program modules application software video games enterprise software software component and so forth. The manifest file may include the application s identity e.g. publisher the application s name version of the application a targeted architecture for the application e.g. processor architecture operating system version etc. dependencies e.g. hardware device and or other applications capabilities and so forth. The capabilities section identifies the resources that the application requires to operate. Some of the capabilities may refer to resources that are not accessible from within an isolated execution environment.

A resource may be a device or a functionality that represents a risk to a user s security or privacy and as such is controlled by the operating system. A device may be a hardware device located on the user s computing device posing a security risk to the user. Examples of such devices may be a webcam an onboard cellular chip a microphone a GPS receiver and so on. Examples of functionalities may be read or write access to a user s photo library outbound access to the Internet and networks in public places inbound access to the user s home network and so on.

For example an application may require access to a user s photo library. Normally the location of the user s photo library would not be accessible to an application running in an isolated execution environment. The capability section of the manifest file would indicate that the application requires use of the user s photo library. The user implicitly consents to the application s access to the user s photo library when the user downloads the application s package after reviewing the manifest file. However when the application runs in the isolation execution environment the application will need access to the user s photo library.

In one or more embodiments a resource may be accessed through a software component such as an application programming interface API . For example a resource may be a file system disk I O network I O and so forth. The application requests access to the resource through an API call. For example an API call may allow a read operation performed on a database allow access to a file system allow access a network and so forth. The processing of the API call differs based on the trust level associated with the API.

In one or more embodiments each application may be categorized into one of two privilege levels a high privilege application or a low privilege application. A high privilege application has access to all the operating system runtime components and a low privilege application has direct access to only certain operating system runtime components. The components may be categorized into three trust levels a base trust a partial trust and a full trust. A base trust component may be accessible to an application associated with any privilege level. A full trust component may only be directly accessible to high privilege applications. A partial trust component may be accessed by low privilege application through a broker process.

A broker process operates in a separate execution environment from the isolation execution environment and is configured to execute the API calls requested from a low privilege application for partial trust components. A partial trust component requires a higher level of code security than a base trust component and has a lower code security level than a full trust component. By using the broker process as an intermediary between the application and the operating system the integrity of the resource is secure from damage caused by malicious code that may be present in the application. Attention now turns to a more detailed description of embodiments of a system embodying the technology that extends an isolation execution environment to activate trust level components.

Referring to there is shown an exemplary system configured to enable a low privilege application to access base trust components within an isolation execution environment . The system may be performed on any type of computing device such as handheld portable servers computers mobile phones personal assistant devices and so forth.

The system has an isolation execution environment and a trust activation engine . The isolation execution environment may be configured to execute a low privilege application in a user process . The user process may be associated with a token that identifies the application running in the user process and the permissions or capabilities that the application is permitted to access. The token may include a user secure identifier SID a package SID and the capabilities of the application. The user SID identifies the user process and the package SID identifies the application. The capabilities are the user permitted accesses to resources that the application requires.

Initially an application registers with the operating system when the application is installed into the system . A user process may be created for the application and a token may be associated with the user process . As the application executes the application may request activation of a base trust component block . In one or more embodiments access to the base trust component is facilitated through an API call.

The API may be implemented through a dynamic link library DLL or through an executable file. A DLL is a shared library that contains code and data that can be used by multiple processes at the same time. In object oriented programming languages an API may include a set of class definitions. An instance of a class is referred to as an object and the object is used to call or activate the API. The object may be represented as a data structure consisting of data and methods that implement the API. The data may contain variables that are used by a process to call the API.

A trust activation engine handles the API call and looks for the trust level associated with the API in an API database . The API database is secured from tampering by the low privilege application. If the component is associated with a base trust level the trust activation engine generates an API object using the executable code stored in the API database . The base trust object or API object is then forwarded to the user process and stored therein block . The invocation of the API call then proceeds from the isolation execution environment .

As noted above a user process is created for the application and a token is associated with the user process . As the application executes the application may request activation of a partial trust component which is facilitated through an API call block . The trust activation engine handles the API call and looks for the trust level associated with the API from data stored in an API database . If the component is associated with a partial trust level the trust activation engine generates a broker process . The broker process generates an API object that is stored in the broker process . The broker process forwards data back to the user process block for the application s use in communicating with the broker process to invoke the API corresponding to the partial trust component block . The broker initiates execution of the API method within the broker process .

The trust activation engine handles requests to activate a full trust component from the application block . The request is made through an API call and the trust activation engine looks for the trust level associated with the API in an API database . When the trust activation engine determines that the component is associated with a full trust level the trust activation engine does not activate the API and instead returns an error message to the application block .

Although the systems shown in have a limited number of elements in a certain configuration it should be appreciated that these systems can include more or less elements in alternate configurations for an intended implementation. For example application code may include other forms of applications such as without limitation Windows Web Applications written in Hyper Text Markup Language HTML Cascading Style Sheets CSS or JavaScript and Modern Client Applications written in managed code or native code.

In addition each of the systems shown in may comprise a computer implemented system having multiple components programs procedures modules. As used herein these terms are intended to refer to a computer related entity comprising either hardware a combination of hardware and software or software. For example an element shown in may be implemented as a process running on a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. One or more elements may reside within a process and or thread of execution and an element may be localized on one computer and or distributed between two or more computers as desired for a given implementation. The embodiments are not limited in this manner.

Attention now turns to a more detailed discussion of operations of the embodiments with reference to various exemplary methods. It may be appreciated that the representative methods do not necessarily have to be executed in the order presented or in any particular order unless otherwise indicated. Moreover various activities described with respect to the methods can be executed in serial or parallel fashion or any combination of serial and parallel operations. The methods can be implemented using one or more hardware elements and or software elements of the described embodiments or alternative embodiments as desired for a given set of design and performance constraints. For example the methods may be implemented as logic e.g. computer program instructions for execution by a logic device e.g. a general purpose or specific purpose computer .

Referring to the process determines the privilege level associated with the application requesting access to a trust level component block . A trust activation engine receives an API call from a user process making the request and determines the identity of the user process . The trust activation engine may determine the identity of the user process from the token passed in the API call. If the package SID in the token matches an entry in the operating system registry for processes executing within an isolation execution environment then the trust activation engine determines that the calling application has a low privilege level. Otherwise the trust activation engine determines that the calling application has a high privilege level.

If a low privilege application is requesting access to a trust level component block yes then the process determines the trust level of the component block . Otherwise block no the high level application has access to all trust level components and as such the high level application is able to invoke the trust level component from its execution environment block .

In the case of a low privilege application the trust activation engine determines the type of trust level component requested in the API call block . The trust activation engine matches the requested component in an API database which contains the trust level associated with each component. If the requested component is associated with a base trust level block yes then the trust activation engine generates an API object block . The API object is then forwarded into the user process s address space in the isolation execution environment block . The execution of the method associated with the API call proceeds from the isolation execution environment block .

Otherwise block no if the requested component is associated with a partial trust level block yes then a broker process may be generated to execute the API call block . The trust activation engine creates a broker process to activate the partial trust component in the broker process block . The broker process then activates the partial trust component by invoking the API call associated with the partial trust component block . The broker process generates an API object block . Data pertaining to the object may be forwarded to the user s process in the isolation execution environment which may then be used in invoking the API call from the application block . The execution of the method associated with the API call executes in the broker process block .

If the requested component is associated with a full trust level block yes then the trust activation engine denies access to the full trust component and returns a failure response to the user s process block . Attention now turns to a description of an operating environment utilizing the embodiments described herein.

Referring now to there is shown a schematic block diagram of an exemplary operating environment . The operating environment may include one or more client s in communication through a communications framework with one or more server s . In an embodiment a client may be implemented as the computing device embodying systems and . The server may be implemented as the source of the application code that is provided to the client which may be an application store a server an email server a web server and so forth. Each client s is coupled to one or more client data store s that store information local to the client . Each server s is coupled to one or more server data store s that store information local to the server .

A client may be embodied as a hardware device a software module or as a combination thereof. Examples of such hardware devices may include but are not limited to a computer e.g. server personal computer laptop etc. a cell phone a personal digital assistant or any type of computing device and the like. A client may also be embodied as a software module having instructions that execute in a single execution path multiple concurrent execution paths e.g. thread process etc. or in any other manner.

A server may be embodied as a hardware device a software module or as a combination thereof. Examples of such hardware devices may include but are not limited to a computer e.g. server personal computer laptop etc. a cell phone a personal digital assistant or any type of computing device and the like. A server may also be embodied as a software module having instructions that execute in a single execution path multiple concurrent execution paths e.g. thread process etc. or in any other manner.

The communications framework facilitates communications between the client and the server . In an embodiment the communications framework may be embodied as a communications network such as the Internet a local area network or a wide area network or combinations thereof. The communications framework may embody any type of communications medium such as wired or wireless networks utilizing any communication protocol.

Referring to the client may have a network interface a processor and a memory . The processor may be any commercially available processor and may include dual microprocessors and multi processor architectures. The network interface facilitates wired or wireless communications between the client and a communications framework in order to provide a communications path between the client and a server .

The memory may be any computer readable storage media or computer readable media that may store processor executable instructions procedures applications and data. The computer readable media does not pertain to propagated signals such as modulated data signals transmitted through a carrier wave. It may be any type of memory device e.g. random access memory read only memory etc. magnetic storage volatile storage non volatile storage optical storage DVD CD floppy drive disk drive flash memory and the like. The memory may also include one or more external storage devices or remotely located storage devices. The memory may contain instructions and data as follows 

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

For example various embodiments of the system may be implemented using hardware elements software elements or a combination of both. Examples of hardware elements may include devices components processors microprocessors circuits circuit elements integrated circuits application specific integrated circuits programmable logic devices digital signal processors field programmable gate arrays memory units logic gates and so forth. Examples of software elements may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces instruction sets computing code code segments and any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels bandwidth computing time load balance memory resources data bus speeds and other design or performance constraints as desired for a given implementation.

Some embodiments may comprise a storage medium to store instructions or logic. Examples of a storage medium may include one or more types of computer readable storage media capable of storing electronic data including volatile memory or non volatile memory removable or non removable memory erasable or non erasable memory writeable or re writeable memory and so forth. Examples of the logic may include various software components such as programs procedures module applications code segments program stacks middleware firmware methods routines and so on. In an embodiment for example a computer readable storage medium may store executable computer program instructions that when executed by a processor cause the processor to perform methods and or operations in accordance with the described embodiments. The executable computer program instructions may be implemented according to a predefined computer language manner or syntax for instructing a computer to perform a certain function. The instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language.

