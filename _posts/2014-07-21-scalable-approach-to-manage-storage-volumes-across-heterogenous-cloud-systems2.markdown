---

title: Scalable approach to manage storage volumes across heterogenous cloud systems
abstract: There are provided a system and a computer program product for managing heterogeneous cloud data storage systems. A computing system defines rules that govern a plurality of heterogeneous cloud data storage systems. The computing system receives complete data from a user's computer. The computing system splits the complete data. The computing system stores the split data according to the defined rules into the plurality of heterogeneous cloud data storage systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09565253&OS=09565253&RS=09565253
owner: International Business Machines Corporation
number: 09565253
owner_city: Armonk
owner_country: US
publication_date: 20140721
---
This disclosure relates generally to managing heterogeneous cloud storage systems and more particularly to defining of business rules and applying the defined rules to heterogeneous cloud i.e. cloud data storage systems.

An adoption of cloud computing storage systems has been increasing faster than ever. As the cloud adoption increases the interest in exploring this resource properly arises as a necessity that claims special attention specially for data management. To provide a powerful management capacity it is necessary to pay close attention to fundamental requirements such as security availability integrity and backup. Also it is important to focus on optimizing the use of cloud computing network bandwidth while keeping latency under control and achieving lower operational costs at the same time. Naturally these requirements when brought to corporate environments are dissolved into several business policies that aims to mitigate any risk that could compromise company s data.

A system and a computer program product may be provided for managing heterogeneous cloud data storage systems. There are provided a system and a computer program product for managing heterogeneous cloud data storage systems across heterogeneous cloud computing systems.

A computing system defines applies and enforces rules that govern a plurality of heterogeneous cloud data storage systems. The computing system receives complete data from a user s computer. The computing system splits the complete data. The computing system stores the split data according to the defined rules into the plurality of heterogeneous cloud data storage systems.

When a user wants to store data into a cloud data storage system the user uses an API Application Programming Interface not shown or a GUI Graphical User Interface not shown of the Cloud Volume Management. The Cloud Volume Management stores the user s data according to the defined business rules. For example an exemplary business rule defined by a system administrator or like user of the multi cloud data storage system may state that any data shall be stored in a cloud data storage system whose resource usage is the lowest i.e. available data storage space is the largest among the cloud data storage systems . In one embodiment the multi cloud data storage system may split the user s data and store the split data at one or more different cloud data storage systems whose resource usages are lowest. By running the business rules by the Cloud Volume Management the multi cloud data storage system splits and or stores the user s data according to the run business rules.

In another example the system administrator defines one or more criteria e.g. in binary code into the Cloud Volume Management that are used to choose a cloud data storage system among the plurality of heterogeneous cloud data storage systems. Then by running the binary code the multi cloud data storage system stores the user s data in a corresponding cloud data storage system that satisfies the defined criteria or that satisfies most of the defined criteria. The defined criteria include but are not limited to a price of storing in a cloud data storage system etc.

In one embodiment the Cloud Volume Management is a distributed data storage management system that manages a plurality of heterogeneous cloud data storage systems e.g. by running method steps described in . Each cloud storage system or may be designed and manufactured by a different vendor or manufacturer . The Cloud Volume Management is configured to split and store data e.g. file s etc. into the cloud data storage systems A B and N and is further configured to use the cloud data storage systems C and D for backup i.e. copying and archiving etc. the data stored in the cloud storage systems A B and N .

The multi cloud data storage system combines heterogeneous cloud data storage systems and decides how data is going to be stored according to pre defined rules that are described below in detail. The Cloud Volume Management provides storage and data management e.g. of files etc. as follows 

Based on these benefits the Cloud Volume Management improves usability of the cloud data storage system s e.g. via the GUI and or API. By further employing a known data mining technique or a known business intelligence technique the multi cloud data storage system increases its performance its capability and or its reliability and decreases the cost needed to maintain the cloud data storage system s . For example the cloud data storage systems in the multi cloud data storage system may store similar or equal amount of data e.g. by 1 determining via a known data mining technique available data storage spaces of all the cloud data storage systems 2 splitting the received data and 3 storing the split data within the cloud data storage system s in the way that each cloud data storage system utilizes similar or equal data storage spaces in order to store the split data. The business intelligence technique includes one or more of a known data analysis technique a known data mining technique a known statistical analysis technique testing etc.

In one embodiment the multi cloud data storage system encrypts the split data before storing the split data into the cloud data storage system s . The multi cloud data storage system may stores the encrypted split data into each different cloud data storage system according to the defined rules.

In one embodiment the multi cloud data storage system uses different data storage devices across multiple cloud data storage system s which are provided by the different vendors and or manufactures. Each cloud data storage system includes but is not limited to one or more different characteristics a different manner of accessibility a different security level a use of a different encryption algorithm to store the data a different network to which the each cloud data storage system is connected etc.

The Cloud Volume Management stores in its corresponding local memory device the defined rules cloud information e.g. registration information profile information current status information users definitions i.e. users information users login identification and corresponding passwords etc. Exemplary cloud profile information is described below. An exemplary defined rule is also described below. The Cloud Volume Management communicates with the one or more users e.g. via the GUI or API. The Cloud Volume Management provides directions to an Input Scheduler and an Output Scheduler .

The Cloud Volume Management is a distributed data storage management system that manages a plurality of the heterogeneous cloud data storage systems e.g. by running method steps in . The Cloud Volume Management applies the defined rules by running binary code that encodes the defined rules to each of the cloud data storage systems. The one or more users may customize the defined rules e.g. by using a high level programming language etc. depending on each user s need. The Cloud Volume Management may compile the defined rules written by the high level programming language in order to generate an updated binary code e.g. by using a compiler.

In one embodiment the Cloud Volume Management that runs the method steps shown in may be implemented as a software application. In this embodiment the software application i.e. the Cloud Volume Management may be stored in a cache memory device or a storage device as binary code that represent method steps shown in . In this embodiment the Cloud Volume Management may include one or more modules e.g. functions and or subroutines etc. written by a high level programming language and stored in the memory device or the storage device as corresponding binary code. The one or more users may be able to customize the one or more or all modules in the Cloud Volume Management if the one or more users are authorized to access and modify high level programming language source code of the Cloud Volume Management . In another embodiment the Cloud Volume Management may be implemented as hardware e.g. ASIC Application Specific Integrated Circuit chip by using hardware description language for example VHDL VHSIC Hardware Description Language etc.

In one embodiment the Input Scheduler determines a priority of each data to be stored in a cloud data storage system and or a queue e.g. based on the exemplary defined rule or header information of the each data. The Input Scheduler sends the each data to a queue according to the determined priority. In another embodiment the Input Scheduler splits the received data into several piece of data e.g. by using a split function in Java programming language that breaks a character or numerical string to multiple substrings. For example the Input Scheduler splits a single received file into sperate individual files whose names are different. The Input Scheduler sends the split data to a cloud data storage system or according to the defined rule s . Processing of the multi cloud data storage system proceeds from receiving the data from the user s to storing the split received data to a cloud data storage system or .

The Output Processing Unit encrypts the split data before storing the split data at a priority queue and or a cloud data storage system. At the Output Processing Unit also directly or indirectly receives data associated with current status of each cloud data storage system from the each cloud data storage system. For example the current status of the each cloud data storage system includes but is not limited to a network connection bandwidth of the each cloud data storage system performance of the each cloud data storage system etc. Each cloud data storage system may obtain an indication of available network bandwidth associated with the each cloud data storage system e.g. by running ping command an instruction that shows how long a data packet take to reach an IP Internet Protocol address destination by running ping the IP address on a computing system of the each cloud data storage system. At the Cloud Interface Unit may send one or more data packets representing feedback information e.g. how to improve the network bandwidth between the Cloud Volume Management and the Output Scheduler to the Cloud Volume Management .

The Cloud Interface Unit communicates with the heterogeneous cloud data storage systems e.g. by sending the encrypted split data to a cloud data storage system. At the Cloud Interface Unit verifies the status of each cloud data storage system e.g. by sending a ping command to an IP address of the each cloud data storage system.

The defined rules describe one or more of 1 an identification information of the each cloud data storage system e.g. identification information i as shown in the following business rule example 1 and 2 data types that can be stored in the each cloud data storage system e.g. a rule description ii as shown in the following business rule example 1. The defined rules may specify that each cloud data storage system stores a different type of data. Corresponding pseudo code of the defined rule s is described as follows 

A business rule can define cloud data storage information that includes but is not limited to 1. Performance of one or more cloud data storage systems 2. Redundancy of the one or more cloud data storage systems 3. Data type that can be stored the one or more cloud data storage system and 4. Security for example an encryption decryption algorithm s used in the one more cloud storage systems. The Cloud Volume Management stores in one or more local memory device s etc. a set of business rule defined by the user s that define what each cloud data storage system can store. A cloud data storage system may be more sensitive to network communication latency and may store frequently accessed files. Another cloud data storage system may be more secure than other cloud data storage systems e.g. by employing an encryption decryption algorithm that uses a longer key e.g. 256 bits key and a longer block size e.g. 128 bits block size.

The users and or the Cloud Volume Management may define cloud data storage information e.g. by using a programming language a Markup language a scripting language etc. An exemplary cloud information is as follows 

An exemplary cloud profile data a5 may be defined by the user s and or the Cloud Volume Management as follows between lines c0 and c6 

In one embodiment the user creates one or more different business rules e.g. by using a programming language a markup language and or a scripting language. The cloud management system applies a different rule to each corresponding cloud data storage system. The cloud management system may exchange one or more applied rules between two or more cloud data storage systems upon receiving one or more users requests. The cloud management system applies the exchanged rule s to corresponding cloud data storage systems whose previous rule s are replaced with the exchanged rule s .

In one embodiment the API of the Cloud Volume Management includes software libraries e.g. Java classes which provide basic functionalities for creating software and or hardware application s not shown that the user s can use to access the Cloud Volume Management and or the cloud data storage systems. Through the created software and or hardware applications the user s may enter and or program commands to store and retrieve from and to the cloud data storage systems any amount of data at anytime from anywhere. The created software and or hardware applications may include but are not limited to database management system s used to manage and retrieve data stored in the cloud data storage systems file systems used to manage and retrieve files stored in the cloud data storage systems load balancer s used to balance amount of data stored across the cloud data storage systems data storage device s used to store data in the cloud data storage systems etc.

The following describes a scheduling algorithm of the Cloud Volume Management . The Cloud Volume Management starts to operate e.g. by pressing a start button or icon not shown via the GUI of the Cloud Volume Management . The Cloud Volume Management loads one or more information but not limited to the cloud profile data of the cloud data storage systems the cloud data storage information of the cloud data storage systems security policies of the cloud data storage systems and the defined rules of the cloud data storage systems. The Input Scheduler performs a first part of the scheduling algorithm i.e. the loading of the one or more information e.g. by running one or more exemplary commands as follows 

An exemplary command d1 may let the Cloud Volume Management activate and or access one or more cloud data storage system s . An exemplary command d2 may let the Cloud Volume Management activate one or more defined rule s associated with one or more cloud data storage system s e.g. by running the one or more defined rule s . An exemplary command d3 may let the Cloud Volume Management activate security rule s which may be included in the defined rule s e.g. by running binary code corresponding to the security rule s . An exemplary command d4 may let the Cloud Volume Management activate and or access one or more cloud profile data e.g. by running the one or more cloud profile data.

Upon loading all the information of the cloud data storage systems into the Cloud Volume Management the Input Scheduler starts to receive input data e.g. files etc. from the user s computers. The Input Scheduler ensures that incoming data include associated data priority e.g. in a data field s incoming data. Based on the associated data priority the Input Scheduler assigns an amount of processing times and or resources to corresponding data. For example the Input Scheduler assigns more processing times and or resources to data with a high priority. The Input Scheduler assigns less processing time and or resources to data with a low priority. Prioritization of each data may ensure that high priority data are processed as soon as possible. The following describes exemplary pseudo code run by the Input Scheduler to determine a data priority of each data g2 and further to send the each data to the Output Scheduler g3 . The running of this exemplary pseudo code g1 g3 may continue until the Input Scheduler does not receive any input data g1 .

Upon receiving the input data from the Input Scheduler the Output Scheduler applies the security rules e.g. an encryption and or decryption etc. on the received input data. In one embodiment an applied security rule s is associated with a data priority of each received input data. The sort of security rule s e.g. the sort of encryption algorithm s etc. which to be applied may be defined by the security rule s which may be specific for each type of data. For example the Output Scheduler may apply an encryption algorithm with more bits in a key and more number of blocks e.g. AES Advanced Encryption Standard algorithm which runs with 256 bit keys and 64 blocks each of which is 128 bit.

In one embodiment the Output Scheduler includes one or more software and or hardware modules which may communicate with each other as each node communicates in a tree data structure. For example a module at leaf node may communicate only with the parent node s of that module. A module at a root node may control modules at other nodes including all the modules other than the module located at the root node e.g. by sending commands to modules located at intermediary nodes and at leaf nodes and receiving acknowledgement and or feedback data from modules located intermediary nodes and or leaf nodes. Each module may handle one or more data types with a specific priority e.g. a high priority. For example a module that is assigned to high priority data type may run AES or DES or both on data to be stored at corresponding cloud data storage systems. When the Input Scheduler sends the input data the Input Scheduler sends directly or indirectly to a module in the Output Scheduler which is assigned to process data types with one or specific data priorities. That module may process only data having those data types and or having those specific data priorities. When each data arrives at the Output Scheduler the Output Scheduler identifies data priority of the each data and runs specific module s that are assigned to the identified data priority. Those specific module s have corresponding security rule s . Those specific module s apply those security rule s e.g. particular encryption algorithm s etc. over the data sent to those module s . The security rules include but are not limited to cryptography i.e. data encryption decryption splitting data to store each split data to multiple cloud data storage systems running of data backup e.g. implementing of RAID etc. and running of data replication e.g. implementing of RAID etc. and implementing of data redundancy e.g. implementing of RAID etc. etc. The following pseudo code h1 h3 describes that the Output Scheduler applies different security rules to each input data.

The Output Scheduler sends the processed data e.g. encrypted split data etc. to one or more destinations i.e. one or more cloud data storage systems. Based on the defined rule s the Output Scheduler determines where to send the current data. For example by running an exemplary rule 2 the Cloud Volume Management configures a cloud data storage system named mybusiness.storage.id to store a low priority word document s and further to store a high priority spreadsheet s . By accessing the Cloud Volume Management and or accessing a defined rule s the Output Scheduler may be able to determine a destination of each processed data. Alternatively each processed data may include a data field e.g. header field etc. which indicates a destination of each processed data. By inspecting and or examining the header field of the each processed data the Output Scheduler determines one or more final or intermediary destination of the each processed data.

Besides splitting and encrypting the input data and sending the encrypted split data to corresponding cloud data storage systems the Output Scheduler constantly verifies the status of each cloud data storage system and provides corresponding feedback data to the Cloud Volume Management . In one embodiment the cloud interface unit in the Output Scheduler evaluates current status of each cloud data storage system and sends data that represent the evaluated current status of the each cloud data storage system to the output processing unit in the Output Scheduler . The output processing unit sends the data representing the evaluated current status of the each cloud data storage system to the Cloud Volume Management . The Output Scheduler may dynamically re assign and or update the defined rules in order to optimize e.g. maximize etc. usages of the cloud data storage systems. In order to maximize the usages of the cloud data storage systems the Output Scheduler leverages a shortest path algorithm e.g. Dijkstra s Bellman Ford A Best first etc. The leveraging of these shortest path algorithm can determine a shortest path to a cloud data storage system in which corresponding data is to be stored. These shortest distance algorithms may be modified to run a graph whose nodes represent the Cloud Volume Management and the cloud data storage systems and whose edges represent network communication connection between two or more nodes. An edge in the graph may have two or more weights 1 a weight representing a network communication latency between two or more nodes and 2 a weight representing a network communication bandwidth between two or more nodes. By monitoring the network communication latency and the network communication bandwidth associated with each cloud data storage system the Cloud Volume Management provides a real time adaptation capability e.g. updating the defined rules in real time based on the feedback data etc. to the user s and or the cloud data storage systems. An example of the updating the defined rules include but is not limited to changing a data type that can be stored in a corresponding cloud data storage system. The following describes pseudo code j1 j3 that may be run by the Output Scheduler . At j1 the Output Scheduler receives the input data whose header information indicates a corresponding destination cloud data storage system. The Output Scheduler further evaluates whether the destination cloud data storage system and or other cloud data storage system currently operate e.g. by using sc.exe file in Windows operating system which can be used for evaluate a current status of each cloud data storage system and or by using Remote Desktop Connection application which enables the Output Scheduler to connect to each cloud data storage system. At j2 upon determining that the destination cloud data storage system currently operates the Output Scheduler sends the processed data to the destination cloud data storage system. At j3 the Output Scheduler continuously or periodically updates status of the destination cloud data storage systems e.g. by using the sc.exe file or the Remote Desktop Connection application.

In one embodiment there is provided a virtual machine e.g. Java virtual machine etc. not shown in the multi cloud data storage system . In a further embodiment the virtual machine stores all data to be used by the virtual machine in the same cloud data storage system which is a host server system of the virtual machine. In this embodiment the virtual machine cannot split the input data and cannot store the input data across multiple cloud data storage systems. The virtual machine may store the input data only in a single cloud storage system which hosts the virtual machine.

In a further embodiment there are provided a plurality of virtual machines in the multi cloud data storage system . In this embodiment a virtual machine cannot access data stored only in a corresponding cloud data storage system. The virtual machine cannot access data stored in another cloud data storage system. In this embodiment data stored in each cloud storage system is not related to each other e.g. not split data.

In another embodiment a virtual machine in the multi cloud data storage system may store data e.g. files etc. in one or more different cloud data storage systems according to the defined rules. The virtual machine may apply the defined rules differently to each data type depending on the data priority of the each data type e.g. by using if and else clause or a hardware multiplexer etc. The multi cloud data storage system increase data safety e.g. by using data replication and or data redundancy. For example a structure of data storage devices used in the cloud data storage systems may be similar to RAID. The multi cloud data storage system may split data e.g. a file etc. and stores split data across multiple different cloud data storage systems. The virtual machine and or the Cloud Volume Management may have a transparent user interface e.g. a graphical user interface which combines and integrates all the graphical user interfaces of all the different cloud data storage systems which enables user s to communicate a plurality of different distributed cloud data storage systems.

In one embodiment the multi cloud data storage system may allow a single data to be shared across different cloud data storage systems e.g. by using a known cache coherence scheme. The multi cloud data storage system may store a particular type of data in a database managed by a relational database management system e.g. IBM DB2 Oracle etc. In one embodiment the multi cloud data storage system customizes sending and storing of data e.g. by specifying one or more rules that determine processing of the data and a destination of the processed data and running the specified rules. In one embodiment the multi cloud data storage system stores metadata representing a data storage location e.g. an IP address of a particular cloud data storage system. A user can define a structure e.g. a tree etc. of cloud data storage systems in the defined rule s . The user may define a plurality of rules. The multi cloud data storage system or the user selects one or more defined rules among the plurality of rules based on the user s need and or resources needed to process the user s request. The multi cloud data storage system applies the selected rule s over the input data in order to process e.g. whether to split the input data and or whether to encrypt the input data and or whether to encrypt the split input data etc. data according to the selected rules. The multi cloud data storage system stores the processed data in a particular priority queue and or a particular cloud data storage system according to the selected rules. In one embodiment the multi cloud data storage system dynamically manages in real time the cloud data storage systems e.g. by dynamically updating the defined or selected rules and by applying the dynamically updated rules when processing and storing of the input data.

In one embodiment a computing system may run the method illustrated in . The computing system may implement and or run the cloud volume management the input scheduler and the output scheduler . illustrates examples of the computing system. Examples of the computing system may include but are not limited to a parallel computing system including at least one processor and at least one memory device a mainframe computer including at least one processor and at least one memory device a desktop computer including at least one processor and at least one memory device a workstation including at least one processor and at least one memory device a tablet computer including at least one processor and at least one memory device a netbook computer including at least one processor and at least one memory device a smartphone including at least one processor and at least one memory device a laptop computer including at least one processor and at least one memory device a physical server including at least one processor and at least one memory device or a software server e.g. web server HTTP server application server etc.

In one embodiment the methods shown in may be implemented as hardware on a reconfigurable hardware e.g. FPGA Field Programmable Gate Array or CPLD Complex Programmable Logic Device by using a hardware description language Verilog VHDL Handel C or System C . In another embodiment the methods shown in may be implemented on a semiconductor chip e.g. ASIC Application Specific Integrated Circuit by using a semi custom design methodology i.e. designing a semiconductor chip using standard cells and a hardware description language.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by a device that runs an instruction. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may run entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may run the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which run via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which run on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be run substantially concurrently or the blocks may sometimes be run in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

