---

title: Command line output redirection
abstract: In one embodiment the invention provides a method. The method includes invoking, via an application, a call of a command line utility; providing, via the application, an identifier in the call of the command line utility, wherein the identifier comprises an operating system controlled memory location; storing output from the command line utility in operating system shared memory at the operating system controlled memory location identified by the identifier; and retrieving, by the application, the command line utility output from the operating system shared memory at the operating system controlled memory location identified by the identifier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652303&OS=09652303&RS=09652303
owner: Micron Technology, Inc.
number: 09652303
owner_city: Boise
owner_country: US
publication_date: 20140523
---
This application is a continuation of U.S. patent application Ser. No. 13 111 775 filed on May 19 2011 which is a continuation of U.S. patent application Ser. No. 09 449 782 which was filed on Nov. 26 1999.

The invention relates generally to computer system support of application program execution and more particularly but not by way of limitation to a method and apparatus for redirecting command line utility output to a non application maintained storage location.

Many applications such as word processing and file viewing programs have occasion to access system information. Often such system information is available only through command line e.g. console utilities. That is utilities that are accessible only through a command line interface. Illustrative command line utilities include dir and net view commands available in the Microsoft WINDOWS operating system and the w command available in UNIX and UNIXe like operating systems provides a list of users logged onto a specified computer system .

One difficulty with command line utilities is that their output is not generally directly useable by an executing application. The conventional technique by which a user application obtains command line utility output is shown in . After a temporary text file is created block the command line utility whose output is desired is invoked via a standard interface block . Output from the command line utility is piped to the temporary file block from which the application extracts and processes the desired data block . Sound programming practice calls for the destruction removal of the temporary file created in block block . It will be recognized that a temporary file may be created by the piping operation itself i.e. during the acts of block . Nevertheless the use of a temporary file is generally considered essential.

A problem with the technique of is that the application invoking the command line utility may not have file creation privileges on the computer system. If this is so then the application will be unable to obtain the desired data. Another problem is that if the disk the application has access to is full i.e. incapable of accepting new or enlarged user files any attempt to create a new file will generate an error. Yet another problem is that the file name chosen for the temporary file may already be in use. Still another problem is that many new PCs are disk less and thus may not provide a mechanism through which user Initiated i.e. user invoked application file input output is possible. A further problem with prior art techniques such as that shown in is that maintenance of temporary files is left to the calling application. If the application that creates a temporary file fails to remove it a plethora of useless files may be to generated over time.

Thus it would be beneficial to provide a mechanism by which an application program may obtain output from a command line utility without the need to create a temporary file.

In one embodiment the invention provides a method to provide command line utility output to an application without the need of temporary files. The method includes receiving an identifier receiving output from a command line utility and storing the command line utility output in a system storage at a location identified by the identifier. In one illustrative embodiment command line utility output is stored in a system registry database which is stored in active memory temporary storage when the system is active and stored in a file permanent storage when the system is inactive. In another illustrative embodiment command line utility output is stored in a shared system memory. The method may be stored in any media that is readable and executable by a computer system.

Referring to redirection routine in accordance with one embodiment of the invention uses a user application specified identifier block to identify command line utility output block which it stores in a system wide storage location block . By system wide it is meant that the storage location is available to all user applications and is furthermore maintained by operation of the underlying operating system. Following the act of storage in block a value associated with the identifier in the system storage is updated to indicate completion of the redirection routine and to possibly provide additional information to the calling application such as the amount e.g. number of lines of information stored. Once redirection routine completes the act of storing in block the application invoking routine may use the specified identifier to access the stored command line utility output.

One benefit of a redirection routine in accordance with is that the calling application does not need file creation authority no temporary files are created. Another benefit is that there is no need for the calling application to remove temporary files as in prior art techniques such as that illustrated in . A corollary of this benefit is that the calling application does not require file deletion authorization. Yet another benefit of a redirection routine in accordance with the invention is that a second application cannot inadvertently destroy the results generated by a first application by accidentally replacing or deleting a temporary file e.g. a background process designed to remove temporary files .

Still another benefit of the invention is that the application invoking redirection routine does not have to have disk I O input output authority as the storage location is maintained by the underlying operating system the application makes I O calls to the specified storage location through standard system calls see discussion below .

By way of example consider a situation in which an executing application needs information of the type provided by command line utility CMD UTIL where CMD UTIL represents any utility executable from a command line prompt e.g. the dir directory command of a Microsoft WINDOWS operating system or the head command of a UNIX operating system . In accordance with the invention the application invokes a system call of the form 

It will be recognized that the calling application will generally ensure that the identifier it passes to routine has either not been used or may be reused. It will further be recognized that command utilities may be stacked. That is output from a first command utility CMD UTIL 1 for example may be piped to a second third or Nth command utility CMD UTIL N for example which may then be piped to routine . In this case a system call in accordance with the invention would be 

Because many current personal computer systems PCs are operated or controlled by one version or another of the Microsoft WINDOWS operating system an illustrative embodiment of redirection routine utilizing the WINDOWS system registry hereinafter the registry will now be given. It will be recognized that the registry is an operating system generated and maintained database which application programs application setup programs and the operating system itself use to store configuration information.

Information stored in the registry is organized into hierarchical keys and associated key entries. Current versions of the registry use six predefined root keys AKA Hives HKEY USERS HKEY.CLASSES.ROOT HKEY.CURRENT.USER HKEY.CURRENT.CONFIG HKEY LOCAL.MACHINE and HKEY.DYN.DATA. Each key in the registry can have one or more sub key entries. Each key and sub key can have one or more names a unique character string identifier and each name can have an associated value data stored in a defined manor may be a character string binary data a number a Boolean value etc. . Each key and sub key has one default key entry that has no name.

Access to the registry is provided through system calls defined in the registry application programming interface API . Illustrative registry API functions include RegEnumKeyEx which enumerates the sub keys of a specified key RegOpenKeyEx which opens and returns a handle to a specified key RegEnumValue which enumerates the key entries associated with a specified key RegQueryValueEx which returns the assigned value of a specified key entry RegSetValueEx which assigns a value to a specified key entry creating the key entry if the key entry was not previously registered RegDeleteKey which removes a key from the registry and RegDeleteValue which removes a key entry from the registry. Using keys hereinafter understood to include sub keys and registry API system calls routine can store command line utility output in the registry file. Using the same keys an application program can retrieve information previously stored by routine .

Referring now to in one embodiment WINDOWS based redirection routine receives an identifier comprising a key from a calling application block . An illustrative key is HKEY.DYN.DATA CMD UTIL OUTPUT KEY. Routine then begins receiving output from the CMD UTIL utility generally one line at a time as most command line utilities generate output targeted for line oriented standard output devices such as a computer display block . The received line is stored in the registry at a key name that uniquely identifies the line block . For example each received line of output may be stored in the registry key 

In another embodiment the ID parameter includes a storage location identifier. One value of the storage location identifier may direct use of the registry or a similar operating system maintained database while another value of the storage location identifier may direct use of operating system shared memory e.g. volatile random access memory . One example of operating system shared memory is the clipboard memory maintained by the WINDOWS operating system.

Referring now to illustrative computer system in accordance with one embodiment of the invention includes redirection routine e.g. a routine in accordance with and or to redirect output from a command line utility to a specified operating system controlled memory location. As shown routine may be retained in storage device which is coupled to processor via system bus . It will be understood that storage device may represent non volatile memory devices or a combination of volatile and non volatile memory devices. Illustrative non volatile storage devices include but not limited to semiconductor memory devices such as EPROM EEPROM and flash devices magnetic disks fixed floppy and removable other magnetic media such as tape and optical media such as CD ROM disks. It will be further recognized that computer system may incorporate one or more input output is devices such as one or more secondary bus bridge circuits memory controllers accelerated graphics port devices and network interface adapters.

Various changes in the details of the illustrated operational methods as well as in the components of computer system are possible without departing from the scope of the following claims. For instance instructions to perform the acts of may be embodied in a program module implemented as for example a dynamic link library available through a standard interface. In addition the illustrative system of may include additional components such as network interface adapters and the like.

Thus while the invention has been disclosed with respect to a limited number of embodiments numerous modifications and variations will be appreciated by those skilled in the art. It is intended therefore that the following claims cover all such modifications and variations that may fall within the true sprit and scope of the invention.

