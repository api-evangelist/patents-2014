---

title: Systems and methods for using end point auditing in connection with traffic management
abstract: The present invention provides a system and method of managing traffic traversing an intermediary based on a result of end point auditing. An authentication virtual server of an intermediary may determine a result of an end point analysis scan of a client. Responsive to the determination, the traffic management virtual server can obtain the result from the authentication virtual server. Further, the traffic management virtual server may apply the result in one or more traffic management policies to manage network traffic of a connection of the client traversing the intermediary. In some embodiments, the authentication virtual server may receive one or more expressions evaluated by the client. The one or more expressions identifies one or more attributes of the client. The traffic management virtual server can also determine a type of compression or encryption for the connection based on applying the one or more traffic management policies using the result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09264429&OS=09264429&RS=09264429
owner: CITRIX SYSTEMS, INC.
number: 09264429
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20140818
---
This application is a continuation of and claims priority to and the benefit of U.S. Non provisional application Ser. No. 12 409 322 entitled Systems And Methods For Using End Point Auditing In Connection With Traffic Management filed on Mar. 23 2009 which claims the benefit of and priority to U.S. Provisional Application No. 61 161 918 entitled Systems And Methods For Using End Point Auditing In Connection With Traffic Management filed on Mar. 20 2009 all of which are incorporated herein by reference in their entirety for all purposes.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the file or records of the Patent and Trademark Office but otherwise reserves all copyright rights whatsoever.

The present application generally relates to data communication networks. In particular the present appliance relates to systems and methods for selective authentication authorization and auditing in connection with traffic management.

A corporate or enterprise may deploy various services across a network to serve users from many areas. A user may use a client machine to request to access a service such as a web or application server provided by the enterprise. The enterprise in order to improve the access to this service may dynamically deploy multiple servers at various geographical locations in order to improve traffic management and meet the demand of users according to network bandwidth traffic and other factors. Traffic management services may be provided by network servers or appliances in conjunction with traffic management policies. For example the enterprise may use a load balancer to manage or distribute network traffic across these servers. Furthermore in order to determine whether to grant access to a client machine requesting access to the service authentication may be performed against the user operating the client machine. This authentication process may be provided by an authentication server in the network such as a RADIUS server and initiated by the access request. Other authorization authentication and auditing accounting AAA services may also be provided to establish and monitor each client server connection. These AAA services are typically provided by different network modules. Moreover authentication services and traffic management services are typically implemented and or designed separately.

The present solution provides systems and methods of providing authorization authentication and auditing accounting AAA support for traffic management enhancing the level of integration and interoperability between the two sets of services by associating policy features and extending handshaking capabilities. In addition the association between the AAA and traffic management services can be dynamic and or static and may be implemented in a number of configurations.

In one aspect a method for authentication of network traffic managed by a traffic management virtual server includes determining by a traffic management virtual server that the client has not been authenticated from a request of the client to access a server. The request includes a first uniform resource locator URL . Responsive to the request the traffic management virtual server may transmit a response to the client. This response includes the first URL and instructions to redirect to an authentication virtual server. The authentication virtual server may receive a second request from the client. The second request identifies the first URL. The authentication virtual server may then authenticate credentials received from the client and establish an authentication session for the client. This authentication session may identify one or more policies. Further the authentication virtual server may transmit a second response to redirect the client to the traffic management virtual server. The second response identifies the authentication session. The traffic management virtual server may receive a third request from the client. The third request includes an identifier of the authentication session.

In some embodiments the traffic management virtual server can determine that the request does not include the identifier of the authentication session. In one embodiment the traffic management virtual server may transmit the response identifying the first URL via a hidden form. The traffic management virtual server may also transmit the response including a script to trigger a transmission of a POST request to the authentication virtual server. Responsive to transmitting the response the authentication virtual server may receive the second request comprising a POST message to a predetermined URL. In some embodiments in addition to authenticating credentials received from the client the authentication virtual server stores the first URL and domain of the traffic management virtual server with the authentication session.

In some embodiments responsive to receiving the third request the traffic management virtual server sometimes referred to as a vServer may validate the authentication session identified by the identifier. The traffic management vServer may also identify the one or more policies of the authentication session using the identifier. Further the traffic management vServer may apply an authorization policy of the one or more policies of the authentication session to the third request. The traffic management vServer may also apply a traffic management policy of the one or more policies of the authentication session to the third request.

In another aspect a system of providing authentication of network traffic managed by a traffic management virtual server includes a traffic management virtual server. The traffic management virtual server may determine from a request of a client to access a server that the client has not been authenticated. The request can include a first uniform resource locator URL . Responsive to the request traffic management virtual server may transmit a response including the first URL and instructions to the client to redirect to a second virtual server for authentication. The system also includes an authentication virtual server receiving a second request from the client. The second request identifies the first URL. Further the authentication virtual server can authenticate credentials received from the client and establish an authentication session for the client. The authentication session may identify one or more policies. In addition the authentication virtual server may transmit a second response to redirect the client to the traffic management virtual server. The second response identifies the authentication session. The traffic management virtual server may receive a third request from the client. The third request includes an identifier of the authentication session.

In yet another aspect a method for dynamically selecting an authentication virtual server from a plurality of authentication virtual servers includes determining by a traffic management virtual server from a request received from a client to access content of a server that the client has not been authenticated. The traffic management virtual server may identify a policy for selecting one authentication virtual server from a plurality of authentication virtual servers to provide authentication of the client. The traffic management virtual server can select via the policy an authentication virtual server of the plurality of authentication virtual servers to authenticate the client. Responsive to the request the traffic management virtual server may transmit a response to the client. The response includes an instruction to redirect to the selected authentication virtual server.

In one embodiment the traffic management virtual server determines that the request does not include a session cookie. In another embodiment the traffic management virtual server determines that the request does not include an index to a valid authentication session. The traffic management virtual server may identify the policy for selecting the authentication virtual server based on a user of the request. The traffic management virtual server may also identify the policy for selecting the authentication virtual server based on information collected about software installed on the client. Further the traffic management virtual server can identify the policy for selecting the authentication virtual server based on information collected about an operating system on the client.

In one embodiment the traffic management virtual server selects the authentication virtual server as a first type of authentication virtual server from a plurality of types of authentication virtual servers responsive to identification of the policy. In another embodiment the traffic management virtual server selects the authentication virtual server based on a type of authentication of a plurality of types of authentications responsive to the policy. In still another embodiment the traffic management virtual server selects the authentication virtual server based on negotiating with the client a type of authentication of a plurality of types of authentications. In some embodiments the traffic management virtual server receives a second request to access a resource. The second request can include a session cookie identifying an index to an authentication session of the authentication virtual server. The traffic management virtual server may also determine from the authentication session identified by the index one or more traffic management policies to apply to the second request.

In still another aspect a system for dynamically selecting an authentication virtual server from a plurality of authentication virtual servers includes a traffic management virtual server of an appliance. The traffic management virtual server can determine from a request received from a client to access content of a server that the client has not been authenticated. The traffic management virtual server may also identify a policy for selecting an authentication virtual server from a plurality of authentication virtual servers to provide authentication of the client. The system may also include a policy engine that provides to the traffic management virtual server a policy to select an authentication virtual server of the plurality of authentication virtual servers to authenticate the client. The system can also include a network engine of the traffic management virtual server. The network engine may transmit to the client a response to the request. The response includes an instruction to redirect to the selected authentication virtual server.

In still even another aspect a method of managing traffic traversing an intermediary based on a result of end point auditing includes determining by an authentication virtual server of an intermediary a result of an end point analysis scan of a client. The traffic management virtual server can obtain the result from the authentication virtual server. Further the traffic management virtual server may apply the result in one or more traffic management policies to manage network traffic of a connection of the client traversing the intermediary.

In one embodiment the authentication virtual server receives an expression from the client identifying one of the following to be present on the client a version of an operating system a service pack of the operating system a running service a running process and a file. The authentication virtual server may also receive an expression identifying one of the following or a version of the following to be present on the client antivirus software personal firewall software anti spam software and internet security software. In some embodiments the authentication virtual server may receive one or more expressions evaluated by the client. The one or more expressions identify one or more attributes of the client. The authentication virtual server may provide an evaluation of one or more expressions identifying one or more attributes of the client as the result. The authentication virtual server can also provide the result as input to the one or more traffic management policies of the traffic management virtual server.

In some embodiments the traffic management virtual server determines a type of compression for the connection based on applying the one or more traffic management policies using the result. The traffic management virtual server can also determine a type of encryption for the connection based on applying the one or more traffic management policies using the result. Further the traffic management virtual server may determine one or more file type associations for the connection based on applying the one or more traffic management policies using the result. The traffic management virtual server can also determine whether to use or not use a single sign on for the connection based on applying the result via the one or more traffic management policies.

In yet even another aspect an intermediary for managing traffic traversing the intermediary based on a result of end point auditing includes an authentication virtual server. The authentication virtual server can determine a result of an end point analysis scan of a client. The intermediary also includes a traffic management virtual server that obtains the result from the authentication virtual server and applies the result in one or more traffic management policies to manage a connection of the client traversing the intermediary.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments of the present invention below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office . In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliance is depicted. For example a first WAN optimization appliance is shown between networks and and a second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm 

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiments the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif.

In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of UNIX operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element may comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identify specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

In some embodiments the policy engine may provide a configuration mechanism to allow a user to identify specify define or configure policies directing behavior of any other components or functionality of an appliance including without limitation the components described in such as vServers VPN functions Intranet IP functions switching functions DNS functions acceleration functions application firewall functions and monitoring agents . In other embodiments the policy engine may check evaluate implement or otherwise act in response to any configured policies and may also direct the operation of one or more appliance functions in response to a policy.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a vServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP .

In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP . In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a min filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client a collection agent and or monitoring agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol. The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system and or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments the client agent includes a monitoring agent as discussed in conjunction with . The monitoring agent may be any type and form of script such as Visual Basic or Java script. In one embodiment the monitoring agent monitors and measures performance of any portion of the client agent . For example in some embodiments the monitoring agent monitors and measures performance of the acceleration program . In another embodiment the monitoring agent monitors and measures performance of the streaming client . In other embodiments the monitoring agent monitors and measures performance of the collection agent . In still another embodiment the monitoring agent monitors and measures performance of the interceptor . In some embodiments the monitoring agent monitors and measures any resource of the client such as memory CPU and disk.

The monitoring agent may monitor and measure performance of any application of the client. In one embodiment the monitoring agent monitors and measures performance of a browser on the client . In some embodiments the monitoring agent monitors and measures performance of any application delivered via the client agent . In other embodiments the monitoring agent measures and monitors end user response times for an application such as web based or HTTP response times. The monitoring agent may monitor and measure performance of an ICA or RDP client. In another embodiment the monitoring agent measures and monitors metrics for a user session or application session.

In some embodiments monitoring agent measures and monitors an ICA or RDP session. In one embodiment the monitoring agent measures and monitors the performance of the appliance in accelerating delivery of an application and or data to the client .

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

In some embodiments of a traffic management system a client transmits a request to access a service provided by one or more servers . The request may be intercepted and processed by an intermediary such as an appliance that provides traffic management functions. By way of example and in view of various traffic management and load balancing products the appliance can be any of the product embodiments referred to as NetScaler manufactured by Citrix Systems Inc. BigIP device manufactured by F5 Networks Inc. AppDirector appliance manufactured by Radware LTD or appliances manufactured by Cisco Systems Inc. or Nortel Networks Inc. The appliance may have one or more virtual servers A N configured constructed or designed to provide various network communications functionality as described above in connection with .

The appliance may include or communicate with one or more traffic management vServers providing traffic management TM functionality between the client and the one or more servers over one or more networks . In some embodiments the appliance includes or communicates with one or more authentication AuthN vServers that provide authentication services for controlling client access to the service . To provide AAA support for traffic management features traffic management vServers and authentication vServers may communicate to process any aspect of client server access and traffic. Any of the traffic management vServers and authentication vServers may also reside in one or more appliances or servers and communicate over one or more networks . In addition any number of traffic management vServers and authentication vServers can be hierarchically connected or arranged either structurally through their respective host servers or logically to provide traffic management and authentication services. vServer

A traffic management vServer may be any type of virtual server for performing traffic management activities including load balancing LB content switching CS and cache redirection CR . For example cache redirection vServers in some embodiments identifies cacheable and non cacheable messages for redirection to another server that may be a vServer such as a LB vServer a cache server or an origin server. By selectively redirecting traffic some requested content such as frequently accessed content may be retrieved from caches. In one of these embodiments cache redirection identifies cacheable and non cacheable requests for HTTP transactions. Cache redirection may identify cacheable and non cacheable requests for HTTP transactions by parsing the URL and the HTTP header of each request. Content switching on the other hand may include a variety of manipulation techniques for getting data from one or more sources to an endpoint in a way that may optimize use of a network.

A traffic management vServer may include any embodiment of the vServer described above in connection with and provide any type of functionality and feature. The traffic management vServer may operate according to a set of one or more TM policies. Moreover the TM vServer can include or operate with a policy engine such as any embodiment of the policy engine described above in connection with . In some embodiments one or more traffic management features may be combined from one or more TM vServers and one or more sets of TM policies. In one embodiment the one or more features may combine to the extent that they do not conflict with each other. By way of illustration and in one embodiment features supported by a TM vServer and or traffic management policies can include but are not limited to 

A traffic management vServer may include and or operate a network engine . The network engine can be a combination of hardware and software. The network engine may incorporate one or more features from any embodiment of the integrated packet engine described above in connection with . The network engine may include a transceiver for receiving and transmitting network traffic. In some embodiments the network engine may also incorporate a hardware interface from the appliance for example to connect with the network and other network components. In one embodiment the network engine interfaces with the client and or the authentication vServer . The network engine can perform any type or form of data processing such as compression encryption acceleration buffering retrieval translation redirection and protocol processing. In addition the network engine may access and or update a stored session table such as a AAA TM session table. The network engine can include or communicate with a policy engine and access one or more policies. In one embodiment the network engine can provide and or apply the one or more policies accessed. In some embodiments the network engine may provide some or all of the functions of the traffic management vServer

An authentication vServer may be a virtual server performing any combination of authorization authentication and auditing accounting features of an AAA service. In some embodiments an authentication vServer may comprise any embodiment of the vServer described above in connection with and provide any number and type of functionality and feature. Further the authentication vServer can include and or operate with any embodiment of the policy engine described above in connection with . In some embodiments the authentication vServer may include any embodiment and or feature of a virtual private network VPN vServer for authenticating a user accessing a TM vServer and or a service . In one of these embodiments the VPN vServer may be a light weight vServer.

In some embodiments an authentication vServer may reside in or communicate with one or more authentication servers such as Remote Access Remote Authentication Dial In User Service RADIUS servers firewalls access control servers and Authentication Authorization and Auditing Accounting AAA servers clustered or distributed over one or more networks .

The authentication vServer can support flexible policy based rules. The authentication vServer can also provide any of the AAA services accordingly to various access request scenarios. The authentication vServer may operate according to a set of one or more authentication policies . The authentication policies may also include at least one authorization policy and or at least one auditing accounting hereafter generally referred to as auditing policy. In some embodiments authorization may be performed by authorization policies configured on the traffic management vServer . In some of these embodiments the authentication vServer only provides authentication related services. Further the authentication policies may include at least one VPN policy. In some embodiments authentication support for traffic management may be implemented by combining existing VPN features such as VPN policies and data structures with other authentication features. In some embodiments VPN features that may be incorporated into the AAA support for traffic management include but are not limited to 

An authentication vServer may support any number type and form of authentication and or authorization servers such as Active Directory AD Lightweight Directory Access Protocol LDAP RADIUS RSA SecureID Terminal Access Controller Access Control TACACS and TACACS WINDOWS NT LAN Manager NTLM and Smart Card sign on. In some embodiments a plurality of authentication vServers may support two or more different types of authentication. In one of these embodiments an authentication vServer can be selected for the type of authentication e.g. TACACS the authentication vServer supports. A type of authentication available through an authentication vServer may be supported by one or more authentication and or authorization servers. For example two RADIUS servers may support a RADIUS vServer. One or both RADIUS servers may be bound or assigned to the authentication vServer e.g. statically or dynamically based on one or more factors such as geographical proximity network traffic and processing load on each server. In some embodiments one or more authentication servers are associated with or assigned or bound to an authentication vServer based on application of one or more policies. The one or more authentication servers may be structurally or logically arranged in cascading form for example.

Various authentication configurations such as Two Factor Authentication T FA or dual password authentication can be supported and customized based on context dynamically or otherwise. The authentication vServer may also support certificate based authentication. In some embodiments AAA features may be combined from one or more authentication vServers possibly in conjunction with one or more sets of AAA or authentication policies. An authentication vServer may be associated with or assigned or bound to one or more TM vServers in a number of different configurations to be discussed below. An authentication server may be associated with a TM vServer statically through predefined bindings or dynamically based on one or more policies.

Referring now to an embodiment of a system for associating an authentication vServer to one or more TM vServers is depicted. The authentication vServer may be statically bound to one TM vServer or shared by multiple TM vServers including static and or non static bindings.

Referring now to two embodiments of a system for associating an authentication vServer to one or more TM vServers are depicted. In one embodiment a first authentication vServer may be associated to a plurality of TM vServers while a second authentication vServer may be associated to one TM vServer . Such groupings or assignments may be created depending on factors such as traffic management domain size load and geographical considerations such as grouping proximity.

In some embodiments where a plurality of authentication vServers are configured together with a TM vServer a tracking and or verification process may ensure that a client request is processed consistently between the TM vServer and a selected authentication vServer . For example the TM vServer may verify that a redirect message is received from the same authentication vServer selected when the TM vServer received the initial client request.

Referring now to an embodiment of a system for associating one or more authentication vServers to a TM vServers is depicted. In brief overview the system includes one or more policies a plurality of authentication vServers N and a TM vServer . An authentication vServer can be dynamically assigned to a TM vServers based on one or more policies. The one or more policies may be bound to a TM vServer during runtime. Moreover any of the one or more authentication vServers can be assigned to the TM vServer via the one or more policies during runtime to establish an authentication session.

In some embodiments the one or more policies may include an AppFW policy. An AppFW policy operates in conjunction with an AppFW module sometimes referred to as an AppSecure module in the context of an appliance manufactured by Citrix Systems Inc. The AppSecure module may include logic functions or operations for performing any type and form of content rewriting such as URL rewriting. In some embodiments the AppSecure module can perform any type or form of content injection into a request and or response between a client and a server. The AppSecure module may inject scripts into a response to the client such as a JavaScript to perform any type and form of desired functionality. In one embodiment the AppFw policy may be designed and constructed to rewrite URLs of requests and responses to redirect to or otherwise associate with a particular authentication vServer . For example links e.g. URLs in messages received during an authentication session can be modified by a TM vServer in such a way that the links point to a particular authentication vServer

Authentication vServers can be associated to any form or type of TM vServers including any combination and hierarchical arrangement of CR CS and LB vServers. A unit of traffic such as a message or packet may be redirected from a first TM vServer to another TM vServer in the hierarchy. This process may occur over several levels of the hierarchy until a final TM vServer is assigned to manage the traffic. In some embodiments where a plurality of authentication vServers is associated to a hierarchy of TM vServers. The authentication vServer associated with the most specific TM vServer takes precedence in providing AAA functions. In some other embodiments however an authentication vServer associated with a TM vServer at the top of the hierarchy takes precedence. A TM vServer managing the overall traffic responsive to a client request may be assigned to the top of the hierarchy. In still other embodiments the precedence of any authentication vServer may be determined by one or more policies such as a policy associated with the TM vServer at the top of the hierarchy.

Referring now to an embodiment of a system for providing AAA support to traffic management is depicted. In brief overview the system includes a plurality of CR CS and LB TM vServers associated with a plurality of authentication vServers and arranged in a hierarchical configuration. The system may include any combination and embodiment of configurations described above in connection with . In some embodiments the hierarchical configuration supports content aware traffic management and authentication. For example in one embodiment the traffic received at CR vServer can be divided into cacheable and non cacheable traffic. The traffic can include any type and form of messages between one or more clients servers and intermediaries including requests and responses. In some embodiments cacheable traffic is directed to CS vServer and non cacheable traffic to CS vServer . The CS vServer may distribute the non cacheable traffic across LB vServers while CS vServer may distribute the cacheable traffic between LB vServers .

In further details of and by way of illustration of one embodiment of an hierarchical configuration the configuration includes dynamically associated authentication vServers at LB vServers and CS vServer statically associated authentication vServers at LB vServer CS vServer and CR vServer and no authentication vServer associated to LB vServer . For example if LB vServer is selected to perform traffic management the authentication vServer associated to the LB vServer may provide the AAA features. In another embodiment if a TM vServer not associated to any authentication vServer is selected to perform traffic management AAA features can be provided by an authentication vServer associated with a parent of the TM vServer. For example if LB vServer is selected an authentication vServer associated to CS vServer can provide the AAA features. If a TM vServer has a plurality of parents at a same or different level in the hierarchy one of the plurality of parents may provide an associated authentication vServer for example according to authentication vServer availability geographical or logical proximity and or one or more policies.

Referring now to another embodiment of a system for AAA support to traffic management is depicted. In further details illustrates an embodiment in which one authentication vServer may be shared by a plurality of TM vServers. In some embodiments a single authentication vServer is configured for a system so that tracking and or verification processes and or policies that bind the authentication vServer to a TM vServer may not be required. In some embodiments a parent TM vServer may direct all traffic management responsibilities to a child TM vServer so that an authentication vServer is associated. For example CS vServer may direct all traffic management responsibilities to LB vServer rather than LB vServer . In some other embodiments traffic management responsibilities directed to a TM vServer not associated with any authentication vServer may be managed without AAA support or may be redirected to another TM vServer associated with an authentication vServer

Referring now to an embodiment of a system for providing AAA support for traffic management is depicted. In brief overview the system includes one or more TM vServers hereafter generally referred to as a TM vServer associated with one or more authentication vServers hereafter generally referred to as an authentication vServer . These vServers may be arranged in any manner such as in accordance to any embodiment of the configurations described above in connection with . The TM vServer provides traffic management services between a client and one or more servers in a server farm according to one or more traffic management policies . AAA services for any client server traffic may be provided by the authentication vServer according to one or more authentication policies . In addition a collection agent may obtain information from the client for one or both of the TM vServer and the authentication vServer. Although only one client collection agent application server farm and storage are depicted in the embodiment shown in it should be understood that the system may provide multiple ones of any or each of those components.

The collection agent may include any of the embodiments or components of the collection agent described above in connection with and or monitoring agent described above in connection with . The collection agent may be generated from any script or program residing in the appliance storage and or any other machine or storage device in the network . In some embodiments a script and or program is transmitted to the client and generates the collection agent . In some other embodiments the collection agent executes in the appliance or any other machine in the network and remotely polls requests or collects information from the client . The collection agent script and or program may be part of an endpoint auditing EPA system or solution for collecting attributes of an endpoint device such as the client .

EPA may incorporate one or more of endpoint analysis endpoint scanning and endpoint detection. An EPA solution can perform a range of security identity and device integrity checks on a client prior to making an AAA and or traffic management decision. An EPA solution may for example scan a client for file and registry settings and check that no unauthorized illegal or unlicensed executable code including spy ware mal ware and trojans is introduced. An EPA solution when used in an embodiment of the system may also incorporate all or part of any embodiment of the endpoint detection and scanning techniques and or components described above in connection with . One embodiment of an EPA solution is the CITRIX Access Gateway Advanced Endpoint Analysis Software Development Kit Endpoint Analysis SDK . Other embodiments of EPA solutions includes solutions from EPA FACTORY and EXTENTRIX.

In further details of the appliance may operate or execute one both or none of the TM vServer and the authentication vServer. In some embodiments the authentication vServers executes on a first appliance or a first group of appliances and the TM vServers executes on a second appliance or a second group of appliances . In one embodiment the appliance is configured designed and constructed to use a proprietary or custom protocol and or communication model. In another embodiment the appliance may support one or more protocol and or communication models. The appliance can include or communicate with one or more policy engines . In some embodiments the traffic management and or authentication services each operates or executes on one or a combination of the user space and kernel space of one or more appliances . The TM vServer and the authentication vServer may reside in one or more servers and or intermediaries over a network as discussed in connection with . The TM vServer and or the authentication vServer may include or communicate with the one or more policy engines .

The one or more policy engines may each reside on any component of the system . Each of the one or more policy engines can be any embodiment of the policy engine described above in connection with . Further each policy engine can be statically or dynamically bound to one or more policies or sets of policies such as the traffic management policies and the authentication policies . In addition the one or more policy engines may identify one or more policies for the TM vServer and the authentication vServer. In some embodiments the one or more policy engines applies the one or more policies for the TM vServer or the authentication vServer and sends one or more results from the application to the TM vServer or the authentication vServer. In other embodiments the one or more policy engines sends the one or more identified policies to the TM vServer and or the authentication vServer.

The appliance may include a storage device . The storage device may be any embodiment of the storage device described above in connection with the main memory or cache described above in connection with and the memory described above in connection with . The storage device can store any type or form of information including persistent information e.g. client information persistent over an authentication session and temporary information intermediate data generated during runtime . In some embodiments the storage may store one or more URLs such as URL associated with client requests. The storage device may also store a domain address locator index or other identifier of a machine or vServer such as the domain of the TM vServer. The storage device may also store one or more policies such as traffic management policies and authentication policies . Further the storage device may store a AAA TM session table tracking or logging AAA and traffic management transactions.

The traffic management policies the authentication policies and the one or more policy engines hereafter generally referred to as policy or policy engine may include any form and type of policies rules procedures requirements instructions guidelines and recommendations applied and or output in response to a set of inputs and or conditions. Some of the traffic management policies and or the authentication policies may be persistent for example over a connection session or an authentication session indefinitely or over a fixed period of time. Some of the traffic management policies and or the authentication policies may be persistent until an occurrence of an event. Some of the traffic management policies and the authentication policies may be static predefined by an administrator or generated by machine. Some of the traffic management policies and the authentication policies may be dynamic for example adapting or adjusting according to conditions including any combination of conditions of the network traffic patterns server loads access frequency and access history. Moreover some of these policies may be modified and or generated by other policies.

The traffic management policies and the authentication policies may reside in one or more storage devices any where in the network . Such a storage device may be any embodiment of the type of storage described in connection with the main memory or cache described in connection with the memory described in connection with and the storage device described in connection with . In some embodiments the traffic management policies and the authentication policies reside together such as in the appliance and or the storage device . In other embodiments these policies can include groups of policies separated geographically or logically such as policies distributed accordingly to the configurations described above in connection with .

The traffic management policies may include any policy that directly or indirectly affects traffic management activities and or decisions. For example the traffic management policies may include policies applied in conjunction with non traffic management policies e.g. authentication policies to make traffic management decisions. Further traffic management policies can include any policy relating to 1 traffic routing redirection addressing distribution 2 selection or assignment of server server farm gateway client vServer appliance or other network components 3 traffic data encryption compression acceleration buffering and other types of processing 4 traffic overflow support 5 network or network component failure support 6 traffic data collection analysis reporting and 7 management of service level.

The authentication policies may include any policy that directly or indirectly affects AAA activities and or decisions. For example the authentication policies may include policies applied in conjunction with non AAA policies e.g. traffic management policies to make an AAA decision. In some embodiments the authentication policies may include any policy associated with security and access control features such as secure sockets layer SSL virtual private network VPN firewalls encryption watermarking security keys user or client registration contextual access level and EPA. The authentication policies can support all or any subset of the features supported by the authentication vServer and the associated authentication servers .

In some embodiments authorization and or auditing accounting policies are grouped apart from authentication policies either logically partitioned or physically stored in different storage devices. One or more of the authentication authorization and or auditing accounting policies may be applied before after or in conjunction with another of these policies. Any one of these AAA policies may be applied upon certain occurrences satisfaction of conditions or invoked by another policy. Moreover any one of these AAA policies may be associated with or bound to an AAA or authentication vServer. Further any of these AAA policies may be associated with or bound to a TM vServer via the AAA or authentication vServer for example according to any embodiment of the configurations described above in connection with .

An authorization policy associated with or bound to the TM vServer may be applied in response to a request from a client . In some embodiments an authorization policy may be applied after the client has been authenticated. In one of these embodiments authorization policies bound to the TM vServer is applied to associated traffic after the client has been authenticated. An authorization policy may be associated with or bound to a user group vServer or global level. In some embodiments authorization policies bound to certain levels may be supported or preferred. For example in one embodiment support for authorization policies at the TM vServer level may be readily supported since all traffic is directed to the TM vServer. A presence or absence of a first level of authorization policies may also affect support for a second level because of conflicts redundancy synergy or otherwise. For example if policies at a group level such as content filter policies are already supported this may conflict with or be preferred over policies at the vServer level. For example in some embodiments a decision to support group level policies such as a default authorization group for VPN features may be evaluated in view of existing or alternative global authorization policies on various traffic management features.

In some embodiments authentication authorization and auditing features are segregated and or provided by different vServers. For example and in one embodiment authentication policies may be bound to the authentication vServer and applied during authentication session establishment to validate user credentials. After the session is established the session may become disassociated with the authentication policies while authorization policies bound to a given user or group may be introduced. These authorization policies may then be evaluated at runtime to make a determination against each given request. Therefore in some embodiments there may be no overlap between authentication an authorization policies.

An auditing policy may have properties or characteristics substantially similar to an authentication or authorization policy. An auditing policy may be bound to one or more of a TM vServer an authentication session and a traffic management session. Features provided by any form or type of AAA or authentication vServers and servers may be supported by auditing policies. Auditing features supported may include support for the following although not limited by 

Policies can be set at a user group vServer global or other level or set for multiple levels. Certain levels or groups of levels may be supported in various embodiments of the invention. In some embodiments any existing framework for policy levels e.g. of authentication policies may be extended to a different set of policies e.g. traffic management policies . For example in one embodiment new authentication policies for supporting traffic management can leverage on the existing user or group framework for auditing policies by inheriting the associated user or group definitions and databases. Priority amongst policies may be specified in a hierarchical order or flat. In some embodiments there is a flat priority space for policies. The order of policies to be evaluated for certain policies such as traffic management policies may be determined at configuration time. An ordered list of such policies may be maintained after determination and applied across a plurality of authentication sessions for example. Priority ordering of some other policies may be determined at runtime. The policy level in which an policy falls into may determine whether priority ordering is determined at runtime or during configuration.

In further details of the policies and vServers discussed above can operate to process a client request for access to a server . This request is processed over a plurality of transactions involving a plurality of requests and responses between the client the TM vServer and the authentication vServer. The requests and responses can be any type or form of message in any communication protocol proprietary or otherwise. In some embodiments the message may be in HTTP HTTPS or a similar protocol. These messages can include any type or form of information such as information associated with the client a requested resource the appliance and the authentication session .

In some embodiments the client initiates a request that is intercepted or routed to the TM vServer. This request may include a URL . The URL may be a pointer to a resource or an identifier for a server to connect to. In some embodiments the request may not include the URL . The request can also include information such as the address of the intermediary or appliance and information that identifies policies and or authentication servers to use. Further the request can include information indicating whether the client is authenticated and or whether authenticated access is needed. For example in some embodiments the request may include a domain session cookie. If the domain session cookie is valid this can indicate that the client and or user sending the request has been authenticated. Authentication or re authentication may be performed if the domain session cookie is invalid or if the associated authentication session associated with the domain session cookie has expired.

The domain session cookie can provide authentication session information such as an index or identifier to a valid authentication session. The domain session cookie can be used to keep track of state information of authenticated traffic going through the traffic management vServer. In one embodiment if a request received at the traffic management vServer includes a valid domain session cookie an associated authentication session will be refreshed or stay active for another predetermined period of time. In one embodiment a domain session cookie includes one or more of the following information 

In some embodiments the authentication session may be created before authentication. In one of these embodiments exposure of the domain session cookie may cause certain security issues and traffic received by the traffic management vServer may have to be securely protected. In another of these embodiments exposure of the domain session cookie raises no security issues. In other embodiments the authentication session is created upon or after authentication. For example in one of these embodiments the authentication session is created responsive to authentication.

Referring again to and in further details the TM vServer can initiate a response responsive to the request . In some embodiments the response is a 200 OK HTTP response. The response may include a page or form for display at the client . The response may also include any number type and form of fields buttons and other widgets for display and or user interaction. The response may include the URL . In some embodiments where the request does not include any URLs the response can include a URL that may be generated by the TM vServer. This URL may be generated at least in part from information included in the request and or application of one or more traffic management policies . The URL may be included in the response in a hidden form or hidden field. In some embodiments the input type of such a hidden field or form is specified as HIDDEN . A document such as a html document associated with a hidden form or field may not show the hidden form or field nor the value or content of the hidden form or field when displayed in a browser. In some embodiments a user presented with the document may not interact with the hidden form or field. The response may also include a submit on load event handler. The submit on load event handler may include any collection of commands or any form or type of script or program that initiates or triggers a message upon a predetermined event. For example a message to submit the hidden form or field may be triggered when a user clicks on a submit button.

The response may include instructions to redirect the request to an authentication server. The instructions may be generated by the TM vServer generated at least in part from information included in the request and or application of one or more traffic management policies . The instructions can include any type or form of commands such as HTTP commands or any type or form of program code. Further the instructions may be customized to the type or capabilities of the client . In some embodiments the instructions may include or be included in a script . The script may be executed by the client or may be self executing when received at the client . The script may be an event handler. In other embodiments the script may be independent from the instructions and or serve a different purpose. The script may trigger generate or otherwise initiate a second or additional request by the client .

In some embodiments the request is used for passing or redirecting the URL and or other information to a destination such as the authentication vServer. In other embodiments a response may replace the response in passing the URL and or other information to the destination. The request may include a redirect location header. The redirect location header may include any type or form of information such as information for retrieving a login page. In one embodiment the redirect location header can have the following format 

In some embodiments the request is triggered by a user action such as a mouse click on a submit button associated with the response received at the client . In other embodiments the request automatically triggers when the response is received at the client . In one embodiment the script may generate a request as a POST message. In some embodiments a POST message is able to include more content such as a longer URL than a redirection message can include in its HTTP header for example. The POST message may include a URL . The URL of the request may be a pointer to any type or form of a script executable file program or resource. In some embodiments the URL may point to a directory directory tree or location of a script or executable file. In one of these embodiments the URL is a pointer to a CGI executable file. The URL may point to a CGI binary directory or directory tree containing a CGI executable file. The URL may include a string such as cgi tm . This string may indicate that the response is a redirection message from the TM vServer. In some embodiments the URL string such as cgi tm may be hard coded pre determined or dynamically generated. The URL may also be some other type or form of pointer or indicator other than a URL.

The request may include any type or form of information such as information associated with the client any requested resource the appliance the authentication session and the request . The request may also include the URL . In some embodiments the request may include the URL in the body of the request . The request may also include client and or user credentials . In some embodiments the credentials are used for authenticating the client and or user. In various embodiments one or more of the credentials the URL and the URL may be optional or required. One or more of these may reside in the body of the request in a POST request line of the request in a header or other section of the request . In one embodiment the request includes but is not limited by any one or more of the following attributes 

The request may include any type or form of marker or cookie such as an AAA cookie. An AAA cookie may be generated by the TM vServer the client or any other module of system and or in accordance with one or more policies . The AAA cookie may be used to perform any type and form of state and or data tracking during the authentication process. The AAA cookie can include one or more attributes and each attribute may include any type or form of information such as information about the authentication vServer and an associated authentication session . An AAA cookie may be reused during the period of authentication. An AAA cookie may expire when an authentication session expires. In some embodiments the AAA cookie is only valid for the domain of the authentication vServer and may not be available in requests sent to the TM vServer. In one embodiment an AAA cookie includes but is not limited to the following attributes 

In some embodiments an authentication session may be created in response to the request . The authentication vServer may establish an authentication session to authenticate a client and or user when a connection or resource request is made and in some embodiments after an authentication session has expired. The authentication session may represent any type or form of connection channel session collection or unit of transactions. Further the authentication session can support any session layer services and protocols. An authentication session may also be substantially similar to or incorporates features of any existing type of secure authenticated and or encrypted session channel or connection.

In some embodiments an authentication session is a VPN session. An authentication session may be a VPN session if created by a VPN vServer or server. In some embodiments an authentication session is substantially similar to and or incorporates features of a VPN session. As an example in one embodiment authentication may be provided by integrating a light weight VPN framework so that future VPN enhancements such as security assurance markup language SAML and active directory federation services ADFS can be incorporated. In another embodiment the authentication session includes additional fields such as fields to store the domain of an associated TM vServer and the URL .

An authentication session may be created right after an authentication vServer receives a first client request redirected from the TM vServer. In some embodiments this session creation may occur before authentication. A VPN vServer however may create a VPN session after authentication is completed. A reason for the difference may be that the authentication session is created before authentication to store one or both of the domain of the TM vServer and the URL of the initial request made by the client to the TM vServer. In some embodiments protection of the authentication session against Denial of Service DOS attack may be needed or provided for example against a hacker that sends a message to fill up a AAA TM session table denying access to legitimate users.

In some embodiments an authentication session can be refreshed or made active for another specified period of time. In one of these embodiments if a valid domain session cookie is found in the request received at the traffic management vServer the authentication session can stay active for another specified period of time. If not refreshed the authentication session can time out and the client may have to be re authenticated e.g. re login . Session time out may sometimes be referred to as passive time out. An authentication session can terminate either by a user s explicit logout e.g. clicking the logout button link or when the session times out. In some embodiments once a user logs out the authentication session e.g. on the appliance such as a CITIRX Netscaler appliance becomes invalid. The user may have to be re authenticated to enter into a valid authentication session. In one embodiment CGI support for user logout may be supported. For example an executable file that processes the logout may be found in a cgi logout path and linked to a logout button for example. In another embodiment a full session management page may be supported and displayed at the client including logout functions. The full session management page may also be customized. This full session management page may be retrieved from storage and or included in a message to the client .

In some embodiments AAA support for traffic management may increase the authentication login rate and or number of concurrent sessions. For example these may be higher than typical VPN applications. This may also increase memory consumption. To offset such increases an administrator may set smaller session timeout values such as a smaller default timeout value for authentication sessions .

An authentication session may or may not co exist and or interoperate with a traffic management session not shown . In one embodiment a traffic management session starts after an authentication session. In another embodiment a traffic management session initiates and or interacts with one or more authentication sessions. A traffic management session may also interoperate with an authentication session for example for auditing accounting purposes during the traffic flow access AAA feedback and or make or update traffic management decisions. In some embodiments a security model for authentication and or VPN supporting traffic management may have session establishment and authentication token collection occurring over a secure channel SSL but may not require traffic management content to be secured. The authentication and or VPN support can protect a traffic management vServer over traffic passing through it.

A second response to the client may be generated if authentication of the client is successful for example such that the authentication session is available. The second response may identify the authentication session to the client . The authentication vServer may generate the second response and may transmit the response to the client . The second response may include the authentication session identifier or information in the body of the second response in a POST message structure of the second response in a domain session cookie a header or any other section of the second response . In some embodiments an authentication session identifier may be referred as an authentication session index . An authentication index may be used to identify a valid authentication session.

In some embodiments the second response may be a HTTP 302 message or any other type or form of redirection message. In some embodiments the second response may redirect the client request back to the TM vServer after authentication. In one embodiment the second response includes but is not limited to any one or more of the following information and or constructs 

A request may be sent by the client to the TM vServer. In one embodiment the request may be a redirected second response with or without any changes to the second response . In another embodiment the request is substantially similar to the request . For example the request may include information from the request as well as authentication information. The request may identify the authentication session . In some embodiments the request identifies the valid authentication session . The request may include the authentication session identifier or information in the body of the request in a POST message structure of the request or in a header or other section of the request .

Any of the responses and requests subsequent to a preceding message request or response may include any of the information included in any of the preceding message. For example the response may include all or some of the information included in the request . In some embodiments any of the subsequent messages may be a modification or update of any preceding message. For example the response may be generated by putting a wrapper over the request making header or address modifications in the request and or adding new information into the request . Moreover each of these messages may be generated and or modified from another message according to one or more traffic management authentication or other policy.

An interface such as a web interface may be provided by system . The interface may include features from any embodiment of the GUI CLI shell services described above in connection with . An administrator of the traffic management system may leverage on a plurality of commands to setup and configure the systems and methods discussed in the disclosure. Commands may be entered via a command line interface such as the CLI as described above in connection with . By way of illustration and in some embodiments some or all of the following commands may be available for a variety of functions 

Referring now to a flow diagram depicting an embodiment of steps of a method of authentication of network traffic management by a traffic management virtual vServer is shown. In brief overview at step a traffic management vServer receives a request from a client to establish a connection with a server . The request includes a first uniform resource locator URL . At step the traffic management virtual server determines whether the client has been authenticated. At step the traffic management virtual server identifies a policy for selecting one authentication virtual server from a plurality of authentication virtual servers to provide authentication of the client . At step the traffic management virtual server selects an authentication virtual server of the plurality of authentication virtual servers via the policy. At step the traffic management virtual server transmits to the client a response to the request . The response includes the URL and instructions to redirect to an authentication virtual server . At step the response triggers a request from the client to the authentication virtual server . At step the authentication virtual server receives the request from the client . The second request identifies the URL and indicates a redirection from the traffic management virtual server. At step the authentication virtual server establishes an authentication session for the client . The authentication session identifies one or more policies . At step the authentication virtual server stores the URL and domain of the traffic management virtual server with the authentication session . At step the authentication virtual server authenticates credentials received from the client . At step the traffic management virtual server applies one or more policies of an authentication session to the request . At step the authentication virtual server transmits a response to the client to redirect the client to the traffic management virtual server. The response identifies the authentication session . At step the traffic management virtual server receives a request from the client . The request includes an identifier of the authentication session . At step the traffic management virtual server validates the authentication session identified by the identifier . At step the traffic management virtual server applies the one or more policies of the authentication session to the request . At step the traffic management virtual server forwards traffic authorized by the one or more policies from the client to the server .

In further details of step a traffic management vServer receives a request from a client to establish a connection with a server . The request may include a uniform resource locator URL . In some embodiments the request is a request for access to a resource. The request may be an initial request from the client from a plurality of requests and may or may not include the URL . The traffic management vServer may receive the request via another intermediary between the client and a server or server farm such as the appliance . The request may be intercepted and or redirected to the traffic management vServer. The request may also be redirected and or addressed to the appliance or server executing the traffic management vServer. In some embodiments the request may be addressed to the traffic management vServer. The request may be directed to the traffic management vServer according to one or more policies such as policies from the traffic management policies . In addition the request may be channeled routed redirected or delegated from one or more traffic management vServers to the traffic management vServer via any embodiment of the configurations described above in connection with .

In further details of step the traffic management virtual server determines whether the client has been authenticated. The traffic management vServer may determine whether client and or user has been authenticated by applying one or more policies such as policies from the traffic management policies and or authentication policies associated with the traffic management virtual server. In some embodiments the request may include information that indicates whether the client and or user are authenticated. The absence of certain information may also indicate whether the client and or user are authenticated. The traffic management vServer may determine that the request does not include a session cookie such as a domain session cookie. In some embodiments the traffic management vServer may determine that the request does not include an identifier or index to a valid authentication session. In one embodiment the traffic management vServer may determine that the client and or user is not authenticated because the request does not include a domain session cookie and or an index to a valid authentication session. A valid domain session cookie and or an index to a valid authentication session in the request may indicate that the client and or user is authenticated. In one embodiment the traffic management vServer checks that an authentication session either identified in the request or by the session domain cookie is valid or has not expired. In some embodiments the traffic management vServer determines that the client and or user is authenticated if the request includes a valid domain session cookie and the associated authentication session is valid and has not expired.

The traffic management vServer may also request the client for information. The requested information can be used to determine whether the client and or user is authenticated. For example the traffic management vServer may initiate an endpoint analysis scan of the client . In some embodiments the traffic management vServer may transmit a script and or program to the client to collect the information or may execute a script and or program to poll or request the client for the information. In some embodiments the traffic management vServer may transmit and or activate a collection agent in the client to collect the information for the traffic management vServer. The information collected may be any type or form of information described above in connection with the collection agent and . The traffic management vServer may then determine whether the client has been authenticated in response to receiving and or analyzing the collected information.

In some embodiments the traffic management vServer may not be able to determine whether the client has been authenticated. In one of these embodiments the traffic management vServer may treat the client as authenticated. In another of these embodiments the traffic management vServer may treat the client as not authenticated. The traffic management vServer may treat the client as authenticated or not by applying one or more policies such as the traffic management policies and the authentication policies . Depending on whether the client has been authenticated or not the traffic management vServer may perform a same action or different actions. The actions may be determined by applying one or more policies. In one embodiment if the client is authenticated the method may proceed to step for application of one or more authentication policies prior to traffic management operations. In another embodiment if the client is not authenticated the method may proceed to step to initiate authentication.

At step the traffic management virtual server identifies a policy for selecting one authentication virtual server from a plurality of authentication virtual servers to perform authentication on the client . One or more policies for example traffic management policies may be selected and applied in selecting the authentication vServer. In some embodiments only one authentication virtual server may be available or supported and a policy may not be required to identify this authentication virtual server. In one embodiment the request includes information for identifying the policy for selecting the authentication virtual server. In another embodiment the request provides the policy for selecting the authentication virtual server. In yet another embodiment traffic management virtual server identifies the policy based at least in part on the collected information from the client . Further the policy may be identified from the traffic management policies the authentication policies or any other policies. Any policy may be applied through a policy engine such as any embodiment of the policy engine discussed above in connection with .

In one embodiment the traffic management virtual server identifies the policy to select the authentication vServer based on a user associated with the request. In another embodiment the traffic management virtual server identifies the policy to select the authentication vServer based on information collected from the client . The traffic management virtual server can identify the policy based on any type or form of information collected from the client . The traffic management virtual server may initiate EPA to collect information from the client for identifying the policy. The traffic management virtual server may receive information from the client for identifying the policy by sending a collection agent to the client or communicating with a collection agent at the client . In one embodiment the traffic management virtual server identifies the policy for selecting the authentication vServer based on information collected about software installed on the client . In another embodiment the traffic management virtual server identifies the policy for selecting the authentication vServer based on information collected about an operating system on the client .

In some embodiments the traffic management vServer may operate via an associated policy engine for any action relating to a policy. For example a policy engine in traffic management vServer or in communication with the traffic management vServer may identify the policy for selecting the authentication vServer on behalf of the traffic management vServer.

In further details of step the traffic management vServer selects an authentication vServer of the plurality of authentication vServers via the policy to authenticate the client. Responsive to identification of the policy the traffic management vServer selects an authentication vServer. In one embodiment the traffic management vServer selects an authentication vServer from a plurality of vServers associated with the traffic management vServer. In another embodiment the traffic management vServer selects an authentication vServer as a first type of authentication vServer from a plurality of vServers. The traffic management vServer may select the authentication vServer based on a type of authentication supported by the authentication vServer. For example the type of authentication may include Active Directory AD Lightweight Directory Access Protocol LDAP RADIUS and RSA SecureID. The traffic management vServer may also select the authentication vServer based on a feature e.g. SSO and or option supported by a type of authentication provided by the authentication vServer. The authentication vServer may be selected for a particular type of authentication identified by the policy. The traffic management vServer can also select the authentication vServer based on negotiation of any type of requirement and or options with the client . In one embodiment the traffic management vServer selects an authentication vServer based on negotiating with the client a type of authentication. The type of authentication may be negotiated from a plurality of types of authentication. In some embodiments the traffic management vServer selects an authentication vServer based a type of authentication supported by the client.

In some embodiments the traffic management vServer may select the authentication virtual server without applying any policies. For example the traffic management vServer may be statically associated with the authentication vServer as described above in connection with . In one embodiment the request provides information that identifies or selects the authentication vServer. In another embodiment the traffic management vServer uses information collected from the client to identify or select the authentication virtual server. The traffic management vServer selects the one or more authentication vServers to authenticate the client and or the user. In addition one or more authentication servers may be statically or dynamically associated with each selected authentication vServer to authenticate the client and or the user. In some embodiments the dynamic association may be made by applying one or more policies from the authentication policies for example.

In further details of step the traffic management virtual server transmits to the client a response to the request . The traffic management virtual server may transmit the response including the URL and or instructions to the client to redirect to the authentication virtual server. In some embodiments the traffic management vServer transmits a response identifying the URL via a hidden form or field. The traffic management vServer may also transmit the response including a submit on load event handler and or a page or form for display and or user interaction on the client . The traffic management vServer may transmit the response if the client and or the user is not authenticated or if it cannot be determined if the client and or the user is authenticated.

In some embodiments the traffic management vServer converts the request into the response via any type or form of modification transformation and or translation. In other embodiments the traffic management vServer generates the response based at least in part on the contents of the request . The response may also be generated and or modified by a module other than the traffic management vServer such as a component of the appliance . Further the response may be generated and or modified upon application of one or more policies such as policies from the traffic management policies and or the authentication policies . In some embodiments the response includes a script to trigger transmission of a request from the client to the authentication virtual server.

In some embodiments the traffic management vServer may operate or perform any actions via the network engine . The traffic management vServer may direct the network engine on any such actions. For example the network engine may generate and or transmit the response to the client to redirect to the selected authentication vServer. The network engine can generate the response on behalf of the traffic management vServer to include an instruction for the client to redirect to the selected authentication vServer.

At step the response triggers a request from the client to the authentication virtual server responsive to receiving the response . In one embodiment the request is triggered responsive to receiving the response . In another embodiment the request is triggered by a user action such as a click on a submit button displayed on the client . The client may receive one or more commands scripts and or programs included in the response that triggers the request . The client may also have one or more scripts and or programs that triggers a request responsive to receipt of the response . In some embodiments the one or more scripts and or programs either received by the client or available at the client triggers transmission of a POST request to the authentication virtual server. The client and or the one or more scripts and or programs may generate a pointer or URL for inclusion in the request . For example where the request is a POST request the pointer or URL may be included in the POST field of the request . In some embodiments the pointer or URL indicates a path to a CGI executable file. The client and or the one or more scripts and or programs may generate one or more inputs or values to the CGI executable script for inclusion in the request . The request may also include one or more commands scripts and or programs. In some embodiments the client transmits the request to the authentication vServer. The request may also be routed or redirected to the authentication vServer for example via the appliance and or traffic management vServer.

In further details of step the authentication virtual server receives the request from the client the request identifying the URL and indicating a redirection from the traffic management vServer. In some embodiments the authentication vServer receives a request comprising a POST message to a predetermined URL and or the URL . The authentication vServer may extract the pointer or URL from the request in response to receiving the request . The authentication vServer may retrieve or request for an executable file according to the extracted pointer or URL . Further the authentication vServer may execute the executable file with or without inputs or values included in the request . In another embodiment the authentication vServer may execute one or more commands scripts and or programs. The one or more commands scripts and or programs may be included in the request or in the authentication vServer retrieved from storage or generated according to one or more authentication policies . Furthermore the authentication vServer may select the one or more commands scripts programs and or executable file for execution according to one or more authentication policies .

In some embodiments the authentication vServer looks for an AAA cookie in the request . If an AAA cookie is available and valid the authentication vServer may proceed to step or any other authentication steps. If an AAA cookie is not available or invalid the authentication vServer may determine if the request is of a certain type of message and valid. In some embodiments the authentication vServer may determine if the request is a POST message. If the message is valid the authentication vServer may proceed according to step . In some embodiments the message is valid if it is a POST message. In one of these embodiments the message is valid if the authentication vServer determines that the POST message includes a predetermined URL such as cgi tm . Otherwise if the message is determined to be invalid and or not a POST message the authentication vServer may reject the client request. The authentication vServer may reject the client request by sending a message of any type and form. In some embodiments the authentication vServer rejects the client request by a HTTP 403 Forbidden or 503 Service Unavailable message. In various embodiments the authentication vServer may do one or more of generating the message to reject the client request send the message to the client and close the connection to the client .

In further details of step the authentication virtual server establishes an authentication session for the client . The authentication session may identify one or more policies . The authentication session established by the authentication vServer may be a VPN session. In some embodiments the authentication vServer establishes the authentication session prior to authenticating the client and or the user. In other embodiments the authentication vServer establishes the authentication session upon authentication or after authenticating the client and or the user. The authentication vServer may create or establish the authentication session using any type or form of data structure objects or applications processing interfaces APIs . For example the authentication vServer may establish or create a session table such as a AAA TM session table in the storage device . The authentication vServer may also create and or store a session cookie such as a AAA session cookie and or other information associated with the authentication session . In some embodiments the authentication vServer communicates or performs handshaking with a server or other machine to establish the authentication session . The server or other machine may be identified by the traffic management vServer based on the client request. In some other embodiments the authentication vServer establishes the authentication session in preparation to connect to a server or other machine yet to be identified by the traffic management vServer. The authentication vServer may also establish the authentication session in preparation to authenticate the client and or user.

In some embodiments the authentication session may be established by executing the executable file indicated by the pointer or URL . The request may pass information such as inputs and values to the authentication vServer to establish the authentication session . The authentication session may also be established by executing one or more commands scripts and or programs received in the request residing in the authentication vServer retrieved from storage or generated according to one or more authentication policies .

At step the authentication virtual server stores the URL and domain of the traffic management virtual server with the authentication session . The authentication vServer may store one or both of the URL and domain of the traffic management virtual server in association with the authentication session . In addition the authentication vServer can store any type or form of information from the request or otherwise in association with the authentication session . The authentication vServer may store any of these information responsive to receiving the request . The authentication vServer may store any of these information responsive to applying one or more policies such as policies from the authentication policies . Further the authentication vServer may store any of these information by executing the executable file indicated by the pointer or URL . The authentication session may also store any of these information by executing the one or more commands scripts and or programs included in the request residing in the authentication vServer retrieved from the storage device or generated according to one or more authentication policies .

The authentication vServer may store any of this information in association with the client request the client the user and or any other component of the system described above in connection with . Any of this information may be stored in the storage or between one or more storage devices in the network . In some embodiments the authentication session stores some or all of these information in a session table such as a AAA TM session table. The authentication vServer may transmit or communicate any of this information to any of the storage devices for storage.

In further details of step the authentication virtual server authenticates credentials received from the client . The authentication vServer may perform authentication in accordance with a type of authentication e.g. LDAP RADIUS used by or configured by the authentication vServer. The authentication vServer may also communicate with any type or form of server or system to perform the type of authentication. For example and in some embodiments the authentication vServer performs a type of authentication supported by one or more authentication and or authorization servers bound or assigned to the authentication vServer. Further the authentication vServer may perform authentication in accordance with a type of authentication identified by the traffic management vServer and or one or more policies. The authentication vServer may also perform authentication of the client and or the user using any conventional proprietary and or customized authentication techniques and processes. The authentication vServer may perform authentication responsive to receiving the request . The authentication vServer may also perform authentication responsive to applying one or more policies such as policies from the authentication policies . Further the authentication vServer may perform authentication by executing an executable file identified by the pointer or URL . The authentication session may also perform authentication by executing the one or more commands scripts and or programs included in the request in the authentication vServer retrieved from storage or generated according to one or more authentication policies .

The authentication vServer may identify or extract client credentials and or any type or form of information from the request . Further the authentication vServer may request for and or collect any type or form of authentication and or authorization information from the client and or the user. This information may include one or more of a user identification password answer to a challenge question authentication key session table index and session cookie. The information may be collected in communication with one or more of a password manager on the client a session table and or database maintained in the storage device and or a RADIUS server for example and user input. The authentication vServer may initiate an endpoint analysis or scan of the client . In some embodiments the authentication vServer may transmit a script and or program to the client to collect the information or may execute a script and or program to poll or request the client for the information. In one embodiment a collection agent collects the information for the authentication vServer. Any type or form of pre authentication actions may also be performed by the authentication vServer. In some embodiments the pre authentication actions are applied according to one or more authentication policies .

In some embodiments the authentication vServer redirects the client or the client request to a login page or other webpage. The authentication vServer may initiate the redirection using a HTTP 302 message or any other type of message. In some embodiments the authentication vServer generates the redirection message and transmits it to the client . In one embodiment the authentication vServer redirects the client or the client request to the page via a pointer or URL for example vpn index.html . In some embodiments some or all pre authorization actions may be performed by accessing the page. This page may reside in or be provided by the authentication vServer the storage device or any other component of the system described above in connection with . In other embodiments the authentication vServer sends or provides a page or a message to the client to initiate authentication.

The client may send a redirected request to the authentication server responsive to receiving the redirection message. In one embodiment the client sends a redirected request including a GET vpn index.html command. The authentication server may send a response including a page such as login page to the client responsive to the redirected request. The client may enter credentials and or other information into the page and send a login request via the page to the authentication server. The authentication vServer can receive and process the login request. In some embodiments the authentication vServer attempts to authenticate the client and or user either locally or remotely. For example and in one embodiment the authentication vServer performs authentication locally by applying one or more authentication policies and or using authentication information stored in the storage device . In another embodiment the authentication vServer performs authentication by transmitting client and or user information to one or more remote authentication servers . The selection of remote and or local authentication may be based in part on the type or form of authentication configuration and or application of one or more authentication policies .

If the authentication is unsuccessful for example if any of the authentication steps and is unsuccessful the client request may be rejected ignored or authentication re performed with or without additional steps. The authentication vServer may reject the client request by sending the client a message of any type and form. In some embodiments the authentication vServer rejects the client request by a HTTP 403 message. In some embodiments if the authentication is unsuccessful in any of the authentication steps such as steps and the authentication vServer may perform one or more of generating the message to reject the client request sending the message to the client and closing the connection to the client . The authentication vServer can terminate the authentication session if available. Further the authentication vServer may remove the stored domain of the traffic management vServer and or the URL from storage.

If the authentication is successful the authentication vServer may set the domain session cookie for the traffic management session. In some embodiments upon successful authentication the method may proceed to step or .

In further details of step the traffic management virtual server or the authentication virtual server applies one or more policies of an authentication session to the request. In some embodiments this step comes after the traffic management vServer has determined that the client and or user has been authenticated. The step may also proceed upon successful authentication of the client and or user by the authentication vServer. In some embodiments the traffic management vServer transmits or redirects the client request to the authentication vServer. The traffic management vServer or the authentication virtual server can apply one or more policies such as policies from the authentication policies to the client request. The traffic management vServer or the authentication virtual server may apply the one or more policies on a client message such as request or on stored information associated with the client request e.g. from storage device . The traffic management vServer or the authentication virtual server may identify an authentication session associated with the authenticated client and or user. In addition the authentication session and or the one or more policies may be identified by an authentication vServer associated with the traffic management vServer.

At step the authentication virtual server transmits a response to the client to redirect the client to the traffic management virtual server. In some embodiments the authentication vServer generates and transmits a response with the response described above in connection with . The authentication vServer can insert the session cookie for the traffic management session in the response . Moreover the authentication vServer can insert an identifier or information about the authentication session into the response . The authentication vServer can insert an identifier or information about the authentication session into a session cookie e.g. domain session cookie included in the response. The authentication vServer may send the response to identify the authentication session to the client . In some embodiments the authentication vServer transmits the response as a redirection message e.g. HTTP 302 message to the client to redirect the client request to the traffic management vServer. Further the authentication vServer may terminate its connection with the client after sending the response .

In further details of step the traffic management virtual server receives another request from the client . The request may include an identifier or index of the authentication session . The client may generate the request responsive to receiving the response . The client may extract the identifier or information about the authentication session from the response and insert the identifier or information about the authentication session into the request . In some embodiments the client modifies or otherwise processes the response into the request . The client may transmit the request directly to the traffic management vServer or to the appliance for redirection to the traffic management vServer. In some embodiments the client may perform any action such as processing responses and generating requests via one or more applications executing on or on behalf of the client . Performance of any of the actions may be automated and or include user interaction. The requests sent by the client may be any type of request for access to server such as via the use of an application.

In further details of step the traffic management virtual server validates the authentication session identified by the index or identifier . The traffic management vServer may extract or identify the index or information about the authentication session from the request . In some embodiments the traffic management vServer uses the index or information to identify the authentication session . Further the traffic management vServer may validate the authentication session identifier or information. In some embodiments the traffic management vServer identifies one or more policies of the authentication session using the identifier or information. The traffic management vServer may perform the validation by using information stored in the storage device information collected from the client and or applying one or more policies from the associated traffic management policies and or authentication policies . The traffic management vServer may validate that the authentication session is still active and or is authenticated with respect to the client and or user.

In some embodiments the traffic management vServer does not validate the authentication session . Responsive to a failure to validate the authentication session the traffic management or authentication vServer may reject the client request by sending the client a message of any type and form. In some embodiments the traffic management or authentication vServer rejects the client request by a HTTP 403 message. The traffic management or authentication vServer may perform one or more of generating the message to reject the client request sending the message to the client and closing the connection to the client . The traffic management or authentication vServer may terminate the authentication session . Further the traffic management or authentication vServer may remove the stored domain of the traffic management vServer and or the URL from storage . The traffic management or authentication vServer may also update and or remove one or more session tables e.g. from storage device such as the AAA TM session table.

In some embodiments the traffic management vServer may use a validated authentication session to perform EPA and or obtain client and or user information. For example upon authentication the traffic management vServer can use the authentication session to automatically and or securely collect client and or user information. In some embodiments the traffic management vServer uses the authentication session to identify one or more policies . For any communication traversing the traffic management vServer the traffic management vServer may use any information about a client or a session available from the authentication vServer such as any collected end point information. In some embodiments the values of any portion of a policy expression may be obtained or derived from any data values or information available via the authentication vServer such as via an authenticated session. In some embodiments the input to a condition action or rule of a policy may be a value from end point collected information stored by the authentication vServer.

In this manner a traffic management vServer may use end point or authenticate session information to direct traffic for any request. For example during the communication of application traffic traversing the traffic management vServer the traffic management vServer can use end point or authenticated session information to make traffic control decisions on a request basis. For example if the client has the presence or absence of software then the traffic management vServer may make certain traffic management decisions. If the client was authenticated by a certain type of authenticated versus another type of authentication the traffic management vServer may also make certain traffic management decisions

At step the traffic management virtual server applies the one or more policies of the authentication session to the request . The traffic management vServer may apply one or more policies for example to validate the URL to associate the URL with the authentication session or to determine a resource or server for the client . In some embodiments the traffic management vServer may apply an authorization policy of the one or more policies of the authentication session to the request . The traffic management vServer may apply the authorization policy to identify authorized traffic from the authenticated client . In some other embodiments the traffic management vServer may apply a traffic management policy of the one or more policies of the authentication session to the request . The traffic management policy may determine that traffic associated with the authorized client is encrypted and or compressed.

The traffic management vServer may apply one or more policies to validate the URL as a pointer to a resource or server for the client . The traffic management vServer may also apply one or more policies to at least some of subsequent requests from the authenticated client and or user to validate these requests. Once validated by the one or more policies these requests become part of the authorized traffic.

At step the traffic management virtual server forwards traffic authorized by the one or more policies from the client to a server . The server may be identified by the URL by the traffic management vServer or by applying one or more policies . In some embodiments the traffic management vServer forwards requests validated by the one or more policies from the client to the server . In one embodiments the traffic management vServer may forward the authorized traffic or validated requests to a service or server . In another embodiment the traffic management vServer may forward the authorized traffic or validated requests via one or more traffic management sessions. In some embodiments an authentication session may persist until a traffic management session is terminated. In other embodiments a plurality of authentication sessions may be created and or terminated during a traffic management session for example to validate or authorize portions of traffic.

In various embodiments one or more steps may be optional required and or re sequenced without limitation in the methods described.

In one embodiment the method includes a traffic management virtual server determining from a request of a client to access a server that the client has not been authenticated the request comprising a URL step transmitting to the client a response to the request the response comprising the URL and instructions to redirect to an authentication virtual server step receiving by the authentication virtual server a request from the client the second request identifying the URL step authenticating credentials received from the client establishing an authentication session for the client the authentication session identifying one or more policies step transmitting to the client a response to redirect the client to the traffic management virtual server via the URL the response identifying the authentication session step and receiving by the traffic management virtual server a request from the client the request comprising an identifier of the authentication session step .

In another embodiment the method includes determining by a traffic management virtual server from a request received from a client to access content of a server that the client has not been authenticated step identifying a policy for selecting one authentication virtual server from a plurality of authentication virtual servers to provide authentication of the client step selecting via the policy an authentication virtual server of the plurality of authentication virtual servers to authenticate the client step and transmitting to the client a response to the request the response comprising an instruction to redirect to the selected authentication virtual server step .

In still another embodiment the method includes a traffic management virtual server receiving a request from a client to establish a connection with a server step determining that the client has been authenticated step forwarding the request to an authentication vServer to apply one or more policies of an authentication session to the request step the authentication vServer transmitting a response to the client to redirect the client to the traffic management virtual server step the traffic management virtual server receiving a request from the client step validating the authentication session identified by the identifier step applying the one or more policies of the authentication session to the request step and forwarding traffic authorized by the one or more policies from the client to the server identified by the URL via the authentication session step .

Referring now to yet another embodiment of a method of providing AAA support to traffic management is depicted. In further details illustrates an embodiment in which traffic is processed at a traffic management vServer in communication with one or more authentication vServers. The steps of may represent a portion of the steps of method . Briefly a traffic management virtual server receives a request from a client to establish a connection with a server step looks for a session cookie in the request to determine if the client has been authenticated step forwards the request to an authentication vServer to apply authentication policies if the cookie and an authentication session it identifies are both valid step redirecting by the authentication vServer back to the traffic management virtual server step . If the cookie and or a authentication session it identifies are not valid the traffic management vServer identifies an authentication vServer to authenticate the client and redirects the client request to the authentication vServer step The details of each step are described above in connection with .

Referring now to still even another embodiment of a method of providing AAA support to traffic management is depicted. In further details illustrates an embodiment in which a client request is processed at an authentication vServer associated with a traffic management vServer. The steps of may represent a portion of the steps of method . The details of each step are described above in connection with . Briefly an authentication vServer receives the request from the client and looks for an AAA cookie in the request step . If the cookie is available and valid the authentication vServer performs authentication on the client steps . If the authentication succeeds the authentication vServer redirects the client request back to the traffic management virtual server step . If the authentication fails the client request is rejected. On the other hand if the cookie if not available or not valid the authentication vServer determines whether the request is a valid POST message step . If the request is a valid POST message an authentication session is established and authentication performed steps . If the request is a valid POST message the client request is rejected. The details of each step are described above in connection with .

Referring now to a flow diagram depicting an embodiment of steps of a method for using endpoint auditing for traffic management is shown. In brief overview at step an authentication virtual server of an intermediary determines a result of an end point analysis scan of a client . At step the traffic management virtual server obtains the result from the authentication virtual server. At step the traffic management virtual server applies the result in one or more traffic management policies to manage network traffic of a connection of the client traversing the intermediary .

In further details of step an authentication virtual server of an intermediary determines a result of an end point analysis scan of a client . One or more authentication and or authorization servers assigned or bound to the authentication vServer may determine the result of an end point analysis scan on behalf of the authentication vServer. In some embodiments the authentication vServer initiates an endpoint analysis scan of the client responsive to an event. The event may be any type and form of event such as a receipt of a client request or client traffic a change in an attribute of the client a service level change or a network disruption. The event may also be a request from a traffic management vServer or a different AAA vServer such as an auditing vServer. In some other embodiments the authentication vServer initiates an endpoint analysis scan based on a predetermined frequency. The predetermined frequency for initiating the endpoint analysis may operate according to a schedule. The frequency may be predetermined based on past history such as past history of network traffic and or client requests. The frequency may also be predetermined by applying one or more policies and or formulas for example on the past history. Further the frequency may be predetermined based on auditing accounting needs. In some embodiments the frequency is stored and or maintained in a database and or session table. The database and or session table reside in one or more storage devices e.g. storage device in the network .

In some embodiments the authentication vServer may transmit a script and or program to the client to perform the end point analysis scan or may execute a script and or program to poll or request the client for information. In one embodiment a collection agent collects the information for the authentication vServer. The authentication vServer and or the traffic management vServer may send the collection agent to the client to perform the endpoint analysis scan. The endpoint analysis scan may be initiated as part of one or more AAA actions e.g. pre authentication actions by the authentication vServer. This endpoint analysis scan may also be initiated as part of one or more traffic management actions by the traffic management vServer. Further the traffic management vServer or the authentication vServer can initiate the endpoint analysis scan in response to an application of one or more policies .

The authentication vServer receives the results of the endpoint analysis scan which may include any type or form of client information. In some embodiments the results include an expression which may include any type or form of string equation list or command. The authentication vServer may receive one or more expressions evaluated by the client . The one or more expressions received may identify one or more attributes of the client . The results may identify a presence on the client of one or more of a version of an operating system a service pack of the operating system a running service a running process and a file. The results may also identify a presence on the client of one or more of a presence or a version of an antivirus software personal firewall software anti spam software and internet security software.

In some embodiments the collection agent may transmit the results to the authentication vServer and or the traffic management vServer. In some other embodiments the script and or program transmitted to the client may execute on the client and transmit the results to the authentication vServer and or the traffic management vServer. The client the received script or the received program may transmit the collection agent including the collected results back to the authentication vServer. In other embodiments the client transmits the results to the authentication vServer and or the traffic management vServer. The client may send the results to the appliance or intermediary to be redirected to the authentication vServer and or the traffic management vServer. The results may be encrypted compressed formatted and or otherwise processed according to a communications protocol by the client or otherwise before sending out from the client . These results may be processed upon receipt at the authentication vServer and or the traffic management vServer to extract any required information. Further the authentication vServer may process and or evaluate these results according to one or more AAA or authentication policies .

In further details of step the traffic management virtual server obtains the result from the authentication virtual server. The traffic management vServer may receive the result according to another predetermined frequency. This frequency may be substantially similar to or include any embodiments of the frequency described above in connection with step . In some embodiments the frequency is predetermined by the authentication vServer and or one or more authentication policies. In some embodiments the authentication vServer forwards all or part of the results to the traffic management vServer. The authentication vServer may process all or part of the results before forwarding to the traffic management vServer. In one embodiment the authentication vServer provides an evaluation of one or more expressions identifying one or more attributes of the client to the traffic management vServer. The authentication vServer may forward all or part of the results according to one or more AAA or authentication policies . The authentication vServer may also provide all or part of the results as input to the one or more traffic management policies of the traffic management vServer.

In further details of step the traffic management virtual server applies the result in one or more traffic management policies to manage network traffic of a connection of the client traversing the intermediary . The traffic management vServer may apply the result according to yet another predetermined frequency. This frequency may be substantially similar to or include any embodiments of the frequency described above in connection with step . The traffic management vServer may apply all or part of the results from the authentication vServer to the one or more traffic management policies . The traffic management vServer may further process all or part of the results from the authentication vServer prior to applying the policies .

The traffic management vServer may determine a type of compression for the connection based on applying the one or more traffic management policies using the results. Moreover the traffic management vServer may determine a type of encryption for the connection based on applying the one or more traffic management policies using the results. The traffic management vServer may also determine one or more file type associations for the connection based on applying the one or more traffic management policies using the results. Further the traffic management vServer may determine whether or not to use a single sign on for the connection based on applying the results via one or more traffic management policies. Based on the determination the traffic management vServer can make one or more traffic management and or AAA decisions to manage the traffic from the client traversing the intermediary .

In some embodiments method may be applied in conjunction with method of . For example embodiments of method may be implemented as part of steps or of method .

It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. In addition the systems and methods described above may be provided as one or more computer readable programs or executable instructions embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk a hard disk a CD ROM a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language such as LISP PERL C C C PROLOG or in any byte code language such as JAVA. The software programs or executable instructions may be stored on or in one or more articles of manufacture as object code.

While the invention has been particularly shown and described with reference to specific embodiments it should be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention as defined by the following claims.

