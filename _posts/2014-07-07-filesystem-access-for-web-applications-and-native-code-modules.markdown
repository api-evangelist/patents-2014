---

title: Filesystem access for web applications and native code modules
abstract: One embodiment provides a system that facilitates the execution of a web application. During operation, the system allocates a storage space on one or more storage devices for use by the web application. Next, the system creates, for the web application, a private filesystem comprising a private root directory within the storage space. Finally, the system enables access to the private filesystem for the web application through the private root directory in a manner that does not allow access to a host filesystem associated with the one or more storage devices from the web application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424435&OS=09424435&RS=09424435
owner: Google Inc.
number: 09424435
owner_city: Mountain View
owner_country: US
publication_date: 20140707
---
This application is a continuation of U.S. patent application Ser. No. 13 916 427 filed 12 Jun. 2013 which is a continuation of U.S. patent application Ser. No. 12 427 208 filed 21 Mar. 2009 titled Filesystem Access For Web Applications and Native Code Modules which claims priority under 35 U.S.C. 119 to U.S. Provisional Application No. 61 113 062 entitled Client Side System for Web Applications by Eric Uhrhane and Matthew Papakipos filed on 10 Nov. 2008. The entire contents of the prior applications are hereby incorporated by reference. The subject matter of this application is also related to the subject matter in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr and Bennet S. Yee entitled Method for Validating an Untrusted Native Code Module having Ser. No. 12 117 634 and filing date 8 May 2008. The subject matter of this application is additionally related to the subject matter in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr Bennet S. Yee and Gregory Dardyk entitled Method for Safely Executing an Untrusted Native Code Module on a Computing Device having Ser. No. 12 117 650 and filing date 8 May 2008.

The present embodiments relate to techniques for executing web applications. More specifically the present embodiments relate to a method and system for providing filesystem access to web applications and native code modules.

Computer systems may include a number of native applications that perform a variety of tasks for users. Such native applications may include word processors email clients media players image or signal processing modules and or web browsers. To run efficiently native applications are often written in a combination of general purpose programming languages such as C or C and low level languages such as assembly language. Furthermore native applications may have access to system resources such as graphics hardware sound cards filesystems and or network resources. Consequently native applications may provide computationally intensive and or resource specific features to users of computer systems on which the native applications are installed. However the low level nature of native applications may restrict the applications to specific platforms incur a lengthy installation process and or pose a security risk.

On the other hand web applications which have become more prevalent in recent years are typically written in scripting languages that are more secure and require no installation. However web applications may lack the performance capabilities of native applications. In particular a web application may run one or two orders of magnitude more slowly than a native application. Furthermore web applications are often unable to access low level system resources that are available to native applications. As a result web applications may be unable to implement certain features that are available in native applications.

Hence what is needed is a technique for enabling native performance and functionality in web applications without compromising the security of the web applications.

One embodiment provides a system that facilitates the execution of a web application. During operation the system allocates a storage space on one or more storage devices for use by the web application. Next the system creates for the web application a private filesystem comprising a private root directory within the storage space. Finally the system enables access to the private filesystem for the web application through the private root directory in a manner that does not allow access to a host filesystem associated with the one or more storage devices from the web application.

In some embodiments the system also restricts access to the private filesystem from a source which is external to the web application.

In some embodiments restricting access to the private filesystem from the source involves preventing access to the private filesystem outside of a domain associated with the web application and managing access to the private filesystem from one or more native code modules within the domain.

In some embodiments managing access to the private filesystem from the one or more native code modules involves enforcing a set of access permissions to the private filesystem for each of the native code modules.

In some embodiments one or more of the access permissions are passed between the native code modules.

In some embodiments enforcing the size limit for the private filesystem involves periodically monitoring a size of the storage space during access to the private filesystem by the web application and performing a remedial action if the size of the storage space exceeds the size limit.

In some embodiments performing the remedial action involves at least one of updating the size limit restricting write privileges to the private filesystem by the web application notifying a user of the web application and terminating the web application.

In some embodiments the private filesystem is implemented using a relational database associated with the web application.

The following description is presented to enable any person skilled in the art to make and use the embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus the present embodiments are not limited to the embodiments shown but are to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore methods and processes described herein can be included in hardware modules or apparatus. These modules or apparatus may include but are not limited to an application specific integrated circuit ASIC chip a field programmable gate array FPGA a dedicated or shared processor that executes a particular software module or a piece of code at a particular time and or other programmable logic devices now known or later developed. When the hardware modules or apparatus are activated they perform the methods and processes included within them.

Embodiments provide a method and system for facilitating the execution of a web application. The web application may be loaded in a web browser and executed on a computing system such as a personal computer PC a mobile phone a personal digital assistant PDA a graphing calculator a portable media player a global positioning system GPS receiver and or another electronic computing device. The web application may be obtained by the computing system from a server using a network connection with the server. For example the web application may be downloaded over the Internet from a website.

More specifically embodiments provide a method and system for providing filesystem services to the web application. The filesystem services may be provided by allocating a storage space on one or more storage devices for use by the web application and creating a private filesystem within the storage space. Access to the private filesystem for the web application may then be enabled through a private root directory in the private filesystem without allowing access to a host filesystem associated with the one or more storage devices from the web application. In addition a size limit may be enforced for the private filesystem while access to the private filesystem may be restricted for sources that are external to the web application.

Computing system may correspond to an electronic device that provides one or more services or functions to a user. For example computing system may operate as a mobile phone personal computer PC global positioning system GPS receiver portable media player personal digital assistant PDA and or graphing calculator. In addition computing system may include an operating system not shown that coordinates the use of hardware and software resources on computing system as well as one or more applications e.g. web browser web application that perform specialized tasks for the user. For example computing system may include applications such as an email client address book document editor web browser and or media player. To perform tasks for the user applications may obtain the use of hardware resources e.g. processor memory I O components network interface card graphics processing unit GPU storage devices etc. on computing system from the operating system as well as interact with the user through a hardware and or software framework provided by the operating system as described below.

In one or more embodiments computing system includes functionality to obtain and or execute applications using a network connection. In particular computing system may obtain web application from one or more servers e.g. server server x using a network connection with the server s and load web application in web browser . For example web application may be downloaded from an application server over the Internet by web browser .

Once loaded web application may provide features and user interactivity comparable to that of native applications on computing system . For example web application may function as an email client document editor media player computer aided design CAD system and or computer game. Web application may also include dynamic user interface elements such as menus buttons windows sub windows icons animations and or other graphical objects that emulate analogous user interface elements in native applications. In other words web application may correspond to a rich Internet application RIA .

Furthermore web application may execute on computing system regardless of the type of platform e.g. operating system drivers etc. associated with computing system . Though platform independent applications such as web application may be more portable and secure than native applications such cross platform applications may lack certain performance capabilities of native applications.

More specifically non native applications such as web application may be written using scripting languages that are interpreted rather than compiled such as JavaScript JavaScriptTM is a registered trademark of Sun Microsystems Inc. . The interpreted nature of web application and or other non native applications may result in significantly slower execution times for the non native applications than those of compiled native applications. Non native applications may also be unable to utilize low level libraries and or application programming interfaces API that are available for use by native applications. Consequently non native applications may provide limited functionality in certain tasks.

To enable native performance for web applications computing system may obtain and execute a native code module within plugin . Like web application native code module may be obtained from one or more servers e.g. server server x by web browser . For example web application may provide a hyperlink to native code module on the Internet. Web browser may then download native code module from the Uniform Resource Locator URL specified in the hyperlink. Alternatively native code module may be specified by the user or by an external source such as another web application and or a native application.

More specifically native code module may correspond to a software module containing native code that runs directly on hardware provided by computing system such as a CPU. As a result native code module may be used to perform tasks that require substantial access to CPU resources on computing system . For example native code module may be used by web application to provide computationally intensive features associated with physics simulation signal processing artificial intelligence modeling and or analysis.

In one or more embodiments plugin includes a variety of mechanisms to ensure the safe execution of native code module . In particular native code module may be validated by a validator provided by plugin prior to execution. Native code module validation is described in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr and Bennet S. Yee entitled Method for Validating an Untrusted Native Code Module having Ser. No. 12 117 634 and filing date 8 May 2008 which is incorporated herein by reference.

Once native code module is validated native code module may be loaded into a secure runtime environment provided by plugin . Native code execution in a secure runtime environment is described in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr Bennet S. Yee and Gregory Dardyk entitled Method for Safely Executing an Untrusted Native Code Module on a Computing Device having Ser. No. 12 117 650 and filing date 8 May 2008 which is incorporated herein by reference. Secure runtime environment may also be provided by a web browser extension to web browser and or secure runtime environment may be built into web browser .

Furthermore because native code module may include binary code that runs directly on hardware native code module may be platform independent with respect to the operating system of computing system web browser and or other software components on computing system . As described in the above referenced applications plugin and or native code module may also include mechanisms for executing on a variety of instruction set architectures including the use of fat binaries and binary translators.

Those skilled in the art will appreciate that security mechanisms used to execute web application and native code module may preclude web application and native code module from accessing system services on computing system . In particular the restricted execution of web application and native code module may prohibit access to filesystem services from web application or native code module . For example security restrictions may prevent web application and native code module from accessing host filesystem on computing system . As a result web application and or native code module may have trouble storing reading from writing to and transferring large amounts of binary data. For example web application and or native code module may have limited capacity in storing and handling files such as large images media e.g. audio video etc. and or game assets.

In one or more embodiments filesystem services for web application and native code module are enabled by filesystem manager . Filesystem manager may be implemented as a plugin to web browser a web browser extension to web browser and or as a part of web browser . As shown in filesystem manager may create a private filesystem for use by web application and native code module . Private filesystem may reside on one or more storage devices within computing system or attached to computing system such as one or more hard disk drives optical disks volatile memory e.g. random access memory RAM and or flash memory devices. Moreover as described below filesystem manager may facilitate the secure execution of web application and native code module by isolating private filesystem from host filesystem and restricting access to private filesystem from outside the domain of web application .

To provide filesystem services to web application filesystem manager may allocate a storage space on one or more storage devices for use by web application . Storage devices may include storage devices within computing system attached to computing system and or accessible from computing system through a network connection. For example some of the storage space may be allocated in a hard disk drive on a server e.g. server server x . Filesystem manager may then create private filesystem within the storage space. Filesystem manager may also enable access to private filesystem from web application through a private root directory in private filesystem . For example web application may execute filesystem commands such as open seek close read write truncate mkdir unlink rmdir opendir readdir closedir mv and mmap using the private root directory and a plugin interface with filesystem manager .

Furthermore filesystem manager may enable access to private filesystem for web application without allowing access to host filesystem from web application . In other words filesystem manager may implement filesystem security by preventing web application from accessing files and directories outside of private filesystem including files and directories accessible to native applications in host filesystem and or private filesystems for other web applications in computing system .

Filesystem manager may also restrict access to private filesystem from sources which are external to web application . More specifically filesystem manager may prevent access to private filesystem outside of a domain associated with web application . For example filesystem manager may define the domain of web application as a set of webpages and or modules e.g. native code module used by web application . Webpages modules and or applications outside of the domain may thus be unable to access private filesystem and may instead have access to their own private filesystems as provided by filesystem manager and or other filesystem mechanisms on computing system .

Furthermore filesystem manager may manage access to private filesystem from native code module and or other modules e.g. native code modules plugins etc. within the domain of web application . In particular module based access to private filesystem may be managed by enforcing a set of access permissions to private filesystem for each of the modules. For example filesystem manager may separate private filesystem into three regions with each region accessible to only one of three modules within the domain of web application . To separate private filesystem into regions filesystem manager may define each region using a separate directory within the private root directory. To enforce access permissions to the regions by the modules filesystem manager may implement chroot functionality by setting each of the directories as the apparent root directory for one of the modules. As a result each module may only have access to the apparent root directory assigned to the module within private filesystem as well as any subdirectories and files within the apparent root directory.

Filesystem manager may further allow access permissions to be passed between modules. For example one module may grant access to a file and or directory from another module by passing a file descriptor for the file and or directory to the other module. Alternatively filesystem manager may allow each module to explicitly specify access permissions to files and directories within the module s apparent root directory from other modules. For example a module may enable read and or write access to a directory for one or more other modules through filesystem manager . Apparent root directories directories files and permissions in private filesystem are described in further detail below with respect to .

Filesystem manager may also provide quota management for private filesystem . In other words filesystem manager may enforce a size limit for private filesystem . The size limit may be requested by web application set by the user and or automatically set by filesystem manager based on a default size limit value for web applications. Furthermore the size limit may be enforced by periodically monitoring a size of the storage space occupied by private filesystem during access to private filesystem by web application . If the size of the storage space exceeds the size limit a remedial action may be performed by filesystem manager . For example filesystem manager may update e.g. increase the size limit restrict write privileges to private filesystem by web application notify a user of web application and or terminate web application and remove data stored in private filesystem . In other words filesystem manager may utilize an eventual correctness model in enforcing the size limit for private filesystem to save overhead associated with checking or altering the size of the storage space.

However filesystem manager may also implement a real time quota management system that continually monitors the size of the storage space and or validates relevant filesystem calls e.g. quota allocation calls for strict conformity to the size limit if such strict conformity is warranted. For example real time quota management may be enabled for private filesystem if a security policy for web application and or private filesystem requires strict conformity to a size limit for private filesystem .

In one or more embodiments filesystem manager includes a coordinating mechanism for managing concurrent access to private filesystem by multiple modules e.g. web application native code module other modules etc. executing in separate processes. The coordinating mechanism may also execute as a separate process and perform tasks such as serialization of filesystem commands from multiple processes file locking quota allocation and atomic file creation. In other words the coordinating mechanism may manage interaction between the modules and private filesystem if such interaction affects or is affected by the actions of other modules. For example a module wishing to write to a new file may first obtain space for the new file from the coordinating mechanism and then stream the data directly to private filesystem . Furthermore communication between the modules and the coordinating mechanism may be facilitated by an inter module communication IMC runtime that establishes IMC channels between the modules and the coordinating mechanism.

Those skilled in the art will appreciate that private filesystem may be created by filesystem manager in a number of ways. For example private filesystem may be created as an isolated subset of host filesystem .

Filesystem manager may thus provide filesystem commands to web application and associated modules as translated guarded pass through versions of analogous filesystem commands used to access host filesystem . On the other hand filesystem manager may implement private filesystem using a relational database associated with web application . For example filesystem manager may implement filesystem commands on top of relational database queries for accessing a relational database on computing system that provides local relational data storage for web application .

Private root directory may serve as the root of the tree structure. As a result apparent root directories directories and files may all be located underneath private root directory . Furthermore private root directory may serve as the access point to the private filesystem for the web application. In other words the web application may make calls into the private filesystem by specifying a path from private root directory . For example the web application may open file by specifying a path such as mydirectory file.txt as a parameter to an open filesystem command provided by the filesystem manager. Within the path private root directory may be represented by the first forward slash e.g. directory may be specified using mydirectory and file may be specified using fie218.txt. The web application may then read from or write to file using a file descriptor returned by the open command.

As mentioned previously the private filesystem may also be accessible to modules within the domain of the web application. Each module may further be associated with a set of access permissions to the private filesystem. In particular each module may only have permission to access a particular region of the private filesystem as specified by the web application. In addition the region accessible to a particular module may be represented by the apparent root directory assigned to the module. For example apparent root directory may be assigned to a native code module associated with the web application. The native code module may access directories and file with apparent root directory as the topmost directory e.g. in paths to directories and file . Furthermore the native code module may be unable to access directories and files outside of apparent root directory . As a result the use of multiple apparent root directories in the private filesystem may allow for functionality similar to the chroot operation for modules associated with the web application.

Similarly access permissions for one module may be contained entirely within the accessible region for another module. For example apparent root directory may be assigned to a plugin associated with the web application. The plugin may thus have access to directory apparent root directory directory and file . The plugin may also create and remove directories and files within apparent root directory through filesystem commands provided by the filesystem manager. However apparent root directory may be assigned to a native code module associated with the web application. As a result the native code module may only have access to directories and files at or below apparent root directory such as directory and file . Furthermore changes to directory and or apparent root directory may affect the native code module s access to the private filesystem. For example the native code module may be unable to access the private filesystem if directory or apparent root directory were removed from the private filesystem.

Access permissions for the modules may also be updated by passing permissions between the modules. As discussed above a module may share access to a file or directory by passing the file descriptor for the file or directory to another module. For example a native code module to which apparent root directory is assigned may share file by opening file and passing the returned file descriptor to a native code module to which apparent root directory is assigned. Changes to access permissions may also be explicitly made by the web application and or modules. For example the web application may change the apparent root directory of a module to allow the module to access a different region of the private filesystem.

Modules may also have access to multiple apparent root directories within the private filesystem. For example a module may have simultaneous access to two apparent root directories through changes to the module s access permissions as specified by the web application and or other modules. Upon gaining access to both root directories the module may be required to distinguish between apparent root directory and apparent root directory when specifying paths within the private filesystem. For example the module may use different names for apparent root directory and apparent root directory instead of the forward slash e.g. for one apparent root directory.

Initially a storage space is allocated for use by the web application operation . The storage space may be allocated on one or more storage devices such as hard disk drives optical disks and or flash memory. The storage devices may additionally be distributed across a number of computing systems. For example one or more storage devices may be accessed as a network drive via a network connection.

Next a private filesystem is created within the storage space operation for the web application. The private filesystem may include a private root directory that is accessible from the web application. In other words access to the private file system for the web application may be enabled through the private root directory operation . Furthermore because the web application may only be permitted to make filesystem calls through the private root directory the web application may be unable to access a host filesystem associated with the storage device s on which the private filesystem resides. Such isolation of the private filesystem from the host filesystem may mitigate the occurrence of security exploits for both the host filesystem and the private filesystem.

Filesystem based security may additionally be implemented by preventing access to the filesystem outside of a domain associated with the web application operation . As described above the domain of the web application may correspond to a set of webpages and modules used by the web application. For example the domain of the web application may be defined using a tuple that includes a host a port and a protocol associated with the web application. Webpages included in the host port and protocol as well as modules loaded by the webpages may thus be within the domain of the web application.

Access to the private filesystem from one or more native code modules within the domain of the web application may also be managed operation . In particular module based access to the private filesystem may be managed by enforcing access permissions to the private filesystem for each of the native code modules. The access permissions may be specified by providing functionality similar to chroot and assigning each native code module an apparent root directory within the private filesystem. The native code module may thus be allowed to access all subdirectories and files within the corresponding apparent root directory but may not have access to other areas of the private filesystem. However access permissions may be passed between the native code modules by for example passing file descriptors adding or removing apparent root directories for a native code module and or explicitly changing access permissions for a specific directory or file.

Use of the private filesystem by the web application may also be subject to a size limit for the private filesystem. In other words quota management may be provided for the private filesystem to ensure that the size limit for the private filesystem is not exceeded operation . The size limit may be requested by the web application set by a user and or based on a default size limit for web applications. To enforce the size limit the size of the storage space may periodically be monitored during access to the private filesystem by the web application. If the size limit is not exceeded no action is required.

However if the size of the storage space exceeds the size limit a remedial action is performed to enforce the size limit operation . The remedial action may involve updating the size limit restricting write privileges to the private filesystem by the web application and associated native code modules notifying a user of the web application and or terminating the web application. For example if the size limit is exceeded a user of the web application may be notified and prompted for the remedial action to be taken e.g. terminating the web application adjusting the size limit on a temporary or permanent basis pausing the web application etc. . As a result the size limit may be enforced based on an eventual correctness model. Alternatively real time quota management may be implemented by continuously monitoring the size of the storage space for conformity to the size limit by checking the size of the storage space before and after relevant filesystem calls e.g. quota allocation calls and or by validating the arguments of relevant filesystem calls.

Filesystem services may continue to be provided to the web application operation . For example the private filesystem may be available to the web application as long as the private filesystem stays within the size limit and security constraints associated with the private filesystem are met. The private filesystem may also persist between invocations of the web application. If filesystem services are to be provided access to the private filesystem is enabled for the web application operation while access to the private filesystem is restricted from sources that are external to the web application operations . The size limit for the private filesystem may also be enforced operations during use of the private filesystem by the web application. Filesystem services may continue to be provided until the private filesystem is no longer used by the web application and or the web application has violated the size limit or a security constraint associated with the private filesystem. For example access to the private filesystem from the web application may be terminated if the web application attempts to undermine the host filesystem operating system and or underlying hardware using spurious filesystem calls to the private filesystem.

The foregoing descriptions of various embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the present embodiments to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present embodiments.

