---

title: Centralized and distributed notification handling system for software applications
abstract: The present disclosure describes methods, systems, and computer program products for handling notifications. One computer-implemented method includes selecting an object type for a notification object; customizing a common attribute of the notification object, wherein the common attribute is defined in a common notification object; determining whether the notification object includes additional attributes to be customized; in response to a determination that the notification object includes additional attributes to be customized, customizing a type attribute of the notification object, wherein the type attribute is defined in a type notification object that has the selected object type; and storing the notification object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09389934&OS=09389934&RS=09389934
owner: SAP SE
number: 09389934
owner_city: Walldorf
owner_country: DE
publication_date: 20141218
---
In software applications e.g. large enterprise software applications a system may send a notification to users to update information and events. A notification can be for example an email notification a downtime notification and or a special event notification. Depending on the type of the notification the notification may be either general or specific. Notifications in software applications can generally access user interface UI backend control and or data storage.

The present disclosure relates to computer implemented methods computer readable media and computer systems for a notification handling system. One computer implemented method for creating a notification object for software applications includes selecting an object type for the notification object customizing a common attribute of the notification object wherein the common attribute is defined in a common notification object determining whether the notification object includes additional attributes to be customized in response to a determination that the notification object includes additional attributes to be customized customizing a type attribute of the notification object wherein the type attribute is defined in a type notification object that has the selected object type and storing the notification object.

Other implementations of this aspect include corresponding computer systems apparatuses and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of software firmware or hardware installed on the system that in operation causes the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other implementations can each optionally include one or more of the following features alone or in combination 

A first aspect combinable with the general implementation further comprising determining whether the object type has a subtype and in response to a determination that the object type has a subtype customizing a subtype attribute of the notification object wherein the subtype attribute is defined in a subtype notification object that has the subtype.

A second aspect combinable with any of the previous aspects further comprising in response to a determination that the notification object does not include additional attributes to be customized storing the notification object.

A third aspect combinable with any of the previous aspects wherein the notification object is used to indicate at least one of an email notification a downtime notification or a special event notification.

A fourth aspect combinable with any of the previous aspects wherein the notification object has the same notification ID as the common notification object.

A fifth aspect combinable with any of the previous aspects wherein the notification object is implemented in a layered architecture.

A sixth aspect combinable with any of the previous aspects wherein the layered architecture comprises at least one of a model layer a controller layer and a User Interface UI layer.

The subject matter described in this specification can be implemented in particular implementations so as to realize one or more of the following advantages. First the notification handling system approach described in this specification can provide a notification handling framework that is efficient flexible and expandable. This approach reduces waste of data storage. Second the described approach can also reduce duplicate implementation in multiple architectural layers and therefore sub optimally organized code. Third the described approach can result in a consistent look and feel for user interfaces of notifications. Fourth this approach can help to maintain the programming overhead in a managed way. Other advantages will be apparent to those of ordinary skill in the art.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will be apparent from the description the drawings and or the claims.

The following detailed description is presented to enable any person skilled in the art to make use and or practice the disclosed subject matter and is provided in the context of one or more particular implementations. Various modifications to the disclosed implementations will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other implementations and applications without departing from the scope of the disclosure. Thus the present disclosure is not intended to be limited to the described and or illustrated implementations but is to be accorded the widest scope consistent with the principles and features disclosed herein.

A large enterprise application may need more than one notification to serve different purposes of notifications. The notifications can include for example email notifications downtime notifications and or special event notifications. In some cases some of the notifications can share one or more properties. In some cases some of the notifications can have different properties. If a notification system generates every notification separately it may cause duplicate content of data storage and duplicate code implantation in multiple architectural layers. This approach may also create out of sync code out of sync code behavior and or an inconsistent look and feel in different user interface UI areas. If properties of the notifications are generated and stored together without categorization data storage waste suboptimal organized code and or a less flexible and expandable notification system can result.

In some implementations a combination of centralized and distributed approaches can be used to create a notification framework. The framework can define a common notification object that includes common attributes of one or more notifications. The framework can also define individual notifications for individual notification purposes. The framework can further extend to more categorized notification handling by defining subtype notification objects that belong to one or more type notification objects. In some implementations each notification object can have a notification ID. In some cases the common notification object the type notification objects and the subtype notification objects can be linked by notification type subtypes and notification IDs.

In the UI layer of the framework the input UI of a notification can be the combination of common UI type subtypes UI and or individual UI types and or subtypes. In some cases the type and or subtypes can be visible. Alternatively or in combination the type and or subtypes can be invisible. In some cases the UI of a notification can be customizable. For example the common rendering UI can render common information of various notifications and the individual UI can render an individual notification UI.

The user represents any person application set of applications software software modules hardware or combination thereof that can use the notification handling system to generate or to receive notifications. In some cases the user can use a browser and enter the address of the server to access the notification handling system .

The server represents any application set of applications software software modules hardware or combination of software and hardware that can be used to generate and handle notifications. As illustrated the server includes a notification UI layer a server side controller layer and a notification modeling layer .

The notification UI layer represents software software modules hardware or combination thereof that can be used to provide UIs for notification objects. As illustrated the notification UI layer includes an individual notification rendering UI an individual notification navigation module and an individual notification input UI . The individual notification rendering UI represents an application software software modules hardware or combination of software and hardware that can be used to render a UI for an individual notification. In some implementations the user can receive the rendered notification from an administrator who writes the notification information. The individual notification navigation module represents an application software software modules hardware or combination thereof that can be used to handle navigations for an individual notification. In some implementations the individual notification navigation module includes instructions to navigate to a page of the individual notification UI. The individual notification input UI represents an application software software modules hardware or combination of software and hardware that can be used to receive input for an individual notification. In some implementations the individual notification input UI can include a UI that enables the user to input information for an individual notification. This information can include title description and or other attributes of the individual notification. and associated descriptions provide additional details of the notification UI layer .

The server side controller layer represents software software modules hardware or combination thereof that can be used to handle operations for notification objects. As illustrated the server side controller layer includes an individual notification controller and a data migration module . The individual notification controller represents an application software software modules hardware or combination thereof that can be used to handle operations for an individual notification. In some implementations the individual notification controller can receive an individual notification from an administrator save the individual notification to a database retrieve data of the individual notification from the database and or send notification information to the notification UI layer for notification rendering.

The data migration module represents an application software software modules hardware or combination thereof that can be used to process data migrations. In some implementations the data migration module can manipulate database creation and modification in a different system in case of a data migration. For example when the notification handling system migrates to a different database or a different server the data migration module can migrate the notification data to the different database or server instead of manually creating every database from scratch in the new system. and associated descriptions provide additional details of the server side controller layer .

The notification modeling layer represents a software software modules hardware or combination thereof that can be used to model notification objects. In some implementations the server writes notification data to a database based on notification models. As illustrated the notification modeling layer includes a common notification modeling module . The common notification modeling module represents an application software software modules hardware or combination thereof that can be used to model a common notification object. In some implementations the common notification modeling module can define common notification attributes. In some implementations the notification modeling layer can also include type notification models subtype notification models and or individual notification models. and associated descriptions provide additional details of the notification modeling layer .

The DSoD Repo represents software software modules hardware or combination thereof that can be used to store notification data. In some implementations the DSoD Repo is a database. The DSoD Repo can be used to save and retrieve the notification objects. In some cases the DSoD Repo can be located in the server . Alternatively or in combination the DSoD Repo can be located in a database server that is communicably coupled with the server .

The network facilitates communications between the components of the system e.g. between the user and the server . In some implementations the network can be a wireless or a wireline network. In some implementations the network can also be a memory pipe a hardware connection or any internal or external communication paths.

While portions of the software elements illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software can instead include a number of sub modules third party services components libraries and the like as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The computer can serve as a client network component a server a database or other persistency and or any other component of the system . The illustrated computer is communicably coupled with a network . In some implementations one or more components of the computer may be configured to operate within a cloud computing based environment.

At a high level the computer is an electronic computing device operable to receive transmit process store or manage data and information associated with the system . According to some implementations the computer may also include or be communicably coupled with an application server e mail server web server caching server streaming data server business intelligence BI server and or other server.

The computer can receive requests over network from a client application e.g. executing on another computer and respond to the received requests by processing the said requests in an appropriate software application. In addition requests may also be sent to the computer from internal users e.g. from a command console or by another appropriate access method external or third parties other automated applications as well as any other appropriate entities individuals systems or computers.

Each of the components of the computer can communicate using a system bus . In some implementations any and or all the components of the computer both hardware and or software may interface with each other and or the interface over the system bus using an application programming interface API and or a service layer . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function and or a set of APIs. The service layer provides software services to the computer and or the system . The functionality of the computer may be accessible for all service consumers using this service layer. Software services such as those provided by the service layer provide reusable defined business functionalities through a defined interface. For example the interface may be software written in JAVA C or other suitable language providing data in Extensible Markup Language XML format or other suitable format. While illustrated as an integrated component of the computer alternative implementations may illustrate the API and or the service layer as stand alone components in relation to other components of the computer and or system . Moreover any or all parts of the API and or the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The computer includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the computer and or system . The interface is used by the computer for communicating with other systems in a distributed environment including within the system connected to the network whether illustrated or not . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated system .

The computer includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the computer and or the system . Generally the processor executes instructions and manipulates data to perform the operations of the computer . Specifically the processor executes the functionality required for notification handling.

The computer also includes a memory that holds data for the computer and or other components of the system . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the computer and or the system . While memory is illustrated as an integral component of the computer in alternative implementations memory can be external to the computer and or the system .

The application is an algorithmic software engine providing functionality according to particular needs desires or particular implementations of the computer and or the system particularly with respect to functionality required for notification handling. For example application can serve as one or more components applications described in . Further although illustrated as a single application the application may be implemented as multiple applications on the computer . In addition although illustrated as integral to the computer in alternative implementations the application can be external to the computer and or the system .

There may be any number of computers associated with or external to the system and communicating over network . Further the terms client user and other appropriate terminology may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover this disclosure contemplates that many users may use one computer or that one user may use multiple computers .

As illustrated in the notification framework can define a common notification object . Defining a common notification object may provide a centralized approach to handle attributes that are common to one or more notification objects. For example the common notification object can include common attributes for multiple notification objects. In some cases the common notification object can include common attributes for all the notifications in the system.

As illustrated in the notification framework can define type notification objects . In some implementations the notification framework can categorize notifications into one or more notification types according to the purpose of the notifications. For example the notification types can include step notifications tracker notifications workflow notifications and milestone notifications. The step notification can notify events related to steps of workflows. For example the step notification can notify that a step is overdue a new step is assigned or a step deadline is approaching. The tracker notifications can notify events related to workflow tracking e.g. notifying that a participant is assigned as a tracker of the workflow or notifying a tracker that a workflow step has not been completed. The workflow notifications can notify events related to workflow e.g. notifying that a workflow exception has occurred indicating that a workflow is overdue or completed or notifying that a workflow deadline is approaching. The milestone notification can notify events related to milestones e.g. notifying that a milestone has been reached to a workflow originator or an assigned tracker.

In the illustrated example each of the type notification objects represent a notification object of a different notification type. In some implementations a type notification object can include the common attributes of the common notification object . Each of the type notification objects can also include additional attributes that are common to its notification type.

In some implementations as illustrated in the notification framework can also define subtype notification objects . The notification framework can further categorize notifications in each notification type into one or more notification subtypes according to the purpose of the notifications. For example the step notification type can include a subtype to notify that a step is overdue a subtype to notify that a new step is assigned and a subtype to notify that a step deadline is approaching. The tracker notifications type can include a subtype to notify that a participant is assigned as a tracker of the workflow and a subtype to notify a tracker that a workflow step has not been completed. The workflow notifications type can include a subtype to notify that a workflow exception has occurred a subtype to notify that a workflow is overdue or completed and a subtype to notify that a workflow deadline is approaching. The milestone notification type can include a subtype to notify that a milestone has been reached to a workflow originator and can include a subtype to notify that a milestone has been reached to an assigned tracker.

In the illustrated example each of the subtype notification objects can represent a notification object of a different notification subtype. Each notification type may have zero one or more subtypes and therefore each type notification object may have zero one or more subtype notification objects that are children of the type notification object. In the illustrated example the type notification objects have no child subtype notification object. The type notification object has one child subtype notification object i.e. the subtype notification object . The type notification object has more than one child subtype notification object e.g. the subtype notification object . In some implementations a subtype notification object can include the attributes of its parent type notification object. A subtype notification object can also include additional attributes that are common to its notification subtype.

In some implementations as illustrated in the notification framework can also define individual notification objects . A type or subtype notification object can have zero one or more child individual objects. In some implementations an individual notification object can include the attributes of its parent type or subtype notification object. An individual notification object can also include additional attributes that are specific to its notification. In the illustrated example the type notification object has no child individual notification object. The type notification object has one child individual notification object type . The subtype notification objects have one child individual notification object type respectively. Categorizing different notification types and subtypes and defining type subtype and individual notification objects provide a distributed approach to handle notifications.

The notification model layer represents software software modules hardware or combination thereof that can be used to model notification objects. In some implementations the notification model layer can use SAP HANA STUDIO or an application s providing equivalent functionality for common notification table type subtype notification table and or individual notification table definitions. As illustrated the notification model layer can define a common notification object one or more type subtype notification objects and one or more individual notification objects . The common notification object can include attributes common to multiple or in some implementations to all notifications. The type subtype notification objects can include attributes common to type subtype notifications. The individual notification objects can include attributes specific to individual notifications.

The notification UI layer represents software software modules hardware or combination of software and hardware that can be used to provide UIs for notification objects. In some implementations the notification UI layer can use SAP UI5 with JavaScript JSON and or XML as the UI layer technology. As illustrated the notification UI layer can include a notification input module a common rendering UI and one or more individual rendering UI . In the illustrated example the notification input module can define a common input UI one or more type subtype input UI and one or more individual input UI . The common input UI can define input mechanisms e.g. views to edit notification information which are common to multiple or in some implementations to all notifications. The type subtype input UI can define input mechanisms that are common to type subtype notifications. The individual input UI can define input mechanisms that are specific to individual notifications. The common rendering UI can render a UI that is common to multiple or in some implementations to all notifications. The individual rendering UI can render UIs that are specific to individual notifications.

The notification controller layer represents software software modules hardware or combination thereof that can be used to execute functions for notification objects. In some implementations the notification controller layer can serve as the bridge between the notification UI layer and the notification model layer . For example the notification UI layer can delegate some UI functions to the notification controller layer . The notification controller layer can operate the notification model layer to execute the UI functions. In some implementations the notification controller layer can use JAVA SERVLETs for server side controllers to implement concrete controller handling methods and can use JAVA and XML for other classes and files. In some implementations the notification UI layer and the notification controller layer can communicate with AJAX and JSON data format. As illustrated the notification controller layer can define a common notification handler one or more type subtype notification handlers and one or more individual notification handlers . The common notification handler can execute functions common to multiple or in some implementations to all notifications. The type subtype notification handler can execute functions common to the type subtype notification. The individual notification handler can execute functions specific to the individual notification.

In some implementations the notification type can be selected in an edit screen of notification to show individual notification information. If the notification framework defines type or subtype notification the type and subtype of notification can be selected in the edit screen and the type subtype of individual notification view can be displayed. This process can be repeated until there are no further subtypes. Notifications can be created edited saved and deleted according to an individual application s requirements. Notification input can also be customized according to an individual application s requirements. The notification framework can also have different notification rendering according to an individual application s requirements. As described above the rendering view can be categorized into common notification rendering UI and individual notification rendering UI to show the notification to end users. The notification framework can be implemented in Java C C or any other languages. The notification framework can be interact with relational object oriented or any other database technology. The notification framework can also be implemented in any business applications.

In some implementations the notification framework can provide end to end support in creating and handling notifications. For example the notification framework can capture notification information from a site administration page render the notification information in a tenant page save the notification information and retrieve the notification information.

In the illustrated example the common notification object includes a type field a notification ID and other common attributes. The type field can indicate that the type of the common notification object is considered to be common. The notification ID can be an ID that represents the common notification object .

The notification framework is extendable for categorized notifications. For example the notification framework includes one or more individual type notification objects . Each individual type notification object can include other attributes that are common to its type. Each individual type notification object can include a subtype field that indicates the type of the individual type notification object . Each individual type notification object can also include a notification ID. In some implementations the notification ID of the individual type notification object is the same as the notification ID of the common notification object .

In some implementations the notification objects can be further categorized into subtypes for each type notification object. This process can be repeated until there is no subtype of notification objects needed to be defined. For example the notification framework includes one or more individual subtype notification objects . Each individual subtype notification object can include a subtype field that indicates the subtype of the individual subtype notification object . Each individual subtype notification object can include other attributes that are common to its subtype. Each individual subtype notification object can also include a notification ID. In some implementations the notification ID of the individual subtype notification object is the same as the notification ID of its parent type notification object . Therefore the notification objects can be linked by the notification ID.

As illustrated the notification framework includes one or more individual notification objects . Each individual notification object can include other attributes that are specific to its subtype. In some implementations the individual notification object does not have a type or a subtype field because the individual notification object does not have a type or a subtype. Each individual subtype notification object can also include a notification ID. In some implementations the notification ID of the individual subtype notification object is the same as the notification ID of its parent subtype or type notification object. Therefore the notification objects can be linked by the notification ID.

At an object type for the notification object can be selected. In some cases the object type can be selected by a system administrator who creates the notification object. From method proceeds to . At a common attribute of the notification object can be customized. The common attribute can be defined in a common notification object. For example the common attribute can include a common UI. In some cases the common attribute can have a default value. In some cases an attribute can be customized into a value that is different than the default value. For example a common attribute can include a color code for a notification dialog box and the default value of the common attribute can be black. The default value can be changed to a different color e.g. red during the customization step. In another example the default value of the common attribute can be a visible notification which can be changed to invisible. Alternatively or in combination the attribute can be customized by using the default value.

From method proceeds to where a determination can be made on whether the notification object includes additional attributes other than the common attributes. If there are no additional attributes to include method proceeds from to . If there are additional attributes method proceeds from to . At the type attributes can be customized and included in the notification object. The type attribute can be defined in a type notification object that has the same type as the object type selected at .

In some implementations whether the object type has additional subtypes is determined at . If the object type has an additional subtype method proceeds from to . At the subtype attributes can be customized and included in the notification object. The subtype attribute can be defined in a subtype notification object. The subtype notification object can be a subtype of the type notification object. From method proceeds to where the next subtype can be selected. From method proceeds to . Step and can be repeated until the object type has no additional subtypes. If the object has no additional subtypes method proceeds from to . At individual attributes can be customized and included in the notification object. From method proceeds to where the notification object is saved in the notification framework.

The downtime notification can be a feature for Data Service on Demand. The downtime notification can enable a customer to see in advance when the downtimes or system upgrades are planned so that the customer can act in advance. In order to fulfill the downtime notification requirement the system can support a downtime notification end to end scenario. For example the system can capture the downtime notification information from site admin page render downtime notification information in tenant page save the downtime notification and retrieve downtime notification information. In some implementations the system can also support data migration.

In some implementations the downtime notification can be created by using a common notification model event notification. Referring to represents a screenshot of an example table of common attribute definitions of a downtime notification.

In the example illustrated in the common attributes are sufficient for the downtime notification object. In some cases the downtime notification object can be extended to include additional attributes. In some implementations the downtime notification model can be generated with a MYBATIS or other model generator. The following list represents an example of the model classes and files for the downtime notification model 

In some implementations data migration can be supported for downtime notification. The following migration file represents an example for downtime notification migration 

In an example the input UI of the downtime notification can be defined in the downtime notificaiton view.js. The rendering UI of the downtime notification is a new UI5 component notification bar that can be set in the shell init.js file. The downtime notification controller can be DowntimeNotificationController.java.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The terms data processing apparatus computer or electronic computer device or equivalent as understood by one of ordinary skill in the art refer to data processing hardware and encompass all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU an FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example LINUX UNIX WINDOWS MAC OS ANDROID IOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a CPU an FPGA or an ASIC.

Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors both or any other kind of CPU. Generally a CPU will receive instructions and data from a read only memory ROM or a random access memory RAM or both. The essential elements of a computer are a CPU for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic disks magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a global positioning system GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM DVD R DVD RAM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display LED Light Emitting Diode or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse trackball or trackpad by which the user can provide input to the computer. Input may also be provided to the computer using a touchscreen such as a tablet computer surface with pressure sensitivity a multi touch screen using capacitive or electric sensing or other type of touchscreen. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of wireline and or wireless digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a radio access network RAN a metropolitan area network MAN a wide area network WAN Worldwide Interoperability for Microwave Access WIMAX a wireless local area network WLAN using for example 802.11a b g n and or 802.20 all or a portion of the Internet and or any other communication system or systems at one or more locations. The network may communicate with for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and or other suitable information between network addresses.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

In some implementations any or all of the components of the computing system both hardware and or software may interface with each other and or the interface using an application programming interface API and or a service layer. The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the computing system. The functionality of the various components of the computing system may be accessible for all service consumers via this service layer. Software services provide reusable defined business functionalities through a defined interface. For example the interface may be software written in JAVA C or other suitable language providing data in Extensible Markup Language XML format or other suitable format. The API and or service layer may be an integral and or a stand alone component in relation to other components of the computing system. Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation and or integration of various system modules and components in the implementations described above should not be understood as requiring such separation and or integration in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products. Furthermore while the operations depicted in the drawings may indicate start and or end points for the operations implementations of the methods described in the disclosure are not restricted to the particular start and or end point as illustrated. Other implementations may start and or end at different points of the operations.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

