---

title: Chaining of use case-specific entity identifiers
abstract: Disclosed are various embodiments for creating and manipulating chained entity identifiers that include multiple use case-specific entity identifiers. Each of the use case-specific entity identifiers may identify a single entity but may differ, as they are use case-specific. Further, each of the use case-specific entity identifiers may be encrypted and/or signed using different use case-specific keys. The use case-specific entity identifiers may be nested or appended within a chained entity identifier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09633209&OS=09633209&RS=09633209
owner: Amazon Technologies, Inc.
number: 09633209
owner_city: Seattle
owner_country: US
publication_date: 20140221
---
The collection and use of sensitive information deserves heightened protection. In some cases third party services can gain access to private user information. Such uncontrolled access to private sensitive information could result in serious security risks including online identity abuse.

The present disclosure relates to chaining of use case specific entity identifiers which may involve nesting or appending different use case specific identifiers for a single entity. An enterprise or other organization may assign their customers unique identifiers. The unique identifiers may be important for purposes of record keeping and to associate data of various forms with the customer. Additionally unique identifiers may provide a form of anonymization. Rather than using personally identifiable information e.g. full name Social Security numbers telephone numbers etc. a randomized number or string may be generated and assigned as a unique identifier. Thus if a malicious user were to gain access to a customer associated data item the malicious user would not know the identity of the customer merely from the unique identifier.

In one scenario an organization may assign a single unique identifier to each customer and then associate all data pertaining to the customer with the single unique identifier. However this presents a security risk. If a malicious user were to gain access to different types of data associated with the same unique identifier the malicious user may learn information about the corresponding customer that may constitute an invasion of privacy. Further in some cases the malicious user may be able to correlate the unique identifier with personally identifiable information within the different types of data.

Various embodiments of the present disclosure protect entity identifiers by creating use case specific or application specific entity identifiers. As used herein the term entity may refer to a customer or customer account a user or user account an organization or organizational account and so on. In some situations a service may be associated with a single use case thereby making the use case specific entity identifier a service specific entity identifier. In other situations a service may be associated with multiple functions or use cases for the data. In still other situations multiple services may be associated with a particular use case. As used herein the term use case refers to a specific scenario of usage for data relating to one or more functions to be performed using that data.

For example the data pertaining to a particular service may be associated with use case specific entity identifiers that are generated from the actual entity identifiers. Nonetheless it may be important to facilitate correlation among the use case specific entity identifiers on an authorized basis. For example an application may need to correlate product purchase entity identifiers with page view entity identifiers. To this end a use case specific entity identifier may comprise an encrypted version of the actual entity identifier where different encryption keys are employed for different services. A central broker may provide corresponding decryption keys to an application or service on an authorized basis. In some embodiments the use case specific entity identifiers may be centrally managed by an identifier translation service such that the other services need not be aware of the actual entity identifiers or perform identifier conversion functions.

Various approaches related to use case specific entity identifiers are described in U.S. patent application Ser. No. 14 019 120 entitled USE CASE SPECIFIC ENTITY IDENTIFIERS and filed on Sep. 5 2013 U.S. patent application Ser. No. 14 019 124 entitled CENTRALLY MANAGED USE CASE SPECIFIC ENTITY IDENTIFIERS and filed on Sep. 5 2013 and U.S. patent application Ser. No. 13 561 686 entitled AUTOMATIC APPLICATION DEPENDENT ANONYMIZATION and filed on Jun. 30 2012 which are incorporated herein by reference in their entireties.

In particular the present disclosure relates to techniques for chaining use case specific entity identifiers. For example multiple use case specific entity identifiers for a single entity may be aggregated into a single data structure. Each of the use case specific entity identifiers may remain encrypted by their respective use case specific keys to prevent unauthorized correlation of the entity identifiers. However authorized translation or correlation of entity identifiers may be more easily performed via the chaining approaches described herein. In addition in various embodiments the use case specific entity identifiers may correspond to subsets of attributes that identify a particular entity where a combination of multiple subsets may be employed to uniquely identify the particular entity.

Turning now to shown is a diagram that illustrates one example of chaining use case specific entity identifiers via a nesting approach. The diagram illustrates this example via an analogy to matryoshka dolls. With matryoshka dolls a first doll is stored within a second doll which is stored within a third doll which in turn is stored within a fourth doll and so on. In the non limiting example of a service specific customer identifier for a first service comprises an actual customer identifier RealCustID  that is encrypted by a service specific key ServiceKey1 .

As the next layer according to the matryoshka doll analogy a service specific customer identifier comprises the service specific customer identifier which in turn is encrypted using another service specific key ServiceKey2 . This multiply encrypted version of the service specific customer identifier may be used as a distinct service specific customer identifier for a second service. Alternatively customer attributes and or other unique identifiers may be added to the service specific customer identifier before it is encrypted within the service specific customer identifier . For purposes of simplifying the illustration such additional data is omitted from the diagram .

As yet another layer according to the matryoshka doll analogy a service specific customer identifier comprises the service specific customer identifier which in turn is encrypted using yet another service specific key ServiceKey3 . Again this multiply encrypted version of the service specific customer identifier may be used as a distinct service specific customer identifier for a third service. As before customer attributes and or other unique identifiers may be added to the service specific customer identifier before it is encrypted within the service specific customer identifier .

For various embodiments implementing the approach of it is noted that the third service may not have direct access to the identifier used by the first service the service specific customer identifier . Should the third service need to gain access to the identifier used by the first service the third service would need to have the service specific key ServiceKey2 used to decrypt the service specific customer identifier . Accordingly a broker service may be used to provide specific keys as needed or an identifier translation service with access to the specific keys may provide translation. Alternatively the nested identifiers may be unwound by sending them in the reverse direction up the chain so to speak so that the appropriate service may decrypt the identifiers that are encrypted with its specific key.

Moving to shown is a diagram that illustrates one example of chaining use case specific entity identifiers via an append approach. The diagram also employs the matryoshka doll analogy but with the understanding that each doll may be independently accessible. For example the service specific customer identifier may comprise some unique identifier Service1 CustID  that may or may not be encrypted. As the next layer the service specific customer identifier comprises a unique identifier Service2 CustID  that may or may not be encrypted which is appended to the service specific customer identifier that has previously been encrypted using a service specific key ServiceKey1 . As yet another layer the service specific customer identifier comprises a unique identifier Service3 CustID  that may or may not be encrypted and the encrypted identifier is appended to the service specific customer identifier which has previously been encrypted using another service specific key ServiceKey2 and which is appended to the previously encrypted service specific customer identifier . Before the service specific customer identifier is shared with another service the service specific customer identifier may be encrypted using yet another service specific key e.g. ServiceKey3 .

In this non limiting example any constituent identifier within the service specific customer identifier is directly accessible provided that the appropriate service specific key is available for decryption. Although the example of shows each constituent identifier as a separately encrypted identifier it is understood that the constituent identifiers may correspond to a nested version as in . For example in the service specific customer identifier may be appended to the service specific customer identifier and to the service specific customer identifier such that each constituent identifier is directly accessible. Although the discussion of pertains to customer identifiers the principles may be generalized to entities other than customers. Similarly though the discussion of pertains to service specific identifiers the principles may be generalized to use case specific situations some services may implement multiple use cases and some use cases may be implemented by multiple services. Further the function of appending may correspond to concatenating prepending and so on whereby a grouping or association in a data structure is produced.

Referring next to shown is an example data structure representing a use case specific entity identifier. The example data structure corresponds to an extensible markup language XML document. Other types of data formatting may be used e.g. yet another markup language YAML JavaScript object notation JSON relational database rows bit masks and so on. Fields within the example data structure may include for example a flag indicating whether the identifier is considered canonical a namespace for the identifier a length of the identifier a key identifier used to encrypt the identifier the encrypted data for the identifier a checksum and or other data.

Although the terms encryption and decryption are employed in the specification it is understood that other cryptographic wrapping and unwrapping operations may be used in a like manner. For example signature generation may be employed in lieu of or in addition to encryption. Similarly signature verification may be employed in lieu of or in addition to decryption. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and a computing environment which are in data communication with each other via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks. For example such networks may comprise satellite networks cable networks Ethernet networks and other types of networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a hosted computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in data stores that are accessible to the computing environment . Each of the data stores may be representative of a plurality of data stores as can be appreciated. The data stored in the data stores for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include a plurality of services . . . M a broker service and other applications services processes systems engines or functionality not discussed in detail herein. The services and the broker service may be in data communication via inter process communication remote method invocation remote procedure call simple object access protocol SOAP representational state transfer REST and or other communication application programming interfaces APIs . Each of the services is executed to perform a business function relating to the organization operating the computing environment . To this end each of the services may respectively include business logic identifier conversion logic service data and or other components. The service data may include entity data use case specific keys chained entity identifiers that include one or more use case specific entity identifiers IDs and or other data.

The business logic performs one or more business functions which may involve obtaining generating transforming storing and or performing other operations on entity data . For example for an organization that operates an electronic commerce system the business logic may perform network page component generation functions data logging functions order management functions order fulfillment functions shopping cart management functions customer product review management functions catalog management functions and or other functions.

The identifier conversion logic is executed to translate use case specific entity identifiers that are specific to another service . To this end the identifier conversion logic may obtain a decryption key from the broker service in order to decrypt the use case specific entity identifier to obtain an entity identifier identifier metadata and or another encrypted use case specific entity identifier that is nested. The identifier conversion logic may then convert the actual entity identifier or attributes of the entity to another use case specific entity identifier that is specific to the present service . Some services may be configured to operate upon only the use case specific entity identifiers and therefore may exclude the identifier conversion logic and or the use case specific keys . Thus some services may be restricted from accessing the entity identifiers employed for other use cases.

The entity data may include data records that are associated with customers of the organization or other entities. In particular each data record may be associated with a corresponding use case specific entity identifier and or chained entity identifier to identify the corresponding customer. In one embodiment the use case specific entity identifier comprises an encrypted version of an actual entity identifier that has been encrypted using a use case specific key and a form of reversible encryption. The actual entity identifier may comprise a number a character string binary data or any other form of unique identifier. In some embodiments the actual entity identifier for a particular use case may include a subset of attributes regarding the entity.

For example where the entity is an individual customer the actual entity identifier for a first use case may correspond to the customer s name and email address. Meanwhile the actual entity identifier for a second use case may correspond to credit card information of the customer. In some scenarios a combination of multiple subsets of attributes may be taken as uniquely identifying the entity. The use case specific entity identifier may also include a unique identifier of the use case specific key or of the service pertaining to the use case specific key as well as other metadata.

In some cases the metadata may include permissions that control whether certain services are permitted to access identifiers specific to certain use cases. The permissions may be signed e.g. by a service that created the identifier to establish authenticity and the permissions may be enforced by the broker service and or an identifier translation service. Additionally in various embodiments using chained entity identifiers a use case specific entity identifier may incorporate be appended to or have nested within one or more other use case specific entity identifiers for the same entity.

The use case specific entity identifiers for the different use cases may share a unified namespace. In other words the use case specific entity identifiers for the different use cases may be unique with respect to each other. Uniqueness may be enforced for example by incorporating a use case identifier. For example a unique identifier for a use case may be included in the use case specific entity identifiers for that use case to ensure uniqueness across the use cases. In other embodiments the use case specific entity identifiers for the different use cases may each be associated with distinct corresponding namespaces that are distinguished by context of usage. For example if a first service obtains entity data from a second service associated with a specific use case the first service may assume that the associated use case specific entity identifiers correspond to the namespace of the second service .

The use case specific keys may correspond to public private asymmetric key pairs or symmetric keys. Where the use case specific key is a symmetric key the use case specific key used to encrypt the use case specific entity identifier may also be used to decrypt the same. Where the use case specific key corresponds to a public private key pair the public key may be used to encrypt the actual entity identifier and or other metadata and the private key is used for decryption of the same. It is noted that a given service or use case may employ multiple use case specific keys . For example a given service may employ a different use case specific key for each grouping of one or more entities e.g. groupings of one hundred entities. Further different use case specific keys may be employed based upon the current time e.g. a different use case specific key is employed every thirty minutes.

In one embodiment one of multiple use case specific keys for a use case may be selected at random to encrypt the use case specific entity identifier . In one embodiment the same one of the multiple use case specific keys for a single use case will be selected for a particular actual entity identifier in the use case specific entity identifier . In another embodiment different ones of the multiple use case specific keys for the single use case may be selected for the particular actual entity identifier.

The broker service is executed to provide decryption keys to services upon request. For example a first service may need to convert use case specific entity identifiers generated by a second service . The first service then may request the appropriate decryption key from the broker service . The broker service may authenticate the first service and then determine whether the first service should have access to the requested decryption key . If the first service is authorized to access the decryption key the broker service then provides the decryption key to the first service via for example an encrypted channel of communication. Although one broker service is depicted in it is understood that multiple broker services may be employed. For example one broker service may be utilized by a first set of services and another broker service may be utilized by a second set of services .

The data stored in the data store includes for example decryption keys service authorization data and potentially other data. In one embodiment access to the data store may be restricted to the broker service . In some embodiments the data store may also store the some or all of the service data for the services . In such embodiments access to the service data may be restricted e.g. so that a service can access only its own service data or other service data to which it has been granted access.

The decryption keys correspond to the decryption components of the use case specific keys . Where the use case specific keys are symmetric keys the decryption keys may be the same as the use case specific keys . Where the use case specific keys correspond to public private key pairs the decryption keys may comprise the key pair or to the private key portion of the key pair. The service authorization data includes configuration data that may allow the broker service to determine whether a given service is authorized to access to a particular decryption key . It may be the case that a given service may be authorized to access only a subset of the decryption keys . Additionally a given service may be provided with access only at certain times to accomplish certain tasks or under certain conditions.

The data stored in the data store includes for example entity data and or other data. The data store may be accessible to one or more of the services . While in one embodiment entity data may be stored within the service data accessible only to the respective service in another embodiment the entity data may be stored in the data store such that a single copy of the entity data may be accessible by multiple services . For example multiple services may implement a particular use case and the data in the entity data may be accessible via the data store to each of the multiple services that implement the particular use case.

Similar to the computing environment the computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a hosted computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. The components executed on the computing environment for example include one or more services N and other applications services processes systems engines or functionality not discussed in detail herein. The services N may be similar to the services . . . M illustrated in the computing environment . For example the services N may include identifier conversion logic that assigns use case specific entity identifiers to entity data . The use case specific entity identifiers may use the same unified namespace as those for the services . . . M. However the computing environment may be operated by a different organization from the organization operating the computing environment . The broker service may be implemented in a separate computing environment in some embodiments.

Next a general description of the operation of the various components of the networked environment is provided. To begin services are configured to receive and or generate entity data using the business logic . The entity data is associated with an actual entity identifier of a customer or other entity. The services are configured to use the identifier conversion logic to replace the association with the actual entity identifier with an association with a use case specific entity identifier or a chained entity identifier . To do this the identifier conversion logic obtains a use case specific key and encrypts the actual entity identifier potentially along with a use case specific entity identifier for another use case. Alternatively the identifier conversion logic may simply encrypt the use case specific entity identifier for another use case using the use case specific key . In some embodiments the identifier conversion logic may obtain the use case specific key from a key provider service such as a broker service . The identifier conversion logic may then perform various processing on the encrypted result such as for example prepending a key or use case identifier adding an expiration date adding other metadata and or other forms of processing. The use case specific entity identifier is generated thereby and associated with the entity data pertaining to the customer. The generated use case specific entity identifier may be incorporated in a chained entity identifier and associated with the entity data pertaining to the customer. Subsequently the business logic may process store transfer and or perform other operations on the entity data that is associated with the customer.

In addition services may obtain entity data associated with chained entity identifiers that incorporate use case specific entity identifiers of other services or use cases. In order to correlate the obtained entity data with the entity data of the present service the identifier conversion logic of the present service may be configured to convert the use case specific entity identifiers of the other services to new use case specific entity identifiers of the present service as will be described. It is noted that a service N of a computing environment may communicate with the services and the broker service of the computing environment via the network to perform the same or similar functions as the services of the computing environment . In some cases the computing environments and may share a unified namespace for use case specific entity identifiers to assure uniqueness via resolution of potential collisions among the unique identifiers.

In some embodiments the use case specific keys may have a fixed lifespan or may expire. To handle this the identifier conversion logic may be configured to rotate the use case specific entity identifiers and or chained entity identifiers via decryption using the old use case specific key and replacement with a new use case specific key . The identifier conversion logic may obtain the new use case specific key from the broker service and or provide a new corresponding decryption key to the broker service in various embodiments.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and a computing environment which are in data communication with each other via a network . In contrast to the computing environment the computing environment includes an identifier translation service in place of the broker service . While in the identifier conversion logic of the service performs the identifier conversion the embodiments of employ a centralized identifier translation service . It is noted that some embodiments may employ the broker service in conjunction with the identifier translation service .

The identifier translation service is executed to receive and respond to identifier translation requests from services for conversion and or correlation of use case specific entity identifiers in a chained entity identifier from one use case to another. As such the identifier translation service may perform the key management authentication and authorization functions of the broker service . By performing the identifier conversion in the identifier translation service the individual services need not be provided with decryption keys and need not have access to the entity identifiers. The identifier translation service may also function to update expired use case specific entity identifiers that were encrypted using a key that has expired or will soon expire.

As shown the use case specific entity identifiers from a chained entity identifier may be accessible to the identifier translation service . In some cases the identifier translation service may be configured to cache the translation and or correlation between use case specific entity identifiers to provide a faster response. Although one identifier translation service is depicted in it is understood that multiple identifier translation services may be employed. For example one identifier translation service may be utilized by a first set of services and another identifier translation service may be utilized by a second set of services .

In one embodiment the identifier translation service may be configured to function as a transparent proxy. For example rather than merely translating use case specific entity identifiers the identifier translation service may be configured to pass a service call from one service to another service . In passing the service call onto the other service the identifier translation service may perform the translation of the use case specific entity identifiers . The translation may occur in the opposite direction as well when the response is returned to the service that originated the service call.

The data store may store the use case specific keys the service authorization data use case generic keys use case specific salts and or other data. In one embodiment the identifier translation service may employ use case specific keys for encryption and decryption similar to the identifier conversion logic . In another embodiment the identifier translation service may employ use case generic keys which may be shared among multiple use cases in conjunction with use case specific salts . The use case specific salts may be employed to produce distinct use case specific entity identifiers for multiple use cases that share a use case generic key . Although the term salt is used herein the use case specific salts may correspond to randomization values nonce values or initialization vectors. The use case specific keys and or the use case generic keys employed by the identifier translation service may be symmetric keys and or asymmetric key pairs.

In some embodiments the identifier translation service and or the identifier conversion logic may be configured to perform the identifier translation conversion within a trusted computing environment. For example such a trusted computing environment may be within a secure execution platform a trusted platform module or a hardware security module.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the identifier conversion logic according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the identifier conversion logic as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the identifier conversion logic of a service determines that a use case specific entity identifier is to be generated for a particular entity and a particular use case. In box the identifier conversion logic determines whether there is an existing chained entity identifier available for the particular entity. If an existing chained entity identifier is not available the identifier conversion logic moves from box to box .

In box the identifier conversion logic creates a chained entity identifier that includes a use case specific entity identifier . Additional headers and or metadata may be included such as for example an identifier of the use case specific key used for encryption an identifier of the particular use case to which the use case specific entity identifier pertains and so on. In creating the chained entity identifier the identifier conversion logic may obtain a use case specific key for the particular use case and then encrypt use case specific attributes with the use case specific key . For example the attributes may comprise a subset of attributes that when taken with other subsets of attributes uniquely identify the entity. In another example a unique identifier of the entity may be employed. In either case a salt and or additional metadata may be combined with the attributes or the unique identifier before encryption is applied. In some situations the use case specific entity identifier may be unencrypted. In lieu of or in addition to encryption the use case specific attributes may be cryptographically signed. Thereafter the portion of the identifier conversion logic ends.

If instead an existing chained entity identifier is available the identifier conversion logic proceeds from box to box . In box the identifier conversion logic obtains an existing use case specific entity identifier from the existing chained entity identifier . In box the identifier conversion logic adds use case specific attributes to the existing use case specific entity identifier . The use case specific attributes may comprise a unique identifier and or a subset of attributes regarding the entity.

In box the identifier conversion logic updates the chained entity identifier to include a newly generated use case specific entity identifier . In one scenario this may involve replacing the existing use case specific entity identifier in the chained entity identifier nesting approach . In another scenario this may involve appending the newly generated use case specific entity identifier to one or more existing use case specific entity identifiers all of which correspond to the same entity appending approach . The identifier conversion logic may obtain a use case specific key corresponding to the particular use case and then may encrypt the use case specific attributes and the existing use case specific entity identifier which is already encrypted using the use case specific key . In other cases in lieu of or in addition to encryption the use case specific attributes and the existing use case specific entity identifier may be cryptographically signed. Thereafter the portion of the identifier conversion logic ends.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the identifier translation service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the identifier translation service as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the identifier translation service receives a chained entity identifier and a translation request from a service . In some cases the chained entity identifier is retrieved separately by the identifier translation service in response to the translation request. In box the identifier translation service determines use case specific keys for the use case specific entity identifiers included in the chained entity identifier . The translation request may indicate that two or more of the use case specific entity identifiers are to be correlated or translated. In another embodiment the translation request may indicate a specific one of the use case specific entity identifiers that is to be decrypted verified or otherwise cryptographically unwrapped which in turn may then be correlated by the service to other use case specific entity identifiers in the chained entity identifier .

In box the identifier translation service determines whether the requesting service is authorized to receive the translation correlation. For example the identifier translation service may determine from the service authorization data whether the service should be granted access to the identifiers specific to a particular use case or identifiers for particular entities. If the service is not authorized to receive the translation the identifier translation service continues to box and denies the translation request. Thereafter the portion of the identifier translation service ends.

If the service is authorized to receive the translation the identifier translation service instead moves from box to box . In box the identifier translation service obtains use case specific keys for decrypting the use case specific entity identifiers to perform the correlation. If two or more particular use case specific entity identifiers are to be correlated additional use case specific keys may be employed to unwind intermediate cryptographic wrapping in a nested approach. In box the identifier translation service cryptographically unwraps use case specific entity identifiers of the chained entity identifier using the use case specific keys .

In box the identifier translation service correlates two or more use case specific entity identifiers that have been cryptographically unwrapped. In box the identifier translation service returns the correlation to the requesting service . In one example the returned correlation may take the form of returning all of the correlated use case specific entity identifiers that have been cryptographically unwrapped. In another example the returned correlation may take the form of one or more requested use case specific entity identifiers that have been decrypted. In this example the requesting service may retain state facilitating a correlation between its own use case specific entity identifier and the ones that are requested to be translated or cryptographically unwrapped. Thereafter the portion of the identifier translation service ends. Although the identifier translation service may be implemented as a separate centrally managed service as in it is understood that in various embodiments identifier conversion logic of the service may perform translation functionality as described above.

Turning now to shown is a flowchart that provides another example of the operation of a portion of the identifier conversion logic according to various embodiments. In particular relates to distributed resolution of use case specific entity identifiers . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the identifier conversion logic as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the identifier conversion logic determines that a first use case specific entity identifier is to be correlated with a second use case specific entity identifier for another use case. In box the identifier conversion logic obtains a chained entity identifier corresponding to the first use case specific entity identifier . In box the identifier conversion logic determines whether the chained entity identifier comprises nested identifiers or appended identifiers.

If the identifier conversion logic determines that the chained entity identifier does not comprise nested identifiers i.e. that appended identifiers are used the identifier conversion logic continues to box and sends an identifier resolution request to a service corresponding to the second use case specific entity identifier . In the appended approach each of the use case specific entity identifiers may be directly accessible without intermediate cryptographic unwrapping being performed. Thus the second use case specific entity identifier may be determined based upon a use case identifier and the second use case specific entity identifier may be forwarded to the responsible service for translation resolution. The identifier conversion logic continues to box .

If instead the identifier conversion logic determines that nested identifiers are used the identifier conversion logic moves from box to box . In box the identifier conversion logic sends an identifier resolution request to a next service for the chain of nested use case specific entity identifiers in the chained entity identifier . It is noted that the next service may not be the service ultimately with access to the requested use case specific entity identifier . Nonetheless according to a nested approach the next service may be equipped to remove intermediate cryptographic wrapping and to forward the identifier resolution request onto another subsequent service . This may be repeated a number of times until the identifier resolution request arrives at the service responsible for the particular use case and capable of translating the second use case specific entity identifier .

In one embodiment the identifier resolution request specifies a return path for the request such that the result is returned directly from the end service to the requesting service rather than via one or more intermediate services . For example the return path may include an identifier of the requesting service that originated the identifier resolution request. In another embodiment the result may be returned in a sequential manner that reverses the request order via one or more intermediate services .

In box the identifier conversion logic receives the decrypted second use case specific entity identifier in response to the translation request. In various embodiments the cryptographically unwrapped second use case specific entity identifier may be received directly from the service that performed the translation or back through intermediate services that have propagated the request. In box the identifier conversion logic performs a correlation of the cryptographically unwrapped first use case specific entity identifier with the cryptographically unwrapped second use case specific entity identifier . Thereafter the portion of the identifier conversion logic ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the services the broker service and potentially other applications. Also stored in the memory may be data stores and other data. In particular the memory may include one or more regions of protected memory where access is restricted to specific processes and or services . Stored in the protected memory may be entity attributes the decryption keys and or other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the services the broker service the identifier translation service the identifier conversion logic and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the identifier translation service and the identifier conversion logic . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the services the broker service the identifier conversion logic and the identifier translation service that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

Further any logic or application described herein including the services the broker service the identifier conversion logic and the identifier translation service may be implemented and structured in a variety of ways. For example one or more applications described may be implemented as modules or components of a single application. Further one or more applications described herein may be executed in shared or separate computing devices or a combination thereof. For example a plurality of the applications described herein may execute in the same computing device or in multiple computing devices in the same computing environment . Additionally it is understood that terms such as application service system engine module and so on may be interchangeable and are not intended to be limiting.

Disjunctive language such as the phrase at least one of X Y or Z unless specifically stated otherwise is otherwise understood with the context as used in general to present that an item term etc. may be either X Y or Z or any combination thereof e.g. X Y and or Z . Thus such disjunctive language is not generally intended to and should not imply that certain embodiments require at least one of X at least one of Y or at least one of Z to each be present.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

