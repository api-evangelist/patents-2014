---

title: Live companion user interface
abstract: An apparatus and method provide a companion application via a companion application corresponding to a host window provided by a host application, the companion window providing information or metadata descriptive of data in the host window. The host application and companion applications may be separate applications such that the host application is unaware of the companion application. The companion application may hook into the host application (e.g., via an application programming interface) and may monitor host application activities and/or data. Based on identification of data or events in the host application, the companion application may obtain information characterizing or providing a context for data provided by the host application. The host window and companion window may be attached to each other, the host window providing host application data and the companion window providing data describing the host application data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274674&OS=09274674&RS=09274674
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09274674
owner_city: Redmond
owner_country: US
publication_date: 20140208
---
This application is a Continuation of and claims benefit from U.S. application Ser. No. 11 744 782 that was filed on May 4 2007 and that is incorporated herein by reference in its entirety.

Computer users have access to large amounts of data on their computers. For example a user may wish to obtain or access data files stored on a computer. In this case the user may navigate through a series of views to obtain a folder of the desired data files. Although the user may select the desired folder of data files selection of the data files merely provides the user with the files themselves. Similarly a user may navigate through a web browser to a particular web page of interest. Selection of elements in the web page such as hyperlinks applications or the like typically results in navigation to another site or launching of a selected application.

However users often desire additional information such as additional contextual information pertaining to selected elements in an application. In many cases such additional information associated with the selected element has been unavailable to the user by selection of the element. Thus a need exists to provide additional contextual information for selected data or application elements in a convenient and efficient manner.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

In one example a host application generates a host window containing data generated by the host application. A companion application which may be separate from the host application generates additional information e.g. metadata that may describe or provide a context for data or events in the host application. In one example the companion application obtains the additional information from a separate location rather than creating the additional information. The companion application may further generate a companion window which may be attached to the host window. The companion window may contain the additional information.

In another example the host application is oblivious or substantially oblivious to the companion application such that actions or events performed in the companion application do not materially affect the host application. In this example the companion application may hook into the host application to monitor data within the host application while the host application does not monitor the companion application. Each of the host application and the companion application may generate and display a user interface such as a window containing respective information. The windows may be attached to each other.

Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings.

The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present example may be constructed or utilized. The description sets forth the functions of the example and the sequence of steps for constructing and operating the example. However the same or equivalent functions and sequences may be accomplished by different examples. Systems described herein are provided as examples and not limitations. As those skilled in the art will appreciate the present examples are suitable for application in a variety of different types of computing systems.

The method or system disclosed herein is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The method or system may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The method or system may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the method or system includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Combinations of the any of the above should also be included within the scope of computer readable storage media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface or .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from additional operating systems application programs other program modules and program data for example different copies of any of the elements. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad pen scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface or graphics display interface . In addition to the monitor computers may also include other peripheral output devices such as speakers not shown and printer not shown which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer. The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation remote application programs may reside on a memory device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A method and system is described for providing data to a user in a first user interface such as a window and providing additional information corresponding to the data in a second user interface. The first user interface and data contained therein may be generated by a first application and the additional information in the second user interface may be generated by a second application. The first application and the second application may be different applications. For example the second application may be a separate and distinct application from the first application and may further contain executable code which upon execution causes the second application to hook into the first application. In this example the second application may monitor the first application and the data provided by the first application. Monitoring of the first application by the second application may be accomplished in a variety of ways. For example the monitoring may include observing and or tracking actions or events taken or performed in the first application. Data generated by the first application resulting from one or more actions or events occurring in the first application may further be observed or tracked by the second application. Based on the observations by the second application of the events actions or generated data in the first application the second application may generate obtain identify or retrieve additional data. The additional data may be data that is distinct or different from the data generated in the first application and may describe or characterize the events actions or generated data in the first application. In another example the second application may observe events actions or generated data in the first application via a third application. For example the second application may monitor a monitoring application e.g. file system watcher which may observe the events actions or generated data in the first application. The second application may receive updates or event information from the monitoring application. In this example the second application does not directly monitor or observe the first application. Rather the monitoring application may observe the events and generate information pertaining to events at the first application. This information may be available to the second application

Thus based on the first application or the data provided by the first application the second application may obtain additional data or information and may provide the additional data or information in the second user interface. In one example the second application may obtain the information from an operating environment in which the first and or second application is running. The information obtained from the operating environment may further be selected based on any actions or events from the first application. In another example the data obtained by the second application from the operating environment describes or characterizes the data provided by the first application but is different from the data provided by the first application. Thus in this example the data provided by the first application does not contain the information provided by the second application and the information provided by the second application does not include the data provided by the first application.

In another example the second application hooks into the first application and monitors the first application however the first application functions independently from the second application. When the first application functions independently from the second application actions or events performed by the second application do not materially effect the actions or events taken at the first application. Thus for example if a command is executed by the second application and the first application functions or operates independently from the second application the first application performs actions and other functions in materially the same fashion as if the command at the second application had not been executed. In other words the first application functioning independently from the second application refers to a condition in which activity of the first application is substantially unaffected by any activity performed at the second application. Also removal of the second application has no substantial effect on the first application if the first application operates independently from the second application.

Alternatively or additionally the first application may be oblivious or substantially oblivious to the second application while the second application monitors the first application. In one example the first application is oblivious or substantially oblivious to the second application which refers to a state in which the first application is unaware or substantially unaware of the second application. By being unaware of the second application the first application performs any functions as if the second application is not present and or not executing or operating. In a case in which the first application is oblivious or substantially oblivious to the second application the second application may be removed entirely and the impact of the removal of the second application on any aspect of the first application is minimal or non existent. In another example the first application is oblivious to the second application but contains instructions received from the second application.

Also in this example the second application may monitor the first application for providing a condition in which the second application is aware of activities and or events performed by the first application and may also be aware of data generated by and or output or displayed by the first application. At the same time the first application is substantially oblivious to the second application such that the first application may be substantially unaware of any information provided by the second application or actions events performed at the second application.

Alternatively or additionally the second application may observe or monitor the first application but may not control or otherwise modify the first application. In this example the second application may monitor the information generated by the first application but does not change the generated information. The second application may generate additional information based on the observed generated information from the first application and provide the generated additional information to a user. However in this example the second application does not control modify or otherwise affect the information generated by the first application. Also the first application may not control the additional information generated by the second application. Additionally the first application may also be substantially oblivious of the second application such that the first application is substantially unaware of the additional information generated by the second application. In this example activities and functions performed by the first application are unaffected by the presence absence or operation of the second application.

In another example the second application hooks into the first application via an application programming interface. The first application may contain an interface such as an application programming interface API through which a second application may access the first application. For example the second application may execute to access the first application via the API or by any other means to obtain information on a characteristic of an aspect of the first application such as but not limited to data generated or output by the first application a state of the first application or a context of the first application.

A processor may receive an input command via input and may process data accordingly. In one example the system includes a host application module for executing a host application. The host application may be any number of types of applications for providing data or information. For example the host application may include an application for providing a display of folders action items calendar information e mail information etc. Any relevant information may be provided by the host application. The host application module may execute to generate the relevant information and may further provide a user interface for providing the relevant information. The processor may instruct the host application module to provide the relevant information and user interface. In addition the information from the host application module may further be forwarded from the processor to a data module for formatting adjustment etc. and may further be output via output .

The system may further include a companion application module for obtaining and providing additional information. The additional information provided by the companion application module may be selected based on information generated by the host application module . In addition the additional information may be located at or obtained from any number of data sources. For example the companion application module may locate and obtain the information from the operating environment .

The companion application module may further include the additional information in data output via the data module and output . The additional information may contain any type of information of relevance to the information generated by the host application module . For example the host application module may generate data including a list of folders or files stored on a computing device. A user may input a selection of a desired folder or file via input which may be further processed by processor . Based on the selection input the processor may control the host application module to select the desired selection. For example the host application module selects the desired folder or file selected by the user.

The companion application module may execute to monitor the host application module . In this example the companion application module hooks into the applications such that the companion application monitors the activities and or events performed at the host application module . The companion application may monitor any element or component of interest in the host application. For example the companion application may monitor files generated by the application process or may monitor components or events that are separate from the application process itself. In addition the companion application module may further monitor the data generated by the host application module . In this case the host application module selects a desired folder. The companion application module may detect the selection by the host application module and may further obtain additional information such as metadata pertaining to the desired folder. The companion application module may obtain the additional information or metadata in any number of ways. For example the companion application module may obtain the desired information from the operating environment and may provide the obtained desired information to the processor and or data module . The desired information may be output via output .

Alternatively or additionally the host application module may be oblivious to the companion application module such that the actions performed or data generated at the host application module may be unaffected by activities or actions performed at the companion application module . Conversely the companion application module monitors activity and or data generated at the host application module . Hence in this example the companion application module is aware of or not oblivious to host application module .

A selection may be received STEP such as the selecting of a displayed component from the data displayed on the device. The selection may correspond to a selection of a displayed folder a hyperlink a contact or any type of relevant information and may include any action in the first window. For example the action may include moving a cursor or mouse to a particular part of the first application window without actual selection or activation of the mouse.

The presence or availability of metadata corresponding to the displayed data may be determined STEP . If no metadata is available No branch of STEP the process ends STEP otherwise the relevant metadata is received STEP and displayed STEP . In this example metadata includes any information that describes characterizes or provides a context for other data. Thus the metadata includes information that describes any of the data generated or provided by the first application or any action taken by or performed in the first application.

For example a first application may execute to provide a list of choices of elements to be selected. A selection of one of the choices from the list of elements is received STEP . Metadata i.e. information that describes aspects of other data may be identified by a second application. The second application which may be different separate and or distinct from the first application may execute to monitor observe or track the first application and or data generated or provided by the first application. The second application may determine if metadata is available corresponding to the selected element from the list of elements from the first application. In one example metadata is identified and located in the operating environment in which the first application and or second application is executing. The operating environment may include any computing device operating system peripheral devices remote devices etc. The second application may obtain the metadata STEP and may further display the metadata STEP .

The second application may further display the metadata to describe characterize or provide a context for the data generated by and displayed by the first application in a separate user interface. For example the second application is a separate different and distinct application from the first application where each of the first application and the second application generates a user interface. The second application may contain executable code the execution of which causes the second application to hook into the first application. After the second application hooks into the first application the second application may provide a user interface in cooperation with the first application. In this example the second application monitors the actions of the first application but the first application does not monitor the actions of the second application. For example the first application may be oblivious to the second application such that the first application is unaware of the actions and or events performed by the second application.

Thus in this example the first application generates data and a user interface for providing the generated data. The second application which is a different distinct and separate application from the first application may hook into the first application and may monitor actions or events performed in the first application. Also the second application may observe or track data that is generated by the first application. Based on the data generated by the first application and observed tracked by the second application the second application may locate and or obtain metadata associated with the data generated by the first application. The metadata may include any information that describes characterizes or provides a context for the data generated by the first application.

Additionally the second application may generate a user interface separate and distinct from the user interface generated by the first application. The second application may also provide the metadata i.e. data describing data generated by the first application and or provided by the first application in the first application user interface . The second application may provide the metadata in the user interface generated by the second application.

Also the user interface generated by the first application may be connected or attached to the user interface generated by the second application. As described in more detail below the user interface generated by the first application and the user interface generated by the second application may be adjacent to each other or attached to each other. Also the user interfaces may be non overlapping such that no part of either of the user interfaces obscures any part of the other user interface. Such user interfaces may be adjacent to each other and connected or attached to each other. In addition modifications to any one of the user interfaces may be performed on both of the user interfaces as a single unit as described in further detail below.

In another example the companion application monitors the host application but does not otherwise alter or modify the host application. For example executable code associated with the host application remains unchanged with respect to the presence or the activities of the companion application. In yet another example the host application is oblivious to the companion application. For example the host application may function in a predetermined manner if the companion application is absent or inactive and may function in the same predetermined manner if the companion application is present or active.

If the companion application detects data in the host application Yes branch of STEP the companion application may obtain metadata corresponding to the detected data in the host application. The companion application may obtain the metadata from any number of sources. For example the companion application may locate and or obtain the metadata from an operating environment in which the host application and or the companion application is are running.

The companion application may further generate data content STEP based on the detection of the detected data from the host application. The data content from the companion application may further be output to a user or may be stored if desired. The data content generated by the companion application may include information based on the metadata obtained from the operating environment. For example the data content may include lists of topics people objects entities etc. that are related to at least a portion of the data detected from the host application.

The host application and the companion application may each generate a user interface such as a window STEP . In this example the host application and the companion application each generate a separate and distinct window in which the companion application window companion window is attached to the host application window host window STEP . The companion window may be attached to the host window such that actions or modification applied to any one of the companion window or the host window results in the action or modification applying to both of the windows. For example if the host window is maximized in size on a display the host window and the companion are each modified proportionally such that the proportional dimensions of the host window and the companion window remain substantially the same while the combination of the host window and the companion window are maximized to the size of the display region in which the host window and companion window or combination of the two windows are displayed.

In addition the data generated by the host application may be displayed or output in the host window and the data or metadata obtained or generated by the companion application may be displayed or output in the companion window STEP . The data generated by the host application may be substantially different from the metadata obtained or generated by the companion application. Thus in this example the data generated by the host application contains may contain none of the metadata obtained or generated by the companion application and the metadata obtained or generated by the companion application may contain none of the data generated by the host application.

The companion application may further generate additional information pertaining to data generated by the host application. For example the companion application may detect data generated and or provided by the host application and based on the detected data the companion application may locate and or obtain additional information e.g. from the operating environment . The additional information may include metadata that describes or provides a context for the detected data from the host application. The additional information e.g. metadata may be output to a user. For example the additional information may be displayed STEP .

In STEP the combination window is displayed. Also the combination window may be altered or modified as a single unit such that modifications to one of the components of the combination window may apply to the other components of the combination window. For example the combination window may include a host window attached to a companion window. A user may move the host window from a first location on a display to a second location on the display. Movement of the host window of the combination window results in this example in a tandem movement of the companion window. When a host window and a companion window move or is otherwise altered or modified in tandem the host window and the companion window are moved altered or modified in a substantially similar fashion. Hence in the combination window in which the host window and the companion window are modified in tandem the host window and companion window are acted upon or modified at a single unit in which changes are applied proportionally to both the host window and the companion window.

In STEP an input is received at the host application window. For example a user may select from a menu of selections provided on the host application window. The selection may include any number or type of elements. For example the selection may be a selected folder that may contain data files stored on a computing system. The selection may also be a selection on a website a contact on a contact list an item on a to do list an appointment on a calendar etc. Any selection may be provided in the host application window and may be selected.

In STEP the companion application may detect the input or selection in the host application. For example a user may select an element from a list of elements generated or obtained by the host application. The companion application may detect the user selection and based on the selection the companion application may locate and or identify additional information such as metadata associated with the selected item in the host application. For example the selection may include a folder of data files. The companion application may identify the selection as a folder of data files and may further locate information associated with the folder. In one example the companion application locates the additional information pertaining to the folder in the operating environment. The identified or located additional information may not be accessed or provided by the host application. Also the host application may not have an awareness of the actions or events performed at the companion application e.g. locating the additional information . As such the host application may be oblivious to the companion application. The data content obtained or located by the companion application in this example may include additional information associated with the selected folder. For example identities of user having access rights to the folder may be obtained by the companion application and may further be provided or output in a user interface corresponding to the companion application e.g. the companion window . Any additional information describing or providing a context for the data from the host application e.g. the folder may be similarly obtained and provided by the companion application.

In another example the additional information provided by the companion application in the companion window may be modified. For example the information may be updated in real time as conditions pertaining to the selected data in the host application change. Also the host application may be oblivious or unaware of changes to the selected data in the context of the additional data provided by the companion window. In this example the companion application hooks via an API into the host application to provide a companion window containing additional information describing or otherwise providing a context for selected data in the host application window. Also the additional data provided in the companion window may be updated based on changes to the data in the host application while the host application may be oblivious or unaware of the presence or activity of the companion application. In yet another example the host application may be oblivious or unaware of the changes to the data in the host application.

Also a companion window may be generated by a companion application. The host application may be separate and distinct from the companion application and may generate the host window and the data provided in the host window independently of the companion application or the companion window . For example the host application may be oblivious or substantially oblivious to the companion application such that the state of actions or events performed in the host application and data provided or displayed in the host window is maintained in the same or substantially the same state regardless of the state of the companion application or the companion window .

In the example illustrated in the companion application generates the companion window . Also the companion window is attached or connected to the host window and provides information associated with at least a portion of the data generated by the host application and provided in the host window . In this example the Pictures folder in the host window is selected. The companion application may hook into the host application and monitor the host application and detect the selection of the file folder . Based on the selection of the Pictures folder the companion application obtains additional data describing the selected file folder . For example the companion application may locate or receive the additional data from an operating environment.

As also illustrates the additional data which may include metadata describing the selected data in the host window e.g. the Pictures folder may be displayed by the companion application in the companion window . As indicated above the companion window may be attached or connected to the host window such that manipulations or modifications to the host window may be proportionately applied to the companion window . For example resizing minimizing or maximizing the host window may result in an equivalent or proportional modification in the companion window . Hence in this example the host window and the companion window may be modified moved etc. in tandem.

The companion window may contain any relevant information such as metadata that describes characterizes or provides a context for the state selection or content of the data provided in the host window . illustrates an example of a companion window and the metadata contained therein. In this example a companion window contains a name or other identifier of data selected in a host window. In this case the selected data is the Pictures folder displayed in the host window of . The companion window which may be attached or connected to the host window such that one aspect of the companion window abuts an aspect of the host window. In this example the companion window and the host window are attached but are non overlapping.

In the example of the companion window illustrated in the companion window may further include member names or identifiers. In this example the member names identified may correspond to individuals who have access to share a particular data. In this example members sharing access to the Pictures folder may be listed in the companion window.

Additionally or alternatively the companion window may include a list of devices that are capable or authorized to access a particular data. For example a user may have multiple devices e.g. a home computer and a work computer . Any of the multiple devices having access to the specified data may be listed in the companion window. Any additional information pertaining to the selected data in the host window may be included in the companion window.

In addition the companion window may be provided in various forms. For example the companion window may be altered to different sizes to provide additional space for other displayed components such as the host window on the display. illustrates the example of in which the companion window is reduced in size with elements within the reduced companion window displayed as icons. illustrates the example of in which the companion window is further reduced in size such that the companion window is collapsed. The collapsed companion window may further provide an indication of the status of the companion window for example by altering the color pattern shade tone etc. of the collapsed companion window . The altered companion window of or may further be reverted back to a standard size and display. For example selection of an icon in the companion window of may return the companion window and host window to the original proportions.

It is understood that aspects of the present description can take many forms and embodiments. The embodiments shown herein are intended to illustrate rather than to limit the description it being appreciated that variations may be made without departing from the spirit of the scope of the invention. Although illustrative embodiments have been shown and described a wide range of modification change and substitution is intended in the foregoing disclosure and in some instances some features may be employed without a corresponding use of the other features. Accordingly it is appropriate that the appended claims be construed broadly and in a manner consistent with the scope of the invention.

