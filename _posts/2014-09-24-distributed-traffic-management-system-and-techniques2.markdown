---

title: Distributed traffic management system and techniques
abstract: Approaches, techniques, and mechanisms are disclosed for implementing a distributed firewall. In an embodiment, many different computer assets police incoming messages based on local policy data. This local policy data is synchronized with global policy data. The global policy data is generated by one or more separate analyzers. Each analyzer has access to message logs, or information derived therefrom, for groups of computer assets, and is thus able to generate policies based on intelligence from an entire group as opposed to an isolated asset. Among other effects, some of the approaches, techniques, and mechanisms may be effective even in computing environments with limited supervision over the attack surface, and/or computing environments in which assets may need to make independent decisions with respect to how incoming messages should be handled, on account of latency and/or unreliability in connections to other system components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09621588&OS=09621588&RS=09621588
owner: NETFLIX, INC.
number: 09621588
owner_city: Los Gatos
owner_country: US
publication_date: 20140924
---
The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

The attack surface of a networked computer system consists of the components within that computer system that are exposed to access by a potential attacker. Such components may include for instance applications executed by a web server and other server based applications. It is typically desirable for user operated clients to interact with these components over one or more computer networks. Thus the components feature various interfaces for interacting with clients over those one or more networks. For example the components may expose web based graphical user interfaces GUIs comprising user input controls interfaces for receiving user input via predefined protocols such as Hyper Text Transfer Protocol HTTP or Simple Object Access Protocol SOAP customized application programming interfaces APIs and or other services by which the components receive and react to communications from user operated client devices.

While user access to the components is typically desirable providing the user access sometimes leaves the components vulnerable to unauthorized uses in which an unauthorized user succeeds in causing the components to execute in manners that are unintended or undesired by the owner of the computer system. Examples of unauthorized uses which are also known as attacks include without limitation passive attacks such as wiretapping and active attacks such as denial of service scripted account creation server or account hijacking buffer overflow heap overflow and format string attacks.

For the purposes described herein an attack need not necessarily be malicious in intent but may rather be any undesirable behavior including for example a user unintentionally over using system resources. For instance a computer system may provide access to a wide variety of media resources and a user may unintentionally create or deploy software code such as code for a media server that when executed causes a computing device to repeatedly and systematically request access to the media resources so as to compile and or analyze a library of information about the media resources. This behavior may however be undesirable for the computer system since it may negatively impact the system s ability to respond to more traditional ad hoc requests for media items. Various traffic management schemes may be devised to address this and other undesirable behavior.

A firewall is an example traffic management component of a networked computer system. Examples of firewall components include dedicated appliances software based applications running on computer devices within a system or any other system components that act as gateways for network traffic. Many conventional networked computer systems are configured such that a firewall intercepts all or at least the majority of messages sent between potentially untrusted client devices outside of the computer system and trusted components within the computer system. The messages may be intercepted at one or at multiple levels. For instance some firewalls intercept messages at a network layer or transport layer such as messages in the form TCP or UDP packets and or at an application layer such as messages in the form of FTP DNS or HTTP requests. Other firewalls intercept any of a wide variety of message types at any of a wide variety of layers.

Conventionally a firewall is configured to compare one or more policies to the intercepted messages so as to determine one or more actions to take with respect to the intercepted messages. A variety of different actions may be taken such as allowing the message to reach its addressed destination redirecting a message blocking a message manipulating a message logging certain details about the message and so forth. Policies are sometimes referred to as filters in that they often filter out unwanted messages by blocking them altogether. A simple example of a policy is a rule that a message having characteristics that match certain criteria specified by the rule such as a specified source address or destination port should be blocked. A firewall may be configured to apply a variety of policies that are intended to block or minimize attacks on system assets. In some systems a firewall may even be adaptive in that it is configured to learn from previously received traffic and adjust its policies to better react to future attacks.

In networked computer systems where the attack surface is highly distributed it is often difficult to effectively deploy an adaptive firewall. A single attack may originate almost concurrently from a wide variety of sources and affect many different assets on the attack surface. It is thus useful to centrally analyze the traffic passing through the networked computer system so as to recognize certain attacks and understand their scope. Yet relying on a single centralized firewall component to intercept and analyze each message is sometimes undesirable or infeasible.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

Approaches techniques and mechanisms are disclosed for distributed traffic management in a networked computer system. In an embodiment many different computer assets police incoming messages based on local policy data. This local policy data is synchronized with global policy data. The global policy data is generated by one or more separate analyzers. Each analyzer has access to message logs or information derived therefrom for groups of computer assets and is thus able to generate policies based on intelligence from an entire group as opposed to an isolated asset. Among other effects some of the approaches techniques and mechanisms may be effective even in computing environments with limited supervision over the attack surface and or computing environments in which assets may need to make independent decisions with respect to how incoming messages should be handled on account of latency and or unreliability in connections to other system components.

According to an embodiment a computer system that implements distributed traffic management comprises a data repository storing global policy data that describes policies. The system further comprises a plurality of computer assets implemented at least partially by first computer hardware. Each asset of the plurality of computer assets is configured to receive messages from client devices store local policy data describing the policies at a computing device that implements the asset determine which of the policies apply to which of the messages identify policy based actions to perform with respect to the messages based on which of the policies apply to which of the messages send message information logged from the messages to an analyzer component and update the local policy data to reflect updates to the global policy data. The system further comprises an analyzer component implemented at least partially by second computer hardware. The analyzer component is configured to receive the message information from each of the plurality of computer assets collectively analyze the message information from each of the plurality of computer assets generate new policies based on collectively analyzing the message information and update the global policy data to describe the new policies.

In an embodiment each asset of the plurality of computer assets is deployed at an edge of a first network and wherein the client devices are deployed within a second network. In an embodiment an asset of the plurality of computer assets is deployed in front of a server application which is not in the plurality of computer assets and to which the messages received by the asset are directed. In an embodiment an asset of the plurality of computer assets is further configured to execute a web server application configured to respond to the messages received by the asset. In an embodiment the plurality of computer assets and the analyzer are deployed in a first region of the computer system the computer system further comprising one or more additional regions each region comprising a separate plurality of computer assets and a separate analyzer the data repository being shared between the first region and the one or more additional regions. In an embodiment the first computer hardware includes one or more computing devices that are not included in the second computing hardware.

In an embodiment the analyzer is further configured to identify one or more of the new policies based on determining from the collective message information that a condition described by a system level policy exists generate one or more asset level policies comprising logic for identifying messages to block or redirect in view of the described condition and update the global policy data to include the generated one or more asset level policies.

In an embodiment the analyzer is further configured to identify a distributed attack on the computer system based on the collective message information generate a first policy comprising logic for identifying messages involved in the distributed attack and update the global policy data to describe the first policy. In an embodiment the analyzer is further configured to based on the collective message information identify an attack that is occurring at a first asset of the plurality of computer assets generate a first policy comprising logic for identifying messages involved in the attack and update the global policy data to describe the first policy. A second asset of the plurality of computer assets is configured to based on the updated global policy data update the local policy data of the second asset to describe the first policy the second asset having not yet received messages involved in the attack at the time the local policy data of the second asset is updated and based on the first policy block or redirect a message involved in the attack.

In an embodiment each policy of the policies is a data structure that indicates logic for determining whether the policy applies to a given message as well as one or more instructions indicating one or more particular policy based actions to perform with respect to the given message if the policy applies to the given message. In an embodiment the messages indicate designated actions for the plurality of assets to perform wherein each asset is configured to perform the applicable policy based actions instead of or in addition to the indicated designated actions for messages to which the policies apply. In an embodiment a policy based action indicated by a given policy of the policies is one of blocking any message to which the given policy applies redirecting any message to which the given policy applies or allowing an asset to respond normally to any message to which the given policy applies.

In an embodiment updating the local policy data comprises one of receiving policy data describing the global policy data from the analyzer component or retrieving the global policy data from a shared data repository.

According to an embodiment a data processing method comprises storing at a computer asset local policy data describing policies. The method further comprises receiving at the computer asset messages from client devices. The method further comprises determining at the computer asset which of the policies apply to which of the messages. The method further comprises identifying at the computer asset policy based actions to perform with respect to the messages based on which of the policies apply to which of the messages. The method further comprises sending from the computer asset message information logged from the messages to an analyzer component. The message further comprises updating by the computer asset the local policy data to reflect updates to global policy data generated by the analyzer component. The computer asset is implemented by one or more computing devices.

In an embodiment the method further comprises applying policies from the local policy data to messages even when the analyzer component and the global policy data are inaccessible to the asset. In an embodiment the computer asset is deployed in front of server application to which the messages received by the computer asset are directed. In an embodiment the method further comprises executing at the computer asset a web server application that responds to at least some of the messages received by the computer asset. In an embodiment updating the local policy data comprises one of receiving policy data describing the global policy data from the analyzer component or retrieving the global policy data from a shared data repository.

In an embodiment each policy of the policies is a data structure that indicates logic for determining whether the policy applies to a given message as well as one or more instructions indicating one or more particular policy based actions to perform with respect to the given message if the policy applies. In an embodiment a policy based action indicated by a given policy of the policies is one of blocking any message to which the given policy applies redirecting any message to which the given policy applies or allowing an asset to respond normally to any message to which the given policy applies. In an embodiment the messages indicate designated actions for the plurality of assets to perform and the method further comprises performing applicable policy based actions instead of or in addition to the designated actions indicated for messages to which the policies apply.

In an embodiment the method further comprises receiving at the analyzer component message information logged at each asset of a plurality of computer assets including the computer asset. The method further comprises collectively analyzing by the analyzer component the message information logged at each of the plurality of computer assets. The method further comprises generating by the analyzer component new policies based on collectively analyzing the message information. The method further comprises updating by the analyzer component the global policy data to describe the new policies.

In an embodiment the method further comprises executing multiple sets of computer assets that perform the steps of the above recited computer asset. The assets in a given set of the multiple sets send their respective message information to a same analyzer component of a plurality of analyzers which is assigned to the given set. The method further comprises storing the global policy data in a data repository shared amongst at least the plurality of analyzers. Each of the plurality of analyzers separately generates new policies and updates the same global policy data to describe the respectively generated new policies.

In an embodiment the method further comprises identifying at the analyzer component one or more of the new policies based on determining from the collective message information that a condition described by a system level policy exists. The method further comprises generating one or more asset level policies comprising logic for identifying messages to block or redirect in view of the described condition. The method further comprises updating the global policy data to include the generated one or more asset level policies.

In an embodiment the method further comprises identifying by the analyzer component a distributed attack on the plurality of computer assets based on the collective message information. The method further comprises generating a first policy comprising logic for identifying messages involved in the distributed attack. The method further comprises updating the global policy data to describe the first policy.

In an embodiment the method further comprises based on the collective message information the analyzer component identifying an attack that is occurring at the computer asset. The method further comprises generating by the analyzer component a first policy comprising logic for identifying messages involved in the attack. The method further comprises updating by the analyzer component the global policy data to describe the first policy. The method further comprises based on the updated global policy data at another computer asset of the plurality of computer assets updating local policy data of the other asset to describe the first policy the other asset having not yet received messages involved in the attack at the time the other asset updates the local policy data of the other asset. The method further comprises based on the first policy the other asset blocking or redirecting a message involved in the attack.

According to an embodiment a data processing method comprises receiving message information from each asset of a plurality of computer assets the message information describing messages received by the asset. The method further comprises collectively analyzing the message information from each of the plurality of computer assets. The method further comprises generating policies based on collectively analyzing the message information the policies describing logic for identifying messages to which the policies apply as well as policy based actions to perform with respect to the messages to which the policies apply. The method further comprises updating a global policy data repository to describe the policies. The method further comprises sending policy data to the plurality of computer assets the policy data at least describing the policies in the global policy data repository. The method is performed by one or more computer devices that implement an analyzer component.

In an embodiment the analyzer component is one of a plurality of analyzers each configured to perform the steps recited in the previous paragraph with respect to a different plurality of computer assets. The global policy data repository is shared amongst at least the plurality of analyzers.

In an embodiment the method further comprises identifying one or more of the policies based on determining from the message information that a condition described by a system level policy exists. The method further comprises generating one or more asset level policies comprising logic for identifying messages to block or redirect in view of the described condition. The method further comprises updating the global policy data to include the generated one or more asset level policies.

In an embodiment the method further comprises identifying a distributed attack on the computer system based on collectively analyzing the message information. The method further comprises generating a first policy comprising logic for identifying messages involved in the distributed attack. The method further comprises updating the global policy data to describe the first policy.

In an embodiment the method further comprises based on the message information the analyzer component identifying an attack that is occurring at a first computer asset. The method further comprises generating a first policy comprising logic for identifying messages involved in the attack at at least a second asset of the plurality of computer assets the analyzer component having not yet received message information from the second asset indicating that the second asset has received messages involved in the attack. The method further comprises updating the global policy data to describe the first policy.

In an embodiment a policy based action indicated by a given policy of the policies is one of blocking any message to which the given policy applies redirecting any message to which the given policy applies or allowing an asset to respond normally to any message to which the given policy applies. In an embodiment sending the policy data comprises one of responding to direct queries from the plurality of computer assets to the global data repository or retrieving by the analyzer component the policy data from the global data repository and sending the policy data from the analyzer component to the plurality of computer assets. In an embodiment a first asset of the plurality of computer assets is deployed in front of server application to which messages received by the first asset are directed. In an embodiment a first asset of the plurality of computer assets executes a web server application that responds to at least some messages received by the first asset.

In other aspects the invention encompasses a computer apparatus and a computer readable medium configured to carry out the foregoing steps.

In an embodiment system is a server computer system comprising one or more server computer devices that collectively implement the various components of system as a set of server side processes. The server computer system may include web server application server database server and or other conventional server components that the depicted components utilize to provide the described functionality. In an embodiment certain server components may be implemented in full or in part using cloud based systems that are coupled to system by one or more networks such as the Internet. The cloud based systems may expose interfaces by which they provide processing storage software and or other resources to the components of system . In an embodiment the cloud based systems may be implemented by a third party entity on behalf of another entity for whom system is deployed. In other embodiments however the components of system may be implemented entirely by computer systems owned and operated by a single entity.

As used herein an asset is generally a logical or physical component of a networked computer system. The asset may be a computing device a system of computing devices or a component implemented by any combination of hardware and or software at such computing devices or systems of computing devices. In an embodiment an asset comprises one or more server side interfaces by which server based applications interact with client computers over one or more computer networks. For example assets may include web servers application servers specific websites specific applications mail servers and so forth.

System comprises amongst other components a set of assets connected by a network or a group of networks . Network may be for instance a trusted network such as an internal network or intranet. System may depending on the embodiment include a wide variety of types of components that are not depicted such as other assets routers personal computers development devices backup servers and so forth. Neither network nor the components directly connected thereto need necessarily be constrained to a single physical area. For instance network may in some embodiments comprise multiple sub networks deployed in different geographic regions but which are connected via dedicated lines virtual private networks and or any other suitable mechanism s .

Assets function at least in part as traffic management components responsible for managing at least some aspect of network traffic on network . Assets are exposed to communications with clients over at least one network . In contrast to network network may be an untrusted and or unsupervised network external to system such as a public wide area network or the Internet over which the owner or operator of system does not exercise control. Hence communications may be received over network from client computing device that are not pre approved by the owner or operator of system . In at least one such embodiment each asset forms part of the attack surface of system in that each asset receives messages directly from one or more clients over network without the message having first passed through a firewall or other traffic management component in system . However in other embodiments a message may pass through any number of other components before arriving at an asset such as routers load balancers other assets or even dedicated firewalls. Moreover in at least some embodiments there may not be a distinction between network and network at all.

In some embodiments some or all of assets may be dedicated firewall appliances dedicated software firewalls proxy servers edge service applications load balancers gateway devices and or other traffic management components that are deployed in front of one or more other assets and through which messages directed to the other assets are routed for security or other purposes prior to delivery to the other assets. In other embodiments it may be advantageous to forego the use of separate traffic management components such that some or all of assets are themselves the intended destination of a message. For instance an asset may be a web application API server or streaming server that features its own integrated traffic management component.

In some embodiments one or more libraries of computing code may be made available for implementing the described techniques. The one or more libraries comprise instructions which when executed by an asset cause implementation of some or all of the depicted traffic management components of asset . Each asset may include or reference the same one or more libraries so as to implement the traffic management components. For instance the one or more libraries may be incorporated into an open source web application framework such as the Zuul framework for edge services produced by Netflix Inc. and each asset may be an instance thereof. Optionally each asset may then separately include code that implements other undepicted additional components to perform other functions with respect to messages. For instance some assets may execute code that implements additional web application components while other assets may execute code that implements additional API server components. In other embodiments assets may implement some or all of depicted traffic management components on an ad hoc basis rather than relying on a common set of libraries.

Clients may be individual computing devices or components thereof often operated by an end user. For instance a client may be a web browser on a desktop computer a set top media box an application executing on a mobile device and so forth. Via network certain components of system potentially including assets provide various networked services to the clients such as delivering web pages streaming media contents sending emails responding to Application Programming Interface API calls and so forth. To this end clients may send and or receive a variety of messages to assets .

Asset comprises at least one message handler component . Message handler is configured to receive messages from and or to the clients over a communication interface. For the purposes described herein a message may include any data structure that is sent to or from a client or asset . A message may be for instance a datagram or packet in accordance with any of a wide variety of standard networking protocols such as without limitation a TCP or UDP packet HTTP request or response or FTP packet. In an embodiment a message is constructed so as to include a payload comprising the contents of the message as well as header or transactional information such as identifiers for the sender and or the intended recipient e.g. IP addresses MAC addresses domain names email addresses etc. a port number over which the message is being communicated a message type or other categorical information timestamps routing instructions and so forth. However techniques described herein are not limited to any particular form of message. There may furthermore be multiple layers of messages in that a group of related messages in one layer such as a network layer or transport layer are constructed or interpreted to form a single message at another layer such as an application layer. Depending on the embodiment the described techniques may be applied to messages of any of a wide variety of message types and or messages at one or several different layers.

Message handler may be configured to identify and perform one or more designated actions in response to receiving a message. Example designated actions include without limitation retrieving and returning requested data structures generating and storing or returning data structures based on parameters specified by the message forwarding the message to another asset specified or indicated by the message selecting an asset to forward the message to and so forth. A designated action may be specified in the message. For instance message handler may be a web application server and the message may be a request to return data from a specified location or execute a specified command. Or the designated action may be implicit from some aspect of the message such as header or transactional information. For instance a destination IP address port number and or URL path may indicate to the asset to forward the message to another asset. In some embodiments the designated action may be the same for all messages received by the asset . For instance asset may be a proxy server component that is configured to always forward messages to a specific server or application.

However prior to performing any designated action for a message or even identifying the designated action message handler is configured to send the received message to a policy enforcer for pre processing so as to determine whether any policy based action should be performed prior to or instead of any designated action. As a result of this pre processing by policy enforcer described elsewhere in this application message handler may in some embodiments receive an indication of whether the message handler should continue to process the message in a normal manner and thus perform the designated action s ignore the message or perform other policy based actions such as redirecting the message or replying with a designated status code or error message. In other embodiments policy enforcer may be responsible for performing policy based actions and message handler will thus only receive an indication of whether it should continue processing the message in the normal manner.

Message handler is further configured to send the received messages or information derived therefrom to a message logger component . The messages and or information derived from the messages are then logged in message logs . Message logs may be stored in any suitable form of data repository. Message logs may describe any suitable properties for a message such as header field values payload contents and so forth. Message logs may be a temporary repository such as a circular cache in which only a certain amount of messages is stored. Or message logs may be stored in a more permanent form.

Depending on the type of action designated by a given message and or on whether any policies are applied a client may or may not receive a reply message in response to the given message. A reply message may be sent from or relayed through message handler or another component of asset . Or if the asset relayed the original message to another component of system the reply message may in some embodiments be received directly from that other component. Message logs may further indicate whether a given message was responded to how it was responded to and or message logs may include operating statistics related to processing the message such as system resource usage.

Asset further comprises policy enforcer . Policy enforcer is configured to analyze messages and or information associated with the messages in view of policies recorded in local policy cache . Local policy cache stores the policies as data structures such as files lines of files database records and so forth on a storage device that is in or directly connected to a computing device on which asset is implemented so that the policies are readily available to policy enforcer .

A policy comprises logic for determining whether a policy applies to a message as well as one or more instructions indicating one or more policy based actions to perform with respect to the message if the policy applies. The logic may be based on intrinsic details of the message such as header information or payload contents. The logic may optionally be further based on information about previous messages that may be related to the instant message such as a count of previous messages of a certain type or that have a certain designated source. This type of information may be logged in for example message logs .

For some policies the logic may be a simple specification of a particular field or characteristic of the message to examine along with one or more values or value ranges that if matched indicate that the policy applies to the message. Other policies may specify additional message fields or characteristics for examination. As another example the logic may specify a function for calculating a statistic based on all messages received over a period of time that have for a specified message field or characteristic a same value or a value within a same range of values as the instant message. The logic may further indicate a value to compare the calculated statistic to in order to determine if the policy applies. Of course the techniques described herein are not limited to any particular type of logic for expressing a policy and may be utilized with respect to a wide variety of policies of varying complexity.

If it is determined that a policy applies to a message depending on the embodiment policy enforcer may perform the one or more policy based actions that should be taken with respect to the message or instruct another component such as message handler to perform the one or more policy based actions.

System further comprises at least one analyzer . Analyzer is external to assets . For instance analyzer may execute on a different set of one or more server computing devices than some or all of assets . Analyzer is configured to analyze messages received at multiple assets identify new policies based on the analyses and publish the new policies for use at the multiple assets .

To this end each asset comprises a reporting component configured to send messages and or information about messages received at that asset to the analyzer . As depicted reporter operates asynchronously relative to message handler in that it monitors message logs for new records and as needed streams data to analyzer reflecting those new records. However in other embodiments message handler or message logger may call reporter immediately upon processing a new message without reporter necessarily needing to access message logs . Reporter may stream information for each new message immediately to analyzer . Or reporter may batch information for multiple messages and stream the batched information at times determined according to any of a wide variety of rules or protocols so as to optimize resource usage.

In an embodiment reporter sends a log of each message. In other embodiments reporter may send a log for a message only if the message meets some criteria or rule indicating that the message is of interest. Depending on the embodiment the log may comprise the full message or only certain header or transactional information. In an embodiment instead of sending an individual log for each message data derived from groups of messages may be aggregated together into various statistics and sent to the analyzer .

Analyzer is configured to store the message information in a message database . Analyzer further comprises at least one log analyzer configured to analyze the message information in message database on a continual basis at intervals and or in response to triggering conditions.

Log analyzer is further configured to provide state information for system to a policy generation component of analyzer . The state information may include a variety of information depending on the embodiment such as a count of certain types of messages received by assets per client over a certain amount of time a number of active connections to each asset network resource usage trends memory usage trends processor usage trends indications of how frequently existing policies have been applied and so forth.

In an embodiment the log analyzer may further be configured to include in the state information data that characterizes certain clients based on the message information. For instance the log analyzer may implement logic that classifies a client as currently being a potential risk based on how often the client has made a certain type of request over a certain period of time. The exact characterizing logic may be configurable by an administrator and or vary depending on the embodiment.

The frequency with which or condition s in response to which the state information is provided to the policy generation component may also vary from embodiment to embodiment. The state information need not be sent all at once. For instance log analyzer may report individual items of the state information as those items are identified.

In an embodiment log analyzer may further be configured to provide one or more server interfaces by which other components in system may query for various state information available to log analyzer . For instance an asset in system may query the log analyzer for information with respect to communications if any with a particular IP address or domain. Such a query may be useful for a variety of reasons for instance if a server has received suspicious traffic from the particular IP address or domain and the results of the query indicate that the suspicious traffic has occurred frequently in the past the server may be configured to proactively take actions such as blacklisting the IP address or domain.

Based on the state information from log analyzer policy generator is configured to identify potential security threats or other risks to the integrity of system . Based on the identified risks policy generator is further configured to generate modify and or delete policies stored in policy database so as to most optimally address the identified risks and in some embodiments remove policies that were intended to address risks that no longer exist . A large number of techniques exist or are possible for identifying risks and generating policies and the policy generator may utilize any suitable technique s depending on the embodiment.

In an embodiment a policy generated by policy generator may be intended for application at each asset for which the analyzer is responsible. In an embodiment some policies may be tailored for application only at certain assets such as all assets in a certain geographic region or cluster or all assets of a certain type or even a single specified asset . In an embodiment a policy generated by policy generator comprises logic sufficient enough for a given asset to identify messages that are applicable to that policy based solely on information that is already available to asset . For example a policy may have enough information for a single asset to identify an applicable message to block even if that single asset lacks access to message logs from other assets and or without the single asset being required to communicate about the message with any other components of system .

In an embodiment when a policy has been generated based on traffic information the policy may be distributed to arbitrary endpoints that may not actually be contributing to the data analysis collection. For example log analyzer may discover that a given IP address is bad . Policy generator may then generate a policy to block messages from the IP address. The policy may then be distributed to other systems for their own independent use outside of system . For instance a graylist of IPs that are suspected to be bad may be periodically published to another disconnected fraud detection system configured to use the graylist to calculate risk or fraud scores.

Once a policy has been generated modified or deleted analyzer updates the policy database to include the generated or modified policy or to remove the deleted policy. A policy publisher component of analyzer is then configured to publish the updated policies in policy database to each asset using any suitable push based and or pull based delivery technique s . In turn each asset comprises a policy consumer component configured to receive the policy updates and update the policy cache accordingly. In some embodiments policy publisher may merely be responsible for storing a policy in policy database and each policy consumer may be configured to access the policy database itself at various times so as to synchronize the corresponding local policy cache with the policy database .

In an embodiment one manner in which policy generator dynamically generates policies for assets is to utilize a set of user defined general system level policies to determine when to create more specific asset level dynamic policies. For instance a general policy may be to blacklist an IP address for a certain period of time if a certain type of request has been received at system more than a certain number of times over a certain period of time either at a single asset or at a number of assets in combination and to permanently blacklist the IP address if this condition persists. When policy generator determines from the state information that the former condition has occurred policy generator may dynamically generate an asset level policy that instructs each asset to block messages from the IP address for the certain number of time. If the offending condition ceases policy generator may remove the policy. Or if the condition persists policy generator may modify the asset level policy to be enforced permanently.

Note that because message database includes message information gathered from multiple different assets the components of analyzer are capable of comprehensively analyzing message information for all assets in system to identify threats to the system as a whole instead of just threats that impact individual assets . This may allow the analyzer to identify certain types of distributed attacks sooner than would be possible in a system where each asset s logs were analyzed in isolation. Again because the state information describes the state of network traffic for system as a whole as opposed to simply with respect to an individual asset policy generator may be capable of generating policies to address distributed attacks more quickly than would otherwise be possible thus minimizing the impact of such attacks on the overall system . Moreover if one type of attack is seen at one of or a small number of assets the policy generator may generate policies for other assets or even all assets to address the attack thus allowing other assets to pre emptively deploy policies for attacks that those assets may have not yet seen.

In an embodiment each asset may comprise the same components as described with respect to asset of and each analyzer may comprise the same components as described with respect to analyzer of . Thus in an embodiment systems and may in fact be the same systems except that only a single region is depicted for system . In other embodiments assets and or analyzer may instead be configured to provide functionality similar to that described with respect to assets and or analyzer but using different components and or arrangements thereof than depicted in . While system comprises multiple analyzers it should be noted that the techniques described herein are equally applicable to systems with a single centralized analyzer such as would be the case if analyzer were the only analyzer component in system .

System is subdivided into two or more regions such as the depicted regions and . Regions and correspond to geographic regions. For instance region may correspond to a data center for North America while region may correspond to a data center for Europe. However in an embodiment regions and may be any groupings of the assets without regard to whether those groups correspond to a geographic region.

Each region may comprise one or more clusters. For instance as depicted region comprises clusters and clusters while region comprises clusters and . Each cluster comprises multiple assets . A cluster may be any arbitrary sub group of assets . For instance clusters and may be web clusters consisting of those assets in their respective regions that are or protect web server assets while clusters and may be API clusters consisting of those assets in their respective regions that are or protect API server assets. However in other embodiments clusters may be grouped by other categorization schemes geographic proximity implementing computing devices or any other suitable grouping criteria.

Each asset is configured to stream or otherwise send information about received messages to the analyzer of the region to which the asset belongs. The analyzers are configured to publish policies to a shared multi region data repository . For instance the multi region data repository may store policy database . The multi region data repository may be a central data repository or the multi region data repository may be distributed across each region . For instance each region may store its own copy of multi region data repository that is synchronized with copies in other regions through any suitable synchronization technique s .

At each asset a local copy of policies is kept synchronized with those found in the multi region data repository . An asset may access the multi region data repository directly or the synchronization may occur via the corresponding analyzer . Because each asset maintains a local copy of policies each asset can be assured that it is applying a relatively recent set of policies even if the asset were to lose contact with its corresponding analyzer or be unable to communicate with multi region data repository for a period of time. The frequency with which synchronization occurs may be configurable by an administrator based on for instance availability of system resources and how much lag time is acceptable between generating a policy at analyzer and enforcing the policy at an asset .

In an embodiment each analyzer may be configured to generate policies based on message information from just those assets in the region to which the asset belongs. Thus it is likely that some analyzers may generate policies that other analyzers on account of different network traffic in their respective region might not generate. In another embodiment each analyzer shares the message information for the corresponding region with analyzers from other regions by means of for instance storing message database as a shared database in multi region data repository . This may produce embodiments in which if each analyzer is similarly configured each analyzer may therefore eventually generate similar policies though on account of latency between data sharing processes in the different regions one analyzer might generate a policy well before another analyzer . This provides redundancy in the event that an analyzer was to fail.

In an embodiment system optionally comprises one or more mid tier components . Mid tier components are configured to accept inputs from human operators and or automated processes executing within system indicating additional policies to be applied by assets . These additional policies may be for instance fixed policies or business rules that analyzer might not have dynamically generated but that the human operators or automated processes identified using various techniques. Each analyzer may be configured to expose an API for the mid tier components to accomplish such tasks as retrieving state information or message logs e.g. via log analyzer retrieving a current set of policies or instructing the analyzer to modify or generate a new policy. For instance in an embodiment one mid tier component provides a web interface for a human operator to view statistics related to message logs and construct a new policy in view of such statistics. Another mid tier component may utilize data other than that available to analyzer to perform fraud checks and based thereon automatically generate new policies to send to analyzer . Yet another mid tier component may be a component optimized to generate policies by interacting with other non depicted components deployed within an asset e.g. a pre filter component deployed in front of the message handler that are equipped to quickly identify certain types of attacks such as those that can be detected with simple rate breach limits.

Systems and are but examples of systems that are suitable for performing the techniques described herein. Other systems may comprise additional or fewer components in varying arrangements. The division of functions between components may also differ depending on the embodiment. The subcomponents of asset and analyzer that are depicted in are logical components described with the intent of explaining the inventive techniques described herein. The subcomponents may or may not actually correspond to distinct sets of software applications packages modules classes processes or objects. For instance in some embodiments the processes of identifying risks and generating policies may be interrelated such that log analyzer and policy generator are implemented as a single server application. As another example message handler message logger and policy enforcer may in some embodiments form a single software application.

The various data elements described herein may be stored in a variety of manners. For example each of policy cache message logs policy database and message database may be stored in a separate one or more database tables databases or files in one or more data repositories. Alternatively some of these various data elements may be stored together within one or more combined database tables databases and or files.

Block comprises receiving a message from a client device such as a client or any other device from which a message may be received. The message may be any type of message such as an HTTP request or TCP packet. The message is received at an asset such as asset or any other suitable asset. The message may in an embodiment specify or otherwise indicate a designated action to be performed such as retrieving a file executing an application forwarding the message to another system component and so forth.

Block comprises identifying in local policy data for the asset a set of policies against which the message should be tested. For instance the local policy data may be policy cache or any other suitable data structure s that describe policies and are stored on a storage device that is local to the asset.

Block comprises identifying values for one or more message properties specified by the policies. For instance message properties may include without limitation header fields such as source or destination IP addresses a uniform resource indicator URI being requested a referring URI cookie or session data associated with the message timestamps transactional metadata the presence of certain keywords in the payload and so forth. In an embodiment the message properties may include statistics or other information derived at least partially from previous messages that were received by the asset and that have one or more similar properties. These previous messages may have been logged for this and other purposes in for instance message log or any other suitable local repository. The message properties may correspond to predefined or well known message field or characteristics such that the logic for deriving the message properties is already known to the asset. Alternatively a policy may specify how to identify a value for a message property by specifying functions or other executable logic configured to calculate the value from other message properties.

Block comprises based on the identified values determining whether a policy applies to the message. Any suitable technique for determining whether a policy applies to a message may be utilized. Block may comprise for instance comparing a value or range of values specified by the policy to the value or values identified in block . A policy may include one or more conditions. Depending on the logic specified by the policy a message to which the policy applies may be required to match anywhere from one to all of these conditions.

Block may be performed for some or all of the policies identified in block . In some embodiments blocks are performed using a number of iterations. For instance a single highest priority policy may be loaded in a first iteration. The necessary values for that policy are calculated per block . The determination of block is then performed for that single policy. If the policy does not apply then additional iterations are performed for each of the other policies in succession until a matching policy is found or until it is determined that no policies apply. In other embodiments various optimizations such as decision trees or state machines may be utilized such that multiple policies or even all policies may be considered in a single iteration. In an embodiment once a matching policy is found no other policies need be considered and thus block and optionally block need not be performed with respect to the other policies. In an embodiment all policies are considered regardless of whether a matching policy has been found and various prioritization mechanisms may be utilized to reconcile any conflicting policy based actions indicated by multiple applicable policies.

If it was determined in block that a policy applies to the message then flow proceeds to block . Block comprises performing one or more policy based actions associated with the applicable policy. Policy based actions may include for instance blocking the message e.g. blacklisting forwarding the message to a destination other than the destination to which the message is addressed allowing the message to proceed to the addressed destination e.g. whitelisting responding to the message with an error message or other suitable message and or any other suitable type of action that the asset may be configured to implement. As another example an action may be to log detailed message information that would not normally be logged for the message e.g. so as to be useful for subsequent policy determination or generation processes .

Block comprises determining whether to proceed with processing the message in the normal manner e.g. performing the designated action that is indicated by the message . Certain policy based actions such as blocking the message or responding with an error message may implicitly or explicitly instruct the asset not to proceed with processing the message in the normal manner and consequently flow proceeds to block in which processing of the message ceases. Other policy based actions such as allowing the message or logging detailed message information may implicitly or explicitly instruct the asset to proceed with processing the message in the normal manner. Consequently flow proceeds to block .

Flow also proceeds to block if it was determined in block that no policy applies the message. Block comprises processing the message in the normal manner such as by performing the designated action that is indicated by the message.

Block comprises receiving messages at assets such as would occur as a result of multiple assets performing block of . Though not depicted each of the assets may perform flow in response to some or all of the messages it receives. Performance of flow may proceed from block asynchronously relative to the assets performing flow .

Block comprises the assets identifying message information to send to an analyzer such as analyzer . Block comprises sending the message information to the analyzer. In some embodiments block is a trivial step since the message information is in essence a full copy of each message. In other embodiments block may comprise identifying messages of potential interest to the analyzer using a variety of detection techniques. For instance an asset may be configured with various rules or machine learning logic for identifying unusual messages that may impact policy decisions made by the analyzer . Thus rather than sending message information for all messages an asset will send message information only for the messages of potential interest. In an embodiment the message information may further be filtered summarized aggregated or otherwise processed so as to include only data e.g. fields properties statistics etc. that may be of interest to the analyzer. In an embodiment the message information may include data collected in association with processing a given message such as an amount of asset processing time or asset resources used to respond to the message or whether any policies were applied.

In an embodiment blocks are performed by processes at the assets that execute asynchronously relative to message reception in block . For instance each asset may include a message streaming component such as reporter which reads a local message log generated by the asset in response to block on a periodic or other basis and then performs blocks based thereon. In such embodiments the message information may be batched together for multiple messages at once. Or the message streaming component may continuously identify the message information but wait to deliver the message information until network resources become available and or other conditions are met. In other embodiments blocks are performed immediately responsive to receiving a message such as upon receipt of a message in block of flow or upon terminating flow with respect to the message.

Block comprises the analyzer logging the message information. The analyzer may log the entire message information or the analyzer may process the message information and log only filtered summarized or aggregated message information. The message information may be stored in any suitable repository such as message database and or multi region data repository .

Block comprises the analyzer identifying an undesirable condition indicated by the logged message information. For instance the analyzer may identify an attack on an asset from a certain IP address or group of IP addresses a distributed attack that is affecting multiple systems a type of message or group of clients that is consuming an undesirable amount of system resources and so forth. The analyzer may employ any suitable logic for detecting such conditions such as logic predicated upon pre defined rules or pattern recognition. Optionally block may further or instead comprise identifying undesirable conditions based on other state information for a system such as server load statistics e.g. indicating whether to generate a policy that temporarily redirect requests away from an overloaded or failed server . Block may also optionally comprise identifying previously undesirable conditions that no longer exist so that unnecessary policies may be removed.

Block comprises the analyzer generating at least one policy to address the undesirable condition. The policy may address the undesirable condition in any suitable manner such as blocking an IP address or range of IP addresses redirecting certain types of requests and so forth. Any suitable adaptive policy generation technique may be utilized. In an embodiment the policy is an asset level policy capable of application at a single asset without that asset having knowledge of what messages are being received at other assets and without that asset having to communicate with the analyzer.

In an embodiment the analyzer may generate certain asset level policies based on more general system level policies. The system level policies specify criteria that indicate an undesirable condition based at least on functions of various properties derived from the message information potentially including properties that reflect message information from multiple assets. The system level policies may further indicate what asset level policy should be generated when an undesirable condition is found.

In an embodiment a policy may include time criteria. The analyzer and or individual assets may be configured to automatically remove expired policies as indicated by their respective time criteria.

Block comprises storing data describing the policy in a repository of policy data such as policy database and or multi region data repository .

Blocks may be repeated with respect to a number of possible undesirable conditions before proceeding with the remainder of flow .

Block comprises sending policy updates to the assets. Block may comprise for instance the assets retrieving the policy data directly from the repository of policy data the assets requesting at intervals that the analyzer provide the policy updates and or the analyzer pushing new policy updates to the assets as new policies are generated or on some other basis. For instance each asset may comprise a consumer component such as policy consumer that listens for policy updates and or polls the analyzer or repository for policy updates.

Block comprises the assets synchronizing their own local policy data with the policy updates using any sort of synchronization means. Note that since the assets are performing various iterations of flow asynchronously relative to flow an asset may after performing one iteration of flow perform block before receiving another message. Thus the next iteration of flow for that asset will be based on updated policy data indicating one or more new policies that were not considered in the previous iteration of flow .

Flow is one example of generating and publishing policies. Other flows may comprise fewer or additional elements in varying arrangements. For example in one embodiment block is not necessary. In another embodiment blocks and may be combined. As another example flow may further comprise the analyzer receiving fixed policies reflecting business rules or filters generated by outside components as may be received for instance via mid tier components . These fixed policies may also be added to the repository of policy data in block .

In an embodiment blocks and or blocks are performed on a substantially continuous basis asynchronously with respect to the rest of the elements of flow . Meanwhile blocks may be repeated at periodic or other intervals or in response to various triggering conditions such as the receipt of certain types or quantities of message information.

In an embodiment blocks may be performed by multiple analyzers in a distributed system such as system or other distributed systems.

According to an embodiment an analyzer may generate asset level policies configured for some or all of without limitation enforcing security policies blocking malicious or fraudulent activity enforcing business rules executing custom action on requests based on certain conditions such as rate limits anti cross site request forgery protection at the edge of the network anti cross site scripting protection at the edge of the network proactive security monitoring in real time to enable quick reaction times including implementation of alert actions and or route actions to route malicious traffic to a sandbox cluster to study the security attack patterns reactive security monitoring based on security related incidents adhoc analysis of security related data to derive insights about any infrastructure weaknesses and or misleading attackers so that an asset becomes less of a target.

According to an embodiment a first policy database comprises a plurality of rows in a database. Each row represents a policy. Required fields of the row may include for instance a policy identifier a path parameter and an action parameter. Optional fields of the row may include a methods parameter rate parameter region parameter cluster parameter host parameter and or custom parameter. Each of the parameters corresponds to a different message property and may comprise a single value a range of values and or a list of values to compare to the corresponding message property in order to determine if the policy applies.

According to an embodiment a second policy database represents policies using rows. Each row specifies a subject on which to enforce actions e.g. an IP address device identifier User Agent Customer ID etc and a policy ID. Each row further includes values for one or more fields corresponding to message properties such as path methods region cluster host or custom. Depending on the embodiment one or more of the fields may be left blank indicating message properties that are ignored when determining whether the policy applies. Each row may further include optional fields that indicate a schedule for the policy such as a start time end time and or recurrence pattern. Each row further includes a field that specifies an action to perform.

The first policy database and the second policy database may be used in conjunction with each other or by themselves depending on the embodiment. In an embodiment the first policy database is used by an analyzer at a system level to determine when to generate policies in the second policy database whereas the second policy database is used at the assets to enforce policies on incoming messages. However in other embodiments local policy data may include both the first policy database and the second policy database.

The first policy database and the second policy database are simply examples of policy data structures. In yet other embodiments policies may be stored locally and or globally in any other suitable structure or format.

According to an embodiment an asset may store local policy data in the form of one or more distinct caches. In an embodiment a first cache is a global resource cache. The global resource cache comprises a mapping of resource URIs for assets to the appropriate rules to be applied for those URIs. One use of the global policy cache among other uses is enforcing blacklists and special rules on specific URIs. For instance in an example use case customer service centers are whitelisted to use access sensitive endpoints on an Ecommerce platform. However although the whitelisting would permit customer service agents to access all endpoints there may be a few URIs that are meant to be used by other internal tools developers and test teams and should be blocked for customer service agents. By listing such resources in the global resource cache and evaluating the incoming request URI for a match in global resource cache such business rules can be enforced. In general the global resource cache comprises resource rules that are good candidates for short circuiting the rest of the processing in the workflow.

In an embodiment a second cache is a subject rules cache. The subject rules cache comprises a mapping of a subject e.g. IP device identifier customer Id to immediate rules to enforce. This cache contains rules that can be categorically applied to the subject without specific handling for each URI. An example of such a policy is to block every request from customer Id 12456689. 

In an embodiment a third cache is a subject resource cache. The subject resource cache comprises a mapping of a subject e.g. IP device identifier customer Id to resource specific rules to enforce. This cache comprises policies that can be applied only to specific URIs. An example of such a policy is to block requests from customer Id 12456689 to the URI path home. 

Any of a variety of combinations of these caches and or other types of caches may be utilized to store policies. In a specific embodiment these three caches are utilized together using the following workflow. First a message is received. The message is then processed with a set of global exclusions to determine whether to exclude the message from policy enforcement. If the message is not excluded then the asset next determines whether the message URI is in the global resource cache. If not the asset next determines whether a customer ID corresponding to the message is in the subject rules cache or the subject resource cache. If not the asset next determines whether the source IP address of the message is in the subject rules cache or the subject resource cache. If not the asset next determines whether the device identifier of the message is in the subject rules cache or the subject resource cache. If not then the message is processed normally. However if any of the foregoing determinations is positive the appropriate action s for the corresponding policies are enforced.

According to an embodiment certain behaviors of an asset are configurable with some or all of the following configuration options. A frequency parameter controls how often the asset updates the local policy cache. An example frequency may be for instance thirty seconds. Various enabled parameters may control whether individual subcomponents of an asset are active so that for instance policy enforcement or log reporting may be disabled for certain assets. A mode parameter controls whether the asset is configured to actually perform policy based actions or operate in a test mode in which the asset simply reports what policy based actions the asset would have performed had the asset not been in test mode. A log level parameter may control how much message information is logged and or sent to an analyzer. A whitelist parameter may control whether the asset actually enforces other policies on whitelisted messages. In other embodiments no such configuration parameters may be provided and or a variety of other configuration parameters are possible.

According to an embodiment message information may be logged and or streamed in a JSON blob or other suitable data structure. The data structure may comprise without limitation fields such as device identifier IP customer ID application name geographic location data request alias request URL response status date host name message batch ID detected policy action and so forth. For instance one such log may be as follows 

According to an embodiment an analyzer may be configured to identify subjects for which to generate policies using a variety of queries involving the logged message information. Examples of such queries may include without limitation identify the top n requesting IP addresses in a specific region e.g. US identify the top n requesting IP addresses in a specific region that have called a specific API identify the top n requesting IP addresses in a specific region that have invoked a method other than POST with respect to a particular API identify the top n requesting IP addresses in a specific region that are scanning services for potentially open administrative consoles and identify the top n requesting IP addresses in a specific region that are scanning services for PHP endpoints. Of course these examples are merely illustrative of the large variety of queries that may be formulated.

Similarly a mid tier component might make these and other queries to the analyzer for purposes such as statistical analysis formulating business rules and so forth.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. In this regard although specific claim dependencies are set out in the claims of this application it is to be noted that the features of the dependent claims of this application may be combined as appropriate with the features of other dependent claims and with the features of the independent claims of this application and not merely according to the specific dependencies recited in the set of claims

