---

title: Techniques for generating diagnostic identifiers to trace request messages and identifying related diagnostic information
abstract: Techniques are described for determining diagnostic information (e.g., a diagnostic identifier) for one or more requests in a cloud computer system. A diagnostic identifier may be generated based on parameter data corresponding to one or more parameters in a request. A computing operation may be performed to generate a code (e.g., a hash code) for each parameter in the parameter data. The generated code(s) may be combined to form a diagnostic identifier to identify the parameter data. A comparison may be performed by comparing each code in one diagnostic identifier to a code in another diagnostic identifier corresponding to a parameter for which the codes were generated. A measure of a match between the two identifiers may be determined using a result of the comparison. The measure of the match may enable tracing and analysis of one or more requests in the cloud computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529658&OS=09529658&RS=09529658
owner: Oracle International Corporation
number: 09529658
owner_city: Redwood Shores
owner_country: US
publication_date: 20140918
---
The present application claims priority and benefit from the following patent applications 1 U.S. Provisional Application No. 61 984 704 filed Apr. 25 2014 entitled DISTRIBUTED COMPUTER DEBUGGING USING HASH FUNCTION TO GENERATE REPRESENTATIONAL STATE TRANSFER REST APPLICATION PROGRAMMING INTERFACE API CONTEXT IDENTIFIERS and 2 U.S. Provisional Application No. 61 937 316 filed Feb. 7 2014 entitled MOBILE CLOUD SERVICE MCS . The entire contents of the above identified provisional patent applications are incorporated herein by reference for all purposes.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present disclosure relates generally to the field of diagnostic computing and more generally to techniques for determining diagnostic information about a computing environment.

Tracing errors in computer programs can be a difficult time consuming process. Debugging tools assist developers in finding errors and tracing program flow by stopping a program when an exception i.e. an error is encountered at run time.

When multiple applications running on different computing environments interface with one another tracking down the cause of errors may not be so straightforward. In such environments a single debugging tool may not be adequate and compatible with different computing environments. An output from a first application may cause an exception in a second application. The second application throws the exception and ideally preserves trace data however the first application simply keeps running Stack trace data might be preserved for the first application if it is known that an error was thrown in the second application. In such instances the stack trace data for each application may be examined to identify an error and determine a relationship between a comparison of the stack trace data for each application.

Sometimes a developer of or team who developed the first application is not the same as the developer of or team who developed the second application. As such each party responsible for develop of an application may not be aware of the implementation of a different application developed by a different party. Therefore analysis of one application that calls another application may provide challenges to understand an error.

The problem is exacerbated not only when there are different computers executing different applications that interface with one another but also when those computers are running in a cloud computing environment. That the hardware is disembodied from the developers adds yet another thing that can go wrong in troubleshooting. If more than a few computers or applications are involved then the process of preserving all of the stack traces and analyzing them can become cumbersome. There is a need in the art for techniques to enable a person to obtain a better understanding of diagnostic data.

Techniques are described for determining diagnostic information about a computing environment. In particular diagnostic information e.g. a diagnostic identifier may be generated for one or more messages e.g. a request in a cloud computer system. A message may include a request received by cloud computer system. The request can be an internal request or a request from a computing device e.g. a mobile phone to one or more enterprise computer systems. A request may be for a service provided by an enterprise computer system. The generated diagnostic information can be used to understand or trace one or more requests in cloud computer system.

In some embodiments a diagnostic identifier may be generated based on parameter data corresponding to a request. The parameter data may include information corresponding to one or more parameters of a request. The parameter data may be extracted from information in a message. A computing operation e.g. a hash operation may be performed to generate a code e.g. a hash code for each parameter in the parameter data. In some embodiments a code may be generated based on parameter data corresponding to multiple parameters of a request. The generated code s may be combined to form a diagnostic identifier to identify the diagnostic data for the event. The generated code s may be combined to form a diagnostic identifier to identify the parameter data for a request.

In some embodiments a comparison can be performed between two diagnostic identifiers each of which corresponds to a different request in a cloud computer system. A comparison may be performed by comparing each code in one diagnostic identifier to a code in another diagnostic identifier corresponding to a parameter for which the codes were generated. A measure of a match between the two identifiers may be determined using a result of the comparison. A measure of a match can indicate a ratio of matching codes or the amount of codes that match. Based on the codes that match one can determine whether an event corresponding to each identifier are related and if so based on the parameters corresponding to the codes that match. A result of a comparison between two identifiers based on their respective codes may result in an indication as to whether two requests are related and if so whether they occurred in a similar manner based on the parameters that match. Such information may be useful for determining a relationship between requests. The relationship may enable the identification of a similarity between requests a frequency of a type of request other information related to requests or combinations thereof. The relationship between requests may provide many uses such as identifying common errors related to a type of request.

According to at least one example techniques may be provided for determining diagnostic information about a computing environment. Such techniques may be implemented by a computer system e.g. a cloud computer system . The computer system may include one or more processors and one or more memory devices coupled to and readable by one or more processors. For example the computing system may include a cloud server computer. The one or more memory devices may store a set of instructions that when executed by the one or more processors causes the one or more processors to perform the techniques disclosed herein. The techniques can include a computer implemented method. The method may include extracting information from a first message. The first message may be received from a computing device. The first message may include a first request for a service provided by an enterprise computer system. The method further includes identifying parameter data in the extracted information. The parameter data may include a value corresponding to each parameter of a plurality of parameters. The parameter data may identify a resource and a context for the requested service. The method further includes generating a plurality of codes. Each code of the plurality of codes may be generated using the value corresponding to a different parameter of the plurality of parameters. The method further includes determining a first diagnostic identifier for the first message by combining the generated plurality of codes. The method further includes determining a second diagnostic identifier for a second message. The second message may include a second request. The second diagnostic identifier may be determined based on parameter data in the second message. The method further includes computing a value that indicates a measure of a match between the first diagnostic identifier and the second diagnostic identifier. The value may be computed by comparing the first diagnostic identifier to the second diagnostic identifier.

In some embodiments the computer system in the example above may be a cloud computer system that is located at a first geographical location. The enterprise computer system may be located at a second geographical location that is different from the first geographical location of the computer system. In some embodiments the computing device is a mobile computing device.

In some embodiments the first message in the example above is structured in a representation state transfer REST format.

In some embodiments the first request includes a uniform resource identifier. The uniform resource identifier may indicate a location corresponding to a destination of the first request.

In some embodiments the plurality of parameters may include one or more parameters of a query included in the first request.

In some embodiments the parameter data further may identify the requested service and a request parameter.

In some embodiments each code of the plurality of codes may be generated using a hash operation. In some embodiments the parameter data may include first parameter data. The first parameter data may correspond to a first parameter of the plurality of parameters. The first parameter data may include a value for the first parameter corresponding to the requested service. In some embodiments the code generated using the first parameter data may include performing the hash operation using the value in the first parameter data.

In some embodiments the method in the example above further includes determining that the parameter data in the first request is related to the parameter data in the second request when the value satisfies a comparison threshold.

In some embodiments comparing the first diagnostic identifier to the second diagnostic identifier may include comparing each generated code in the first diagnostic identifier to a corresponding generated code in the second diagnostic identifier. Each generated code may correspond to a distinct parameter. In some embodiments the measure of the match may be computed using a ratio of generated codes that match based on comparing the first diagnostic identifier to the second diagnostic identifier. In some embodiments the measure of the match may be an amount of generated codes that match based on comparing the first diagnostic identifier to the second diagnostic identifier.

According to at least one example techniques may be provided for determining diagnostic information about a computing environment. Such techniques may be implemented by a computer system e.g. a cloud computer system . The computer system may include one or more processors and one or more memory devices coupled to the one or more processors. For example the computer system may include a server computer. The one or more memory devices may containing instructions that when executed on the one or more processors cause the one or more processors to implement the techniques disclosed herein. The instructions when executed on the one or more processors cause the one or more processors to receive from a mobile computing device using a first communication protocol a first message including a first request for a service. The service may be provided by an enterprise computer system. The instructions when executed on the one or more processors cause the one or more processors to convert the first request for the service. The first request may be converted to be sent to the enterprise computer system and wherein the first request is converted from a first format of the first communication protocol to a second format of a second communication protocol. The instructions when executed on the one or more processors cause the one or more processors to extract information from the first message. The instructions when executed on the one or more processors cause the one or more processors to identify parameter data in the extracted information. The parameter data may include a value corresponding to each parameter of a plurality of parameters. The parameter data may identify a resource and a context for the requested service. The instructions when executed on the one or more processors cause the one or more processors to generate a plurality of codes. Each code of the plurality of codes may be generated using the value corresponding to a different parameter of the plurality of parameters. The instructions when executed on the one or more processors cause the one or more processors to determine a first diagnostic identifier for the first message by combining the generated plurality of codes. The instructions when executed on the one or more processors cause the one or more processors to determine a second diagnostic identifier for a second message. The second message may include a second request. The second diagnostic identifier may be determined based on parameter data in the second message. The instructions when executed on the one or more processors cause the one or more processors to compute a value that indicates a measure of a match between the first diagnostic identifier and the second diagnostic identifier. The value may be computed by comparing the first diagnostic identifier to the second diagnostic identifier.

In some embodiments the instructions when executed on the one or more processors cause the one or more processors to receive from the enterprise computer system via the second communication protocol a response to the request for the service. The instructions when executed on the one or more processors cause the one or more processors to convert the response received from the enterprise computer system using the second communication protocol. The response may be converted from the second format of the second communication protocol to the first format of the first communication protocol. The instructions when executed on the one or more processors cause the one or more processors to send the converted response to the mobile computing device.

According to at least one example techniques may be provided for determining diagnostic information about a computing environment. Such techniques may be implemented by a computer system e.g. a cloud computer system . The computer system may include one or more processors and a computer readable memory by the one or more processors. For example the computer system may include a server computer. The computer readable memory may store a set of instructions that when executed by one or more processors causes the one or more processors to implement one or more techniques disclosed herein. The set of instructions when executed on the one or more processors causes the one or more processors to extract information from a first message. The first message may be received from a computing device. The first message may include a first request for a service provided by an enterprise computer system. The set of instructions when executed on the one or more processors causes the one or more processors to identify parameter data in the extracted information. The parameter data may include a value corresponding to each parameter of a plurality of parameters. The parameter data may identify a resource and a context for the requested service. The set of instructions when executed on the one or more processors causes the one or more processors to generate a plurality of codes. Each code of the plurality of codes may be generated using the value corresponding to a different parameter of the plurality of parameters. The set of instructions when executed on the one or more processors causes the one or more processors to determine a first diagnostic identifier for the first message by combining the generated plurality of codes. The set of instructions when executed on the one or more processors causes the one or more processors to determine a second diagnostic identifier for a second message. The second message may include a second request. The second diagnostic identifier may be determined based on parameter data in the second message. The set of instructions when executed on the one or more processors causes the one or more processors to compute a value that indicates a measure of a match between the first diagnostic identifier and the second diagnostic identifier. The value may be computed by comparing the first diagnostic identifier to the second diagnostic identifier. In some embodiments comparing the first diagnostic identifier to the second diagnostic identifier may include comparing each generated code in the first diagnostic identifier to a corresponding generated code in the second diagnostic identifier. Each generated code may correspond to a distinct parameter. The measure of the match may be computed using a ratio of generated codes that match based on comparing the first diagnostic identifier to the second diagnostic identifier. In some embodiments the set of instructions when executed on the one or more processors causes the one or more processors to determine that the parameter data in the first request is related to the parameter data in the second request when the value satisfies a comparison threshold.

This summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used in isolation to determine the scope of the claimed subject matter. The subject matter should be understood by reference to appropriate portions of the entire specification of this patent any or all drawings and each claim.

The following detailed description together with the accompanying drawings will provide a better understanding of the nature and advantages of the present invention.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of various embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without some of these specific details. In other instances well known structures and devices are shown in block diagram form.

Specific details are given in the following description to provide a thorough understanding of the embodiments. However it will be understood by one of ordinary skill in the art that the embodiments may be practiced without these specific details. For example circuits systems networks processes and other components may be shown as components in block diagram form in order not to obscure the embodiments in unnecessary detail. In other instances well known circuits processes algorithms structures and techniques may be shown without unnecessary detail in order to avoid obscuring the embodiments.

Also it is noted that individual embodiments may be described as a process which is depicted as a flowchart a flow diagram a data flow diagram a structure diagram or a block diagram. Although a flowchart may describe the operations as a sequential process many of the operations can be performed in parallel or concurrently. In addition the order of the operations may be re arranged. A process is terminated when its operations are completed but could have additional steps not included in a figure. A process may correspond to a method a function a procedure a subroutine a subprogram etc. When a process corresponds to a function its termination can correspond to a return of the function to the calling function or the main function.

The term machine readable storage medium includes but is not limited to portable or non portable storage devices optical storage devices and various other mediums capable of storing containing or carrying instruction s and or data. A machine readable medium may include a non transitory medium in which data can be stored and that does not include carrier waves and or transitory electronic signals propagating wirelessly or over wired connections. Examples of a non transitory medium may include but are not limited to a magnetic disk or tape optical storage media such as compact disk CD or digital versatile disk DVD flash memory memory or memory devices. A computer program product may include code and or machine executable instructions that may represent a procedure a function a subprogram a program a routine a subroutine a module a software package a class or any combination of instructions data structures or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and or receiving information data arguments parameters or memory contents. Information arguments parameters data etc. may be passed forwarded or transmitted via any suitable means including memory sharing message passing token passing network transmission etc.

Furthermore embodiments may be implemented by hardware software firmware middleware microcode hardware description languages or any combination thereof. When implemented in software firmware middleware or microcode the program code or code segments to perform the necessary tasks e.g. a computer program product may be stored in a machine readable medium. A processor s may perform the necessary tasks.

Systems depicted in some of the figures may be provided in various configurations. In some embodiments the systems may be configured as a distributed system where one or more components of the system are distributed across one or more networks in a cloud computer system.

Techniques are described for determining diagnostic information about a computing environment. In particular diagnostic information e.g. a diagnostic identifier may be generated for one or more messages e.g. a request in a cloud computer system. A message may include a request received by cloud computer system. The request can be an internal request or a request from a computing device e.g. a mobile phone to one or more enterprise computer systems. A request may be for a service provided by an enterprise computer system. The generated diagnostic information can be used to understand or trace one or more requests in cloud computer system.

In some embodiments a diagnostic identifier may be generated based on parameter data corresponding to a request. The parameter data may include information corresponding to one or more parameters of a request. The parameter data may be extracted from information in a message. A computing operation e.g. a hash operation may be performed to generate a code e.g. a hash code for each parameter in the parameter data. In some embodiments a code may be generated based on parameter data corresponding to multiple parameters of a request. The generated code s may be combined to form a diagnostic identifier to identify the parameter data for a request.

In some embodiments a comparison can be performed between two diagnostic identifiers each of which corresponds to a different request in a cloud computer system. A comparison may be performed by comparing each code in one diagnostic identifier to a code in another diagnostic identifier corresponding to a parameter for which the codes were generated. A measure of a match between the two identifiers may be determined using a result of the comparison. A measure of a match can indicate a ratio of matching codes or the amount of codes that match. Based on the codes that match one can determine whether an event corresponding to each identifier are related and if so based on the parameters corresponding to the codes that match. A result of a comparison between two identifiers based on their respective codes may result in an indication as to whether two requests are related and if so whether they occurred in a similar manner based on the parameters that match. Such information may be useful for determining a relationship between requests. The relationship may enable the identification of a similarity between requests a frequency of a type of request other information related to requests or combinations thereof. The relationship between requests may provide many uses such as identifying common errors related to a type of request.

Diagnostic information may include information that may enable one to understand and determine operation of a computing environment e.g. computing environment . For example diagnostic information may enable one to understand and diagnose processing performed by cloud computer system . In another example diagnostic information may enable one to diagnose requests processed by cloud computer system . Diagnostic information may include one or more diagnostic identifiers such as a diagnostic identifier generated by techniques described herein. Diagnostic information may be generated based on parameter data. An example of a diagnostic identifier is described below with reference to .

Diagnostic data may include data such as one or more logs one or more diagnostic records one or more event records error data dump data request data debugging information system data memory data computing history other data including information that can be used to determine diagnostic information or combinations thereof. Diagnostic data may include information about operation s instruction s requests traffic communication s other system information or combinations thereof which may be identified in computing environment . Examples of diagnostic data may be described with reference to . In some embodiments diagnostic data may include data corresponding to one or more requests. For example diagnostic data may include data e.g. parameter data corresponding to a request. The request may be made to receive a service provided by an enterprise computer system. Diagnostic data may include data corresponding to one or more parameters of a request. For example the parameters may include without restriction a back end system name a service name a resource name an interface name one or more request parameters one or more versions one or more request contexts other parameter information or combinations thereof. Diagnostic data may be generated immediately or sooner after operation occurs in cloud computer. In some embodiments diagnostic data may include parameter data. The parameter data may be extracted from information corresponding to a request. The information may be extracted from a message. The parameter data may include information e.g. one or more parameters corresponding to one or more parameters of a request in a computing environment.

Messages may include service invocation messages result messages request messages other messages communicated internally other messages communicated between a computing device and an enterprise computer system or combinations thereof. A message may include a message type e.g. a type value from a set of shared type constants a correlation id e.g. an id used to correlate this message with one or more other messages priority information to support for priority based message queues timeout sensitivity indicator to support message data isolation message source e.g. a uniform resource identifier of a sender a message destination e.g. a uniform resource identifier that uniquely identifies the destination a request context e.g. request information from dispatcher and or a message payload. The payload may have different attributes depending upon the type of message that is being sent such as parameter data and result data.

Enterprise data as described herein may include data received from an enterprise computer system data sent to an enterprise computer system data processed by an enterprise computer system or combinations thereof. The enterprise data may be distinguishable from data for consumer applications and or services. In some embodiments for example enterprise data may change based on application or use of the enterprise data whereas data for consumer applications e.g. consumer data may remain static through use. In certain embodiments enterprise data may include or be associated with rules that indicate criteria for storing using and or managing the enterprise data. For example enterprise data may be associated with policy information that indicates one or more policies for storing using and or managing the enterprise data. In certain embodiments policy information may be included in enterprise data. In certain embodiments enterprise data may include data processed stored used or communicated by an application or a service executing in an enterprise computer system. For example enterprise data may include business data e.g. business objects such as JSON JavaScript Object Notation formatted data from enterprise applications structured data e.g. key value pairs unstructured data e.g. internal data processed or used by an application data in JSON format social posts conversation streams activity feeds etc. binary large objects BLOBs documents system folders e.g. application related folders in a sandbox environment data using representational state transfer REST techniques referred to herein as RESTful data e.g. synchronization data made available by REST endpoints system data configuration data synchronization data or combinations thereof. In some embodiments enterprise data may include REST formatted enterprise data. REST formatted enterprise data may include RESTful data. REST formatted data may include data formatted according to REST techniques implemented by an enterprise computer system. Configuration or synchronization data may include data used for synchronization of enterprise data such as versions history integration data etc. Documents in enterprise data may include extended markup language XML files visual assets configuration files media assets etc. A BLOB may include a collection of binary data stored as a single entity in a database management system such as an image multimedia object or executable code or as otherwise known in the art. In some embodiments enterprise data may include diagnostic information related to processing performed to facilitate the communication between a computing device and an enterprise computer system and or processing performed for operations resulting from the communication.

An enterprise computer system may include various computing systems that are configured to operate for an entity or an enterprise. For example an enterprise computer system may include one or more computer systems such as an enterprise server computer e.g. a back end server computer to handle requests for services. An enterprise computer system may include applications and or services which can process and or operate using enterprise data. For example enterprise computer system may provide one or more services and or applications for managing or operating an enterprise. Services may include without restriction customer relationship management CRM human capital management HCM human resource HR management supply chain management enterprise communication email communication business services other enterprise management services or applications or combinations thereof. Enterprise computer system may include one or more computer systems dedicated to providing one or more services. In some embodiments each different computer system providing a service may be located on premise of an enterprise or may be located remotely from an enterprise. In some embodiments multiple different computer systems supporting different services may be situated in a single geographical location such as on premises of an enterprise. In the example shown in on premises enterprise computer system may include an HR system and a CRM system both of which may be located on premises of an enterprise. In some embodiments enterprise computer system may include or implement an agent system to facilitate or handle communication between cloud computer system and one or more enterprise systems . Enterprise computer systems such as cloud enterprise computer system and on premises enterprise computer system are described below in further detail.

Computing environment may include a cloud service implemented to operate as a secure intermediary computing environment that may facilitate communication between the computing device and one or more enterprise computer systems because computing device may not be configured to communicate with such enterprise computer systems. In some embodiments cloud service may be implemented to enable mobile computing devices to communicate with enterprise computer systems. For example some enterprise computer systems may be supported by legacy or back end computer systems. Such systems may be configured to operate using different communication and or security protocols. The protocols supported by such enterprise computer systems may be different from those supported by mobile computing devices. Cloud service may support communication with different types of mobile computing devices. As such cloud service may implement techniques to facilitate communication between enterprise computer systems and mobile computing devices to enable them to communicate with each other despite their incompatibilities in communication such as differences between formats or communication protocols. For example cloud service may translate communication protocols between mobile computing devices and enterprise computer systems.

Cloud service may provide its users with many advantages. Cloud service may perform operations to determine diagnostic information e.g. a diagnostic identifier. Such operations may enable a user to identify a relationship in related diagnostic information based on one or more parameters corresponding to parameter data used to generate the diagnostic information. The parameter data may be extracted from a request e.g. a request . The related diagnostic information may assist a user in identifying related requests occurring in computing environment . The related requests may be useful to determine a state or flow of execution in cloud computer system at any given time based on diagnostic information for cloud computer system . In some embodiments diagnostic information may be generated for a request that is processed in computing environment . The diagnostic information such as a diagnostic identifier of operations may collectively provide an indication as to a flow of execution in cloud computer system . The flow of execution may be useful to identify repeated or frequent operations. A relationship between requests may assist one in determining repeated or frequent requests which can be useful to identify recurring problems and or improve efficiency of operations. In some embodiments information about a type of request and or frequency of a request may be useful to enable cloud computer system to determine resources that can satisfy a demand for processing of requests.

Cloud computer system may support cloud service . Cloud computer system may be implemented using hardware software firmware or combinations thereof. For example cloud computer system may include one or more computing devices such as a server computer. Cloud computer system may include one or more memory storage devices and one or more processors. A memory storage device can be accessible to the processor s and can include instructions stored thereon which when executed by the processor s cause the processor s to implement one or more operations disclosed herein. In some embodiments the memory storage devices may operate as local storage e.g. cache . Cloud computer system may include different kinds of operating systems. A memory storage device may be accessible to the processor s and may include instructions stored thereon which when executed by the processor s cause the processor s to implement one or more operations methods or processes disclosed herein. The memory storage may operate as local storage. Local storage may be implemented using any type of persistent storage device such as a memory storage device or other computer readable storage medium. In some embodiments local storage may include or implement one or more databases e.g. a document database a relational database or other type of database one or more file stores one or more file systems or combinations thereof. The local storage may store enterprise data.

In certain embodiments cloud computer system may include one or more data stores such as a metadata repository diagnostics store and an analytics store . The data stores may be accessible by any component in cloud computer system .

Metadata repository may store all the metadata associated with cloud service . This information may be composed of both run time and design time data each having their own requirements on availability and performance. A tenant or subscriber of cloud service may have any number of applications. Each application may be versioned and may have an associated zero or more versioned resource APIs and zero or more versioned services implementations those resource application programming interface API contracts. These entities are what the run time uses to map virtual requests mAPIs to the concrete service implementation service . This mapping provides a mobile developer with the luxury of not having to know the actual implementation service when she designs and builds her application. As well as not requiring her to have to republish a new application on every service bug fix. Metadata repository may store one or more callable interfaces which may be invoked by a computing device e.g. computing device or a computing device . The callable interfaces may be customizable by a user e.g. a developer of an application to facilitate communication with cloud service . Metadata repository may store metadata corresponding to one or more configurations of a callable interface . Metadata repository may be configured to store metadata for implementing callable interface . Callable interface may be implemented to translate between a one format protocol or architectural style for communication and another format protocol or architectural style for communication. Metadata repository may be modifiable by an authenticated user via the external network.

Diagnostics store may store diagnostics information about operations processing events other actions or combinations thereof occurring in cloud service . Diagnostics store may store messages communicated via cloud service and log information. In some embodiments diagnostics store may store diagnostic data corresponding to processing performed in computing environment . Diagnostics store may include parameter data corresponding to information about one or more parameters of a request. In some embodiments diagnostics store may store diagnostic information e.g. one or more diagnostic identifiers generated by cloud computer system . Analytics store may store logging and analytics data captured during processing in the system. In some embodiments analytics store may store diagnostic information e.g. one or more diagnostic identifiers generated by cloud computer system .

On behalf of cloud service cloud computer system may utilize its computing resources to enable execution of custom instructions e.g. operations applications methods functions routines or the like . Computing resources may be allocated for use with respect to a particular user associated as a subscriber or tenant to cloud service . Resources may be allocated with respect to a user a device an application or other criterion related to a subscriber. Cloud service may be scaled in or out depending on the demand of mobile computing devices seeking to communicate with enterprise computer systems. Cloud service can be configured such that it is elastic to handle surges and temporary periods of higher than normal traffic between mobile computing devices and enterprise computer systems. In some embodiments cloud service may include elements that support scalability such that components may be added or replaced to satisfy demand in communication.

Computing device may communicate e.g. send a request message with cloud service to request service provided by an enterprise computer system. Computing device e.g. a mobile computing device may be implemented using hardware firmware software or combinations thereof. Computing device may communicate with enterprise computer systems via cloud service . Computing device may include or may be implemented as an endpoint device a personal digital assistant PDA a tablet computer a laptop computer a mobile computing device a desktop computer a wearable computer a pager etc. Computing device may include one or more memory storage devices and one or more processors. Computing device may include different kinds of operating systems. A memory storage device may be accessible to the processor s and may include instructions stored thereon which when executed by the processor s cause the processor s to implement one or more operations methods or processes disclosed herein. The memory storage may operate as local storage. Local storage may be implemented using any type of persistent storage device such as a memory storage device or other computer readable storage medium. In some embodiments local storage may include or implement one or more databases e.g. a document database a relational database or other type of database one or more file stores one or more file systems or combinations thereof. The local storage may store enterprise data.

Computing device may communicate with cloud service for management of diagnostic operations. Computing device may provide parameter to cloud computer system . Computing device can receive diagnostic information from cloud computer system to diagnose operation of computing environment specifically cloud computer system . Computing device may be implemented using hardware firmware software or combinations thereof. Computing device may communicate with enterprise computer systems via cloud service . Computing device may include or may be implemented as an endpoint device a PDA a tablet computer a laptop computer a mobile computing device a desktop computer a wearable computer a pager etc. Computing device may include one or more memory storage devices and one or more processors. Computing device may include different kinds of operating systems. A memory storage device may be accessible to the processor s and may include instructions stored thereon which when executed by the processor s cause the processor s to implement one or more operations methods or processes disclosed herein. The memory storage may operate as local storage. Local storage may be implemented using any type of persistent storage device such as a memory storage device or other computer readable storage medium. In some embodiments local storage may include or implement one or more databases e.g. a document database a relational database or other type of database one or more file stores one or more file systems or combinations thereof. The local storage may store enterprise data.

In various embodiments computing device and or computing device may be configured to execute and operate one or more applications such as a web browser a client application a proprietary client application or the like. The applications can include specific applications configured for enterprise data and or services provided by an enterprise computer system. Client applications may be accessible or operated via one or more network s . Applications may include a graphical user interface GUI for operating the application. In some embodiments computing device may present an interface for diagnostic management. Through interface a user can access diagnostic information determined by cloud computer system . Using interface a user can provide parameter data and or diagnostic data to cloud computer system .

Each of computing devices may communicate with cloud service via one or more communication networks using wireless communication. Examples of communication networks may include a mobile network a wireless network a cellular network a local area network LAN a wide area network WAN other wireless communication networks or combinations thereof. In certain embodiments computing devices may establish a communication connection with cloud service using a custom communication protocol e.g. a custom protocol . Connection may be established with cloud service through cloud computer system . The custom protocol may be an HTTP based protocol. By utilizing a custom communication protocol computing device and computing device may operate on any computing device platform to communicate with cloud computer system .

Computing device and computing device may communicate with cloud computer system through one or more callable interfaces e.g. application programming interfaces APIs . A callable interface may be implemented on computing device . A callable interface may be implemented for custom applications that enable those applications to communicate with cloud service . In some embodiments a callable interface may be developed for cloud service . The callable interface may enable applications to communicate with cloud service without having to adapt to differences in protocols e.g. communication or development protocols and or architectural styles or formats.

Cloud service may be protected by one or more firewalls to provide a secure environment to process requests and execute custom instructions . Communication between computing devices and cloud service may be separated by an external communication firewall. The firewall may be connected with cloud computer system to facilitate secure access to cloud service . A firewall may permit communication of messages between cloud computer system and computing devices e.g. computing device . Such messages e.g. HTTP messages or REST messages may conform to a communication protocol e.g. HTTP or REST which may be supported by a callable interface. In another example a message between cloud computer system and computing device may conform to a communication protocol such as Speedy SPDY . Cloud service may manage a firewall to secure communication between cloud computer system and enterprise computer systems . A firewall may permit communication of messages between cloud computer system and computing devices e.g. computing device . Such messages e.g. SPDY messages HTTP messages or REST messages may conform to a communication protocol e.g. SPDY HTTP or REST . Communication between computing device and enterprise computer systems may be two way via MCS .

Because communication with computing device and enterprise computer systems may occur via an unsecure public network one or more firewalls may provide an added layer of protection for communications to and from cloud service . One or more firewalls may enable cloud service to distinguish its internal network from an external network connecting computing device and enterprise computer systems . In some embodiments multiple firewalls may be implemented as a single firewall that encapsulates cloud service .

Cloud computer system may further operate as an intermediary computing environment by communicating with enterprise computer systems some of which may have different communication protocols. Such communication protocols may be custom or specific to an application or service in communication with cloud computer system . Further cloud computer system may communicate with an enterprise computer system to provide enterprise services and or to exchange enterprise data according to a format supported by the enterprise computer system. Cloud computer system may maintain local storage e.g. local cache of enterprise data and may use the local storage to manage synchronization of the enterprise data between mobile computing devices and enterprise computer systems .

Computing device may communicate e.g. send a request message with cloud service to request service provided by an enterprise computer system. A request that is received through a firewall may be processed to manage security authentication for a user associated with a request. In some embodiments security authentication may be determined for a request a session a user a device other criterion related to the user or combinations thereof. Security authentication may be performed for each request that is received. In some embodiments authentication may be determined based on a previous verification of a request. Security authentication may be determined for a user or a device such that requests to different enterprise computer systems may be authenticated based on a single verification of security.

Cloud computer system may enable a computing device to communicate with various enterprise computer systems some of which may be implemented differently. For example a computing device cloud computer system and enterprise computer system may be located at different geographical locations physically separated from each other. Therefore computing device can communicate with enterprise computer system regardless of their location. Technical advantages may include a cloud computer system enabling a computing device to communicate requests for services to enterprise computer systems which may support one or more distinct security protocols. In some cases an enterprise computer system may be supported by a back end system that is not easily adaptable to a different security protocol. In some cases it may be desirable for developers of applications to be able to implement an application to be able to request services without knowledge of such security protocols. It may be equally desirable for a user e.g. an administrator or an architect of an enterprise computer system to be able to receive requests without accommodating for different types of applications security protocols and standards. Technical advantages may enable such desires to be met by implementation of a cloud computer system as described herein which can handle security authentication such that requests can meet the security measures of different enterprise computer systems that are being requested.

In some embodiments a security protocol may be determined for a requested enterprise computer system. A security token may be generated according to such security protocol. The security token may be passed along with a request to an enterprise computer system to enable that enterprise computer system to verify authentication based on the generated security token. Enterprise computer systems may support different security protocols. A security protocol may be a standard by which security is determined. Security may be verified based on a security token that is generated. A security protocol may be identified for an enterprise computer system identified for a request. In some embodiments an enterprise computer system may have an agent system which may be configured or implemented according to a custom or specific security protocol supported by cloud service . As such cloud service may generate a security token according to such custom security protocol.

Cloud computer system may include implement and or communicate with one or more load balancer systems . Upon determining security authentication cloud computer system may request any one of load balancer systems to examine a request that it receives and to detect which service the request is directed to. Cloud service may be configured with one or more load balancer systems and updated with resources that get started up so that when a request comes in one of load balancer systems can balance a requested load across the different resources.

Cloud computer system may include a dispatcher that may handle requests and dispatch them to the appropriate service. A request may be routed to an appropriate service upon dispatch. In some embodiments a service itself may route an internal request to another internal service in cloud service or in an enterprise computer system. In some embodiments dispatcher may resolve a request to determine its destination based on a location e.g. an address of a destination identified in a uniform resource identifier URI and or a uniform resource locator URL of the request. Dispatcher may parse a request and its header to extract one or more of the following information tenant identifier service identifier application name application version request resource operation and parameters etc. Dispatcher can use the parsed information to perform a lookup in metadata repository . Dispatcher may retrieve a corresponding application metadata. Dispatcher may determine the target service based on the requested resource and the mappings in the metadata. While initially a very basic mapping the metadata can be enhanced to provide for more sophisticated rules based dispatching. Dispatcher may perform any dispatcher specific logging metrics gathering etc. Dispatcher may then perform initial authorization according to the application metadata. Dispatcher may format the inbound request and any other necessary information and place the message on routing bus for further processing. Dispatcher may place a request on a queue and await the corresponding response. Dispatcher may process responses received from routing bus and return a response to computing device .

In addition to handling the dispatching for external requests dispatcher may also play a role in dispatching internal requests. Such internal requests can come in the form of composite services or custom code invocations to services. In both cases the caller could use a logical service name as defined within the application. Dispatcher may use the current execution context to determine the application and use that logical name to determine the appropriate service to invoke.

Cloud computer system may include a routing bus to manage deliver of messages to destinations registered with routing bus . Routing bus may operate as a central system for managing communications in cloud service . Data communicated through routing bus may be processed to capture and store the data. Routing bus may provide a framework so that additional centralized services additional authorization debugging etc. can be plugged in easily as necessary. Data captured by routing bus may be stored in diagnostics store and or analytics store .

Routing bus may route messages to one or more destinations. In some embodiments a message may include a request to execute custom instructions . Routing bus may request custom instructions to be invoked for a request to execute custom instructions . In some embodiments routing bus may pass on a request to a destination enterprise computer system identified by information in a request. Routing bus may request an adaptor interface to perform translations if necessary to pass a request to an enterprise computer system e.g. enterprise computer system or enterprise computer system .

In certain embodiments cloud computer system may include or implement adaptor interface to translate or convert a message to a protocol supported by a receiving enterprise computer system. Adaptor interface may establish separate communication connections with each of enterprise computer systems . Cloud computer system may be configured to communicate with enterprise computer systems via one or more networks not shown . Examples of communication networks may include the Internet a mobile network a public network a wireless network a cellular network a local area network LAN a wide area network WAN other communication networks or combinations thereof. In certain embodiments communication connections may be high speed communication connections facilitated using high speed communication trunks. Communication with an enterprise computer system may pass through a firewall which ensures that communication with an external network is secure to prevent unauthorized access to cloud service via such communications.

Cloud computer system may include a diagnostic manager . Diagnostic manager may generate diagnostic information e.g. a diagnostic identifier corresponding to a request occurring in cloud computer system . For example a diagnostic identifier may be generated based information in request for a service provided by any one of enterprise computer systems . The information in request may be obtained by any component in cloud computer system . As will be described further below diagnostic information may be generated based on one or more parameters identified in parameter data corresponding to a request. Diagnostic data may be received by diagnostic manager from a local store accessible to cloud computer system and or from an external computing system. Parameter data may be extracted from a message included in diagnostic data or a message received by cloud computer system . A computing operation e.g. a hash operation may be performed to generate a code e.g. a hash code for one or more parameters in the parameter data. The generated code s may be combined to form a diagnostic identifier to identify the parameter data for the request. Information determined by diagnostic manager may be stored in diagnostics store and or analytics store .

In some embodiments a request e.g. request as described herein may include a request processed by cloud computer system . In some embodiments a request may be received from one or more computing devices e.g. computing device . A request may be included in a message. Diagnostic manager may process a message to identify a request. A request may be identified based on one or more parameters of a format corresponding to a protocol. A request may be included in information extracted from a message. In some embodiments a request may be for a service provided by any one of enterprise computing systems .

Diagnostic manager may compare diagnostic information e.g. a diagnostic identifier corresponding to two different requests in the cloud computer system . The diagnostic information may be compared to determine a relationship if one exists between the two different requests. In some embodiments the diagnostic identifier corresponding to each request may be compared to determine a measure of a match between the two diagnostic identifiers. A measure of a match can indicate a ratio of matching information e.g. a code codes or the amount of codes that match. Based on the codes that match one can determine whether a request corresponding to each identifier are related and if so based on the parameters corresponding to the codes that match. A result of a comparison between two identifiers based on their respective codes may enable one to determine a degree in which two requests are related and if so whether they occurred in a similar manner based on the parameters that match. Such information may be useful for determining a frequency of a type of request. The frequency for example may enable one to improve management of resources for the type of request.

In some embodiments cloud computer system may perform one or more operations to provide information to a user e.g. a user of computing device that may enable the user to remain informed about a status of processing in cloud computer system . In some embodiments cloud computer system may facilitate notifications to a user of computing device . Cloud computer system may include an alert management service that supports stateful interaction with a user for example to deliver an alert based on user preferences through one or more channels wait for a response and take action based on the response. Responses to an alert sent on one channel may be received through another channel which the service needs to be able to handle. The platform may come with built in state models for popular interaction patterns and be extensible with new state models. Some alert channels may include known communication resources either one way or two way. Examples include SMS Twitter push notifications and Google Cloud Messaging .

In some embodiments cloud computer system may enable computing device to access and or request one or more services such as an object store service database service access web services social services resource services or combinations thereof.

Cloud computer system may provide an object store service that may provide a storage facility for BLOBs. The basic unit of storage can be text with read and write operations. A basic query facility for JSON objects may also be offered.

Cloud computer system may provide a database service to allow for connectivity to hosted databases for performing queries or writes. Required parameterization may require the full connection string for the database the SQL string or stored procedure to execute any parameters and possibly credentials. The necessary information can be provided at run time or be pre configured in the application metadata.

Cloud computer system may provide access to web services such as Simple Access Object Protocol SOAP web services. Cloud computer system may provide access to REST services such as connectivity to arbitrary REST resources.

Cloud computer system may provide access to social services that may provide basic integration with many of the popular social sites such as Facebook Twitter etc. These services may allow for third party authentication using the user s credentials from those sites as well as access to their services. Examples include sending a tweet or updating your status.

Cloud computer system may provide a public cloud service to enable a user to simplify and optimize communication. For example a service developer may use the generic web service of cloud service to talk to a resource hosted using cloud computer system s cloud service.

A cloud computer system such as one described herein may provide diagnostic information such as a diagnostic identifier that can be used to determine additional information for diagnosing processing of requests in a cloud computer system. The additional diagnostic information may identify information related to requests such that one can ascertain parameters related to requests. The use of the diagnostic information may reduce time for determining information about requests.

A diagnostic identifier may be compared with other diagnostic identifiers to quickly determine whether a relationship exists between the diagnostic identifiers without having to analyze details of diagnostic data. The relationship may enable one to focus on diagnostic data corresponding to requests and more specifically to requests having a certain type of parameters. In doing so parameter data including information about messages can be processed more quickly to identify diagnostic information about certain types of requests.

Now turning to a block diagram is shown of a computer environment that may determine diagnostic information according to some embodiments of the present invention. Computer environment may include cloud computer system . In certain embodiments cloud computer system may be implemented as one or more functional blocks or modules configured to perform various operations for generating and or processing diagnostic information. Cloud computer system may include communication module callable interface diagnostic manager dispatcher routing bus and protocol translator .

Cloud computer system may include one or more memory storage devices local storage such as cache . Cache may be used to store diagnostic information diagnostic data enterprise data and parameter data . Enterprise data may be received from enterprise computer systems may be received from mobile computing devices and or may be generated e.g. converted by cloud computer system from enterprise data received from enterprise computer systems or from mobile computing devices . Diagnostic information may be generated by cloud computer system based on parameter data . Parameter data may be obtained from diagnostic data . Diagnostic data may be produced by cloud computer system may be received from one or more external computing systems e.g. enterprise computer system may be received from one or more data sources e.g. database or combinations thereof.

Communication module may be configured to manage communications between cloud computer system and multiple enterprise computer systems e.g. enterprise computer systems . To facilitate communication communication module may be equipped with hardware to enable communication such as a receiver and a transmitter or a combination thereof.

Enterprise computer systems such as enterprise computer systems may be physically located beyond a firewall of cloud computer system at a different geographic location e.g. remote geographic location than cloud computer system . In some embodiments enterprise computer system may be different from enterprise computer system . In some embodiments enterprise computer system and enterprise computer system may be part of a single computer system. Each of enterprise computer systems may communicate with cloud computer system using a different communication protocols. Enterprise computer system and enterprise computer system may support the same or different security protocols. In some embodiments enterprise computer system and or enterprise computer system may be implemented as enterprise computer system which may include an agent system to handle communication with multiple enterprise computer systems. In some embodiments communication module may be configured to send and receive communications through a firewall.

In certain embodiments one or more of enterprise computer systems may communicate with cloud computer system using one or more different protocols. A protocol may include a communication protocol such as SPDY. A protocol may include an application protocol such as an HTTP based protocol. In some embodiments enterprise computer systems may communicate with cloud computer system using a REST or SOAP communication protocols. For example REST protocol may support a formats including URI or URL. Enterprise data formatted for communication using REST protocol may be easily converted to data formats such as JSON comma separated values CSV and really simple syndication RSS . Enterprise computer systems and cloud computer system may communicate using other protocols such as remote procedure calls RPC e.g. XML RPC .

In some embodiments cloud computer system and enterprise computer systems may communicate using communication connections that support high speed communication. Communication module may maintain high speed communication connections which may enable cloud computer system to maintain on going and multiple communications with enterprise computer systems for managing and or synchronizing communication to exchange enterprise data or deliver requested services. The high speed communication connections may afford cloud computer system the ability to handle multiple communications with enterprise computer systems to fully synchronize enterprise data whereas a mobile computing device may be limited in bandwidth of a wireless communication connection to constantly receive enterprise data. The communication connection between cloud computer system and an enterprise computer system may be reliable such that cloud computer system may receive and send communications to synchronize enterprise data with little or no interruption.

In some embodiments communication module may include an adaptor interface configured to support communication with enterprise computer systems some of which may support different protocols or techniques for communications. Adaptor interface may include one or more adaptors e.g. adaptor or adaptor each of which may be configured to communicate according to a communication protocol a type of enterprise computer system a type of application a type of service or combinations thereof. A communication protocol supported by an adaptor may be specific to one or more enterprise computer systems. For example communication module may include an adaptor configured for communication with enterprise computer system using a specific protocol supported by enterprise computer system . In another example communication module may include an adaptor configured for communication with enterprise computer system using a specific protocol supported by enterprise computer system . Adaptor interface may establish separate communication connections with each of enterprise computer systems . In some embodiments adaptor interface may be configured to communicate with an agent system which may be included or implemented by an enterprise computer system. An adaptor in adaptor interface may be configured to communicate according to a custom protocol used for communication with an agent system. The custom protocol may be specific to a type of agent system or an enterprise computer system in which an agent system supports. The adaptor interface may reduce or eliminate a need for an app e.g. app or app to be developed specifically to support communication with a particular enterprise computer system.

Cloud computer system may use communication module to communicate with mobile computing devices e.g. mobile computing devices . Mobile computing devices may be situated in a different geographical location than cloud computer system . For example mobile computing devices may be physically located beyond a firewall of cloud computer system at a different geographic location e.g. remote geographic location than cloud computer system . Each of mobile computing devices may communicate with cloud computer system using a different communication protocol. In certain embodiments one or more of mobile computing devices may communicate with cloud computer system using one or more different protocols. A protocol may include a communication protocol such as SPDY. A protocol may include an application protocol such as an HTTP based protocol. In some embodiments communication module may communicate with mobile computing devices using a custom communication protocol. The custom communication protocol may be an HTTP based communication protocol. The communication protocol used for communication between mobile computing devices may support communication of enterprise data structured in different formats e.g. JSON format which may be easily readable by mobile computing devices and cloud computer system .

In certain embodiments mobile computing devices may each implement an application an app that can provide specific user interfaces to communicate with cloud computer system . A specific UI may be configured to communicate using a specific communication protocol. In some embodiments specific UIs may include callable interfaces functions routines methods and or operations that may be invoked to communicate with cloud computer system . Specific UIs may accept as input parameters for communicating with enterprise computer systems for enterprise data and or to request a service. In some embodiments communication through apps may be converted for communication using a custom communication protocol. In certain embodiments specific UIs may be included or implemented by cloud computer system . In some embodiments specific UIs may correspond to a custom client in an application.

Cloud computer system may include one or more callable interfaces e.g. an application programming interface API . Callable interface may enable an app on a mobile computing device to communicate requests to cloud service . Callable interface may support a common or standard interface which may allow requests including their parameters to be received from apps according to a standardized protocol architectural style and or format e.g. a REST protocol . In some embodiments a request may be made for a service provided by one or more of enterprise computer systems . Callable interface may be configurable by a user of any one of computing devices . Callable interface may receive requests for services according to a communication protocol. For example callable interface may be a REST API that supports requests according to a REST protocol. In some embodiments callable interface may receive messages from mobile computing devices. Callable interface may be configured to translate or convert messages received from mobile computing devices according to a format supported by callable interface . Device application developers can connect to cloud service for their custom applications. In some embodiments a callable interface may be configured by the same person that develops an app such that the person can implement a custom app to communicate with cloud service .

Callable interface may enable enterprise computer systems to communicate with cloud service according to a standardized protocol or format. Similar to application developers those who manage enterprise computer systems can implement code e.g. an agent system that is configured to communicate with cloud service via callable interface . Callable interfaces may be implemented based on a type of a computing device a type of enterprise computer systems an app an agent system a service a protocol or other criterion. In some embodiments callable interface may support requests for services including authentication compression encryption pagination with cursors client based throttling non repudiation logging and metrics collection. In some embodiments callable interface may be implemented for custom business related services such as authentication policy enforcement caching of responses throttling of calls to cloud service translation between asynchronous and synchronous patterns logging of calls to underlying services or combinations thereof. In some embodiments callable interface may enable users to load custom instructions e.g. custom code for implementation by cloud computer system . The custom code may implement one or more callable interfaces for cloud computer system which can enable users to access custom services.

Protocol translator may process a message to determine a communication protocol for a message and or to convert a message to a communication protocol for a destination. Protocol translator may convert a request received from mobile computing devices . The request may be converted from a format of a communication protocol supported by computing device to a format of a communication protocol supported by enterprise computer system . Protocol translator may convert a response received from one of enterprise computer systems . A response may be converted from a format of a communication protocol supported by enterprise computer system to a format of a communication protocol supported by mobile computing device . In some embodiments all or some of the operations performed by protocol translator may be implemented in callable interface and or adaptor interface .

Diagnostic manager may perform operations with respect to diagnostic data e.g. diagnostic data and or parameter data e.g. parameter data . For example diagnostic manager can generate or obtain diagnostic information e.g. diagnostic information for a request in cloud computer system . A request may be received from a computing device e.g. one of mobile computing devices . For example a request may be received by cloud computer system from mobile computing device for a service provided by enterprise computer system .

Diagnostic manager may manage and store diagnostic information e.g. a diagnostic identifier in local cache or one or more data stores e.g. diagnostics store . Diagnostic data e.g. diagnostic data used to generate the diagnostic information may be obtained from by diagnostic manager from local cache one or more data stores and or one or more external computing systems. Diagnostic data may include data e.g. parameter data about a request received by cloud computer system . In some embodiments diagnostic manager may generate diagnostic data used to generate diagnostic information. Examples of diagnostic information generated by diagnostic manager are described with reference to .

Diagnostic manager may determine whether diagnostic information such as two diagnostic identifiers is related. Identifying related diagnostic information may be useful to identify requests in cloud computer system that are related. For example two events may be identified as being related based on having one or more similar or identical parameters such as a back end name a service name a resource name an interface name one or more request parameters one or more versions one or more request contexts or combinations thereof with respect to each of the two events. Additionally or alternatively two events may be identified as being related based on information about the request with respect to each of the two events. Identification of related events and or operations may be useful to identify common e.g. recurring errors loops problems or issues related to processing requests in cloud computer system . Related diagnostic information may enable a user to identify processing performed in cloud computer system for requests. For example related requests may correspond to diagnostic information identifying a back end name a service name a resource name an interface name one or more request parameters one or more versions one or more request contexts or combinations thereof that are similar. Identification of related requests may aid in the identification of parameter data corresponding processing of related requests. Related diagnostic information may be identified based on identifying diagnostic identifiers that when compared match. For example two diagnostic identifiers may be compared to determine a measure of a match. The measure of a match may indicate a degree in which two diagnostic identifiers are related. Examples of various comparisons of diagnostic information are described below with reference to .

Diagnostic manager may be implemented as one or more functional blocks or modules configured to perform various operations for generating diagnostic information. Diagnostic manager may include message extractor code determiner diagnostic information manager parameter analyzer identifier comparator and diagnostic information generator .

Diagnostic information manager may perform one or more operations to manage storage and retrieval of diagnostic data parameter data and or diagnostic information in cloud computer system . Diagnostic information manager may obtain parameter data and diagnostic data from local storage e.g. local cache database and or one or more external computer systems e.g. an enterprise computer system . In some embodiments the diagnostic data received from an external computer system may correspond to processing e.g. processing of a request performed by cloud computer system and or may include one or more diagnostic identifiers generated by cloud computer system. In some embodiments diagnostic data obtained by diagnostic information manager may include diagnostic information such as a diagnostic identifier.

Diagnostic data may be generated by one or more elements of cloud computer system . As explained above diagnostic data may be related to a request e.g. request in cloud computer system . A request may be received by cloud computer system from any one of mobile computing devices . A request may be made by any one of mobile computing devices for a service provided by an enterprise computer system. For example an event may be related to processing performed for a request for a service from an enterprise computer system. In some embodiments a request may include a URI.

Message extractor may extract information from a message e.g. a request . The message may be in local storage or may be identified in diagnostic data. The message may include parameter data for a request. In some embodiments message extractor may extract information from a message. The message is received from a computing device e.g. mobile computing device . The message may include request for a service provided by an enterprise computer system. The information may be extracted from the message using a format corresponding to a protocol identified for the message.

Parameter analyzer may process information extracted from a message to identify parameter data in the information. The parameter data may include a value corresponding to each parameter of a plurality of parameters of a request. The information corresponding to one or more parameters may be used by diagnostic manager to generate diagnostic information e.g. a diagnostic identifier . Parameter analyzer may implement data processing techniques on parameter data to identify data corresponding to one or more parameters. A processing technique may include parsing parameter data based on a format corresponding to a protocol identified for the message. The format may include a known format of parameter data which may enable identification of data corresponding to parameter.

Code determiner may determine a code based on data corresponding to one or more parameters identified in diagnostic data for an operation. As described below with reference to a code can be generated for parameter data corresponding to one or more parameters. In some embodiments information corresponding to parameter data may include information for a parameter corresponding to a request. In this example a code can be generated based on information in parameter data corresponding to a request. The code can be used to identify parameter data corresponding to a request. In some embodiments one or more codes may be generated for parameter data corresponding to a request.

Diagnostic information generator may determine diagnostic information e.g. a diagnostic identifier based on one or more codes determined by code determiner . Diagnostic information generator may determine a diagnostic identifier based on one or more codes generated for parameter data corresponding to a request. As described further below with reference to a diagnostic identifier can be generated by combining by combining a plurality of generated codes. In some embodiments a diagnostic identifier can be generated by performing additional computations using a generated code corresponding to one or more parameters identified in the parameter data. A diagnostic identifier may be generated for parameter data corresponding to different requests. The diagnostic identifier can be generated using the one or more codes generated for each distinct parameter identified in the parameter data corresponding to a request.

Identifier comparator may perform a comparison between two diagnostic identifiers to determine a measure of a match between those identifiers. For the comparison each code in one diagnostic identifier e.g. a first diagnostic identifier may be compared to a code in the other diagnostic identifier e.g. a second diagnostic identifier corresponding to a parameter for which the codes were generated. Identifier comparator may determine a measure of a match between two identifiers. The measure of a match can indicate a ratio of matching codes or the amount of codes that match. Based on the codes that match one can determine whether an event corresponding to each identifier are related and if so based on the parameters corresponding to the codes that match. Examples of comparisons between identifiers are described below with reference to .

In some embodiments identifier comparator may keep a count of identifiers and or one or more codes that are generated. The count may be used to determine whether a certain request occurs a threshold amount of times. The result may be stored with diagnostic information which can be used to identify recurring requests.

In some embodiments identifier comparator may compare a diagnostic identifier to one or more pre determined diagnostic identifiers. A pre determined diagnostic identifier may correspond to one or more expected requests or an expected frame. An expected request may include a request that causes an error or performance issues. The pre determined diagnostic identifier can be used to identify other diagnostic identifiers that are similar or identical.

Parameter data may include information corresponding to one or more parameters of a request. For purposes of illustration parameter data is described as having information corresponding to each of a plurality of parameters e.g. a plurality of parameters . In some embodiments the information corresponding each of the plurality of parameters may include a value that indicates the parameter. In some embodiments parameter data may include information corresponding to one or more of the plurality of parameters . Such information may not exist where one or more of the plurality of parameters are not applicable or identified by information in a request. However the information in parameter data may be arranged in an order that is different from what is shown. In some embodiments the information in parameter data may be arranged according to a format corresponding to a protocol. The protocol may be used for communication of a request. A person of ordinary skill in the art will appreciate that the information in parameter data may be arranged in other orders each of which may correspond for example to a format of a communication protocol.

The example shown in illustrates information included in parameter data corresponding to each of the plurality of parameters . Parameter data may include information e.g. F corresponding to a back end system name parameter . Information corresponding to back end system name parameter may indicate a name associated with a back end system e.g. a back end system included in or implemented as an enterprise computer system. Parameter data may include information e.g. G corresponding to a service name parameter . Information corresponding to service name parameter may indicate a name of a service that is requested using parameter data . Parameter data may include information e.g. H corresponding to a resource name parameter . Information corresponding to resource name parameter may indicate a name of a resource that is requested using parameter data . For example a resource indicated by resource name parameter may be indicated as one provided by a service that is being requested. In another example a resource may be indicated as one that is provided by the back end system identified by the back end system name parameter . Parameter data may include information e.g. K corresponding to an interface name parameter . Information corresponding to interface name parameter may indicate a name of an interface through which a request is made. Parameter data may include information e.g. L corresponding to one or more request parameter s . Information corresponding to request parameter s may indicate one or more request parameters for the request. Parameter data may include information e.g. O corresponding to a version parameter . Information corresponding to a version parameter may include information indicating one or more versions corresponding to one or more of the other parameters indicated by parameter data . Parameter data may include information e.g. P corresponding to a request context parameter . Information corresponding to request context parameter may indicate one or more contexts for the request being made. Parameter data may include other information corresponding to one or more other parameters corresponding to a request.

Diagnostic identifier may be generated based on parameter data . In some embodiments diagnostic identifier may be generated based on a plurality of codes . For example diagnostic identifier may be generated by concatenating the plurality of codes . The plurality of codes may be concatenated in any order such as the one shown in . In some embodiments the plurality of codes may be concatenated according to an order based on a format of a protocol for communicating a request. In some embodiments the plurality of codes may be concatenated according to an order based on a format supported by an enterprise computer system to which a request is directed.

The plurality of codes may be generated by implementing one or more techniques for generating codes using parameter data . In some embodiments each code of the plurality of codes may be generated using a value corresponding to one or more parameters of the plurality of the parameters . A code such as any one of the plurality of codes may be generated by implementing a hash operation using information corresponding to one or more parameters. In some embodiments a code may represent a hash code determined based on performing a hash operation as described herein. For example code code code code code code and code may be generated based on the value corresponding to information information information information information information and information respectively. In the example shown in each of the plurality of codes may be generated by implementing a hash operation. Other types of algorithms may be implemented to generate a code using parameter data . In some embodiments the hash operation may be performed using the information corresponding to a parameter and other information e.g. other identifier .

In some embodiments a code may be generated based on parameter data corresponding to multiple attributes in the plurality of parameters . Therefore the amount of codes used to generate a diagnostic identifier may be less than the number of parameters. A diagnostic identifier may be generated using the codes generated from the plurality of parameters in parameter data . Multiple parameters used to generate a code may have a relationship such that the code generated from those parameters may provide a meaningful indication of a request. One or more codes may be generated using multiple parameters to reduce a number of codes in a diagnostic identifier. A number of codes in a diagnostic identifier may be reduced to shorten a length of the diagnostic identifier. By using codes that are generated based on multiple parameters the diagnostic identifier generated using those codes may provide a meaningful indication of a relationship between parameter data corresponding to those parameters.

Below is an example of pseudo code that may generate plurality of codes based on parameter data . In this example a hash function may be executed to perform a hash operation on parameter data corresponding to each of the plurality of parameters . A hash code structure may be used to store each of the plurality of codes which are generated. A concatenate operation may be performed to concatenate the plurality of codes into diagnostic identifier .

A code that is generated implementing techniques described herein may have a particular length e.g. a bit a byte or a word corresponding to size of the code. The length of a code may be based on a size of the parameter data e.g. a bit a byte or a word used to generate the code. In some embodiments the length of a code may correspond to a length of a diagnostic identifier. The length of a diagnostic identifier may be based on a storage size for parameter data associated with the identifier.

Analysis of parameter data may be performed by comparing diagnostic identifiers. As described further below with reference to a diagnostic identifier may be compared to other diagnostic identifiers to determine a relationship between the identifiers if one exists. Further a diagnostic identifier may be stored in association with diagnostic data to aid in the identification of data corresponding to a particular request from which a diagnostic identifier may be determined. Collectively diagnostic identifiers may enable a person to understand a flow of operation during processing of multiple requests. In a cloud computer system where many requests may be processed at any given time diagnostic identifiers may be particularly useful to enable a person to identify information about requests. For example diagnostic identifiers may enable a person to identify a particular request or a frequency of a type of request based on identification a similar or identical code in diagnostic identifiers that are being compared. For example when an enterprise computer system is called frequently diagnostic identifiers having one or more common codes corresponding to one or more particular parameters may aid in the identification of related requests based on the code corresponding to the parameter.

Depicted in are examples of diagnostic information such as a diagnostic identifier a diagnostic identifier a diagnostic identifier and a diagnostic identifier . The diagnostic information may be generated by a cloud computer system e.g. cloud computer system for one or more requests processed by the cloud computer system. A diagnostic identifier may be generated by techniques described herein. Each of diagnostic identifier diagnostic identifier diagnostic identifier and diagnostic identifier may be generated for a different request processed by a cloud computer system. In some embodiments one or more of diagnostic identifier diagnostic identifier diagnostic identifier and diagnostic identifier may be generated based on information extracted from a single message which includes a request corresponding to each of the diagnostic identifiers. An order of the requests each of which corresponds to a different one of diagnostic identifier diagnostic identifier diagnostic identifier and diagnostic identifier may be received and or processed in any order by the cloud computer system. In certain embodiments one or more of diagnostic identifiers may be generated based on stored information e.g. message history or request history .

As described above a diagnostic identifier may be generated based on a plurality of codes each code being generated based on parameter data extracted from a message including a request. As shown in each of diagnostic identifier diagnostic identifier diagnostic identifier and diagnostic identifier may include a plurality of codes. To illustrate diagnostic identifier may include codes based on which diagnostic identifier may be generated. Each code may be generated based on an operation performed using parameter data corresponding to a different parameter of a plurality of parameters identified in a request.

In the examples shown in a comparison may be performed between any two diagnostic identifiers according to a manner such as one described herein. Comparing one diagnostic identifier e.g. a first diagnostic identifier to another diagnostic identifier e.g. a second diagnostic identifier may include comparing each code of the plurality of codes in the first diagnostic identifier to a corresponding code of a plurality of codes in the second diagnostic identifier with respect to a similar parameter. When performing a comparison of a code from one identifier to a code in another identifier the comparison may be performed quantitatively. In some embodiments a degree of difference between two identifiers may be based on the codes that do not match.

A result may be determined based on performing a comparison. In some embodiments the result may indicate a measure of a match or a relationship between the two diagnostic identifiers that are analyzed for the comparison. A result may be determined based on a value computed using one or more techniques described herein. The value may indicate a measure of a match between two diagnostic identifiers. In some embodiments the measure of a match between two identifiers may be greater corresponding to a greater value indicating the measure of the match.

In some embodiments a value indicating a measure of a match between two identifiers may be computed using a ratio of generated codes that match based on comparing one diagnostic identifier to another diagnostic identifier. For example the value indicating a measure of a match for comparison may be computed as eighty six percent indicating a ratio of generated codes that match e.g. six out of seven codes based on comparing diagnostic identifier to another diagnostic identifier . In another example the value indicating a measure of a match for comparison may be computed as seventy one percent indicating a ratio of generated codes that match e.g. five out of seven codes based on comparing diagnostic identifier to another diagnostic identifier . In yet another example the value indicating a measure of a match for comparison may be computed as zero percent indicating a ratio of generated codes that match e.g. zero out of seven codes based on comparing diagnostic identifier to another diagnostic identifier . The value indicating the measure of a match for a comparison may indicate an empirical relationship between two identifiers that are compared. The empirical relationship may be used to determine whether a request corresponding to each identifier is related based on one or more of their parameters. For example two identifiers that match based on their respective code corresponding to a context parameter may be related based on their context.

In some embodiments a value indicating a measure of a match may be computed based on an amount of the plurality of generated codes that match based on comparing one diagnostic identifier to another second diagnostic identifier. For example the value indicating a measure of a match for comparison may be computed as six corresponding to the amount of the plurality of generated codes that match between each of diagnostic identifier and diagnostic identifier .

The result of a comparison between two diagnostic identifiers may be compared to a comparison threshold. A determination may be made whether two diagnostic identifiers match based on satisfaction of a comparison threshold. The result may include the value indicating a measure of a match between two diagnostic identifiers may be compared to a comparison threshold. The result may include the amount of the plurality of generated codes that match based on a comparison of two diagnostic identifiers. The comparison threshold may be pre determined based on determining parameters of a diagnostic identifier to be considered for the comparison threshold. The comparison threshold can be defined based on a technique used to compute the value. For example the comparison threshold may be a particular ratio e.g. fifty percent when the value is computed as a ratio of generated codes that match based on a comparing one diagnostic identifier to another diagnostic identifier.

In a flowchart illustrating a process for determining diagnostic information according to some embodiments of the present invention. Specifically process enables a cloud computer system to determine diagnostic information related to processing a message including a request for a service provided by an enterprise computer system. In certain embodiments a cloud computer system e.g. cloud computer system may implement process . Diagnostic information may be generated for any message that may be received by cloud computer system e.g. cloud computer system for a cloud service e.g. cloud service . For example diagnostic information may be generated for a message that includes a request for a service provided by an enterprise computer system.

In some embodiments a diagnostic identifier may be compared to other diagnostic identifiers to determine a measure of a matching between two identifiers. The measure of the match between two identifiers may be useful to enable a user e.g. an administrator identify related diagnostic information e.g. diagnostic identifiers about messages that are processed by cloud computer system . The related diagnostic information may enable identification of a relationship between processing of requests performed by the cloud computer. The relationship may correspond to processing performed by a cloud computer system for a similar or identical request. The relationship may further aid in the identification of duplicate or repeated processing performed by the cloud computer system for similar or related requests. A user may be able to identify or trace a flow of operations executed during processing of related requests based on the identified relationship. In certain embodiments a cloud computer system e.g. cloud computer system may implement process .

Process is illustrated as a logical flow diagram the operation of which represents operations that may be implemented in hardware computer instructions or a combination thereof. In the context of computer instructions the operations represent computer executable instructions stored on one or more computer readable storage media that when executed by one or more processors perform the recited operations. Generally computer executable instructions include routines programs applications objects components data structures and the like that perform particular functions or implement particular data types. The order in which the operations are described is not intended to be construed as a limitation and any number of the described operations may be combined in any order and or in parallel to implement the processes.

Beginning at block process may include extracting information from a message e.g. a first message . The first message may be received from a computing device. The first message may include a request for a service provided by an enterprise computer system. For example the first message may be structured in a representation state transfer REST format. The information extracted from the first message may include the first request. The first request may be processed by a computer system that implements the process . In some embodiments a message e.g. the first message may be stored in a data store or local storage of a cloud computer system e.g. cloud computer system .

At block process may include identifying parameter data in the extracted information. For example parameter data corresponding to one or more of the plurality of parameters may be identified in information extracted from a message. Such information may correspond to a request included in the message. Continuing with the previous example each parameter data may include a value corresponding to a distinct one of the plurality of parameters . In some embodiments parameter data may identify a resource and a context for the requested service. For example parameter data and parameter data corresponding to parameter and parameter respectively may identify a resource e.g. a value in parameter data and a context e.g. a value in parameter data .

At block process may include generating a plurality of codes. Each code of the plurality of codes may be generated using the value corresponding to one or more different parameters of the plurality of parameters. In some embodiments each code of the plurality of codes may be generated by performing a hash operation using the value corresponding to a different parameter of the plurality of parameters. For example each code of the plurality of codes may be generated by performing a hash operation using a value in the parameter data corresponding to a different parameter of the plurality of parameters .

At block process may include determining a diagnostic identifier e.g. a first diagnostic identifier for the first message by combining the generated plurality of codes. For example diagnostic identifier may be generated by combining e.g. concatenating each of the plurality of codes together.

At block process may include determining a diagnostic identifier e.g. a second diagnostic identifier for a message e.g. a second message . The second message may be received from a computing device e.g. the same computing device from which a message was received at block . The second message may include a request e.g. a second request for a service provided by an enterprise computer system. The second request may be different from the first request. In some embodiments the second request may be received in response to processing the first message.

Techniques such as those described above with reference to block block and block may be implemented to generate the second diagnostic identifier for the second message based on parameter data in the second message. The parameter data may be obtained from information extracted from the second message.

At block process may include computing a value that indicates a measure of a match between one diagnostic identifier e.g. a first diagnostic identifier and another diagnostic identifier e.g. a second diagnostic identifier . The value may be computed by comparing the first diagnostic identifier to the second diagnostic identifier.

In some embodiments two diagnostic identifiers may be compared with each other by implementing techniques including those described with reference to . For example where a diagnostic identifier is based on a concatenation of a plurality of codes each code of the plurality of codes in one diagnostic identifier e.g. the first diagnostic identifier may be compared to a corresponding code of a plurality of codes in another diagnostic identifier e.g. the second diagnostic identifier with respect to a similar parameter. In some embodiments a value indicating a measure of a match may be computed using a ratio of generated codes that match based on comparing the first diagnostic identifier to the second diagnostic identifier. The description corresponding to provides an example of determining a ratio of generated codes that match. In some embodiments a value indicating a measure of a match may be computed based on an amount of the plurality of generated codes that match based on comparing the first diagnostic identifier to the second diagnostic identifier. The amount of the plurality of generated codes that match may be compared to a comparison threshold to determine whether a request e.g. the first request corresponding to the first diagnostic identifier is related to a request e.g. the second request corresponding to the second diagnostic identifier are related. Process may end at block .

It will be appreciated that process is illustrative and that variations and modifications are possible. Steps described as sequential may be executed in parallel order of steps may be varied and steps may be modified combined added or omitted. In certain embodiments process may be implemented when enterprise data is received via a wireless communication connection to a network. For example process may be performed to generate a diagnostic identifier corresponding to a request identified in a message. In some embodiments a message may include multiple requests in which case a diagnostic identifier may be generated for each identified request. In some embodiments parameter data corresponding to each request may be processed concurrently to determine a diagnostic identifier based on the parameter data corresponding to each request.

In various embodiments server may be adapted to run one or more services or software applications provided by one or more of the components of the system. The services or software applications can include nonvirtual and virtual environments. Virtual environments can include those used for virtual events tradeshows simulators classrooms shopping exchanges and enterprises whether two or three dimensional 3D representations page based logical environments or otherwise. In some embodiments these services may be offered as web based or cloud services or under a Software as a Service SaaS model to the users of client computing devices and or . Users operating client computing devices and or may in turn utilize one or more client applications to interact with server to utilize the services provided by these components.

In the configuration depicted in the figure the software components and of system are shown as being implemented on server . In other embodiments one or more of the components of system and or the services provided by these components may also be implemented by one or more of the client computing devices and or . Users operating the client computing devices may then utilize one or more client applications to use the services provided by these components. These components may be implemented in hardware firmware software or combinations thereof. It should be appreciated that various different system configurations are possible which may be different from distributed system . The embodiment shown in the figure is thus one example of a distributed system for implementing an embodiment system and is not intended to be limiting.

Client computing devices and or may be portable handheld devices e.g. an iPhone cellular telephone an iPad computing tablet a personal digital assistant PDA or wearable devices e.g. a Google Glass head mounted display running software such as Microsoft Windows Mobile and or a variety of mobile operating systems such as iOS Windows Phone Android BlackBerry 10 Palm OS and the like and being Internet e mail short message service SMS Blackberry or other communication protocol enabled. The client computing devices can be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows Apple Macintosh and or Linux operating systems. The client computing devices can be workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems such as for example Google Chrome OS. Alternatively or in addition client computing devices and may be any other electronic device such as a thin client computer an Internet enabled gaming system e.g. a Microsoft Xbox gaming console with or without a Kinect gesture input device and or a personal messaging device capable of communicating over network s .

Although exemplary distributed system is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

Network s in distributed system may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP transmission control protocol Internet protocol SNA systems network architecture IPX Internet packet exchange AppleTalk and the like. Merely by way of example network s can be a local area network LAN such as one based on Ethernet Token Ring and or the like. Network s can be a wide area network and the Internet. It can include a virtual network including without limitation a virtual private network VPN an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the Institute of Electrical and Electronics IEEE 802.11 suite of protocols Bluetooth and or any other wireless protocol and or any combination of these and or other networks.

Server may be composed of one or more general purpose computers specialized server computers including by way of example PC personal computer servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. Server can include one or more virtual machines running virtual operating systems or other computing architectures involving virtualization. One or more flexible pools of logical storage devices can be virtualized to maintain virtual storage devices for the server. Virtual networks can be controlled by server using software defined networking In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing described above according to an embodiment of the present invention.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI common gateway interface servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM International Business Machines and the like.

In some implementations server may include one or more applications to analyze and consolidate data feeds and or event updates received from users of client computing devices and . As an example data feeds and or event updates may include but are not limited to Twitter feeds Facebook updates or real time updates received from one or more third party information sources and continuous data streams which may include real time events related to sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like. Server may also include one or more applications to display the data feeds and or real time events via one or more display devices of client computing devices and .

Distributed system may also include one or more databases and . Databases and may reside in a variety of locations. By way of example one or more of databases and may reside on a non transitory storage medium local to and or resident in server . Alternatively databases and may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases and may reside in a storage area network SAN . Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases and may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands. The one or more databases and can include database or can be implemented using support data store data repository diagnostics data store analytics data store or combinations thereof.

It should be appreciated that cloud infrastructure system depicted in the figure may have other components than those depicted. Further the embodiment shown in the figure is only one example of a cloud infrastructure system that may incorporate an embodiment of the invention. For example the cloud infrastructure system can include or implement all or part of cloud computer system . In some other embodiments cloud infrastructure system may have more or fewer components than shown in the figure may combine two or more components or may have a different configuration or arrangement of components.

Client computing devices and may be devices similar to those described above for client computing devices and .

Although exemplary system environment is shown with three client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with cloud infrastructure system .

Network s may facilitate communications and exchange of data between clients and and cloud infrastructure system . Each network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including those described above for network s .

Cloud infrastructure system may comprise one or more computers and or servers that may include those described above for server .

In certain embodiments services provided by the cloud infrastructure system may include a host of services that are made available to users of the cloud infrastructure system on demand such as online data storage and backup solutions Web based e mail services hosted office suites and document collaboration services database processing managed technical support services and the like. Services provided by the cloud infrastructure system can dynamically scale to meet the needs of its users. A specific instantiation of a service provided by cloud infrastructure system is referred to herein as a service instance. In general any service made available to a user via a communication network such as the Internet from a cloud service provider s system is referred to as a cloud service. Typically in a public cloud environment servers and systems that make up the cloud service provider s system are different from the customer s own on premises servers and systems. For example a cloud service provider s system may host an application and a user may via a communication network such as the Internet on demand order and use the application.

In some examples a service in a computer network cloud infrastructure may include protected computer network access to storage a hosted database a hosted web server a software application or other service provided by a cloud vendor to a user or as otherwise known in the art. For example a service can include password protected access to remote storage on the cloud through the Internet. As another example a service can include a web service based hosted relational database and a script language middleware engine for private use by a networked developer. As another example a service can include access to an email software application hosted on a cloud vendor s web site.

In certain embodiments cloud infrastructure system may include a suite of applications middleware and database service offerings that are delivered to a customer in a self service subscription based elastically scalable reliable highly available and secure manner. An example of such a cloud infrastructure system is the Oracle Public Cloud provided by the present assignee.

Large volumes of data sometimes referred to as big data can be hosted and or manipulated by the infrastructure system on many levels and at different scales. Such data can include data sets that are so large and complex that it can be difficult to process using typical database management tools or traditional data processing applications. For example terabytes of data may be difficult to store retrieve and process using personal computers or their rack based counterparts. Such sizes of data can be difficult to work with using most current relational database management systems and desktop statistics and visualization packages. They can require massively parallel processing software running thousands of server computers beyond the structure of commonly used software tools to capture curate manage and process the data within a tolerable elapsed time.

Extremely large data sets can be stored and manipulated by analysis and researchers to visualize large amounts of data detect trends and or otherwise interact with the data. Tens hundreds or thousands of processors linked in parallel can act upon such data in order to present it or simulate external forces on the data or what it represents. These data sets can involve enterprise data structured data such as that organized in a database or otherwise according to a structured model and or unstructured data e.g. emails images data blobs binary large objects web pages complex event processing . By leveraging an ability of an embodiment to relatively quickly focus more or fewer computing resources upon an objective the cloud infrastructure system may be better available to carry out tasks on large data sets based on demand from a business government agency research organization private individual group of like minded individuals or organizations or other entity.

In various embodiments cloud infrastructure system may be adapted to automatically provision manage and track a customer s subscription to services offered by cloud infrastructure system . Cloud infrastructure system may provide the cloud services via different deployment models. For example services may be provided under a public cloud model in which cloud infrastructure system is owned by an organization selling cloud services e.g. owned by Oracle and the services are made available to the general public or different industry enterprises. As another example services may be provided under a private cloud model in which cloud infrastructure system is operated solely for a single organization and may provide services for one or more entities within the organization. The cloud services may also be provided under a community cloud model in which cloud infrastructure system and the services provided by cloud infrastructure system are shared by several organizations in a related community. The cloud services may also be provided under a hybrid cloud model which is a combination of two or more different models.

In some embodiments the services provided by cloud infrastructure system may include one or more services provided under Software as a Service SaaS category Platform as a Service PaaS category Infrastructure as a Service IaaS category or other categories of services including hybrid services. A customer via a subscription order may order one or more services provided by cloud infrastructure system . Cloud infrastructure system then performs processing to provide the services in the customer s subscription order.

In some embodiments the services provided by cloud infrastructure system may include without limitation application services platform services and infrastructure services. In some examples application services may be provided by the cloud infrastructure system via a SaaS platform. The SaaS platform may be configured to provide cloud services that fall under the SaaS category. For example the SaaS platform may provide capabilities to build and deliver a suite of on demand applications on an integrated development and deployment platform. The SaaS platform may manage and control the underlying software and infrastructure for providing the SaaS services. By utilizing the services provided by the SaaS platform customers can utilize applications executing on the cloud infrastructure system. Customers can acquire the application services without the need for customers to purchase separate licenses and support. Various different SaaS services may be provided. Examples include without limitation services that provide solutions for sales performance management enterprise integration and business flexibility for large organizations.

In some embodiments platform services may be provided by the cloud infrastructure system via a PaaS platform. The PaaS platform may be configured to provide cloud services that fall under the PaaS category. Examples of platform services may include without limitation services that enable organizations such as Oracle to consolidate existing applications on a shared common architecture as well as the ability to build new applications that leverage the shared services provided by the platform. The PaaS platform may manage and control the underlying software and infrastructure for providing the PaaS services. Customers can acquire the PaaS services provided by the cloud infrastructure system without the need for customers to purchase separate licenses and support. Examples of platform services include without limitation Oracle Java Cloud Service JCS Oracle Database Cloud Service DBCS and others.

By utilizing the services provided by the PaaS platform customers can employ programming languages and tools supported by the cloud infrastructure system and can control the deployed services. In some embodiments platform services provided by the cloud infrastructure system may include database cloud services middleware cloud services e.g. Oracle Fusion Middleware services and Java cloud services. In one embodiment database cloud services may support shared service deployment models that enable organizations to pool database resources and offer customers a Database as a Service in the form of a database cloud. Middleware cloud services may provide a platform for customers to develop and deploy various business applications and Java cloud services may provide a platform for customers to deploy Java applications in the cloud infrastructure system.

Various different infrastructure services may be provided by an IaaS platform in the cloud infrastructure system. The infrastructure services facilitate the management and control of the underlying computing resources such as storage networks and other fundamental computing resources for customers utilizing services provided by the SaaS platform and the PaaS platform.

In certain embodiments cloud infrastructure system may also include infrastructure resources for providing the resources used to provide various services to customers of the cloud infrastructure system. In one embodiment infrastructure resources may include pre integrated and optimized combinations of hardware such as servers storage and networking resources to execute the services provided by the PaaS platform and the SaaS platform.

In some embodiments resources in cloud infrastructure system may be shared by multiple users and dynamically re allocated per demand. Additionally resources may be allocated to users in different time zones. For example cloud infrastructure system may enable a first set of users in a first time zone to utilize resources of the cloud infrastructure system for a specified number of hours and then enable the re allocation of the same resources to another set of users located in a different time zone thereby maximizing the utilization of resources.

In certain embodiments a number of internal shared services may be provided that are shared by different components or modules of cloud infrastructure system and by the services provided by cloud infrastructure system . These internal shared services may include without limitation a security and identity service an integration service an enterprise repository service an enterprise manager service a virus scanning and white list service a high availability backup and recovery service service for enabling cloud support an email service a notification service a file transfer service and the like.

In certain embodiments cloud infrastructure system may provide comprehensive management of cloud services e.g. SaaS PaaS and IaaS services in the cloud infrastructure system. In one embodiment cloud management functionality may include capabilities for provisioning managing and tracking a customer s subscription received by cloud infrastructure system and the like.

In one embodiment as depicted in the figure cloud management functionality may be provided by one or more modules such as an order management module an order orchestration module an order provisioning module an order management and monitoring module and an identity management module . These modules may include or be provided using one or more computers and or servers which may be general purpose computers specialized server computers server farms server clusters or any other appropriate arrangement and or combination.

In exemplary operation a customer using a client device such as client device or may interact with cloud infrastructure system by requesting one or more services provided by cloud infrastructure system and placing an order for a subscription for one or more services offered by cloud infrastructure system . In certain embodiments the customer may access a cloud User Interface UI cloud UI cloud UI and or cloud UI and place a subscription order via these UIs. The order information received by cloud infrastructure system in response to the customer placing an order may include information identifying the customer and one or more services offered by the cloud infrastructure system that the customer intends to subscribe to.

After an order has been placed by the customer the order information is received via the cloud UIs and or .

At operation the order is stored in order database . Order database can be one of several databases operated by cloud infrastructure system and operated in conjunction with other system elements.

At operation the order information is forwarded to an order management module . In some instances order management module may be configured to perform billing and accounting functions related to the order such as verifying the order and upon verification booking the order.

At operation information regarding the order is communicated to an order orchestration module . Order orchestration module may utilize the order information to orchestrate the provisioning of services and resources for the order placed by the customer. In some instances order orchestration module may orchestrate the provisioning of resources to support the subscribed services using the services of order provisioning module .

In certain embodiments order orchestration module enables the management of business processes associated with each order and applies business logic to determine whether an order should proceed to provisioning. At operation upon receiving an order for a new subscription order orchestration module sends a request to order provisioning module to allocate resources and configure those resources needed to fulfill the subscription order. Order provisioning module enables the allocation of resources for the services ordered by the customer. Order provisioning module provides a level of abstraction between the cloud services provided by cloud infrastructure system and the physical implementation layer that is used to provision the resources for providing the requested services. Order orchestration module may thus be isolated from implementation details such as whether or not services and resources are actually provisioned on the fly or pre provisioned and only allocated assigned upon request.

At operation once the services and resources are provisioned a notification of the provided service may be sent to customers on client devices and or by order provisioning module of cloud infrastructure system .

At operation the customer s subscription order may be managed and tracked by an order management and monitoring module . In some instances order management and monitoring module may be configured to collect usage statistics for the services in the subscription order such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time.

In certain embodiments cloud infrastructure system may include an identity management module . Identity management module may be configured to provide identity services such as access management and authorization services in cloud infrastructure system . In some embodiments identity management module may control information about customers who wish to utilize the services provided by cloud infrastructure system . Such information can include information that authenticates the identities of such customers and information that describes which actions those customers are authorized to perform relative to various system resources e.g. files directories applications communication ports memory segments etc. . Identity management module may also include the management of descriptive information about each customer and about how and by whom that descriptive information can be accessed and modified.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple buses. Bus subsystem may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. For example such architectures may include an Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus which can be implemented as a Mezzanine bus manufactured to the IEEE P1386.1 standard.

Processing unit which can be implemented as one or more integrated circuits e.g. a conventional microprocessor or microcontroller controls the operation of computer system . One or more processors may be included in processing unit . These processors may include single core or multicore processors. In certain embodiments processing unit may be implemented as one or more independent processing units and or with single or multicore processors included in each processing unit. In other embodiments processing unit may also be implemented as a quad core processing unit formed by integrating two dual core processors into a single chip.

In various embodiments processing unit can execute a variety of programs in response to program code and can maintain multiple concurrently executing programs or processes. At any given time some or all of the program code to be executed can be resident in processor s and or in storage subsystem . Through suitable programming processor s can provide various functionalities described above. Computer system may additionally include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

I O subsystem may include user interface input devices and user interface output devices. User interface input devices may include a keyboard pointing devices such as a mouse or trackball a touchpad or touch screen incorporated into a display a scroll wheel a click wheel a dial a button a switch a keypad audio input devices with voice command recognition systems microphones and other types of input devices. User interface input devices may include for example motion sensing and or gesture recognition devices such as the Microsoft Kinect motion sensor that enables users to control and interact with an input device such as the Microsoft Xbox 360 game controller through a natural user interface using gestures and spoken commands. User interface input devices may also include eye gesture recognition devices such as the Google Glass blink detector that detects eye activity e.g. blinking while taking pictures and or making a menu selection from users and transforms the eye gestures as input into an input device e.g. Google Glass . Additionally user interface input devices may include voice recognition sensing devices that enable users to interact with voice recognition systems e.g. Siri navigator through voice commands.

User interface input devices may also include without limitation three dimensional 3D mice joysticks or pointing sticks gamepads and graphic tablets and audio visual devices such as speakers digital cameras digital camcorders portable media players webcams image scanners fingerprint scanners barcode reader 3D scanners 3D printers laser rangefinders and eye gaze tracking devices. Additionally user interface input devices may include for example medical imaging input devices such as computed tomography magnetic resonance imaging position emission tomography medical ultrasonography devices. User interface input devices may also include for example audio input devices such as MIDI keyboards digital musical instruments and the like.

User interface output devices may include a display subsystem indicator lights or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as that using a liquid crystal display LCD or plasma display a projection device a touch screen and the like. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system to a user or other computer. For example user interface output devices may include without limitation a variety of display devices that visually convey text graphics and audio video information such as monitors printers speakers headphones automotive navigation systems plotters voice output devices and modems.

Computer system may comprise a storage subsystem that comprises software elements shown as being currently located within a system memory . System memory may store program instructions that are loadable and executable on processing unit as well as data generated during the execution of these programs.

Depending on the configuration and type of computer system system memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. The RAM typically contains data and or program modules that are immediately accessible to and or presently being operated and executed by processing unit . In some implementations system memory may include multiple different types of memory such as static random access memory SRAM or dynamic random access memory DRAM . In some implementations a basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up may typically be stored in the ROM. By way of example and not limitation system memory also illustrates application programs which may include client applications Web browsers mid tier applications relational database management systems RDBMS etc. program data and an operating system . By way of example operating system may include various versions of Microsoft Windows Apple Macintosh and or Linux operating systems a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems the Google Chrome OS and the like and or mobile operating systems such as iOS Windows Phone Android OS BlackBerry 10 OS and Palm OS operating systems.

Storage subsystem may also provide a tangible computer readable storage medium for storing the basic programming and data constructs that provide the functionality of some embodiments. Software programs code modules instructions that when executed by a processor provide the functionality described above may be stored in storage subsystem . These software modules or instructions may be executed by processing unit . Storage subsystem may also provide a repository for storing data used in accordance with the present invention.

Storage subsystem may also include a computer readable storage media reader that can further be connected to computer readable storage media . Together and optionally in combination with system memory computer readable storage media may comprehensively represent remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information.

Computer readable storage media containing code or portions of code can also include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information. This can include tangible non transitory computer readable storage media such as RAM ROM electronically erasable programmable ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other tangible computer readable media. When specified this can also include nontangible transitory computer readable media such as data signals data transmissions or any other medium which can be used to transmit the desired information and which can be accessed by computing system .

By way of example computer readable storage media may include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM DVD and Blu Ray disk or other optical media. Computer readable storage media may include but is not limited to Zip drives flash memory cards universal serial bus USB flash drives secure digital SD cards DVD disks digital video tape and the like. Computer readable storage media may also include solid state drives SSD based on non volatile memory such as flash memory based SSDs enterprise flash drives solid state ROM and the like SSDs based on volatile memory such as solid state RAM dynamic RAM static RAM DRAM based SSDs magnetoresistive RAM MRAM SSDs and hybrid SSDs that use a combination of DRAM and flash memory based SSDs. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for computer system .

Communications subsystem provides an interface to other computer systems and networks. Communications subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . For example communications subsystem may enable computer system to connect to one or more devices via the Internet. In some embodiments communications subsystem can include radio frequency RF transceiver components for accessing wireless voice and or data networks e.g. using cellular telephone technology advanced data network technology such as 3G 4G or EDGE enhanced data rates for global evolution WiFi IEEE 802.11 family standards or other mobile communication technologies or any combination thereof global positioning system GPS receiver components and or other components. In some embodiments communications subsystem can provide wired network connectivity e.g. Ethernet in addition to or instead of a wireless interface.

In some embodiments communications subsystem may also receive input communication in the form of structured and or unstructured data feeds event streams event updates and the like on behalf of one or more users who may use computer system .

By way of example communications subsystem may be configured to receive data feeds in real time from users of social media networks and or other communication services such as Twitter feeds Facebook updates web feeds such as Rich Site Summary RSS feeds and or real time updates from one or more third party information sources.

Additionally communications subsystem may also be configured to receive data in the form of continuous data streams which may include event streams of real time events and or event updates that may be continuous or unbounded in nature with no explicit end. Examples of applications that generate continuous data may include for example sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like.

Communications subsystem may also be configured to output the structured and or unstructured data feeds event streams event updates and the like to one or more databases that may be in communication with one or more streaming data source computers coupled to computer system .

Computer system can be one of various types including a handheld portable device e.g. an iPhone cellular phone an iPad computing tablet a PDA a wearable device e.g. a Google Glass head mounted display a PC a workstation a mainframe a kiosk a server rack or any other data processing system.

Due to the ever changing nature of computers and networks the description of computer system depicted in the figure is intended only as a specific example. Many other configurations having more or fewer components than the system depicted in the figure are possible. For example customized hardware might also be used and or particular elements might be implemented in hardware firmware software including applets or a combination. Further connection to other computing devices such as network input output devices may be employed. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

In the foregoing specification embodiments of the invention are described with reference to specific embodiments thereof but those skilled in the art will recognize that the invention is not limited thereto. Various features and embodiments of the above described invention may be used individually or jointly. Further embodiments can be utilized in any number of environments and applications beyond those described herein without departing from the broader spirit and scope of the specification. The specification and drawings are accordingly to be regarded as illustrative rather than restrictive.

