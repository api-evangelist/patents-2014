---

title: Secure timestamping
abstract: A method and system for retrieving a current and previous timestamp value, retrieving a previous accumulator value reflecting a previous state of the accumulator, retrieving information representing digests collected during an interval window, and generating a new accumulator value based on the retrieved values, and a storage medium with executable code for retrieving a first and second timestamp, a first and second accumulator value, information representing digests, and for validating data by comparing the second accumulator value with a hash of the first timestamp, the first accumulator value, and the information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09443108&OS=09443108&RS=09443108
owner: Amazon Technologies, Inc.
number: 09443108
owner_city: Seattle
owner_country: US
publication_date: 20140627
---
Many modern systems utilize timestamps for various reasons. A document management system for example may log various events related to the documents it manages such as uploads retrievals modifications deletions and the like. As another example many modern systems log various user behavior such as log in attempts and various other interactions with a system. Generally various events taking place in connection with a computer system may be logged or otherwise associated with timestamps. In most contexts however there is a lack of assurance that timestamps are accurate. A person with access to a system whether the access is authorized or not may for instance may often modify timestamps without detection of the modification. In other instances programming mistakes may cause unintended modification to timestamps. While such timestamp modifications are often of little consequence in some contexts inaccurate timestamps can have significant adverse effects. As an example legal proceedings may rely on the ability to accurately determine the time of an occurrence of an event and or whether a document existed at a given time. However the trustworthiness of the timestamping is only as strong as the security features preventing the timestamp from being tampered with or forged.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include a method for providing a fast cryptographically secure timestamp for database logging and data timestamping. The method further includes associating a digital signature with data and a timestamp. The digital signature may be a cryptographically derived value generated with a secret private key. Associating the digital signature with the data and the timestamp provides further assurance that the data and timestamp have not been modified or forged and further if the asymmetric key that is used to sign logs is revoked the signatures used before revocation still provide assurance that the data and timestamp was not tampered with. Techniques described and suggested herein further include a method for quickly easily and accurately verifying the secure timestamp.

As noted various users may have a need for accurate timestamps. Techniques of the present disclosure include systems that implement a timestamping service for data. For example a lawyer may have a need to have an electronic version of a document or photo timestamped and further have a need to provide evidence that neither the document nor the timestamp has been modified or forged. Likewise a data center may maintain timestamps and logs of various accesses to databases and files maintained by the data center and the data center may have a need to provide proof of when an entry was made and that the entry and the timestamp was not forged or modified. Note that while timestamps are used throughout for the purpose of illustration the scope of the present disclosure is not limited to time and a timestamping service. In particular techniques of the present disclosure described herein are adaptable to various types of sequentially updated logging. Example applications may include but are not limited to cases where timestamps are being logged cases where submitted data or digests are assigned an incremented auto number value and cases where submitted data or digests are assigned one or more other corresponding field values.

A timestamping service may be provided by a time stamping authority TSA . A digest as used herein is a hash value produced from passing data i.e. a message through a cryptographic hash function. The term hash as used in this disclosure is presumed to be a cryptographically strong hash meaning that it is computationally infeasible to decrypt and or forge and of negligible probability that two distinct values can be computed or found such that the hash of one distinct value may equal a hash of another distinct value. The TSA acts as a virtual notary wherein a user may submit data or a digest to the TSA wherein the TSA associates a timestamp with the digest of the data and keeps a record of the timestamps and submissions.

In at least one embodiment of the present disclosure there may be two tables hereinafter referred to as timestamp table and documents table. Each table may contain at least two fields or key pairs one field being a hash value i.e. a digest and another field being a timestamp. The timestamp table may be used to keep track of windows of time interval window . The timestamp field of the timestamp table may contain a timestamp representing when the previous window ended and the new window began. The hash field of the hash key pair may contain an accumulator value. In some embodiments a Bloom filter is used to quickly and compactly prove that a document or data hereinafter document is present within the interval window for example the Bloom filter may be stored in the timestamp table as a separate field stored in memory stored on persistent storage or at least a portion of the accumulator value may be comprised of the Bloom filter.

The documents table may be used to keep track of documents or digests of documents for which a user or service requests to be timestamped. The digest field of the documents table may contain a digest i.e. hash value of a document and the timestamp field of the documents table contains a timestamp representing the time at which the digest was inserted into the documents table. The accumulator field of the timestamp table may contain a hash of the previous time the previous accumulator value and the digests that were stored in the documents table during the interval window. By including the previous time and previous accumulator value in the hash generated for current accumulator field the accumulator fields of the timestamp table may comprise a sequence of values derived through successive application of a hash function known as a hash chain. An advantage of having at least a portion of the accumulator value being a member of a hash chain is that an accumulator value in the sequence may not be compromised without an attacker having access to all previous accumulator values or invalidating other timestamp data. The initial value of the accumulator field may be any seed value. In one example the initial value of the accumulator may be a hash of the current timestamp.

An interval window rolls when the current interval ends and the next interval begins. The process of rolling an interval window includes inserting a new timestamp with the current time and may include a concurrent insertion of an accumulator value into the timestamp table. The insertion indicates that the previous interval window ended and a new interval window began at the time indicated by that timestamp. The timestamp may be any valid measure of time at a precision as desired by the users or administrators of the system. An example of a timestamp could be a value reflecting a 64 bit datetime measured by the number of microseconds from Jan. 1 1970 coordinated universal time or some other historical temporal reference point.

The interval window may be rolled according to an interval that is a fixed length of time such every as ten seconds. However the interval of the interval window may be any value and may comprise a multiple of the precision of the timestamp measurement. The smaller the interval window however the more frequently timestamp services may be adding entries to the timestamp table and the documents table. Therefore the interval window may be of a duration that balances precision with storage and performance. In at least one embodiment the rolling may not occur according to fixed time intervals but rolling may occur whenever the number of digests stored in the documents table during the present interval window exceeds a predetermined threshold. In at least another embodiment the rolling may be a fixed time interval by default but the interval window may be rolled on demand by a user or service of a computer resource services provider. As another embodiment usable in combination with other embodiments the interval window may be rolled when the number of digests in a Bloom filter as described below exceeds a threshold. As still another embodiment usable in combination with other embodiments the interval may be rolled based on one or more attributes within the document or data submitted for timestamping. As a further embodiment usable in combination with other embodiments the interval may be rolled according to information associated with an event stream. An example of this embodiment may include but not be limited to a situation where audit logs are being timestamped wherein important and critical security events may trigger a finer grained i.e. narrower interval window versus informational and low severity messages may be timestamped over a coarser grained i.e. wider interval window.

For example in an initial state the accumulator dmay be set to the result of a hash function of timestamp as follows 

Wherein H as used herein identifies a hash function that produces a cryptographically strong hash i.e. it would be computationally infeasible to decode and negligible probability for H to produce the same output for different input. When the initial interval window rolls a new entry may be appended to the timestamp table as follows digest digest 

Wherein is the new time dis the new accumulator value and digest digest is the set of all k digests inserted into the documents table during the initial interval. Likewise for each interval i succeeding the initial interval a new entry may be appended to the timestamp table as follows digest digest 

Wherein is the next time dis the next accumulator value is the previous time dis the previous accumulator value and digest digest is the set of all k digests inserted into the documents table during the previous interval.

In at least one embodiment the value of the accumulator field of the timestamp table may comprise a Bloom filter representing the digests of all documents received for timestamping within an interval window rather than comprising the digests themselves. In at least another embodiment the timestamp table may have a separate field for a Bloom filter representing the digests of all documents received for timestamping within an interval window. In this embodiment the digests and timestamps may be logged in the documents table as previously disclosed and the Bloom filter field of the timestamp table may be used for quickly checking whether the digest was stamped within the interval window without needing to rehash the full set of digests within the interval window. As another embodiment usable in combination with other embodiments the disclosed timestamp table and the documents table may actually be only one table with a timestamp field representing the start of the interval window the accumulator field and a Bloom filter field for representing the digests of all documents received for timestamping within an interval window. In this embodiment the individual digests and corresponding timestamps may not be logged but rather the Bloom filter provides assurance that the digest was timestamped within the interval window with high probability.

In an embodiment using a Bloom filter function B the Bloom filter is based at least in part on the provided document. For example the Bloom filter may represent the digests received for timestamping within the interval window such that as each new document digest digest is received it may be added to the Bloom filter bas follows digest 

Wherein bis the Bloom filter for the digests of the previous interval window. In an embodiment where the timestamp table has a third field for a Bloom filter this value may be additionally added to the table as follows 

In this embodiment a prior state may also be included in the Bloom filter. For example the Bloom filter may include an additional hash of the previous Bloom filter for added security i.e. to reduce the risk of an attacker modifying a document in such a way that it generates a digest designed to cause Bloom filter overload. For example 

In at least another embodiment the Bloom filter field may be a field in a table other than the timestamp table. As another embodiment usable in combination with other embodiments one or more rainbow tables may be used instead of a Bloom filter to prove whether a digest is a member of a set of digests timestamped within a particular interval window without having the inherent lossiness of a Bloom filter.

A user or service may submit data or a digest of the data to the timestamp service for logging. Data may be submitted in various ways including but not limited to by clicking an icon or form element on a web page of a computing resource service provider or by a programmatic call to an API. The data may be in a variety of electronic formats including but not limited to formats such as a text file an encrypted file a bitmapped image and an audio recording. Upon receipt the timestamp service may insert the digest of the data into the documents table into the digest field and the timestamp field is inserted with the current time. Depending on the embodiment the digest of the data may be the result of a cryptographic hash function performed by the timestamp service performed by a different service or performed by the user or service submitting the data and the timestamp service does not received the unhashed data. A document may be submitted for timestamping multiple times producing identical digests for insertion. In such a case there may be multiple timestamps associated with a particular document digest value. In at least one embodiment the user may receive a notification that the digest was successfully inserted. In at least another embodiment the user may receive as a receipt a combined hash of the interval timestamp the previous accumulator state and the set of digests logged within the interval window. As another embodiment usable in combination with other embodiments the receipt is further signed with a digital signature as verification that the digest of the data was properly timestamped.

In at least one embodiment a Bloom filter is used to encode the set of digests being inserted into the documents table during each accumulator round i.e. the interval window and the Bloom filter and interval window timestamp is inserted into the documents table rather than inserting each digest with a timestamp. In at least another embodiment the documents table and timestamp table are actually a single table with a Bloom filter entry which is an encoding of the set of digests being inserted each time the interval changes rather than inserting each digest with a corresponding timestamp. As another embodiment usable in combination with other embodiments the user may receive as a receipt a combined hash of the interval timestamp the previous accumulator state and the Bloom filter of the digests received within the interval window. In at least another embodiment the receipt is further signed with a digital signature.

To prove that a document was created at a certain time the document may be hashed to produce a document digest. The documents table may be queried to retrieve the timestamp associated with the document digest digest. In one example the timestamp associated with the digestis the earliest i.e. first timestamp associated with that document digest. In at least another embodiment the documents table may be queried to retrieve the most recent timestamp associated with that document digest. In this embodiment the timestamp may be used to determine the last time the document was timestamped before it changed. In at least another embodiment the documents table may be queried to retrieve all timestamps associated with that document digest. In this embodiment the timestamps may be used to validate all the times that particular version of the document was timestamped. As another embodiment usable in combination with other embodiments the user requests to validate that the document has a particular itemstamp.

Once has been retrieved the timestamp table may be queried to determine the timestamps defining the interval window and during which digestwas stamped. The hash keys dand d associated with and may also be retrieved from the timestamp table. With knowledge of and the set of all digests digest digest logged into the documents table during the interval window between and may be retrieved from the documents table.

To prove that digestwas timestamped at time and that neither the document nor the timestamp has been modified or forged a hash of d and digest digest must match d. That is if dH d digest digest then validation is successful indicating that the document was timestamped within the interval window defined by and and is therefore not likely to have been modified or forged. However if validation was unsuccessful then tampering has likely occurred. For example in at least one embodiment a user may request assurances that a previously submitted timestamp has a valid timestamp and the system responds with a validation result e.g. success failure . In at least another embodiment a user may submit a previously submitted document and a timestamp wherein the system responds with a validation that the submitted timestamp matches a validated timestamp stored within the system. As another embodiment usable in combination with other embodiments a user may request a timestamp for a previously submitted document and the timestamp server returns one or more timestamps corresponding to the one or more submissions of the version of the document for timestamping and further returns a validation result for each timestamp.

In at least one embodiment verification that the receipt contained a proper digital signature provides adequate verification that the digest was properly timestamped. In at least another embodiment verification is provided by checking the digest against a Bloom filter. As another embodiment usable in combination with other embodiments the system may further walk through the chained accumulator values in the timestamp table to ensure that the accumulator has not been tampered with. As still another embodiment usable in combination with other embodiments the system performs verification on every digest logged within the same interval window as the interval window in which the digest being checked against was logged. In an alternate embodiment usable with other embodiments described herein user may specify the degree of certainty desired for the validation and the system adjusts the type and amount of validation performed according to the requested degree.

In one example the timestamp server s digital signature key is logged into the timestamp table each time the interval window is rolled. In a case where the private key of the digital signature is published the digital signatures the digital signatures associated with the timestamp and accumulator values before the publication may still be considered valid. In another example the digital signature key is regenerated whenever an event occurs that indicates that the key may have been compromised. In still another example each interval window has its own individual digital signature key which is logged in the timestamp table each time the interval window is rolled.

In at least one embodiment the intervals between the timestamping windows i.e. when the interval window is rolled may be a fixed amount of time. An example of this embodiment includes but is not limited to where a new timestamp and hash value is logged to the timestamp table every ten seconds. Any fixed time interval is possible. In at least another embodiment the rolling of the interval window may be performed according to random intervals. As another embodiment usable in combination with other embodiments rolling of the interval window may be determined by a threshold number of digests inserted into the documents table during that interval window. An example of this embodiment includes but is not limited to where a new timestamp and hash value is logged to the timestamp table whenever five digest entries are made to the documents table since the interval window started. In at least another embodiment a user perhaps in exchange for a fee may request smaller time increments for the interval between timestamping windows. As still another embodiment usable in combination with other embodiments a user perhaps in exchange for a fee may be enabled to force the rolling of the interval window thereby triggering the next timestamp and hash value update to the timestamp table on demand. In such an embodiment the user may make a call to an application programming interface API which rolls the interval window by causing the current interval window to end and a new interval window to begin by entering a new timestamp and hash value into the timestamp table. Yet another embodiment usable in combination with other embodiments the interval window may be rolled when the number of digests in the Bloom filter exceeds a threshold. In still another embodiment usable in combination with other embodiments a user perhaps in exchange for a fee a user may be enabled to create an interval window exclusive for timestamping of the user s digest. In this embodiment the user may submit a request to timestamp the user s data or digest whereupon the current interval window is rolled the user s digest is logged into the documents table and the interval window is rolled again immediately thereafter in this embodiment only the user s digest is the sole digest logged within that particular interval window. As another embodiment usable in combination with other embodiments the interval window may be rolled when there are indications that the validity of a timestamp may have been compromised.

In at least one embodiment for the verification proof the accumulator may be hash block aligned such that the internal hash state reflects the earlier hash states of the accumulator and the amount of data necessary to exhibit in the final state may be partially shortened thereby. In this embodiment hash prefix reduction may be used to only show the internal state of the hash function being processed for all predecessors for example by returning an intermediate hash of the hash transform.

The timestamp provided by the timestamp service may be an entry into a database table associating the contents of the document with a value representing the current date and time to a sufficient precision and accuracy. For example the value may be a 64 bit datetime value that measures the number of microseconds from Jan. 1 1970 coordinated universal time. The timestamp service may or may not provide notification response to the entity submitting the document to the timestamp service . Examples of a notification response include but are not limited to an acknowledgement of receipt and successful timestamp of the document a response with at least a portion of the present or previous accumulator value a response including a message and a digital signature and a response including a Bloom filter of the digests submitted during a timestamp interval the timestamp interval and accumulator values being described in further detail below.

The timestamp service may comprise software instructions executing on one or more computing devices the one or more computing devices connecting to the computing device through a communication channel such as a physical local area network wide area network wireless network Internet or other manner of communication between computing devices. The computing device may access the timestamp service by making a call to the API . The API may comprise a set of functions routines protocols or procedural libraries for accomplishing the task of interacting with the timestamp service . The API may provide an interface between users and the timestamp service and at least ensure that users have appropriate credentials required for the requested action by the timestamp service.

The computing resource service provider may be a computing resource service provider similar to computing resource service provider in and may host one or more services APIs and databases such as the timestamp service the API and the database service . The timestamp service may further communicate with the database service which may be hosted on the same or different computing device as the timestamp service . The database service may further be hosted on one or more computing devices such as a distributing computing system. The database service in the environment may be used to host maintain and provide the means for inserting updating and retrieving records from database tables for a database described herein. The database serviced by the database service may be any type of database including a scalable database such as a NOSQL database or a key value store.

In timestamp table the initial row may be comprised of a timestamp at time zero i.e. representing the start time of the initial interval window i.e. at i 0 in the interval start field and a seed value of a hash of the timestamp in the accumulator field. As shown the next row may be comprised of a timestamp simultaneously representing the end of the initial interval window and the start of the next interval window i.e. at i 1 in the interval start field and a hash of the previous timestamp the previous accumulator value d and the digests collected during the initial interval window i.e. digest digest . The digests collected during an interval window may be retrieved from the documents table or may be held in a memory of the one or more computing devices hosting the database service of and or a data store similar to the data store discussed in connection with discussed in connection with . In at least one embodiment the accumulator may comprise hashes based on a Bloom filter rather than the digests.

The documents table may be updated with digests of data H data and a timestamp as requested by clients described in further detail in . Each subsequent time the interval window is rolled entries into the timestamp table are made similar to the next interval window described above. For example the next row may be comprised of a timestamp simultaneously representing the end of the initial interval window and the start of the next interval window i.e. at i 2 in the interval start field and a hash of the previous timestamp the previous accumulator value d and the digests collected during the initial interval window i.e. digest digest . Further details on the process of updating the timestamp table may be found in the description of .

As illustrated the timestamp service receives data from a source. Examples of a source include but are not limited to a user an application or service executing on one or more computing devices or an application or service executing on the timestamp server . The timestamp service may pass the data through a cryptographic hash function to produce a digest. However it may be that the source provides a valid digest of the data whereupon the cryptographic hash function may not be needed and the digest may pass directly to the timestamp server .

Upon receipt of the digest the timestamp server inserts the digest into the documents table along with a timestamp representing the current time . The timestamp server may be any suitable system such as web server and or application server discussed in connection with . The documents table may be the same or similar table as the documents table of and may be hosted by any database or file structure supporting hash key pairs including a scalable database service such as NoSQL the database service of and or a data store similar to the data store discussed in connection with .

In at least one embodiment a user service or resource may have its own dedicated documents table . In at least another embodiment the documents table may be shared by and may accept digests of data and corresponding timestamps from various different sources. In at least one embodiment the hash value field accepts a Bloom filter representing a set of digests stamped during the interval window rather than the individual digests and the timestamp field represents the start time of the interval window. Further details on the process of timestamping data may be found in the description of .

In the device performing the process determines whether the accumulator may be in an initial state the accumulator may be in an initial state if no previous value for the accumulator is present within the associated field of the timestamp table. The accumulator may additionally be considered to be in an initial state for various reasons including but not limited to that the previous accumulator value may have been compromised forged or corrupted. If the accumulator is in an initial state the device performing the process proceeds to wherein the current time as measured at a desired precision is set to be the interval start time value.

In the initial accumulator value is seeded to be a hash of the interval start time value. However the initial accumulator value may be set to any value including but not limited to some random value. In the initial accumulator value and the interval start time value are inserted into the timestamp table. The insertion of the initial accumulator value and the interval start time value indicates that the initial interval window has started at the time specified by the interval start time value. After the insertion of the initial accumulator value and the interval start time value into the timestamp table the device performing the process proceeds to wherein the device waits until it is time to roll an interval window.

In the device performing the process waits until it is time to roll the current interval window. As noted herein examples of events triggering the roll of an interval window include but are not limited to rolling the interval according to a fixed interval a random interval according to reaching a threshold number of digests having been timestamped according to exceeding a threshold size for a Bloom filter an indication that the validity of a timestamp has been compromised on a demand from a client or according to the billing structure of a client utilizing the timestamp service. When it becomes time to roll the interval window the device performing the process proceeds to where similar to wherein the current time as measured at a desired precision is set to be the interval start time value.

In a new accumulator value is generated. The accumulator value may be based at least in part on digests submitted during the interval window. The accumulator value may be further based at least in part on a previous accumulator value however the accumulator value may be further based on any value including but not limited to the timestamps corresponding to the digests submitted during the interval window a random value a hash of the interval start time value or some other value. The digests submitted during the interval window may each be a portion of a hash key pair with a corresponding timestamp as the other portion and as noted the corresponding timestamp may be additionally included in the hash when calculating the accumulator value. The digests submitted during the interval window may be retrieved from persistent or non persistent storage similar to the one or more storage devices disclosed within the description of such as from random access memory or from a database stored on one or more hard drives.

The operation depicted by step generates a new accumulator value by generating a hash of the previous interval start time the previous accumulator value and the digests collected during the current interval window. An advantage of basing the accumulator value at least in part on the hash key pair of the start of the previous interval window is that updating the accumulator in this way may make it more difficult to modify or forge the accumulator value without having access to all previous accumulator values and interval start time values and or without invalidating previous other timestamping actions. By including the digests collected during the current interval window in the hash that generates the accumulator value the determination of whether a particular digest was or was not timestamped within the interval window can be made by analyzing the accumulator value. Note that depending on the particular embodiment and how the roll of the interval window is triggered the interval window may role without collecting any digests during the interval window. In such a case the new accumulator value may be calculated without including digests or may be calculated with a random fixed or other value in place of the digests. Likewise in some instances only one digest may be collected during the interval window such as in the embodiment where the user may submit a request to timestamp the user s data or digest whereupon the current interval window is rolled the user s digest is logged into the documents table and the interval window is rolled again immediately thereafter. In other instances the digests may comprise two or more digests collected during the interval window.

After the accumulator value is generated the device performing the process proceeds once again to wherein the generated accumulator value and the interval start time value are inserted into the timestamp table. The insertion of the generated accumulator value and the interval start time value indicates that the previous interval window has rolled and a new interval window has begun at the time specified by the interval start time value.

In the data corresponding to the request may be processed through a hash function to generate a digest of the data. Note that it is possible that the request to timestamp data may include the digest of the data rather than the data itself or the data may itself be a digest the digest of the data being a digest of a valid format to be inserted into the documents table having been generated by the requestor or by a different device than the device performing the process . In either case the digest value to be inserted is set to be the digest of the data. In the timestamp value may be set to be the current time. In the digest value and the timestamp value are inserted into the documents table.

In some cases a data received for timestamping during an interval may not be fully processed until after the interval window rolls. In such a case the rolling of the interval window may be undone and the interval window re rolled to include the delayed data s digest in the accumulator hash. In another embodiment the documents table may have a flag field for whether the digest is included in the accumulator value. In such an embodiment the delayed digest s data may be flagged as not being in the present in the accumulator value of the timestamp table and during the validation operations described in conjunction with of may be omitted from the digests retrieved from the documents table. In still another example the digest of the data may be re timestamped such that the timestamp falls within the current interval window.

In the device performing the process may query a database table hereinafter referred to as the documents table for one or more timestamp values corresponding to the digest of the data to be validated. If no timestamp values corresponding to the digest of the data are present this indicates that either the data corresponding to the digest was not previously timestamped by the timestamp service operating in a manner described regarding or that the data has changed since the time it was previously timestamped. Thus if no timestamp values corresponding to the digest of the data are present the device performing the process proceeds to as the validation has failed. However if one or more timestamp values corresponding to the digest of the data are present within the documents table the device performing the process proceeds to .

In the one or more timestamp values corresponding to the digest of the data are retrieved. Depending on how many times the data may have been previously timestamped one or more timestamp values may be retrieved. In at least one embodiment the device performing the process may select the timestamp value corresponding to the digest of the data with the earliest date time. In this embodiment the validation is performed for the earliest timestamp corresponding to the digest of the data for example a user may be interested in obtaining proof of when the document was first created or timestamp. In at least another embodiment the device performing the process may select the timestamp value corresponding to the digest of the data with the most recent date time. In this embodiment the user may be interested in obtaining proof of the last known time that the document was in a particular state. In at least another embodiment the device performing the process may select multiple timestamp values corresponding to the digest of the data. In this embodiment the user may wish to validate multiple timestamps associated with the particular state of the data.

In the table associated with maintaining the state of the interval windows hereinafter referred to as timestamp table may be queried to determine the accumulator values at the start time of the active interval window during the period when the digest was timestamped. An example of this query includes but is not limited to where for each digest timestamp a first record may be returned for a maximum interval window start time where the digest timestamp is greater than or equal to the interval window start time. In the timestamp table may be queried to determine the accumulator values at the end time of the active interval window during the period when the digest was timestamped. An example of this query includes but is not limited to where for each digest timestamp a second record may be returned for a minimum interval window start time where the digest timestamp is less than the interval window start time. In these examples the first record interval window start time and the second record interval window start time represents the start and end times for the interval window during which the digest of the data was timestamped.

In the documents table may be queried to retrieve all digest values that were timestamped between the first interval window start time and the second interval window start time. Because the accumulator value of the interval windows in this example are based on digest values submitted during an interval window these digest values may provide assurance that the timestamp data has not been forged or replaced.

In the accumulator value from the timestamp table associated with the start of the interval window during which the digest of the data was timestamp may be retrieved. In the example described above for this accumulator value would be the accumulator value associated with the first record retrieved. In the accumulator value from the timestamp table associated with the start of the interval window associated with the interval window following the interval window during which the digest of the data was timestamped is retrieved. In the example described above for this accumulator value would be the accumulator value associated with the second record retrieved. Note that operations performed in may be cumulatively performed utilizing only one or more queries.

In the interval window start time the corresponding accumulator value and the digest values timestamped during the interval window may be passed through a hash function. In the examples described above the hash would be calculated based on the interval window start time of the first record retrieved in the accumulator value of the first record retrieved in and the digest values retrieved in .

In the hash value obtained in may be compared with the accumulator value obtained in step . If the hash value matches the accumulator value the device performing the process proceeds to wherein the device indicates that the timestamp of the digest of the data has been successfully validated. Otherwise the device performing the process proceeds to wherein the device indicates that the timestamp of the digest could not be validated indicating that the data digest timestamp or accumulator value may have been compromised forged or corrupted.

The computing resource service provider may provide various computing resource services to its customers. The services provided by the computing resource service provider in this example include a virtual computer system service a block level data storage service a cryptography service an on demand data storage service an authentication system a policy management service a task service and one or more other services . It is noted that not all embodiments described herein include the services described with reference to and additional services may be provided in addition to or as an alternative to services explicitly described herein. As described herein each of the services may include one or more web service interfaces that enable the customer to submit appropriately configured API calls to the various services through web service requests. In addition each of the services may include one or more service interfaces that enable the services to access each other e.g. to enable a virtual computer system of the virtual computer system service to store data in or retrieve data from the on demand data storage service and or to access one or more block level data storage devices provided by the block level data storage service .

The virtual computer system service may be a collection of computing resources configured to instantiate virtual machine instances on behalf of the customer . The customer may interact with the virtual computer system service via appropriately configured and authenticated API calls to provision and operate virtual computer systems that are instantiated on physical computing devices hosted and operated by the computing resource service provider . The virtual computer systems may be used for various purposes such as to operate as servers supporting a website to operate business applications or generally to serve as computing power for the customer. Other applications for the virtual computer systems may be to support database applications electronic commerce applications business applications and or other applications. Although the virtual computer system service is shown in any other computer system or computer system service may be utilized in the computing resource service provider such as a computer system or computer system service that does not employ virtualization or instantiation and instead provisions computing resources on dedicated or shared computers servers and or other physical devices.

The block level data storage service may comprise one or more computing resources that collectively operate to store data for a customer using block level storage devices and or virtualizations thereof . The block level storage devices of the block level data storage service may for instance be operationally attached to virtual computer systems provided by the virtual computer system service to serve as logical units e.g. virtual drives for the computer systems. A block level storage device may enable the persistent storage of data used generated by a corresponding virtual computer system where the virtual computer system service may only provide ephemeral data storage.

The computing resource service provider also includes a cryptography service . The cryptography service may utilize one or more storage services of the computing resource service provider to store keys of the customers in encrypted form whereby the keys may be usable to decrypt customer keys accessible only to particular devices of the cryptography service .

The computing resource service provider further includes an on demand data storage service . The on demand data storage service may be a collection of computing resources configured to synchronously process requests to store and or access data. The on demand data storage service may operate using computing resources e.g. databases that enable the on demand data storage service to locate and retrieve data quickly so as to allow data to be provided in responses to requests for the data. For example the on demand data storage service may maintain stored data in a manner such that when a request for a data object is retrieved the data object can be provided or streaming of the data object can be initiated in a response to the request. As noted data stored in the on demand data storage service may be organized into data objects. The data objects may have arbitrary sizes except perhaps for certain constraints on size. Thus the on demand data storage service may store numerous data objects of varying sizes. The on demand data storage service may operate as a key value store that associates data objects with identifiers of the data objects which may be used by the customer to retrieve or perform other operations in connection with the data objects stored by the on demand data storage service .

As illustrated in the computing resource service provider in various embodiments includes an authentication system and a policy management service . The authentication system in an embodiment is a computer system i.e. collection of computing resources configured to perform operations involved in authentication of users of the customer. For instance one of the services and may provide information from a user to the authentication service to receive information in return that indicates whether or not the user requests are authentic.

The policy management service in an embodiment is a computer system configured to manage policies on behalf of customers such as customer of the computing resource service provider . The policy management service may include an interface that enables customers to submit requests related to the management of policy. Such requests may for instance be requests to add delete change or otherwise modify policy for a customer or for other administrative actions such as providing an inventory of existing policies and the like.

The computing resource service provider in various embodiments is also equipped with a task service . The task service is configured to receive a task package from the customer and enable executing tasks as dictated by the task package. The task service may be configured to use any resource of the computing resource service provider such as one or more instantiated virtual machines or virtual hosts for executing the task. The task service may configure the one or more instantiated virtual machines or virtual hosts to operate using a selected operating system and or a selected execution application in accordance with a requirement of the customer .

The computing resource service provider additionally maintains one or more other services based at least in part on the needs of its customers . For instance the computing resource service provider may maintain a database service for its customers . A database service may be a collection of computing resources that collectively operate to run one or more databases for one or more customers . The customer may operate and manage a database from the database service by utilizing appropriately configured API calls. This in turn may allow a customer to maintain and potentially scale the operations in the database. Other services include but are not limited to object level archival data storage services services that manage and or monitor other services and or other services.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in at least one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

