---

title: Integrated support for application porting transparency and streamlined system migration in heterogeneous platform environments
abstract: Converting data for an application ported from an operating system (OS) platform of a first computer to an OS platform of a second computer. Configuration information associated with ported application including the first computer's OS platform is stored on the second computer. The ported application executing on the second computer receives first data encoded in a first code set. The OS of the second computer receives a request to convert the first data to a second data encoded in a second code set, locates a first-code-set-to-second-code-set mapping based on at least maintained code set mappings of the OS of the first computer, and converts the first data to the second data using the located first-code-set-to-second-code-set mapping. The second data is compatible for processing on the second computer and output from converting the data on the second computer is equivalent to an output from converting the data on the first computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09513978&OS=09513978&RS=09513978
owner: International Business Machines Corporation
number: 09513978
owner_city: Armonk
owner_country: US
publication_date: 20141017
---
The present disclosure relates generally to multicomputer data transfer and more particularly to information exchange application porting and system migration in heterogeneous platform environments.

A code set or coded character set such as UTF 8 or ISO 8859 1 is a set of rules that defines a human language character set and a one to one relationship between each character in the language for example alphanumeric characters and its computer operating system recognized bit pattern. Different operating system platforms such as Linux AIX Solaris Hewlett Packard and Windows may each utilize a different set of standards versions and rules e.g. customization rules to encode the same human language characters.

Encoded characters may be converted from one encoding to another with code set converters. Code set converters use first code set to second code set mappings or code set mappings that define the relationship between two code sets to map characters encoded in a first code set to the encoding of a second code set. A plurality of code set converters exist to support the multitude of different languages and code set standards worldwide. Code set conversion is an important feature in a multi national server operating system especially in an information exchange network in which information crosses geographic locations and operating system platforms.

Embodiments of the present invention disclose a computer program product and system for converting data for an application that is ported from an operating system OS platform of a first computer to an OS platform of a second computer. Configuration information associated with a ported application that includes information corresponding to the OS platform of the first computer is stored on the second computer. The ported application executing on the OS platform of the second computer receives first data encoded in a first code set. The OS platform of the second computer receives a request to convert the first data to a second data encoded in a second code set locates a first code set to second code set mapping based on at least maintained code set mappings of the OS platform of the first computer and converts the first data to the second data using the located first code set to second code set mapping such that the second data is compatible for processing on the OS of the second computer and an output resulting from converting the data on the OS platform of the second computer is equivalent to an output resulting from converting the data on the OS platform of the first computer.

An information exchange network such as cluster computing and cloud computing may include a plurality of computing devices connected together in a network for example the Internet a local area network a wide area network or a wireless network where the plurality of computing devices may execute a heterogeneous plurality of operating systems. The plurality of computing devices in the network may each support different code sets and code set mappings depending for example on the computing device s operating system its system wide primary language settings its geographic location and any customized code sets. Each operating system platform may have its own code set naming conventions and character mapping standards for any particular language. Individual computing devices executing any operating system platform may have specialized code sets to support localization or customization of a language.

Applications executing on a computing device such as an e mail server or data base server may receive information from other computing devices in its information exchange network. Information may include but is not limited to message exchanges data transfers data base access results security authentication data ported application code migrated data etc. The received information may originate on any computing device in the information exchange network which may be executing any of a plurality of operating systems each operating system supporting a plurality of code sets. The received information may have been encoded by a computing device using code set standards and rules that differ from that of the receiving computing device.

To properly display or use the received information the receiving computing device may select code set conversion code or a code set converter to convert the information into a code set recognized by its operating system. Each of the plurality of network connected computing device operating systems may have its own native set of code sets and converters for converting the received information. Each of the plurality of network connected computing device operating systems may using its native converters convert the received information differently.

These differences in code sets and code set converters may cause compatibility problems for applications such as WebSphere and DB2 that wish to execute on a plurality of platforms. Compatibility problems may include input and or output data being converted differently on the different platforms. Porting such applications to a plurality of operating system platforms may require the applications either internally or through user configuration settings to identify a code set converter to be used on each platform to which they may be ported. Even when an application identifies a code set converter consistent conversion cannot be guaranteed if a computing device converts the information using a local version of the identified code set that differs from the standard code set for that operating system platform.

Differing code set conversions on different computing devices may also cause compatibility problems for communication between computing devices when for example message exchanges do not convert consistently on all computing devices in the information exchange network and message content becomes unreadable or corrupted because the code set conversions are not equivalent on all the different computing devices.

In addition to the impact on customer and vendor applications that wish to execute on multiple platforms and on network communications code set incompatibility may also impact product migration and database replication. Product migration may be impacted for example due to the need to manually adjust the migrated product to make it execute properly on a new platform and to provide valid output on the migrated to platform.

Database replication may be impacted for example if replication is attempted from an operating system platform that allows a code set to be specified for each table column replicated to an operating system platform that only allows a code set to be specified at the database level. That exemplary data base may only be replicatable as a single database in the receiving computing device if all the code sets for each column in the original database are the same.

Compatible or equivalent information conversion may be critical for information processing and storage systems in a heterogeneous information exchange network computing environment.

Various embodiments of the present disclosure may provide the ability to efficiently locate and load an optimum code set converter that reliably provides compatible information conversion among applications executing on heterogeneous operating system platforms using disparate code set standards.

In various embodiments of the present disclosure a computing device operating system may maintain a selection of code set converters from a plurality of operating system platforms hereinafter multi platform code set converters . The operating system rather than each application may select a code set converter from the selection of multi platform code set converters for received information. The operating system selected code set converter may produce converted output results compatible with the converted output that may have resulted if the information was converted on the originating computing device. Various embodiments may automatically select an optimum code set converter without requiring any modifications to originating applications allowing for transparent application porting i.e. without application modification and streamlined migration in heterogeneous platform environments.

Various embodiments may provide compatible information conversion without application modification regardless of which of the plurality of operating system platforms in a heterogeneous computing network originated the information exchange.

In various embodiments a computing device s operating system may provide options that allow users user groups and applications to define configuration and environmental values such as code set preferences preferred language preferred geographic location and originating platform either explicitly or through profile information. The operating system may in various embodiments create a history file for each user user group and application that may include the user user group or application originating platform and all code set conversions requested by the user user group or application. The history file may be utilized along with the configuration and environmental values provided by a user user group or application to select an optimum code set converter for that user user group or application.

The selected code set converter hereinafter converter may need to be located and loaded before information may be converted. An operating system supporting multi platform conversion may in various embodiments maintain pointers to each platform s converters for example in directories or in paths. In various embodiments the operating system may maintain a preferred pool of code set converters or code set preference list of frequently used converters for each application or user from which the operating system may efficiently load an optimum code set converter. In various embodiments the code set preference list may include pointers to converters. In certain embodiments the code set preference list may include the conversion code.

In various embodiments in which all operating system platforms support multi platform conversion application porting product migration and network communications may be transparently and compatibly exchanged across any of the heterogeneous computing devices in an information exchange network. The automatic and transparent compatibility may reduce the complexity of heterogeneous platform porting and migration and reduce the incompatibility of heterogeneous platform information communication allowing for reduced application modification when porting an application reduced preparation when migrating a product or system and reduced configuration complexity when defining a network.

Computing device may in various embodiments execute multi platform conversion system to automatically and transparently select locate and load an optimum code set converter for an application or user converting information from one code set to another. In various embodiments converting information from one code set to another may be initiated by an application or user executing a code set converter open and load application programming interface API such as the iconv open API in UNIX . Computing device may transparently convert the API input information compatibly with the information s originating platform regardless of the originating computing device platform by selecting locating and loading an optimum code set converter from a multi platform repository of code set converters.

Multi platform conversion system may execute on any operating system platform for example Microsoft Windows IBM AIX or Hewlett Packard that supports code set conversion. Various embodiments of the present disclosure may determine an optimum code set converter based on profile information obtained about the issuer of the open and load API and on a history of the issuer s open and load API usage.

Profile information may be obtained in various embodiments by profile manager . Profile manager may obtain profile information for applications users and user groups wishing to port migrate or exchange communications on computing device . Profile information may be obtained when applications users and user groups are identified to computing device . Profile information may include but is not limited to an identifier for the user user group application vendor etc. a conversion reason code e.g. ported application migrated data base a conversion data information type e.g. data base message a default geographic location a default language and locale a default operating system platform user groups served and related settings on any connected peer servers in the information exchange network. In certain embodiments the profile may include a preferred or a customized code set for the user user group or application. In various embodiments profile manager may maintain a history of each user user group and application that includes but is not limited to an originating platform for ported migrated or exchanged information lists of converters selected on prior open and load API invocations a frequency of a converter s selection and a timestamp for each selection of a converter.

Profile manager may receive profile information from users user groups application vendors and applications themselves through operating system defined profile settings or indirectly from public knowledge repositories for the user user group or application vendor. Profile manager may in certain embodiments obtain a pointer such as a universal resource locator URL to a private or public knowledge repository where profile information for that user user group application or vendor is maintained.

Profile repository in various embodiments may include the profile information including but not limited to originating platform primary language originating geographical location users served and specified preferred or customized code sets obtained by profile manager . Profile repository may be locally attached to computing device or may be accessible over a private or public network. A public profile repository may in certain embodiments include code page preferences and profiles for users user groups application vendors and applications obtained by a plurality of profile managers on a plurality of computing devices each with access to the public profile repository .

Desired code set identifier may in various embodiments analyze the profile repository built by profile manager for each user user group and application managed by profile manager on computing device and determine which of the plurality of code set mapping tables and converters in code set mapping table repository described below may be preferred converters for that user user group or application. Profile manager may initiate the execution of desired code set identifier for each user user group application etc. as they are identified to computing device .

Desired code set identifier may create a code set preference list for each user user group or application managed by application profile manager . Desired code set identifier may in various embodiments utilize the profile repository information received by profile manager such as originating platform primary language originating geographical location users served and specified preferred or customized code sets to select the code set converters to be included in each code set preference list . Desired code set identifier may for example include converters for the primary language code sets on the originating platform. The code set preference list may in various embodiments be a table a linked list or an ordered list of locations such as paths to the preferred converters.

Desired code set identifier may search the code set mapping table repository described in more detail below for the preferred converters to be added to the code set preference list . For preferred converters whose code set mapping tables are not already in code set mapping table repository desired code set identifier may search for the code set mapping tables for example in public vendor code matching table repositories. Desired code set identifier may add the found code set mapping tables to the code set mapping table repository build the converters for the added code set mapping tables and add them to the code set preference list . If no code set mapping tables for the preferred converters can be found desired code set identifier may identify a default converter to be used instead. The default converter may in certain embodiments be multiple converters such that the first converter converts A B and the second converter converts B C or the default converter may be a converter that uses a standard code page rather than a customized code page.

In various embodiments the code set preference list may be dynamically updated such that converters not initially included in the list may be added by desired code set identifier while unused converters may be removed. In various embodiments the code set preference list may include only the most frequently requested converters by the user user group or application. In certain embodiments code set preference list may only include the most recently requested converters. In various embodiments the number of converters maintained in the code set preference list may be configurable as well as the algorithm such as most recently used or most frequently used for replacing converters if the list reaches its maximum number of converters. Converter selector described in more detail below may in various embodiments search the code set preference list of the open and load API issuer for the selected converter. Locating the selected converter in the code set preference list may enhance the speed of conversion by eliminating the need to search all available converters for the desired converter.

Code set mapping table repository may in various embodiments include code set mapping tables from a plurality of operating system platforms. Certain embodiments may pre build the code set mapping table repository prior to accepting any data for conversion. In various embodiments multi platform conversion system may pre build code set mapping table repository to include all known code set mapping tables for all operating system platforms. These may be obtained for example through public vendor code matching table repositories and through the Unicode Consortium. In other embodiments multi platform conversion system may pre build code set mapping table repository to include a subset of known code set mapping tables and may add code set mapping tables as they are identified as preferred code set mapping tables by desired code set identifier .

In various embodiments multi platform conversion system may regularly search for new or updated code set mapping tables for example from the vendor public repositories to be added to the code set mapping table repository . In certain embodiments the search interval for new code page mapping tables may be configurable. In certain embodiments multi platform conversion system may search for new code set mapping tables when a new computing device that executes an operating system platform not already in the network is added to the information exchange network environment .

Multi platform conversion system may use the multi platform mapping tables in code set mapping table repository to build converters which may execute on the computing device s operating system. These built converters may convert input from the other platforms compatibly with the other platforms. In various embodiments multi platform conversion system may store the built converters by platform in separate locations such as paths such that they may be efficiently located and loaded when selected for an open and load API.

Multi platform conversion system may maintain one or more code set mapping table repositories one for each platform s code page mapping tables or may maintain separate paths or directories to each platform s code page mapping tables within a single code page mapping table repository . Multi platform conversion system may also maintain native code page mapping tables in code page mapping table repository . Various embodiments may also store the built converters and native converters in the code set mapping table repository along with the code set mapping tables.

Converter selector in various embodiments may execute each time a user user group or application issues an open and load API to convert input information. Converter selector may in various embodiments select the converter used to convert the input information based on the API issuer s profile information and the code sets requested in the API. Converter selector may search the code set preference list of the API issuer to determine if the selected converter is in the list. For selected converters that are in the API issuer s code set preference list converter selector may load the converter and convert the input information. In certain embodiments converter selector may update a timestamp or activity counter for the selected converter for code set preference list maintenance.

For converters that are not in the API issuer s code set preference list converter selector may search the code set mapping table repository for the selected converter. In certain embodiments the application originating platform information may be used to limit the code set mapping table repository search to only those converters associated with the originating platform. In certain embodiments converters for different platforms may be located in different directories or paths and converter selector may readily locate the appropriate path or directory to search. For selected converters that are found in the code set mapping table repository converter selector may load the converter and convert the input information. Converter selector may also add the converter location to the code set preference list for the issuer of the API and set a timestamp or update an activity counter for the selected converter in the code set preference list .

For a selected converter that is not in the code set mapping table repository converter selector may in certain embodiments search for the selected converter for example in public vendor code set mapping table repositories associated with the originating platform. In certain other embodiments converter selector may select a default converter from the code set preference list or from the code set mapping table repository . For converters located via the search converter selector may add the located code set mapping table to the code set mapping table repository and build a converter for the located mapping table. Converter selector may load the built converter and convert the input information. Converter selector may also add the built converter location to the API issuer s code set preference list and set a timestamp or update an activity counter for the selected converter in the code set preference list .

In various embodiments converter selector may signal profile manager to update the API issuer s history to reflect the selected converter.

Computing device represents a computing device system or environment and may be a laptop computer notebook computer personal computer PC desktop computer tablet computer thin client mobile phone or any other electronic device or computing system capable of performing the required functionality of embodiments of the disclosure. Computing device may include internal and external hardware components as depicted and described in further detail with respect to . In other various embodiments of the present disclosure computing device may represent a computing system utilizing clustered computers and components to act as a single pool of seamless resources. In general computing device is representative of any programmable electronic devices or combination of programmable electronic devices capable of executing machine readable program instructions in accordance with an embodiment of the disclosure.

In an exemplary embodiment the customer or the application vendor may wish to port the application to execute on a different computer platform a platform that may execute with operating system B. The application in various exemplary embodiments may continue to receive the same input data from the other computers attached locally or over a network after porting to the new platform and may now convert the data for processing on operating system B . If the data conversion is inconsistent between the two exemplary operating systems A and B the ported application may not function correctly on operating system B. For example if Hewlett Packard is operating system A and AIX is operating system B Japanese input data received by the application may convert inconsistently on the two operating systems because the code sets for the Japanese language on the Hewlett Packard operating system platform differ from the Japanese language code sets on the AIX operating system platform even though the code sets are identically named on the two platforms.

The ported application may not need to be aware of these code set inconsistencies if exemplary operating system platform B includes integrated support for heterogeneous platform environments. The application may be transparently ported. Without integrated support for heterogeneous platform environments the ported application may require modification to recognize and handle the code set inconsistencies.

In various embodiments when the ported application is defined on the ported to computer operating system in this exemplary embodiment operating system B configuration information for the ported application may be stored including the operating system platform from which the application is porting in this exemplary embodiment operating system platform A .

In various embodiments after the ported application receives input data that must be converted the ported application may issue an open and load API. In the exemplary embodiment the open and load API may be a request to convert Japanese input data. In various embodiments converter selector on operating system platform B the ported to system which includes integrated support for heterogeneous platform environments may at receive the conversion request resulting from the issuance of the open and load API. If in the exemplary embodiment the conversion request in the API requires a Japanese language converter that is in the code set preference list of the ported application that issued the API as determined at converter selector may utilize the location information in the code set preference list to load the selected Japanese language converter and convert the input information at for continued processing on operating system B. 

If in the exemplary embodiment the conversion request resulting from the issuance of the API requires a Japanese language converter that is not in the code set preference list of the ported application as determined at converter selector may utilize the profile repository to obtain the originating platform of the application issuing the API at in this exemplary embodiment operating system A . Using location information maintained by the operating system B converter selector may at locate the ported application s originating platform operating system A set of mapping tables in the code set mapping table repository . If an operating system A Japanese language converter matching the conversion requested by the application in the open and load API is found in the code set mapping table repository at converter selector may at add the found converter location to the code set preference list of the ported application and may at load the converter and convert the Japanese language input data.

If in the exemplary embodiment an operating system A Japanese language converter matching the conversion requested by the application in the open and load API is not found at in the code set mapping table repository converter selector may locate a default converter at to satisfy the conversion request. The default converter may utilize intermediate conversions to satisfy the conversion request. Converter selector may load the default converter at and convert the input information.

Computing device can include one or more processors one or more computer readable RAMs one or more computer readable ROMs one or more computer readable storage medium device drivers read write drive or interface and network adapter or interface all interconnected over a communications fabric . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system.

One or more operating systems multi platform conversion systems profile managers desired code set identifiers converter selectors code set preference lists profile repositories and code set mapping table repositories are stored on one or more of the computer readable storage medium for execution by one or more of the processors via one or more of the respective RAMs which typically include cache memory . In the illustrated embodiment each of the computer readable storage medium can be a magnetic disk storage device of an internal hard drive CD ROM DVD memory stick magnetic tape magnetic disk optical disk a semiconductor storage device such as RAM ROM EPROM flash memory or any other computer readable storage medium that can store a computer program and digital information.

Computing device can also include a R W drive or interface to read from and write to one or more portable computer readable storage medium . Multi platform conversion system profile manager desired code set identifier converter selector code set preference list profile repository and code set mapping table repository can be stored on one or more of the portable computer readable storage medium read via the respective R W drive or interface and loaded into the respective computer readable storage medium .

Computing device can also include a network adapter or interface such as a TCP IP adapter card or wireless communication adapter such as a 4G wireless communication adapter using OFDMA technology . Multi platform conversion system profile manager desired code set identifier converter selector code set preference list profile repository and code set mapping table repository can be downloaded to the computing device from an external computer or external storage device via a network for example the Internet a local area network or other wide area network or wireless network and network adapter or interface . From the network adapter or interface the programs are loaded into the computer readable storage medium . The network may comprise copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers.

Computing device can also include a display screen a keyboard or keypad and a computer mouse or touchpad . Device drivers interface to display screen for imaging to keyboard or keypad to computer mouse or touchpad and or to display screen for pressure sensing of alphanumeric character entry and user selections. The device drivers R W drive or interface and network adapter or interface can comprise hardware and software stored in computer readable storage medium and or ROM .

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

Although preferred embodiments have been depicted and described in detail herein it will be apparent to those skilled in the relevant art that various modifications additions substitutions and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims.

