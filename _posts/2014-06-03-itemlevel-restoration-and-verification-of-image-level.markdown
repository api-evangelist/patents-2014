---

title: Item-level restoration and verification of image level
abstract: Systems and methods for item-level restoration from and verification of an image level backup without fully extracting it. The method receives backup parameters and selection of an image level backup to restore or verify and initializes virtual storage. The method attaches the virtual storage to a hypervisor to launch a virtual machine (VM) to test and restore data objects. The method stores VM virtual disk data changes resulting from restoration and verification in a changes storage. The method optionally reconfigures VMs to use an isolated network. The method optionally uses a routing appliance to provide access to VMs running in the isolated network from a production network. The method determines if the VM operating system (OS) is able to start using restored copies of selected data objects and tests applications associated with selected data objects. The method displays restoration and test results in an interface and automatically delivers the results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378121&OS=09378121&RS=09378121
owner: Veeam Software AG
number: 09378121
owner_city: Baar
owner_country: CH
publication_date: 20140603
---
The present application is a continuation of U.S. Non Provisional patent application Ser. No. 13 833 434 filed on Mar. 15 2013 which is a continuation of U.S. Non Provisional patent application Ser. No. 12 901 233 filed on Oct. 8 2010 now U.S. Pat. No. 8 402 309 which claims the benefit of U.S. Provisional Patent Application No. 61 250 586 filed on Oct. 12 2009 and U.S. Provisional Patent Application No. 61 302 743 filed on Feb. 9 2010 all of which are incorporated by reference herein in their entireties.

The present invention is related to data backup and recovery. In particular the present invention relates to methods systems and computer program products for verifying the recoverability of virtual machine data stored in an image level backup file and recovering such data.

Restoration of items from backups and verification of recoverability from backups has been a concern throughout the era of the personal computer and distributed client server systems. Users need an ability to restore individual application items from full image level backups including but not limited to backups snapshots copies and replicas. Some examples of data items that typically need to be restored include 

an individual mailbox or email message from an email server backup such as but not limited to a backup of a MICROSOFT Exchange server 

an individual user from directory server backup such as but not limited to a MICROSOFT Active Directory backup 

an individual table view or other database object from a database server backup such as but not limited to a backup of a MICROSOFT SQL SERVER ORACLE SYBASE or MYSQL database server and

an individual document from a content library such as but not limited to a backup of a MICROSOFT SharePoint server.

Conventional methods for restoration of application items require application item level processing during backup. Thus the data for item level restorations is readily available with this approach. However conventional item backup techniques have a number of drawbacks. First they require backup agents running next on the application server. Second they typically require the same data to be backed up twice on both the image level and the object level . This results in slower backup performance and larger backup files which contain redundant data within them.

Other conventional backup solutions are based on reverse engineering of a proprietary binary storage format and extracting the data directly from a file used by an application that stores the data. Some examples of such files include MICROSOFT Exchange MDB files and MICROSOFT Active Directory NTDS.DIT files. An example of such a solution is Kroll OnTrack. Before application item level restoration can take place the required files to be extracted from the image level backup files. An example of such two step approach is a bundle of Vizioncore VRANGER PRO performing Exchange MDB file recovery from image level backup file and QUEST Recovery Manager for Exchange products performing individual item recovery from the extracted Exchange MDB file using low level API .

This conventional item level restoration technique has a number of drawbacks as well. It usually requires the necessary file to be restored from an image level backup to the object level restore application which requires additional time and system resources. Some conventional solutions also involves using the undocumented APIs or proprietary binary structure of the underlying files. This makes the restoration approach unreliable because any application patch or modification resulting in changes of the binary storage structure will render the restoration solution inoperable.

Conventional solutions also imposes a high cost of developing and maintaining the solution because of a need to reverse engineer internal undocumented APIs or the binary storage format and update the product as the storage format or APIs are adjusted by a vendor due to updates or patches.

Finally conventional solutions do not guarantee recoverability of data. Backup administrators cannot know if the particular backup is good restorable and contains valid uncorrupted data until they actually try to restore the data. Administrators have to take risks because traditional methods of backup recoverability verification do not provide reasonable means to test every produced backup.

Traditional methods for backup recoverability testing include manual procedures involving the complete restoration of image level backup into an isolated environment. In order to conserve storage space backup files are typically highly compressed and or dc duplicated. For example some commercially available backup tools such as VEEAM Backup from Vecam Software International Ltd. provide mechanisms for deduplication and compression of image level backup files. Deduplication may be applied when backing up multiple virtual machines VMs that have similar data blocks within them.

With deduplication identical disk blocks or blocks of free space are eliminated from a backup file which decreases the size of the created image level backup file. However while deduplication serves to decrease the size of backup files it increases the amount of time needed to perform subsequent backup verification and restorations from the backup files because the backup data is no longer stored in native format.

Another means for decreasing the backup size is compression. Again while compression decreases the size of created backup files it increases the duration for backup creation verification and restoration procedures.

In order to enhance security backup files are also often encrypted. Thus in an initial step backup files may need to be extracted i.e. decompressed and or decrypted completely back to the native format before their contents can be read. Then in case with some applications such as MICROSOFT Active Directory Domain Controller the extracted data is copied over to an isolated test environment so the production environment is not affected during the testing. If the tested service relies on more than one application to run the steps are repeated for all other applications. Finally all of the service dependencies are started and testing is performed to ensure that the service is working normally and the data is not corrupted.

With conventional backup verification approaches executing backup verification can be a time consuming process due to involving decompressing decrypting extracting and staging the full contents of an image level backup in a test environment before verification can commence. Traditional backup verification methods do not enable system administrators to quickly and thoroughly verify correct recoverability of an image level backup instead typically relying on manual verification. Accordingly what is needed is a system to enable administrators to quickly and accurately verify the recoverability of an image level backup.

Thus traditional item backup restoration and verification solutions have a number of drawbacks. These traditional solutions typically require that the backup file to be verified or to be used for an item level restoration be fully extracted first which requires significant free disk space and time. For example it may take hours to extract and copy a backup s contents to a test environment due to the large size of image level backups. This approach typically requires dedicated hardware and storage resources such as an isolated test environment or computer lab in order to conduct the testing of the restored data objects. Additionally such backup restoration and testing requires a significant amount of manual operation and intervention from administrators such as initiating restores test environment configuration and testing operation of restored applications and data objects. Due to all these factors it is simply impractical to perform recoverability testing and disaster recovery exercises on more than a small scope of backups and more often than a few times per year. This means that recovery of data from a majority of backups simply cannot be guaranteed. Similarly performing an item level restore may take too much time as compared to the time it takes to perform a full computer restore.

Therefore there is a need for an efficient low cost methods for recovering an item from an image level backup and for testing recoverability of image level backups.

Embodiments of the invention include methods systems and computer program products for recovering an application level item from an image level backup and verifying the recoverability of data stored in an image level backup. Example methods for recovering file system objects from an image level backup without requiring the restoration process to be executed on a computer running an operating system OS that supports the virtual disk file system type backed up in the image level backup are described in U.S. Provisional Patent Application No. 61 354 529 filed on Feb. 9 2010 entitled Cross Platform Object Level Restoration From Image Level Backups which is incorporated herein by reference in its entirety.

The methods systems and computer program products perform item restoration and backup verification that substantially obviates one or several of the disadvantages of traditional approaches.

Embodiments of the present invention are related to a system and method for recovering an item from an image level backup. In an embodiment of the invention a system restores individual application level items or objects directly from an image level backup snapshot copy or replica without prior incremental restorations of individual data files from an image level backup. For example restoration of a single row of a relational database table without restoration of the entire relational database file from the backup is enabled.

According to an exemplary embodiment existing Application Programming Interfaces APIs for application item level restore operations are used. An exemplary method does not rely on a binary storage format data and is therefore not affected by patches or application updates that change a binary storage format used by an application.

In an embodiment an item restoration method does not employ reverse engineering of an application s binary storage format. The method does not require additional development in order to support the applications when the storage format is adjusted due to installation of upgrades patches or other modifications.

Embodiments of the invention include a system for verification of an image level backup without prior incremental restorations of data from the image. For example the system can verify that a MICROSOFT Exchange server stored in an image level backup can be successfully booted up without having to first restore the entire MICROSOFT Exchange server image from the image level backup.

Embodiments of the invention additionally use virtual storage to provide access to data stored inside of image level backups i.e. backup images .

In an embodiment the backup verification method does not require performing a full restore of the backup before the testing can be started and therefore does not require large amount of free disk space to host the extracted data or time for extraction.

Embodiments of the invention additionally include a method that eliminates the need for isolated dedicated hardware and storage resources. Instead in an embodiment the method uses a small amount of production system resources to verify image level backups. In another embodiment the amount of resources used during backup verification can optionally be controlled by a dedicated resource pool to ensure that backup verification activities do not negatively affect the production environment.

In accordance with an embodiment of the invention a method for backup verification is fully automated and does not require manual configuration of a test environment or manual application testing to be performed by providing the ability to automate it. In addition because the verification is automated it can be scheduled for off hours or weekends when the production environment usually has extra free capacity to handle backup verification activities.

Embodiments of the invention additionally include a computer readable medium having computer executable instructions stored thereon that if executed by a computing device cause the computing device to perform operations for image level backup verification and item restoration.

Further features and advantages of the invention as well as the structure and operation of various embodiments of the invention are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The present invention will now be described with reference to the accompanying drawings. In the drawings generally like reference numbers indicate identical or functionally similar elements. Additionally generally the left most digit s of a reference number identifies the drawing in which the reference number first appears.

The following detailed description of the present invention refers to the accompanying drawings that illustrate exemplary embodiments consistent with this invention. Other embodiments are possible and modifications can be made to the embodiments within the spirit and scope of the invention. Therefore the detailed description is not meant to limit the invention. Rather the scope of the invention is defined by the appended claims.

It would be apparent to one of skill in the art that the present invention as described below can be implemented in many different embodiments of software hardware firmware and or the entities illustrated in the figures. Any actual software code with the specialized control of hardware to implement the present invention is not limiting of the present invention. Thus the operational behavior of the present invention will be described with the understanding that modifications and variations of the embodiments are possible given the level of detail presented herein.

Unless specifically stated differently a user an operator and an administrator are interchangeably used herein to identify a human user a software agent or a group of users and or software agents. Besides a human user who needs to restore items from image level backups and verify image level backups a software application or agent sometimes needs to verify backups. Accordingly unless specifically stated the terms operator administrator and user as used herein do not necessarily pertain to a human being.

As used herein in an embodiment the term server encompasses computing devices that are designed to function as one or more of email servers Domain Name System DNS servers Domain Controller DC servers application servers database servers web servers firewall servers and other enterprise servers file servers and back end servers. A server may be comprised of one or more server machines. A server may be implemented as a collection of servers such as a server farm or server cluster. For example web servers may be commercially available server machines with one or more central processing units CPUs . Alternatively these web servers may comprise multiple computing devices and or computing functionality hosted on multiple server machines i.e. a server farm .

The present invention relates to improved systems methods and computer program products for verifying image level backups.

A virtual storage is an application or process that allows representing publishing in native source format the entire or partial content from the required image level backup file located in a local or remote backup files storage . In embodiments of the invention a virtual storage can be implemented in the form of a process a software agent an application a virtual machine VM hardware a software appliance or a combination of hardware and software that allows representing either the entire or partial content of a requested backup file in native format.

As used herein. virtual storage refers to logical storage that has been abstracted and separated from physical storage such as network attached storage NAS file servers disks and other physical storage devices. In an embodiment virtual storage is logical storage implemented via virtual storage logic and is viewable within a computer infrastructure as one or more storage devices which are separated from physical storage disks. As used herein a virtual machine VM is a software implementation of a machine such as a server computer or other computing device that supports the execution of a complete operating system OS and executes application programs like a physical machine. A VM is a software implementation that duplicates the functionality of a physical machine implemented in hardware and software. Software applications and the OS running on a VM are limited to the resources and abstractions provided by the VM. In an embodiment virtual machines VMs are viewable within an overall virtual infrastructure. According to an embodiment of the invention the image level backup file to restore an item from can be located in local storage or remote backup files storage . In the exemplary embodiment depicted in remote backup files storage is used to store backup files containing complete image level backup of a computer or server. These backup files are typically highly compressed and de duplicated to reduce the amount of storage required in some cases they are also encrypted for security reasons. Virtual storage can be made available to consumers as locally attached storage or via public or proprietary storage or data access protocols such as but not limited to the Network File System NFS Common Internet File System CIFS and Internet Small Computer System Interface iSCSI .

Restoration operator console communicates with a virtual environment implemented on a virtual machine monitor VMM or hypervisor . As would be understood by one skilled in the relevant art s hypervisor may be implemented as software or a combination of hardware and software to implement platform virtualization software that allows multiple operating systems OSs to run concurrently on a single host computer. Virtual storage is accessible by hypervisor that support the same storage format as virtual storage is configured to emulate. For example virtual storage can appear in the form of an NFS server in the case of VMWARE ESX hypervisor or in the form of a CIFS server in the case of MICROSOFT HYPER V hypervisor. According to an embodiment hypervisor performs virtual disk image read operations from virtual storage and writes changed virtual disk data back to virtual storage or directly to the changes storage . Changes storage stores virtual disk image data changes inflicted by the item level restoration processes described herein. The written data can also be read back by hypervisor in cases when hypervisor needs to access previously changed virtual disk image data blocks. Thus the exposed images residing inside backup files remain read only and intact on the backup storage for the duration of the item level restoration process.

Virtual storage handles these operations using appropriate formats and stores the modified virtual disk image data on changes storage . In accordance with embodiments of the present invention changes storage can be implemented in the following different ways. Changes storage can be implemented as a part of virtual storage logic by intercepting and re directing write input output I O to the designated storage device. Changes storage can also be implemented using native disk I O redirection capabilities of hypervisor snapshot non persistent disk etc. when all data changes inflicted by the verification process are redirected to designated storage by hypervisor itself instead of being committed into a published disk image. In an embodiment hypervisor can create a snapshot of a disk image to protect the disk image from data changes associated with the backup verification process. Finally changes storage can be implemented using capabilities of remote backup files storage for example using storage area network SAN snapshots.

Once Virtual Storage is fully initialized and running restoration operator console issues a command to con figure hypervisor and attach the Virtual Storage to hypervisor . Once selected one or more VM is published via Virtual Storage this datastore will show a repository of files representing backed up virtual machine. This approach enables hypervisor to access all VM files i.e. configuration snapshots auxiliary files which in turn enables full hypervisor capabilities for the VM published in this manner. For example this approach enables using VMWARE Storage VMotion to seamlessly migrate the published VM files to another datastore available to hypervisor which may provide faster I O performance than Virtual Storage and thus better suit specific recovery tasks the user has.

Hypervisor is used to start up the virtual machine using VM data files published from the image level backup file on Virtual Storage . In accordance with embodiments of the invention hypervisor can be but is not limited to VMMs such as VMWARE Player. MICROSOFT VirtualPC SUN VirtualBox VMWARE ESX ESXi MICROSOFT Hyper V CITRIX XENServer PARALLELS and other. As it would be apparent to one of skill in the art other hypervisors and virtualization solutions can be used as well.

More than one virtual machine may need to be started if the application you are restoring from depends on other services. For example MICROSOFT Exchange requires presence of at least one MICROSOFT Active Directory Domain Controller Global Catalog server as well as Domain Name System DNS server to start up MICROSOFT Exchange services.

Once all the required restored VMs fully boot up and the applications inside of those VMs from which the operator needs to restore individual items are running the application item level restore logic connects to the running application over the network using standard application programming interfaces APIs to get access to application items defined by a restore operator via user interface UI of restoration operator console . The retrieved application items are then transferred to a location defined by the restore operator. The item can be restored locally to operators console or to a remote server. The item can also be injected back into the running application including the original production application server implemented either on a virtual or a physical computer .

In some cases restored VMs need to be started up in an isolated network. For example this may be needed because two computers with the same Internet Protocol IP address cannot be started on the same network. However in many cases the production computer corresponding to the image backup you are recovering from will already be running on the network at the time of testing. Thus restored VMs must be running in isolated network. In such cases routing appliance is used to route network traffic between a production network containing Application Item Restore Logic and isolated network restored VMs are running in as well as between isolated networks if restored VMs are connected to more than one network.

According to embodiments of the invention routing appliance can be implemented within system architecture in the form of a process a software agent an application a VM hardware a software appliance or a combination of hardware and software. In an embodiment routing appliance is used to facilitate application item recovery from an image level backup. When deployed routing appliance is connected to both an isolated test networks and a production network. Routing appliance serves as a network router in application item recovery verification system architecture depicted in . Routing appliance acts as a gateway between the production network and routes network traffic between the corresponding restored VMs and computers in the production network. With the help of a proxy application routing application or other standard or custom specialized application that routing appliance can accept commands from routing appliance routes communications between the production network and the isolated test network. In an exemplary embodiment routing appliance can receive commands from restore operator console and execute the received commands against restored VMs in the isolated test network. Routing appliance then routes response data packets from restored VMs back to the requestor in the production network. In this way multiple virtual networks are supported while simultaneously keeping the test network isolated from the production network. In one embodiment routing appliance routes backup verification parameters between application item level restore logic within the production network and restored VMs in the test network.

More particularly flowchart illustrates the steps by which item level restorations from image level backups are performed according to an embodiment of the present invention. is described with continued reference to the embodiment illustrated in . However is not limited to that embodiment. Note that the steps in the flowchart do not necessarily have to occur in the order shown. Also some steps are not mandatory e.g. the VM shutdown described with reference to step below and can be replaced by similar steps

In step restore parameters are received. In an embodiment the restore parameters are received from an operator who specifies restore parameters using restoration operator console . The restore parameters received in this step may include one or more of an image level backup file location restore point. VM containing the required application application level items to be restored i.e. restore point to restore to a location and location to restore the items to. After receipt of the restore parameters the method proceeds to step .

In step Virtual Storage is started. In accordance with an embodiment an operator using restoration operator console initializes Virtual Storage by starting a storage service or a process and attaching corresponding image level backup file s from remote backup files storage in step via data conversion engine that performs on the fly on demand or as needed decompression de deduplication decryption and any other operation required to translate specific parts of backup file content into content of original VM data files in the native format. After Virtual Storage is initialized and the image level backup file s are attached from remote backup files storage the method proceeds to step .

In step the operator console attaches the Virtual Storage to hypervisor by issuing the corresponding hypervisor or VMM configuration commands. In step a VM is registered with hypervisor using VM configuration file published from backup file reconfigured when necessary and launched. Note that multiple VMs are used in case item restoration requires accessing multiple applications over network. If multiple VMs need to be launched each VM is started according to a VM dependency list for the application being restored.

According to an embodiment of the invention restoration operator console monitors the state of applications using ping and or API commands and waits until the application is started completely inside the VM as illustrated by step .

In step a determination is made based on monitoring the status of an application as to whether the application is ready. If it is determined that the application is ready control is passed to step . If it determined that the application is not ready control is passed back to step where the application s status is monitored continuously until the maximum allowed application initialization timeout is exceeded.

In step a restoration operator using restoration operator console configures and starts application item level restore logic . In an embodiment the Application item level restore logic is a process or module that can be run on a remote computer. Alternatively application item level restore logic can run on a hypervisor directly inside a VM with the restored application being injected into the VM or being already present on VM before the backup was taken . In step the restore parameters are acquired. The restore parameters may include one or more of the Internet Protocol IP address of the VM running the application application objects to be fetched or a location for saving the restored items. After the application item level restore logic is started control is passed to step .

In step the application item level restore logic connects to the application through restored application s standard APIs fetches the required items and saves the items to a specified location. Once item restoration process is completed virtual machines are shut down in step . After the VMs are shut down control is passed to step .

In step hypervisor configuration is cleaned up e.g. virtual machines are deleted and changes storage data is deleted discarded.

At phase 3 the VM is started in a production network or network that is isolated from main production environment not shown on . Note that in this case the application item level restore logic either has access to the isolated network area or its process is launched directly inside the VM to provide for local access to data. In the embodiment depicted in the VM started in phase 3 is a MYSQL database server running from backup.

In phase 4 once the application inside the VM is completely started and begins to respond the business logic connects to the application using application s APIs and restores the required application items. If required in phase 5 the restored items are restored back into the production server which otherwise remains untouched during all operations . In the example embodiment shown in phase 5 comprises restoring restored items into a production MYSQL database server. Alternatively the restore items are stored in location selected by the restore operator. In an embodiment the location is selected using UI .

As would be understood by one skilled in the art the method and system described herein for efficient item level restoration uses application vendor provided APIs and does not rely on reverse engineering binary storage formats and are therefore not affected by OS or application patches or updates which alter binary storage formats used by applications.

In embodiments of the invention virtual storage described above with reference to is used in backup verification system architecture and can be implemented in the form of a process a software agent an application a VM hardware a software appliance or a combination of hardware and software that allows representing publishing in native source format the entire or partial content of a backup file that is to be verified. According to an embodiment of the invention the requested backup file to be verified can be located in local storage or remote backup files storage .

Backup verification operator console communicates with a virtual environment implemented on a virtual machine monitor VMM or hypervisor . As would be understood by one skilled in the relevant art s hypervisor may be implemented as software or a combination of hardware and software to implement platform virtualization software that allows multiple operating systems OSs to run concurrently on a single host computer. Virtual storage is accessible by hypervisor that uses the same storage format as virtual storage it is configured to emulate for example virtual storage can appear in form of NFS server in case of VMWARE ESX hypervisor or in form of local storage via file system filter driver or CIFS server in case of MICROSOFT HYPER V hypervisor . Hypervisor performs virtual disk image read operations from virtual storage and writes changed virtual disk data back to virtual storage or directly to the changes storage . Changes storage stores virtual disk image data changes inflicted by the backup verification processes described herein. The written data can also be read back by hypervisor in cases when hypervisor needs to access previously changed virtual disk image data blocks. Thus the exposed images residing inside backup files remain read only and intact on the backup storage for the duration of the backup verification process.

Virtual storage handles these operations using appropriate formats and stores the modified disk image data on changes storage . In accordance with embodiments of the present invention changes storage can be implemented in the following different ways. Changes storage can be implemented as a part of virtual storage logic by intercepting and re directing write input output I O to the designated storage device. Changes storage can also be implemented using native disk I O redirection capabilities of hypervisor snapshot non persistent disk etc. when all data changes inflicted by the verification process are redirected to designated storage by hypervisor itself instead of being committed into a published disk image. In an embodiment hypervisor can create a snapshot of a disk image to protect the disk image from data changes associated with the backup verification process. Finally changes storage can be implemented using capabilities of backup file storage for example using storage area network SAN snapshots.

Once virtual storage is fully initialized backup verification operator console issues a command to configure hypervisor and attach virtual storage to hypervisor as a datastore containing full repository of files representing backed up virtual machine. This approach enables hypervisor to access all VM files i.e. configuration snapshots auxiliary files which allows for verification of all VM files not just virtual disks . This also enables full hypervisor capabilities for the VM published in this manner. For example this approach enables using VMWARE Storage VMotion to scamlessly migrate the published VM files to another datastore available to hypervisor that provides faster I O performance than Virtual Storage and thus allows for advanced verification scenarios such as full application database integrity check.

Hypervisor is used to start up the test VMs using VM data files from the image level backup. In accordance with embodiments of the invention hypervisor can be but is not limited to VMMs such as VMWARE Player. MICROSOFT VirtualPC SUN VirtualBox VMWARE ESX ESXi MICROSOFT Hyper V CITRIX XENServer PARALLELS and other. As it would be apparent to one of skill in the art other hypervisors and virtualization solutions can be used as well.

More than one test virtual machine may need to be started in the test environment if the tested application depends on other services. For example MICROSOFT Exchange requires the presence of at least one MICROSOFT Active Directory Domain Controller Global Catalog server as well as a Domain Name System DNS server to start up MICROSOFT Exchange services.

Once all the required test VMs fully boot up from backup and are running the OS application verification logic connects to the test VMs over the network to perform automated testing of the functionality of the operating system OS and applications. In an embodiment OS application verification logic is embodied in an OS application module that is configured to perform using backup testing parameters automated testing of functionality of an OS or an application. In some cases. VMs need to be started up in an isolated network. For example two computers with the same IP address cannot be started on the same network. However in many cases the production computer corresponding to the image backup being tested will already be running on the network at the time of testing. In such cases routing appliance is used to route network traffic between a production network containing OS application verification logic and isolated network test VMs are running in and between OS application verification logic and a test network containing one or more test VMs .

According to embodiments of the invention routing appliance can be implemented in the form of a process a software agent an application a VM hardware a software appliance or a combination of hardware and software. When deployed routing appliance is connected to both the isolated test network and the production network. Routing appliance serves as a network router in the backup verification system. Routing appliance acts as a gateway between the production network and routes network traffic between the corresponding test VMs and computers in the production network. With the help of a proxy application routing application or other standard or custom specialized application that routing appliance can accept commands from routing appliance routes communications between the production network and the isolated test network. In an exemplary embodiment routing appliance can receive commands from backup verification operator console and execute the received commands against test VMs in the isolated test network. Routing appliance then routes response data packets from test VMs back to the requestor in the production network. In this way multiple virtual networks are supported while simultaneously keeping the test network isolated from the production network. In one embodiment routing appliance routes backup verification parameters between OS application verification logic within the production network and test VMs in the test network.

Backup testing procedures can be application specific. For example backup testing procedures to verify recoverability of applications backed up in a full image level backup of a database server may include querying individual database tables to verify contents of data records and fields within a database. Similarly backup testing procedures to verify data objects backed up in a full image level backup of an email server may include verifying restoration of saved email messages calendar appointments and or address book entries. Backup testing procedures can include but are not limited to 

In one embodiment of the present invention the sample non limiting Windows Management Instrumentation WMI script provided below can be run to test applications to verify data objects backed up in a full image level backup. The following script is an embodiment for checking the last boot up time for a remote computer. In this embodiment the script connects to the specified remote computer and queries and returns its last boot time. In an embodiment the script provided below is useful for backup verification as it will not return a last boot time unless the remote computer s OS is running and most of its components are functioning correctly. For example by running the Visual Basic Scripting Edition VBScript code sample provided below an operator can attempt to connect to a specified remote computer and query the remote computer to determine its most recent boot up start up time as part of the backup verification process. As would be appreciated by one of skill in the relevant arts tests that are more complex can be implemented via scripts and executable files in a similar manner. For example a script can be executed to remotely query a remote computer s system event log and look for events indicating that required system services have started i.e. entered the running state successfully. As would be appreciated by one of skill in the relevant arts other scripting and programming languages and technologies can be used to implement the verification in the script code sample below.

More particularly flowchart illustrates the steps by which an image level backup is tested using virtual storage and test VMs according to an embodiment of the present invention. is described with continued reference to the embodiments illustrated in . However is not limited to those embodiments. Note that the steps in the flowchart do not necessarily have to occur in the order shown.

The method begins at step . When the method begins in step an image level backup of production servers or any other computers servers has already been performed i.e. at some past point in time and the produced backup files have been put on a backup storage. In accordance with an embodiment the image level backup was run with knowledge of what VMs are needed for a restore.

Backup storage may be remote backup files storage described with reference to below. As would be appreciated by one of skill in the relevant arts backup storage may be one or more file servers Network attached storage NAS a SAN disk arrays optical jukeboxes or other storage devices.

In step backup testing parameters are received. The backup testing parameters may include one or more of an image level backup file location backup file entities to be tested in cases when a backup file contains multiple image backups a recovery point to test and an application test to perform. According to an embodiment the backup testing parameters are received from backup verification operator console where an operator specifies backup testing parameters. In an embodiment of the invention a recovery point can be a specific point in time such an hour minute or second of a day the backup was created. Alternatively the recovery point can be a range of times or a date. The selected recovery points received in step depend upon the frequency of full and incremental backups taken. For example in environments where full image level backups are taken daily and incremental backups are taken hourly the granularity of recovery points will be limited to selected hours of the day corresponding to the incremental backups. After receipt of the backup testing parameters the method proceeds to step .

In step virtual storage is started. In an embodiment step is performed when backup verification operator console initializes virtual storage by starting a storage service or a process and attaches corresponding image level backup file s from remote backup files storage or local storage . After virtual storage is started the method proceeds to step .

In step a data conversion engine starts to perform on the fly on demand or as needed decompression de deduplication decryption and or any other operator or system specified operation required to translate portions of the backup file into contents of original VM data files in the native format. In an embodiment in cases when the full image level backup files contain multiple image level backups the multiple VM data file sets may be viewed as separate entities on Virtual Storage . For example in UI multiple VMs may be displayed as multiple folders. According to an embodiment after the data conversion engine translates the backup file contents it presents the contents to hypervisor as a local or network attached storage showing all VM files located in the backup file. Step enables greatly reduced times for backup recoverability verification because instead of extracting an entire backup file only requested data blocks are extracted and only at the time they are requested i.e. on the fly and as needed . The exposed images residing in the backup files remain read only during the method illustrated in flowchart . Thus in one embodiment all required virtual disk changes due to disk write operations are redirected to temporary storage using native hypervisor functionality if such functionality is provided by specific hypervisor . Alternatively all required virtual disk changes due to disk write operations are redirected to temporary storage using virtual storage for example in cases where hypervisor lacks functionality to handle virtual disk changes.

After the translation of selected portions of the image level backup is performed and the backup file content list is available the method proceeds to step .

In step virtual storage is attached to hypervisor . In accordance with an embodiment of the invention this step can be performed when hypervisor configuration commands are received via backup verification operator console . For example an operator using UI within backup verification operator console can issue the corresponding hypervisor configuration commands. Step is performed without making any changes to the full image level backup accessed in step . In this way all virtual disk data changes inflicted during the backup verification method is performed are stored as non persistent data. In an embodiment the non persistent data needed during the backup verification method may be stored in changes storage . After virtual storage is attached to hypervisor the method proceeds to step .

In step a VM is registered with hypervisor re configured if necessary and launched. In an embodiment test VM resource allocation settings are often reconfigured to reduce the amount of consumed resources. For example while original production VMs are usually heavily loaded by users and thus require significant CPU and memory resources test VMs are not used by multiple users and may have their available resources reduced significantly to allow for more efficient use of production capacity allocated to backup verification activities. According to an embodiment in order to ensure that backup verification does not affect production test VM network settings are reconfigured from the original production network settings to instead use the test network. According to an embodiment multiple test VMs are created configured and launched in this step if some applications associated with backup files to be tested require access to shared resources or multiple servers represented as multiple test VMs to be able to run. If multiple test VMs need to be launched in step each test VM is started according to a test VM dependency list for the application being restored. Once the required one or more test VMs are created configured and launched the method proceeds to step .

In steps and determinations are made based on monitoring the startup of an OS on the test VM s whether the OS has booted successfully on the test VM within a predetermined timeout period. In an embodiment step includes determining whether the OS has booted successfully when the test VM OS status changes to Running. In accordance with an embodiment the predetermined timeout period is a tunable parameter that can be selected within UI in backup verification operator console .

In one embodiment step is performed by monitoring the OS boot from backup verification operator console . Alternatively. OS application verification logic monitors the state of the operating systems running on test VMs and waits a predetermined timeout period for the operating systems to fully boot up. According to an embodiment step comprises determining if an OS has fully booted up using one or more files from the image level backup being verified. In an embodiment to verify that an OS has successfully booted up OS application verification logic may perform a simple check to verify that an OS process or application is running. Alternatively the value of an OS system variable presence of a semaphore contents of a database record or log file flag or a system readiness state can be used by OS application verification logic to verify that an OS has booted. For example in an embodiment using a VMWARE hypervisor the status of VMWARE Tools application can be used by the OS application verification logic to determine whether operating system is fully booted and running. If it is determined that the OS has fully booted up control is passed to step . If it determined that an OS has not fully booted control is passed to step .

In step depending on the predefined timeout an OS boot failure is determined after the predefined timeout period elapses without the OS fully booting up. If it is determined that the predetermined timeout has passed without a successful OS boot up control is passed to step .

In step after an OS boots up successfully the automated OS and application testing is started by OS application verification logic . In embodiments of the invention OS application verification logic process can be run on a remote computer on a hypervisor or directly inside the test VM with the test application being injected into or already present in the test VM. As would be apparent to one of skill in the relevant art s the restored application is an application using files restored from the image level backup. In cases when a remote computer is leveraged routing appliance routes network requests to the test network. In an embodiment. OS application verification logic provides commands corresponding to application tests to be performed to the test VM. For example the status of a test VM for a MICROSOFT Exchange server may be determined by querying the Exchange application using an application programming interface API call or sending a test email using the Exchange application hosted on the test VM hosting the MICROSOFT Exchange server. After automated OS and application testing is completed control is passed to step .

In step test results are reported. In accordance with an embodiment of the invention this step comprises displaying results to a user by displaying them in UI within backup verification operator console . Alternatively step may be performed by sending automated notifications. The automated notifications may be one of more of an email message a log entry in a data file a Short Message Service SMS text message a fax an Instant Message IM or an automated posting to a website. At this point the backup verification is complete.

Once the backup verification process is completed unless an operator has opted to perform additional manual verification test VMs are shut down in step . Step is optional in that test VMs are not shut down if there are additional backup verifications to be performed.

In step the hypervisor configuration is cleaned up e.g. test VMs are removed from the configuration of hypervisor and changes storage data is deleted.

The operations of system are depicted as stages 1 5 in . In an embodiment the stages may correspond to steps of flowchart discussed above with reference to . An image level backup of production server is performed by backup application at stage 0 i.e. at some point in time and the produced backup is saved in backup storage. In the exemplary embodiment illustrated in production VM includes a file server. In accordance with an embodiment of the invention backup storage can be remote backup files storage . According to an embodiment at stage 1 a user using UI within backup verification operator console chooses a backup file a restoration point to test and one or more applications to test. Any additional services the tested applications depend upon are specified in stage 1 as well. Virtual storage is then configured according to the user s selections in backup verification operator console by publishing the required VM s data files to hypervisor from backup files located on remote backup files storage . Once the required backup files are mounted virtual storage can then start to respond to data requests over the network. At the end of stage 1 virtual storage appears on the network and is ready to server remote requests.

At stage 2 hypervisor is instructed to connect the virtual storage to itself as a datastore. Virtual storage provides the requested data blocks of VM data files in the native format by uncompressing only the required portions of backup file on the fly as they are requested. After the storage is mounted hypervisor is instructed to register the required test VMs using the VM data files located on virtual storage . In an embodiment of the invention test VM illustrated in may be a test file server.

In stage 4 once the operating system inside test VM fully boots up and is running OS application verification logic is used to perform the required testing against the operating systems or running applications.

The operations of system are depicted as phases 1 5 in with phase 0 being the starting point when an image level backup of production servers has already been performed by backup application and stored in remote backup files storage . In the exemplary embodiment illustrated in production VM includes a MICROSOFT Exchange email server a DNS server and an Active Directory domain controller DC .

In phase 1 a user using UI within backup verification operator console selects a backup file for virtual storage to use. In this phase. UI is also used to select a restore point application and application items to restore to configure virtual storage for publishing. As shown in remote backup files storage is connected to virtual storage .

In phase 2 OS application verification logic starts up test VMs which are needed to support the selected application from phase 1. For example Exchange application is dependent on presence of functioning DNS and Domain Controller servers so in order to verily successful Exchange application recovery all these servers must be present in the test environment. In an embodiment during this phase test VMs are launched by hypervisor using VM data files from an uncompressed backup file that has not been decrypted decompressed or fully extracted i.e. without prior de staging of all VM data files from backup file to the hypervisor ISO storage . After the virtual storage is mounted hypervisor is instructed to register the required test VMs using the VM data files located on virtual storage . VM configuration is then modified changing the VM s work network from production network to the designated isolated test network containing the test VMs so that test VMs do not affect production network for example having duplicate domain controllers on the same network will cause Active Directory issues .

In phase 3 the selected test VMs are started and run by hypervisor . Tests VMs are running in a dedicated test network which is isolated from the main production servers . OS application verification logic can access the test network and test VMs via routing appliance .

As shown in system includes a test email server test DNS server and a test domain controller. As would be understood by one skilled in the art production servers and test VMs may include other application servers not shown in such as but not limited to one or more database servers or one or more servers hosting other enterprise applications. For example if production servers include database servers such as ORACLE SYBASE MYSQL or MICROSOFT SQL SERVER then the backup file will include backups of the VM running the corresponding database applications. In this way test VMs will additionally include VMs for corresponding database servers listed above

In phase 4 once the test VMs S and application hosted on the test VM starts responding to API queries OS application verification logic connects to the applications using existing OS and application s APIs with routing appliance provides ability to establish connection between OS application verification logic running in production network and test VMs running in isolated networks. At this point the functionality of the OS application is checked by running OS and application tests. In an embodiment these tests may be automated with test scripts predefined or custom scripts specified by user . Alternatively the tests in phase 4 may include manual verification via user initiated steps.

As would be apparent to one of skill in the relevant art s the methods and systems described herein to perform fully automated backup verification without requiring complete backup extraction or repetitive manual operations are much more efficient than manual backup testing techniques or systems which require complete backup extraction in order to verify backups.

Although in the exemplary embodiments depicted in the GUI is shown as an interface running on a computer terminal it is understood that the GUI can be readily adapted to execute on a display of other platforms such as mobile device platforms running various operating systems or another display of a computing device. For example in an embodiment of the invention the GUI illustrated in can be displayed on a mobile device having an input device and a display.

Throughout displays are shown with various icons command regions buttons and data entry fields which are used to initiate action invoke routines launch displays enter data view data or invoke other functionality. The initiated actions include but are not limited to selecting backup testing parameters selecting test VMs launching test VMs selecting the boot priority sequence of test VMs selecting an application group to test and displaying test results. For brevity only the differences occurring within the figures as compared to previous or subsequent ones of the figures are described below.

In accordance with an embodiment of the invention if Add VM button is selected a list of VMs is presented from a selected image level backup. Alternatively a list of VMs may be presented based on all available VMs in the system. The selected test VMs can be edited by clicking on Edit button and removed by clicking on Remove button . If the boot sequence or priority of test VMs needs to be changed the Move Up button and Move Down button can be clicked by a user. Once the test VMs have been selected edited and sequenced in application group interface a user can click on DR V Tests button to launch an interface for customizing data recovery DR verification tests i.e. image level backup verification tests . The Back button can be selected to return to the previous screen and the Next button can be used to navigate to the next screen of the GUI. If the user does not wish to use the test VMs selected in application group interface Cancel button can be selected.

Various aspects of the present invention can be implemented by software firmware hardware or a combination thereof. illustrates an example computer system in which the present invention or portions thereof can be implemented as computer readable code. For example the methods illustrated by the flowcharts and of can be implemented in system . Item restoration and backup verification systems and of respectively can also be implemented in system . Various embodiments of the invention are described in terms of this example computer system . After reading this description it will become apparent to a person skilled in the relevant art how to implement the invention using other computer systems and or computer architectures.

Computer system includes one or more processors such as processor . Processor can be a special purpose or a general purpose processor. Processor is connected to a communication infrastructure for example a bus or network .

Computer system also includes a main memory preferably random access memory RAM and may also include a secondary memory . Secondary memory may include for example a hard disk drive a removable storage drive flash memory a memory stick and or any similar non volatile storage mechanism. Removable storage drive may comprise a floppy disk drive a magnetic tape drive an optical disk drive a flash memory or the like. The removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit may comprise a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art s removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In alternative implementations secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface . Examples of such means may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system may also include a communications interface . Communications interface allows software and data to be transferred between computer system and external devices. Communications interface may include a modem a network interface such as an Ethernet card a communications port a PCMCIA slot and card or the like. Software and data transferred via communications interface are in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via a communications path . Communications path carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link an RF link or other communications channels.

Computer system may additionally include computer display . According to an embodiment computer display in conjunction with display interface can be used to display UIs and on restoration operator console and backup verification operator console respectively. Computer display may also be used to display the GUI interfaces depicted in .

In this document the terms computer program medium and computer usable medium are used to generally refer to non transitory media such as removable storage unit removable storage unit and a hard disk installed in hard disk drive . Signals carried over communications path can also embody the logic described herein. Non transitory computer program medium and computer usable medium can also refer to memories such as main memory and secondary memory which can be memory semiconductors e.g. DRAMs etc. . These computer program products are means for providing software to computer system .

Computer programs also called computer control logic are stored in main memory and or secondary memory . Computer programs may also be received via communications interface . Such computer programs when executed enable computer system to implement the present invention as discussed herein. In particular the computer programs when executed enable processor to implement the processes of the present invention such as the steps in the methods illustrated by flowcharts and of and systems and of discussed above. Accordingly such computer programs represent controllers of the computer system . Where the invention is implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive interface hard drive or communications interface .

The invention is also directed to computer program products comprising software stored on any computer useable medium. Such software when executed in one or more data processing device causes a data processing device s to operate as described herein. Embodiments of the invention employ any computer useable or readable medium known now or in the future. Examples of computer useable mediums include but are not limited to primary storage devices e.g. any type of random access memory secondary storage devices e.g. hard drives floppy disks. CD ROMS ZIP disks tapes magnetic storage devices optical storage devices MEMS nanotechnological storage device etc. and communication mediums e.g. wired and wireless communications networks local area networks wide area networks intranets etc. .

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the relevant art s that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. It should be understood that the invention is not limited to these examples. The invention is applicable to any elements operating as described herein. Accordingly the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

