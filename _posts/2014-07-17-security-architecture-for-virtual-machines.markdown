---

title: Security architecture for virtual machines
abstract: Among a plurality of virtual machines running on a host system are a set of virtual machines that provide an operating system, a lightweight agent module, and user applications to be executed. Also, a special-purpose virtual machine executes a central security module. The central security module performs security-related tasks on behalf of individual ones of the other virtual machines, and includes a malware remediation module that generates malware remediation instructions to be executed by the respective virtual machines. The central security module also assesses a capability of a first instruction sequence execution module of a first lightweight agent module to effectively execute the malware remediation instructions, and provides an advanced security task execution component to be installed in a first virtual machine corresponding to the first lightweight agent module, in response to an assessment of capability of the first lightweight agent module being insufficient to execute the malware remediation instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009836&OS=09009836&RS=09009836
owner: Kaspersky Lab ZAO
number: 09009836
owner_city: Moscow
owner_country: RU
publication_date: 20140717
---
The invention relates generally to information processing systems that implement multiple virtual machines and more particularly to an improved security arrangement utilizing a special purpose virtual machine tasked with providing security services to other virtual machines on a computer system.

Systems using virtual machines present their own set of challenges concerning matters of security such as anti malware network protection and the like. One such challenge relates to the load that security operations place on the physical computing system when each virtual machine runs its own security application. In particular the duplication of computational loading to run multiple instances of a security application burdens the host machine and adversely affects the system s performance for all applications on all of the virtual machines. For typical environments many files may be duplicated across multiple virtual machines.

A centralized security application on a specialized virtual machine has been proposed for use with multiple virtual machine systems. This agent less approach i.e. without individual security application agents running on each individual virtual machine provides a substantially more efficient security solution. However situations arise in which the centralized agent less security application is unable to carry out certain security critical operations within the individual virtual machines. One example is cleaning out detected malware and restoring the infected virtual machine to a condition without any deleterious effects of the operation of such malware. The operating system components needed to take certain protective or restorative actions may be insufficient. A practical and effective solution is needed.

One aspect of the invention is directed to a host machine for executing a plurality of virtual machines. The host machine comprising includes computing hardware having at least one processor and non transitory data storage media interfaced with the at least one processor and comprising instructions that when executed by the at least one processor cause the computing hardware to implement the plurality of virtual machines and a special purpose virtual machine. Each of the plurality of virtual machines provides an isolated execution environment where an operating system a lightweight agent module and user applications are executed. The special purpose virtual machine provides an isolated execution environment in which a central security module is executed. A hypervisor module coordinates execution of the plurality of virtual machines and the special purpose virtual machine. Information is communicated between each lightweight agent module and the central security module through the hypervisor module.

The central security module performs security related tasks on behalf of individual ones of the plurality of virtual machines including malware assessment and includes a malware remediation module configured to generate particularized malware remediation instructions that define actions to be executed by individual ones of the lightweight agent modules in response to an assessment of malware present in any of the virtual machines corresponding to those lightweight agent modules. The lightweight agent module of each of the virtual machines includes an instruction sequence execution module configured to receive and execute the malware remediation instructions.

The central security module further includes a capability assessment module configured to assess a capability of a first instruction sequence execution module of a first lightweight agent module to effectively execute the malware remediation instructions. Also a security functionality update module of the central security module is configured to provide an advanced security task execution component to be installed in a first virtual machine corresponding to the first lightweight agent module in response to an assessment of capability of the first lightweight agent module being insufficient to execute the malware remediation instructions.

A related aspect of the invention is directed to a computer implemented method for performing anti malware operations in a computer system such as the host system.

Advantageously certain aspects of the invention allow the host system to benefit from the use of a centralized special purpose virtual machine tasked with carrying out security operations on behalf of multiple other virtual machines while also benefitting from the ability to have the special purpose virtual machine provide malware treatment and remediation instructions to be carried out by each supported virtual machine even if any one of these virtual machines initially lacks the functional components needed to carry out such operations. A number of other advantages will become apparent from the following Detailed Description of the Preferred Embodiments.

While the invention is amenable to various modifications and alternative forms specifics thereof have been shown by way of example in the drawings and will be described in detail. It should be understood however that the intention is not to limit the invention to the particular embodiments described. On the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

The following Glossary sets forth definitions of terms used herein. This Glossary is applicable to only the present Application.

 Advanced security task execution component a functional component that facilitates performing one or more advanced security tasks such as malware remediation of objects that are difficult to access or modify for instance system objects encrypted objects etc. Application level object an object that is prevented from accessing operating system kernel functions and other low level device drivers and objects without a particular facility that controls such access such as for instance an application programming interface operating system driver etc. Central security module a module executable on a special purpose virtual machine and that provides security related services to other virtual machines executing on the same host machine on which the special purpose virtual machine executes. Data storage media One or more electronic hardware devices that stores data in a physical storage medium. Examples include volatile storage e.g. random access memory RAM whether static or dynamic non volatile storage e.g. electrically erasable programmable read only memory magnetic disk etc. . Functional components program code executable to remediating the effects of malware. Examples include libraries drivers utilities and other tools. For instance such tools can include a file system driver necessary for detecting rootkit malware a driver for accessing the operating system s registry a utility for breaking encryption applied by the operation of malware to a file which must now be cleaned or a driver for intercepting user input which is usable for counteracting ransomware. Also functional components can include backup copies of certain system level objects of the operating system. Oftentimes some or all of the functional components reside at the system level within the operating system of a virtual machine. Guest operating system an operating system that is executed within a virtual machine. Host machine a computer system i.e. an electronic device or system of inter operable electronic devices containing hardware including one or more processors data storage input output devices and capable of storing and manipulating information according to instructions carried out by the hardware on which one or more virtual machines are executed. It can be one physical machine or it can be distributed among multiple physical machines such as by role or function or by process thread in the case of a cloud computing distributed model. Examples include desktop or mobile personal computers PCs smartphones and tablets as well as networking devices such as routers switches and the like. Host machines can be stand alone devices or embedded devices that are part of a larger device or system. Hypervisor module a software layer that presents guest operating systems with a virtual operating platform and manages the execution of the guest operating systems. Multiple instances of a variety of operating systems may share the virtualized hardware resources. Type 1 hypervisors also known as native or bare metal hypervisors run directly on the host s hardware to control the hardware and to manage guest operating systems. A guest operating system of each virtual machine thus runs on another level above the hypervisor. Type 2 hypervisors also referred to as hosted hypervisors run within a conventional operating system environment. With the hypervisor layer as a distinct second software level guest operating systems run at the third level above the hardware. Isolated execution environment A set of one or more processes and associated data storage which are inaccessible to other processes executed on the same host machine except for a hypervisor. Lightweight agent module a module executable on an associated virtual machine the lightweight agent module including a thin client module that provides security functionality for the associated virtual machine utilizing security services provided by central security module that is executed by another virtual machine. The lightweight agent module can also include certain security functionality in its own right but this included security functionality is generally more rudimentary than the more full featured security functionality of the central security module. The lightweight agent module also includes an instruction sequence execution module that obtains and executes instructions on the associated virtual machine including security related instructions obtained from the central security module . Malware malicious software any software used to disrupt computer operation gather sensitive information or gain access to a computer system in an unauthorized manner. Malware can appear in the form of code script active content and other software. Examples include viruses worms Trojans ransom ware scare ware rootkits bootkits spyware etc. Malware remediation module a module which is part of a central security module and which generates instructions to be executed on a virtual machine that include clearing detected malware and remediating the effects of operation of that malware. Module a real world device component or arrangement of components implemented using hardware or as a combination of hardware and software such as by a microprocessor system and a set of program instructions that adapt the module to implement the particular functionality which while being executed transform the microprocessor system into a special purpose device. A module can also be implemented as a combination of the two with certain functions facilitated by hardware alone and other functions facilitated by a combination of software controlled hardware. In certain implementations at least a portion and in some cases all of a module can be executed on the processor s of one or more computers that execute an operating system system programs and application programs while also implementing the module using multitasking multithreading distributed e.g. cluster peer peer cloud etc. processing where appropriate or other such techniques. In addition a module can itself be composed of more than one sub modules each of which can be regarded as a module in its own right. Object a process a piece of software code or data structure stored in computer hardware. Examples include files programs data packets etc. Operating system OS Software executable on computer hardware that handles functions for interaction with network ports and connections peripherals scheduling of tasks allocation of data storage and presents a default interface to the user when no application program is running Examples include the Windows family of operating systems by Microsoft Corporation Mac OS by Apple Inc. Unix Linux iOS Android etc. Processor Electronic hardware part of a computer system that carries out the instructions of a computer program by performing basic arithmetical logical temporary storage and input output operations of the system. Typically a processor is implemented as a microprocessor i.e. integrated on a single chip though this definition includes processor circuits that are implemented on multiple interconnected integrated circuits. Modern day processors typically include multiple processing cores and can distribute workload among the multiple processing cores. Process virtual machine a virtual machine designed to run a single program which means that it supports a single process. Such virtual machines are usually closely suited to one or more programming languages and built with the purpose of providing program portability and flexibility. Examples include Java Virtual Machine .Net Framework Parrot Virtual Machine. Quarantine An action or condition of rendering or having rendered a malware object or merely a suspicious object inoperative without deleting the object outright. A quarantined object can be cataloged further evaluated or even restored in case it is found to be benign. Special purpose virtual machine a virtual machine that is executed on a host machine that also executes at least one other virtual machine on which user applications are executed. The special purpose virtual machine is distinguished from the other virtual machine s of that host machine in that the special purpose virtual machine executes a central security module that provides security related services to the at least one other virtual machine. System level object an object that is accessible by an operating system kernel or other system level program but is generally inaccessible by an application program without a special facilitation such as for example an application programming interface operating system driver etc. System virtual machine a virtual machine that provides a complete system platform which supports the execution of a complete operating system. These usually emulate an existing architecture and are built to provide multiple instances of virtual machines each of which provides an isolated computing environment. This type of architecture is ubiquitous on servers supporting a cloud computing service Web hosting and many other services. System virtual machines can run directly on the hardware of the physical computer system known as a host machine or over an operating system that runs directly on the host machine known as operating system level virtualization . Examples include Windows Virtual PC VMware Oracle VM etc. Tool a program that can be called by other programs to assist with performing one or more specialized operations. User applications Application programs and associated processes that provide services primarily to the user rather than to the computer hardware. Examples include Web browsers word processors games media players etc. Virtual machine is a software based implementation of a computer system that executes programs like a physical machine using the hardware of a host machine. Virtual machines are separated into two major classifications based on their use and degree of correspondence to any real machine system virtual machines and process virtual machines. Means for executing a plurality of virtual machines computer hardware including a processor input output facilities and data storage the processor being programmed by instructions stored in the data storage that when executed cause the computer hardware to execute a plurality of virtual machines. Means for executing a special purpose virtual machine computer hardware including a processor input output facilities and data storage the processor being programmed by instructions stored in the data storage that when executed cause the computer hardware to execute a special purpose virtual machine. Means for coordinating execution of the a plurality of virtual machines and a special purpose virtual machine and for coordinating communications between lightweight agent modules and a central security module computer hardware including a processor input output facilities and data storage the processor being programmed by instructions stored in the data storage that when executed cause the computer hardware to execute a hypervisor module.

Aspects of the present invention can be implemented as part of a computer system. The computer system can be one physical machine or can be distributed among multiple physical machines such as by role or function or by process thread in the case of a cloud computing distributed model. In various embodiments aspects of the invention can be configured to run in virtual machines that in turn are executed on one or more physical machines. It will be understood by persons of skill in the art that features of the invention may be realized by a variety of different suitable machine implementations.

Each module can be realized in a variety of suitable configurations and should generally not be limited to any particular implementation exemplified herein unless such limitations are expressly called out. In addition a module can itself be composed of more than one sub modules each of which can be regarded as a module in its own right. Moreover in the embodiments described herein each of the various modules corresponds to a defined functionality however it should be understood that in other contemplated embodiments each functionality may be distributed to more than one module. Likewise in other contemplated embodiments multiple defined functionalities may be implemented by a single module that performs those multiple functions possibly alongside other functions or distributed differently among a set of modules than specifically illustrated in the examples herein.

Referring to server executes a plurality of virtual machines. Two types of virtual machines are executed special purpose virtual machine which in turn executes central security module and regular virtual machines each of which executes applications as well as a lightweight agent module . Server also executes a hypervisor module that coordinates execution of the plurality of regular virtual machines and the special purpose virtual machine as well as coordinating the information exchange of commands and data between these two types of modules.

The coordination of the execution of these virtual machines includes facilitating communication between special purpose virtual machine and each of regular virtual machines which is provided by inter VM communication module . Module can in one example embodiment utilize principles such as those disclosed in Gebhardt Carl et al. Challenges for Inter Virtual Machine Communication Technical Report RHUL MA 2010 12 Department of Mathematics Royal Holloway University of London 2010 and Burtsev Anton et al. Fido Fast inter virtual machine communication for enterprise appliances Proceedings of the 2009 conference on USENIX Annual technical conference USENIX Association 2009 the contents of both being incorporated by reference herein. Other approaches for inter virtual machine communications are also contemplated according to related embodiments including approaches that ensure a greater level of mutual trust between the communicating virtual machines. For instance inter virtual machine protocols that utilize authentication techniques encryption e.g. utilizing public key cryptography etc. can be employed.

In one type of embodiment malware assessment module initiates a malware assessment operation in response to a service request originated by a given lightweight agent module . The service request is communicated through inter virtual machine communication module of hypervisor module . In one related embodiment the request includes a copy of the object in question newly obtained by the corresponding virtual machine . In another related embodiment the request does not include a copy of the object itself rather it includes a hash of the object in the virtual machine s file system or memory which is in turn used by malware assessment module to perform look ups in a whitelist or blacklist. If the hash is not present in any such list the full copy of the object can be requested by malware assessment module though hypervisor for heuristic analysis to be performed by malware assessment module .

Malware assessment module upon completion of its analysis of the object in question provides a return communication to the requesting lightweight agent module via hypervisor module . This return communication can include a command to treat the malware e.g. delete or quarantine the object in case there is a detection or suspicion of malware associated with the object in question. In addition the return communication can include a series of instructions for remediation of the effects of the operation of the malicious object. The remediation instructions are generated by malware remediation module .

In one embodiment malware remediation module includes a database of remediation instructions that are generated specifically in response to analyzed items of malware. For instance the program code of each item of malware is de constructed to reveal the operations effecting changes in the infected virtual machine. In turn the remediation instructions are generated to un do the effected changes by the malware. According to one embodiment the remediation instructions are automatically generated under program control by the malware remediation module . In another embodiment the remediation instructions are generated by an expert system that may be remote from the physical computing system e.g. provided as a Web based service. In another related embodiment the remediation instructions are generated by a human analyst and looked up by malware remediation module in response to the type of detected malware.

Oftentimes for the effective remediation of the malware effects certain advanced operations are needed. By its minimalist design lightweight agent module of the infected virtual machine may lack the functional components needed to carry out the advanced operations. For instance a piece of malware having been executed may have encrypted a file following its infection making it necessary to decrypt the file in order to remove the infection. Lightweight agent module may lack the facilities i.e. functional components necessary to perform this operation. Similarly the infected file may be a system level driver or other object e.g. a part of the operating system s library or registry residing within virtual machine .

Direct access to the objects of the operating system of virtual machine is needed to install certain malware remediation tools or to simply gain access to the infected system level objects that were affected by operation of detected malware. However the mutual isolation provided by the system virtualization implemented among virtual machines and prevents access by malware remediation module to the system level objects within virtual machines .

Accordingly in one embodiment central security module further includes functionality update module which is tasked with gathering generating in some cases and providing functional component updates for virtual machines . These operations are performed in response to an assessment of the capabilities of virtual machine and its operating system and other components according to one embodiment.

To this end in one embodiment capability assessment module includes program instructions and a knowledge base for determining the capability of each virtual machine i.e. the type and version of the operating system the version and known feature set of lightweight agent etc. . The capability can be represented in terms of available components for performing malware remediation. Capability assessment module compares the available components against the components known e.g. represented in a knowledge base to be needed for carrying out the malware remediation instructions generated by module . Any deficiency of functional components is addressed by functionality update module . The functionality update is performed via specialized and secure inter virtual machine communications facilitated by hypervisor .

In one embodiment to facilitate the operation of capability assessment module lightweight agent modules each provide the operating system related information e.g. version number identification of installed additional components etc. as well as other available tools present on virtual machine to capability assessment module either as part of the service request or in response to an inquiry from capability assessment module . In response capability assessment module looks up the functional components associated with the operating system related information and compares them to the functional components known to be needed for carrying out the specific remediation instructions. Any deficiency is addressed by a functional component update to be provided to lightweight agent module .

Functional components include various libraries drivers utilities and other tools that are essential to remediating the effects of malware. For instance such tools can include a file system driver necessary for detecting rootkit malware a driver for accessing the operating system s registry a utility for breaking encryption applied by the operation of malware to a file which must now be cleaned or a driver for intercepting user input which is usable for counteracting ransomware. Also functional components can include backup copies of certain system level objects of the operating system. In some cases proper remediation involves replacing a damaged or inaccessible file or other object with the backup copy. In various embodiments some or all of the functional components reside at the system level within the operating system of each virtual machine .

Instruction sequence execution module receives remediation instructions from malware remediation module and executes those instructions locally on virtual machine . In one embodiment instruction sequence execution module calls on the functional components to effectively carry out the malware remediation. Functional components residing at the system level permit the instruction sequence execution module to use and modify the protected operating system data that is normally inaccessible to application level processes. As exemplified in operating system data includes registry objects drivers and other data all of which may be susceptible to damage caused by the operation of malware.

Also illustrated in is an update being made to functional components by functionality update module . In a related embodiment instruction sequence execution module includes an installer module that is configured to install functional components into the operating system of virtual machine .

Update is facilitated by inter virtual machine communication module of hypervisor . Likewise information exchanged respectively by instruction sequence execution module and thin client module with malware remediation module and malware and capability assessment modules and is depicted.

In response to receiving the service request at special purpose virtual machine performs malware analysis. This can involve a number of different operations some of which are discussed above. For instance the object in question can be checked in whitelist blacklist malware signature analysis may be performed heuristic analysis e.g. emulation may be performed to observe any suspicious behavior by the object as it is executed etc. This operation produces a malware analysis result. At decision if the result of the malware analysis indicates an absence of malware special purpose virtual machine generates a confirmation that the object is clear at and at this confirmation is passed by hypervisor to virtual machine where it is received at . In this scenario no further malware analysis related action is needed.

If on the other hand decision indicates that malware is present the process branches to block in which special purpose virtual machine generates and sends malware treatment instructions to virtual machine to be locally executed on virtual machine at the application level. Hypervisor coordinates the communication of the treatment instructions at such that the treatment instructions are received by virtual machine at block . At block the treatment instructions are executed by the lightweight agent module of virtual machine .

Meanwhile at special purpose virtual machine determines whether remediation of the effects of the detected malware is needed at virtual machine . This determination can be made based on previously analyzed activity of the malware the effects of which can be stored in a knowledge base accessible to special purpose virtual machine . The knowledge base may be stored locally on virtual machine or at a remote location such as at a security service accessed by virtual machine . If no remediation is needed the process is concluded. If remediation is determined to be needed the process proceeds to the operations depicted in .

Accordingly at in response to remediation being deemed necessary remediation instructions are generated by special purpose virtual machine . Generation of the remediation instructions can include obtaining the remediation instructions from a remote source such as a security service accessible to special purpose virtual machine or locally generating the remediation instructions according to a knowledge base representing the effects of the operation of the detected item of malware.

At special purpose virtual machine further evaluates the capability of virtual machine to actually carry out the remediation instructions. As discussed above various approaches are contemplated to determine this capability and generally involve comparing the functional configuration of virtual machine against the required functionality for performing the malware remediation. The determination of capability can be obtained at least in part by operations performed remotely such as by a security service accessible to special purpose virtual machine . If at virtual machine is deemed capable to perform the remediation actions the process branches to block in which the remediation instructions are sent. The sending of the remediation instructions like all communications between virtual machines according to this embodiment is coordinated through hypervisor that at block forwards the remediation instructions to virtual machine which in turn receives the instructions at prior to executing the remediation instructions at .

If at it is determined that virtual machine is not capable of carrying out the malware remediation instructions the process advances to block at which special purpose virtual machine collects the necessary functional components that are lacking at virtual machine and sends the same to be received by virtual machine . The functional components to be provided can in one embodiment be obtained from an external service accessible to special purpose virtual machine . At hypervisor facilitates the communication of the functional component update to virtual machine which receives the functional components at . At virtual machine installs the functional components into the operating system as appropriate. Upon installation of the functional components the remediation instructions can be carried out by virtual machine .

It should be noted that in the exemplary process of certain sequences of operations can be made in varying order. For instance the remediation instructions can be sent to virtual machine before the sending of necessary functional components. Persons of ordinary skill in the relevant arts will recognize these and other variations based on a reading of the principles described herein.

By virtue of these aspects of the present invention among other benefits offered system can benefit from the use of a centralized special purpose virtual machine tasked with carrying out security operations on behalf of multiple other virtual machines while also benefitting from the ability to have the special purpose virtual machine provide malware treatment and remediation instructions to be carried out by each supported virtual machine even if any one of these virtual machines initially lacks the functional components needed to carry out such operations.

Turning now to a computer system is depicted on which aspects of the invention as described herein may be implemented according to various embodiments. The computer system may include a computing device such as a personal computer . The personal computer includes one or more processing units a system memory a video interface an output peripheral interface a network interface a user input interface removable and non removable memory interfaces and a system bus or high speed communications channel coupling the various components. In various embodiments the processing units may have multiple logical cores that are able to process information stored on computer readable media such as the system memory or memory attached to the removable and non removable memory interfaces . The computer system memory may include non volatile memory such as Read Only Memory ROM or volatile memory such as Random Access Memory RAM . The ROM may include a basic input output system BIOS to help communicate with the other portion of the computer . The RAM may store portions of various software applications such as the operating system application programs and other program modules . Further the RAM may store other information such as program or application data . In various embodiments the RAM stores information that requires low latencies and efficient access such as programs and data being manipulated or operated on. In various embodiments RAM comprises Double Data Rate DDR memory Error Correcting memory ECC or other memory technologies with varying latencies and configurations such as RAMBUS or DDR2 and DDR3. In this way in various embodiments the system memory may store the input data store access credential data store operating memory data store instruction set data store analysis result data store and the operating memory data store. Further in various embodiments the processing units may be configured to execute instructions that limit access to the aforementioned data stores by requiring access credential before access to the information is granted.

The removable and non removable memory interfaces may couple the computer to disk drives such as SSD or rotational disk drives. These disk drives may provide further storage for various software applications such as the operating system application programs and other program modules . Further the disk drives may store other information such as program or application data . In various embodiments the disk drives store information that doesn t require the same low latencies as in other storage mediums. Further the operating system application program data program modules and program or application data may be the same information as that stored in the RAM in various embodiments mentioned above or it may be different data potentially derivative of the RAM stored data.

Further the removable non volatile memory interface may couple the computer to magnetic portable disk drives that utilize magnetic media such as the floppy disk Iomega Zip or Jazz or optical disk drives that utilize optical media for storage of computer readable media such as Blu Ray DVD R RW CD R RW and other similar formats. Still other embodiments utilize SSD or rotational disks housed in portable enclosures to increase the capacity of removable memory.

The computer may utilize the network interface to communicate with one or more remote computers over a local area network LAN or a wide area network WAN . The network interface may utilize a Network Interface Card NIC or other interface such as a modem to enable communication. The modem may enable communication over telephone lines coaxial fiber optic powerline or wirelessly. The remote computer may contain a similar hardware and software configuration or may have a memory that contains remote application programs that may provide additional computer readable instructions to the computer . In various embodiments the remote computer memory can be utilized to store information such as identified file information that may be later downloaded to local system memory . Further in various embodiments the remote computer may be an application server an administrative server client computers or a network appliance.

A user may enter information to the computer using input devices connected to the user input interface such as a mouse and keyboard . Additionally the input device may be a trackpad fingerprint scanner joystick barcode scanner media scanner or the like. The video interface may provide visual information to a display such as a monitor . The video interface may be an embedded interface or it may be a discrete interface. Further the computer may utilize a plurality of video interfaces network interfaces and removable and non removable interfaces in order to increase the flexibility in operation of the computer . Further various embodiments utilize several monitors and several video interfaces to vary the performance and capabilities of the computer . Other computer interfaces may be included in computer such as the output peripheral interface . This interface may be coupled to a printer or speakers or other peripherals to provide additional functionality to the computer .

Various alternative configurations and implementations of the computer are within the spirit of the invention. These variations may include without limitation additional interfaces coupled to the system bus such as universal serial bus USB printer port game port PCI bus PCI Express or integrations of the various components described above into chipset components such as the northbridge or southbridge. For example in various embodiments the processing unit may include an embedded memory controller not shown to enable more efficient transfer of data from the system memory than the system bus may provide.

The embodiments above are intended to be illustrative and not limiting. Additional embodiments are within the claims. In addition although aspects of the present invention have been described with reference to particular embodiments those skilled in the art will recognize that changes can be made in form and detail without departing from the scope of the invention as defined by the claims.

Persons of ordinary skill in the relevant arts will recognize that the invention may comprise fewer features than illustrated in any individual embodiment described above. The embodiments described herein are not meant to be an exhaustive presentation of the ways in which the various features of the invention may be combined. Accordingly the embodiments are not mutually exclusive combinations of features rather the invention may comprise a combination of different individual features selected from different individual embodiments as will be understood by persons of ordinary skill in the art.

Any incorporation by reference of documents above is limited such that no subject matter is incorporated that is contrary to the explicit disclosure herein. Any incorporation by reference of documents above is further limited such that no claims that are included in the documents are incorporated by reference into the claims of the present Application. The claims of any of the documents are however incorporated as part of the disclosure herein unless specifically excluded. Any incorporation by reference of documents above is yet further limited such that any definitions provided in the documents are not incorporated by reference herein unless expressly included herein.

For purposes of interpreting the claims for the present invention it is expressly intended that the provisions of Section 112 sixth paragraph of 35 U.S.C. are not to be invoked unless the specific terms means for or step for are recited in a claim.

