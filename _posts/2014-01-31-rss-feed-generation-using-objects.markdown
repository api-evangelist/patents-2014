---

title: RSS feed generation using objects
abstract: A really simple syndication (RSS) feed generator provides a set of data related to an entity to a user in the form of a really simple syndication (RSS) feed in a manner so that the set of data includes entity information at the feed-level. A user of the RSS feed may use the feed-level entity information to consume the set of data in a number of different ways. In an embodiment, the feed-level entity information includes meta-data defining the entity such that a user may use the metadata to display the entity on the client side. The RSS feed generation system allows a user to manipulate a copy of an instance of entity data as necessary for a client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09124589&OS=09124589&RS=09124589
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09124589
owner_city: Redmond
owner_country: unknown
publication_date: 20140131
---
The present application claims benefit of U.S. patent application Ser. No. 11 331 894 entitled RSS Feed Generator and filed on Jan. 13 2006 which is specifically incorporated by reference for all that it discloses and teaches.

Computers and computer software make up a very important part of modern life and business. In today s business environment for any organization to stay competitive it is imperative that it uses computers and software applications to manage data customers employees finances etc. Business processes and workflows are typically managed using multiple forms of communications and organization. One method used by business organizations to exchange data with their partners customers etc. is by use of websites to publish relevant information. Web sites and other types of interactive systems commonly host electronic catalogs for assisting users in locating and evaluating various types of items. The items may for example include physical products journal articles movie and music titles downloadable software services stock assets businesses and or any other type of item that may be represented in a database. Electronic catalog systems also commonly support the ability for users to conduct various types of item related transactions such as purchasing an item downloading an item or selling an item.

However current business systems do not have an easy way to update data and share data with users and other systems without implementing significant integration between various systems. Generally speaking business data is typically stored securely behind a proprietary application interface or in a proprietary database. Access methods are available for application developers that allow them to build data level integration and data access applications. However designing such data level integration and data access applications puts the burden on the end user to clearly specify which business data they need access to how often they need it and in what format. Given the information technology IT departments development backlogs it is unlikely that an internal salesperson let alone an external supplier will ever see this data feed produced.

Typical solutions for implementing closer data integration include ad hoc query tools ad hoc reporting tools and direct database access. However there are three important problems to keep in mind with respect to such ad hoc solutions. First a typical user doesn t have the necessary skills to create these queries and reports. This problem puts us back in the IT pipeline. Second a semi skilled user has enough knowledge to be extremely dangerous to the application as a whole. There s usually nothing stopping the user from constructing such expensive queries that the application goes to its knees. And third such ad hoc solutions only work for internal users. There s still no solution for external users to get secure access to the business data. Therefore it is necessary to provide a simpler web service model that allows efficient sharing and updating of data between various business entities.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

A really simple syndication RSS feed generator provides a set of data from a database or other data source to a user in the form of a really simple syndication RSS feed in a manner so that the set of data includes entity information at the feed level. A user of the RSS feed may use the feed level entity information to consume the set of data in a number of different ways. In an embodiment the feed level entity information includes metadata defining the entity such that a user may use the metadata to display the entity on the client side. The RSS feed generation system allows a user to manipulate a copy of an instance of entity data as necessary for a client.

An alternate embodiment of the RSS feed generator allows embedding an extensible stylesheet XSL processing instruction in the RSS feed data in extensible markup language XML form. A client using such RSS feed data may organize or view the data using the embedded processing instructions. For example using such an RSS feed generator a customer relationship management CRM software application may provide up to date information about various clients to a number of partners in a supply chain.

In an alternate embodiment of the RSS feed generator a consumer of the instance data may include a serialization module that may be used to serialize an instance data for the entity and an addition module that may be used to attach the serialized instance data to an RSS feed. Subsequently when a user receives the RSS feed from the consumer the user may de serialize the serialized instance data to create a user side proxy using the de serialized entity instance data. Yet alternatively the user may process the de serialized entity instance data as necessary and generate a secondary RSS feed using such processed entity instance data in a manner so that it may provide a third party user access to such processed entity instance data.

Although the following text sets forth a detailed description of numerous different embodiments it should be understood that the legal scope of the description is defined by the words of the claims set forth at the end of this patent. The detailed description is to be construed as an example only and does not describe every possible embodiment since describing every possible embodiment would be impractical if not impossible. Numerous alternative embodiments could be implemented using either current technology or technology developed after the filing date of this patent which would still fall within the scope of the claims defining the invention.

It should also be understood that unless a term is expressly defined in this patent using the sentence As used herein the term   is hereby defined to mean . . . or a similar sentence there is no intent to limit the meaning of that term either expressly or by implication beyond its plain or ordinary meaning and such term should not be interpreted to be limited in scope based on any statement made in any section of this patent other than the language of the claims . To the extent that any term recited in the claims at the end of this patent is referred to in this patent in a manner consistent with a single meaning that is done for sake of clarity only so as to not confuse the reader and it is not intended that such claim term by limited by implication or otherwise to that single meaning. Finally unless a claim element is defined by reciting the word means and a function without the recital of any structure it is not intended that the scope of any claim element be interpreted based on the application of 35 U.S.C. 112 sixth paragraph.

The memory may include computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM. RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . The memory may also be used to store data related to one or more programs codes used by the computer and or the RSS feed generator.

The storage device may typically include removable non removable volatile nonvolatile computer storage media. By way of example only the storage device may include a hard disk drive a magnetic disk drive nonvolatile magnetic disk an optical disk drive etc. One or more of the forms stored on the memory may be populated using data stored on the storage device . The I O controller may be used by the computer to communicate with an input device which may be a keyboard a mouse etc. an output device which may be a monitor a printer etc.

Really simple syndication RSS is a family of XML file formats for Web syndication used by among other things news websites and web logs. The term RSS is also known as abbreviation of rich site summary or resource description framework RDF site summary. Notwithstanding the term used the RSS technology allows Internet users to subscribe to websites that have provided RSS feeds. is an illustration of a RSS feed provider system which may be implemented on the network . The RSS feed provider system provides RSS feed to a number of clients based on data located on the RSS feed provider system . Note that while in all of the various components of the RSS feed provider system are shown to be implemented on a single node on the network in an alternate implementation the various components may be located on different nodes on the network . Moreover some of the components of the RSS feed provider system may also be implemented on the nodes hosting the clients .

The RSS feed provider system includes a database an RSS feed definition module an RSS feed generator an RSS feed publisher a web interface and a security module . One or more of the modules may be omitted in an alternate embodiment of the RSS feed provider system . Alternatively one or more of the modules may also be combined into one another for example the RSS feed generator and the RSS feed definition module may be combined into one module. As one of ordinary skill in the art would recognize any of the various modules may be implemented using software hardware firmware or any combination thereof.

Moreover one or more of the modules may be implemented as part of other well known applications. For example the database may be part of a customer relation management CRM application the web interface may be part of a web hosting software application the RSS feed definition module may be part of an online accounting software etc.

The database may be any of the various database used by an entity that provides RSS feed of the data from the database . For example the database may be a CRM database a human resources HR database an accounting database etc. The clients may request RSS feed by communicating with the web interface module via the network such as the Internet etc. The web interface module may be implemented by using any of the well known web interface that may interact with various back end applications. An example of such a web interface module may be designed using a common gateway interface CGI software etc.

Upon receiving RSS data feed from the RSS feed provider system the clients may make such feeds available to other clients such as clients . Before making the RSS feed available to clients the client my further process the RSS feed. For example the client may sort the results of the RSS feed restrict certain parts of the RSS feed from viewing by the clients add further data to the RSS feed etc. Moreover the client may employ its own version of the RSS feed provider system to generate and communicate RSS feed to its clients . As one of ordinary skill in the art would recognize multiple level nesting of such RSS feeds may be implemented.

Now referring to an example flowchart illustrates functioning of a RSS feed generation program that may be used by the RSS feed provider system . The RSS feed generation program may be implemented using one or more of the various modules of the RSS feed provider system . The RSS feed generation program may be initiated in response to a request for RSS feed from one of the clients or it may be initiated by any module of the RSS feed provider system . For example in an implementation the RSS feed generation program may be initiated by the RSS feed generator in response to a clock signal in response to an update to the database etc. The RSS feed generation program may be implemented on the memory of the computer in form of software or alternatively in the form of hardware firmware or any combination thereof.

Now referring to the flowchart of the RSS feed generation program a block receives a request to generate an RSS feed based on data from the database . Such a request may be received from the clients via the network at the web interface . Such a request received at the web interface may have various parameters of the requested feed included in it. Alternatively the web interface module may direct the request to the RSS feed definition module to further assist in generating a feed definition. In an embodiment of the RSS feed provider system client specific feed definitions may be stored on the RSS feed definition module .

The RSS feed definition module may interact with the client requesting the RSS feed using the network in a number of different manners. For example in a particular embodiment the RSS feed definition module may request the scope and or the attributes of the object that is requested by the client. The scope of the object requested by the client may include the number of data fields an identification of the data source providing the data fields the names of the data fields etc. Various attributes of the requested object may include information about which fields are to be sortable the update time for the field values etc. For example the RSS feed request may have a time stamp attached to it specifying the last time the requested object was received and therefore any updates to the object from that time may need to be provided in the RSS feed containing the object.

Subsequently at a block the RSS feed definition module determines if the request received at block is a parameter based request or a stored query based request. If it is determined that the request is a parameter based request at a block the RSS feed definition module parses the parameter based request and constructs a query definition at a block . If it is determined that the request is stored query based at a block the RSS feed definition module loads the requested query definition.

The RSS feed definition module may generate the query definition using a number of different methods including but not limited to by using a user interface by using a web based application programming interface or by using an hypertext transfer protocol HTTP request. For example the RSS feed definition module may provide a user interface that may be activated by the client requesting the RSS feed where the client may define the scope and the attributes of the requested object by making various selections on the user interface or by inputting information in the user interface.

An example of such a user interface is illustrated by a column customization dialog interface illustrated in . The column customization dialog interface allows users to define which columns are to be included in the RSS feed generation definition. For example a user may add a field to be included in the RSS feed by selecting the column for that field using the Add Columns button of the column customization dialog interface . Similarly a user can remove a selected field by highlighting the field to be removed and then selecting the Remove button of the column customization dialog interface .

Alternatively the RSS feed definition module may provide an application programming interface API that receives definition of a query feed as provided by a client requesting an object and converts the definition into the format that can be used by the RSS feed definition module . Yet alternatively the RSS feed definition module may receive the object definition in an HTTP document and extract the object definition from such an HTTP document.

After the generation of the feed definition at a block the RSS feed definition module may generate an RSS feed with the requested object by converting the feed definition into the RSS feed. To convert the RSS feed definition into an RSS feed the RSS feed definition module may define and execute a query on the database where the query is defined using the feed definition. The RSS feed definition module may use a number of predefined query parameterization and construction routines to define the query from the feed definition.

Subsequently at a block the RSS feed definition module may convert the query results into the RSS feed. There are currently seven RSS formats of which three formats are widely used and converting results of a query into RSS feed conforming to any of these formats is well known to one of ordinary skill in the art.

At a block the RSS feed definition module may provide the RSS feed to the client requesting the RSS feed. Providing the RSS feed to the client may comprise exposing the RSS feed as a web page using the web interface . Alternatively the web interface may convert the RSS feed into RSS XML data generate an RSS feed uniform resource locator URL for the RSS XML data and communicate the RSS feed URL to the client requesting the RSS feed. The client may incorporate the RSS feed URL into its own web page to expose the query results underlying the RSS feed. Because the RSS feed is constructed as an object with various sortable attributes provided to the client the client may also sort the data contained in the RSS feed generate different views based on the RSS feed and or perform its own queries on the data contained in the RSS feed.

In an alternate embodiment the RSS feed generator may expose various RSS feeds available to a client as a web page. Such a web page may display only those feeds to a client for which the client has a permission to view. illustrates an RSS web feed subscription page that may be used by clients to view various RSS feeds available from a CRM application.

This feature is specifically useful to clients using the RSS feeds to perform various operations. Especially given the prevalence of RSS readers build into various Internet browsers and the RSS platform built into various operating systems the RSS feeds provides clients with the choice to combine a query construction model RSS feed generation model and a query execution models into one produce. Such a combined product may allow users to construct queries of the business data that they re interested in and access those queries as RSS feeds from any device or application that supports RSS. Such a combined product may also allow a user operating a database to create a query specific to a particular partner or supplier share that query as a publication and let the partner or supplier have direct access to data necessary to keep the supply chain full.

As one of ordinary skill in the art would appreciate not all the blocks of the RSS feed generation program need to be performed for a given implementation of the RSS feed provider system . As some of the blocks of the RSS feed generation program may be used primarily to increase the efficiency of the RSS feed generation program one or more such blocks may be omitted in a given implementation without affecting the functionality of the RSS feed provider system . Moreover one or more of the blocks in the RSS feed generation program may also be implemented in an alternate order without affecting the functionality of the RSS feed provider system .

Moreover when the RSS feed is defined it may be bound to a particular type of business entity. Generally speaking business entities in various applications carry several levels of metadata such as the attribute definitions attribute validation display information etc. Such metadata information can be packaged and used in a more compact fashion as part of the RSS feed to indicate to the client the type of object exposed on this feed and its current definition.

The below XML fragment shows an example of a sample of entity metadata that can be provided for the RSS feed of an entity. TABLE US 00001 . . . 

Subsequently a block attaches the identified feed level metadata information with the RSS feed. Note that this is RSS feed level information and only needs to be specified once for the RSS feed for the entire entity not for each individual instance of the entity or with each individual update of the RSS feed. Moreover this feed level information does not change per item. The types mentioned in the metadata are the same types as those exported from any web interface associated with the database form which the RSS feed is generated. Each of the RSS feed items may carry with it enough metadata as attached to the RSS feed to provide a reasonably rich client side display.

There are a number of various manners in which the metadata attached to the RSS feed may make rendering the RSS feed at the user side available. The feed level entity data addition program illustrates three of such rendering options. Specifically a block determines which of the three rendering options are to be selected for a particular RSS feed. Note that the feed level entity data addition program provides the three rendering options as separate stand alone choices in an alternate embodiment a combination of one or more of these options may be used to provide rendering the entity data on client side.

The block may determine that the element should include a short text based sometimes hypertext markup language HTML based introduction or synopsis of the item. In such a case a block includes a element to the item wherein the element indicates to a client where to find the complete document specified in the item. Providing such a link to the client leaves all rendering to the client and requests a user to follow the URL to read the entire document specified in the item.

Alternatively the block may determine to embed an XSL extensible style sheet language style sheet processing instruction PI into the RSS XML data for rendering purpose. In such a case a block embeds such an XSL style sheet PI into the RSS XML data sent to the client by the RSS feed generator program . In this case clients that honor this PI can then leave the ultimate rendering of the layout and display up to the RSS feed provider.

One of the drawback of this method may be that in such a case the provider has to determine client rendering capabilities such as display width available user input devices etc. Moreover the RSS feed provider is also responsible for providing any smart style sheet necessary for rendering the RSS feed. On the other hand using the RSS feed provider display model allows the RSS feed provider to embed additional information into the where such information may be interesting only to the XSL transform. In such a situation a request for RSS feed may include enough metadata to determine which XSL PI should be included for rendering the RSS feed. Identifying the device to be used to render the RSS feed may allow determining such rendering capabilities.

Yet alternatively the block may determine to extend the RSS feed in a standard way. In such a case a block may send an actual entity instance data as generated by an application working with the RSS feed generator such as a CRM application to a client requesting the RSS feed. In this case first the block may receive entity instance data from the application working with the RSS feed generator and then serialize such entity instance data before sending the serialized data to the client. De serializing and serializing data is well known to those of ordinary skill in the art and therefore not described in further detail here. For example when the entity instance data sent with the RSS feed is related to a CRM application the entity instance data may be publicly described using industry standard XML schema definition XSD standard in a manner so that it can be de serialized by any client capable of consuming a CRM web service definition language WSDL and creating a client side proxy.

At a block the RSS feed including the serialized entity instance data is received at a client. Subsequently at a block the client may de serialize the serialized data before displaying the entity instance data. Moreover the client may also perform further processing on the de serialized entity instance data create a client side proxy using the de serialized entity instance data etc. Thus a block determines if further processing of the entity instance data is necessary. If such processing is necessary a block performs such further processing and control is transferred back to block .

Providing entity instance data to the client allows the client now to be able to get a copy of the instance data for the entity in question and to manipulate that data in any way necessary. The ultimate client of the RSS feed doesn t necessarily have to be the client machine receiving the RSS feed and running an aggregator process. In fact the ultimate client may be a series of processes in a pipeline that massage and route the data contained in the RSS feed to various consumers. An example might be an order routing system in a hub and spoke supply chain.

In such a case an RSS feed client may read the RSS feed and apply local business rules to determine the ultimate consumer for the data from the RSS feed. Furthermore as one of ordinary skill in the art would appreciate such capability to disseminate the RSS feed data may be replicated further downstream in a manner so that each downstream consumer has the option to apply local business rules to the RSS feed data. Such capability allows developers at each of the various levels to build powerful feed processing pipeline. For example a developer at a given level may apply an algorithm with multiple forks branches etc. so as to manipulate the RSS feed data as per his or her own business needs.

As one of ordinary skill in the art would appreciate not all the blocks of the feed level entity data addition program need to be performed for a given implementation of the RSS feed provider system . As some of the blocks of the feed level entity data addition program may be used primarily to increase the efficiency of the feed level entity data addition program one or more such blocks may be omitted in a given implementation without affecting the functionality of the RSS feed provider system . Moreover one or more of the blocks in the feed level entity data addition program may also be implemented in an alternate order without affecting the functionality of the RSS feed provider system .

Although the forgoing text sets forth a detailed description of numerous different embodiments of the invention it should be understood that the scope of the invention is defined by the words of the claims set forth at the end of this patent. The detailed description is to be construed as example only and does not describe every possible embodiment of the invention because describing every possible embodiment would be impractical if not impossible. Numerous alternative embodiments could be implemented using either current technology or technology developed after the filing date of this patent which would still fall within the scope of the claims defining the invention.

Thus many modifications and variations may be made in the techniques and structures described and illustrated herein without departing from the spirit and scope of the present invention. Accordingly it should be understood that the methods and apparatus described herein are illustrative only and are not limiting upon the scope of the invention.

