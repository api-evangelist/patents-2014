---

title: Method and apparatus for iterative synchronization of two or more electronic devices
abstract: Dynamic adjustment of offset between timebases of separated electronic circuits is provided based on an amount of time between synchronization events, wherein a synchronization event is an event involving communication across a separation between the separated electronic circuits in order to synchronize the timebases. The dynamic adjustment can be dynamically or adaptively adjusting a margin of error to account for drift that may have occurred since a prior synchronization event. Adjustments might be done by applying a learning sequence to quantify and adjust for static or slowly varying delays between the timebases and coordinating the timebases using output of the learning sequence.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09191907&OS=09191907&RS=09191907
owner: Atmel Corporation
number: 09191907
owner_city: San Jose
owner_country: US
publication_date: 20140117
---
This application is a continuation of U.S. patent application Ser. No. 11 423 499 filed Jun. 12 2006 now U.S. Pat. No. 8 634 341 which is a continuation of U.S. patent application Ser. No. 11 376 747 filed Mar. 14 2006 which claims the benefit of and is a non provisional of U.S. patent application Ser. No. 60 725 835 filed on Oct. 11 2005 which is incorporated by reference in its entirety for all purposes.

The present invention relates to electronic devices that operate according to timebases in general and more particularly to electronic devices that require synchronization of timebases between devices including iterative and learning methods.

Wireless communication among electronic devices has been increasing as the benefits and conveniences of wireless communication become more preferred. A wireless communication system or wireless network is often described as containing nodes or more precisely circuitry associated with the concept of a node and a wireless medium WM over which the nodes circuitry communicate to convey information. Where some action or activity is described as happening at or being done at a node it should be understood that the electronic device and or network interface that is at or simply is the node is the circuitry that is performing the action or activity. For example sending data from node A to node B means transmitting a signal from circuitry associated with node A and receiving that signal or more precisely the transmitted signal modified by the medium using circuitry associated with node B.

The information conveyed between nodes can be digital data and digitized analog signals or other forms of information but communication system design often assumes that digital data is being conveyed and higher network layers interpret the data appropriately. For purposes herein it is assumed that data exists at one node is provided to lower network layers is conveyed to another node over a WM is received by another node correctly or incorrectly and then is conveyed to upper network layers at the receiver. In one model two networked devices run applications that pass data between themselves by having the sending device s application convey data to an application layer of a network stack which conveys data to lower levels ultimately to a medium access control MAC layer and a physical network PHY layer and the process is inverted at the recipient.

To set up a wireless network all that is needed is a plurality of electronic node devices capable of transmitting and receiving data in a manner understood by the two or more nodes involved in a conversation with the node devices appropriately placed such that they can communicate in the medium that exists between the devices. The medium could be some type of dielectric material but more commonly the medium is the air space and objects walls chairs books glass. etc. that are between devices or are positioned such that they have an effect on the signals transmitted between devices. Presumably the node devices are assigned unique identifiers to distinguish transmissions but this might not always be necessary. Examples of such unique identifiers are MAC addresses and IP addresses.

As the existence of various wireless media and their properties are known and are not the focus of this disclosure the medium is often just shown in the attached figures as a cloud. Thus it should be understood that supplier of a set of two or more powered devices that can communicate supplies a wireless network the wireless medium is presumed.

Wireless communication systems can be categorized based on coverage range which in some cases is dictated by use. A wireless local area network or WLAN has a typical coverage range on the order of 300 feet and is useful for providing communications between computing devices in some possibly loosely defined space such as a home office building park airport etc. In some modes of operation one or more of the nodes is coupled to a wired network to allow other nodes to communicate beyond the wireless network range via that wired network. In 802.11 terminology such nodes are referred to as access points and the typical protocol is such that the other nodes referred to as stations associate with an access point and communication is generally between a station and an access point. Some wireless networks operate in an ad hoc mode wherein node devices communicate with each other without an access point being present.

A personal area network or PAN is a short range wireless network with typical coverage ranges on the order of 30 feet usable to connect peripherals to devices in close proximity thereby eliminating cables usually present for such connections. For example a PAN might be used to connect a headset to a mobile phone or music audio player a mouse or keyboard to a laptop a PDA or laptop to a mobile phone for syncing phone number lookup or the like etc. Yet another example of a wireless PAN application is wireless medical monitoring devices that wirelessly connect monitoring hardware to a pager or similar read out device. Yet another example is a remote control that connects to a wireless enabled electronic device.

Some networks might fall in a gray area between a WLAN and a PAN but in many cases a network is clearly one or the other. A personal area network PAN is generally used for the interconnection of information technology devices within the range of an individual person typically within a range of 10 meters. For example a person traveling with a laptop will likely be the sole user of that laptop and will be the same person handling the personal digital assistant PDA and portable printer that interconnect to the laptop without having to plug anything in using some form of wireless technology. Typically PAN nodes interact wirelessly but nothing herein would preclude having some wired nodes. By contrast a wireless LAN tends to be a local area network LAN that is connected without wires and serves multiple users.

Equipment connecting to a wireless communication system in general and to a wireless PAN communication system in particular is typically used for applications where power usage weight cost and user convenience are very important. For example with laptops low cost accessories are preferable and it is critical that the power usage of such accessories be minimized to minimize the frequency at which batteries need to be replaced or recharged. The latter is a burden and annoyance to the user and can significantly reduce the seamless user experience.

Weight and complexity are additional concerns in many wireless communication systems. Particularly with mobile devices such as laptops weight is a concern and the user would rather not have to deal with the hassle of carrying around a multiplicity of devices. Mobile devices are devices that can be expected to be in use while moving while portable devices are devices that are movable from place to place but generally are not moving when in use. The considerations for mobile devices also apply to portable devices albeit sometimes with less of a concern. For example with a wireless connection of a peripheral to a laptop both devices are likely to be used while mobile or moved frequently and carried around. Thus weight and the number of devices is an important consideration. With portable devices such as a small desktop computer with a wireless trackball as long as the total weight is below a user s carrying limit the weight is not as much a concern. However battery life is often as much a concern with portable devices as it is with mobile devices.

There are shades of grey between portable and mobile and it should be understood that the concerns of mobile applications and portable applications can be considered similar except where indicated. In other words a mobile device can be a portable device in the examples described herein.

Where a computing and or communication device connects to a WLAN it uses wireless circuitry that often times are already built into the computing device. If the circuitry is not built in a WLAN card such as a network interface card or NIC might be used. Either way some antenna circuitry is used and power is required to run that circuitry.

Where a device also connects wirelessly to peripherals or other devices over short links often referred to as forming a personal area network or PAN circuitry is needed for that connection as well. This circuitry is typically provided with an external interface unit that is plugged into or onto the device. For example where the device is a laptop the circuitry might be provided by a Universal Serial Bus USB dongle that attaches to a USB port of the laptop. The USB dongle contains the radio circuitry needed to communicate wirelessly over the short wireless links.

In general a wireless connection between two or more devices requires that each device include wireless network circuitry for conveying signals over the medium and receiving signals over the medium as well as processing communication circuitry to receive process and or convey data and or signals to that wireless network circuitry. The processing communication circuitry could be implemented with actual circuits software instructions executable by a processor or some combination thereof. In some variations the wireless network circuitry and processing communication circuitry are integrated such as with some PDAs wireless mice etc. or are separate elements such as a laptop as the processing communication circuitry and a network PCMCIA card as the wireless network circuitry .

For ease of understanding this disclosure where it is important to make the distinction between devices a device that exists to provide wireless connectivity is referred to as a network interface network interface device wireless network interface device or the like while the device for which the wireless connectivity is being provided is referred to as a computing device or an electronic device notwithstanding the fact that some such devices do more than just compute or might not be thought of as devices that do actual computing and further notwithstanding the fact that some network interface devices themselves have electronics and do computing. Some electronic devices compute and communicate via an attached network interface device while other electronic devices might have their network interface devices integrated in a non detachable form. Where an electronic device is coupled to a wireless network interface to a wireless network it is said that the device is a node in the network and thus that device is a node device .

An 802.11x x a b g n etc. NIC network interface card or 802.11x built in circuitry might be used for networking an electronic device to the outside world or at least to devices at other nodes of a WLAN 802.11x network while using an external dongle or a similar interface device with Bluetooth or proprietary wireless circuitry for communication between the computing device and the peripheral or other PAN node.

A device that is equipped with an 802.11x conformant network interface to the WM is herein referred to as a station or STA . In 802.11 terminology set of STAs constitutes a Basic Service Set BSS . A set of STAs that communicate in a peer to peer configuration is referred to as an 802.11x ad hoc network or an independent BSS IBSS . A set of STAs controlled by a single coordinator is referred to as an 802.11x infrastructure network. The coordinator of a BSS is herein referred to as the access point or AP .

A typical access point device is wired to a wired network and is also wired to an external source of electricity such as being plugged into a wall socket or wired to a building s power grid. For example a building an airport or other space people might occupy might have fixed access points mounted throughout the space to provide adequate network coverage for the purpose of providing access to the Internet or other network for the people occupying the space via their portable or mobile devices. As such access points are typically always on so that the wireless network is available whenever suitable portable or mobile devices are carried into the space.

The use of different technologies for WLAN and wireless PAN connectivity increases cost weight and power usage at the COORD side and or the PER side and impairs a seamless user experience. Those disadvantages could be resolved by equipping the peripheral or PAN nodes with 802.11x wireless circuitry thus eliminating the dedicated PAN technologies altogether. However PAN nodes are often very power sensitive devices. They usually are battery operated devices and their small form factor prohibits the use of bulky batteries with large capacity. Instead small batteries with limited power capacity are used. Such peripherals cannot typically support the power usage requirements typical of WLAN wireless circuitry such as 802.11x circuitry. A host of other difficulties are present in view of the optimizations goals and designs of differing network protocols.

Another drawback is that independent LANs and PANs may interfere if they share a common frequency band.

Because of the arrangement of devices having consistent timebases is important. In many communication systems or networks it is desirable to have two or more electronic devices that are communicating with each other to be synchronized to a common timebase. As used herein master timer refers to a circuit code and or logic that maintains this common timebase and synchronization refers to a process whereby a timebase of one device is set into a known relationship with the timebase of another device remote therefrom having the master timer. The relationship can be that the timebases are set equal or at least within a tolerance needed for a particular purpose.

Synchronization of electronic devices that are part of a communication system or network has several advantages. As an example a common timebase may be used by one electronic device that is part of a communication system to agree on a time for exchange of data and or control information or any other communication event with one or more other electronic devices that are part of the system. A communication event that includes the exchange of synchronization information is herein referred to as a synchronization event. 

A communication system implementing synchronization may comprise a first electronic device that is part of the communication system and that generates maintains and or implements the master timer herein referred to as the master device. One or more additional electronic devices that are also part of the communication system and whose local timebases are occasionally adjusted to match that of the master timer are referred to herein as slave devices. It should be noted that a device might be a master device which is a master for timing purposes but might be a slave for other purposes. For example if two devices have a goal to mirror some data one device has the master copy of the data and the other has the slave mirrored copy. The master device for timing purposes might be the device that is the data slave.

A master device might be a computing device having an attached wireless module that includes a wireless interface to the wireless medium. The computing device might include a detachable wireless module and integrated wireless module or circuitry that performs the wireless functions and other functions but generally the wireless module has a clock usable for the master timebase. A common example is a computer e.g. laptop handheld etc. having a wireless network card or module. The wireless network card or module includes various components such as I O for communicating with the computer a power bus memory a processor logic or code to execute a clock and so forth and a wireless interface for transmitting signals into the wireless medium and for receiving signals from the wireless medium.

One example of a communication system that uses synchronization is a Wireless Local Area Network or WLAN . Other examples include wired networks optical networks etc. Slightly different synchronization mechanisms exist depending on whether the WLAN is configured in infrastructure or ad hoc mode. For a WLAN configured in infrastructure mode the electronic devices that comprise the WLAN herein referred to as stations or STAs use a common timebase for coordinating events. The AP is a regular STA but with additional functionality. The timer inside the AP acts as the master timer and hence the AP is the master device of the network. All other STAs of the WLAN occasionally update their local timebase to match that of the WLAN s AP. All other STAs are therefore slave devices. To make it possible for STAs of an infrastructure network to be synchronized to the AP s timebase or master timer the AP regularly transmits a particular type of packet referred to as a beacon that includes an accurate timestamp of the master timer at the exact time of beacon transmission. STAs that receive the beacon process the timestamp in the beacon and update their local timer to match the master timer. The above mentioned technique is a commonly used synchronization technique.

An important limitation of the above mentioned synchronization scheme is that it relies on the ability of the beacon transmitter to obtain and include an accurate timestamp of the master timer at the exact time of a beacon transmission or at least a determinable relationship thereto. Error or uncertainty in the generation of the timestamp or delay introduced between the generation of the timestamp and the transmission of the beacon may cause a synchronization error and may directly degrade the accuracy of the synchronization method which in turn may result in problems among the devices. As a result in order to achieve accurate synchronization with the above mentioned synchronization method access to the master timer at a very low level in the system may be required. For example in a WLAN based communication system the master timer might have to be available to the hardware or low level firmware that directly generates and controls the transmission of packets over the air. Indeed in a WLAN based communication system the transmission of a beacon may be delayed because of other traffic on the wireless medium. This delay is highly variable and may easily be on the order of several milliseconds. If the timestamp were generated at a higher level in the system where there is no knowledge of medium contention or back off mechanisms implemented to avoid collisions on the wireless medium the above described synchronization method would only be able to achieve milliseconds level of accuracy whereas higher levels of accuracy are typically desirable.

In embodiments of the present invention a synchronization method allows two or more electronic devices that are part of a communication system to be synchronized to a common timebase maintained by a master timer without requiring the real time transmission of accurate master timer information. A slave device that wants to be synchronized to the master timer of a communication system occasionally transmits a signal for example as a header field of a packet with real time timing information of its local timebase a slave timer to the master device. Upon reception of the signal the master device processes the timing information from the slave device and sends timing correction information back to the slave device. The timing correction information may be sent immediately after reception of the timing information from the slave device or some time later. Upon reception of the timing correction information the slave device updates its local timer based on the timing correction information provided by the master device. As needed the slave device the master device or both can perform some processing to improve on the synchronization.

Iterative techniques might be used to sync the timebases over time and learning techniques might be used to better predict alignments.

Other objects features and advantages of the present invention will become apparent upon consideration of the following detailed description and the accompanying drawings in which like reference designations represent like features throughout the figures.

The present disclosure describes methods and apparatus for operating a secondary wireless network SWN in the presence of a primary wireless network PWN including features elements configurations and or programming that allow for co existence of SWN devices in a space where PWN traffic might occur as well as features elements configurations and or programming that include coordination between a PWN and an SWN or pluralities of these such that a device might handle traffic for each of the networks present.

For example a computing device might have a common network interface that allows the computing device to be a node in the PWN and a node in the SWN. In a particular example a computing device is an 802.11x STA that is a member of a PWN capable of associating with and communicating with an AP for that PWN as well as possibly other devices in that PWN using a network interface while also elements of that same network interface are used to simultaneously participate as a WPAN coordinator COORD to coordinate the SWN such that the COORD can communicate with members of one or more SWN without losing the COORD s connectivity to the primary network and using common hardware components to interface to both networks. Where a COORD is connectable to the PWN it is referred to as a dual net device as it coordinates communication over the SWN such that it can be connected to both simultaneously possibly including steps that involve signaling within the PWN as part of SWN activity e.g. reserving the PWN to avoid interference before using the SWN .

In some instances the COORD is not set up to connect to the PWN but it still performs the necessary actions to coordinate traffic for the SWN it coordinates including performing actions that improve coexistence of the PWN and SWN.

In the general example the computing device is a portable and or mobile computing and or communications device with some computing capability. Examples of computing devices include laptop computers desktop computers handheld computing devices pagers cellular telephones devices with embedded communications abilities and the like. Examples of peripheral devices include typical computer telephone etc. accessories where wireless connections are desired but might also include less common devices such as wearable devices that communicate with other devices on a person or even to communicate with other nearby devices possibly using the electrical conductivity of the human body as a data network. For example two people could exchange information between their wearable computers without wires by transmission through the air or using their bodies and or clothing.

The computing devices may interface to 802.11 WLANs or other wireless networks to communicate with other network nodes including nodes accessible through wired connections to the wireless network typically via an access point . The computing devices also may interface to PAN devices over a personal area network PAN such as wireless headsets mice keyboards accessories recorders telephones and the like. A wide variety of PAN devices are contemplated that are adapted for short range wireless communications typically bi directional and typically low power so as to conserve a PAN device s limited power source. Some PAN devices might be unidirectional either receive only or transmit only devices.

In a typical approach where a STA needs to connect to more than one wireless network the STA associates with one wireless network and then when associating with another wireless network it disassociates with the first wireless network. While this is useful for a WLAN where a STA might move out of one network s range and into the range of another network this is not desirable when latency needs to be less than an association set up time. The latency incurred with this switching procedure easily amounts to several hundreds of milliseconds.

In certain applications it may be desirable for a STA to connect to multiple networks without incurring long switching induced latencies. For example consider a typical PER device that of a cordless mouse. Since update rates for a cordless mouse during normal operation are on the order of 50 to 125 times per second switching induced latencies involved with 802.11x association set ups are not acceptable. Furthermore the switching overhead significantly reduces the STA s usable communication time defined as the time that the STA is available to transmit or receive data.

In a specific embodiment of the invention a wireless peripheral like a mouse is attached to an 802.11x enabled computing device like a laptop computer using the 802.11x wireless circuitry inside the laptop or connected to the laptop via a NIC card. At the same time the laptop may be connected to the Internet via a regular WLAN network using the same 802.11x circuitry. Herein a peripheral or PAN node will be referred to as PER . Multiple PERs can connect to a single wireless PAN. The wireless device coordinating the wireless PAN is called the coordinator COORD . Where the COORD is also able to connect to the 802.11x network the COORD is referred to as a dual net device since it handles both networks. A typical dual net device in this example is a device that is a STA on an 802.11x network while also having wireless peripherals used by applications running on that device.

While not always required the PERs are power sensitive devices. It should be understood that an object labeled PER need not be a peripheral in the sense of an object with a purpose to serve a particular purpose but rather an object that performs the behaviors herein referred to as behaviors of a PAN node. For example a printer can be a PER when it is connected to a desktop computer via a PAN but some other device not normally thought of as a peripheral can be a PER if it behaves as one.

Examples of the concepts and disclosures provided above will now be further explained with reference to the figures. In the figures like items are referenced with a common reference number with parenthetical numbers to indicate different instances of the same or similar objects. Where the number of instances is not important for understanding the invention the highest parenthetical number might be a letter such as in . . . N . Unless otherwise indicated the actual number of items can differ without departing from the scope of this disclosure.

Specifically illustrates various devices operating as part of a primary wireless network PWN a secondary wireless network SWN such as or or both. In the figure an access point AP supports an infrastructure mode for PWN coupling various stations to the network allowing for example network traffic between a station and a wired network . By communicating with the AP a station can retrieve information from the Internet and exchange data with other stations that may or may not be part of the Basic Service Set BSS managed by the AP.

As shown in the example the stations present are STA STA STA and STA. Each station is associated with a node in PWN and has the necessary hardware logic power etc. to be a node device in PWN . Station STA also coordinates SWN as the COORD for that network shown comprising PER PER and PER. Likewise station STA coordinates SWN as the COORD for the network comprising STA PER and PER. In each node device is shown with an antenna to indicate that it can communicate wirelessly but it should be understood that an external antenna is not required.

Other network components and additional instances might also be present. For example more than one AP might be present there might be overlaps of BSSes and other network topologies might be used instead of the exact one shown in without departing from the scope of the invention. Examples used herein for PWN include 802.11x x a b g n etc. but it should be understood that the primary wireless network may well be another network selected among those in present use or available when the primary wireless network is implemented.

In this example the secondary wireless networks are assumed to be used for PAN functionality. The PAN can be used for but is not limited to fixed data rate applications where exchange of data can be scheduled and the amount of data to be exchanged is known and a single dual net device might interface with multiple PERs. Because the dual net device may be a regular STA in the first WLAN it can power down as needed without problems unlike an access point. However since it is also the COORD peripheral communication could be lost if the peripheral is powered up but the dual net device COORD is not. This can be dealt with using mutually agreeable inactivity periods.

Laptop a dual net device in this example in turn can communicate with the peripherals shown in this example a wireless mouse PER and a wireless printer PER . It may be that power for wireless printer comes from an external power outlet in which case power consumption might be less of a concern than with mouse if it operates on battery power. Nonetheless both peripherals might use the same power saving protocol. Power conservation might also be performed on the dual net device for example when it is a laptop.

The various protocols used between devices are marked as PP for PWN protocol which might be an 802.11x protocol or the like and SP for SWN protocol which might be a modified 802.11x protocol an overlay protocol or the like. As used herein an overlay protocol is an SWN protocol that has elements that are reuses of elements of a PWN protocol to provide one or more advantages such as ability to use some common hardware components for both networks the ability to communicate in the SWN without having to disassociate with the PWN the ability to signal in the SWN with signals that are understood by SWN devices but are such that they are if not understood are acted upon by PWN devices to provide desirable actions. For example an overlay protocol might be such that a PWN only device that hears an SWN packet will be able to decode the packet enough to determine that the packet is not for the PWN only device and also determine how long the wireless medium will be busy with SWN traffic so that the PWN only device can appropriately defer.

Of course if all of the PWN devices and SWN devices had the same constraints and could support a wider area network standard protocol then perhaps all of the devices would just be nodes in one network and use that network s protocol for contention coordination and the like. However where one size fits all does not work it is preferred that some sort of coexistence enhancement occur.

In some variations PDA and phone might communicate in ad hoc mode. As an example of the use of these elements phone might be used to simultaneously conduct a wireless Voice over IP VoIP call and attach wireless headset .

In the example of it may be expected that mouse keyboard mobile phone and headset are not programmed for and or do not have circuits to support use with an 802.11x primary network but nonetheless they might use an SWN protocol that has many aspects in common with an 802.11x protocol modified to accommodate the different needs of SWN devices while providing a measure of co existence. The network interface for a dual net device might comprise standard hardware for interfacing to the PWN and software to control that standard hardware to use it for SWN protocol traffic. Thus with the selection of the SWN protocol such as those described or suggested herein SWN support can be added to a computing device without requiring any new hardware.

Program and software instruction storage might comprise program code memory and disk drive . Program instructions for implementing computing communication etc. functions as well as network interfacing can be stored in program code memory and might be loaded in there from instructions stored on disk drive . Program code memory might be just a portion of a common memory that also has memory as a portion. For example both memories might be allocated portions of RAM storage so that instructions and data used by programs are stored in one memory structure. With a general purpose network centric signal processing centric or other style of processor functional modules that might be illustrated by blocks in a block diagram might be implemented entirely in software embodied only in code stored in computer readable media. However when executed as intended the processor and the stored instructions perform the functions of those modules. For example a device might be described as having a network stack that performs certain functions but the network stack might not be represented in individual hardware elements.

In operation of an example network card power might be supplied via interface circuits as well as providing a wired datapath for data into and out of the network card. Thus when the connected computing device desires to send data over the network s supported by the network card the computing device sends the data to an input circuit of interface circuits . The input circuit then conveys the data to control datapath logic . Control datapath logic may format the data into packets if not already so formatted determine the PHY layer parameters to use for the data etc. and possibly other processes including some well known in the art of networking that need not be described here in detail. For example logic might read a real time clock from card clock circuit and use that for data handling or include a real time clock value in header data or other metadata.

Logic then outputs signals representing the data to baseband modem circuitry which generates a modulated baseband signal corresponding to the data. That modulated baseband signal is provided to RF section . The timing of output of signals of logic and other parts of the network card might be dictated by a timing clock signal output by card clock circuit . RF section can then be expected to output an RF modulated signal to antenna . Such output should be in compliance with requirements of nodes of the networks with which the computing device is associating.

For example if the computing device is expecting to be associated as a node in an 802.11b network the signal sent to antenna should be an 802.11b compliant signal. Also the control datapath processes should process data in compliance with the requirements of the 802.11b standard. Where the computing device is expecting to be a dual net device the signals sent should be compliant with the protocols and or standards applicable for the network to which the signals are directed and be done in such a way as to deal with the fact that while communication is happening among devices of one network such as the primary wireless network or the secondary wireless network those signals might be heard by devices that are only devices in a different network such as the secondary wireless network the primary wireless network or other network and the signals should be such that devices can at least co exist.

Where the computing device is a dual net device its network card would provide signals for the primary network and the secondary network. In one example mentioned herein the primary network is an 802.11x network and the computing device is a STA node for that network and the secondary network is a PAN and the computing device is the COORD for that network. In some implementations network communications are handled using a software platform that supports network applications.

In some embodiments wherein 802.11x or other PWN protocols do not need to be supported the built in wireless circuitry or network card could be designed to handle only SWN protocols as would be the case where the network comprises all devices that are capable of handling SWN protocol communications. Examples of such protocols include protocols that operate between devices built by H Stream Wireless Inc. to communicate using an H Stream protocol such as their HSP protocol. In some HSP enabled devices the network logic can be entirely represented with software that accesses the RF section of a device that might be a generic network interface possibly using additional hardware. However where both ends are HSP enabled devices they might use their own hardware and control it at whatever level is needed for best performance.

A convergence platform can be added between an 802.11x stack and the different drivers to enable multi protocol support expose and coordinate access to specific MAC service primitives and coordinate the priority handling in Quality of Service QoS sensitive applications. This convergence platform can be a separate software layer or can also be integrated within the 802.11x stack.

For certain stacks additional services may be required that might not be supported inside the 802.11x stack. If that is the case such overlay protocol services may reside either inside the convergence layer or in between the convergence layer and the respective stack. As an example communication with peripherals may require protocol services in addition to the protocol services provided by the 802.11x stack in order to meet the power and latency requirement typical of such applications. Such protocol services may be part of the convergence layer or may reside in between the convergence layer and the Peripheral Interconnect Stack. Of course as an alternative the 802.11x stack may have been adapted to support such services.

Each of the stacks is shown coupled to a convergence layer which provides the necessary and or optional conversions of data protocol timing etc. so that each of the higher level stacks are interfaced to an 802.11x stack . 802.11x stack can then interface to the computing device s network card or other network circuitry . In this manner for example stack might handle a browser s traffic that goes through IP stack while also handling a mouse interface whose traffic goes through peripheral stack . Note that with a single 802.11x stack a single network interface can carry traffic for more than one higher level stack. The single network interface needs to be tuned to deal with the different requirements of the different stacks.

Communication protocols can be implemented with drivers or firmware that is installed on the dual net device COORD. The drivers or firmware might comprise an 802.11x peripheral service function e.g. for implementing the services of the overlay protocol that are not supported inside the 802.11x stack which can be application independent and an adapter driver to connect the 802.11x stack and 802.11x peripheral service function to the appropriate driver inside the dual net device COORD platform. The adapter driver may be device class or device specific.

An example of this is illustrated in for a wireless PAN where a mouse is connected over the WM to the standard HID class driver in a PC running on the Windows or other applicable Operating System OS . The driver or firmware resides between the 802.11x stack and the standard HID class driver . In a specific implementation the driver or firmware can constitute an HID adapter driver and an 802.11x peripheral bus driver .

Other variations of what is shown in are possible. For example the 802.11x peripheral service function might connect up to the MOUHID driver directly. In that case the HID adapter driver is written as an HIDCLASS miniport driver. This driver then layers under the MOUHID and MOUCLASS drivers and allows mouse data to be injected into the operating system.

Alternatively the adapter driver may connect to the USB stack instead. The adapter driver may for example be written as a virtual USB bus driver and connect up to the standard USB stack available as part of the operating system or operating system modifications. Depending on the specific implementation the adapter driver may connect at different layers into the USB stack.

In specific embodiments the 802.11x peripheral service function and adapter driver may be combined in a single driver. Alternatively two separate drivers may be used and a private interface might be defined and used between both drivers.

The adapter driver receives the 802.11x frames from the 802.11x peripheral service function that are intended for the higher layer driver e.g. MOUCLASS driver . Similarly the adapter driver receives frames from the higher layer driver that are to be transmitted to a PER using the 802.11x circuitry. The adapter driver and 802.11x peripheral service function generate and decode the necessary packet header for running a specific application like the HID protocol over an 802.11x data channel. For example it removes the 802.11x specific MAC header and performs the necessary manipulation to transform it in the correct format to be passed on to the respective class driver.

As shown wireless transceiver comprises interface circuits control datapath logic a baseband modem and an RF section . Control datapath logic might be implemented with circuitry that includes a central processing unit CPU and memory for holding CPU instructions and variable storage for programs executed by CPU to implement the control datapath logic. Control datapath logic might include dedicated logic wherein CPU and memory module implement the portion of the communication protocol that is not implemented in the dedicated control and datapath logic. The CPU instructions might include digital signal processing DSP code and other program code. The other program code might implement MAC layer protocols and higher level network protocols.

Clock circuit might include a crystal oscillator. Clock circuit might be aligned with clocks in other network devices but the clocks may drift over time relative to each other.

Although not shown other components like capacitors resistors inductors filters a balun a Transmit Receive T R switch an external power amplifier PA and an external low noise amplifier LNA may also be included in PER .

Wireless transceiver might be configured so as to communicate over the physical layer PHY of a standard IEEE 802.11 compliant circuit chip. Wireless transceiver may be an embedded System on Chip SoC or may comprise multiple devices as long as such devices when combined implement the functionality described in . Other functionality in addition to the functionality of may also be included. Wireless transceiver might have the ability to operate for example in the unlicensed 2.4 GHz and or 5 GHz frequency bands.

As used herein a slave device is a device that takes direction from a master device on predetermined aspects of operations based on the state of the master device rather than the state of the slave device if there is a mismatch . Thus for synchronization the timebase of the master device controls. Where the slave device is remote from the master device the timebases might mismatch disagree and synchronization can be used to match them up or at least get them to match as close as needed for a particular application.

Thus slave devices are part of a communication system and are to be synchronized to the master timer of the communication system wherein the master timer is generated maintained and or implemented in a master device that is part also of the communication system. It is assumed that the master timer may or may not be available real time at a sufficiently low level in the system for an accurate real time timestamp to be included in transmitted packets or other signals if packets are not used .

Synchronization may for example be used to allow the master device and or the slave device to power down some most or all of its circuitry outside a communication event. The timers may then be used to trigger a wake up of the appropriate circuitry at the start of the communication event.

Master and slave devices can be network cards computers peripherals telephones or other communication and or digital circuit devices such devices might be implemented as hardware programmable logic and or firmware software instructions stored on an electronically readable medium to appropriately program a processor to execute steps to implement one or more processes described herein. In some cases a synchronization process only has access to a wireless module at a high level possibly resulting in indeterminate delays in getting and sending timing information.

Examples of computing devices include but are not limited to personal computers laptops telephones televisions or PDAs. The wireless interface may be a WLAN wireless interface but other wireless communication protocols may also be used. The wireless protocols might be 802.11x x a b g n etc. 802.15.x x 1 3 4 3a etc. 802.16 or any other protocol.

As shown a master device comprises a master clock a processor storage for programming code and a wireless interface . Processor can be a general or specific purpose processor able to execute instructions provided in storage and in alternate embodiments hardware dedicated to that functionality is used rather than a processor that executes instructions. A slave device comprises a slave clock a processor storage for programming code and a wireless interface . This specific embodiment assumes a wireless communication system but other communication systems and alternative schemes for computation of the system master time may be used as well.

While various elements are shown connected by paths other paths might be present and not shown and some paths might introduce indeterminate delays for signals traveling those paths. Storages and might include programming code for implementing synchronization processes described herein shown as SYNC programming code for communication functions COMM and possibly other OTHER functionality.

On some paths such as paths and of master device timing information might be delayed by an indeterminate time delay and in some cases the delay between the sampling of a timebase value and the transmission of a packet including an indication of that timebase value might also be an indeterminate time delay. As a result having a timebase value determined at the master device inserted into a packet and transmitted an unknown or at least unspecifiable time later is not suitable to allow slave devices to determine the master timebase.

If the master timebase were available for transmission with a determinate time delay that master timebase might simply be transmitted and received at each slave device to synchronize their timebases. One reason a master timebase might not be available is where a synchronization program relies on an interface to the timer such as via an application programming interface API to a wireless module having the timer and API calls are not controllable as to the time they take. One approach is to have the slave convey its timebase to the master have the master determine the difference between the timebases and send a message conveying a value of that difference to the slave device and then have the slave device reset its timebase accordingly.

An example synchronization process is illustrated in . That figure shows various steps of the process arranged according to which device is performing the step. The steps are numbered S S etc. and performed in numerical order unless otherwise indicated.

In step S the slave device creates a message indicating a value for its timebase e.g. accurate and real time timing information of a local slave timer and in step S it sends the message to the master device. This timing information may comprise a real time representation tof the slave timer but other timing information may also be possible. As an example if the slave timer is implemented as a counter it might not be necessary to send all bits that constitute the counter. It might be sufficient to only send a subset e.g. only send the least significant bits and let the receiver disambiguate the received data to determine the full counter value. In general the slave device should send sufficient timing information to the master device for the master device to be able to derive the timing error between the master and slave timers but the slave device need not send all timing information.

Where there is a determinate time delay between the creation of the message in step S and the sending of the message in step S that can be taken into account in setting the value in message .

In step S the master device receives message and extracts the timing information interpreting it as appropriate such as by determining the inferred more significant bits of a timer value. In step S the master device compares the slave timebase t to the master timebase t to determine a timing correction signal . If the slave device sends the real time representation of the slave timer then the timing correction signal may be obtained by comparing 2 the value of the master timer to the value of the slave timer. Other approaches to determining the timing correction might be used instead. The timing correction signal optionally may be subject to further processing at the master slave or in part both. Also methods other than those shown and described herein could be used instead.

Once the master has determined the timing correction signal it creates a response message S and sends it S to the slave device. Notice that the timing of the response message is not critical as the slave device will read the timing correction signals from message and not need to rely on when message was sent or received. That avoids timing problems that would otherwise occur when the master device cannot accurately control or predict when a message will or can be sent.

At the start of a synchronization event the master device waits for the reception of timing information from the slave device. There may be a delay between the start of a synchronization event and the reception of the signal by the wireless module of the master device. As an example a delay may be introduced by the wireless interface at the slave device side as the wireless interface follows the appropriate access procedure to the wireless medium. However generally the slave device is able to transmit a packet containing a timestamp with a determinable delay between obtaining the timestamp value and actually transmitting the packet.

Upon reception of the signal with the real time value of the slave timer t the wireless module propagates the timing information up to the circuit code and or logic that implements the synchronization functionality. The master device then computes the value of tbased on the above disclosed scheme and compares the obtained value to the value of tthat was included in the signal sent by the slave device. Based on this comparison the master device computes an estimate for the timing correction signal that exists between both timers. The exact computation of depends on the specific implementation. Some time later this error may be communicated back to the slave device over the wireless medium. This may happen during the same or during a subsequent communication event and the slave device may decide to apply a timing adjustment based on either immediately or some time later.

Optionally additional processing may be performed on prior to applying the timing adjustment to the slave timer. For example might be clipped i.e. limited to values within a finite range .

The master device may communicate the timing correction signal back to the respective slave device instantaneously some time later during the same synchronization event or some time later as part of a later synchronization event. Upon reception of the timing correction signal the slave device may apply the timing correction immediately or some time later. Under certain circumstances it may also decide to ignore the timing correction or apply only a partial adjustment. How frequently the synchronization procedure has to be repeated is implementation specific and may depend on among other things the frequency drift of the slave timer and the target synchronization accuracy.

The further processing of the timing error signal may be performed inside the master device may be performed locally inside the slave device or may be implemented partially in the master device and partly in the slave device. For example the master device might clip the timing error signal or the slave device might clip the error signal.

Examples of additional processing may include but are not limited to compensating for specific delays introduced in the loop by a specific implementation compensating for master to slave frequency offset applying an intentional offset or performing a filtering operation. The additional processing may reside inside the master device or may be implemented locally inside the slave device. Alternatively additional processing may be partially applied inside the master device and partially inside the slave device. As an example an intentional offset may be applied to compensate for delays inserted into this synchronization mechanism by the system. An example of such delay may be the system delay that is introduced by transporting packets to and from the wireless module.

As another example low pass filtering may be desirable to filter out some of the high frequency jitter that may be present on the master timer. This processing may be performed in the master or slave device or the processing may be split between the master and slave device.

In a slightly different implementation the master device initiates the packet exchange by sending a first signal herein referred to as a poll signal which might be a poll packet to the slave device at or some time after the start of the synchronization event. Delay between the start of the synchronization event and the transmission of the poll signal may for example be introduced by the wireless interface inside the master device following the appropriate wireless medium access procedures.

Upon reception of the poll signal the slave device responds some time later with a signal that contains the real time value of the slave timer t herein referred to as the poll response signal. Upon reception of the poll response signal the master device may follow any of the procedures described above to derive an estimate of the timing error that exists between both timers. Some time later this error may be communicated back to the slave device over the wireless medium. This may happen during the same synchronization event or during a subsequent synchronization event. As an example of the latter the timing error may be included in the poll signal of the next synchronization event.

Similar to the implementation discussed above the slave device may decide to apply a timing adjustment based on either immediately or some time later. Optionally additional processing may be performed on prior to applying the timing adjustment to the slave timer.

Instead of using a clock of the wireless module for the master timebase a clock maintained outside the wireless module might be used such as an operating system clock.

In one specific embodiment the communication system is a wireless network that uses a system timer that is external to the wireless module for synchronization purposes. This system timer herein referred to as the system master timer or t is presumed not available in real time to the wireless module therefore precluding the transmission of packets or signals that contain accurate and real time master timer timing information. The system master timer may be derived from any timer or a combination of timers that is available to the computing device.

In some instances maintaining a high resolution timer is burdensome on the operating system. One method of generating an accurate system master timer T without significantly burdening the master device computing resources is illustrated in . In this method a timer interrupt T is used in combination with a high resolution timer T. An example of a high resolution timer is the Advanced Configuration and Power Interface ACPI timer often available as part of a computer operating system also known as the PN clock but another high resolution timer may also be used. One use of the ACPI timer is to provide reliable timestamps independently of the processor s speed such as for example in a Microsoft Windows operating system. The system master timer is derived from and synchronized to the interrupt timer or a timer that is synchronized to the interrupt timer.

The latter is desirable because the scheduling of communication events time X in the figure between the master device and one or more of its slave devices is determined by the timer interrupt. However the timer interrupt may only have a very coarse granularity. For example the granularity of the timer interrupt may be on the order of one to fifteen milliseconds.

In order to achieve a much more accurate level of synchronization a second high resolution timer is used in addition to the timer interrupt. This second high resolution timer may or may not be synchronized to the timer that generates the timer interrupts. Independent of whether or not the high resolution timer is synchronized to the interrupt timer the value of the master timer upon reception of a signal from one of its slave devices may be computed as described below.

When the timer interrupt indicates the start of a synchronization event the master device records the value of the high resolution timer t. When some time later time O in the figure the master device receives the signal with the timing information from the slave device it records the new value of the high resolution timer t. The value of the system master timer may then be computed by applying the computation shown by Equation 1 where tis the value of the interrupt timer at the beginning of a communication event. Note that the computation can be done with only two readings of the high resolution timer which is efficient on the operating system resources. Equ. 1 

In a specific example where the operating system of the master device is for example Microsoft Windows XP or another Microsoft Windows operating system tcan be computed at the kernel level. The kernel may receive an interrupt at a regular rate typically every 15.625 ms which is somewhat coarse . The circuitry code and or driver that implements synchronization functionality may keep track of the number of timer interrupts that have occurred up to some point in time and compute tfrom that number of timer interrupts and the periodicity with which timer interrupts occur as shown in Equation 2 where T is the period of the interrupt timer in units of time. of interrupts Equ. 2 

It should be noted that in the case where the high resolution timer is synchronized to the interrupt timer the computation of tmay be simplified to that shown in Equation 3. t Equ. 3 

In the embodiments described above the scheduling of synchronization events is based on a system master timer that is independent from and not necessarily synchronized to any timer that may be available inside the wireless module. In other embodiments a timer that is available inside the wireless module of the master device is used as the master timer for the communication system. This timer is herein referred to as the wireless module master timer.

Where a system timer is used as the master timer but it may be desirable to have this timer synchronized to the timer that is available in the wireless module. In order to accomplish this the above scheme may be slightly expanded where the wireless module periodically or on a sufficiently frequent basis to maintain synchronization sends information of its local timer to the circuits logic and or code that implements the synchronization functionality. The circuits logic and or code implementing the synchronization functionality may adjust its master timer and correspondingly schedule communication events based on the timing information that it receives from the wireless module.

The start of communication events is scheduled off the wireless module master timer such as the TSF Timing Synchronization Function timer used by WLAN devices and the timebase inside the slave devices is adjusted occasionally to remain synchronized to the wireless module master timer. In the specific embodiment where a wireless module master timer is used signals that are received from a slave device and contain slave timer timing information are timestamped with the real time value of the wireless module master timer t at the time of signal reception by the master device. This information is passed on to the circuitry logic and or code that implements the synchronization functionality.

The circuitry or driver that implements the synchronization functionality computes the timing correction signal based on the slave timing information and the real time value of the wireless module master timer t in the same or similar way as described above with respect to previously described embodiments. This timing correction signal is communicated back to the respective slave device over the wireless medium. Similar to the implementation described above the slave device may decide to apply a timing adjustment based on either immediately or some time later. Optionally additional processing may be performed on prior to applying the timing adjustment to the slave timer.

In the case where a portion or all of the synchronization and or communication functionality resides at a higher level in the system that is outside the wireless module it may be desirable or even necessary for the circuitry or driver that implements such functionality to signal to the wireless module at which value of the wireless module master timer a communication and or synchronization event is expected to occur by passing such information through the interface to the wireless module.

In a very specific embodiment the proposed method may be applied as a synchronization technique in a wireless network herein referred to as a secondary wireless network or SWN where the wireless module of the master device of the SWN may also be used for communication with devices in a different wireless network herein referred as the primary wireless network or PWN or in devices that coexist with the primary network.

The device that is a master device in the SWN may be configured either as a master device or as a slave device in the PWN. It may also be the case that the device has the ability to be part of a primary network but may or may not be actually part of such network. Independent of the exact configuration as a master device of the secondary network the device may or may not have the ability to transmit accurate and real time timestamps of the secondary network s master timer which may or may not be different from the first network s master timer.

As an example the PWN can be an 802.11x WLAN and the SWN can be a network that uses protocols that are partially compatible with 802.11x WLAN protocols such that SWN transmissions induce desirable reactions in PWN devices.

Possible reasons why this might not be possible include but are not limited to 1 the synchronization process is run at a higher level and does not have sufficient control of timing to enable the transmission of accurate and real time timing information or 2 the wireless interface is not configured to transmit packets that include real time accurate timing information. An example of the latter may be a device whose primary network is an infrastructure WLAN and the device is a regular STA or slave device that is non AP in the infrastructure WLAN that updates its timer based on beacons in packets it receives from the infrastructure WLAN AP. As a regular STA or slave device in the primary network the device is typically not configured to transmit accurate real time timing information. Alternatively the master device of the secondary network may have the ability to transmit such information but decides to use novel synchronization methods disclosed herein.

In a communication system where multiple slave devices are synchronized to a single master timer the master device may compute the timing error 1 on a per slave basis 2 using a method and formula that is common to multiple or all slave devices 3 or a combination thereof. The master device may furthermore communicate the timing correction information to its slave devices in a single packet that includes the timing correction information for multiple or all slave devices. As an example of the latter a broadcast or multicast packet may be used. Alternatively the master device may use multiple packets each containing timing correction information for one of its slave devices to synchronize its slave devices. In that case unicast packets directed to the respective slave device may be used.

System nonidealities may cause a timing error between the slave s notion of the start of a communication event and the actual start of the communication event as defined by the master timer. System nonidealities may include but are not limited to the drift of the slave timer relative to the master timer due to a frequency offset the inaccuracies or clock jitter on the master and or slave timer and the delays that may be introduced in various places in the system.

Timing errors can result in a slave device missing communication events or can result in unnecessary time being wasted by a slave device waiting for a communication event.

Such events can be dealt with by simply assuming a margin of error. For example if a slave device expects a transmission to start at a particular time but delays in the system cause the communication event to start later the slave device will get ready for the communication event too early in time potentially resulting in a waste of power. For example if a device is to wake up every 100 ms for a 1 ms transmission but the start of a communication event is delayed by 15 ms then the device would be awake up to 16 ms each 100 ms possibly consuming sixteen times as much power. One way of compensating for such nonidealities is to apply an intentional offset either at the master device side or inside the slave device. Since certain timing errors may vary over time and may depend among other things on the time that has expired since the last synchronization event it may be desirable to make the offset adjustable programmable or adaptive over time. Timing offsets might vary by packet size data rate etc. In specific embodiments it may therefore be necessary or desirable to keep a table with timing correction information for the different cases.

As an example a frequency difference between the master and slave timer may cause the slave timer to drift relative to the master timer in between synchronization events. This drift grows larger as the time between subsequent synchronization events becomes longer. If the slave timer may have drifted Tbetween subsequent synchronization events one may apply a timing offset equal or larger than Tas part of the synchronization functionality to compensate for this drift. A first method comprises applying a static offset that is an offset that does not change over time. Because the offset is static it should be calculated to account for the worst case drift that may occur between a slave timer and its master timer in between two consecutive synchronization events.

To calculate this offset the longest time period that may expire between subsequent synchronization events should be considered. Alternatively the offset may be calculated dynamically. When a dynamic offset is applied the system keeps track of the time that has expired since the last synchronization event and adjusts the offset accordingly. As the time that has expired since the last synchronization event becomes longer and therefore the drift between both timers grows the offset that is applied to trigger the wake up for the next communication event is adjusted accordingly

In a similar way delays introduced by the communication system and occurring inside the synchronization loop may cause a timing error between the master and slave timer and may be compensated for by applying an additional timing offset either at the master device side or inside the slave device. Examples of such delay may include but are not limited to a delay in the wireless module or wireless interface or a delay in the path to from the wireless interface from to the point in the master device where the synchronization functionality is implemented.

A learning sequence may be applied once or at the start of a series of communication events to quantify existing frequency drift between the master and slave timer as well as static and slowly varying delays in the system. Different learning sequences may be implemented.

In a first embodiment the learning sequence may follow a two step approach. As a first step synchronization events are scheduled sufficiently close in time such that frequency drift between the master and slave timer is negligible. The timing error between the slave and master timer is recorded either at the master or at the slave device side and the offset required to compensate for delays in the system may be computed from this timing error. This computation may be performed either at the master device side or at the slave device side or may be performed partially inside the slave device and partially inside the master device.

Multiple timing error data points may be required to compute the offset and additional processing may be required to account for the effect of other nonidealities and timing uncertainties in the system. Such nonidealities may include but are not limited to clock jitter on the master or slave timer or timing uncertainties introduced by the master device as it follows the appropriate medium access procedures.

As a second step the period in between synchronization events may be increased such that frequency drift between the master and slave timer becomes a dominant contributor to the timing error. Timing error data points may then be used to compute the frequency drift between both timers as well as the offset required to compensate for such drift. Additional processing may be required to account for other nonidealities in the system and the offset may be applied either as a static offset corresponding to the longest time that may expire between consecutive synchronization events or as an offset that adapts as the time since the last synchronization event increases.

In a different embodiment a single step learning sequence may be adopted. In such an embodiment the time between synchronization events is progressively increased or decreased and the timing error between the master and slave timer is recorded. The timing error between the slave and master timer may be recorded either at the master or at the slave device side. From those timing error data points the static portion of the timing error as well as the portion of the timing error that scales with the time that expires in between synchronization events may be computed. The first corresponds to static delays in the system whereas the latter corresponds to the frequency drift between master and slave timer. This computation may be performed either at the master device side or at the slave device side or may be performed partially inside the slave device and partially inside the master device.

Additional processing may be required to compensate for other nonidealities in the system. Such nonidealities may include but are not limited to clock jitter on the master or slave timer or timing uncertainties introduced by the master device as it follows the appropriate medium access procedures.

Additional offset may be applied to improve the system reliability by building in more margin of error and to compensate for additional nonidealities in the system. Such nonidealities may include but are not limited to jitter on the master or slave timer. The offset may also be dynamically adapted based on the instantaneous requirements of the communication system. As an example if an increase in packet error rate is detected the system may dynamically and possibly temporarily adapt the timing offset to improve the robustness of the communication system.

The above described apparatus methods and techniques can be used to improve on the synchronization of a master device and one or more slave devices in a communication system that implements synchronization methods described herein. Improvements can imply a reduced power up time for a slave device resulting in a reduced power consumption and or increased robustness of the communication link.

As an example if part or all of the synchronization functionality are implemented in circuits code and or logic that resides at a higher level in the system the static delay in the path to from the wireless interface might amount to several hundreds of microseconds or even milliseconds depending on the characteristics of the master device. Unless corrected for this timing delay results in the slave device waking up ahead of the start of a communication event by at least two times this static delay. In certain applications the power up time of a slave device per communication event is only of the order of a few hundreds of microseconds or even less. Without correction static delays in the master device s system can easily double the power up time of the slave device thereby possibly doubling its power consumption.

As another example the frequency of the crystal oscillator or other component or circuitry that determines the timing of the slave device and the frequency of the crystal oscillator or other component or circuitry that determines the timing of the master device might not be exactly the same. Such frequency difference will cause the slave device s timer to drift relative to the master device s timer. Typical frequency differences are on the order of 20 to 100 parts per million ppm or more. If the frequency difference is 100 ppm and the time between two synchronization events is one second then the slave device s timer will have drifted by 100 s between events. Unless corrected for and depending on the direction of the drift that is depending on whether the frequency of the master device is higher than that of the slave device or vice versa the slave device will either be powered up for a longer time resulting in a higher power consumption inside the slave device or the slave device will only wake up after the start of the communication event resulting in reduced robustness. The latter can be compensated for by building in a margin of error and waking up the slave device ahead of the start of the communication event as perceived by the slave device. However this will result in higher power consumption.

Independent of what the source of the inaccuracy is in many communication systems it is desirable to use correction mechanisms that reduce the level of inaccuracies to tens of microseconds or less.

In the above embodiments a learning sequence is applied once or at the start of a series of communication events. Alternatively the learning sequence might be based on timing synchronization information obtained and processed during regular communication synchronization events. In such embodiments it might be desirable to initially power up the slave device with a large margin of error and as more communication synchronization events have occurred and more precise timing information is available to the slave device dynamically reduce the margin of error to conserver power.

In short what has now been described includes a method of synchronization in a communication system comprising one master device and one or more slave devices to synchronize to a common timebase or master timer without the need to transmit accurate and real time master timer information. The communication system can be a wireless system such as an 802.11 wireless LAN. A device can be synchronized with respect to a first wireless network using a wireless module or interface and re use the same wireless module or interface to communicate with devices in a second wireless network. The device is the master device of the second wireless network and uses this technique to achieve synchronization in the second wireless network.

Also described is a synchronization method where the slave device sends a timestamp to the master and the master sends back correction information to the slave. The master device can compute error from a wireless module timing reference or some other timing reference. Computations can be done at the master device the slave device or in part at each of the devices.

With dynamic adjustment of offset if the time that has expired since last communication event is longer the system can dynamically adaptively adjust wake up offset to account for drift that may have occurred since the last communication event. A learning sequence might be provided to adjust for static slowly varying delays in the system such as by using a one time or periodically repeated learning sequence to derive static or slowly varying delays in the synchronization loop. Learning can be done with the frequency drift.

While the present invention has been described herein with reference to particular embodiments thereof a latitude of modification various changes and substitutions are intended in the present invention. In some instances features of the invention can be employed without a corresponding use of other features without departing from the scope of the invention as set forth. Therefore many modifications may be made to adapt a particular configuration or method disclosed without departing from the essential scope and spirit of the present invention. It is intended that the invention not be limited to the particular embodiments disclosed but that the invention will include all embodiments and equivalents falling within the scope of the claims.

