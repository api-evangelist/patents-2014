---

title: Systems and methods for accelerating malware analyses in automated execution environments
abstract: The disclosed computer-implemented method for accelerating malware analyzes in automated execution environments may include (1) monitoring a file that is undergoing a malware analysis in an automated execution environment, (2) while monitoring the file, detecting one or more behaviors exhibited by the file during the malware analysis in the automated execution environment, (3) determining, during the malware analysis, that the file exceeds a threshold level of suspicion based at least in part on the behaviors exhibited by the file, and then in response to determining that the file exceeds the threshold level of suspicion, (4) initiating a security action prior to reaching a scheduled completion of the malware analysis. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09479531&OS=09479531&RS=09479531
owner: Symantec Corporation
number: 09479531
owner_city: Mountain View
owner_country: US
publication_date: 20141212
---
Automated execution environments sometimes referred to as sandboxes are often used to facilitate controlled execution and or observation of suspicious and or unknown files. For example an automated execution environment may execute a file sample to observe whether the file sample exhibits any potentially malicious behaviors. By executing and observing the file sample in this way the automated execution environment may be able to determine that a file is malicious without exposing the underlying computing platform to certain risks associated with the malicious file.

Unfortunately while conventional automated execution environments may be able to determine that a file is malicious without exposing the underlying computing platform to certain risks such environments may still have certain drawbacks and or inefficiencies. For example a conventional automated execution environment may be configured to execute a file sample and observe the file sample s behaviors over a 30 minute run time. In this example not only may the cleanliness of the file sample remain unknown throughout the 30 minute run time but also the conventional automated execution environment may consume various computing resources that could be utilized by other processes during the 30 minute run time.

The instant disclosure therefore identifies and addresses a need for additional and improved systems and methods for accelerating malware analyses in automated execution environments.

As will be described in greater detail below the instant disclosure describes various systems and methods for accelerating malware analyses in automated execution environments based at least in part on suspicious behaviors exhibited by files being subjected to the malware analyses.

In one example a computer implemented method for accelerating malware analyses in automated execution environments may include 1 monitoring a file that is undergoing a malware analysis in an automated execution environment 2 while monitoring the file detecting one or more behaviors exhibited by the file during the malware analysis in the automated execution environment 3 determining during the malware analysis that the file exceeds a threshold level of suspicion based at least in part on the behaviors exhibited by the file and then in response to determining that the file exceeds the threshold level of suspicion 4 initiating a security action prior to reaching a scheduled completion of the malware analysis.

In one embodiment the behaviors exhibited by the file during the malware analysis may include 1 deleting a configuration file 2 modifying a configuration file 3 creating a registry entry 4 modifying a registry entry 5 binding a network port 6 establishing a connection with a network device 7 executing a remote shell and or 8 transmitting a request for a task to be performed by the file.

In one embodiment the security action may include terminating the malware analysis prior to reaching the scheduled completion of the malware analysis. In one embodiment the security action may include informing a management component that the file exceeds the threshold level of suspicion. In one embodiment informing the management component may include opening a network port. In one embodiment the security action may include modifying the malware analysis by subjecting the file to one or more tests not originally included in the malware analysis.

In some examples the computer implemented method may further include classifying the file as potentially malicious due at least in part to determining that the file exceeds the threshold level of suspicion. In some examples monitoring the file that is undergoing the malware analysis may include directing the automated execution environment to execute the file in connection with the malware analysis. In some examples monitoring the file that is undergoing the malware analysis may include monitoring the file by one or more monitor components such as 1 a user mode hook 2 a kernel mode hook 3 a packet capture component 4 a file system monitor and or 5 a network switch.

In one embodiment a system for implementing the above described method may include several modules stored in memory such as 1 a monitoring module that monitors a file that is undergoing a malware analysis in an automated execution environment 2 a detection module that while monitoring the file detects one or more behaviors exhibited by the file during the malware analysis in the automated execution environment 3 an analysis module that determines during the malware analysis that the file exceeds a threshold level of suspicion based at least in part on the behaviors exhibited by the file and 4 a security module that in response to the determination that the file exceeds the threshold level of suspicion initiates a security action prior to reaching a scheduled completion of the malware analysis. The system may also include at least one physical processor configured to execute the monitoring module the detection module the analysis module and the security module.

In some examples the above described method may be encoded as computer readable instructions on a non transitory computer readable medium. For example a computer readable medium may include one or more computer executable instructions that when executed by at least one processor of a computing device cause the computing device to 1 monitor a file that is undergoing a malware analysis in an automated execution environment 2 while monitoring the file detect one or more behaviors exhibited by the file during the malware analysis in the automated execution environment 3 determine during the malware analysis that the file exceeds a threshold level of suspicion based at least in part on the behaviors exhibited by the file and then in response to determining that the file exceeds the threshold level of suspicion 4 initiate a security action prior to reaching a scheduled completion of the malware analysis.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for accelerating malware analyses in automated execution environments. As will be explained in greater detail below rather than waiting for a malware analysis to reach a scheduled completion in an automated execution environment the systems and methods described herein may initiate a security action as soon as certain suspicious behaviors are detected during the malware analysis. By initiating a security action as soon as those suspicious behaviors are detected the systems and methods described herein may significantly reduce the amount of time needed to conclude that a file being executed by the automated execution environment is most likely malicious. As a result the systems and methods described herein may be able to improve the automated execution environment s performance and or make certain computing resources available to other processes and or another malware analysis.

The following will provide with reference to detailed descriptions of exemplary systems for accelerating malware analyses in automated execution environments. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device in communication with a server via a network . In one example computing device may include an automated execution environment that performs a malware analysis on a file . In this example computing device may be programmed with one or more of modules .

Additionally or alternatively server may include automated execution environment that performs a malware analysis on file . In this example server may also be programmed with one or more of modules .

As shown in server may include a management component that is notified in the event that file contains malware. In one example management component may monitor several instances of automated execution environments e.g. automated execution environment running on physical or virtual computing devices. In this example management component may receive notifications from such automated execution environments when files that have undergone malware analyses have been identified as containing malware. Management component may also receive suspected malware files from remote client devices distribute malware files to automated execution environments receive notifications when the suspected malware files are found to contain malware and or notify the client device that submitted the suspected malware file that the file that contains malware. Additionally or alternatively computing device may include management component that performs some or all of the described functions.

In one example computing device may include one or more monitor components that observe and or log behaviors exhibited by file in connection with the malware analysis performed on file . Additionally or alternatively server may include one or more monitor components that observe and or log behaviors exhibited by file in connection with the malware analysis performed on file . Examples of behaviors include without limitation deleting or modifying a configuration file creating or modifying a registry entry binding a network port establishing a connection with a network device executing a remote shell transmitting a request for a task to be performed by the file variations of one or more of the same combinations of one or more of the same or any other behaviors.

In one example one or more of modules may initiate and or perform a security action in response to a determination that file exceeds a threshold level of suspicion. Examples of security action include without limitation terminating the malware analysis prior to the ordinary and or scheduled completion time informing by e.g. opening a network port management component that the file has been found to contain malware subjecting the file to additional and or more thorough malware analyses due at least in part to the suspicion level of the file variations of one or more of the same combinations of one or more of the same or any other suitable security action.

In one embodiment one or more of modules from may when executed by at least one processor of computing device and or server enable computing device and or server to accelerate malware analyses in automated execution environments. For example and as will be described in greater detail below monitoring module may utilize monitor components to monitor file undergoing a malware analysis in automated execution environment . Detection module may while monitoring file detect one or more behaviors exhibited by file during the malware analysis in automated execution environment . Analysis module may during the malware analysis determine that file exceeds a threshold level of suspicion based at least in part on behaviors exhibited by file . Security module may then initiate security action prior to reaching the regularly scheduled completion of the malware analysis in response to the determination that file exceeds the threshold level of suspicion.

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems wearable devices e.g. smart watches smart glasses etc. gaming consoles combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Server generally represents any type or form of computing device capable of performing malware analyses on files and or observing computing activity in connection with malware analyses. Examples of server include without limitation application servers security servers web servers storage servers deduplication servers and or database servers configured to run certain software applications and or provide various security web storage deduplication and or database services.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between computing device and server .

Monitor components generally represent any type or form of device program and or mechanism that monitors observes and or logs computing activity occurring in connection with malware analyses. In one example monitor components may represent portions of monitoring module . In another example monitor components may be separate and distinct from monitoring module . Examples of monitor components include without limitation user mode hooks kernel mode hooks Packet CAPture PCAP components file system monitors network switches variations of one or more of the same combinations of one or more of the same or any other suitable monitor components.

As a specific example one of monitor components may represent a user mode hook that is internal to automated execution environment . Additionally or alternatively one of monitor components may represent a kernel mode hook that is internal to automated execution environment .

Although illustrated as portions of computing device in monitor components may also include and or represent portions of network and or server . For example one of monitor components may represent a PCAP component included in network and or server . Additionally or alternatively one of monitor components may represent a network switch included in network .

Automated execution environment generally represents any type or form of computing environment and or mechanism that facilitates controlled execution monitoring and or observation of file samples to determine whether such file samples contain malware. In one example automated execution environment may execute file to facilitate a malware analysis that involves monitoring and or observing the run time characteristics attributes and or behaviors of file . In this example automated execution environment may limit and or restrict certain resources such as files file systems memory locations and or network functionalities from being accessed and or used by file during the malware analysis. By limiting and or restricting such resources in this way automated execution environment may be able to facilitate the malware analysis without exposing the underlying computing platform to certain risks potentially associated with file .

File generally represents any type or form of file portion of a file and or file sample that includes data metadata and or information. In one example file may include one or more data segments that represent a complete file. In another example file may include one or more data segments that represent a file sample or portion selected from a complete file. Examples of file include without limitation executable files document files data files batch files archive files media files backup files library files compressed files scripts binary code machine code samples or portions of one or more of the same variations of one or more of the same combinations of one or more of the same or any other suitable file.

As illustrated in at step one or more of the systems described herein may monitor a file that is undergoing a malware analysis in an automated execution environment. For example monitoring module may as part of computing device and or server in monitor file that is undergoing a malware analysis in automated execution environment .

The systems described herein may perform step in a variety of ways and or contexts. In one example monitoring module may direct automated execution environment to execute file in connection with the malware analysis. For example monitoring module may identify file as being new unknown and or suspicious relative to a computing community such as a security vendor s customer base . In this example monitoring module may direct automated execution environment to execute file to facilitate a malware analysis that involves monitoring and or observing run time characteristics attributes and or behaviors of file .

In some examples monitoring module may monitor file undergoing the malware analysis based at least in part on one or more monitor components . As a specific example monitor components may include and or represent user mode hooks that record and or log application programming interface API calls within automated execution environment . In this example the user mode hooks may include and or represent code e.g. a jump instruction inserted at the beginning of certain API functions e.g. a connect function and or a listen function that are operable in user mode. This code sometimes referred to as a trampoline may temporarily transfer the flow of execution from those API functions to another memory location where additional code records and or logs any calls to those API functions. Upon recording and or logging API calls in this way the additional code may transfer the flow of execution back to the called API functions.

Additionally or alternatively monitor components may include and or represent kernel mode hooks that record and or log API calls within automated execution environment . In this example the kernel mode hooks may include and or represent code e.g. a jump instruction inserted at the beginning of certain Native API functions e.g. a WriteFile function and or a ReadFile function that are operable in kernel mode. This code may temporarily transfer the flow of execution from those Native API functions to another memory location where additional code records and or logs any calls to those Native API functions. Upon recording and or logging API calls in this way the additional code may transfer the flow of execution back to the called Native API functions.

As another example a monitor component within monitor components may include and or represent a PCAP component and or a network switch. In this example the PCAP component and or network switch may record and or log network traffic originating from server as a result of the execution of file by automated execution environment .

Returning to at step one or more of the systems described herein may while monitoring the file detect one or more behaviors exhibited by the file during the malware analysis in the automated execution environment. For example detection module may as part of computing device and or server in detect one or more behaviors exhibited by file during the malware analysis in automated execution environment . In this example the detected behaviors may indicate and or suggest that file includes malware.

Detection module may detect a variety of suspected malware behaviors exhibited by the file in a variety of ways and or contexts. In one example detection module may detect behaviors based at least in part on data collected by monitor components . For example detection module may analyze one or more logs and or records of computing activity maintained by monitor components in connection with the malware analysis. In this example the logs and or records may include evidence of behaviors exhibited by file during the malware analysis. Accordingly detection module may determine that file exhibited behaviors during the malware analysis by analyzing those logs and or records.

Although there are many varieties of malware designed for various malicious purposes virtually all exhibit certain behaviors directed to gaining unauthorized control of computing devices. In one example detection module may detect an attempt by file to delete or modify a configuration file. By deleting or modifying a configuration file file may gain control of a device program or a subsystem of the computing device s operating system.

In another example detection module may detect an attempt by file to create or modify a registry entry. As with deleting or modifying a configuration file by deleting or modifying a registry entry file may gain control of a device program or a subsystem of the operating system.

In a further example detection module may detect an attempt by file to bind a network port. By binding a network port file may initiate communication with a network device for example to exfiltrate sensitive data or information about the computing device executing file .

In an additional example detection module may detect an attempt by file to establish a connection with a network device. In this example after binding the network port file may attempt to use certain network protocols e.g. the Internet Protocol IP and or HyperText Transfer Protocol HTTP to communicate with network devices.

In another example detection module may detect an attempt by file to execute a remote shell. The term remote shell as used herein generally refers to any type or form of program that enables a user of one device to execute commands on another user s device and or execute commands as another user. By executing a remote shell file may enable a user and or program to remotely control the computing device. Examples of remote shells include without limitation WINDOWS REMOTE SHELL for MICROSOFT WINDOWS operating systems the rsh program for LINUX and UNIX operating systems variations of one or more of the same or any other suitable remote shell. In some contexts a terminal emulation program may act as a remote shell that facilitates data transmission and remote execution of a set of simple commands. For example the PuTTY terminal emulation program may be used to transmit information or permit remote control of the local computing device.

In another example detection module may detect an attempt by file to transmit a request for a task to be performed by file . Using any of the available means of communication or remote control file may request or receive a task to be performed on the computing device. The task may represent an attempt to gain control of computing devices inflict damage on computing devices and or obtain sensitive information from computing devices.

The behaviors described above represent a sample of potentially malicious behaviors exhibited by file and detected by detection module . Additionally or alternatively behaviors may include any type or form of behavior exhibited by file in an effort to gain control of computing devices inflict damage on computing devices and or obtain sensitive information from computing devices.

Returning to at step one or more of the systems described herein may during the malware analysis determine that the file exceeds a threshold level of suspicion based at least in part on the behaviors exhibited by the file. For example analysis module may as part of computing device and or server in determine that file exceeds a threshold level of suspicion based at least in part on behaviors exhibited by file during the malware analysis. As used herein the term threshold level of suspicion generally refers to any type or form of metric and or reference that represents a certain level or degree of suspicion in connection with a file s cleanliness. The threshold level of suspicion may be expressed as a percentage e.g. 90 percent that represents the level of certainty that a file is malicious and or constitutes a threat.

Analysis module may determine that the file exceeds a threshold level of suspicion in a variety of ways and or contexts. In one example analysis module may determine that file exceeds the threshold level of suspicion by observing behaviors strongly indicative of malware. For example analysis module may receive behavioral observations from detection module indicating that file in the first few seconds of execution searched the file system for the presence of a specific file to obtain a list of processes running in automated execution environment . Additionally or alternatively analysis module may receive behavioral observations from detection module indicating that file in the first few seconds of execution attempted to contact a Simple Mail Transfer Protocol SMTP server. Analysis module may recognize this timing and or sequence of behaviors as characteristic of a known variety of malware.

In another example analysis module may assign a threat score or value to file based at least in part on behaviors exhibited by file . For example analysis module may determine that file does not exhibit a pattern of behaviors recognizable as a known malware variant. However analysis module may determine that a suspected malware file that attempts to modify a specific configuration file has a 25 percent likelihood of being malware. Analysis module may further determine that a suspected malware file that attempts to modify a specific registry entry has a 30 percent likelihood of being malware. In the event that a suspected malware file exhibits a set of behaviors that when totaled exceed a certain threshold for example 50 percent analysis module may determine that the suspected malware file likely includes malware.

Returning to at step one or more of the systems described herein may initiate a security action prior to reaching a scheduled completion of the malware analysis in response to the determination that the file exceeds the threshold level of suspicion. For example security module may as part of computing device and or server in initiate a security action prior to reaching a scheduled completion of the malware analysis in response to the determination that file exceeds the threshold level of suspicion.

Security module may initiate one or more security actions in a variety of ways and or contexts. In one example security module may terminate the malware analysis prior to reaching the scheduled completion of the malware analysis. For example in the event that behaviors exhibited by file follow a pattern of a known malware variant automated execution environment may have little if any need to continue executing and or observing file until the scheduled completion of the malware analysis. As a result security module may direct automated execution environment to terminate the malware analysis as soon as behaviors are detected and or file exceeds the threshold level of suspicion during the malware analysis.

Terminating the malware analysis before its scheduled completion may prove advantageous in some contexts. For example automated malware analyses may usually take several minutes or even hours to perform to completion. In the event that a malware analysis is expected to take between 10 and 15 minutes to complete but detection module observes behaviors in the first 2 minutes of the malware analysis security module may initiate early termination of the malware analysis to classify file as malicious more expeditiously and or to free up resources for analyzing another suspected malware file.

In another embodiment the security action may include informing a management component that the file exceeds the threshold level of suspicion. For example security module may as part of computing device and or server in notify management component that behaviors exhibited by file exceed a threshold level of suspicion and or that file is malicious. Security module may elect to proceed with the malware analysis to completion for example to gather additional behavioral observations for file . Having been alerted that file contains malware management component may notify the user or malware detection client program that submitted file for malware analysis that file was found to contain malware during the malware analysis.

In some examples security module may inform the management component that that file contains malware by opening a network port. Because a malware file may recognize certain attempts to issue security alerts to notify other components about the file s malware the success of additional malware analyses may depend at least in part upon security module alerting management component in a way that file is unlikely to recognize as a security alert. For example opening a network port monitored by management component may represent a minimal form of communication that file is unlikely to recognize as a mechanism for informing management component that file has been categorized as malware.

In one embodiment the security action may include modifying the malware analysis by subjecting file to one or more tests not originally included in the malware analysis. For example in the event that analysis module determines that file contains a previously unknown form of malware security module may elect to continue the malware analysis and perform additional tests to obtain additional behavioral observations for file . In some examples classifying module may classify file as potentially malicious due at least in part to file exceeding the threshold level of suspicion.

As described above the systems and methods described herein may monitor a file undergoing malware analysis in an automated execution environment to determine whether the file exhibits behaviors consistent with malware. Once sufficient behavioral observations to characterize the file as malware have been gathered the systems and methods described herein may initiate a security action such as terminating the malware analysis notifying a management component that the file has been classified as malicious and or continuing the malware analysis and possibly performing more thorough analysis procedures beyond those previously scheduled . As a result the systems and methods described herein may reduce the time to disposition for malware analyses and or provide a more rapid response to clients submitting files for analysis.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of physical processing unit e.g. a hardware implemented central processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The term computer readable medium as used herein generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives tape drives and floppy disks optical storage media e.g. Compact Disks CDs Digital Video Disks DVDs and BLU RAY disks electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for accelerating malware analyses in automated execution environments.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example the modules and or data described herein may reside and or execute within a virtual machine. As used herein the term virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the term virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the term information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the term information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the term endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive suspected malware files to be transformed transform the suspected malware files to observations of suspected malware behavior output a result of the transformation to classify the suspected malware file as malicious use the result of the transformation to expedite reporting of the observed behaviors and store the result of the transformation to associate the suspected malware file with the observed behaviors. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms connected to and coupled to and their derivatives as used in the specification and claims are to be construed as permitting both direct and indirect i.e. via other elements or components connection. In addition the terms a or an as used in the specification and claims are to be construed as meaning at least one of. Finally for ease of use the terms including and having and their derivatives as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

