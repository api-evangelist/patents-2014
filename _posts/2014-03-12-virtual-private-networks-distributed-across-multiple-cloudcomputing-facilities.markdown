---

title: Virtual private networks distributed across multiple cloud-computing facilities
abstract: The current document discloses methods and systems for extending an internal network within a first cloud-computing facility to a second cloud-computing facility and using the extended internal network as a basis for creating virtual private clouds distributed across multiple cloud-computing facilities. In one implementation, a pool of IP addresses is allocated and distributed to end appliances of the first and second cloud-computing facilities. In this implementation, the internal network is extended via a secure tunnel between end appliances in the first and second cloud-computing facilities and the end appliances of the extended internal network are configured to route messages transmitted by a first member of the virtual private cloud executing on a first cloud-computing facility to a second member of the virtual private cloud executing on a second cloud-computing facility through the secure tunnel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09391801&OS=09391801&RS=09391801
owner: VMware, Inc.
number: 09391801
owner_city: Palo Alto
owner_country: US
publication_date: 20140312
---
This application is a continuation in part of U.S. application Ser. No. 13 966 094 filed Aug. 13 2013.

The present patent application is directed to virtual machine based computing and cloud computing and in particular to methods and systems for creating virtual private networks distributed across multiple cloud computing facilities.

The development and evolution of modern computing has in many ways been facilitated by the power of logical abstraction. Early computers were manually programmed by slow and tedious input of machine instructions into the computers memories. Over time assembly language programs and assemblers were developed in order to provide a level of abstraction namely assembly language programs above the machine instruction hardware interface level to allow programmers to more rapidly and accurately develop programs. Assembly language based operations are more easily encoded by human programmers than machine instruction based operations and assemblers provided additional features including assembly directives routine calls and a logical framework for program development. The development of operating systems provided yet another type of abstraction that provided programmers with logical easy to understand system call interfaces to computer hardware functionality. As operating systems developed additional internal levels of abstraction were created within operating systems including virtual memory implemented by operating system paging of memory pages between electronic memory and mass storage devices which provided easy to use linear memory address spaces much larger than could be provided by the hardware memory of computer systems. Additional levels of abstractions were created in the programming language domain with compilers developed for a wide variety of compiled languages that greatly advanced the ease of programming and the number and capabilities of programming tools with respect those provided by assemblers and assembly languages. Higher level scripting languages and special purpose interpreted languages provided even higher levels of abstraction and greater ease of application development in particular areas. Similarly block based and sector based interfaces to mass storage devices have been abstracted through many levels of abstraction to modern database management systems which provide for high available and fault tolerant storage of structured data that can be analyzed interpreted and manipulated through powerful high level query languages.

In many ways a modern computer system can be thought of as many different levels of abstractions along many different often interdependent dimensions. More recently powerful new levels of abstraction have been developed with respect to virtual machines which provide virtual execution environments for application programs and operating systems. Virtual machine technology essentially abstracts the hardware resources and interfaces of a computer system on behalf of one or multiple virtual machines each comprising one or more application programs and an operating system. Even more recently the emergence of cloud computing services can provide abstract interfaces to enormous collections of geographically dispersed data centers allowing computational service providers to develop and deploy complex Internet based services that execute on tens or hundreds of physical servers through abstract cloud computing interfaces.

Within virtual servers as well as physical servers virtual machines and virtual applications can be moved among multiple virtual or physical processors in order to facilitate load balancing and to collocate compatible virtual machines and virtual applications with respect to virtual and physical processors. Similarly virtual machines and virtual applications can be moved among the virtual servers within a virtual data center as well as among physical servers within the underlying physical hardware within which virtual data centers are constructed. Migration of virtual machines and virtual applications within virtual data centers can also be used for load balancing fault tolerance and high availability and for many other purposes. Designers developers vendors and users of virtualization technology continue to seek new facilities within emerging layers of virtualization for facilitating distributed execution across multiple cloud computing facilities.

The current document discloses methods and systems for creating virtual private networks across multiple cloud computing facilities. A virtual cloud connector server and virtual cloud connector nodes part of a distributed hybrid cloud infrastructure are used to setup configure and manage virtual private networks across a distributed cloud infrastructure managed by the virtual cloud connector server and virtual cloud connector nodes. Virtual private networks established through the virtual cloud connector server and virtual cloud connector nodes allow corporate resources in a public cloud to access protected resources in a corporate data center and corporate resources in a corporate data center to access protected corporate resources in a public cloud. The virtual private networks carry messages and datagrams over a secure tunnel.

As discussed above modern computing can be considered to be a collection of many different levels of abstraction above the physical computing hardware level that includes physical computer systems data storage systems and devices and communications networks. The present application is related to a multi cloud aggregation level of abstraction that provides homogenous cloud and heterogeneous cloud distributed management services each cloud generally an abstraction of a large number of virtual resource pools comprising processing storage and network resources each of which in turn can be considered to be a collection of abstractions above underlying physical hardware devices. The current document is directed to providing a straightforward and efficient method for the migration of virtual machines and virtual applications among virtual data centers within different cloud computing facilities at the cloud computing and virtual data center levels of abstraction.

The term abstraction is not in any way intended to mean or suggest an abstract idea or concept. Computational abstractions are tangible physical interfaces that are implemented ultimately using physical computer hardware data storage devices and communications systems. Instead the term abstraction refers in the current discussion to a logical level of functionality encapsulated within one or more concrete tangible physically implemented computer systems with defined interfaces through which electronically encoded data is exchanged process execution launched and electronic services are provided. Interfaces may include graphical and textual data displayed on physical display devices as well as computer programs and routines that control physical computer processors to carry out various tasks and operations and that are invoked through electronically implemented application programming interfaces APIs and other electronically implemented interfaces. There is a tendency among those unfamiliar with modern technology and science to misinterpret the terms abstract and abstraction when used to describe certain aspects of modern computing. For example one frequently encounters assertions that because a computational system is described in terms of abstractions functional layers and interfaces the computational system is somehow different from a physical machine or device. Such allegations are unfounded. One only needs to disconnect a computer system or group of computer systems from their respective power supplies to appreciate the physical machine nature of complex computer technologies. One also frequently encounters statements that characterize a computational technology as being only software and thus not a machine or device. Software is essentially a sequence of encoded symbols such as a printout of a computer program or digitally encoded computer instructions sequentially stored in a file on an optical disk or within an electromechanical mass storage device. Software alone can do nothing. It is only when encoded computer instructions are loaded into an electronic memory within a computer system and executed on a physical processor that so called software implemented functionality is provided. The digitally encoded computer instructions are an essential control component of processor controlled machines and devices no less essential than a cam shaft control system in an internal combustion engine. Multi cloud aggregations cloud computing services virtual machine containers and virtual machines communications interfaces and many of the other topics discussed below are tangible physical components of physical electro optical mechanical computer systems.

Of course there are many different types of computer system architectures that differ from one another in the number of different memories including different types of hierarchical cache memories the number of processors and the connectivity of the processors with other system components the number of internal communications busses and serial links and in many other ways. However computer systems generally execute stored programs by fetching instructions from memory and executing the instructions in one or more processors. Computer systems include general purpose computer systems such as personal computers PCs various types of servers and workstations and higher end mainframe computers but may also include a plethora of various types of special purpose computing devices including data storage systems communications routers network nodes tablet computers and mobile telephones.

Until recently computational services were generally provided by computer systems and data centers purchased configured managed and maintained by service provider organizations. For example an e commerce retailer generally purchased configured managed and maintained a data center including numerous web servers back end computer systems and data storage systems for serving web pages to remote customers receiving orders through the web page interface processing the orders tracking completed orders and other myriad different tasks associated with an e commerce enterprise.

Cloud computing facilities are intended to provide computational bandwidth and data storage services much as utility companies provide electrical power and water to consumers. Cloud computing provides enormous advantages to small organizations without the resources to purchase manage and maintain in house data centers. Such organizations can dynamically add and delete virtual computer systems from their virtual data centers within public clouds in order to track computational bandwidth and data storage needs rather than purchasing sufficient computer systems within a physical data center to handle peak computational bandwidth and data storage demands. Moreover small organizations can completely avoid the overhead of maintaining and managing physical computer systems including hiring and periodically retraining information technology specialists and continuously paying for operating system and database management system upgrades. Furthermore cloud computing interfaces allow for easy and straightforward configuration of virtual computing facilities flexibility in the types of applications and operating systems that can be configured and other functionalities that are useful even for owners and administrators of private cloud computing facilities used by a single organization.

While the execution environments provided by operating systems have proved to be an enormously successful level of abstraction within computer systems the operating system provided level of abstraction is nonetheless associated with difficulties and challenges for developers and users of application programs and other higher level computational entities. One difficulty arises from the fact that there are many different operating systems that run within various different types of computer hardware. In many cases popular application programs and computational systems are developed to run on only a subset of the available operating systems and can therefore be executed within only a subset of the various different types of computer systems on which the operating systems are designed to run. Often even when an application program or other computational system is ported to additional operating systems the application program or other computational system can nonetheless run more efficiently on the operating systems for which the application program or other computational system was originally targeted. Another difficulty arises from the increasingly distributed nature of computer systems. Although distributed operating systems are the subject of considerable research and development efforts many of the popular operating systems are designed primarily for execution on a single computer system. In many cases it is difficult to move application programs in real time between the different computer systems of a distributed computer system for high availability fault tolerance and load balancing purposes. The problems are even greater in heterogeneous distributed computer systems which include different types of hardware and devices running different types of operating systems. Operating systems continue to evolve as a result of which certain older application programs and other computational entities may be incompatible with more recent versions of operating systems for which they are targeted creating compatibility issues that are particularly difficult to manage in large distributed systems.

For all of these reasons a higher level of abstraction referred to as the virtual machine has been developed and evolved to further abstract computer hardware in order to address many difficulties and challenges associated with traditional computing systems including the compatibility issues discussed above. illustrates one type of virtual machine and virtual machine execution environment. uses the same illustration conventions as used in . In particular the computer system in includes the same hardware layer as the hardware layer shown in . However rather than providing an operating system layer directly above the hardware layer as in the virtualized computing environment illustrated in features a virtualization layer that interfaces through a virtualization layer hardware layer interface equivalent to interface in to the hardware. The virtualization layer provides a hardware like interface to a number of virtual machines such as virtual machine executing above the virtualization layer in a virtual machine layer . Each virtual machine includes one or more application programs or other higher level computational entities packaged together with an operating system such as application and operating system packaged together within virtual machine . Each virtual machine is thus equivalent to the operating system layer and application program layer in the general purpose computer system shown in . Each operating system within a virtual machine interfaces to the virtualization layer interface rather than to the actual hardware interface . The virtualization layer partitions hardware resources into abstract virtual hardware layers to which each operating system within a virtual machine interfaces. The operating systems within the virtual machines in general are unaware of the virtualization layer and operate as if they were directly accessing a true hardware interface. The virtualization layer ensures that each of the virtual machines currently executing within the virtual environment receive a fair allocation of underlying hardware resources and that all virtual machines receive sufficient resources to progress in execution. The virtualization layer interface may differ for different operating systems. For example the virtualization layer is generally able to provide virtual hardware interfaces for a variety of different types of computer hardware. This allows as one example a virtual machine that includes an operating system designed for a particular computer architecture to run on hardware of a different architecture. The number of virtual machines need not be equal to the number of physical processors or even a multiple of the number of processors. The virtualization layer includes a virtual machine monitor module that virtualizes physical processors in the hardware layer to create virtual processors on which each of the virtual machines executes. For execution efficiency the virtualization layer attempts to allow virtual machines to directly execute non privileged instructions and to directly access non privileged registers and memory. However when the operating system within a virtual machine accesses virtual privileged instructions virtual privileged registers and virtual privileged memory through the virtualization layer interface the accesses may result in execution of virtualization layer code to simulate or emulate the privileged resources. The virtualization layer additionally includes a kernel module that manages memory communications and data storage machine resources on behalf of executing virtual machines. The kernel for example may maintain shadow page tables on each virtual machine so that hardware level virtual memory facilities can be used to process memory accesses. The kernel may additionally include routines that implement virtual communications and data storage devices as well as device drivers that directly control the operation of underlying hardware communications and data storage devices. Similarly the kernel virtualizes various other types of I O devices including keyboards optical disk drives and other such devices. The virtualization layer essentially schedules execution of virtual machines much like an operating system schedules execution of application programs so that the virtual machines each execute within a complete and fully functional virtual hardware layer.

A virtual machine or virtual application described below is encapsulated within a data package for transmission distribution and loading into a virtual execution environment. One public standard for virtual machine encapsulation is referred to as the open virtualization format OVF . The OVF standard specifies a format for digitally encoding a virtual machine within one or more data files. illustrates an OVF package. An OVF package includes an OVF descriptor an OVF manifest an OVF certificate one or more disk image files and one or more resource files . The OVF package can be encoded and stored as a single file or as a set of files. The OVF descriptor is an XML document that includes a hierarchical set of elements each demarcated by a beginning tag and an ending tag. The outermost or highest level element is the envelope element demarcated by tags and . The next level element includes a reference element that includes references to all files that are part of the OVF package a disk section that contains meta information about all of the virtual disks included in the OVF package a networks section that includes meta information about all of the logical networks included in the OVF package and a collection of virtual machine configurations which further includes hardware descriptions of each virtual machine . There are many additional hierarchical levels and elements within a typical OVF descriptor. The OVF descriptor is thus a self describing XML file that describes the contents of an OVF package. The OVF manifest is a list of cryptographic hash function generated digests of the entire OVF package and of the various components of the OVF package. The OVF certificate is an authentication certificate that includes a digest of the manifest and that is cryptographically signed. Disk image files such as disk image file are digital encodings of the contents of virtual disks and resource files are digitally encoded content such as operating system images. A virtual machine or a collection of virtual machines encapsulated together within a virtual application can thus be digitally encoded as one or more files within an OVF package that can be transmitted distributed and loaded using well known tools for transmitting distributing and loading files. A virtual appliance is a software service that is delivered as a complete software stack installed within one or more virtual machines that is encoded within an OVF package.

The advent of virtual machines and virtual environments has alleviated many of the difficulties and challenges associated with traditional general purpose computing. Machine and operating system dependencies can be significantly reduced or entirely eliminated by packaging applications and operating systems together as virtual machines and virtual appliances that execute within virtual environments provided by virtualization layers running on many different types of computer hardware. A next level of abstraction referred to as virtual data centers or virtual infrastructure provide a data center interface to virtual data centers computationally constructed within physical data centers. illustrates virtual data centers provided as an abstraction of underlying physical data center hardware components. In a physical data center is shown below a virtual interface plane . The physical data center consists of a virtual data center management server and any of various different computers such as PCs on which a virtual data center management interface may be displayed to system administrators and other users. The physical data center additionally includes generally large numbers of server computers such as server computer that are coupled together by local area networks such as local area network that directly interconnects server computer and and a mass storage array . The physical data center shown in includes three local area networks and that each directly interconnects a bank of eight servers and a mass storage array. The individual server computers such as server computer each includes a virtualization layer and runs multiple virtual machines. Different physical data centers may include many different types of computers networks data storage systems and devices connected according to many different types of connection topologies. The virtual data center abstraction layer a logical abstraction layer shown by a plane in abstracts the physical data center to a virtual data center comprising one or more resource pools such as resource pools one or more virtual data stores such as virtual data stores and one or more virtual networks. In certain implementations the resource pools abstract banks of physical servers directly interconnected by a local area network.

The virtual data center management interface allows provisioning and launching of virtual machines with respect to resource pools virtual data stores and virtual networks so that virtual data center administrators need not be concerned with the identities of physical data center components used to execute particular virtual machines. Furthermore the virtual data center management server includes functionality to migrate running virtual machines from one physical server to another in order to optimally or near optimally manage resource allocation provide fault tolerance and high availability by migrating virtual machines to most effectively utilize underlying physical hardware resources to replace virtual machines disabled by physical hardware problems and failures and to ensure that multiple virtual machines supporting a high availability virtual appliance are executing on multiple physical computer systems so that the services provided by the virtual appliance are continuously accessible even when one of the multiple virtual appliances becomes compute bound data access bound suspends execution or fails. Thus the virtual data center layer of abstraction provides a virtual data center abstraction of physical data centers to simplify provisioning launching and maintenance of virtual machines and virtual appliances as well as to provide high level distributed functionalities that involve pooling the resources of individual physical servers and migrating virtual machines among physical servers to achieve load balancing fault tolerance and high availability.

The distributed services include a distributed resource scheduler that assigns virtual machines to execute within particular physical servers and that migrates virtual machines in order to most effectively make use of computational bandwidths data storage capacities and network capacities of the physical data center. The distributed services further include a high availability service that replicates and migrates virtual machines in order to ensure that virtual machines continue to execute despite problems and failures experienced by physical hardware components. The distributed services also include a live virtual machine migration service that temporarily halts execution of a virtual machine encapsulates the virtual machine in an OVF package transmits the OVF package to a different physical server and restarts the virtual machine on the different physical server from a virtual machine state recorded when execution of the virtual machine was halted. The distributed services also include a distributed backup service that provides centralized virtual machine backup and restore.

The core services provided by the VDC management server include host configuration virtual machine configuration virtual machine provisioning generation of virtual data center alarms and events ongoing event logging and statistics collection a task scheduler and a resource management module. Each physical server also includes a host agent virtual machine through which the virtualization layer can be accessed via a virtual infrastructure application programming interface API . This interface allows a remote administrator or user to manage an individual server through the infrastructure API. The virtual data center agents access virtualization layer server information through the host agents. The virtual data center agents are primarily responsible for offloading certain of the virtual data center management server functions specific to a particular physical server to that physical server. The virtual data center agents relay and enforce resource allocations made by the VDC management server relay virtual machine provisioning and configuration change commands to host agents monitor and collect performance statistics alarms and events communicated to the virtual data center agents by the local host agents through the interface API and to carry out other similar virtual data management tasks.

The virtual data center abstraction provides a convenient and efficient level of abstraction for exposing the computational resources of a cloud computing facility to cloud computing infrastructure users. A cloud director management server exposes virtual resources of a cloud computing facility to cloud computing infrastructure users. In addition the cloud director introduces a multi tenancy layer of abstraction which partitions VDCs into tenant associated VDCs that can each be allocated to a particular individual tenant or tenant organization both referred to as a tenant. A given tenant can be provided one or more tenant associated VDCs by a cloud director managing the multi tenancy layer of abstraction within a cloud computing facility. The cloud services interface in exposes a virtual data center management interface that abstracts the physical data center.

Considering the VDC server and cloud director layers of abstraction can be seen as discussed above to facilitate employment of the virtual data center concept within private and public clouds. However this level of abstraction does not fully facilitate aggregation of single tenant and multi tenant virtual data centers into heterogeneous or homogeneous aggregations of cloud computing facilities.

Client systems may include any of many types of processor controlled devices including tablet computers laptop computers mobile smart phones and other such processor controlled devices. These various types of clients may include only a subset of the components included in a desktop personal component as well components not generally included in desktop personal computers.

Electronic communications between computer systems generally comprises packets of information referred to as datagrams transferred from client computers to server computers and from server computers to client computers. In many cases the communications between computer systems is commonly viewed from the relatively high level of an application program which uses an application layer protocol for information transfer. However the application layer protocol is implemented on top of additional layers including a transport layer Internet layer and link layer. These layers are commonly implemented at different levels within computer systems. Each layer is associated with a protocol for data transfer between corresponding layers of computer systems. These layers of protocols are commonly referred to as a protocol stack. In a representation of a common protocol stack is shown below the interconnected server and client computers and . The layers are associated with layer numbers such as layer number associated with the application layer . These same layer numbers are used in the depiction of the interconnection of the client computer with the server computer such as layer number associated with a horizontal dashed line that represents interconnection of the application layer of the client computer with the applications services layer of the server computer through an application layer protocol. A dashed line represents interconnection via the application layer protocol in because this interconnection is logical rather than physical. Dashed line represents the logical interconnection of the operating system layers of the client and server computers via a transport layer. Dashed line represents the logical interconnection of the operating systems of the two computer systems via an Internet layer protocol. Finally links and and cloud together represent the physical communications media and components that physically transfer data from the client computer to the server computer and from the server computer to the client computer. These physical communications components and media transfer data according to a link layer protocol. In a second table is aligned with the table that illustrates the protocol stack includes example protocols that may be used for each of the different protocol layers. The hypertext transfer protocol HTTP may be used as the application layer protocol the transmission control protocol TCP may be used as the transport layer protocol the Internet protocol IP may be used as the Internet layer protocol and in the case of a computer system interconnected through a local Ethernet to the Internet the Ethernet IEEE 802.3u protocol may be used for transmitting and receiving information from the computer system to the complex communications components of the Internet. Within cloud which represents the Internet many additional types of protocols may be used for transferring the data between the client computer and server computer.

Consider the sending of a message via the HTTP protocol from the client computer to the server computer. An application program generally makes a system call to the operating system and includes in the system call an indication of the recipient to whom the data is to be sent as well as a reference to a buffer that contains the data. The data and other information are packaged together into one or more HTTP datagrams such as datagram . The datagram may generally include a header as well as the data encoded as a sequence of bytes within a block of memory. The header is generally a record composed of multiple byte encoded fields. The call by the application program to an application layer system call is represented in by solid vertical arrow . The operating system employs a transport layer protocol such as TCP to transfer one or more application layer datagrams that together represent an application layer message. In general when the application layer message exceeds some threshold number of bytes the message is sent as two or more transport layer messages. Each of the transport layer messages includes a transport layer message header and an application layer datagram . The transport layer header includes among other things sequence numbers that allow a series of application layer datagrams to be reassembled into a single application layer message. The transport layer protocol is responsible for end to end message transfer independent of the underlying network and other communications subsystems and is additionally concerned with error control segmentation as discussed above flow control congestion control application addressing and other aspects of reliable end to end message transfer. The transport layer datagrams are then forwarded to the Internet layer via system calls within the operating system and are embedded within Internet layer datagrams each including an Internet layer header and a transport layer datagram. The Internet layer of the protocol stack is concerned with sending datagrams across the potentially many different communications media and subsystems that together comprise the Internet. This involves routing of messages through the complex communications systems to the intended destination. The Internet layer is concerned with assigning unique addresses known as IP addresses to both the sending computer and the destination computer for a message and routing the message through the Internet to the destination computer. Internet layer datagrams are finally transferred by the operating system to communications hardware such as a NIC which embeds the Internet layer datagram into a link layer datagram that includes a link layer header and generally includes a number of additional bytes appended to the end of the Internet layer datagram. The link layer header includes collision control and error control information as well as local network addresses. The link layer packet or datagram is a sequence of bytes that includes information introduced by each of the layers of the protocol stack as well as the actual data that is transferred from the source computer to the destination computer according to the application layer protocol.

An endpoint and encapsulates the information and logic needed by a service application to receive requests from service consumers and respond to those requests on the server side and encapsulate the information and logic needed by a client to transmit requests to a remote service application and receive responses to those requests. Endpoints can be defined either programmatically or in Extensible Markup Language XML configuration files. An endpoint logically consists of an address represented by an endpoint address class containing a universal resource identifier URI property and an authentication property a service contract and a binding that specifies the identities and orders of various protocol channels and the transport channel within the communications stack underlying the endpoint and overlying the various lower operating system or guest operating system layers and the NIC hardware. The contract specifies a set of operations or methods supported by the endpoint. The data type of each parameter or return value in the methods associated with an endpoint are associated with a data contract attribute that specifies how the data type is serialized and deserialized. Each protocol channel represents one or more protocols applied to a message or packet to achieve one of various different types of goals including security of data within the message reliability of message transmission and delivery message formatting and other such goals. The transport channel is concerned with transmission of data streams or datagrams through remote computers and may include error detection and correction flow control congestion control and other such aspects of data transmission. Well known transport protocols include the hypertext transport protocol HTTP the transmission control protocol TCP the user datagram protocol UDP and the simple network management protocol SNMP . In general lower level communications tasks including Internet protocol addressing and routing are carried out within the operating system or operating system and virtualization layers and .

The Open Systems Interconnection OSI model is often used to describe network communications. The OSI model includes seven different layers including 1 a physical layer L1 that describes a physical communications component including a communications medium and characteristics of the signal transmitted through the medium 2 a data link layer L2 that describes datagram exchange over the L1 layer and physical address 3 a network layer L3 that describes packet and datagram exchange through the L2 layer including oath determination and logical addressing 4 a transport layer L4 that describes end to end connection of two communicating entities reliability and flow control 5 a sessions layer L5 that describes management of sessions or multi packet data transmission contexts 6 a presentation layer L6 that describes data representation data encryption and machine independent data and an application layer L7 that describes the interconnection of applications including client and server applications.

Just as physical data storage devices and physical servers are virtualized by a virtualization layer the networking resources within a physical data center are also virtualized by a virtualization layer to provide various types of virtualized networking facilities. illustrates virtualization of networking facilities within a physical data center. As shown in a physical data center may include a large number of enclosures containing multiple servers such as enclosure and network attached data storage subsystems linked together by several local area networks and interconnected through bridging switching firewall and load balancing appliances connected to a VPN gateway appliance through which the physical data center is interconnected with the Internet and other wide area networks. The virtualization layer as discussed above creates multiple virtual data centers and that execute within the physical data center each having one or more internal organization networks and that allow intercommunication between virtual machines and vApps executing within the data centers and that may also provide interconnection with remote computational entities via virtual external networks and that interconnect the internal organization virtual networks and with the Internet and other wide area networks. In addition there may be internal networks including networks and within individual vApps. Isolated virtual internal vApp networks such as internal virtual network allow the virtual machines within a vApp to intercommunicate while other types of virtual internal networks including routed virtual internal networks such as virtual network provide connectivity between one or more virtual machines executing within the vApp to other virtual machines executing within a given virtual data center as well as remote machines via the virtual organization network and virtual external network . The virtual internal routed network is associated with an edge virtual appliance that runs as a virtual machine within the virtual data center. The edge appliance provides a firewall isolation of the subnetwork within the vApp from the organization of virtual network and other networks to which it is connected and a variety of networking services including virtual private network connections to other edge appliances network address translation to allow virtual machines within the vApp to intercommunicate with remote computational entities and dynamic host configuration protocol facilities DHCP . Virtual private networks employ encryption and other techniques to create an isolated virtual network interconnecting two or more computational entities within one or more communications networks including local area networks and wide area networks such as the Internet. One type of VPN is based on the secure sockets layer and is referred to as the secure socket layer virtual private network SSL VPN . Another type of VPN is referred to as an Internet protocol security VPN IPsec .

In general an edge appliance isolates an interior subnetwork on one side of the edge appliance from an exterior network such as the Internet. Computational entities such as virtual machines within the interior subnetwork can use local network addresses that are mapped by the edge appliance to global Internet addresses in order to provide connectivity between the edge appliance and computational entities within the interior subnetwork to remote computer systems. An edge appliance essentially multiplex a small number of global network addresses among the computational entities within the subnetwork in many cases using pools of port numbers distributed within the internal subnetwork. Just as edge appliance provides gateway services and isolation to the computational entities interconnected by a virtual routed interior network within a vApp additional edge appliances and may provide similar gateway services to all the computational entities interconnected by an organization virtual network and within virtual data centers and respectively.

Each VDC and includes a virtual organization network and respectively. Each virtualization organization network interconnects to a virtual external network and respectively through an organization edge appliance and respectively. Each VDC also includes a VCC node and respectively. The virtual external networks are implemented within one or more physical networks that provide interconnection of the external networks through the Internet . VDC within the first cloud includes two vApps and each with an internal virtual routed vApp network and respectively that each interconnects with the virtual organization network through an edge appliance and respectively. Each vApp and includes three virtual machines and respectively. The second VDC in the second cloud also includes two vApps and each with an internal virtual routed vApp network and respectively that each interconnects with the virtual organization network through an edge appliance and respectively. Each vApp and includes three virtual machines and respectively. Both the VDC in the first cloud and the VDC in the target cloud include catalog facilities and respectively that allows the organization to publish vApp templates and VM templates for access by VDCs in remote clouds. The multi cloud resources are managed by a VCC server similar to the VCC server in in cooperation with VCC nodes and . The VCC server may be located in either of the two cloud computing facilities and or in another cloud computing facility or location not shown in .

The Internet Protocol Security IPsec protocol is a communications protocol for securing IP communications. IPsec authenticates and encrypts each IP packet of a communication session with information for mutual authentication as well as encryption keys exchanged between communications endpoints prior to initiation of a communications session. The endpoints can be host computers and or security gateways. IPsec supports creation of Layer 2 tunnels to support virtual private networks. Higher level multi packet messages handled as Layer 3 entities by higher level protocol layers are protected by the Layer 2 encryption of datagrams without modifications to the higher level protocols.

The internal IP addresses used by VMs for communication with other VMs within the virtual private network are distributed to the VMs from a pool of internal IP addresses allocated to the virtual private network by a VCC server through VCC nodes to organization edge appliances and as well as to edge appliances associated with vApps and VMs that handle packet or datagram traffic on behalf of the VMs that participate in the virtual private network. The organization edge appliances and or edge appliances associated with vApps and VMs that handle packet or datagram traffic on behalf of the VMs that participate in the virtual private network also include various encoded policies and rules that govern how the virtual private network operates as well as routing tables that are used to direct datagrams or packets to their destinations along paths of local and wide area networks linked through routers bridges and other computational devices.

In SC the datagram is routed through the VDC virtual network or networks to organization edge appliance . The organization edge appliance determines from internal routing tables that internal VPN address a is located in a remote cloud computing facility and therefore needs to be transmitted to that remote cloud computing facility through the IPsec tunnel. As a first step in IPsec tunnel transmission the datagram is encrypted as shown by arrow and cross hatched encrypted datagram . An encryption key associated with the IPsec tunnel is employed to encrypt the datagram. Next as shown in the encrypted datagram is packaged within a carrier datagram for transmission through the Internet to the remote cloud computing facility. The carrier datagram includes a header that in turn includes a destination address and a source address . The destination address A directs the carrier datagram to organization edge appliance in the remote cloud computing facility and the source address A indicates that organization edge appliance the source of the carrier datagram. In the carrier datagram has been transmitted through the Internet to organization edge appliance where as indicated by arrow encrypted datagram is extracted from the carrier datagram . Encrypted datagram is then decrypted using a decryption key associated with the IPsec tunnel as indicated by arrow to recover the original datagram transmitted from VM . Organization edge appliance then uses an internal routing table that includes entries for VPN addresses to direct the datagram through an appropriate internal virtual network to an edge appliance associated with the destination VM or a vApp that includes the destination VM .

The administration interface additionally includes a configuration task selection window . This allows an administrator to select a configuration task to carry out with respect to an organization s distributed cloud based resources. In a user has moved a cursor over the configuration task selection window and input a mouse click resulting is display of a drop down list of configuration tasks for selection. In the user moves a cursor to select the inter cloud VPN selection . In as a result of user selection of the inter cloud VPN task input entry features are displayed to allow a user to indicate the organization networks within VDCs to be connected by a new VPN. Some administration interface implementations may allow drag and drop style input while others may involve typing at least a portion of various identifiers into the input features.

Following administrator identification of the organization networks to be interconnected by a VPN the administration interface as shown in indicates to the administrator that an IPsec tunnel has not yet been created to connect the two organization edge appliances associated with the two organization networks to be interconnected by a VPN and requests the administrator to choose to create a new tunnel or abandon the operation. After the administrator indicates a desire to continue the administration interface as shown in provides a VPN membership entry window that allows as shown in the user to drag and drop or type in the various VMs to be interconnected by a new VPN. When the VPN membership has been specified the user clicks a done input feature . At this point the administration interface as shown in displays a list of various configuration choices and policy choices which the user can select for the new VPN. Any of many different types of rules configuration parameters and policies may be specified for the VPN and enforced by edge appliances including maximum data transfers per unit time number of retries for failed transmissions types of encryption and other security measures to use whether or not messages can be transmitted to a set of destinations only some of which are VPN members and other such rules configuration parameters and policies. The interface for specification of additional configuration information rules and policies may be complex and may allow for creation of new policies and rules in addition to selection from already existing policies and rules.

Although the present invention has been described in terms of particular embodiments it is not intended that the invention be limited to these embodiments. Modifications within the spirit of the invention will be apparent to those skilled in the art. For example an inter cloud VPN creation and configuration utility may implemented in many different ways by varying any of many different design implementation and deployment parameters including the virtualization layer in which the inter cloud VPN creation and configuration utility operation is implemented programming language control structures data structures modular organization and other such design and implementation parameters. In the above discussed implementation of a inter cloud VPN creation and configuration utility only two organization networks are interconnected by an inter cloud VPN. In alternative implementations more than two organization networks can be interconnected through two or more IPsec tunnels by inter cloud VPNs. In certain cases a full pair wise interconnection of secure tunnels is made while in other cases the organization networks in different cloud computing facilities may be interconnected in star chain or various graph like or tree like topologies. In alternative implementations an SSL VPN tunnel may be used instead of an IPsec tunnel to securely interconnect virtual organization networks.

It is appreciated that the previous description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the present disclosure. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the disclosure. Thus the present disclosure is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

