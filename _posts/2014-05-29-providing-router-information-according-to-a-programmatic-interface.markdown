---

title: Providing router information according to a programmatic interface
abstract: A provider network may implement providing router information according to a programmatic interface. A plurality of routers may be implemented as part of provider network. Clients that utilize these routers may wish to obtain information specific to one or more routers in order to configure communications utilizing the particular router. A request may be received for the information from the client that is formatted according to the programmatic interface that is platform-independent. The requests may be maintained along with other received requests until selected for servicing according to a priority scheme. The request may be translated into one or more versions of the request that are formatted according to a interfaces specific to the one or more routers. The translated one or more versions of the request may be sent to the one or more routers to obtain the information from the one or more routers. The information may then be provided to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09059941&OS=09059941&RS=09059941
owner: Amazon Technologies, Inc.
number: 09059941
owner_city: Reno
owner_country: US
publication_date: 20140529
---
The advent of virtualization technologies for commodity hardware has provided benefits with respect to managing large scale computing resources for many customers with diverse needs allowing various computing resources to be efficiently and securely shared by multiple customers. For example virtualization technologies may allow a single physical computing machine to be shared among multiple users by providing each user with one or more virtual machines hosted by the single physical computing machine with each virtual machine being a software simulation acting as a distinct logical computing system that provides users with the illusion that they are the sole operators and administrators of a given hardware computing resource which also provides application isolation and security among the various virtual machines. As another example virtualization technologies may allow data storage hardware to be shared among multiple users by providing each user with a virtualized data store which may be distributed across multiple data storage devices with each such virtualized data store acting as a distinct logical data store that provides users with the illusion that they are the sole operators and administrators of the data storage resource.

Virtualization technologies have given rise to provider networks which offer various services or resources to customers via network connections. As the amount of data transactions and other interactions with provider networks increase so too do the various connection requirements for customers of provider networks. Some customers may wish to take advantage of private or direct connections to provider networks rather than utilizing publicly available connections e.g. via the Internet . In this way the connections between these customers and provider networks can be optimized for performance and increased utilization of provider network resources. However as provider networks adapt networking infrastructure customers may have to modify or change their private connections. As part of keeping current with provider networks customers may need to obtain information about the underlying provider network infrastructure in order to continue to take advantage of their private connections.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

The systems and methods described herein may implement providing router information according to a programmatic interface according to some embodiments. A provider network may supply clients operators or other customers with access to and or control of one or more computing resources. These resources may include various types of computing systems or devices configured for communication over a network. For example in some embodiments a provider network may provide virtual computing resources to clients users or other type of customers in the form of reserved compute instances e.g. a virtual machine acting as a distinct logical computing system that provides users with the illusion that they are the sole operators and administrators of a given hardware computing resource . Clients of the provider network may reserve i.e. purchase or buy one or more compute resources such as compute instances or utilize other resources to perform various functions services techniques and or applications.

Provider networks however may implement many different components systems or devices to provide access to the various services offered by the provider network. In various embodiments large numbers of heterogeneous routers may be implemented in order to provide access to a provider network. As part of providing access however some clients may have to configure connections to the provider information based on a particular router. Information about the particular router may thus be useful and or necessary to properly or efficiently manage or operate a connection to a provider network. For example if a connection is experiencing connection problems certain router information about the specific router that the connection is established with may be useful to troubleshoot and identify a corrective action. However as different routers implement different types of interfaces for obtaining router information it may be difficult for clients of a provider network to obtain the information needed to configure manage or operate the connection as needed. A programmatic interface may allow clients to obtain router information from a router data service without having to understand how the interfaces of specific routers in the provider network are implemented.

Provider network may include the hardware e.g. modems routers switches load balancers proxy servers etc. and software e.g. protocol stacks accounting software firewall security software etc. necessary to establish a networking links between different components of provider network as well as external networks e.g. the Internet . In some embodiments provider network may employ an Internet Protocol IP tunneling technology to provide an overlay network via which encapsulated packets may be passed through the provider network using tunnels. However in some embodiments clients may access the underlying network via private or physical connections. In clients and may access provider network via established private connections illustrated by the broad arrows . Routers may facilitate these private or physical connections. For example client connects via router . Clients and connect through router which is connected to provider network via router . Client may connect via two different routers and respectively. Please note that the previous discussion is not intended to be limiting as to the varying combinations of connections that may be made between clients and routers.

Clients may encompass any type of client configurable to manage operate or configure connections to provider network . For example a given client may implement various tools scripts or other modules that may be able to configure a respective connection test the connection and start or terminate the connection. As part of managing the connections clients may also obtain router information about specific routers. Thus client may obtain information about router by sending requests for router information to router data service which may be formatted according to programmatic interface which is platform independent. Router data service may query the router according to the specific interface for the router and provide the requested information back to client

In order submit requests to router data service a given client may include a suitable version of a web browser or may include a plug in module or other type of code module configured to execute as an extension to or within an execution environment provided by a web browser. Alternatively a client may encompass an application such as a router management or information client or user interface thereof that may make use of router data service to obtain various router information about a specific router. In some embodiments such an application may include sufficient protocol support e.g. for a suitable version of Hypertext Transfer Protocol HTTP for generating and processing network based services requests without necessarily implementing full browser support for all types of network based data. In some embodiments clients may be configured to generate network based services requests according to a Representational State Transfer REST style network based services architecture a document or message based network based services architecture or another suitable network based services architecture.

Although not illustrated in some embodiments clients may convey network based services requests to router data service via an external network which may be a public connection to provider network. In various embodiments the external network may encompass any suitable combination of networking hardware and protocols necessary to establish network based communications between clients and router data service . For example a network may generally encompass the various telecommunications networks and service providers that collectively implement the Internet. A network may also include private networks such as local area networks LANs or wide area networks WANs as well as public or private wireless networks. It is noted that in some embodiments clients may communicate with router data service using a private network rather than the public Internet.

Some clients of provider network may be internal clients . Internal clients may operate similar to external clients except that they may be provisioned within provider network and may implement one or more of the services or resources provided by provider network . For example internal client may be implemented as part of an internal network configuration or mapping service and thus may need to obtain information for router which may implement part of the connections that the mapping service manages. Thus internal clients may too communicate with router data service to obtain router information via programmatic interface .

Please note that previous descriptions are not intended to be limiting but are merely provided as an example of provider networks clients and routers. The number or arrangement of components such as the number or arrangement of clients or routers may be implemented in many different ways. Various other components may interact with or providing router information according to a platform independent router programmatic interface.

This specification next includes a general description of a router data service which may implement a programmatic interface for providing router information for routers implemented as part of a provider network. Then various examples of a router data service are discussed including different components modules or arrangements of components module that may be employed as part of implementing a router data service. A number of different methods and techniques to implement providing router information according to a platform independent programmatic interface are then discussed some of which are illustrated in accompanying flowcharts. Finally a description of an example computing system upon which the various components modules systems devices and or nodes may be implemented is provided. Various examples are provided throughout the specification.

As described above with regard to clients external and internal to a provider network may make use of routers to communicate with and operate in a provider network. Routers settings and other information may impact or be configurable by clients thus external client s and internal client s may communicate with router data service to obtain particular router information for specific routers. In various embodiments router data service may implement front end . Front end may be configured to receive parse handle direct or otherwise process requests sent to router data service . Front end may in some embodiments be configured to parse or understand requests formatted according to the platform independent programmatic interface and direct these requests to the appropriate components of router data service to handle the request. For example front end may receive a request for router . Front end may be configured to send the request to router queue which maintains requests for router in some embodiments. In some embodiments a single request may be for aggregate information from multiple routers such as routers and . Front end may also implement various other service functionalities such as handling identification or authorization of clients to perform particular requests e.g. based on access credentials or access lists . In some embodiments front end may collect various usage or other performance metrics of router data service and provide them to storage or to another system component or device for analysis.

In various embodiments router data service may implement router specific cues such as router queues and which correspond to routers and respectively. Router queues may be implemented on or more computing nodes systems or devices to maintain pending requests for router data. In at least some embodiments router queues may be priority queues such as priority queue discussed below with regard to . In at least some embodiments respective workers may handle pulling requests from router queue to be translated and sent to a router . In some embodiments as described in below workers may be configured to select which requests to pull throttle incoming requests translate the requests into new versions of requests for the router information and send the requests to routers . However in some embodiments workers may perform only some of these functions such as selecting requests and or throttling requests while other components may translate and send the requests. Workers may be provisioned for performing work for a particular router from worker pool s . Worker pool s may be a single pool of workers configured to service requests for any of routers or may be different respective pools of workers for each of the routers. If a worker fails or otherwise becomes unavailable workers in the worker pool s may be configured to elect a new worker to take the place of the failed worker . As illustrated in workers may be at least configured to service a particular router thus worker services router worker services router worker services router and worker services router

In at least some embodiments router data service may implement throttling management module to analyze determine coordinate and or enforce throttling for the entire provider network routers. For instance throttling management module may be configured to track the number of translated requests sent to routers and determine an overall rate of incoming requests. Based on the determined rate and other information about the status of the provider network e.g. historical information about provider network traffic levels throttling management module may in some embodiments determine particular throttling thresholds to enforce at workers and may send the throttling thresholds to the workers to enforce. discussed below provides many different techniques for determining and enforcing throttling which throttling management module may implement in some embodiments.

Results from requests to routers may be stored in results queue in some embodiments. Router data service may implement results queue in order to maintain query results that include requested router information. Front end or another component may selectively obtain those query results in order to provide the results to clients and . discussed below provides various examples of techniques that may be implemented to select results from results queue . In some embodiments router data service may also be configured to store some results in a persistent data store results storage . Results storage may maintain health or other information that is periodically or frequently obtained. In some embodiments some requests for router information may be service by accessing results storage and obtaining some the data store there.

Priority queue maintains various router specific requests that are directed to priority queue by front end described in above or another component or device. Requests and may be maintained in priority queue until selected for servicing. Request worker may in various embodiments implement request selection module . Request selection module may evaluate the requests in priority queue and pull selected requests for servicing. For example in some embodiments the request selection module may determine or receive indications of priority scores for requests . Based at least in part on these priority scores request selection module may select those requests with the highest or near highest priority scores to service. Request selection module may implement the various techniques for request selection described below with regard to including optimizing or combining multiple requests into a single or reduced number of translated versions of requests.

In various embodiments request worker may implement throttle control . Throttle control may enforce various throttling thresholds or techniques against requests that may be sent to router . In some embodiments throttle control may report requests for tracking to throttling management as well as receive throttling thresholds and other information or instructions to configure throttling from throttling management component. Throttle control may for example monitor the rate of requests for router and throttle all requests to router specific types of requests such as low priority requests or requests from a specific client. Throttle control may implement the various throttling techniques discussed below with regard to in some embodiments.

In various embodiments request worker may implement reporting module . Reporting module may be configured to handle received query results and store the obtained router information at one or more locations. For example reporting module may determine that obtained router data may be health or status information that is stored in results storage . While for other received query results reporting module may be configured to determine that the obtained router information is for servicing a particular request and store the request router information in results queue . In some embodiments reporting module may be configured to determine that data for a newly received request is stored in results queue .

In various embodiments request worker may implement router specific request translation module . Router specific request translation module may be configured to translate requests formatted according to the programmatic interface into a programmatic interface specific to router . Router specific request translation module may access one or more libraries or knowledge bases accessible to request worker in order to perform the translation. Router specific request translation module may then send the translated request for data and receive back the requested data . In some embodiments router specific request translation module may be configured to translate the requested data back into a format compatible with the programmatic interface.

Worker may translate the request into a version of a request that is formatted according to a router specific API for router . Please note that although one request is illustrated the request may be for multiple requests and thus multiple versions of the request may be generated and sent according to specific routers APIs . In some embodiments the requests may be translated into any version of an interface which need not be an API . Once translated the new version of the request may be sent to router in order to obtain the requested data. Router may service the request and send back router data which may also be formatted according to router specific API . Worker may then queue the retrieved router data into results queue . In some embodiments the results from multiple routers may be aggregated and sent as a response to a single request for information from multiple routers. Front end may then select the retrieved router data from results queue and receive the router data . Front end may then provide the requested router data to client .

In another example illustrated in client sends a request for router data to front end . This request however may be improperly formatted or invalid e.g. with respect to the router data service API . As a result an invalid request message may be sent back to client which may indicate the reason for the invalidity e.g. the response may include an error code .

The examples of implementing providing router information according to a programmatic interface discussed above with regard to have been given in regard to a particular provider network. Various other types or configurations of a provider network may implement these techniques. Other architectures or configurations of router data services for example for which a programmatic interface are implemented for instance may implement a network entity registry. For example a single group or queue of requests for all routers may be maintained and requests may be pulled from the single group for translation sending and other processing. is high level flowchart illustrating various methods and techniques for providing router information according to a programmatic interface according to some embodiments. These techniques may be implemented using various components of a provider network as described above with regard to or other provider network components.

As indicated at a request may be received from a client of a provider network for particular router information for a specific one or more routers of the provider network in various embodiments. The request may be formatted according to a programmatic interface API in at least some embodiments. The programmatic interface may support requests or queries for router information from multiple different types of routers. Each of these different types of routers may be configured to be accessed differently such as according to different programmatic interfaces that are specific to a particular router type. For example different specific interfaces e.g. APIs for router types may require or use different keywords to obtain the same information e.g. link status for a particular link on the router . Whereas programmatic interface for router information that is platform independent may allow the same format for a request e.g. the same key word to check link status whether directed to one router type or another.

Various different types of router information may be requested in some embodiments. For example link status Border Gateway Protocol BGP status Address Resolution Protocol ARP status Virtual Local Area Network VLAN tagging errors received routes advertised routes or any other router information for which a client may take action to affect. In at least some embodiments clients may have a private connection to the provider network. Thus requests for router information may include any information useful for configuring and or operating the private connection. Note that clients may also be internal to the provider network.

Once received a request may be evaluated to determine whether the request is proper as indicated at . Proper requests may conform to various formatting keywords data fields or other programmatic interface specified requirements. In at least some embodiments proper requests may also be evaluated as to whether the client has authority or access rights to make the particular request. Internal clients for example may have greater access rights and may thus utilize a wider range of requests of the programmatic interface than external clients. As indicated by the negative exit from an error response may be sent to a client that sent an improper request. The error response may indicate the particular problem with request e.g. too many flags set or unauthorized access or the error response may simply deny the request. The error response itself may be formatted according to the programmatic interface in various embodiments.

As indicated at it may also be determined whether the particular router information has already been requested. For example some router information may be periodically or frequently gathered from the routers in the provider network. This router information may be centrally stored or located so that different provider network services or components may be able to access the data without requesting the data from the routers. The data may be stored and may indicate an expiration point after which the data may no longer be valid. For instance in some embodiments router health information obtained from the routers may be stored in persistent storage for subsequent access. If the particular router information is already or previously retrieved then as indicated by the positive exit from the particular router information may be obtained e.g. from the persistent data store maintaining the previously retrieved router information .

If the particular information has not been previously retrieved or was previously retrieved but is no longer valid then the request may be maintained along with other pending requests for router information for the specific router as indicated at . For instance in some embodiments requests for a specific router may be maintained or inserted into a queue e.g. a priority queue or other data structure for the router from which the pending requests may be later selected for service. However in other embodiments the request may be also maintained with requests for other routers thus the previous example is not intended to be limiting.

Requests may then be selected to be serviced in various embodiments based at least in part on a priority scheme for servicing requests as indicated at . A priority scheme may be simply defined providing coarse grained prioritization. For example request from internal clients may be considered high priority and may be selected for processing before requests from external clients even if the requests from the external clients were received prior to the internal client requests in some embodiments. Conversely requests from external clients may be completed after requests from internal clients in some embodiments. Fine grained priority schemes may allow for varying priority scores or values to be determined for request which may range widely and cause for example a request from an external client to be selected prior to a request from an internal client dependent on the particular type of request from each client. discussed below provides further examples of selecting requests according to a priority scheme. In at least some embodiments multiple requests may be selected and combined into a single translated version of a request. For example the multiple requests may each request the same router information or the respective router information for the requests may be obtained by sending a single translated request to the specific router. In some embodiments these optimizations may be specific to the specific router as the programmatic interfaces for routers may vary from one type or router to another.

Once selected the request may be translated into a version of the request for the particular information according to a programmatic interface for the specific router in various embodiments as indicated at . For instance a GET BGP STATUS platform independent request may be translated into a ACCESS BGP STATUS router specific request for the specific router. Translating the requests may include populating the various fields of the translated version with converted keywords some of which may or may not be the same as well as other data symbols or structure sufficient to satisfy the specific programmatic interface for the router.

As indicated at once translated the version of the request may be sent to the specific router in order to obtain the particular information. For instance each router may maintain a specific interface allocated only for API requests. Thus the request may be sent to the specific interface in order to be processed as an API request at the specific router.

As indicated at the particular router information may then be provided to the client in various embodiments according to the programmatic interface. Router information and or other query results received from a specific router may be handled in various ways. In some embodiments the obtained router information may be sent to the client as it is obtained. In some embodiments the particular information may be stored in a data structure such as queue and selectively or intelligently sent to the requesting client as described below with regard to .

In addition to determining priority values in some embodiments respective pending times may be determined as indicated at . Timestamps or other indicators may be included with requests to provide a reference point as to when a request was received allowing a pending time to be calculated. In some embodiments pending times may be implicit or inherently described relative other requests. For example in some embodiments requests may be maintained in a priority queue. The queue may itself indicate when particular requests are received by the ordering in which the requests are maintained for instance.

Candidate requests may be selected with the highest determined priority value in various embodiments as indicated at . For instance if 3 requests have the same priority score which may be the highest priority score among the pending requests then the 3 requests may be identified as candidate requests. If however there is a single request with the highest score than that single request may be selected for service without performing any comparison of pending times as indicated at . For multiple requests for which there is a tie or similar priority value and are thus selected as candidate requests the request with the longest pending time may be selected as request to service as indicated at . For example the candidate request closest to the front of the priority queue may be selected ahead of other candidate requests with the same or similar priority values.

As indicated at translated requests for router information that are sent to routers in a provider network may be monitored in various embodiments. For example various rates or aggregate numbers of requests may be collected calculated or otherwise determined. In some embodiments a centralized component may track the number of incoming requests for all of the routers in a provider network e.g. throttling management module in . Thus a network wide view of requests for routers may be evaluated. However in some embodiments individual components e.g. workers may monitor or track requests sent to a particular router as well.

In some embodiments it may be determined whether requests exceed a client specific threshold as indicated at . For example a client specific threshold may be set to limit or prevent abusive behavior or requests by a particular client. Thus requests for the client at either a specific router or some all of the routers in a provider network may be tracked and evaluated. A particular rate of requests e.g. within a specific time period or aggregate number of requests may be determined. If the rate or aggregate number of requests from the client exceeds the client specific threshold then as indicated by the positive exit from requests from the client may be throttled as indicated at . For instance subsequently received requests may be lowered in priority value or suspended for consideration for a particular period of time. In some embodiments throttling the requests may include bouncing or dropping certain requests from a router queue or other structure maintaining requests.

In some embodiments it may be determined whether requests exceed a router specific threshold as indicated at . For example a router specific threshold may be set to limit or prevent a particular router from being overwhelmed impeding performance of the particular routers other functions e.g. routing . Thus requests received at the specific router in a provider network may be tracked and evaluated. A particular rate of requests e.g. within a specific time period or aggregate number of requests may be determined. If the rate or aggregate number of requests for the specific router exceeds the router specific threshold then as indicated by the positive exit from requests for the specific router may be throttled as indicated at . For instance subsequently received requests may be lowered in priority value or suspended for consideration for a particular period of time. In some embodiments low priority requests may be delayed from consideration while higher priority requests may experience little throttling delay. Throttling the requests may include bouncing or dropping certain requests from a router queue or other structure maintaining requests.

In some embodiments it may be determined whether requests exceed a network wide threshold as indicated at . For example a network wide threshold may be set to limit or prevent the routers of the provider network from being overwhelmed as a whole impeding performance of the provider network caused by traffic congestion at the routers. Thus requests received at the specific router in a provider network may be tracked and evaluated. A particular rate of requests e.g. within a specific time period or aggregate number of requests may be determined for the requests sent processed at the routers. If the rate or aggregate number of requests for the provider network exceeds the network wide threshold then as indicated by the positive exit from requests for all of the routers in the provider network may be throttled as indicated at . For instance subsequently received requests may be lowered in priority value or suspended for consideration for a particular period of time. In some embodiments low priority requests may be delayed from consideration while higher priority requests may experience little throttling delay. Throttling the requests may include bouncing or dropping certain requests from a router queue or other structure maintaining requests. In some embodiments different individual thresholds for specific routers may be determined and enforced. For example some routers may experience higher request loads for router information. These routers may be provided with or have throttling thresholds enforced that are lower and therefore more strict than other routers. In this way problematic or key routers for the provider network may be targeted in order to protect certain network trafficking resources or prevent the spread or impact of overwhelmed routers that are impacting the performance of the routers of the network as a whole.

In another example results for requests may be stored or maintained together but still may be selectively provided to clients. These results may as discussed above with maintaining received requests be maintained in a priority queue or other data structure that provides a respective position in an ordering for results as well as a priority for results. In some embodiments as indicated at a query result may be selected that includes particular router information from a group of query results maintained together according to a priority scheme for servicing requests for router data. In at least some embodiments the priority scheme may be the same as used to select requests for processing. For instance a high priority request that is quickly selected for servicing may also be quickly selected to be provided to the requesting client. Pending times may also be used as discussed above with regard to . For example 2 query results may have the same priority value so time pending may be used to send the router information in the query result that has waited longest. In some embodiments various mechanism may be implemented to ensure that some query results are not perpetually delayed in place of higher priority requests. For example a particular mechanism may increment the priority values of query results with time pending over a certain threshold of time. The queue of results may also be used in some embodiments to store information from individual routers and aggregate the information together before sending a single response to a client.

As indicated at once selected the identified query result may be obtained. For example a request to the storage device or other component storing or hosting the query result may be sent in order to retrieve the query result. Once received the router information included the query result that was request may be formatted and sent according to the programmatic interface that sent the request as indicated at .

The methods described herein may in various embodiments be implemented by any combination of hardware and software. For example in one embodiment the methods may be implemented by a computer system e.g. a computer system as in that includes one or more processors executing program instructions stored on a computer readable storage medium coupled to the processors. The program instructions may be configured to implement the functionality described herein e.g. the functionality of various servers and other components that implement the router data service described herein . The various methods as illustrated in the figures and described herein represent example embodiments of methods. The order of any method may be changed and various elements may be added reordered combined omitted modified etc.

Embodiments of providing router information according to a programmatic interface as described herein may be executed on one or more computer systems which may interact with various other devices. is a block diagram illustrating an example computer system according to various embodiments. For example computer system may be configured to implement nodes of a router data service a persistent data store and or a client in different embodiments. Computer system may be any of various types of devices including but not limited to a personal computer system desktop computer laptop or notebook computer mainframe computer system handheld computer workstation network computer a consumer device application server storage device telephone mobile telephone or in general any type of computing device.

Computer system includes one or more processors any of which may include multiple cores which may be single or multi threaded coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface . In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA. The computer system also includes one or more network communication devices e.g. network interface for communicating with other systems and or components over a communications network e.g. Internet LAN etc. . For example a client application executing on system may use network interface to communicate with a server application executing on a single server or on a cluster of servers that implement one or more of the components of the system described herein. In another example an instance of a server application executing on computer system may use network interface to communicate with other instances of the server application or another server application that may be implemented on other computer systems e.g. computer systems .

In the illustrated embodiment computer system also includes one or more persistent storage devices and or one or more I O devices . In various embodiments persistent storage devices may correspond to disk drives tape drives solid state memory other mass storage devices or any other persistent storage device. Computer system or a distributed application or operating system operating thereon may store instructions and or data in persistent storage devices as desired and may retrieve the stored instruction and or data as needed. For example in some embodiments computer system may host a storage system server node and persistent storage may include the SSDs attached to that server node.

Computer system includes one or more system memories that are configured to store instructions and data accessible by processor s . In various embodiments system memories may be implemented using any suitable memory technology e.g. one or more of cache static random access memory SRAM DRAM RDRAM EDO RAM DDR 10 RAM synchronous dynamic RAM SDRAM Rambus RAM EEPROM non volatile Flash type memory or any other type of memory . System memory may contain program instructions that are executable by processor s to implement the methods and techniques described herein. In various embodiments program instructions may be encoded in platform native binary any interpreted language such as Java byte code or in any other language such as C C Java etc. or in any combination thereof. For example in the illustrated embodiment program instructions include program instructions executable to implement the functionality of a provider network in different embodiments. In some embodiments program instructions may implement multiple separate clients server nodes and or other components.

In some embodiments program instructions may include instructions executable to implement an operating system not shown which may be any of various operating systems such as UNIX LINUX Solaris MacOS Windows etc. Any or all of program instructions may be provided as a computer program product or software that may include a non transitory computer readable storage medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to various embodiments. A non transitory computer readable storage medium may include any mechanism for storing information in a form e.g. software processing application readable by a machine e.g. a computer . Generally speaking a non transitory computer accessible medium may include computer readable storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM coupled to computer system via I O interface . A non transitory computer readable storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computer system as system memory or another type of memory. In other embodiments program instructions may be communicated using optical acoustical or other form of propagated signal e.g. carrier waves infrared signals digital signals etc. conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

In some embodiments system memory may include data store which may be configured as described herein. In general system memory e.g. data store within system memory persistent storage and or remote storage may store data blocks replicas of data blocks metadata associated with data blocks and or their state configuration information and or any other information usable in implementing the methods and techniques described herein.

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the system including through network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems which may implement one or more storage system server nodes database engine head nodes and or clients of the database systems described herein for example. In addition network interface may be configured to allow communication between computer system and various I O devices and or remote storage . Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or retrieving data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of a distributed system that includes computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of a distributed system that includes computer system through a wired or wireless connection such as over network interface . Network interface may commonly support one or more wireless networking protocols e.g. Wi Fi IEEE 802.11 or another wireless networking standard . However in various embodiments network interface may support communication via any suitable wired or wireless general data networks such as other types of Ethernet networks for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol. In various embodiments computer system may include more fewer or different components than those illustrated in e.g. displays video cards audio cards peripheral devices other network interfaces such as an ATM interface an Ethernet interface a Frame Relay interface etc. 

It is noted that any of the distributed system embodiments described herein or any of their components may be implemented as one or more network based services. For example a compute cluster within a computing service may present computing services and or other types of services that employ the distributed computing systems described herein to clients as network based services. In some embodiments a network based service may be implemented by a software and or hardware system designed to support interoperable machine to machine interaction over a network. A network based service may have an interface described in a machine processable format such as the Web Services Description Language WSDL . Other systems may interact with the network based service in a manner prescribed by the description of the network based service s interface. For example the network based service may define various operations that other systems may invoke and may define a particular application programming interface API to which other systems may be expected to conform when requesting the various operations. though

In various embodiments a network based service may be requested or invoked through the use of a message that includes parameters and or data associated with the network based services request. Such a message may be formatted according to a particular markup language such as Extensible Markup Language XML and or may be encapsulated using a protocol such as Simple Object Access Protocol SOAP . To perform a network based services request a network based services client may assemble a message including the request and convey the message to an addressable endpoint e.g. a Uniform Resource Locator URL corresponding to the network based service using an Internet based application layer transfer protocol such as Hypertext Transfer Protocol HTTP .

In some embodiments network based services may be implemented using Representational State Transfer RESTful techniques rather than message based techniques. For example a network based service implemented according to a RESTful technique may be invoked through parameters included within an HTTP method such as PUT GET or DELETE rather than encapsulated within a SOAP message.

Although the embodiments above have been described in considerable detail numerous variations and modifications may be made as would become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

