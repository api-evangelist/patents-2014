---

title: System to enhance performance, throughput and reliability of an existing cloud offering
abstract: In for enhancing performance of applications, a cloud application programming interface (API) abstraction layer receives a request from an application of a given entity for core services shared among a plurality of entities. A requestor of the request is determined, and the performance level information for the requestor is determined based on entity specific performance rules defined by the given entity. The entity specific performance rules defined by the given entity are applied to requests from the application of the given entity and are not applied to requests from the other entities of the plurality of entities. The performance level information is included in the request. The request is routed for servicing by one or more of the core services using the performance level information in the request without affecting servicing of requests from other entities of the plurality of entities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09253056&OS=09253056&RS=09253056
owner: International Business Machines Corporation
number: 09253056
owner_city: Armonk
owner_country: US
publication_date: 20140913
---
Many cloud offerings provide core services via application programming interfaces APIs . These core services abstract the user interface from details of the underlying database operations Lightweight Directory Access Protocol LDAP interaction business logic etc. The core services typically reside on a dedicated server which can be replicated to spread incoming requests across systems to improve performance and throughput. These cloud offerings can also be extended to allow third party entities to utilize the system via an API abstraction layer. The API abstraction layer provides a means for the third party entities to utilize the core services to build a unique solution for their customers.

Challenges for such a system include dealing with growth and ensuring sufficient performance and load balancing. For example each of the following will change the demands of the underlying system growing number of third party entities utilizing the core services growing number of customers or users accessing the system and growing level of functionality and complexity of the system as it evolves. One can continue to expand the underlying hardware to address the growth factors above. However this approach fails to inject real intelligence to the above system.

According to one embodiment of the present invention in a method for enhancing performance of applications a cloud application programming interface API abstraction layer for core services shared among a plurality of entities receives a request from an application of a given entity. A computing processor determines a requestor of the request determines performance level information for the requestor based on entity specific performance rules defined by the given entity and includes the performance level information in the request by the computing processor where the request is routed for servicing by one or more of the core services using the performance level information in the request without affecting servicing of requests from other entities of the plurality of entities.

In one aspect of the present invention a user role assigned to the requestor is determined the performance level assigned to the user role according to the entity specific performance rules defined by the given entity is determined.

In one aspect of the present invention the user role assigned to the requestor and a current time is determined and the performance level assigned to the user role during the current time according to the entity specific performance rules defined by the given entity is determined.

In one aspect of the present invention the entity specific performance rules defined by the given entity are applied to requests from the application of the given entity and are not applied to requests from the other entities of the plurality of entities.

In one aspect of the present invention each entity of the plurality of entities is associated with a priority level where the given entity is associated with a higher priority than another entity of the plurality of entities and where the request from the application of the given entity is processed before processing any requests from the other entity.

In one aspect of the present invention the method further receives a plurality of requests from a plurality of users of the application of the given entity determines the requestor of each request determines the performance level information for the requestor of each request based on the entity specific performance rules defined by the given entity and includes the performance level information for the requestor in each request where the plurality of requests is routed for servicing by one or more of the core services in an order consistent with the performance level information in the plurality of requests without affecting servicing of requests from other entities of the plurality of entities.

In one aspect of the present invention the method further receives a plurality of requests from a plurality of users of a plurality of applications of the given entity determines the requestor and the application of each request determines the performance level information for the requestor and the application of each request based on the entity specific performance rules defined by the given entity and includes the performance level information for the requestor and the application in each request. The plurality of requests is routed for servicing by one or more of the core services in an order consistent with the performance level information in the plurality of requests without affecting servicing of requests from other entities of the plurality of entities.

System and computer program products corresponding to the above summarized methods are also described and claimed herein.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Java and all Java based trademarks and logos are trademarks of Sun Microsystems Inc. in the United States other countries or both Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified local function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

For convenience the Detailed Description includes the following definitions which have been derived from the Draft NIST Working Definition of Cloud Computing by Peter Mell and Tim Grance dated Oct. 7 2009 which is cited in an IDS filed herewith and a copy of which is attached thereto.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based e mail . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to a schematic of an example is shown of a cloud computing node suitable for embodiments of the present invention. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth hereinabove.

In cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in cloud computing node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Referring now to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide 

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provides pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing and transaction processing.

To protect the cloud computing system the core services cannot be directly accessed by the entities or their applications . Due to this the entities do not have direct control over the scheduling and routing of requests sent from their entity specific applications and thus cannot directly control their performances. In this embodiment the cloud API abstraction layer includes APIs which the entities may call to define performance rules specific to themselves that the cloud API abstraction layer will take into account in processing the requests. The cloud API abstraction layer applies the entity specific performance rules only to requests from the applications offered by the specific entity. The performance rules of one entity would not be applied to another entity sharing the core services . In this manner the entities are given a way to influence the performance of their applications but without given direct access to the core services . Further the security benefits provided by the cloud API abstraction layer are maintained and the managing of the overall performance and load balancing in the system remains in control of the cloud computing system.

For example as illustrated in the entity specific performance rules may be defined by user roles assigned to requestors that use the application . In this example the rules define a certain performance level for each user role. When the request from the application is received the cloud API abstraction layer inspects the request to determine the requestor . Using the performance rules defined by the entity the cloud API abstraction layer determines the user role for the requestor and the corresponding performance level . Assume that the performance rules define a user role of Customer Service Representative as having a high performance level a user role of User as having an average performance level and a user role of Guest as having a low performance level. When the user role is determined to be Customer Service Representative CSR the performance information indicates the request is to be given a high performance level and the request dispatcher routes the request to Server a highly capable system. The cloud API abstraction layer sets the performance information in the request with the performance level corresponding to the requestor s user role. The request is then forward to the request dispatcher for routing. When the user role is determined to be User the performance information indicates the request is to be given an average performance level and the request dispatcher routes the request to Server an average system. When the user role is determined to Guest the performance information indicates the request is to be given a low performance level and the request dispatcher routes the request to Server a low end system. In this manner although the entity does not have direct control over the request dispatcher or the core services the entity is nevertheless able to influence the performance of the servicing of the request through its definition of the entity specific performance rules .

In addition to the user roles the entity specific performance rules may also define the performance levels based on time. For example as illustrated in assume that a user role may not be defined with a high level of performance but may wish to have this level for a limited amount of time. For example John Doe is giving an important demonstration to a large perspective customer from 2 3 pm. John Doe only holds User level performance. However his employer entity wants to ensure maximum throughput for this demonstration as it may yield a large return if John Doe is able to sign this perspective customer. The entity may define the performance rules such that when the requestor is John Doe and the current time is between 2 and 3 pm John Doe is given a privileged performance level. Assume that John Doe signs into the application for use during the demonstration. The application sends a request to be serviced by the core services to the cloud API abstraction layer . The cloud API abstraction layer inspects the request to determine that the requestor is John Doe and that the current time is 2 30 pm. The cloud API abstraction layer determines that according to the performance rules John Doe is to be given a privileged performance level . In response the cloud API abstraction layer sets a privileged mode in the request to ON and forwards the request to the request dispatcher . After determining that the privileged mode is ON the request dispatcher routes the request to Server .

When the cloud API abstraction layer determines that John Doe is not to be given a privileged performance level the user role assigned to John Doe is determined . The request is then processed and routed in the manner as set forth above in .

In another example assume that a company is running a promotion or trying to sign up a specific trial user. The company decides to assign Guest level performance for the trial user except during a window of time when a trial user is expected to be contemplating whether to purchase a subscription. The company may define the performance rules such that the privileged mode is ON for requests from the trial user during this critical window of time. The trial user s request is then serviced in the manner set forth in .

In another example a plurality of requests by a plurality of users of the application is received by the cloud API abstraction layer . The cloud API abstraction layer determines the requestor of each request determines the performance level information for the requestor of each request based on the performance rules defined by entity and includes the performance level information in each request as set forth above. The plurality of requests is then routed by the request dispatcher in an order consistent with the performance level information in the plurality of requests.

In another example assume that a plurality of requests by a plurality of users is received from applications offered by the same entity . The entity defines its performance rules to include different performance levels for different applications. The cloud API abstraction layer inspects each request to determine the application that sent the request the requestor the user role assigned to each requestor and the performance level assigned to each user role and to each application. The cloud API abstraction layer processes each request accordingly in the manner described above. The request dispatcher then routes each request in an order consistent with the performance levels indicated in the requests.

In the embodiments above the entities are considered equal and their requests may be routed by the request dispatcher in a round robin fashion. Optionally the entities may be given a priority level that influences the performance of their corresponding applications in addition to the ability to define their own entity specific performance rules . For example entity may purchase a premium subscription in order to receive higher priority access to the core services . The requests received from applications offered by the entities would thus be processed by the cloud API abstraction layer first according to the priority level of the entity and then according to the entity specific performance rules as set forth above.

For example assume that entity has a higher priority than entity . The cloud API abstraction layer receives requests from applications and corresponding to entities and respectively. Assume that a request from application is determined to have a high performance level according to performance rules and a request from application is determined to have a low performance level according to performance rules . In response to those determinations the cloud API abstraction layer processes the request from application before processing the request for application . The requests are processed and routed in the manner set forth above.

The parameters used to determine the performance information in the examples above are for illustrative purposes only. Parameters may be used in various combinations and other types and combinations of parameters may be used to influence the servicing of requests without departing from the spirit and scope of the present invention.

The descriptions of the various embodiments of the present invention has been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

