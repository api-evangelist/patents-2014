---

title: Network resource deployment for cloud-based services
abstract: Techniques are described which simplify and/or automate many of the tasks associated with the configuration, deployment, and management of network resources to support cloud-based services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09338067&OS=09338067&RS=09338067
owner: RingCentral, Inc.
number: 09338067
owner_city: Belmont
owner_country: US
publication_date: 20141118
---
The present application is a continuation of and claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 13 874 142 entitled Network Resource Deployment for Cloud Based Services filed Apr. 30 2013 which is a continuation of U.S. patent application Ser. No. 13 677 138 entitled Network Resource Deployment for Cloud Based Services filed Nov. 14 2012 now U.S. Pat. No. 8 452 864 which is a continuation of U.S. patent application Ser. No. 13 418 181 entitled Network Resource Deployment for Cloud Based Services filed Mar. 12 2012 now U.S. Pat. No. 8 335 851 the entire disclosure of each of which is incorporated herein by reference for all purposes.

The present invention relates to systems and methods for deploying network resources in heterogeneous network environments to support for example cloud based services.

The term cloud computing refers to computing models for enabling ubiquitous convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services . Cloud based services are rapidly becoming the primary way in which services are provided to businesses and consumers over the Internet and the World Wide Web.

The predominant way in which such resources are configured deployed and managed today involves the manual configuration deployment and management of individual system resources. This may not present an issue when the number of resources is small e.g. 5 or 10 servers. However as a cloud based service or suite of services scales to meet increased customer demand e.g. hundreds or thousands of servers across multiple geographically distinct colocations manual techniques become a serious bottleneck to the scalability and delivery of such services.

In addition manual deployment of network resources requires a relatively high level of programming skill and a detailed knowledge of the current configuration of deployed resources and due to the complexity of the tasks involved often requires time consuming trial and error troubleshooting of resource components and parameters before deployment is successful. The level of professional skill and institutional knowledge required for such key activities also represents a single point of failure from a system perspective e.g. when a key employee moves on. These are undesirable technical and economic barriers to the deployment of cloud based services.

According to the present invention methods apparatus systems and computer program products are provided for deploying one or more network based services in a network. According to various embodiments one or more user interfaces configured to facilitate specification of at least a portion of a logical structure of an environment by a user are provided. The logical structure of the environment interrelates the one or more network based services and one or more corresponding configurations. The one or more network services and the one or more configurations are to be implemented by one or more network resources and one or more software components. The one or more network resources are selected from a pool of available network resources. The one or more network resources are removed from the pool of available network resources. The one or more network resources are allocated to the environment with reference to the logical structure of the environment. The one or more network resources and the one or more software components are deployed to the network with reference to the logical structure of the environment thereby enabling provision of the one or more services.

According to some embodiments the one or more user interfaces are further configured to enable the user to initiate deployment of the environment and allocation of the one or more network resources and the one or more software components occurs in response to the initiation of the deployment of the environment.

According to some embodiments the one or more user interfaces are further configured to enable the user to initiate provision of the one or more services once the environment has been deployed even where one or more tests of the environment failed.

According to some embodiments the one or more user interfaces are further configured to enable the user to initiate undeployment of the environment and the one or more network resources are returned to the pool of available network resources in response to undeployment of the environment.

According to some embodiments the one or more user interfaces are further configured to enable the user to initiate pausing of operation of the environment and provision of the one or more services is stopped in conjunction with the pausing of the operation of the environment.

According to some embodiments the environment includes an updated version of a previously deployed environment the previously deployed environment having a plurality of end users associated therewith and the one or more user interfaces are further configured to enable the user to initiate migration of a subset of the end users from the previously deployed environment to the environment without interrupting provision of the one or more services to the subset of the end users.

According to some embodiments the pool of available network resources includes both actual and virtual computing resources and the allocation and deployment of the one or more network resources is accomplished using the actual and virtual computing resources interchangeably.

According to some embodiments the environment interrelates a plurality of the network resources and a plurality of the software components. The plurality of network resources are situated in a plurality of geographically distinct data centers and the logical structure of the environment includes one or more logical groupings of the network resources or software components across the geographically distinct data centers.

According to some embodiments the environment interrelates a plurality of the network resources and a plurality of the software components and the plurality of network resources employ a plurality of different operating systems to provide the one or more services.

According to some embodiments the one or more user interfaces are further configured to enable the user to select an environment template in which the user may specify the portion of the logical structure of the environment the environment template specifying a remainder of the logical structure of the environment.

According to some embodiments the one or more network resources by which the one or more network based services and one or more configurations are implemented are modified.

A further understanding of the nature and advantages of the present invention may be realized by reference to the remaining portions of the specification and the drawings.

Reference will now be made in detail to specific embodiments of the invention including the best modes contemplated by the inventors for carrying out the invention. Examples of these specific embodiments are illustrated in the accompanying drawings. While the invention is described in conjunction with these specific embodiments it will be understood that it is not intended to limit the invention to the described embodiments. On the contrary it is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the invention as defined by the appended claims. In the following description specific details are set forth in order to provide a thorough understanding of the present invention. The present invention may be practiced without some or all of these specific details. In addition well known features may not have been described in detail to avoid unnecessarily obscuring the invention.

Embodiments of the present invention provide methods apparatus systems and computer program products which simplify and or automate many of the tasks associated with the configuration deployment and management of network resources including both computing resources and software to support network services e.g. cloud based services. Such methods systems and computer program products provide user interfaces that support the discovery configuration deployment and management of network services and resources including in some implementations deployment of services and or resources without interruption of currently operating systems and or the delivery of services.

Various implementations are described herein in the context cloud based communication services e.g. telephony and fax services. However it should be understood that the scope of the invention is much broader encompassing a wide variety of systems and services provided using virtually any network based computing paradigm. To be clear the techniques described herein may be used to support any type of network or cloud based service or set of services. Therefore references to specific applications herein are not intended and should not be used to limit the scope of the invention.

The high level architecture of a particular implementation of an Automatic Deployment System ADS capable of configuring deploying and managing network resources for a cloud based service e.g. a telephony service such as that described above will now be described with reference to . It should be noted that the term automatic should not be interpreted to mean that deployment occurs without human interaction. Rather it will become clear with reference to the description below that human involvement in the configuration deployment and management of network services and or resources is advantageously facilitated through the selective automation of various aspects of those tasks. And it is again worth noting that network services and or resources may be configured deployed and managed for any type of service or system using a system like ADS .

The main object with which ADS operates and the user interacts is referred to as an environment. An environment is a set of services configurations and dependencies which may be implemented by software components and configuration files installed on resources. Resources may include for example bare metal resources e.g. actual computing hardware as well as virtual resources e.g. virtual machines VMs . These resources may be owned associated with or under control of different entities e.g. resource pool associated with communication service provider RingCentral and resource pools associated with third party platform as a service PaaS providers through N. According to various implementations multiple services may be installed on the same resource and services can be transferred across resources without changing the logical structure of the environment.

Dependencies may include for example relationships between services relationships between configurations and relationships between services and configurations. For example a telephony service may require a voicemail service which could be expressed in a dependency. In another example the configuration of a service may depend on the configuration of another service such as a common directory shared between the services which could be expressed in another dependency. In some implementations services configurations and dependencies as well as the corresponding software components configuration files and resources may be expressed in static or dynamic Extensible Markup Language XML format which would allow for the hierarchical and modular definition of environments.

Resources may interface with ADS directly or through cloud gateway via various application programming interfaces APIs . For example bare metal resource and virtual resource VM may be abstracted or virtualized at a service provider level and may interface with ADS directly or through cloud gateway via virtual center vCenter API . In another example bare metal resource and virtual resource may interface with ADS directly or through cloud gateway via separate APIs. Third party PaaS resources may interface with ADS directly or through cloud gateway via various platform APIs .

According to a particular implementation cloud gateway includes a main module connected to ADS via cloud gateway API and one or more connector modules which work with the API s of particular resources e.g. APIs . Cloud gateway API provides a set of operations for resources which may be used by environments during their lifecycles. Examples of such operations may include for example creating deleting rebooting getting the state of starting stopping and creating or deleting a snapshot of a resource. Other examples of such operations may include getting a list of resources getting sizes of resources e.g. CPU RAM or storage capacity getting a list of instance templates uploading instance templates deleting instance templates and getting a list of snapshots.

Dynamic resource pool identifies all of the resources among resources that are available for inclusion in any new or existing environment. Dynamic resource pool provides a view of resources which is agnostic to the underlying software and hardware resources. Note that dynamic resource pool may include information about whether or not a resource has been deployed e.g. in deployed environment or whether a resource is available partially available or unavailable. Dynamic resource pool can also contain aggregate information about resources such as for example the number of small medium and large servers available for deployment.

According to some implementations the ADS may periodically request a list of available resources or a list of changes in available resources from resource pools for example using the cloud gateway API or APIs connecting to resource pools e.g. APIs and automatically update the list of available resources e.g. dynamic resource pool . Alternatively or in addition the resource pools can notify the ADS of changes in resources for example through the cloud gateway using various APIs e.g. APIs .

When a user of the ADS wishes to deploy a new environment or new resources to an existing environment a resource request is generated to dynamic resource pool in response to which appropriate resources are provisioned and identified to deployment engine . According to some implementations if dynamic resource pool does not include sufficient resources to fulfill the resource request resources may be generated on the fly e.g. new VMs may be instantiated. That is dynamic resource pool may be a dynamic pool of resources in which resources may be added in response to demand. This can be particularly advantageous from a cost perspective where third party PaaS resources are used in that they may be created and deployed as needed. More specifically resources may be added deleted or modified based on determinations by the resource pools or based on determinations by the ADS. For example if a given resource pool is approaching load capacity it may provision additional servers and notify the ADS of those servers. In another example if the ADS determines that particular services are performing slower than expected ADS could request additional resources and shift those services to those new resources.

According to a particular implementation deployment engine employs the open source integration tool Chef as a foundation. Chef from Opscode is open source software under the Apache license 2.0 and provides a systems integration framework that facilitates configuration management of network infrastructure. Chef uses cookbooks or recipes to enable management of network resources by writing code rather than running commands. Chef also uses libraries to enable integration of network resources with applications databases LDAP directories etc. For more information regarding Chef please refer to http www.opscode.com chef .

Conventionally used Chef requires highly specialized knowledge and programming skills to manually configure and manage network resources. An ADS implemented as described herein provides one or more additional layers of abstraction and functionality on top of the Chef framework which allow a higher degree of automation in the configuration deployment and management of network resources without requiring the specialized knowledge or programing skills of the typical Chef user. This in turn enables cloud based services and systems to be highly scalable eliminating a critical bottleneck in meeting rapidly increasing demand. It should be noted that Chef is merely one example of a systems integration framework upon which implementations of an ADS may be built. Others examples include Puppet Enterprise and AutomateIt.

Referring back to the user specifies scenarios i.e. one or more services and or configurations for the requested resources and requests deployment. Scenarios and or configurations include specifications of what services and configurations will be used in a deployment as well as any dependencies between them all of which may be implemented as software components and configuration files installed on resources. Deployment engine receives the scenarios configurations the provisioned resources and any software components to be integrated with the resources and deploys the environment . Software components might correspond for example to any of the various aspects of the services being deployed on the network resources such as installation packages programs or scripts and configuration files including dependencies . Deployment engine then verifies that the deployment was correct and successful and once verified changes the environment status from not deployed to deployed or possibly even live. In the implementation shown deployment engine also provides a load balancer configuration to common layer . Common layer may correspond for example to a set of resources that is shared by multiple environments.

According to some implementations ADS supports continuous integration i.e. the configuration deployment and or management of network resources and software components without interruption of services. This may be accomplished for example by migrating services and users from one environment to another i.e. hot swapping a currently active environment with an updated version of that environment.

The flowchart of illustrates the lifecycle of an environment or one or more services i.e. referred to herein as a scenario according to a particular implementation of the ADS. The user creates an environment or scenario from scratch from a template or by cloning it from one of the existing environments . According to a particular implementation the user may choose between a fixed deployment or an auto deployment. If fixed deployment is chosen the user may specify any part of the environment or scenario e.g. services configurations dependencies software components resources software component to resource mappings etc. If auto deployment is chosen the ADS will specify some or all of these parts of the environment or scenario e.g. based on existing services configurations dependencies e.g. software component dependencies available resources etc. At this point the environment or scenario is in the not deployed state .

In the not deployed state the environment or scenario can be edited until the user wishes to deploy it. In response to a deploy request the ADS checks the dynamic resource pool for necessary resources and locks them for use. If insufficient resources are available the ADS reports this to the user and returns the environment or scenario to the not deployed state . Alternatively or in addition the system could initiate the creation of additional resources or resource pools could initiate the creation of additional resources in response to requests by the ADS. If on the other hand the ADS has all necessary resources the deployment process begins at which point the ADS activates the deployed environment or scenario ready state and runs all necessary post install tests . If the post install tests are successful the deployed environment or scenario may be used and its state is changed to the live state in which it becomes operational and is used for its target purpose e.g. to provide cloud based services. Otherwise the ADS reports the test failure s to the user and may return the environment or scenario to the not deployed state .

Alternatively there may be circumstances in which even though the post install tests are not entirely successful the user may still want to allow the environment or scenario to go live. For example during the testing phase of a particular environment or scenario configuration it may be useful to allow test engineers the flexibility to have an environment or scenario go live even though some of the post install tests may have failed.

If the user wants to stop operation of the environment or scenario the state of the environment or scenario becomes stopped . This may be useful where for example an environment or scenario employs third party resources which when operating represent cost i.e. when the resources of an environment or scenario are not being utilized operation of the environment or scenario may be paused. This state may have various implications for the underlying network resources. For example the operation of bare metal servers in a deployed environment or scenario might not literally be stopped but might instead take one of three states e.g. ready live or not deployed. By contrast for VMs the ADS might run a shutdown procedure that saves images of the VMs to storage.

If the user wants to modify a live environment or scenario in some way e.g. change software component versions or configurations add or change resources etc. the ADS undeploys the environment or scenario and returns it to the not deployed state . Similarly if a live environment or scenario is no longer needed it may be undeployed . When a deployed environment or scenario is undeployed or the ADS deletes all saved images of VMs registered for the environment or scenario releases and or reformats all bare metal servers registered for the environment or scenario and returns all resources to the dynamic resource pool.

An environment or scenario may also be returned to the ready state e.g. for rerunning post install tests or to the live state e.g. to resume normal operation.

According to a particular implementation an ADS is customized to facilitate deployment of network resources in a cloud based communication system such as the one illustrated in . shows a communication system which can be for example a cloud based telephony system. Communication system includes data centers and . Each data center is a point of presence POP that includes the network resources e.g. servers routers switches network connections etc. necessary to support the services provided by communication system . Each data center is typically located in a different geographical region.

In this example communication system includes three user points of data pods i.e. pods and each of which is a logical grouping of two or more pod units situated in different data centers. Each pod serves a different subset of user accounts. In this example each pod unit e.g. unit A serves the same subset of users as the other pod units within the same pod e.g. pod units B and C . Each pod unit includes a communication server configured to provide substantially the same services to the same subset of users as the other pod units within the same pod. Each pod unit also includes an account database configured to support the respective communication servers for the corresponding subset of users.

Communication servers provide telecommunication services e.g. voice video email and or facsimile to corresponding subsets of users. Each server may also provide other services including for example user account management and configuration billing services accounting services etc. Each pod unit includes an account database to support the communication server s for that particular pod unit storing configuration details and other information regarding each user s account.

Pod units A and B are in communication with one another so that the data on their respective account databases are synchronized across data centers. Data center includes router A to receive an incoming service request A from network . Router A parses the incoming service request to identify or extract a user key and queries GUD A to determine which pod is associated with the user key. Once the associated pod has been identified router A routes the service request to the pod unit in the data center associated with the identified pod. If the pod unit associated with the identified pod is not associated with data center router A may route the service request to another data center e.g. data center as indicated by the arrow A .

Each pod unit of the data center is also coupled to MSS A which stores files for the users served by pod units A and A. These files may include for example messages e.g. voicemails and facsimiles user logs system messages system and user call prompts e.g. auto attendant or user recorded greetings and other types of call related or electronic messages. The contents of MSS A are synchronized with other data centers e.g. synchronized with MSS B of data center .

Each pod unit in data center is coupled to common database A which stores shared data for all of the pods and stores consolidated information from account databases . Common database A also facilitates changes to the pod databases. For example common database A may store data for applications that provide the services on communication servers . Different versions of the applications data may be stored in common database A which allow changes and upgrades to communication servers to be implemented efficiently and conveniently. Changes may be made to common database A and propagated to pod units A and A. Common database A is synchronized across data centers to other common databases e.g. common database B of data center . Common database A MSS A router A and GUD A form a common layer of resources that are shared by all pod units in data center .

For more information regarding the nature of such a system with which an ADS constructed as described herein may be used please refer to U.S. patent application Ser. No. 12 957 125 entitled User Partitioning in a Communication System filed on Nov. 30 2010 the entire disclosure of which is incorporated herein by reference for all purposes.

According to some implementations the logical structure of an environment e.g. specified using XML dynamic XML databases graphical design environments etc. may be fixed to varying degrees from the user s perspective to facilitate the configuration deployment and management of a particular type of system or service set such as the communication system described above. In such implementations the user s options in specifying or selecting elements of the structure may be constrained to achieve a desired level of uniformity of the environments deployed. For example the use of XML to define the logical structure of the environment allows the user to define a hierarchical and modular configuration of services and configurations which may be easily stored versioned and updated in a source code repository. An example of the logical structure of an environment and deployment information similar to those discussed above with reference to is illustrated in Tables 1 7 below in which the various levels of an environment hierarchy are defined.

According to other implementations the structure of an environment may itself be specified using the ADS. Such implementations would allow an ADS to be customizable so that it might be used to configure deploy and manage network resources for a wider variety of different types of services and systems.

According to some implementations the sequence by which services or groups of services are be deployed may be specified in the ADS using a deployment configuration file ADS database or similar data structure. For example a deployment configuration file may specify that common layer services are deployed synchronously prior to user specific services such as message services but the message services are deployed asynchronously with respect to each other. In another example a deployment configuration file may define groups of services that can be deployed asynchronously with respect to the services in each group as well as a sequence for the groups of services to be deployed synchronously.

In the depicted implementation when a user logs in the default screen is the Deployed Environments List screen shown in in which environments in various stages of the environment lifecycle e.g. see are listed. Various action options are available to the user for the listed environments depending on the current state of each including for example deploy stop undeploy etc.

A Deployed Environments Details screen A shown in is reached by selecting one of the listed environments. The logical structure of the environment is shown i.e. data centers POPs pods pod units etc. including the services associated with each pod unit. An alternative view is provided in screen B of in which the servers associated with each pod unit are displayed instead of the services. A variety of user actions are available for various levels of the logical hierarchy including the ability to set databases to read only start or stop a particular resource to activate or deactivate a portion of the structure or to migrate users e.g. from one pod unit in a pod to another.

A variety of actions are also available at the environment level to change the state of the environment including for example updating or editing the environment various types of deployment of the environment e.g. live or off line starting or stopping the environment including scheduling of starts and stops undeployment of an environment etc. One environment level option enables the migration of users from one environment to another which might be used for example when an environment needs to be taken offline or replaced by an updated or otherwise modified version. This allows such actions to be taken without interruption of service to the affected users.

Environment Templates List screen of provides the user with a list of available template environments i.e. templates from which a new environment may be created and configured. Selection of one of the templates results in presentation of Environment Modification screen of in which the user may create a new environment. The user may also reach this screen to modify an existing environment by selecting for example the edit option in the Deployed Environment Details screens A and B discussed above with reference to .

Add Service Popup screen by which the user may select a service to add to the environment is presented in response to selection of the add service type options in screen . Add Change Server Popup screen is presented in response to the selection of the set server option in screen and allows the user to add servers from among a list of available bare metal and virtual servers the list of which may be filtered by different attributes such server type or size. According to the implementation shown the logical structure of the selected template or environment is relatively fixed with the user s options being largely constrained to adding pod units to a pod and services to a pod unit including specification of a load balancing pool . In other implementations the user may modify any part of the logical structure of the selected template or environment which can then be saved as a new template or environment.

Resources List screen of provides a view to the user of all available resources in the dynamic resource pool e.g. dynamic resource pool of . Both bare metal and virtual resources may be added to the pool using Resource Creation Modification screen which may be reached by selecting Add new or a particular one of the existing resources in screen . A locations list can be used to filter the list of available resources based on the physical locations of resources.

Users List screen of facilitates management of user permissions for users authorized to configure deploy and manage environments and network resources using an ADS and in particular allows an authorized user to grant remove or modify permissions to create environments on a user specific basis.

ADS Logs screen of provides a view to the user of events associated with various environments organized in this example by time. The user may search or filter the log entries by description date e.g. by specifying a window of time event level e.g. debug info warning error critical user or environment. This enables the user to reduce the log entries to only those of interest.

One or more ADS data stores are PostgreSQL systems object relational management systems used for storing data used by ADS e.g. environments configurations users etc. as well as jobs run by ADS . As discussed above ADS includes one or more Chef servers to support deployment of environments. ADS also includes one or more RabbitMQ servers to support message exchange e.g. between ADS core server and other servers in the system. One or more Chef client servers instantiate and run chef clients which are responsible for retrieving environment templates from Apache Subversion SVN server s and software components such as installation packages programs or scripts from Builder server s .

According to some implementations an ADS may be designed for high availability. For example separate ADS instances may be used to configure deploy and manage different types of environments e.g. test environments pre production environments and production environments. Redundancy of system components within an ADS e.g. ADS core servers ADS data stores Chef servers RabbitMQ servers etc. may be supported using for example the Common Address Redundancy Protocol CARP and distributed storage e.g. using Distributed Replicated Block Devices DRBDs or Network attached Storage NAS . A wide variety of other high availability design techniques may be used to ensure the desired level of reliability and availability.

Referring once again to a query e.g. with the configuration of an environment is transmitted from UI to ADS engine which queries data store for the state of the environment . ADS core server also queries RabbitMQ server for creating a pool of messages . Message pool polls demon on Chef client server which starts chef client on the Chef client server . Chef client retrieves the role and cookbook or recipe from Chef server . Chef client also retrieves software components from Builder server and environment template configurations from SVN server . An exit status is returned from Chef client to demon which places the exit status on the message bus of RabbitMQ server . The exit status message is then returned to ADS engine written into data store and returned to UI .

As mentioned above an ADS designed as described herein may be used to configure deploy and manage network resources in a variety of homogeneous and heterogeneous network contexts to support wide variety of systems and network based services including for example cloud based systems and services. It follows then that the scope of the invention is not limited to any particular type of network or network topology or to particular types or configurations of computing devices. This is true with respect to the nature of the network and computing devices in which and onto which systems and services are configured deployed and managed with an ADS as well as the network and computing devices in and on which the ADS operates to facilitate the configuration deployment and management of network resources to support such systems and services.

And despite references to particular computing paradigms and software tools herein the computer program instructions with which embodiments of the invention may be implemented may correspond to any of a wide variety of programming languages and software tools and be stored in any type of volatile or nonvolatile non transitory computer readable storage medium or memory device and may be executed according to a variety of computing models including for example a client server model a peer to peer model on a stand alone computing device or according to a distributed computing model in which various of the functionalities described herein may be effected or employed at different locations.

While the invention has been particularly shown and described with reference to specific embodiments thereof it will be understood by those skilled in the art that changes in the form and details of the disclosed embodiments may be made without departing from the spirit or scope of the invention. In addition although various advantages aspects and objects of the present invention have been discussed herein with reference to various embodiments it will be understood that the scope of the invention should not be limited by reference to such advantages aspects and objects. Rather the scope of the invention should be determined with reference to the appended claims.

