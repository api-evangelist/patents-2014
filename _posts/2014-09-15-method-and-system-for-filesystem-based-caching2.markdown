---

title: Method and system for file-system based caching
abstract: A method and system for file-system based caching can be used to improve efficiency and security at network sites. In one set of embodiments, the delivery of content and storing content component(s) formed during generation of the content may be performed by different software components. Content that changes at a relatively high frequency or is likely to be regenerated between requests may not have some or all of its corresponding files cached. Additionally, extra white space may be removed before storing to reduce the file size. File mapping may be performed to ensure that a directory within the cache will have an optimal number of files. Security at the network site may be increased by using an internally generated filename that is not used or seen by the client computer. Many variations may be used is achieving any one or more of the advantages described herein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639547&OS=09639547&RS=09639547
owner: Open Text SA ULC
number: 09639547
owner_city: Halifax
owner_country: CA
publication_date: 20140915
---
This application is a continuation in part of and claims a benefit of priority from U.S. patent application Ser. No. 12 835 004 filed Jul. 13 2010 entitled SYSTEM METHOD AND STORAGE MEDIUM FOR MANAGING ITEMS WITHIN FILE DIRECTORY STRUCTURE now U.S. Pat. No. 8 856 210 which is a continuation of and claims a benefit of priority from U.S. patent application Ser. No. 11 641 496 filed Dec. 18 2006 now U.S. Pat. No. 7 761 497 entitled STORAGE MEDIUM HAVING A MANAGEABLE FILE DIRECTORY STRUCTURE which is a continuation in part of U.S. patent application Ser. No. 11 348 645 filed Feb. 7 2006 now U.S. Pat. No. 7 716 342 entitled METHOD AND SYSTEM FOR FILE SYSTEM BASED CACHING which is a continuation of U.S. patent application Ser. No. 10 195 798 filed Jul. 15 2002 now U.S. Pat. No. 7 024 452 entitled METHOD AND SYSTEM FOR FILE SYSTEM BASED CACHING which is a conversion of and claims a benefit of priority from Provisional Application No. 60 305 320 filed Jul. 13 2001 entitled METHOD AND SYSTEM FOR FILE SYSTEM BASED CACHING. The above referenced U.S. patent application Ser. No. 11 641 496 filed Dec. 18 2006 is a continuation of U.S. patent application Ser. No. 10 334 515 filed Dec. 31 2002 now U.S. Pat. No. 7 349 942 entitled STORAGE MEDIUM HAVING A MANAGEABLE FILE DIRECTORY STRUCTURE which is a conversion of and claims a benefit of priority from Provisional Application No. 60 356 613 filed Feb. 13 2002 entitled CACHE MEMORY HAVING A HIERARCHICAL STRUCTURE. This application also relates to U.S. patent application Ser. No. 13 228 714 filed Sep. 9 2011 now U.S. Pat. No. 8 352 680 entitled METHOD AND SYSTEM FOR FILE SYSTEM BASED CACHING which is a continuation of the U.S. patent application Ser. No. 12 763 059 filed Apr. 19 2010 now U.S. Pat. No. 8 078 802 entitled METHOD AND SYSTEM FOR FILE SYSTEM BASED CACHING which is a continuation of the above referenced U.S. patent application Ser. No. 11 348 645 filed Feb. 7 2006. All patents and applications listed in this paragraph are incorporated herein by reference in their entireties for all purposes.

This invention relates generally to a method of processing content at a network site and more particularly to a method of delivering and storing content at a network site a system and a computer program product for carrying out the method.

The Internet includes a large collection of computers operated under a client server computer network model. includes an exemplary hardware configuration for accessing a site on a network. A client computer is bi directionally coupled to a network such as the Internet. A web server is bi directionally coupled to the network a page generator and a cache . Cache may be part of the web server or as a separate hard disk. Specific methods of using the network are described in more detail below.

Many different types of protocols can support dynamic generation of customized pages. U.S. Pat. No. 5 740 430 Rosenberg and U.S. patent application Ser. No. 09 965 914 entitled METHOD AND SYSTEM FOR CACHE MANAGEMENT OF DYNAMICALLY GENERATED CONTENT filed on Sep. 28 2001 the Cache Management Application disclose methods and systems for caching custom pages to reduce page regeneration. In one conventional method a request for content in the form of a Uniform Resource Location URL can be sent from the client computer to the web server using the network . The web server can convert the URL to a customized URL or CURL. The web server uses the CURL to determine if the content is in the cache . If the content is in the cache a cache hit the web server retrieves the content from the cache and sends it to the client computer .

If the web server did not find the content within the cache a cache miss the web server instructs the page generator to generate the content. After generating the content the page generator sends the content to the web server . The web server computer stores the content to the cache in accordance with the CURL. After or during storing the content is sent from the web server to the client computer via the network .

The conventional method suffers from problems related to the design and distribution of operations between the hardware and software components at the network site. The process of storing a file is a time consuming process. If the web server stores content before sending it to the client computer the user of the client computer waits for the store to complete. Other users at different client computers not shown may also be affected because more of the web server s processing time is occupied by the storing operation. Therefore all users sending requests to the web server can also be impacted by any cache miss regardless whether they caused the cache miss.

Another problem with the conventional method is related to how files are stored in the cache . The cache may have potentially millions of files within a single discrete directory. The time needed to search the cache can be significantly longer when the number of files within a discrete directory becomes larger especially when over a million files are within one directory. Therefore even if a cache hit occurs valuable processing time on the web server is occupied searching the cache . Again all users at client computers making requests to the web server can be adversely impacted.

Still another problem is related to storing. More specifically all content generated by the page generator is saved within the cache . Therefore regardless whether the content or any portion of it is static or dynamic all content sent to the web server from the page generator is stored in the cache . If the content or any portion of it constantly changes blindly caching the content can effectively be a waste of valuable computer resources.

The conventional methods also cause a security concern. The web server can store content within the cache . In other words the conventional system can allow a user request to a network site to initiate a store operation to cache using the network site s server computer s . Network site operators and particularly their security personnel are concerned with any publicly initiated store operations using their server computers because such processes can be manipulated and can lead to potential security breaches.

A method and system for file system based caching can be used to improve efficiency and security at network sites. In one set of embodiments the delivery of content and storing content component s formed during generation of the content may be performed by different software components. Content that changes at a relatively high frequency or is likely to be regenerated between requests may not have some or all of its corresponding files cached. Content components may be cached independently from content so that multiple copies of a single component are not cached with every network page using that component. Also different content component s of the same network page may be stored within different directories. Additionally extra white space may be removed before storing to reduce the file size. File mapping may be performed to ensure that a directory within the cache will have no more than approximately 4100 files. Security at the network site may be increased by using an internally generated filename that is not used or seen by the client computer. Many variations may be used in achieving any one or more of the advantages described herein. None of the advantages by itself or collectively should be construed as an essential or critical to the invention.

In one set of embodiments a computer program can comprise code embodied in a non transitory data processing system readable medium. The code can comprise an instruction for sending requested content to a client computer. The instruction for sending can be performed using a first software component. The code can comprise an instruction for storing a content component that forms at least part of the requested content. The instruction for storing can be performed using a second software component. The sending of content may be performed by a web server or page generator software component and the storing may be performed by the page generator or a cache manager software component however the same software component should not be used for sending and storing.

In another set of embodiments the code can comprise an instruction for forming an instruction for generating content in response to a request. The content may comprise a content component. The code can also comprise an instruction for determining whether the content component is or is not to be stored within a cache.

In still another set of embodiments the code can comprise an instruction for parsing a request for requested content to form a parsed element corresponding to a caching related parameter. The code can also comprise an instruction for performing an operation in response to a value of the parsed element.

In other embodiments methods and systems can be used to perform actions in accordance with the instructions corresponding to the code of the data processing system readable medium. Additional actions may be performed by humans in conjunction with their associated computers. The computer program may reside on one or more computers.

The foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as defined in the appended claims.

Skilled artisans appreciate that elements in the figures are illustrated for simplicity and clarity and have not necessarily been drawn to scale. For example the dimensions of some of the elements in the figures may be exaggerated relative to other elements to help to improve understanding of embodiments of the invention.

Reference is now made in detail to the exemplary embodiments of the invention examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts elements .

A method and system for file system based caching can be used to reply more quickly to client computer requests cache more quickly and efficiency for only those content component s that should be cached reduce the file size of files cached optimize the number of files within directories improve security at network sites and potentially for other reasons. In one set of embodiments the delivery of content and storing file s used in generating the content may be performed by different software components that are on the same server computer or different server computers. Content that changes at a relatively high frequency or is likely to be regenerated between requests may not have some or all of its corresponding files cached. Also different content component s of the same network page may be stored within different directories. Additionally extra white space may be removed before storing to reduce the file size. File mapping may be performed to ensure that a directory within the cache will have an optimal number of files. Security at the network site may be increased by using an internally generated filename is not used or seen by the client computer. Many variations may be used in achieving any one or more of the advantages described herein. None of the advantages by itself or collectively should be construed as an essential or critical to the invention.

Before discussing embodiments of the invention a hardware architecture for using embodiments is described. illustrates an exemplary architecture and includes a client computer that can be bi directionally coupled to a network and a web server that is bi directionally coupled to the network page generator the cache manager and a cache . The cache manager can be bi directionally coupled to the page generator and the cache . Many other alternative configurations are possible and known to skilled artisans. For example the cache manager is not required and the computers and may be bi directionally coupled to the cache . Also the cache manager may be coupled to the web server to send filenames of files that are stored within the cache i.e. unidirectional coupling rather than bi directional coupling .

The client computer includes a central processing unit CPU a read only memory ROM a random access memory RAM a hard drive HD or storage memory and input output device s I O . The I O devices can include a keyboard monitor printer electronic pointing device e.g. mouse trackball etc. or the like. The client computer can include a desktop computer a laptop computer a personal digital assistant a cellular phone or nearly any other device capable of communicating over the Internet or an intranet.

The web server can include a CPU ROM RAM HD I O and a plug in . The page generator can include a CPU ROM RAM HD I O and a servlet engine . In one non limiting embodiment the page generator can be used to fulfill requests of coming from the web server . The cache manager can include a CPU ROM RAM HD and I O . Each of the computers in may have more than one CPU ROM RAM HD I O or other hardware components. For simplicity each computer is illustrated as having one of each of the hardware components even if more than one is actually used.

Details of the web server plug in and the servlet which can be software modules are described below in more detail. Although the plug in and servlet are typically stored in HD and HD respectively and loaded into RAM and RAM respectively when used. The plug in and servlet are illustrated as separate components to simplify understanding of the invention.

Each of the computers and is an example of a data processing system. ROM and RAM and HD and and the cache include media that can be read by the CPU or . Therefore each of these types of memories includes a data processing system readable medium. These memories may be internal or external to the computers and .

The methods described herein may be implemented in suitable software code that may reside within ROM or RAM or or HD or . In addition to those types of memories the instructions in an embodiment of the invention may be contained on a data storage device with a different data processing system readable storage medium such as a floppy diskette. illustrates a combination of software code elements and that are embodied within a data processing system readable medium on HD . Alternatively the instructions may be stored as software code elements on a DASD array magnetic tape floppy diskette optical storage device or other appropriate data processing system readable medium or storage device.

In an illustrative embodiment of the invention the computer executable instructions may be lines of compiled C Java or other language code. Other architectures may be used. For example the functions of any one of the computers may be performed by a different computer shown in . Additionally a computer program or its software components with such code may be embodied in more than one data processing system readable media in more than one computer. Further other client computers not shown or other server computers not shown similar to client computer and server computers and respectively may also be connected to the network . include illustrations in the form of a flowchart of the structures and operations of such software programs.

In the hardware configuration above the various software components e.g. web server page generator cache manager or the like are on separate server computers. In alternative embodiments some or all of the software components may reside on the same server computer. For example the web server software component and the page generator software component could reside on the same server computer. For simplicity each of the software components in the embodiments below resides on different server computers.

Communications between any of the computers in can be accomplished using electronic optical radio frequency or other signals. When a user is at the client computer the client computer may convert the signals to a human understandable form when sending a communication to the user and may convert input from a human to appropriate electronic optical radio frequency or other signals to be used by the client computer or the server computer or . Similarly when an operator is at a server computer or that server computer may convert the signals to a human understandable form when sending a communication to the user and may convert input from a human to appropriate electronic optical radio frequency or other signals to be used by a server computer or or the client computer .

A few terms are defined or clarified to aid in understanding the descriptions that follow. A network includes an interconnected set of server and client computers over a publicly available medium e.g. the Internet or over an internal company owned system. A user at a client computer may gain access to the network using a network access provider. An Internet Service Provider ISP is a common type of network access provider. A network address includes information that can be used by a server computer to locate information whether internal to that server computer or at a different remote computer or database. Uniform Resource Locators URLs are examples of network addresses. A network site typically includes network pages or other information displays at different network addresses for that network site. A web site is a common type of network site and a web page is a common type of network page. Note that the examples given within this paragraph are for purposes of illustration and not limitation.

The term content is intended to mean information sent from a network site to a client computer in response to a request from a user at the client computer. The content is typically in the form of a network page.

The term content component is intended to mean at least a portion of the content. In many instances the content can include a plurality of content components. However in some instances the content can be a single content component.

Content a content component or both may include a static or dynamic file. A static file does not typically change with time. A dynamic file typically changes with time. Dynamic files may change at a relatively low frequency e.g. daily weekly monthly annually etc. or at a relatively high frequency e.g. hourly or more frequently different content each time it is requested etc. .

The term network site is intended to comprise computers used during the normal operation of the network site in response to a request from a client computer. The client computer is outside the network site but may request content from the network site via communications with web server .

The term software component is intended to mean at least a portion of a computer program i.e. a software application . Examples include a web server software component a page generator software component a cache manager and the like. Different software components may reside in the same computer program or in different computer programs on the same computer or different computers.

The term white space is intended to mean occurrences of information within source code that is ignored by computer if the source code were to be compiled or interpreted by a computer. For example if one space two spaces or one hundred spaces lie between characters a computer can treat any of these as a single space or no space between characters. Other white space may include tabs and new line commands.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a method process article or apparatus that comprises a list of elements is not necessarily limited only those elements but may include other elements not expressly listed or inherent to such method process article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

When a cache miss has occurred the method can comprise generating the content or any of its content component s at the page generator as shown in block of . The method can also comprise tracking content component s and instruction s used in generating those content component s collectively tracking information block . After capturing the tracking information the method can further comprise sending the generated content from the page generator to the web server block . The method can still further comprise adding content to or modifying the generated content consistent with a web server inclusion block and sending the requested content to the client computer block .

Any time after the generated content is generated B reference in the method can still further comprise forwarding the content component s and tracking information from the page generator to the cache manager as shown in block of . A determination can be made as to which content components if any should be cached diamond . The method can also comprise preprocessing the content component s before storing block . The method can yet further comprise caching content component s into the cache and updating the file registry at the web server block .

After reading this specification skilled artisans will appreciate that some of the activities described in may not be required but may provide a more efficiently running network. Also some of the operations may be moved from one network site computer to another network site computer in order to return requested content to client computers faster. Attention is now turned to a more detailed description of the method illustrated in and its variants.

Before beginning the method illustrated in an operator at the network site may develop a mapping algorithm. The mapping algorithm can take the URL and other information with the user request e.g. locale language browser operating system etc. collectively client request and parse the client request into parsed elements that may correspond to different parameters. The software components particularly the web server and the page generator may analyze the parsed elements in determining what content should be sent to the client computer . Some of the parameters can be used for web server side inclusion s . More information about the web server side inclusions is described later in this specification. Another parameter can include a user identifier query string a markup language for the client computer e.g. HTML WML etc. operating system of the client computer a locale or language associated with the client computer or the like. The parsing is highly flexible and can be adapted differently to different network sites.

Returning to block in a user at client computer can send and the web server can receive a client request including a URL. As an example of the URL portion of the client request can be http vvww.homedepot.com diy main pg diy.jsp CNTKEY growit . The method can further comprise applying the mapping algorithm previously described to the client request to parse the client request to form parsed elements that correspond to different parameters. At least one of the parsed elements may correspond to a caching related parameter that can be used to determine when a content component is to be regenerated or its context. The context may include information that can allow a cache manager to later reconstruct an original client request for content that includes the content component in order to perform regeneration and caching of the content component.

The method can comprise generating a mapped filename from at least one of the parsed elements block . One format can comprise a naming convention that uses concatenation of the parsed elements with commas to separate the fields. For example 0 CNTKEY growit 00 EN US.html may be used. A software component such as the web server or the page generator may analyze the parsed elements to determine what content is needed for the client request.

Optionally the method can comprise generating a mapped filename from at least one of the parsed elements block by applying a hashing function over the parameters in those parsed elements. For example all the parsed elements may be used in the hashing function. The hashing function may help to control filename explosion within a discrete directory and help keep the number of files in a directory closer to an optimal level for the specific hardware and software configuration used at the network site. For example the filename might become EN US hash00345 CNTKEY growit.html .

By using a hashing function to cache files into separately named discrete directories the method can manage the size of the directory in which a file is cached to a number of files that keeps access and updating operations at an efficient level. In one non limiting embodiment the number of files within a discrete directory can be at a level such that file searching operations can be performed close to the speed of the storage system e.g. a hard disk . The manageable number may depend on hardware or other limitations of the system. For example in one system when the number of files per directory is greater than approximately 4100 files file operations may begin to take longer than the hardware limitations of a hard disk. The filename mapping can create a filename that allows efficient reproduction of a request for cache regeneration.

The mapping algorithm needs to be known by the software components in the network site for accessing generating and storing cached content but a particular algorithm such as using a hashing function is not required to achieve the caching capabilities described herein. Nearly any mapping algorithm can be used. Concatenation and hashing have been described. After reading this specification skilled artisans will appreciate that many other algorithms can be used. The mapping algorithm produces the mapped filename that may correspond to the client request but uses an internal format understood by software components within the network site. The plug in can be used to perform the parsing and mapping functions.

After the filename has been identified in accordance with the algorithm the method can further include determining whether the file s is are in the cache diamond . This determination can be performed using a conventional method. In one embodiment after generating the mapped filename the web server can refer to a file registry within the web server to determine if the mapped filename corresponds to i.e. matches a file within the cache . If at least one file matches the filename the method can comprise retrieving the file s and sending it them to the client computer block . At this point the method may end.

In still another embodiment the file s may be cached in a memory only cache with no disk for persistence e.g. in a volatile memory . The hash can define how to find the file s without regard to the directory structure within the cache.

In another alternative embodiment the web server can perform a web server side inclusion. If some but not all of the content component s are in the cache the web server may retrieve the file s for those content component s from the cache and send an instruction to the page generator to generate the missing content component s . After generation those remaining content component s are sent to the web server where they can be included with the retrieved file s .

After the web server has all the retrieved or generated content components the web server can add to or modify information from the file s before sending the content to the client computer . For example if the client computer is a cell phone that is designed to work in WML and the content received by the web server is in HTML the web server can convert the content in HTML to WML. Alternatively the display for client computer may vary from device to device. For example if the client computer is a cell phone the web server side inclusion can reformat the information to be more user friendly for a cell phone. Note that the internal mapped filename may or may not be sent or otherwise be available to the client computer . Therefore the client computer does not know the true filename at the network site since the internal mapped filename may include the hashed value needed to locate it within the back end systems of the network site e.g. cache .

If any file corresponding to the content is not within the cache No branch of diamond the method can further comprise generating the content or any of its content component s at the page generator as shown in block in . The page generator can generate the network page or any of its content components that were not in cache .

During content generation the method can also comprise tracking content component s and instruction s used in generating those content component s block . Assume that a fresh page is being created for the first time and requires a content component to be created and the content component is to be cached separately. During page generation of the overall page APIs should be configured such that they can cause the content component to be generated as well to track or capture the start and end of the generated content component in the overall page so that the parameters for it are understood as well as the position and extent of the content component. Other tracking information generated by the APIs may correspond to web server side inclusions which have previously been described. This information might be embedded in markers in the overall page or stored separately from the overall page. This tracking information can be captured by the page generator and then used by the cache manager to store the overall page and its embedded content component as two separately cached pages with a reference to the content component left in the overall page. In this manner the content component can be referenced by other pages but stored only once.

Examples of content components that may not be cached can include content that changes at a relatively high frequency e.g. dynamic files with content that changes on an hourly basis or more frequently such as news headlines or content that is infrequently requested e.g. the file may be flushed from the cache before a subsequent request for the same file would occur . For example prior purchases by the user at a network site may not be cached. In one non limiting embodiment the servlet may be a J2EE compliant servlet engine for Java Server Pages JSP . Other types of page generators may be used.

After the content has been generated by the page generator the method can continue with sending the generated content from the page generator to the web server block . The method can further comprise adding content to or modifying the generated content consistent with web server side inclusion s block . The adding or modification using the web server side inclusion as previously described. Alternatively the addition or modification may be a change in a markup language HTML to WML reformatting the content for the particular display of the client computer e.g. cell phone personal digital assistant pager laptop computer etc. including the local time of the client computer or potentially other additions or modifications.

After the web server side inclusions if any the method can comprise sending the requested content to the client computer block . Note that the activities used in storing any or all the generated content to the cache may not be completed or even started before the requested content is sent to the client computer . Therefore the client computer should receive the requested content quicker compared to conventional methods.

In an alternative embodiment the method can include removing or hiding the internally formatted filename from external viewing at the client computer . This can be accomplished using simple references e.g. numeric references to a managed table that contains the data. The managed table along with the indices from the API tracking information can allow an indirect agent e.g. cache manager to subsequently store the cached version of generated content to memory e.g. to database while keeping the source reference hidden from the requesting client computer .

Referring to reference B in the method can further comprise forwarding the generated content and tracking information generated by the APIs from the page generator to the cache manager as seen in block in . The generated content can comprise metadata about where to cache the content component s if it is they are to be cached. The metadata can include opt in or opt out parameters such as whether or not to cache any specific content component and potentially other parameters so that effective cached file names at least partially human understandable names can be used. Other metadata about the cached file may include information regarding when or how often content for the content components will be updated revised or the like. For example the metadata can include Time To Live TTL information so that automated updates to the content component s can occur. This other metadata may be separately provided to the cache manager by a configuration file as a message to the cache manager or the like.

A determination can be made whether file s for the generated content is are to be cached diamond . If none of the generated content is to be cached No branch of diamond the process can end.

Otherwise Yes branch of diamond the method can include preprocessing the content component s before storing them. Examples include removing any or all of the white space within the source code of the content component encrypting the content component counting instances of a particular character set of characters object or the like and nearly any other information that an operator of the network site may desire.

The method can include caching content component s at location s corresponding to the mapped filename s and updating the file registry for the web server block . Note that caching a content component should be construed to include adding or updating an entry within a database.

The cache manager can use a temporary file during the mapping and storing portions of the caching operation. As the generated content is received by the cache manager and placed into a temporary file the API markers or other metadata corresponding to an aspect of caching e.g. whether a content component is or is not to be cached timing regarding updates of cached material or the like are examined.

The cache manager can produce TTL timers on its own or that correspond to one of the parsed elements caching related parameter from the client request so that updates can occur on a set schedule which can be arbitrarily determined for a given application. The file based caching method can thus provide savings in system performance with regards to the cached file production can fit naturally into a network site environment and can provide for a more secure site the cache manager can live behind a network site s firewall not shown in such that no processes outside of the firewall can initiate a write to cache .

Alternatively or in conjunction with the TTL timers the cache manager can also use a caching related parameter from the parsed elements to determine which network pages need to be regenerated when a specific content component is regenerated sometimes because the prior information is stale or incorrect .

During mapping the cache manager can refer to the API tracking information before caching the content component s but can still maintain an association between the cached file and the tracking information by virtue of mapping. The mapped filename s can be the final cache destination s of the file s that is are to be cached. The cache manager can store the file s within the cache and then delete the temporary file. Note that the generation of a temporary file or the storing of the content component is not performed by the web server . After mapping and caching are completed information from the cache manager can be sent to the web server to update the file registry so that the web server can directly access the cache for the next request for the same or similar content.

In another embodiment the mapped filename can be generated and temporarily block for a different request for the same content or different content using a common content component that is currently being generated. The blocking may last until the cache placement storing to cache is completed so that subsequent requests are blocked until the content component is cached. In another embodiment the blocking may be shorter. For example the blocking can terminate after the content component is generated if the page generator has access to the mapped filenames or the ability to generate them. In this manner duplicate requests for the same content component s content component being generated or just have may be substantially prevented during the time it takes to produce a cached content component.

In still another embodiment the page generator may also act as the web server and may fulfill requests from the client computer directly. In yet another embodiment the page generator may also act as the cache manager . However the same software component should not deliver content to the client computer and store content component s .

An advantage in some embodiments may include the faster delivery time of content to the client computer . Note that the caching of the file s corresponding to the generated content can occur asynchronously with respect to the operations at the web server . If the cost of producing a cached page in a conventional system e.g. is C C C where C cost the network site configuration in FIG. can eliminate the placement costs by using the servlet to cause at least a portion of the content component being generated to be stored asynchronously. Therefore the requested content can be provided to client computer without the performance hit caused by storing or caching any or all of the content since the storing or caching operation is not performed by the web server .

Still another advantage in one embodiment can include the ability to selectively cache or not cache file s content component s for a generated network page. A network site designer or operator may determine what is or is not to be cached by the cache manager . Any file used within the generated content that is dynamic and changes at a relatively high frequency e.g. new data for every time it is generated or is likely to be regenerated between requests should not be cached. Caching those file s can represent wasted space within the cache and the file directory used with the cache. This aspect of the network site is transparent to the user at client computer except that he or she gets requested content back quicker.

A further advantage can include independently caching content components from network pages. Some of the content components i.e. files may be used in other network pages. Storing multiple copies of the same information occupies additional memory space and slows retrieval of this or other content component s since the number of stored files may be greater. Therefore the number of copies of the content component will be less than the number of network pages in which the content component is used and may be as little as one copy of the component. Also content component s may be stored at locations independent of other content component s within the same network page. This can allow better control over the number of files within each discrete directory and speed the read access time for the content component. Additionally quicker retrieval can translate to quicker delivery of already cached content.

Another advantage in one embodiment may include removing excess white space. Excess white space removal can be an optimization for the cached file because it reduces the number of bytes delivered over the network e.g. the Internet . By eliminating the white space the size s of file s may be 30 smaller within the cache . Note that in a non limiting embodiment the removal of the white space from a content component is permanent. Simply put this removal is not conventional file compression. Such a savings can be realized in faster writing and reading times for files.

In the foregoing specification the invention has been described with reference to specific embodiments. However one of ordinary skill in the art appreciates that various modifications and changes can be made without departing from the scope of the invention as set forth in the claims below. Accordingly the specification and figures are to be regarded in an illustrative rather than a restrictive sense and all such modifications are intended to be included within the scope of invention.

Benefits other advantages and solutions to problems have been described above with regard to specific embodiments. However the benefits advantages solutions to problems and any element s that may cause any benefit advantage or solution to occur or become more pronounced are not to be construed as a critical required or essential feature or element of any or all the claims.

