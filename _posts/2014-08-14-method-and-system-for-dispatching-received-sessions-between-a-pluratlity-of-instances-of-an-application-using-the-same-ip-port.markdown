---

title: Method and system for dispatching received sessions between a pluratlity of instances of an application using the same IP port
abstract: A logical module, referred as Load Balancer Module (LBM), is disclosed which listens to one of certain common predefined port number. These well-known ports for receiving communication video conference signaling and control protocols is thereafter load balanced and multi-plexed to a number of instances of protocol stack applications. By balancing the multi-media data stream across a multitude of application instances multiple multi-media data streams may be serviced and processed by a single internet protocol host processor. A multipoint control unit (MCU) may therefore process multiple input data streams containing multi-media video conferencing information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09379984&OS=09379984&RS=09379984
owner: Polycom, Inc.
number: 09379984
owner_city: San Jose
owner_country: US
publication_date: 20140814
---
This Application is a continuation of U.S. patent application Ser. No. 12 357 001 filed Jan. 21 2009 entitled Method and System for Dispatching Received Sessions Between a Plurality of Instances of an Application Using the Same IP Port which claims priority to U.S. Provisional Patent Application Ser. No. 61 117 619 filed 25 Nov. 2008 all of which are hereby incorporated by reference in their entirety.

The subject matter of the present disclosure relates to the field of multiple application programs running on the same IP host and communicating simultaneously over the Internet and more specifically to the need of system and method to enable multiple instances of the same application program to listen on the same IP port simultaneously.

As the network traffic continues its rapid growth and more and more developers introduce network products and solutions there is an increasing number of application programs processes that use a predefined well known network port. Some of these application programs need to listen on a single well known predefined Transmission Control Protocol TCP and or Transport Layer Security TLS and or User Datagram Protocol UDP port number for example. Session Initiation Protocol SIP and H.323 Protocol are examples of such application programs processes that need to listen on such a well known TCP or UDP port number. H.323 Protocol application programs listen on TCP port number 1720 while SIP application can listen to TCP or UDP port number 5060 or over port 5061 for encrypted video and or audio conferencing session based on TLS TCP transport protocol for example. In a common architecture of videoconferencing networks SIP clients are connected via a SIP proxy to a Multipoint Control Unit MCU . The transport protocol between the SIP proxy and the MCU can be configured by an administrator. There are some cases in which more than one transport protocol can be used between the proxy and the MCU.

Different types of network devices may be able to achieve better scalability robustness and load balancing if they have the ability for two or more instances of an application program process to run simultaneously using the same specific port number. An example of such a network device is an MCU. An MCU is a conference controlling entity located in a node of a network or in a terminal. An MCU receives and processes according to certain criteria a plurality of media signaling and control channels from access ports and distributes these to connected channels. Examples of MCUs include the MGC 100 and RMX 2000 Polycom Inc. . MCUs can be composed of two logical units a media controller MC and a media processor MP . A more thorough definition of an endpoint terminal and an MCU can be found in the International Telecommunication Union ITU standards such as but not limited to the H.320 H.324 and H.323 standards. The MCU is required to handle a plurality of sessions between a plurality of users clients simultaneously. Thus MCU may require using simultaneously more than one instance of the same application program H.323 for example for the different sessions. Unfortunately the Operating System OS has a port listening limitation in that only a single application application instance process can listen on a specific port number on the same IP host. In this disclosure the terms application application program and process may be used interchangeably.

H.323 is an International Telecommunications Union ITU standard that provides specification for computers equipment and services for multimedia communication over packet based networks that defines how real time audio video and data information is transmitted. H.323 is commonly used in VoIP Internet Telephony and IP based videoconferencing. Users can connect with other users over the Internet and use varying products that support H.323. This standard includes the Internet Engineering Task Force IETF Real Time Protocol RTP and Real Time Control Protocol RTCP with additional protocols for call signaling and data and audiovisual communications.

IETF SIP is an application layer control protocol a signaling protocol for Internet Telephony. SIP can establish sessions for features such as audio videoconferencing interactive gaming and call forwarding to be deployed over IP networks thus enabling service providers to integrate basic IP telephony services with Internet e mail and chat services. In addition to user authentication redirect and registration services SIP Server supports traditional telephony features such as personal mobility routing and call forwarding based on the geographical location of the person being called.

There are techniques that provide the ability for an application program to listen for incoming calls on multiple ports. But such a system requires adding in the Operating System OS transport components and Network components not always possible . Such system also may require predefining strings that a user client will need to transmit in order to connect to that application. A user client that does not know the predefined string will not be able to refer and connect to such an application program. Furthermore such system will not enable a plurality of instances of the same application to listen on the same port. Other techniques provide the ability to dispatch connection services multiple different application instances to listen on a single static port. Those methods require predefining a unique ID for each application instance and notifying the clients of these unique IDs or else the clients will not be served. In this disclosure the terms user and client may be used interchangeably.

Therefore there is a need in the art for a method and a system that will enable multiple application instances to operate simultaneously using the same listening port. It is desirable that such a method and system would not require that clients be informed of a predefined unique ID or special strings to be served. It is also desirable that no changes in the OS level would be required.

The above described needs are met using the disclosed methods and apparatus systems that enable multiple application instances to use the same listening port simultaneously using a load balancing scheme. The method and apparatus do not require any changes in the Operating System.

A logical module referred as Load Balancer Module LBM listens to a certain common predefined port number. Port number 1720 is a well known port for receiving communication based on H.323 protocol for example. An exemplary H.323 LBM can be configured to listen to port number 1720 for receiving H.323 connection requests for all H.323 instances tasks . Another exemplary LBM can be configured to listen to well known port number 5060 and or 5061 for communication based on SIP protocol SIP LBM . H.323 communication is based on TCP while SIP communication can be based on TCP TLS TCP or UDP. In an exemplary architecture of videoconferencing networks SIP clients can be connected via a SIP proxy to an MCU implementing exemplary techniques as disclosed herein. The transport protocol between the SIP proxy and the MCU can be configured by an administrator for example. In some cases more than on transport protocol can be used between the proxy and the MCU.

H.323 LBM is connected to a plurality of instances tasks of a H.323 stack. SIP LBM is connected to a plurality instances tasks of SIP stack. In one embodiment the internal connection between each LBM and its associated instances can be via a connection set by the LBM using a file descriptor transferring mechanism such as but not limited to Unix Domain Socket for example. In other embodiments the connection between the LBM and the instances can be via a shared memory for example. The connection between the different instances such as but not limited to SIP and H.323 and the LBM can be established at power on for example.

An exemplary LBM can request to listen to the relevant port. In response a listening socket is defined by the OS. Once a request for new TCP connection is received via the relevant port such as port 1720 the Operating System OS transfers the request to H.323 LBM. Thus only the H.323 LBM receives the H.323 connection request. In response for accepting the new TCP connection a randomly chosen Socket Number is selected by the OS to be associated with the newly received TCP connection. The new socket is transferred to the H.323 LBM. Next the H.323 LBM can locate an available H.323 instance task to handle the call.

An Active Call Counter for each H.323 instance can assist the H.323 LBM in its decision to which H.323 instance to transfer the call. The Active Call Counter can be a counter that counts the amount of active calls the specific H.323 instance is handling. The Active Call Counter is updated each time an active call has been terminated or a new call has been received for that specific instance. H.323 LBM can decide to transfer the new connection request according to the H.323 instance that has the smallest Active Call Counter value for example. In some embodiments if no instance task of the application is available then LBM can initiate one.

H.323 LBM can forward the associated Socket Number using a descriptor sharing mechanism such as but not limited to UNIX Domain Socket wherein the header indicates that a socket is transferred. In response the selected instance will receive a new socket number for handling the call via the same IP port for receiving and sending data. According to another exemplary embodiment in which plug in Silicon Operating System pSOS is used a sharing socket system call shr socket can be used as socket sharing mechanism. Additionally other methods can be used to share the same descriptor by two or more applications.

These and other aspects of the disclosure will be apparent in view of the attached figures and detailed description. The foregoing summary is not intended to summarize each potential embodiment or every aspect of the present disclosure and other features and advantages of the present disclosure will become apparent upon reading the following detailed description of the embodiments with the accompanying drawings and appended claims.

Furthermore although specific exemplary embodiments are described in detail to illustrate the inventive concepts to a person skilled in the art such embodiments are susceptible to various modifications and alternative forms. Accordingly the figures and written description are not intended to limit the scope of the inventive concepts in any manner.

Turning now to the figures in which like numerals represent like elements throughout the several views exemplary embodiments aspects and features of the disclosed methods systems and apparatuses are described. For convenience only some elements of the same group may be labeled with numerals. The purpose of the drawings is to describe exemplary embodiments and not for limitation. The timing interval between the different events in the timing diagrams is not necessarily shown to scale.

MCU can be a network device application server working on IP network. MCU is only one of many different network devices application servers that can implement the teachings of the present description.

Plug connects MCU via an appropriate link to a LAN Local Area Network based on Ethernet for example. Network Interface Card processes the OSI s Open System Interconnection Physical Layer and Data Link Layer of the communication. Operating System OS among other functions processes the Network layer and Transport Layer of the communication according to the appropriate protocols IP protocol TCP UDP etc.

OS may include a Network Module a TCP Transport module and a UDP Transport module . Network Module can include among other objects an IP Network Stack for example. Network Module receives its communication from the NIC and processes the OSI s Network Layer. Network Module parses the IP header of the packets. The IP header can include among other things the destination IP address destination port number source IP address source port number and the type of the transport protocol. OS randomly defines a socket number and or for the received communication according to the above four parameters destination IP address destination port number source IP address and source port number. Network Module can transfer the communication to TCP Transport module or to UDP Transport module according to the protocol mentioned in the header TCP or UDP for example . Over port 1720 TCP communication of H.323 call requests is transferred. Over port 5060 un encrypted UDP or TCP communication of SIP sessions is transferred. Over port 5061 encrypted TLS communication of SIP sessions is transferred. The used transport protocols for SIP sessions can vary and can be configured by an administrator periodically. In some cases only UDP is used with a port number 5060. In other cases TCP is used with port 5060 or with port 5061 for TLS encrypted sessions. Yet in alternate embodiment all the three options can be used.

TCP Transport module processes the Transport Layer level of the OSI and can comprise among other objects a TCP transport stack. TCP Transport module processes the communication from ports 1720 5060 and 5061. TCP Transport module can transfer the request for communication either to a H.323 Listening Socket or to a SIP Listening Socket or or according to the listening port from which the data was received and the used transport protocol for example.

The UDP Transport module processes the Transport Layer level of the OSI and can comprise among other elements a UDP transport stack. UDP Transport module processes communication received from port 5060 and can transfer the request for communication to a Listening Socket . More information on the operation of OS is disclosed below.

The MCU Application Layer can comprise two Load Balancer modules H.323 LBM and SIP LBM . Each Load Balancer includes an API application programming interface or to communicate with H.323 Instances or with SIP Instances respectively. Exemplary API commands can be add delete clear and so on. Each LBM may request from OS at initiation a Listening Socket. H.323 LBM may be associated with a Listening socket for TCP communication on port 1720. SIP LBM may be associated with three Listening sockets listening socket for encrypted TLS TCP communication received via port 5061 listening socket for unencrypted TCP communication received via port 5060 and listening socket for unencrypted UDP communication received via port 5060. The transport protocol between the SIP proxy and the MCU can be configured by an administrator. There are some cases in which more than one transport protocol can be used over the connection between the proxy and the MCU .

In another example three LBMs can be used one for H.323 one for un encrypted SIP and one for encrypted SIP based on TLS protocol. Still alternatively a single LBM can be used for handling the three types of communication TCP communication received via port 5060 unencrypted UDP and TCP communication received via port 5060 and encrypted communication based on TLS TCP received via port 5061 .

Each SIP call is associated with a Call ID. The Call ID CID represents a specific SIP call with a specific SIP client. Therefore SIP LBM may include a Parser that partially parses the communication received to determine the CID and transfer it to the appropriate SIP Instance that handles the communication with that client. SIP LBM may also include a Decrypter and TLS stack to decrypt the TLS communication received from TCP Transport module via port 5061 to enable the parsing of the communication and determining the CID.

A plurality of sockets and or may be created and terminated to enable communication between different H.323 Instances or SIP instances and H.323 clients or SIP clients respectively. As mentioned above OS randomly defines socket numbers and or for communication according to four parameters destination IP address destination port number source IP address and source port number. The socket number used for SIP instances represents the listen socket and the instance . The first letter represents the listen socket and the second letter represents the instance number . Accordingly an exemplary socket represent listen socket and SIP instance for example. So there are configurations in which the number of sockets that are used by SIP instances is the product of the number of listening sockets as function of the transport protocols and the ports and the number of SIP instances. In the example of it can be nine sockets.

Yet in another exemplary embodiment other combinations of transport protocols can be used between MCU and the SIP proxy. Some embodiments may use only TLS TCP for example. In such an embodiment MCU may comprise one transport protocol module TCP transport module one listening socket and three instance s sockets for example

At the MCU Application Layer two Socket tables are up dated with the socket numbers. A H.323 Socket table associated with H.323 communications and a SIP Call ID CID table associated with SIP communications. H.323 Socket table is managed by H.323 LBM . SIP CID table is managed by SIP LBM . Each entry in the H.323 Socket table includes information that is relevant to an H.323 session such as but not limited to an entry ID an associated socket number and an associated H.323 Instance allocated to handle the session. Each entry in the SIP CID table comprises information that is relevant to a SIP session such as but not limited to the CID of the SIP session an associated SIP Instance that was allocated to handle the session and the listening socket from which the call is received etc. The tables are created and managed by the appropriate LBM and are used by the relevant LBM for routing calls to appropriate instances.

Each LBM H.323 LBM and SIP LBM can include a plurality of Active Call Counters. H.323 LBM can include an Active Call Counter for each H.323 Instance . The Active Call Counter is incremented by one for each new incoming call for the specific H.323 Instance and decremented by one for each active call that terminates at the specific H.323 Instance . SIP LBM can include an Active Call Counter for each SIP Instance which operates in a similar manner as H.323 Active Call Counter for the SIP instances . According to the values of each active call counter the communication load over the instances can be balanced.

An exemplary H.323 instance can comprise a H.323 stack for handling the H.323 signaling and control communication with the plurality of conferees that have been associated with the relevant instance. In addition each H.323 instance can include an API module for communicating with the H.323 LBM . An exemplary SIP instance can comprise a SIP stack and an API module . The SIP stack handles the SIP signaling and control communication with the plurality of conferees that have been associated with the relevant instance. The API module can communicate with the SIP LBM . In exemplary embodiments of SIP instance in which the communication is encrypted based on TLS TCP the exemplary SIP instance can include a TLS encryptor module. The TLS encryptor can be used to encrypt the SIP signaling and control data before sending it toward the relevant conferee.

At T H.323 LBM requests from the OS to listen on TCP connection requests received via port 1720. In return at T the OS sends a socket number to H.323 LBM to serve as the Listening Socket on port 1720. Then a TCP SYN is received T from a client on port 1720 requesting to establish a new TCP connection. OS responds by sending at T a TCP SYN ACK Acknowledge . Once the TCP SYN ACK has been received the client sends T a TCP ACK as an indication request to establish a H.323 communication session.

Next at T OS sends via listening socket the request to H.323 LBM for setting a H.323 connection with the client. In return H.323 LBM sends at T a H.323 accept connection. OS returns T an accepted with new socket for example through which the session will be handled. Upon receiving the new socket LBM can determine which H.323 instance will handle the call. The selection can be based on the value of the Active Call Counter associated with each instance. After selecting an instance the H.323 socket table is updated with the new socket number and the identification of the selected instance for example.

At T H.323 LBM sends an API command to ADD the new session which is received via socket to the selected H.323 Instance . The ADD command is transferred via Unix Domain Socket wherein the header indicates that a socket is transferred and the socket number is transferred as payload. In response a second socket number which can be selected randomly is delivered to the selected instance for example. Each number and can be used by different applications LBM H.323 and the selected instance respectively for accessing the same file descriptor. As a result a new socket number is allocated for the session on which the selected instance can execute the session. Consequently a pair of sockets for the session is created . is used by the H.323 LBM and is used by the selected instance. The rest of the H.323 session with the client is conducted by the selected H.323 instance using the socket number . In a similar way sockets and can be allocated for sessions handled by H.323 instance and sockets and can be allocated for sessions handled by H.323 instance

At T the H.323 client sends H.323 data that can include H.323 call setup information in order to establish the H.323 session. The H.323 data is transferred at T on both sockets and . However only the selected H.323 instance for example reads the H.323 data and responds to the requests.

Turning now to which is the continuation of the timetable of the same H.323 session at T the selected H.323 instance for example sends H.323 data using the Socket number . At T the OS sends the H.323 data toward the client. At T the client sends a data H.323 packet . OS transfers the packet of H.323 data via socket to the selected H.323 instance at T . The session can continue via socket until the end of the session.

At the end of the session T the client can send an H.323 end of session indication. The end of session indication can be sent at T from the OS to the selected instance via socket . At T a release call indication is sent via socket that closes socket . An API command DELETE is sent at T from H.323 instance to the H.323 LBM using UDS via the connection that was opened at T. Once an API DELETE command is received H.323 LBM sends T a close socket command to OS . OS then sends at T a close TCP connection to the client by using TCP FIN command. It will be appreciated that similar processes can execute simultaneously for other H.323 sessions with other instances using other sockets.

After the initiation processes an internal connection between H.323 LBM and each one of the H.323 instances is established . The internal connection can be based on file descriptor transferring and or file descriptor sharing mechanism such as but not limited to Unix Domain Socket for example.

At this point H.323 LBM can request the OS to listen on TCP port 1720. If a listening socket number is not received then an error message can be sent to the OS and method can be terminated .

When a listen socket number is received method starts a loop between steps and for handling H.323 communication sessions. At steps and method waits to receive an event. An event can be received from the OS or from one of the H.323 instances . If the event received is a DELETE API command via one of the connections that was set in step from one of the instances then a relevant entry from the H.323 socket table is retrieved and parsed. The relevant entry is retrieved based on the entry ID number that can be associated with the API DELETE command. According to the content of the entry a close socket request for closing the socket that was allocated to the LBM for handling the relevant session is issued. The Active Call Counter that was allocated to the relevant instance is decremented by one and the relevant entry in H.323 socket table is released. In response to the close socket command OS sends a TCP FIN to the relevant client for closing the TCP connection.

If at the event is received via the listening socket which indicates a new H.323 connection request then the LBM may accept the new call which is received via the listening socket . In response a new socket number is received for carrying the new H.323 session and method continues to the steps that are illustrated in . The new socket can be one of the sockets for example

At step method may determine which H.323 instance is available for handling the call. The decision can be based on checking the Active Call Counter of each one of the instances and selecting the one with the least number of sessions for example. If at an available H.323 instance is found for example its associated Active Call counter is incremented. An entry in the H.323 socket table is allocated for the session the entry is updated with an entry ID the allocated socket e.g. and the selected instance e.g. . API ADD command is then sent via Unix domain Socket connection to the selected instance. The header of the Unix domain Socket message can indicate that it is a socket transferring message. The content of the message can include the new socket number and the entry ID number for example. In response the selected instance for example will get another socket number to be used for the session. Alternatively another file descriptor sharing mechanism can be used. At this point method returns to step to wait for the next event.

If at there is no available H.323 instance then LBM may create a new instance not shown in the drawing and set an internal connection with the new instance as was done in step above and continue to step . In an alternative embodiment if an available instance is not found the call can be rejected.

At the beginning of the illustrated flow diagram at Tto TSIP LBM establishes connections with each one of the SIP Instances . The connection with the instances can be done by file descriptor transferring mechanism such as but not limited to Unix Domain Socket UDS . After setting the connection with each one of the instances SIP LBM can request at T from OS to open a SIP transport socket over UDP port 5060. In return at T OS sends a socket number to SIP LBM that will serve as the SIP transport Socket STS on UDP port 5060 for incoming SIP data.

The socket number is transferred at T Tvia Unix domain Socket connection established before at T T to each one of the SIP instances . The header of the Unix domain Socket message can indicate that it is a socket transferring message. The content of the message can include the SIP transport socket number for example. Consequently each of the SIP instances receives another number to be used as STS through which each SIP instance will send SIP data to the relevant clients via the UDP port 5060 and the SIP proxy.

At T a SIP client can send a SIP packet with SIP data or SIP Invite request toward UDP port number 5060. The SIP data is associated with a certain Call ID CID which was allocated by the client that initiated the SIP call. At T the proxy transfers the SIP packet to MCU . OS after processing the IP header and the UDP header transfers at T the SIP data to SIP LBM via SIP transport socket . SIP LBM can parse the SIP data by parser and determine whether the data is an invite request of a new SIP session or SIP data of an existing SIP session. If it is an existing SIP session based on the CID of the session an entry is searched in SIP CID table . The entry is parsed for identifying the allocated SIP instance that handles the session for example instance . Then at T the SIP data is transferred as a Unix Domain Socket message via the connection that was established during T for example.

If the SIP data includes a SIP invite request SIP LBM can determine which SIP instance is available for example. Then an entry is allocated for the session at SIP CID table and the selected instance and the CID of the session are stored in the entry. The Active Call Counter associated with the selected SIP instance is incremented by one. At T the SIP invite request is transferred as a Unix Domain Socket message via the connection that was established during Twith the selected instance for example. Then at T the SIP data is transferred as a Unix Domain Socket message via the connection that was established during Twith the selected instance for example.

The selected SIP instance may further process the SIP data and at T a SIP response is sent by the appropriate SIP instance for example via socket the c represent that it is a UDP session received via SIP transport socket and a represent SIP instance for example to the client via the OS . At T after adding the appropriate UDP and IP headers the packet is sent to the proxy and from there at T the packet is transferred to the client. The session may proceed in a similar way until the selected instance determines that the received SIP data is a request to terminate the call or the SIP instance determines to terminate the SIP session. Then at T the selected SIP instance sends an API DELETE command with the CID of the session to SIP LBM . The command is sent as a Unix Domain Socket message via the connection that was established during Twith the selected instance for example. Upon receiving the DELETE command with the CID of the terminated call the relevant entry is searched in the SIP CID table and the entry is released. The Active Call Counter associated with the selected SIP instance is decremented by one. Since a proxy is involved the connection with the proxy is not affected by the termination of one call. The connection with the proxy remains active for serving other clients.

A similar flow diagram can be illustrated for a SIP session that is carried over TCP. For a TCP based SIP session the TCP transport module will replace the UDP transport module SIP transport socket will replace the SIP transport socket and socket will replace the socket . For a TCP and TLS based SIP session the TCP transport module will replace the UDP transport module SIP transport socket will replace the SIP transport socket and socket will replace the socket . In addition a decryption process will be added at T for decrypting the SIP data before parsing it.

An exemplary embodiment that handles SIP sessions carrying over TCP IP port 5060 or TLS TCP IP port 5061 may need to first establish a TCP connection between the MCU and the SIP proxy. In such embodiment to open a SIP transport Socket for carrying the SIP data over a TCP connection via ports 5060 or 5061 first a listening socket can be opened between the SIP LBM and port 5060 or 5061 to establish the TCP connection between the MCU and the SIP proxy. After establishing the TCP connection a SIP transport socket may be allocated for handling the SIP data and is transferred to SIP LBM . An exemplary process for opening a TCP connection between the MCU and the SIP proxy and allocating the SIP transport socket can be similar to the one that is disclosed in from T to T for setting the TCP connection and T for allocating the SIP transport socket . In TCP based SIP sessions the TCP connection can remain open as long as the MCU is active.

Method can be initiated during power on of MCU and can run as long as the MCU is active. Upon initiation SIP LBM can be introduced to relevant modules of the MCU and can initiate modules that are involved in the operation of SIP LBM . Exemplary modules can be the SIP CID table a set of SIP instances a set of Active Call Counters one per each SIP instances etc.

After the initiation processes an internal connection between SIP LBM and each one of the SIP instances is established . The internal connection can be based on file descriptor transferring and or file descriptor sharing mechanism such as but not limited to Unix Domain Socket for example.

After setting a connection with each one of SIP instances SIP LBM can request to open a SIP transport socket over one or more ports depending on the configuration. The ports can be TCP port 5060 UDP port 5060 and TCP port 5061. Then the SIP LBM can wait to receive a SIP transport socket number per each one of the pairs of transport protocol and a port. If one of the socket numbers was not received then an error message can be sent to the OS and method can be terminated . Exemplary embodiments that use TCP transport protocol for carrying the SIP communication may need to establish first a TCP connection between the MCU and the SIP proxy by opening listening socket over the appropriate port 5060 or 5061 for TLS TCP and only after establishing the TCP connection a SIP transport socket can be delivered.

When the appropriate number of SIP transport sockets is received depending on the configuration of the proxy and the MCU sockets for TLS TCP on port 5061 and or for TCP on port 5060 and or for UDP on port 5060 for example then each of the socket numbers is transferred to each of the SIP instances . Sending the SIP transport socket to each one of the SIP instances can be done as a Unix domain Socket message over the connection that was established during step with each one of the SIP instances. The header of the Unix Domain Socket message can indicate that it is a socket transferring message. The content of the message can include the transferred socket number or or . Consequently the received socket number at each instance will be or or wherein the first letter represents the SIP transport socket and the second letter represents the instance number. Therefore sockets represents three sockets used for sessions received via socket to instance used for sessions received via socket to instance and used for sessions received via socket to instance .

After sending the one or more SIP transport sockets to a SIP instance the SIP LBM can get a response from the instance with its received socket number. The response is sent as a Unix domain socket message via the connection which was established in step . The SIP LBM stores the pair of sockets numbers in a SIP socket table. An exemplary SIP socket table can includes a matrix in which the rows are associated with the SIP transport sockets and the columns are associated with the SIP instances for example. In this example each cell in the matrix will include the socket that will be used by the appropriate instance 

At step and method waits to receive an event. An event can be received from the OS or from one of the SIP instances . If the event is received from one of the instances then a decision is made whether it is a DELETE API command. If it is a DELETE API command received over one of the connections that was set in step . The API DELETE commend can point the CID of the session. Based on the session CID the relevant entry from the SIP CID table is retrieved and is released. The Active Call Counter that is associated with the relevant SIP instance is decremented by one and method returns to step . If the event is not a DELETE API command method returns to step to wait for the next event.

If the received event was received from the OS over one of the SIP transport sockets then a decision is made whether the session is based on TLS. The decision can be based on the SIP transport socket. If the SIP message was received via socket then the session is an encrypted session based on TLS. Therefore the message is decrypted by TLS DEC and the decrypted message is transferred to parser for further analysis . If the SIP message is not based on the TLS the message was received via socket or then the message is transferred to parser for further analysis and method proceed to step in

Referring now to at step a decision is made whether the analyzed SIP message is an INVITE request from a client. The INVITE request can be sent from a client that would like to start a new SIP session. If yes then method may search for a SIP instance FIG. that is available for handling the call. The selection can be based on the Active Call Counter of each one of the instances looking for the one with the least number of sessions for example . If an available SIP instance is found for example then an entry in the SIP CID table is allocated for the new session. The entry is updated with the CID of the session the selected instance for example and the relevant socket to be used by the selected SIP instance for example. The relevant socket is retrieved from the SIP socket table from the cell that is in the junction of the SIP transport socket from which the session received and the selected instance for example. The Active Call Counter of the instance is incremented by one and the received SIP message is sent via the appropriate Unix domain Socket connection established in step or as described below to the selected instance. The CID of the session is retrieved from the parsed SIP message. An alternate embodiment may use other file descriptor sharing mechanism instead of Unix domain socket. At this point method returns to step to wait for the next event.

If an available SIP instance was not found exemplary method can create a new instance. A connection between the SIP LBM and the new SIP instance can be establish in a similar way as the one that is disclosed above in conjunction with step . After setting the connection with the new instance the SIP LBM can send each one of the SIP transport sockets to the new SIP instance as it is disclosed above in conjunction with step . Furthermore the SIP LBM can get and store the socket number received by the instance update the SIP socket table in a similar way to the description of step and continues to step .

Returning now to step if the SIP data is not an INVITE request then the SIP CID is searched for an entry that is associated with the parsed CID. The entry is retrieved and parsed to determine which SIP instance was associated to the session. Then the SIP data is transferred to the associated SIP session as a UNIX Domain Socket message via the connection that was established in step and method returns to step in

The disclosed methods and systems have been described using detailed descriptions of embodiments thereof that are provided by way of example and are not intended to limit the scope of the disclosure. The described embodiments comprise different features not all of which are required in all embodiments. Some embodiments utilize only some of the features or possible combinations of the features. Variations of embodiments that are described and embodiments comprising different combinations of features noted in the described embodiments will be apparent to persons of skill in the art.

In this application the words unit and module are used interchangeably. Anything designated as a unit or module may be a stand alone unit or a specialized module. A unit or a module may be modular or have modular aspects allowing it to be easily removed and replaced with another similar unit or module. Each unit or module may be any one of or any combination of software hardware and or firmware. Software of a logical module can be embodied on a computer readable medium such as a read write hard disc CDROM Flash memory ROM etc. In order to execute a certain task a software program can be loaded to an appropriate processor as needed.

Various changes in the details of the illustrated operational methods are possible without departing from the scope of the following claims. For instance illustrative processing processes and may perform the identified steps in an order different form that disclosed here. Alternatively some embodiments may combine the activities described herein as being separate steps. Similarly one or more of the described steps may be omitted depending upon the specific operational environment the method is being implemented in. In addition acts in accordance with may be performed by a programmable control device executing instructions organized into one or more program modules. A programmable control device may be a single computer processor a special purpose processor e.g. a digital signal processor DSP a plurality of processors coupled by a communications link or a custom designed state machine. Custom designed state machines may be embodied in a hardware device such as an integrated circuit including but not limited to application specific integrated circuits ASICs or field programmable gate array FPGAs . Storage devices sometimes referred to as computer readable medium suitable for tangibly embodying program instructions include but are not limited to magnetic disks fixed floppy and removable and tape optical media such as CD ROMs and digital video disks DVDs and semiconductor memory devices such as Electrically Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM Programmable Gate Arrays and flash devices.

It will be appreciated by persons skilled in the art that the present invention is not limited by what has been particularly shown and described herein above. Rather the scope of the invention is defined by the claims that follow.

