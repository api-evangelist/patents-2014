---

title: User-configurable cryptographic interface controller
abstract: Systems and methods for scalably provisioning cryptographic devices in a distributed computing environment are described. In some embodiments, a cryptographic interface controller capable of generating a plurality of hardware-emulated cryptographic devices in response to requests is implemented. In some embodiments, a cryptographic interface controller may present hardware-emulated cryptographic devices to computing entities, such as standalone computer systems or virtual computing systems, as standard cryptographic devices, such as through a Universal Serial Bus interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09584325&OS=09584325&RS=09584325
owner: AMAZON TECHNOLOGIES, INC.
number: 09584325
owner_city: Seattle
owner_country: US
publication_date: 20141204
---
Cryptographic authentication and processing and the management thereof is an important part of modern data security. As computing requirements and data volumes increase over time the technical requirements of ensuring the security thereof also increase. Various types of cryptoprocessors exist for managing and processing cryptographic information such as hardware security modules HSMs trusted platform modules TPMs and smart cards many of which are capable of processing data and attendant cryptographic operations. However as computing architectures evolve toward more multipolar distributed models such as cloud computing archetypes flexible servicing and provisioning of cryptographic capabilities are desirable from the perspectives of efficiency capacity and capability.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include systems and methods for scalably provisioning cryptographic devices in a distributed computing environment. For example a cryptographic interface controller capable of generating a plurality of hardware emulated cryptographic devices in response to requests is described. In some embodiments a cryptographic interface controller may present hardware emulated cryptographic devices to computing entities such as standalone computer systems or virtual computing systems as standard cryptographic devices such as through a Universal Serial Bus interface. A cryptographic interface controller or a computing entity connected therewith may interface with a separate cryptographic device or engine in such a way as to forward the processing of incoming requests for cryptographic operations such as decryption encryption token information description requests and the like such as the operations specified by the Public Key Cryptographic Standards 11 Cryptographic Token Interface Standard PKCS 11 Cryptoki API to such cryptographic devices or engines. While PKCS 11 and the PKCS 11 Cryptoki API are a focus of this disclosure cryptographic devices engines and other entities reliant on cryptographic standards may use any appropriate cryptographic standards or cryptographic interface standards as required by the specific implementation. Other than the PKCS standards such as PKCS 11 and the Cryptoki API such standards may include Microsoft Cryptographic Application Programming Interface CAPI Microsoft Cryptographic API Next Generation CNG Java Cryptography Architecture JCA Java Cryptography Extension JCE and or OpenSSL.

The cryptographic devices or engines may be under control of a provider of cryptographic services under control of a customer of such services under control of a third party or some combination thereof. Similarly cryptographic keys such as private keys of asymmetric key pairs may be under customer control provider control third party control or some combination thereof. In certain embodiments such cryptographic keys may be directly loaded onto and or manipulated by the cryptographic interface controller. In some embodiments the cryptographic interface controller may directly service incoming cryptographic requests using its own cryptoprocessor or other cryptographic engine.

Some applications for the techniques described herein include implementations of a cryptographic interface controller in distributed computing environments. For example a cryptographic interface controller may be utilized to generate hardware emulated cryptographic devices upon the request of a customer or the customer s associated customer computing entity. Such hardware emulated cryptographic devices may be scaled as designated by the requester or in some embodiments may be scaled automatically by the cryptographic interface controller in accordance with detected demand for e.g. additional performance or capacity to perform cryptographic operations. In some embodiments such scaling may occur dynamically as usage or other demands change over time.

In certain embodiments hardware emulated cryptographic devices may be operably attached to one or more computing entities of a provider of distributed computing services such as provisioned computing instances thereof. Hardware emulated cryptographic devices may be attached to computing entities accessible to customers or customer computing entities. In some embodiments the hardware emulated cryptographic devices may be used to obfuscate pool or load balance cryptoprocessors or other cryptographic devices so as to provide a unified cryptographic interface for computing entities or consumers potentially attaching therewith.

In some embodiments the functionality of the hardware emulated cryptographic device the physical cryptographic device and the cryptographic computation engine may reside on separate physical entities or fully or partially combined onto the same physical entity. For example a hardware emulated cryptographic device may be generated by a physical cryptographic interface controller which also provides a cryptographic application program interface API such as Cryptoki to a cryptographic computation engine implemented thereon. As an alternate example a cryptographic interface controller may generate a hardware emulated cryptographic device which is operably connected possibly through the cryptographic interface controller to a physical smart card which serves as a physical cryptographic device upon which the cryptographic computation engine is implemented. As another example a cryptographic interface controller may generate a hardware emulated cryptographic device which is operably connected to a physical smart card serving as physical cryptographic device through a provider s computing entity which in turn is operably connected to an off box cryptoprocessor or hardware security module HSM upon which a cryptographic computation engine is implemented. As may be contemplated the examples provided herein are not exhaustive and the functionality stack may implement any configuration or quantity of devices to suit the particular environment in which the functionality described herein is implemented.

The cryptographic interface controller may in some embodiments be in the form of an expansion card e.g. to plug in to a server backplane or expansion slot or may be a standalone device that is physically or otherwise operatively connected to a host computing device . For example in the illustrated example a cryptographic interface controller connects through a bridge controller to host computing device . In some embodiments the bridge controller may be a Peripheral Component Interconnect PCI or Peripheral Component Interconnect Express PCIe bridge in which case the controller physically and electrically connects with the host computing device via a PCI or PCIe data bus. In some embodiments the bridge controller may use a higher level standard hardware interface such as a version of the Universal Serial Bus USB standard to connect with host computing device . Other examples of connections between the cryptographic interface controller and host computing device as enabled by bridge controller include but are not limited to wired or wireless network Ethernet connections Small Computer System Interface SCSI connections Fibre Channel FC connections Thunderbolt connections and the like. The host computing device may be any suitable computing entity capable of interfacing with the cryptographic interface controller . Examples include but are not limited to computer systems such as servers and workstations virtual computing systems virtual computing devices and related abstractions cryptoprocessors hardware security modules HSMs storage devices such as network attached storage NAS units and the like. In some embodiments the host computing device is interconnected with other host computing devices in a distributed or pooled fashion and such devices may provide several different types of computing resources beyond that which are provided and or enabled by the cryptographic interface controller .

As illustrated in some embodiments the cryptographic interface controller connects with cryptographic computation engine through physical hardware layer PHY . The cryptographic computation engine may be a hardware device such as a secure cryptoprocessor e.g. a cryptographic smart card or a trusted platform module TPM a hardware security module HSM a software implementation such as a software emulated smart card or some combination of the two e.g. cryptographic processing capabilities of a hardware general purpose CPU graphics processing unit GPU or heterogenous processor as enabled through a software application . In some embodiments the cryptoprocessor is a processor implementing Intel Secure Guard eXtension ARM TrustZone or similar capabilities such as the ability to perform cryptographic operations in an enclave or another processor that is able to perform cryptographic operations in a secure execution environment. In some embodiments therefore the PHY may be configurable to interface in a fashion appropriate to a cryptographic computation engine to which the cryptographic interface controller is connected. By way of example in embodiments where the cryptographic computation engine is or is resident on a network attached hardware security module HSM the cryptographic interface controller may physically interface with the cryptographic computation engine by way of a network interface constituting all or part of PHY . It is contemplated that in some embodiments the PHY may be optional. For example in some of such embodiments the cryptographic computation engine may be resident on the cryptographic interface controller itself or in other embodiments may be associated with or part of the host computing device and thus utilize bridge controller .

The processor and memory of the cryptographic interface controller may be of any suitable type capable of carrying out the functions of the cryptographic interface controller as further described herein. For example the processor may be a network processor an application specific integrated circuit ASIC a system on a chip SoC or the like. It is contemplated that the processor either alone or in tandem with the bridge controller may in some embodiments be capable of generating hardware emulated interfaces that are indistinguishable from a physical hardware interface to the host computing device . For example the processor and in some embodiments the bridge controller may generate an arbitrary number of standard hardware interface based devices such as Universal Serial Bus USB Firewire PCI Express PCI Thunderbolt and the like upon a request to generate such devices and present them to the host computing device as fully compatible with the appropriate standard hardware interface specification. In some embodiments the processor may be programmed such that the nature and functionality of a generated hardware emulated device the type of emulated hardware interface apportioned to the device or both are software programmable via for example an application programming interface API provided or otherwise enabled by the host computing device . In some embodiments the memory contains instructions to create specific types of hardware emulated devices and or emulated hardware interfaces upon request e.g. received from the host computing device . In some embodiments such instructions and in some cases the functionality capable of being requested is intentionally limited such that the overall surface of vulnerability i.e. exposure of secure information to attack of the cryptographic interface controller is reduced thereby increasing its inherent security hardening .

The customer cryptographic device may be any device in software or hardware that is capable of storing or manipulating cryptographic information. Examples include cryptoprocessors such as TPMs and smart cards hardware security modules HSMs third party cryptographic services to which the customer has a connection software cryptographic engines stored or otherwise connected to the customer computing entity and the like. Cryptographic devices may be configured with hardware secrets that are securely stored within hardware. In some embodiments the cryptographic module is implemented as or may contain a physically unclonable function PUF which is a function implemented in physical hardware to use one or more hardware secrets that are based at least in part on physical characteristics of the PUF. As a result any attempt to obtain a hardware secret may require physical intrusion into the PUF and physical intrusion may alter the physical characteristics of the PUF thereby destroying the hardware secret. Example PUFs that may be used include PUFs using explicitly introduced randomness optical PUFs coating PUFs PUFs using intrinsic randomness delay PUFs static random access memory SRAM PUFs butterfly PUFs bistable ring PUFs magnetic PUFs metal resistance PUFs and or other devices whose physical characteristics encode information usable as or for a hardware secret.

In some embodiments such as embodiments using public key or asymmetric cryptography the private key of the asymmetric key pair resides on the customer cryptographic device . In some embodiments the customer cryptographic device interfaces with the customer computing entity using an interface that disallows access to private or secret keys stored on the customer cryptographic device . An example of such interfaces is the Cryptoki API of the Public Key Cryptography Standards PKCS PKCS 11 standard. Such interfaces may disallow access to protected information such as private or secret keys because there is no command that can be issued to cause the device to provide a copy of the private key. Generally there may not exist a programmatic way of getting a copy of the private key via the interface and generally obtaining the key or other protected information requires extraordinary effort such as the use of electron microscopes.

The customer computing entity connects in some embodiments through a secured connection via network to computing resource service provider . The secured connection may be secured using Transport Layer Security TLS Secure Sockets Layer SSL or any other appropriate security protocol for secure communication of data. In some embodiments a TLS protocol such as defined in Request for Comments RFC 5246 RFC 2246 RFC 4279 RFC 6347 RFC 5238 RFC 6083 RFC 5764 and RFC 6176 which are incorporated herein by reference is used to establish a secure channel. Other protocols such as secure sockets layer SSL and other protocols implemented below the application layer of the Open Systems Interconnect OSI model may also be used and or adapted to utilize techniques described herein. It should be noted that the techniques described herein are adapatable to other protocols such as the Real Time Messaging Protocol RTMP the Point to Point Tunneling Protocol PPTP the Layer 2 Tunneling Protocol various virtual private network VPN protocols and other protocols such as protocols for secure communication that include a handshake. The network may be the Internet an intranet a wide area network a local area network or some combination thereof allowing connection between the customer endpoint and the computing resource service provider . It is contemplated that if communication between the customer computing entity and the computing resource service provider consists of already encrypted data e.g. if the customer cryptographic device is sufficiently hardened to be incapable of providing a private key stored thereon the secured connection may be optional and an unsecured connection may suffice. In some embodiments the hardened customer cryptographic device by disallowing access to protected information such as private or secret keys because there is no command that can be issued to cause the device to provide a copy of the private key. Generally there may not exist a programmatic way of getting a copy of the private key from the device and generally obtaining the key or other protected information from the device requires extraordinary effort such as the use of electron microscopes.

The computing resource service provider may have one or more cryptographic interface controllers installed in or otherwise connected to its computing resources. Such computing resources may include servers network appliances storage appliances or any abstraction thereof. The cryptographic interface controller may be installed in a PCI or PCIe slot of for example a server thereby connecting the cryptographic interface controller with the computing resource via a PCI or PCIe data bus respectively. In some embodiments a computing resource service provider may implement routines that allow the provider or a computing resource to cause the cryptographic interface controller s to generate hardware emulated cryptographic devices in a fashion similar to that described in . In a distributed computing environment such hardware emulated cryptographic devices may be attached to the computing entity in which the cryptographic interface controller s reside s to some abstraction thereof such as a virtual computing system of that computing entity or to another computing entity or abstraction thereof within the distributed framework i.e. to a computing entity other than the one to which the cryptographic interface controller is physically attached . Multiple hardware emulated cryptographic devices may be attached to a given computing entity. Conversely multiple computing entities may be attached to a given hardware emulated cryptographic device.

A customer e.g. through its customer computing entity may request a computing resource service provider to provision a hardware emulated cryptographic device so as to utilize the credentials associated with the customer s attached customer cryptographic device on virtual computing systems provided by the distributed computing provider thereby providing such virtual computing systems with similar security or credentials as that afforded to the customer computing entity by the customer cryptographic device . In some embodiments virtual computing systems are provided by the computing resource service provider by allocating a subset of the computing resource service provider s hardware to a requesting customer computing entity and enabling customer interaction and management of the allocated subset of hardware via a programmatic interface. In some embodiments at a time after receiving such a request the computing resource service provider may provision a hardware emulated cryptographic device to interface with a virtual computing system which in certain embodiments may also be provided by the computing resource service provider. However it is contemplated that a customer may request a hardware emulated cryptographic device independently of attachment to virtual computing systems or other computing resources or abstractions . For example a customer may have credentials or other cryptographic information resident on a plurality of customer cryptographic devices and may wish to store mirror or otherwise forward some or all of the disparate cryptographic information on one or more specified hardware emulated cryptographic devices so as to simplify and ease access to such cryptographic information. Such requests may be in the form of an API call a remote procedure call RPC or similar. The requests may be in the form of a web services request.

In some embodiments at a time after a provisioned hardware emulated cryptographic device receives cryptographic operation requests e.g. on behalf of the customer the computing resource service provider determines the appropriate customer cryptographic device to which the requested cryptographic operation pertains and forwards the requests and associated data e.g. cleartext to be encrypted to that customer cryptographic device . After receiving processed data or in certain embodiments results of the requested operation back from the relevant customer cryptographic device the processed data or received results are stored on transits through or are otherwise associated with the hardware emulated cryptographic device to be provided to the requester e.g. a virtual computing system or other computing entity . In some embodiments these transactions take place using the standards and techniques described above in connection with . For example the hardware emulated cryptographic device may appear to the computing entity to which it is attached as a standard USB PKCS 11 device and therefore communicate with the computing entity and the applications operating system etc. stored thereon in a manner indistinguishable from that of any standard USB PKCS 11 device. As another example transactions between the cryptographic interface controller and the customer endpoint s e.g. the customer computing entity or the associated customer cryptographic device s may be over an Internet connection secured using TLS.

It may be appreciated that in some embodiments a customer s private or secret cryptographic information e.g. a private key of an asymmetric key pair need not be communicated to a computing resource service provider for a hardware emulated cryptographic device to stand in for the customer s manner of authentication e.g. the customer cryptographic device s . However in some embodiments the customer may desire that rather than forward cryptographic operations requests to a customer cryptographic device the computing resource service provider performs the cryptographic operations itself using credentials provided by or on behalf of the customer. In some of such embodiments a customer may endeavor to encrypt a private or secret key under its control with a certificate or public key associated with the cryptographic interface controller using for example the customer computing entity . In such embodiments a customer may pass the encrypted key to the cryptographic interface controller over a suitable connection whereupon the cryptographic interface controller decrypts the customer s private or secret key using the cryptographic interface controller s own private key i.e. the private key associated with the cryptographic interface controller s public key with which the customer initially encrypted its private key . The customer s private key may then be stored upon or otherwise associated with a provisioned hardware emulated cryptographic device and in some embodiments uses a hardened API such as Cryptoki to provide similar security to the analogous hardware hardened cryptographic device.

In some embodiments the cryptographic interface controller may itself be hardened such as described above in connection with . In such embodiments the functionality provided by the cryptographic interface controller is limited to an analogous extent as the hardware emulated cryptographic devices it is capable of generating or in some cases to that of the customer cryptographic devices. In some embodiments such intentional limitations allow a provider to for example provide hardware backed assurances that hardware emulated cryptographic devices customers request are similarly secure to that of the underlying cryptographic interface controller and or that of the customer s cryptographic devices. In some embodiments such limitations may include inability for any entity to request a private or secret key or other sensitive cryptographic information stored on the cryptographic interface controller. Another example of such limitations is integration of physical intrusion detection e.g. the automatic destruction of keys or other sensitive cryptographic information stored on the cryptographic interface controller upon detection of a compromise to the physical chassis in which it is installed or in some cases upon physical detachment therefrom .

In some embodiments the cryptographic interface controller may be implemented in such a fashion as to satisfy the requirements of an operating system s native encryption and or secured boot capabilities. Examples of such native encryption and secured boot capabilities include the Secure Boot protocol of the Universal Extensible Firmware Interface UEFI specification Microsoft BitLocker and the like. In some embodiments at a time after receiving a request to generate a hardware emulated cryptographic device for use in activating or enabling security and or encryption functions of an operating system running for example within an instance of the computing resource service provider s computing entities the cryptographic interface controller provides a hardware emulated cryptographic device configured in such a way as to be recognized by the operating system e.g. as a standard PKCS 11 device such as a smart card to enable such security or encryption capabilities. In such embodiments the actual credentials may be forwarded from a physical cryptographic device under the customer s control such as described in connection with this or in some embodiments provided by the computing resource service provider.

In some embodiments the customer device may also directly interface with the cryptographic devices . In some of such embodiments the customer device may interface with for example a cryptographic operations service e.g. through an API to encrypt a customer s private or secret key that is necessary to for example decrypt encrypted data. In such embodiments at a time after receiving a request from the customer device to generate a hardware emulated cryptographic device using the customer s private or secret key the cryptographic interface device communicates with cryptographic operations service so as to synchronize and identify the private key used by the cryptographic operations service to encrypt the customer s private or secret key. At a time after receiving the encrypted private or secret key from the customer device the cryptographic interface device decrypts the private or secret key using the synchronized and identified cryptographic operations service s private key thereby having the customer s decrypted private key. Thus the customer s private key may be loaded onto or otherwise associated with a hardware emulated cryptographic device generated by the cryptographic interface controller for manipulation by the customer according to techniques previously described in connection with . Accordingly a customer need only provide the encrypted private key to the computing resource service provider .

It is contemplated that in such embodiments the computing resource service provider controls or otherwise are in a trusted and or mutually authenticated relationship with the cryptographic devices . For example a cryptographic interface device may provide as a part of the authentication process information regarding its current operational state. Such information may include a checksum or hash value associated with software firmware or both e.g. as generated using the SHA 1 cryptographic hash function auxiliary authentication or state information such as would be provided by a TPM associated with the physical chassis in which the cryptographic interface device resides and the like. In such examples such values and or states may be checked against a list or database of known good values and or states which may be persisted by any appropriate authority which may include the customer the computing resource service provider or a third party auditor. Similar techniques may be used with HSMs in these and other embodiments.

In some embodiments the cryptographic interface controller may forward cryptographic operations requests to cryptographic devices then returns the results to the requester via a hardware emulated cryptographic device generated by the cryptographic interface controller using techniques similar to that described in connection with . In such embodiments a customer may request a computing resource service provider to generate a hardware emulated cryptographic device in some embodiments attached to a computing instance of the computing resource service provider such that the computing instance is enabled to perform cryptographic operations using credentials specific to that customer. In such embodiments at a time receiving the request the computing resource service provider causes the cryptographic interface controller to generate a hardware emulated cryptographic device.

The computing resource service provider then instructs a cryptographic device such as a cryptographic operations service to generate and or assign a private or secret key on behalf of the requesting customer. Such instruction may require mutual authentication between the computing resource service provider e.g. via the cryptographic interface device and the cryptographic device and such operations may also require verification e.g. by digital signature of the customer s identity. Thereafter at a time after receiving the customer s request for cryptographic operations e.g. through a provisioned computing instance having the hardware emulated cryptographic device attached therewith data associated with the request is forwarded to the cryptographic device such that the assigned credentials are used by the cryptographic device e.g. the cryptographic operations service to perform the request. After the requested operation is completed the results of such an operation are provided back to the hardware emulated cryptographic device in a fashion similar to that described in connection with .

At step after receiving the request described in step the computing resource service provider provisions a hardware emulated cryptographic device e.g. using the capabilities of a cryptographic interface controller such as the cryptographic interface controller described in connection with and or the cryptographic interface controller described in connection with and attaches or otherwise associates the provisioned hardware emulated cryptographic device with a computing entity such as a virtual computing system of the computing resource service provider using similar techniques described in connection with at least . At step the provisioned hardware emulated cryptographic device is associated with for example a customer cryptographic device such as that described in connection with . Thereafter at step requests to perform cryptographic operations through the hardware emulated cryptographic device and the cryptographic interface controller are communicated thereon to the associated customer cryptographic device for processing and the processed requests e.g. data confirmations or authentication associated with such requests are propagated through the hardware emulated cryptographic device to the computing entity with which it is associated.

At step the provider initiates a request to a cryptographic device such as a cryptographic operation service HSF or other type of cryptographic computation engine and or cryptoprocessor to provide credentials on behalf of the client. Such devices or services may include or have characteristics similar to the cryptographic devices discussed in connection with at least . Thereafter at step the provisioned credentials are associated or mapped to the hardware emulated cryptographic device and at step one or more computing entities are associated with the hardware emulated cryptographic device. As previously discussed in connection with such computing entities may include computing instances generated by the provider which may operate a distributed computing environment. At step when the computing entity requests cryptographic operations of the hardware emulated cryptographic device associated with it in step such operations are forwarded to the cryptographic device associated in step for processing. Results and or data associated with the cryptographic operation are returned to the hardware emulated cryptographic device and presented to the computing entity attached therewith.

As discussed numerous variations utilize symmetric and or asymmetric cryptographic primitives. Symmetric key algorithms may include various schemes for performing cryptographic operations on data including block ciphers stream ciphers and digital signature schemes. Example symmetric key algorithms include the advanced encryption standard AES the data encryption standard DES triple DES 3DES Serpent Twofish blowfish CASTS RC4 and the international data encryption algorithm IDEA . Symmetric key algorithms may also include those used to generate output of one way functions and include algorithms that utilize hash based message authentication codes HMACs message authentication codes MACs in general PBKDF2 and Bcrypt. Asymmetric key algorithms may also include various schemes for performing cryptographic operations on data. Example algorithms include those that utilize the Diffie Hellman key exchange protocol the digital signature standard DSS the digital signature algorithm the ElGamal algorithm various elliptic curve algorithms password authenticated key agreement techniques the pallier cryptosystem the RSA encryption algorithm PKCS 1 the Cramer Shoup cryptosystem the YAK authenticated key agreement protocol the NTRUEncrypt cryptosystem the McEliece cryptosystem and others. Elliptic curve algorithms include the elliptic curve Diffie Hellman ECDH key agreement scheme the Elliptic Curve Integrated Encryption Scheme ECIES the Elliptic Curve Digital Signature Algorithm ECDSA the ECMQV key agreement scheme and the ECQV implicit certificate scheme. Other algorithms and combinations of algorithms are also considered as being within the scope of the present disclosure and the above is not intended to be an exhaustive list.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

