---

title: System and methods for multi-user CAx editing conflict management
abstract: A multi-user CAx editing system may comprise a plurality of editing clients and a collaborative editing server. The server and editing clients may be collectively configured to: a) assign a feature to a first user, detect an attempt to edit the feature by a second user, and reassign the feature to the second user if the first user indicates that the feature may be reassigned, and/or b) detect an editing conflict between a first and second user for a feature and send a reversion request for the feature to one or more clients and/or c) initiate changes for a feature within a remote instance of the electronic model edited by another user and initiate reversion of the changes for the feature within a local instance of the electronic model in response to determining that the changes to the feature within the remote instance of the electronic model generated an error.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09648059&OS=09648059&RS=09648059
owner: BRIGHAM YOUNG UNIVERSITY
number: 09648059
owner_city: Provo
owner_country: US
publication_date: 20140205
---
This application claims priority to U.S. provisional application 61 760 713 entitled Real Time Conflict Management for Multi User CAD and filed on 5 Feb. 2013. The foregoing application is incorporated herein by reference.

The claimed invention relates to computer aided technologies CAx such as computer aided design engineering analysis and manufacture in general and apparatus systems means and methods for multi user CAx editing in particular.

Large design and engineering projects require coordination of the efforts of many designers or engineers. Designers and engineers may have various CAx tools that they have experience with have been trained to use or simply prefer. Existing CAx data may have been created using still other CAx tools. Each of these CAx tools may have incompatible file formats.

Existing CAx systems however are not well suited to collaborative design and editing. For example data files that are shared among several designers and edited by them may create editing conflicts that often result in data loss and or corruption.

Accordingly the present invention identifies and addresses a need for additional and improved systems and methods for multi user CAx editing conflict detection and management.

The embodiments disclosed herein have been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been fully solved by currently available multi user CAx editing systems and methods. Accordingly the claimed inventions have been developed to provide methods and systems for multi user CAx editing conflict management that overcome shortcomings in the art.

In one example a multi user CAx editing system comprises a plurality of editing clients and a collaborative editing server. The editing clients and the server may be collectively configured to execute various conflict management methods including a assigning a feature to a first user detecting an attempt to edit the feature by a second user and reassigning the feature to the second user if the first user indicates that the feature may be reassigned and or b detecting an editing conflict between a first and second user for a feature and sending a reversion request for the feature to one or more clients and or c initiating changes for a feature within a second instance of the electronic model e.g. a remote instance that is edited by another user and initiating reversion of the changes for the feature within a first instance of the electronic model edited by a first user e.g. a local instance in response to determining that the changes to the feature within the second instance of the electronic model generated an error.

It should be noted that references throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

The described features advantages and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.

These features and advantages will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Some of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. Others are assumed to be modules. For example a module or similar unit of functionality may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented with programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

A module or a set of modules may also be implemented in whole or in part as a processor configured with software to perform the specified functionality. An identified module may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed the executable code of a module may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices.

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Reference to a computer readable medium may take any tangible form capable of enabling execution of a program of machine readable instructions on a digital processing apparatus. For example a computer readable medium may be embodied by a flash drive compact disk digital video disk a magnetic tape a Bernoulli drive a magnetic disk a punch card flash memory integrated circuits or other digital processing apparatus memory device. A digital processing apparatus such as a computer may store program codes associated data and the like on the computer readable medium that when retrieved enable the digital processing apparatus to execute the functionality specified by the modules.

Furthermore the described features structures or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Each workstation may include a separate computing device and a communications device or the computing device and communications device may integrated into the workstation . Examples of the communications device include a phone a VOIP device an instant messaging device a texting device a browsing device and the like. The computing devices may enable graphical view selection. The communications devices may enable users to communicate with other CAx system users.

The inter network may facilitate electronic communications between the various workstations and servers. In one embodiment the inter network is the internet. In another embodiment the inter network is a virtual private network VPN .

Various servers such as blade servers within the data center function cooperatively to facilitate concurrent collaborative editing of CAx models by local and remote users. For example the application servers may provide one or more CAx applications to the local and remote users. Some users may have the CAx applications installed on their local computing devices . Examples of CAx applications include Siemens NX MSC Nastran Dessault Systems CATIA and Solidworks ANSYS and the like.

The communication servers may facilitate communications between the users through various channels or services such as VOIP services email services instant messaging services short message services and text messaging services. The workstations may leverage such services for user to user communications via the communication servers or via other available service platforms.

The data servers or the like may store CAx models within various model files or records. The data servers may replicate copies of the models for use by various users. Some users may have a local copy of a model. As described herein instead of requiring a particular user to assume control of a model file or record updates to the model may be coordinated by one or more CAx applications including client versions server versions and cloud versions of such applications.

The collaborative CAx editing system may also include a collaborative CAx server that may store an operations log of the engineering object. Collaborative CAx editing system may also include a synchronization module that may detect creation of a proprietary feature of the engineering object within the proprietary CAx application and insert a feature identifier corresponding to the feature within the proprietary representation of the engineering object. The feature identifier may correspond to or be identical to the feature reference .

As illustrated in collaborative CAx editing system may also include one or more data stores such as proprietary object file or collaborative database . In one embodiment proprietary object file may be configured to store a proprietary representation of an engineering object. Collaborative database may be configured to store an operations log of the engineering object. Proprietary object file and collaborative database may represent portions of a single database or computing device or a plurality of databases or computing devices. For example collaborative database may represent portions of the computing and communications infrastructure in .

Each of the modules may reside on a single computing device i.e. node or be collaboratively partitioned onto multiple devices or nodes. For example in the depicted embodiment the CAx application is partitioned into a CAx application client and a CAx application service . Similarly the synchronization module is partitioned into a client module and a server module . The modules may be primarily or wholly comprised of software codes and associated data that are executed and processed by a digital processing apparatus such as a computer to provide the specified functionality.

As illustrated in at step one or more of the systems described herein may execute a proprietary CAx application and enable editing of a proprietary representation of an engineering object by a user. For example at step CAx client may as part of computing device in execute CAx application and enable editing of a proprietary representation of an engineering object by a user. CAx application may store the proprietary representation of the engineering object in proprietary object file . The proprietary representation may include one or more features of the engineering object such as proprietary feature .

As used herein the phrase engineering object generally refers to a conceptual design produced to show the look or function of an object before it is built or made. The design may be incorporated in representations such as plans drawings diagrams schematics blueprints sketches maps or models. The design may include one or more features i.e. distinctive CAx attributes that may be represented by one or more geometries or parameters. Examples of features include the shape dimensions composition material properties and tolerances of an object or portion of an object the mesh size and required accuracy for simulations the path and tolerances for a manufacturing tool and any other attribute that may affect the performance of a product and the manufacture thereof.

As used herein the phrase proprietary representation generally refers to a data format associated with a CAx application. A proprietary representation of an engineering object may be vendor specific and typically cannot be directly edited by a CAx application other than those available from the vendor or licensed by the vendor. Typically a conversion process is required for a CAx application from another vendor to edit the engineering object. The conversion process may result in the loss of data.

At step one or more of the systems described herein may store an operations log for the engineering object on a collaborative CAx server. For example at step collaborative CAx server may as part of computing device in store an operations log of the engineering object on a collaborative CAx server . The operations log may be stored in a collaborative database and may include one or more feature definitions such as feature definition .

As used herein the phrase operations log generally refers to a log of CAx operations that may or may not be associated with a single proprietary CAx application. For example the operations log may be a vendor neutral log of feature definitions that facilitates collaborate editing between various proprietary CAx applications.

Collaborative CAx server may store an operations log of the engineering object in various ways. In one embodiment the operations log of the engineering object comprises a log of sequentially generated feature definitions. The engineering object may be reconstructed within various CAx applications by regenerating the features comprising the engineering object in sequence. The feature definitions within the operations log may be readily translatable to editing commands within each CAx application by a synchronization module associated therewith.

The operations log of the engineering object may include references to features within the proprietary representation of the engineering object. For example as depicted in feature definition corresponding to proprietary feature and to feature identifier may have an associated feature reference associating feature definition with proprietary feature . In some embodiments the feature identifier corresponds directly to the feature reference . In one embodiment the feature identifier and the feature reference are identical. Synchronization module may use feature reference to identify the corresponding proprietary feature within proprietary object file via the feature identifier . In one embodiment feature reference is a globally unique identifier GUID associated with proprietary feature .

In one embodiment the proprietary representation of the engineering object corresponds to a point in time within the log of sequentially generated feature definitions. The point in time may correspond to a snapshot or revision marker within the log. In a collaborative CAx editing environment editing of the engineering object may take place while a client is offline. The sequentially generated feature definitions may continue to be created in the operations log of the engineering object. When the client reconnects with the operations log of the engineering object subsequently generated feature definitions created after the point in time are applied to the proprietary representation to synchronize the proprietary representation with the operations log.

Returning to at step one or more of the systems described herein may detect creation of a feature of the engineering object within the proprietary CAx application. For example at step collaborative CAx synchronization module may as part of CAx client in detect creation of a feature of the engineering object within the proprietary CAx application. For example collaborative CAx synchronization module may detect creating of proprietary feature in proprietary object file .

The collaborative CAx synchronization module may detect creation of a feature of the engineering object within the proprietary CAx application in any suitable manner. In one embodiment the collaborative CAx synchronization module is a plugin for the CAx application and detects creation of a feature of the engineering object using an application programming interface API provided by the CAx application to permit additional functions to execute when a feature is created.

At step of one or more of the systems described herein may insert a feature identifier corresponding to the feature within the proprietary representation of the engineering object. For example at step synchronization module may as part of CAx client in insert feature identifier corresponding to proprietary feature within the proprietary representation of the engineering object stored in proprietary object file .

As used herein the phrase feature identifier generally refers to a data item that relates a proprietary feature in a proprietary object file to a feature definition in a collaborative database. In one embodiment the feature identifier is the index of the feature definition record in the collaborative database.

In one embodiment the feature identifier is stored in a parameter for the feature within the proprietary representation of the engineering object. By storing the feature identifier within the proprietary representation of the engineering object the relationship between the proprietary feature and the corresponding feature definition within the operations log is persistent between editing sessions on the CAx client. The feature identifier may be a globally unique identifier. In some embodiments the feature identifier is represented in a text format to facilitate storage and retrieval within various CAx applications.

In one embodiment the proprietary representation and the operations log of the engineering object may be cached by the collaborative CAx server. For example as part of collaborative CAx editing system in CAx server may cache the proprietary representation of the engineering object in proprietary object cache . Regenerating a proprietary representation of an engineering object from sequentially generated feature definitions in an operations log of the object may be a computationally intensive and time consuming process. Caching the proprietary representation of the engineering object on the CAx server with the operations log accelerates the loading of the engineering object on a CAx client on which the proprietary representation is usable by the CAx client and has not yet been loaded into memory such as following a system crash of the CAx client or when a new CAx client is added to the collaborative editing system .

In one embodiment the proprietary representation of the engineering object may be provided to another a second CAx client. When the second CAx client adds or changes a feature in the proprietary representation an instance of the collaborative CAx synchronization module corresponding to the second client may communicate the feature identifier and a corresponding feature definition to the CAx server. The collaborative CAx synchronization module associated with the first CAx client may then receive a feature identifier and the feature definition corresponding to the feature created the second CAx client and create a corresponding local feature. For example as part of collaborative CAx editing system synchronization module on CAx client may create feature definition in collaborative database on CAx server . CAx server may notify synchronization module on CAx client of the new feature in the collaborative database . Synchronization module may then create synchronized feature in proprietary object file on CAx client corresponding to feature in proprietary object file on CAx client

In some embodiments the CAx synchronization module may initiate insertion of a placeholder feature and corresponding feature reference within the operations log of the engineering object for features not directly supported by the operations log of the engineering object. For example as depicted in collaborative editing system in proprietary feature may be created in proprietary object file on CAx client . Synchronization module may initiate creation of placeholder feature and associated placeholder reference in collaborative database on CAx server . Features represented by a placeholder may not be editable by another CAx application but the placeholder reference maintains an association between the database record for placeholder feature and the proprietary representation of the data in the proprietary object file . Placeholder features may be referenced by other features. For example a sheet body that could not be created or edited in collaborative database may be represented by a placeholder feature and referenced by a split body feature.

As explained above the collaborative CAx system may associate features in a proprietary representation of an engineering object with corresponding feature definitions in an operations log of the engineering object. A synchronization module which may be a plug in to a CAx application executing on a CAx client may synchronize features between the proprietary and operations logs of the engineering object. As new features are created and edited on one CAx client and synchronized to the vendor neutral database synchronization modules on other CAx clients may synchronize the features from the vendor neutral database to local copies of the proprietary representation of the engineering object.

The collaborative CAx editing system may maintain identifiers and references associating the proprietary and operations log representations of features of the engineering object in non transitory storage to prevent the loss of data in the event of system failure of either a CAx client or the CAx server. Caching the proprietary representation of the engineering object in a proprietary object cache on the CAx server may facilitate faster recovery from the system failure of a CAx client.

The proprietary representation of an engineering object may be a checkpoint or point in time within a sequence of feature definitions created in operations log. The synchronization module may bring the proprietary representation up to date by creating features in the proprietary representation that were created in the operations log subsequent to the point in time represented by the proprietary representation.

Assigning a feature to a user may include detecting that a first user has begun to edit a feature or requested access to a feature and assigning that feature to the first user. In some embodiments each client within the collaborative CAx system detects access to features within a local instance of an electronic model and sends a message to the collaborative server indicating that the user has begun to edit the feature. The access may be detected by a plugin module not shown for the CAx application that resides on a client. In response to the message the collaborative server may assign the feature to the user and record the assignment in an assignment table or the like. In some embodiments the assignment is communicated to each client within the collaborative CAx system .

Detecting may include detecting that a second user has begun to edit the feature or requested access to the feature and determining if the feature has been assigned to another user. Detecting may occur similarly to the detecting phase in operation . In some embodiments the assignment table is used to see if the feature the second user had begun to edit or requested has already been assigned to another user.

Prompting the user may include prompting the first user with a dialog box having an option to relinquish exclusive access to the feature to the second user as well as an option to not relinquish exclusive access. In some embodiments the second user is provided with visual or audio feedback indicating a potential conflict such as a dialog box notice and or a change in color of the rendering of the feature on the display. The logic controlling the display of the prompt may operate on the client or on the collaborative server .

Testing if a timeout has occurred may include monitoring the prompt given to the first user to see if a selection has been indicated within a selected time period. The period for a selection may be timed using a software timer or by monitoring an internal clock until a selected value is reached or by any other method known to those of skill in the art. The logic measuring the timeout period may reside in software that runs on the client or on the collaborative server .

Determining if the feature may be reassigned may include checking the result of the user prompt to see if the user has indicated a refusal to allow reassignment of the feature or if the user has indicated allowance of the request or made no response within the selected time interval. A non response within the time interval or an allowance response may both result in an indication to reassign the feature.

Reassigning the feature to the other user may include modifying the assignment table or the like to reflect that the second user has been assigned the feature. Reassigning may also include prompting the second user with a dialog or the like indicating that the feature has been assigned to them. Reassigning may also include prompting the first user to confirm reassignment of the feature particularly in the case where the reassignment was due to a timeout condition instead of a user selection. Blocking reassignment of the feature may include alerting the second user that the assignment request was rejected by the first user. Blocking may also include confirming to the first user that the feature is still assigned to them.

Detecting commencement of an editing session for a feature by a user may include receiving a communications from a first client indicating a first user has selected a feature to edit. In one instance the communications may be transferred over the inter network from the client to the collaborative server . Each client may be configured to send out automated messages indicating the local user has initiated an editing session for a feature without requiring any additional action by the user. The collaborative server may assign the feature to the user and record the assignment in an assignment table or the like.

Communicating a lock request for the feature to other client s may include sending a message to one or more client s indicating the feature that will be locked on each of the client s that receive the message. Detecting commencement of another editing session for the feature may include receiving a communications from a second client indicating that a second user has begun to edit a feature.

Sending a reversion request for the feature to other client s may include determining if the feature edited by a subsequent user is the same as the feature edited by the first user and if so sending a communication such as a reversion request message to the other client s corresponding to the subsequent user s requesting that the editing session be aborted and the feature be reverted to a pre editing state.

Displaying a conflict warning to user s may include displaying a dialog box informing subsequent user s that the editing session was in conflict with the first user s editing session. Reverting feature on other client s may include reverting the feature to the state it was before as before the editing session commenced in response to receiving the reversion request message.

Receiving changes for a feature generated by a first user may include receiving a communication from a first client indicating the user has made one or more changes to a feature of the electronic model. In one embodiment the communications may be transferred over the inter network from the client to the collaborative server . In some embodiments the client is configured to automatically send messages indicating the user has made a change without requiring any additional action by the user.

Initiating the changes for the feature to a second instance of the electronic model may include communicating the change s to a client that manages the second instance of the model and having that client make the requested change s . In some embodiments the collaborating server also maintains a master instance of the model and also makes the requested changes.

Reverting the changes if they generate an error may include determining if an error resulted from the changes to the feature on the second instance and or the master instance and if so reversing the changes locally and communicating a reversion request to the first client. In response thereto the first client may revert the changes to the feature. Keeping the changes if they don t generate an error may include leaving the changes to the electronic model in place. In one embodiment a message is sent to the collaborating server confirming that the changes did not generate an error.

The various elements of the systems methods and apparatus described herein function cooperatively to manage editing conflicts and facilitate productive collaborative CAx editing. The preceding depictions are intended to be illustrative rather than definitive. Similarly the claimed invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

