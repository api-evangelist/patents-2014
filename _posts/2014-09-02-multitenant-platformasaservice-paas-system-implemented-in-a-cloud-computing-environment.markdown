---

title: Multi-tenant platform-as-a-service (PaaS) system implemented in a cloud computing environment
abstract: Implementations for providing cartridges in a multi-tenant PaaS system of a cloud computing environment is disclosed. An example method includes maintaining a repository of a plurality of packages that provide functionality for multi-tenant applications executed by a node, each package of the plurality of packages comprising a software and a configuration information specifying a plurality of hooks, receiving a request to configure a first package from the plurality of packages, wherein the first package is to provide functionality for one of the multi-tenant applications, establishing a container to provide process space for the functionality of the first package, calling a configure hook from the plurality of hooks specified in the configuration information of the first package, and in response to calling the configure hook, embedding an instance of the software of the first package in the container, the instance of the software of the first package copied from the repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330102&OS=09330102&RS=09330102
owner: Red Hat, Inc.
number: 09330102
owner_city: Raleigh
owner_country: US
publication_date: 20140902
---
This application is a continuation of U.S. patent application Ser. No. 13 461 584 filed on May 1 2012 the entirety of which is incorporated herein by reference.

The embodiments of the invention relate generally to platform as a service PaaS environments and more specifically relate to cartridges in a multi tenant PaaS system implemented in a cloud computing environment.

Cloud computing is a computing paradigm in which a customer pays a cloud provider to execute a program on computer hardware owned and or controlled by the cloud provider. It is common for cloud providers to make virtual machines hosted on its computer hardware available to customers for this purpose. The cloud provider typically provides an interface that a customer can use to requisition virtual machines and associated resources such as processors storage and network services etc. as well as an interface a customer can use to install and execute the customer s program on the virtual machines that the customer requisitions together with additional software on which the customer s program depends. For some such programs this additional software can include software components such as a kernel and an operating system. Customers that have installed and are executing their programs in the cloud typically communicate with the executing program from remote geographic locations using Internet protocols.

For programs that are web applications the additional software can further include such software components as middleware and a framework. Web applications are programs that receive and act on requests in web or other Internet protocols such as Hypertext Transfer Protocol HTTP . It is common for a user to use a web application by using a browser executing on the user s client computer system to send requests in a web protocol via the Internet to a server computer system on which the web application is executing. It is also common for automatic user agents to interact with web applications in web protocols in the same fashion.

While many web applications are suitable for execution in the cloud it often requires significant expertise and effort in order to install execute and manage a web application in the cloud. For example an administrator typically must identify all of the software components that a web application needs in order to execute and what versions of those software components are acceptable. In addition the administrator typically should obtain install and appropriately configure each such software component as well as the application itself. Where this high level of expertise and effort has been invested in order to get a web application running on a particular hypervisor and in a particular provider s cloud a similarly high level of expertise and effort usually should be subsequently invested to execute the web application instead or in addition on a different hypervisor and or in a different particular provider s cloud. Also it can be difficult to obtain useful information about how the application is performing and otherwise behaving when executing in the cloud.

Accordingly software and or hardware facilities for facilitating the execution of web applications in the cloud have been introduced and are known as Platform as a Service PaaS offerings. PaaS offerings typically facilitate deployment of applications without the cost and complexity of buying and managing the underlying hardware and software and provisioning hosting capabilities providing all of the facilities required to support the complete life cycle of building and delivering web application and service entirely available from the Internet. Typically these facilities operate as one or more virtual machines VMs running on top of a hypervisor in a host server.

In present PaaS offerings customers deployed applications can differ widely in terms of the functionality and protocols relied on. For example one customer may rely on a JBoss runtime environment while another customer may rely on an Apache web server environment with a Ruby runtime language. Current PaaS systems offer support for various different functionalities and protocols that are necessary to run applications. These functionalities and protocols are provided without requiring the customer to administer or update the included feature. However the current PaaS systems have not provided a solution for providing the various different functionalities and protocols in a multi tenant environment with a different customers consuming different functionalities and protocols while running on the same node.

Embodiments of the invention provide for cartridges in a multi tenant PaaS system implemented in a cloud computing environment. A method of embodiments of the invention includes maintaining by a virtual machine VM executing on a computing device a cartridge library comprising cartridge packages that provide functionality for multi tenant applications executed by the VM receiving a request to configure a cartridge on the VM wherein the cartridge provides functionality for a multi tenant application executed by the VM establishing a container to provide process space for the functionality of the cartridge calling a configure hook for a type of the cartridge and in response to calling the configure hook embedding an instance of the cartridge in the container the instance of the cartridge obtained from a cartridge package of the cartridge library.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving attaching forwarding caching executing applying identifying configuring establishing or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

Embodiments of the invention provide for cartridges in a multi tenant PaaS system implemented in a cloud computing environment. In the multi tenant PaaS environment each node e.g. virtual machine VM in the PaaS environment runs multiple applications. Embodiments of the invention provide for configuring each node e.g. VM in the multi tenant PaaS system to utilize a cartridge library as the source for specific application functionality for each application running on the node. Each node includes a cartridge library containing all currently available cartridges provided by the PaaS platform e.g. JBoss Apache PHP Perl Python Ruby Jenkins MySQL Mongo etc. . As applications are created on the node these applications may embed an instance of one or more cartridges from the cartridge library to provide desired functionality for the application. Different applications containers on the node may embed different cartridge instances depending on the function of the application. In addition each application container is created to support multiple networking ports for the potential cartridge instances that may be embedded in the application container e.g. Hypertext Transfer Protocol Hypertext Transfer Protocol Secure HTTP HTTPS port Secure Shell SSH port and a custom port.

Clients and are connected to hosts and the cloud provider system via a network which may be a private network e.g. a local area network LAN a wide area network WAN intranet or other similar private networks or a public network e.g. the Internet . Each client may be a mobile device a PDA a laptop a desktop computer or any other computing device. Each host may be a server computer system a desktop computer or any other computing device. The cloud provider system may include one or more machines such as server computers desktop computers etc.

In one embodiment the cloud provider system is coupled to a cloud controller via the network . The cloud controller may reside on one or more machines e.g. server computers desktop computers etc. and may manage the execution of applications in the cloud . In some embodiments cloud controller receives commands from PaaS provider controller . Based on these commands the cloud controller provides data e.g. such as pre generated images associated with different applications to the cloud provider system . In some embodiments the data may be provided to the cloud provider and stored in an image repository in an image repository not shown located on each host or in an image repository not shown located on each VM .

Upon receiving a command identifying specific data e.g. application data and files used to initialize an application on the cloud the cloud provider retrieves the corresponding data from the image repository creates an instance of it and loads it to the host to run on top of a hypervisor not shown as a VM or within a VM . In addition a command may identify specific data to be executed on one or more of the VMs . The command may be received from the cloud controller from a PaaS Provider Controller or a user e.g. a system administrator via a console computer or a client machine. The image repository may be local or remote and may represent a single data structure or multiple data structures databases repositories files etc. residing on one or more mass storage devices such as magnetic or optical storage based disks solid state drives SSDs or hard drives.

While various embodiments are described in terms of the environment described above those skilled in the art will appreciate that the facility may be implemented in a variety of other environments including a single monolithic computer system as well as various other combinations of computer systems or similar devices connected in various ways. For example the data from the image repository may run directly on a physical host instead of being instantiated on a VM .

In one embodiment the client layer resides on a client machine such as a workstation of a software developer and provides an interface to a user of the client machine to a broker layer of the PaaS system . For example the broker layer may facilitate the creation and deployment on the cloud via node layer of software applications being developed by an end user at client layer .

In one embodiment the client layer includes a source code management system sometimes referred to as SCM or revision control system. One example of such an SCM or revision control system is Git available as open source software. Git and other such distributed SCM systems usually include a working directory for making changes and a local software repository for storing the changes. The packaged software application can then be pushed from the local Git repository to a remote Git repository. From the remote repository the code may be edited by others with access or the application may be executed by a machine. Other SCM systems work in a similar manner.

The client layer in one embodiment also includes a set of command tools that a user can utilize to create launch and manage applications. In one embodiment the command tools can be downloaded and installed on the user s client machine and can be accessed via a command line interface or a graphical user interface or some other type of interface. In one embodiment the command tools expose an application programming interface API of the broker layer and perform other applications management tasks in an automated fashion using other interfaces as will be described in more detail further below in accordance with some embodiments.

In one embodiment the broker layer acts as middleware between the client layer and the node layer . The node layer includes the nodes on which software applications are provisioned and executed. In one embodiment each node is a VM provisioned by an Infrastructure as a Service IaaS provider such as Amazon Web Services. In other embodiments the nodes may be physical machines or VMs residing on a single physical machine. In one embodiment the broker layer is implemented on one or more machines such as server computers desktop computers etc. In some embodiments the broker layer may be implemented on one or more machines separate from machines implementing each of the client layer and the node layer or may implemented together with the client layer and or the node layer on one or more machines or some combination of the above.

In one embodiment the broker layer includes a broker that coordinates requests from the client layer with actions to be performed at the node layer . One such request is new application creation. In one embodiment when a user using the command tools at client layer requests the creation of a new application or some other action to manage the application the broker first authenticates the user using an authentication service . In one embodiment the authentication service may comprise Streamline or may comprise some other authentication tool. Once the user has been authenticated and allowed access to the system by authentication service the broker uses a server orchestration system to collect information and configuration information about the nodes .

In one embodiment the broker uses the Marionette Collective MCollective framework available from Puppet Labs as the server orchestration system but other server orchestration systems may also be used. The server orchestration system in one embodiment functions to coordinate server client interaction between multiple sometimes a large number of servers. In one embodiment the servers being orchestrated are nodes which are acting as application servers and web servers.

For example if the broker wanted to shut down all applications on all even numbered nodes out of 100 000 nodes the broker would only need to provide one command to the server orchestration system . Then the server orchestration system would generate a separate message to all nodes to shut down all applications if the node is even and distribute the messages to the nodes using a messaging and queuing system. Thus in one embodiment the broker manages the business logic and model representing the nodes and the applications residing on the nodes and acts as a controller that generates the actions requested by users via an API of the client tools . The server orchestration system then takes those actions generated by the broker and orchestrates their execution on the many nodes managed by the system.

In one embodiment the information collected about the nodes can be stored in a data store . In one embodiment the data store can be a locally hosted database or file store or it can be a cloud based storage service provided by a Storage as a Service SaaS storage provider such as Amazon S3 Simple Storage Service . The broker uses the information about the nodes and their applications to model the application hosting service and to maintain records about the nodes. In one embodiment node data is stored in the form of a JavaScript Object Notation JSON blob or string that maintains key value pairs to associate a unique identifier a hostname a list of applications and other such attributes with the node.

In embodiments of the invention the PaaS system architecture of is a multi tenant PaaS environment. In a multi tenant PaaS environment each node runs multiple applications that may be owned or managed by different users and or organizations. As such a first customer s deployed applications may co exist with any other customer s deployed applications on the same node VM that is hosting the first customer s deployed applications .

In addition each node also maintains a cartridge library . The cartridge library maintains multiple software components referred to herein as cartridges that may be utilized by applications deployed on node . A cartridge can represent a form of support software providing the functionality needed to run an application . In one embodiment the cartridges are maintained that support languages such as JBoss PHP Ruby Python Perl and so on. In addition cartridges may be provided that support databases such as MySQL PostgreSQL Mongo and others. Cartridges may also be available that support the build and continuous integration environments such as a Jenkins cartridge. Lastly cartridges may be provided to support management capabilities such as PHPmyadmin RockMongo 10gen mms agent and cron scheduler for example. Adding an instance of a cartridge from cartridge library to an application provides a capability for the application without the customer owning the application having to administer or update the included feature.

The deployment of multiple applications of multiple customers on a single node VM is a cost efficient solution for PaaS providers. However deploying a multi tenant PaaS solution raises a variety of concerns including for example how to efficiently deploy and share cartridges for multi tenant applications on a single node . Embodiments of the invention provide for deployment and sharing of cartridges on a node hosting multi tenant applications by establishing a cartridge library on each node . The cartridge library acts as a source for embedding cartridge instances in containers hosted by the node . These cartridge instances provide functionality for multi tenant applications of the node . One embodiment of the interaction between the server orchestration system and a node to implement cartridges for multi tenant applications is now described in more detail with reference to .

Each node also includes a server orchestration system agent configured to track and collect information about the node and to perform actions on the node . Thus in one embodiment using MCollective as the server orchestration system the server orchestration system agent can act as a MCollective server. The server orchestration system would then act as the MCollective client that can send requests queries and commands to the MCollective server on node .

As previously mentioned cartridges provide the underlying support software that implements the functionality of applications . In one embodiment an application may utilize one or more cartridge instances that are run in one or more resource constrained containers on nodes . Cartridge library provides an OS based location outside of all application containers that acts as a source for cartridge instantiations that provide functionality for an application . An application may use more than one cartridge instance as part of providing functionality for the application . One example of this is a JavaEE application that uses a JBoss AS7 cartridge with a supporting MySQL database provided by a MySQL cartridge.

A container is a resource constrained process space on the node to execute functionality of an application. In some embodiments a container is established by the node with resource boundaries including a limit and or designation of the amount of memory amount of storage and security types and or labels to be applied to any functions executed by the container . In one embodiment containers may be established using the Linux Containers LXC virtualization method. In some embodiments a container may also be known as a gear. In some embodiments cartridges instances for an application may execute in containers dispersed over more than one node as shown with application illustrated in . In other embodiments cartridge instances for an application may run in one or more containers on the same node as shown with application in .

In one embodiment the server orchestration system agent receives a request from the server orchestration system broker to create a container to run a type of cartridge that provides all or part of an application s functionality. When the server orchestration system agent receives the request from the broker it establishes a secure container associated with a unique local Unix user ID UUID on the node . In addition the server orchestration system agent establishes the resources boundaries associated with the created container by creating directory and file system locations associated with the container based on a type of container the broker instructed the node to create and creating a control group associated with the container .

Security policies for the container are also established by creating and applying security labeling and types to the container that fence off the container from other containers on the node and to prevent the container from accessing the underlying system resources of the node . Once a secure and resource constrained container is established the server orchestration system agent invokes the cartridge library in order to create a cartridge instance of the type of cartridge indicated in the request from the broker .

Cartridges and their resulting cartridge instances are responsible for handling cartridge callouts known as hooks . The hooks are executables that handle container specific details of configuring starting stopping deconfiguring the application that relies on the given cartridge type. In one embodiment to instantiate a cartridge instance in container the node can call the configure hook for the cartridge type requested by the broker. The configure hook call includes the name of the application and any other initial data e.g. a UUID of the container a namespace of the container a name of the application and potentially a location of a sample application to deploy used in establishing the cartridge instance . The configure hook invokes the cartridge library to cause an instance of the indicated type of cartridge to be embedded in container .

The cartridge instance is established based on a cartridge package a software package for a certain software component maintained in the cartridge library . In one embodiment the cartridge instances are established by copying the cartridge package data into the container space. This includes copying log information configuration information handling security constraints and converting any configuration templates into the actual configuration data for the application and container . The cartridge package includes the software or location to obtain the software that provides the underlying functionality of the cartridge as well as all hooks and configuration files that support the underlying functionality of the cartridge. The cartridge instance established in container configures the functionality of the cartridge specific to the application based on the information via the configure hook.

In one exemplary embodiment a variety of tasks are performed when the configure hook for the JBoss cartridge is called for instantiation in container . For example a bash script may run that creates a local JBoss AS instance for the application associated with the container which includes a standalone deployments directory mapped to the application s git repository deployments content. The configure hook may also create the git repository with git hooks to build and restart the server if a source development model is in effect set up a control shell script that handles the work for the start stop restart status hooks link log files to a monitoring API of the container update a standalone.xml file with a loopback address assigned to the application and install HTTP daemon HTTPD configuration to proxy an external application URL to the container .

Once the cartridge instance is configured the start hook can be called to start the functionality of the application provided by the cartridge instance . The stop hook may be used to stop the functionality provided by the cartridge instance .

In some embodiments the cartridge instances can issue commands to request system information of the application associated with the container such as information about the architecture and packages installed for the application. In addition the cartridge instances can trigger events such as resource threshold violations scaling events notification triggers and so on. In some embodiments a monitoring API in container is provided to collect monitoring data generated by each cartridge .

Each cartridge instance may also communicate using networking based connectivity. For example container is capable of Transmission Control Protocol TCP based communications via standard HTTP HTTPS and SSH ports established with container . Each cartridge instance may bind to these standard ports HTTP HTTPS and SSH ports when the cartridge instances are embedded in cartridge in order to listen for HTTP HTTPS or SSH communications directed to the cartridge instances . The standard ports for HTTP HTTPS and SSH may be established for all containers including container in the multi tenancy PaaS environment because theses communication protocols allow for virtual host routing thus allowing the single port e.g. to be multiplexed for multiple listeners.

For example for HTTP HTTPS communications ports and are the reserved ports used by the OS of the node to receive this type of traffic. To address the multi tenants e.g. containers that may receive HTTP HTTPS traffic on a node the OS contracts with each container hosted by the OS to bind to a user port such as port to communicate receive and send HTTP HTTPS traffic. When HTTP HTTPS traffic is received by the node at ports and the OS of the node handles routing this traffic to port of the endpoint container that has been bound to receive this traffic. A similar virtual host routing mechanism may be employed for the standard SSH port .

In the case of communication protocols that do not support virtual host routing or multiplexing the use of a public custom port of the container may be implemented. For example some communication protocols used by data stores e.g. MySQL MongoDB etc. for data messaging cannot be multiplexed to route traffic to different clients. An example of such a communication protocol may be Performance Co Pilot PCP which has a communication protocol designed to minimize consumption of network bandwidth. In one embodiment any cartridge instance utilizing a non standard communication protocol can reserve an exposed custom port of the container to be used by the cartridge instance as a unique port for the custom communication protocol.

These exposed custom ports may be mapped to an ephemeral port of the node OS. For example in the Linux kernel the ephemeral ports are ports to . In one embodiment each container such as container created in a node is reserved a limited number of the ephemeral ports. For example container may be assigned five ephemeral ports of the node OS such as ports and . Any of the cartridge instances embedded in container may use the expose port hook to open a connection to one of these ephemeral ports and point the connection to the cartridge instance as a custom port . Use of these custom ports provides flexibility to containers and cartridge instances of a multi tenant PaaS system to support custom protocols and the ability to adapt to new communication protocols that may be currently unknown to the PaaS system.

In some embodiments when container hosts more than one cartridge instance the cartridge instances may utilize in process communication to communicate with each other within the container . The custom ports discussed above may facilitate such in process communication.

Method begins at block where the server orchestration system obtains underlying software for each cartridge that is to be sourced to nodes in the PaaS system. In one embodiment obtaining the underlying software include determining a source of distribution that a node can obtain the software from. In some embodiments a current OS distribution may be the source of cartridge functionality software and as such information regarding where to access the software is provided in the cartridge instead of the software itself . For example when building a JBoss cartridge the JBoss software can be obtained from the RHEL OS distribution instead of separately packaging the JBoss functionality. This distribution sourcing avoids having to package up and maintain the software on the broker layer of the PaaS system. In other embodiment the cartridge functionality software is packaged and maintained in the cartridge itself.

At block a cartridge implementation is developed for each cartridge to comply with constraints of the PaaS framework specifications. For example the cartridge implementation is developed to include the hooks that allow the cartridge to be configured deconfigured run stopped and ports exposed and concealed within a container on a node of the PaaS system. Subsequently at block the cartridge is bundled in a distribution package to be available as standard software for the PaaS system. In one embodiment this means putting the cartridge in a format that can be managed and distributed by a package manager. For example the cartridge may be bundled in an .rpm file format for distribution.

At block the distribution package for each cartridge is installed in a cartridge library at each node of the PaaS system. In one embodiment all available cartridge packages for the PaaS system are installed at each node. In other embodiments cartridge packages may be selectively installed at different nodes. In some embodiment configuration management software such as Puppet may be utilized to distribute the cartridge packages to nodes.

Method begins at block where a request is received from a server orchestration system of a broker layer of a PaaS system. The request is to establish and configure a new cartridge on the node. In one embodiment the request includes a type of cartridge to configure an action and parameters such as a name of the application a namespace domain of the application and a UUID for the application.

At block the provided information from the request is utilized to establish a secure container associated with the UUID on the node. Resources boundaries associated with the created container are established by creating directory and file system locations associated with the container and creating a control group associated with the container. Furthermore security policies for the container are established by creating and applying security labeling and types to the container that fence off the container from other containers on the node and to prevent the container from accessing the underlying system resources of the node thereby ensuring that applications and or application components owned by different users can run securely on the same node.

At block the server orchestration system agent invokes a cartridge library on the node to create a cartridge instance of the type of cartridge indicated in the request from the broker. In one embodiment a configure hook for the cartridge type is called. Subsequently at block the cartridge library acts on the configure hook call by embedding an instance of the called cartridge type in the established container. In one embodiment the cartridge instance is copied from a cartridge package maintained in the cartridge library which includes the software or location to obtain the software that provides the underlying functionality of the cartridge as well as all hooks and configuration files that support the underlying functionality of the cartridge. The cartridge instance established in container then configures and provides functionality for the application.

The exemplary computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute instructions for performing the operations and steps discussed herein illustrated in by depicting instructions within processor .

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD a cathode ray tube CRT or a touchscreen an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium also known as a computer readable storage medium on which is stored software e.g. one or more sets of instructions software etc. embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory e.g. instructions and or within the processor e.g. processing logic during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface device .

In one embodiment the software include instructions for a resource server orchestration system agent which may correspond to server orchestration system agent of and or a software library containing methods that call the server orchestration system agent for providing containers and cartridge instances in a multi tenant PaaS environment implemented in a cloud computing system. While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as segmenting analyzing determining enabling identifying modifying or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

Reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. Thus the appearances of the phrase in one embodiment or in an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment. In addition the term or is intended to mean an inclusive or rather than an exclusive or. 

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

