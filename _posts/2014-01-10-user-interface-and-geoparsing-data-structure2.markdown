---

title: User interface and geo-parsing data structure
abstract: A method to allocate memory, in response to application requests, for a compact data structure having location data and a trailer section is provided. The trailer section of the compact data structure is checked to determine an offset for listings and indices representing the location data. Upon determining the offset, the listings and indices are loaded into memory and responses to the application requests are generated by utilizing the listings and indices stored in the memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09558177&OS=09558177&RS=09558177
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09558177
owner_city: Redmond
owner_country: US
publication_date: 20140110
---
This patent claims the benefit of and is a continuation of U.S. application Ser. No. 13 572 974 which was filed on 13 Aug. 2012 U.S. application Ser. No. 12 764 276 which was filed on 21 Apr. 2010 and was a divisional of U.S. application Ser. No. 11 196 387 which was filed on 4 Aug. 2005 and each of the above applications is incorporated herein by reference in their entirety.

Currently the Internet is an outstanding resource for receiving directional information for points of interest or landmarks. Typically a user inputs address information to specify an origin and destination. The user provides information that represents a street city state or zip for the origin and destination. After providing all necessary information the user sends the address information to a server that generates the directional information.

When the address information for the origin or destination is incomplete or mistakenly transcribed entering the address information may become very tedious. For instance a user that enters address information for the destination and origin but provides an incorrect zip code for the destination and sends the address information to the server may receive a response from the server indicating that the zip code for the destination is invalid. This is an inefficient response which imposes a burden on the user to find a correct zip code and increases the amount of time before the user receives the directional information. Moreover the server storing the address information may include a large database that increases the response time because the server inefficiently stores and accesses the address information.

A compact geo parsing data structure efficiently generates directional information and enables automatic completion or correction of address information. The compact geo parsing data structure includes a header body and trailer section. The header section includes metadata about the information stored in the data structure. The body section includes location data utilized to correct or complete the address information. The trailer section provides applications with information on how to access the data structure. Moreover the trailer section provides version information to allow data sources to update the compact data structure. Accordingly applications that request directional information may utilize the compact geo parsing data structure to validate the address information.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended tot be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the invention provide a compact data structure that provides client side validation of address information. The data structure is loaded into memory and organized to reduce the number of disk accesses required to process a request for directional information. Moreover a graphical user interface that receives the address information utilizes the compact data structure to automatically correct or complete the address information. Also the graphical user interface utilizes the data structure to copy and paste or drag and drop the address information from other applications. Accordingly embodiments of the invention provide the data structure and graphical user interface to efficiently process address information.

The client and server computers and each have processing units coupled to a variety of input devices and computer readable media via communication buses. The computer readable media may include computer storage and communication media that are removable or non removable and volatile or non volatile. By way of example and not limitation computer storage media includes electronic storage devices optical storages devices magnetic storage devices or any medium used to store information that can be accessed by client computers and communication media may include wired and wireless media. The input devices may include mice keyboards joysticks controllers microphones or any suitable device for providing user input to the client computers .

Additionally the client computers may store application programs that provide computer readable instructions to implement various heuristics. In an embodiment of the invention the client computers store a compact data structure that provides address information. The compact data structure communicates with application programs via an application programming interface API . The API receives application requests and accesses the compact data structure to generate responses to the application requests. Application requests may include copy and paste or drag and drop requests.

The client computers communicate with data sources and server computers over the communication network . The communication network may be a local area network a wide area network or the Internet. The client computers may include laptops smart phones personal digital assistants and desktop computers. The server computers may include map servers search engines or web servers. The server computers may receive address information and generate directional information based on the address information. The data sources may include individuals or companies that gather information on changes in address information such as for example a creation or destruction of a zone improvement plan code zip code . The information collected by the data sources is periodically sent to client computers to update the compact data structure . Accordingly the compact data structure provides a current representation of the address information in a geographic region. The computing environment illustrated in is exemplary and other configurations are within the scope of the invention.

With reference to the geo parsing data structure includes a header body and trailer sections. The trailer section provides layout information for the geo parsing data structure which enables an application to access the address information. In an embodiment of the invention the address information is stored in little endean format. The trailer section may include magic version and offset attributes that provide the application with the layout information. Table 1 provides a description of some attributes included in the trailer section of the geo parsing data structure . In an embodiment of the invention all unsigned Long ulong type data is assumed to be 4 bytes long all unsigned Short ushort type data is assumed to be 2 bytes long and all unsigned byte ubyte type data is assumed to be 1 byte long.

The magic attribute specifies whether the geo parsing data structure has been compressed using a file compression technology such as for example ZIP or RAR. The version attribute allows data sources to update or modify the address information stored in the geo parsing data structure . The version attribute allows the geo parsing data structure to be dynamic. As described below the body of the geo parsing data structure may include various lists. The number of lists represented in the body varies depending on the version attribute. The application may require that the geo parsing data structure have a minimum version number. In an embodiment of the invention the application checks the version of the geo parsing data structure to determine whether the geo parsing data structure is updated. Moreover when the lists included in the body are updated to include new streets new zip code the version attribute may be incremented by a specified unit. Moreover the version attribute may be incremented when the body is updated to include application specific indices such as for example an index that may speed up responses to application requests by arranging cities based on a specified number characters of the city name. In an embodiment of the invention the specified number of characters is two and the index is referred to as an ab city index. The offset attribute specifies a location in the geo parsing data structure where an offset array is stored. Thus the offset attribute provides an entry point into the geo parsing data structure at which the address information is stored.

The offset array is a collection of offset count pairs for various lists and indices included in the body of the geo parsing data structure . An offset count pair specifies the location of a list in the geo parsing data structure and the size of the list. The offset array enables an application to efficiently access the address information stored in the geo parsing data structure . When the geo parsing data structure is updated to include future lists or indices the offsets to the list or indices are added to the end of the offset array. In an embodiment of the invention the list and indices are stored in an order that is most useful for the application such as for example an order in which locality of reference is optimized Table 2 below provides a description of the offset array included in the body of the geo parsing data structure . In an embodiment of the invention if the offset is set to 1 the list or index does not exist.

The body includes an offset array that provides offset count pairs for a city list a state list a zip list a zip state city list a city state zip list a state city list an ab city index a city index and a zip index. The offset array may include other offset count pairs not described in Table 2 above. The lists and indices represented by the offset count pairs will be described in more detail below.

The city list provides a list of all cities represented in the geo parsing data structure . The city list also includes the name of the city and length of the city name. The city list also stores offsets to locations in the geo parsing data structure that references each city. The city list may have the structure illustrated in Table 3 below.

The city list avoids the storage of duplicates city names and provides the names of all the cities and locations where the cities are listed such as for example in the city state zip list.

The state list provides a representation of all states in the geo parsing data structure. The state list provides a name which may be abbreviated for each states and a length of the name. The state list also includes an offset to locations in the geo parsing data structure that reference each state. The state list may have the structure illustrated in Table 4 below.

The state list provides the state names and references to locations in the state city list providing references to all cities for a corresponding state. In an alternate embodiment of the invention the states are not abbreviated.

The zip list provides all valid zip codes each entry indicates the city or cities in case of an overflow and state for each zip code. The zip list includes an overflow bit offsets to location in the geo parsing data structure for each state and city represented within the state list and city list. The zip list may have the structure illustrated in Table 5 below.

The zip list may be a fixed size to enable applications to quickly locate a zip code by using a zip index that stores zip code entries in increments of n. Therefore dividing the zip code by n provides an approximate location of the zip in the zip index. The zip index is accessed at the approximate location and a segment of the zip list corresponding to the approximate location is read into the memory and linearly traversed to locate the zip code. In an alternate embodiment of the invention the zip code may be located via a divide and conquer strategy.

The zip state city list is an overflow list that represents zip codes that cover more than one city or state. The zip state city list provides a count of the number of cities or states in the overflow list and an index or pointer in the city or state list that represents the city or state included in the overflow list. The zip state city list may have the structure illustrated in Table 6 below.

A zip code normally represents distinct geographic regions. However development of the geographic regions represented by the zip code may cause two cities to share the zip code. Accordingly the overflow list allows representation of cities sharing a zip code.

The city state zip list organizes the states and zip codes based on city name. Each city in the United States of America may have one or more entries in the city state zip list. The city state zip list may include a count state index and zip code. The information stored in the city state zip list may be organized according to the layout shown in Table 7 below.

For instance a city called Springfield may be located in more than 5 states. Accordingly the count specifies the number of state zip pairs that includes a city having the name Springfield. For each state zip pair a state index specifies a location in the state list having information about the state and the zip code specifies the zip code associated with the city and state. Accordingly Springfield may have more than five state zip pairs.

The state city list provides a listing of cities in each state. The state city list gives the number of cities in each state and an index or pointer to each city stored in the city list. Each of the entries in this list follows the structure as illustrated in Table 8 below.

For instance District of Columbia would have a count representing one city and the index would point to an entry storing Washington in the city list. Accordingly once a state is chosen the list of valid cities in the state are listed and if only one city is within the selected state the city is automatically selected and presented to a user.

The ab city city and zip indices provide references or points to city list or zip list. The ab city index provides offset to each city based on at least the first two characters of each city name. For instance Ch will provide references to all cities stored within the geo parsing data structure that begin with Ch to facilitate fast access to the list of cities. The city index provides references or points to each city in the city list. The reference allows a city and the information associated with the city to be retrieved based on the reference. The zip index may be a sparse list having references that represent zip codes in increments of n such as for example fifty. In an embodiment of invention each index may be implemented as an array of references. Accordingly the geo parsing data structure provides a complex data domain in a compact and searchable format. Also the geo parsing data structure may be memory mapped to provide efficient access to address information. Moreover some lists such as the city list may be preloaded based on access frequency. Therefore all address information can be accessed efficiently on demand with a minimum number of seeks and applications utilizing the geo parsing data structure may read consecutive memory blocks storing address information with the size of the read known ahead of time.

The location A and location B sections provide fields where a user can enter address information. The location A and B sections and include paste address buttons and that allow a user to populate the address fields using information copied from another application. The paste address buttons and enable a copy and paste functionality on the graphical user interface . The location A and B sections and include a previous locations field and that lists addresses that were entered previously at each section. The previous locations field and allows a user to quickly access previous address information. The location A and B sections and provide address fields and city fields and state fields and and zip code fields and . Each field collects information pertaining to a portion of address information that specifies location A and B and . A get directions check box allows a user to specify whether to retrieve a map or directions from location A to B. When the get directions check box is checked the user is presented with the directional information. Additionally the user can specify the type of directional information presented by utilizing the direction option route type option or map style option . The direction option allows the user to specify which location should be the origin. The route type option specifies whether the user prefers a short or quick route and the map style option allows the user to specify how the directional information is displayed. The graphical user interface allows the address information to be copied and pasted using the paste address buttons and as either location A or B or . In an embodiment of the invention a user is restricted from completing address information in location B until at least city zip or state information for location A is provided in fields or . The restriction may be presented by preventing access to location B or graying out fields on location B such as for example fields .

In addition to the copy and paste functionality the graphical user interface allows a user to drag and drop address information from an application to the graphical user interface . The graphical user interface utilizes the geo parsing data structure to validate or complete the address information retrieved from copy and paste or drag and drop actions of the user. Address information and surrounding text can be drag and dropped or copy and pasted from any application onto the graphical user interface and parsed to extract the appropriate address information to set the fields of location A and B and with valid address information. The API receives the address information and parses the address information utilizing the geo parsing data structure to validate and correct or complete address information. Accordingly the geo parsing data structure provides client side validation and reduces messages transmitted when an incomplete or incorrect address is sent to a map server or search engine.

Also the geo parsing data structure enables numerous efficiencies when entering address information. In an embodiment of the invention when a user partially types in a city or state the user receives an auto complete of the state or city which may be received from the ab city index and sent to the graphical user interface . and illustrate screen shots of fields on the graphical user interface utilizing the geo parsing data structure . With reference to when a user types Sp in the city field the user is presented with a set of cities beginning with Sp. Once an appropriate city is selected Spade the state and zip fields and or and are restricted to states and zips that are related to the selected city. If there is only one city with the name specified by the user then the state and zip code fields and or or are immediately filled and need not be filled in by a user. With reference to when a city that is present in multiple states is entered by the user in the city fields or and a state is selected in the state field or the zip code fields and are restricted to zip codes applicable to that particular city. If there is only one zip code associated with the city the zip code field or is automatically filled in. When a zip code is provided in zip code fields or the city and state fields and or and are automatically filled without further user intervention. Moreover when a city and state are selected the zip code fields or is capable of auto completion because the zip codes are restricted to zip codes related to city and state. For instance if the user specifies the state to be Washington and the city to be Redmond the zip code field is restricted to valid zip codes in the Redmond area. When there is only one zip code associated with the city that zip code is selected and the user does not have to enter zip code information. Accordingly the geo parsing data structure allows applications utilizing forms or interfaces that collect address information similar to graphical user interface to quickly validate and complete or correct the address information.

The method begins in step after the geo parsing data structure is installed on client computer . The API associated with the geo parsing data structure receives application requests containing address information in step . The API retrieves the offset from the geo parsing data structure in step . The offset points to locations in the geo parsing data structure storing the list and indices and the API loads the list and indices into memory in step . The API processes the address information utilizing the list and indices loaded into memory in step . The method ends in step .

The geo parsing data structure is a compact and efficient storage format that enables the validation of address information. The geo parsing data structure may be implemented as a browser extension or an operating system utility. Accordingly applications executing on client computer can utilize the geo parsing data structure .

The method begins in step which may occur after the geo parsing data structure has been loaded into memory. In step partial address information is received at a client computer from one or more applications executing on the client computer via a client computer action such as for example copy and paste or drag and drop. The partial address information is parsed to determine the missing portions of the partial address information in step . The missing portions may relate to a city state or zip code etc. The geo parsing data structure is traversed to determine the address information for the missing portions in step . The address information associated with the missing portions is selectively displayed in step . The method ends in step .

The partial address information includes information relating to a location of a point of interest business or residence. The partial address information includes information related to fields of the graphical user interface . In an embodiment of the invention partial address information omits information related to one or more of the fields or of either location A or location B . Furthermore the partial address information may include information that is incorrectly transcribed. The omitted information is a missing portion that will complete the partial address information and the geo parsing data structure is consulted to find address information related to the missing portions of the partial address information. When a user enters partial address information such as for example address information missing only state information the partial address information is parsed to determine the information related to the fields that are omitted. For instance the partial address information entered by the user is parsed to detect that state information is missing and the geo parsing data structure is consulted to determine the state information corresponding to the omitted information utilizing the received zip or city information. The state information corresponding to the missing portion is selectively displayed on a display device at the client computer. Accordingly the partial address information is validated to ensure that the address information has been entered properly and the geo parsing data structure provides information to complete the partial address information. In an embodiment of the invention applications that have complete address information may utilize the geo parsing data structure to validate the complete address information.

In sum applications in communications with an API and a geo parsing data structure can process address information to validate correct or complete the address information. The geo parsing data structure is a dynamic structure that may be transmitted from one or more data sources and stored on client computers to provide efficient access to address information for locations represented by the geo parsing data structure. Alternative embodiments of the invention provide a graphical user interface having a plurality of fields utilizing a compact data structure having address information to auto complete the plurality of fields the graphical user interface includes a first set of the plurality of fields to receive a first address information a second set of the plurality of fields to receive a second address information and paste buttons to automatically fill in the plurality of fields associated with the first and second address information. When the first or second address information is copied depressing the paste buttons automatically fills in appropriate fields with the copied address information. Also if the first or second address information is dragged and dropped onto the graphical user interface appropriate fields are completed. Automatically filling in the plurality of fields includes parsing the first or second address information provided by a user and restricting a set of options presented to the user when either a city or zip code is entered into the graphical user interface. The compact data structure enables the validation of the first or second address information because the compact data structure stores valid address information. Accordingly the compact data structure auto completes the first or second address information with valid address information. The foregoing descriptions of the invention are illustrative and modifications in configuration and implementation will occur to persons skilled in the art. For instance while the invention has generally been described with relation to those descriptions are exemplary. Although the subject matter has been described in language specific to structural features or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. The scope of the invention is accordingly intended to be limited only by the following claims.

