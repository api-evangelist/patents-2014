---

title: Graphical user interface widget to select multiple items from a fixed domain
abstract: Disclosed is a method for operating a graphical user interface (GUI). In an edit state, the GUI allows a user to select multiple items from a fixed domain of items that represents a total set from which selections may be made. In a rest state, the GUI allows the user to easily recognize which of the items from the fixed domain are currently selected. In the rest state, the items currently selected are displayed in a read only mode such that user input relative to the items displayed is ignored.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09588661&OS=09588661&RS=09588661
owner: EMC IP Holding Company LLC
number: 09588661
owner_city: Hopkinton
owner_country: US
publication_date: 20140521
---
Embodiments of the invention relate to the field of graphical user interfaces and more specifically to graphical user interface widgets to select multiple items.

The present description includes material protected by copyrights such as illustrations of graphical user interface images. The owners of the copyrights including the assignee of the present invention hereby reserve their rights including copyright in these materials. The copyright owner has no objection to the reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records but otherwise reserves all copyrights whatsoever. Copyright EMC Corporation 2014.

A graphical user interface GUI is a type of user interface that allows users to interact with electronic devices through visual indicators displayed on one or more electronic visual displays. The actions in a GUI are usually performed through direct manipulation of the graphical objects or elements by the user. A GUI is often comprised of GUI widgets also referred to as visual widgets or widgets . Some GUI widgets support interactions with the user e.g. labels buttons and check boxes through manipulation of the GUI widgets while others act as containers that group GUI widgets added to them e.g. panels windows and tabs and or include other content for presentation.

A widget toolkit also referred to as a widget library or GUI toolkit is a set of GUI widgets for use in designing applications with GUIs. A widget toolkit itself is a piece of software which is usually built on top of an operating system windowing system or window manager and provides programs with an application programming interface API allowing them to make use of the GUI widgets. Widget toolkits can be either native or cross platform.

A windowing system or window system is a type of GUI which implements the WIMP windows icons menus pointer paradigm wherein the pointer is also referred to as the cursor . Often each currently running application is assigned a usually resizable and usually rectangular shaped area to present its graphical user interface to the user. Usually a window decoration is drawn around each window. A windows manager is system software that controls the placement and appearance of windows within a windowing system this software works in conjunction with the underlying graphical system that provides required functionality support for graphics hardware pointing devices and a keyboard and are often written and created using a widget toolkit windows themselves are often considered widgets . Thus the programming of both the window decoration and of available GUI widgets inside of the window is eased and simplified through the use of widget toolkits.

Some other types of GUIs have icons and perhaps menus but may do not use a pointer and or run programs in windows or in windows without window decorations these are sometimes referred to as post WIMP user interfaces e.g. touch screen based operating systems such as iOS manufactured by Apple of Cupertino Calif. and Android manufactured by Google of Mountain View Calif. . Such GUIs rather than using windows often use the display area of the electronic visual display available for applications to show the output of a single currently selected application. These GUIs also often support styles of interaction using more than one finger in contact with a display which allows actions such as pinching and rotating. Still other GUIs support both WIMP and post WIMP simultaneously and may use the display area of the electronic visual display available for applications to show the output of multiple currently selected applications using a form of screen splitting e.g. Windows 8.1 from Microsoft Corporation of Redmond Wash. .

Many GUIs are implemented with software relying on a model view controller MVC architecture which divides the software into three interconnected parts so as to separate internal representations of information from the ways that information is presented to or accepted from the user. A first part the model consists of application data business rules logic and functions. A view can be any output representation of information such as a chart or a diagram. Multiple views of the same information are possible. The third part the controller accepts input and converts it to commands for the model or view. A model view controller allows for a flexible structure in which the GUI is independent from and indirectly linked to application functionality so the GUI can be easily customized. This allows the user to select or design a different skin at will and eases the designer s work to change the interface as the user needs evolve.

Regardless of the type of GUI a given space at a location within the display area of the electronic visual display which may be all of the display area may be allocated to a GUI widget and where that given space is too small the entire GUI widget and or the entire content of the GUI widget will not be visible at one time typically the user scrolls in order to change which parts of the GUI widget and or its contents are currently visible . As previously described one or more GUI widgets referred to as internal GUI widgets may be placed inside another GUI widget referred to as a container GUI widget . Where one or more GUI widgets are put inside another GUI widget the one or more internal GUI widgets are each provided a space at a location within that container GUI widget and while at least some part of an internal GUI widget is visible the space at the location provided that internal GUI widget corresponds to a space at a location within the display area of the electronic visual display. Thus the visible part which may be all of a given internal GUI widget is visible at a space at a location within the display area of the electronic visual display.

A popup is a type of GUI widget that covers part of what was being displayed immediately prior to the popup GUI widget being displayed e.g. a pop up window which typically has a window decoration a pop up menu . Popup GUI widgets are intended to be sufficiently disruptive to draw the user s attention to the popup GUI widget.

A dialog box or dialogue box is a type of GUI widget used to communicate information to the user prompt the user for a response or both. Dialog boxes are classified as modal or modeless depending on whether or not they block interaction with the software that initiated the dialog.

A checkbox also referred to as a check box tickbox or tick box is a type of GUI widget that permits the user to make a binary choice i.e. a choice between one of two possible mutually exclusive options . Checkboxes are often shown on the display area as a square box next to an item the term item here referring to both text adjacent the check box describing or identifying the item as well as the underlying item itself and the square box can contain 1 white space for false or 2 a mark e.g. a tick mark or x for true. Inverting or toggling the state of a checkbox is done responsive to user input e.g. by clicking the mouse on the box and or item using a keyboard shortcut . A checkbox list is a type of GUI widget that offers a series of checkboxes each with a binary choice between two options to allow the user to select one or more of the choices that is to select one or more of the items . While the checkboxes of a checkbox list are one form of visual indication of which items are currently selected other types of such visual indications have been used e.g. instead of the checkboxes highlighting those items that are currently selected not displaying any boxes but still using white space and a mark to next to each often to the left item to visually indicate which items are currently selected .

The following description describes methods and apparatuses for implementing graphical user interface widgets to select multiple items. In the following description numerous specific details such as resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding of the present invention. It will be appreciated however by one skilled in the art that the invention may be practiced without such specific details. In other instances control structures logic implementations opcodes means to specify operands and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement the invention without undue experimentation.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to affect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Bracketed text and blocks with dashed borders e.g. large dashes small dashes dot dash and dots may be used herein to illustrate optional operations that add additional features to embodiments of the invention. However such notation should not be taken to mean that these are the only options or optional operations and or that blocks with solid borders are not optional in certain embodiments of the invention.

In the following description and claims the terms coupled and connected along with their derivatives may be used. It should be understood that these terms are not intended as synonyms for each other. Coupled is used to indicate that two or more elements which may or may not be in direct physical or electrical contact with each other cooperate or interact with each other. Connected is used to indicate the establishment of communication between two or more elements that are coupled with each other.

The GUI widget has two basic states and what is displayed by the GUI widget is dependent upon its state. A line with a circled 1 illustrates that initially the GUI widget is in a rest state a line with a circled 2 illustrates that if there is an initial state change it is from the rest state to an edit state and a line with a circled 3 illustrates that if there are one or more subsequent state changes they ping pong between the edit state and the rest state any such state changes typically end in the rest state . Exemplary contents for the rest state and the edit state are illustrated. Only the contents of one of the rest state and the edit state are shown within the space and location at a time.

The GUI widget allows a user to select multiple items from a fixed domain of items while in the edit state and that allows the user to easily recognize which of the items from the fixed domain are currently selected while in the rest state . illustrates an exemplary fixed domain of items including Item One through Item N. The fixed domain of items represents a total set from which selections may be made. One or more data structures not shown are used to store the fixed domain of items as well as each item s corresponding current state which can be either the selected state or the unselected state not shown . These data structures are themselves not made visible on the display area of the electronic visual display using the GUI widget . Rather the items and states from these data structures are selectively made visible through the GUI widget .

As illustrated the size of the space for both the rest state and the edit state of the GUI widget is the same. Based upon the size of the space provided to the GUI widget a maximum number of the items may be simultaneously displayed will fit within the GUI widget s space this is true for both the rest state and the edit state . While in this maximum number is 4 a smaller or larger number would be more appropriate depending upon the goal of the GUI widget . The selection of this maximum number is often an educated guess based upon the number of items most users are expected to select and in some embodiments the number is increased by one or two to provide for some buffer .

The rest state is a list state that visibly displays a current set of the items. The number of the items in the current set does not exceed the maximum number that will fit within the space of the GUI widget and the current set of the items includes as many of the items that are currently selected from the fixed domain that fit within the space of the GUI widget . Thus the list state only displays those of the items from the fixed domain that are currently selected such that those of the items from the fixed domain that are not currently selected are not displayed. Any of the items that are currently selected from the fixed domain that do not fit can be made visible responsive to user input that scrolls to change those of the items in the current set one or more techniques may be enabled to receive user input indicating scrolling including swiping activation of a scroll object such as a scrollbar shown in a dashed box to show it is optional and if present may optionally be present only when there are more currently selected items than the maximum number that will fit within the space of the GUI widget . While in one embodiment the list state is displayed in a read only mode such that user input relative to the items currently displayed is ignored alternative embodiments may allow for some form s of interaction.

The edit state is a multi item selection list state that 1 displays as many of the items from the fixed domain that fit within the space of the GUI widget and 2 displays visual indications of which of the items currently displayed are currently selected . For the former the example from shows that the four items from the fixed domain currently made visible in the GUI widget s space are Item One Item Two Item Three and Item Four. Any of the items from the fixed domain that do not fit can be made visible responsive to user input that scrolls to change those of the items being currently displayed one or more techniques may be enabled to receive user input indicating scrolling including swiping activation of a scroll object such as a scrollbar shown in a dashed box to show it is optional and if present may optionally be present only when there are more currently selected items than the maximum number that will fit within the space of the GUI widget .

For the visual indications of which of the items currently displayed are currently selected illustrates the use of check boxes to the left of each of the currently displayed items and an X mark within those of the check boxes corresponding to the currently selected ones of the items Item Two and Item Three . Alternative embodiments of the invention may use other types of visual indications e.g. instead of the checkboxes highlighting or otherwise altering the text e.g. italicize bold the text of the items that are currently selected not displaying any boxes but still using white space and a mark next to each e.g. to the left of each item to visually indicate which items are currently selected instead of a x mark a tick mark . The visual indications may be toggled between a selected state and an unselected state responsive to user input. Any such toggling changes which of the items from the fixed domain are currently selected in one embodiment this will be tracked in the previously mentioned set of data structures and such changes will be reflected in the items displayable in the rest state if and when the GUI widget is transitioned back to the rest state e.g. if user input is received relative to the illustrated example that unselects Item Two and selects each of Item Seven Item Eight and Item N then one embodiment displays Item Three Item Six Item Seven and Item Eight and does not display displayable Item N because only four item fit at a time in the space of the GUI widget .

Thus the displayable items while in the edit state are all of the items of the fixed domain of items while the displayable item in the rest state are only those of the items from the fixed domain of items that are currently selected that are currently in the selected state . In the example of where the maximum number of displayed items is 4 only 4 of the displayable items will be displayed at a time by the GUI widget . Also the GUI widget may be placed inside a container GUI widget along with other content illustrated by dashed boxes .

As discussed above only one of the rest state and the edit state is made visible as the GUI widget at a time and as illustrated the space and location of the GUI widget is the same regardless of whether the GUI widget is currently in the rest state or the edit state . Thus transitioning from the rest state to the edit state requires transitioning to displaying the GUI widget in the edit state taking up the same space at the same location within the display area of the electronic visual display as the GUI widget did when it was in the rest state in other words the GUI widget is not resized even though there will typically be more displayable items all of the items in the fixed domain in the edit state than in the rest state . The reverse is true as well and thus the GUI widget is not resized when transitioning from the edit state to the rest state even though there will typically be less displayable items only the currently selected items from the fixed domain to display in the rest state than in the edit state . Thus the edit state does not require any more real estate on the screen than the rest state and transitioning between states does not cause any other content e.g. other content and or content outside of the container GUI widget at other locations within the display area to be made non visible covered up because the edit state takes up the same space at the same location as the rest state. Further the transitioning between these states is done without use of other GUI widgets such as a dialogue box a popup window or a popup menu so as to avoid making other content e.g. other content and or content outside of the container GUI widget at other locations within the display area to be made non visible.

While the space at the location is only part of the display area of the electronic visual display the given space at the location within the display area of the electronic visual display allocated to a GUI widget such as the GUI widget or the container GUI widget may be all of the display. Also some embodiments of the invention allow the GUI widget or the container GUI widget to be moved i.e. to change the location on the display area e.g. through dragging and or allow the container GUI widget to be resized which can result in the GUI widget being only partially visible. For instance while the space and location is illustrated as being sufficient to display the entire GUI widget also illustrates there is sufficient space for the container GUI widget and its other content when and if the space is too small for the GUI widget then the entire GUI widget will not be visible at one time typically the user scrolls in order to change which parts of the GUI widget and or its contents are currently visible . If the GUI widget is put inside the container GUI widget the internal GUI widget is provided a space at a location within the container GUI widget and while at least some part of the GUI widget is visible the space at the location within the container GUI widget provided the container GUI widget corresponds to a space at the location within the display area of the electronic visual display .

One advantage of the GUI widget is that upon a transition the only item in the display area of electronic visual display that needs to change is the GUI widget and this change occurs in place on the display area of the electronic visual display thus the user does not have to experience the disruption interruption in work flow caused by a pop up GUI widget or a resizing of the GUI widget which may require a change in the user s attention to a different and or additional location on the display area and at diferent content that was not part of what was previously displayed .

Also where the maximum number of the items that may be simultaneously displayed will fit within the GUI widget s space is large enough to accommodate all of the currently selected items the rest state allows a user to visually scan the GUI widget to determine which of the items from the fixed domain are currently selected the user need not interact with the with the GUI widget to see what items are currently selected . Even if there are more than the maximum number of displayable items currently selected a user can more easily review the currently selected items through scrolling in the rest state because only the currently selected items are displayable items as opposed to in the edit state in which the user may have to scroll through all of the items from the fixed domain to see which are currently selected .

Another advantage of the GUI widget is that its initial state is the rest state and the edit state is on demand. Often a GUI widget is viewed to determine what items are currently selected and the selections are not changed in these situations it is advantageous that the GUI widget s initial state is the rest state because it is simpler and cleaner than the edit state . Further where the GUI widget is placed within the container GUI widget with other content which may be one or more other GUI widgets some or all of which allow for user interaction the user may be viewing the container GUI widget for purposes other than changing the items selected by the GUI widget and thus having the GUI widget s initial state be the simpler and cleaner rest state is advantageous.

In some embodiments of the invention the selection states of the items in the fixed domain of items are preconfigured defaulted to have some but not all of the items currently selected. In the case where only some of the items are preconfigured to be currently selected e.g. the items preconfigured as currently selected are often chosen to be less than the maximum number discussed above and those most often selected the GUI widget when initially viewed in the rest state has items displayed. In contrast the case where none of the items are preconfigured to be currently selected the GUI widget when initially viewed in the rest state does not display any items different embodiments may handle this situation different including displaying white space an indication that no items are currently selected e.g. none Please make selections Click here to make selections etc. .

Since other type of GUI widgets for selecting multiple items previously exist users will expect these pre existing GUI widgets to be used. As such use of the GUI widget will be an unexpected result of executing an application which uses the GUI widget . However from the users perspective overcoming the learning curve of the GUI widget will leave them with the unexpected result of preferring the GUI widget because of the advantages described herein.

One or more mechanisms may be implemented that each enable a different kind of user input to cause transitions between the rest state and the edit state . In fact where each of a first set of one or more mechanisms is implemented to cause a transition from the rest state to the edit state and where each of a second set of one or more mechanisms is implemented to cause a transition from the rest state to the edit state the first and second sets may be the same or different for different embodiments of the invention e.g. one of the sets may be a subset of the other the sets may be mutually exclusive the sets may overlap . In certain embodiments both the first and second sets of mechanisms require an explicit action by the user as opposed to an implicit action such as mousing over the GUI widget . For example in certain embodiments of the invention both the first and second set includes a state change button that when activated through user input cause a state change while illustrates a state change button and a state change button with a dashed box in the upper right hand corners respectively of the rest state in the edit state different embodiments may place these state change buttons in other locations and or support such a state change button in only one of the rest state and the edit state . While the state change button and the state change button may look the same they look different in different embodiments of the invention e.g. the state change button may show a pencil while the state change button may show a symbol indicating close e.g. a box with an X in it a red circle .

Certain embodiments include in the first set of mechanisms a user interaction within the GUI widget e.g. a tap a double tap a click a double click a right click and include in the second set of mechanisms a user interaction outside of the GUI widget e.g. a tap at double tap a click a double click a right click . The former indicating that focus is on the GUI widget and the latter indicating a change in focus away from the GUI widget .

One specific embodiment supports in the first set only the state change button and in the second set both the state change button and a user interaction outside of the GUI widget .

At block of a GUI widget is initially displayed on an electronic visual display that has a display area in a rest state taking up a space at a location within the display area of the electronic visual display. With reference of this would be GUI widget in the rest state . The rest state is a list state that visibly displays a current set of the items wherein the number of the items in the current set does not exceed a maximum number that will fit within the space of the GUI widget. The current set of the items includes as many of the items that are currently selected from the fixed domain that fit within the space of the GUI widget and any of the items that are currently selected from the fixed domain that do not fit can be made visible responsive to user input that scrolls to change those of the items in the current set. The list state only displays those of the items from the fixed domain that are currently selected such that those of the items from the fixed domain that are not currently selected are not displayed. While in the list state the displayed items are in a read only mode such that user input relative to the items displayed is ignored.

At this point in the flow the user may choose not to interact with the GUI widget or interact with it only to the extent the user reads the items currently displayed in the rest state. As a result flow from block is illustrated with a dashed line to indicate it is optional dependent upon the action of the user. Assuming the user chooses to interact with the GUI widget flow passes from block to .

As shown in block responsive to receiving user input the GUI widget is transitioned to displaying an edit state taking up the same space at the same location within the display area of the electronic visual display such that the GUI widget is not resized. With reference of this would be GUI widget s initial state change to the edit state . The transitioning occurs without any intervening display of any other GUI widgets including a dialog box a popup window or a popup menu. The edit state is a multi item selection list state that 1 visibly displays as many of the items from the fixed domain that fit within the space of the GUI widget and 2 displays visual indications of which of the items currently displayed are currently selected where any of the items that do not fit can be made visible responsive to user input that scrolls to change those of the items currently visible. Each of the visual indications may be toggled between a selected state and an unselected state responsive to user input. The transitioning does not cause any other content at other locations within the display area to be made non visible because the edit state takes up the same space at the same location as the rest state. From block flow passes to block .

In block the user provides additional input and it is determined what type of input relative to the GUI widget the user has provided. While in four types of user input are shown other embodiments may support more or less types of user input.

The first type of user input is a toggling of one or more of the currently displayed items between the selected state and the unselected state which causes flow to pass to block where the corresponding visual indications are refreshed to reflect the changes in the selection s . From block flow returns to block .

The second type of user input is scrolling which causes flow to pass to block where different ones of the items are displayed as a result of the scrolling action. From block flow returns to block .

The third type of user input indicates the user wishes the GUI widget to perform a state transition to the rest state and this user input causes flow to pass to block at which the GUI widget is transitioned to displaying in the rest state taking up the same space at the same location within the display area of the electronic visual display. Similar to block at this point in the flow the user may choose not to interact further with the GUI widget or interact with it only to the extent the user reads the items currently displayed in the rest state. As a result flow from block is illustrated with a dashed line to indicate it is optional dependent upon the action of the user. Assuming the user chooses to interact with the GUI widget flow passes from block to .

The fourth type of user input is illustrated as other and this user input causes flow to pass to block where the appropriate action is taken. By way of example with reference to if the GUI widget was placed within the container GUI widget and the user input was too close the container GUI widget the appropriate action would be to close the container GUI widget which would also close the GUI widget .

Both screenshots show a container GUI widget including other content specifically four GUI widgets captioned Identity Options Notifications and Action as well as several button GUI widgets and a GUI widget captioned Product Selections. In the GUI widget includes a state change button illustrating a pencil and a scroll object a scrollbar and is in a rest state displaying Long Beach and San Diego as the currently selected items that fit in the GUI widget s space . In the GUI widget includes a state change button illustrated as an X and being a close button and a scroll object a scrollbar and is in an edit state displaying 1 Palo Alto Sacramento San Diego San Francisco and the top part of San Jose as the items from the fixed domain that fit in the GUI widget s space and 2 check boxes to the left of each of the items as the visual indications of which of the currently visible items are currently selected specifically only the checkbox corresponding to San Diego has a checkmark inside indicating it is the only one of the currently selected items of the currently visible items .

Each selection in the Product Selections is a collection of hosts e.g. laptops desktops servers specifically the hosts are grouped into different Selections. The GUI widgets within the container GUI widget each allow for the configuration of an aspect a policy of a service backup and the GUI widgets within the container GUI widget collectively allow for the simultaneous display of the user selectable configurations for the service.

As described with reference to since the initial state of the GUI widget is the rest state the user can easily read the currently selected items Long Beach and San Diego . If this is sufficient for the user s purposes then the user need not interact with the GUI widget to know these are the currently selected items. However if the user wishes to consider making more less or different selections then the user can interact with the GUI widget by triggering the state change button responsive to which the GUI widget transitions to the edit state reflected in . In the user can interact by causes the GUI widget to scroll through all of the possible selections to change the selections and to cause a transition back to the rest state . Thus the above discussed advantages apply to the screenshots of the exemplary application program.

The currently selected items in the GUI widget as well as the GUI widget captioned Policies are used to filter which rows of the database are currently displayable in the table. Specifically the GUI widget captioned Selections operates to filter on the Selections column and the GUI widget captioned Policies operates to filter on the Policies column. Responsive to receiving user input indicating a desire to transition the GUI widget to the edit state the GUI widget would be transitioned and responsive to receiving user input that changes which of the items are currently selected adding and or removing items from the Selections the table filtered by on the currently selected items would be refreshed e.g. the database would be filtered based on the now currently selected items and the table refreshed to add remove rows of the database from the table . Thus in addition to the advantages previously described the GUI widget of has the advantage that the result of the changes in the currently selected items with GUI widget are simultaneously reflected in the table In other words the ability of the GUI widget to be in the rest state allows for a visual scan by the user as previously described while the transition from the rest state to the edits state using the same space at the same location avoids 1 covering up other content e.g. the table reflecting the results of changing the selection this would not be trued if a pop up window dialog box or pop up menu that covered part of the table were used and 2 covering up other GUI widgets acting as filters e.g. the GUI widget captioned Policies and vice versa.

While the examples of the GUI widget illustrated herein are generally designed according to a WIMP paradigm it should be clear that one of ordinary skill in the art would understand how to design according to a post WIMP paradigm based on .

An electronic device stores and transmits internally and or with other electronic devices over a network code which is composed of software instructions and which is sometimes referred to as computer program code or a computer program and or data using machine readable media also called computer readable media such as machine readable storage media e.g. magnetic disks optical disks read only memory ROM flash memory devices phase change memory and machine readable transmission media also called a carrier e.g. electrical optical radio acoustical or other form of propagated signals such as carrier waves infrared signals . Thus an electronic device e.g. a computer includes hardware and software such as a set of one or more processors coupled to one or more machine readable storage media to store code for execution on the set of processors and or to store data. For instance an electronic device may include non volatile memory containing the code since the non volatile memory can persist code data even when the electronic device is turned off when power is removed and while the electronic device is turned on that part of the code that is to be executed by the processor s of that electronic device is typically copied from the slower non volatile memory into volatile memory e.g. dynamic random access memory DRAM static random access memory SRAM of that electronic device. Typical electronic devices also include a set or one or more physical network interface s to establish network connections to transmit and or receive code and or data using propagating signals with wired or wireless connections with other electronic devices. One or more parts of an embodiment of the invention may be implemented using different combinations of software firmware and or hardware.

The electronic device includes hardware comprising a set of one or more processor s including graphics hardware an electronic visual display which may be an liquid crystal display screen a projector etc. driven by the graphics hardware user input hardware shown overlapping the electronic visual display since this could include a touch screen and or camera as well as a pointer device s and or a keyboard s and network interface controller s NICs also known as network interface cards which include physical network interface s as well as non transitory machine readable storage media having stored therein application software operating system software and optionally Java Web Start Software manufactured by Oracle Corporation of Redwood City Calif. .

In embodiments that use compute virtualization the processor s typically execute software to instantiate a hypervisor sometimes referred to as a virtual machine monitor VMM and one or more virtual machines A R that are run by the hypervisor which would be part of the software instance s . A virtual machine is a software implementation of a physical machine that runs programs as if they were executing on a physical non virtualized machine and applications generally are not aware they are running on a virtual machine as opposed to running on a bare metal host electronic device though some systems provide para virtualization which allows an operating system or application to be aware of the presence of virtualization for optimization purposes. Again in embodiments where compute virtualization is used during operation the application instance A on top of the operating system instance A are typically executed within the virtual machine A. In embodiments where compute virtualization is not used the application instance A on top of operating system instance A is executed on the bare metal of the electronic device .

The operating system instance A provides basic processing input output I O including receiving user input via the user input hardware as well as displaying content through the graphics hardware on the electronic visual display and networking capabilities via the NIC s . The GUI toolkit A also referred to as a widget library or widget toolkit is a set of GUI widgets for use in designing applications with GUIs and includes support for the GUI widget . The Java Web Start software allows standalone Java software applications e.g. application software may be a standalone Java software application to be downloaded over a network coupled to a physical NI . The Java Web Start software ensures the most current version of the application is deployed as well as the correct version of the Java Runtime Environment JRE not shown .

Alternative embodiments may have stored in the non transitory machine readable storage media a web browser that implements a version of HTML Hypertext Markup Language which supports the GUI widget and provides access thereto via an HTML tag and HTML code accessed over the network and provided to the browser may include one or more such tags such that the GUI widget is displayed. As opposed to such native support in the web browser an alternative embodiment of the invention may include 1 a third party web package which supports the GUI widget or 2 require the HTML to include JavaScript that when executed by a JavaScript engine of the Web browser implements the GUI widget e.g. the JavaScript may cause the fixed domain of items to be accessed over the network supervise interactions with the GUI widget .

While the flow diagrams in the figures show a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary e.g. alternative embodiments may perform the operations in a different order separate certain operations combine certain operations overlap certain operations etc. .

While the invention has been described in terms of several embodiments those skilled in the art will recognize that the invention is not limited to the embodiments described can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting.

