---

title: System and method for browsing tabbed-heterogeneous windows
abstract: The techniques and mechanisms described herein are directed to a method for managing multiple content windows. The content windows may host a web browser, a shell view, a word processing application, and the like. A set of content windows are grouped into a frame in a manner such that a taskbar shows one item for the set of content windows. Each content window is associated with a tab for the frame. A content-specific menu may be associated with each tab. The content-specific menu includes a set of commands based on the heterogeneous content hosted in the content window. The set of commands provide functionality to the heterogeneous content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09626079&OS=09626079&RS=09626079
owner: Microsoft Technology Licensing, LLC
number: 09626079
owner_city: Redmond
owner_country: US
publication_date: 20140404
---
This application is a continuation of U.S. patent application Ser. No. 13 043 269 entitled System and Method for Browsing Tabbed Heterogeneous Windows filed on Mar. 8 2011 which is a divisional of U.S. patent application Ser. No. 11 059 048 entitled System and Method for Browsing Tabbed Heterogeneous Windows filed on Feb. 15 2005 both of which are incorporated herein by reference.

This document generally relates to browsing software and more particularly to tabbed browsing software.

Browsing the World Wide Web the web the graphical portion of the Internet has become quite popular in recent years. A software program commonly referred to as a web browser or just browser provides an easy to use point and click interface for accessing various content on the web. Upon entering a web address or URL of a particular website the browser requests web pages from a web server hosting that website. The browser then interprets the web pages and displays the content on a display. The web pages include hypertext and hyperlinks that when selected cause the browser to request additional content associated with them. By selecting the hypertext and hyperlinks a user may conveniently navigate through pages of information commonly known as browsing or surfing the Internet.

Each time one of the hypertext or hyperlinks is selected the new content is downloaded into the current window. Depending on the network bandwidth this may cause a brief to extensive delay. For convenience additional windows may be opened to view multiple web pages. However after opening several web pages each in its own window the taskbar may become quite cluttered. This makes it difficult to re locate a particular web page. Tabbed browsers have been introduced to help manage the viewing of multiple web pages.

Tabbed browsers load web pages in tabs within the same browser window. Therefore only one item appears on the taskbar even though multiple web pages are loaded. Clicking on a hyperlink results in the web page being downloaded in the background into another tab. This allows a user to continue viewing the current web page without automatically switching to the other web page. When the web page is finished loading the user may click on the associated tab and view that web page. Tabbed browsing makes it easier and more convenient to view multiple web pages.

The techniques and mechanisms described herein are directed to a method for managing tabbed heterogeneous windows. The tabbed heterogeneous windows may include files folders web pages application specific documents and the like. Each tabbed heterogeneous window includes a content specific menu associated with the content within the tabbed heterogeneous window. For example if the tabbed heterogeneous window contains a folder with pictures the content specific menu may include a print command an email command a delete command and the like. Commands in the content specific menu provide the full functionality to the content as if the content was not within a tabbed window.

Briefly the techniques and mechanisms described herein are directed to a method for browsing tabbed heterogeneous windows. Instead of only having web pages in each tabbed window the present mechanism allows tabbed heterogeneous windows that include files folders web pages application specific documents and the like. Each tabbed heterogeneous window includes a content specific menu associated with the content within the tabbed heterogeneous window. For example if the tabbed heterogeneous window contains a folder with pictures the content specific menu may include a print command an email command a delete command and the like. Commands in the content specific menu provide the full functionality for the content as if the content was not within a tabbed window. As will be described in more detail below the present tabbed browser provides a convenient way to manage multiple web pages as a group. In addition the tabbed browser decreases the negative effect of opening new web pages by reducing taskbar clutter and loading the new web pages in the background without requiring the user to loose focus on the current web page. These and other benefits will be described in the following detailed description.

The various embodiments of the mechanism for browsing tabbed heterogeneous windows may be implemented in different computer environments. The computer environment shown in is only one example of a computer environment and is not intended to suggest any limitation as to the scope of use or functionality of the computer and network architectures. Neither should the computer environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in .

With reference to one exemplary system for implementing an tabbed browsing mechanism includes a computing device such as computing device . In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Thus computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connection s is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Various modules and techniques may be described herein in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. for performing particular tasks or implement particular abstract data types. These program modules and the like may be executed as native code or may be downloaded and executed such as in a virtual machine or other just in time compilation execution environment. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

Thread boundary represents a boundary between a single thread i.e. a frame thread that handles the processing for the components shown to the left of thread boundary and multiple threads that handle the processing for the components on the right of thread boundary . Each instance of content window is associated with at least one of its own threads. That thread also handles the processing for the associated toolbars menus custom bars status bars and content .

By having multiple threads at least one for each content window the architecture prevents a potential bottleneck caused by having only one thread handle the messages for all HTML rendering across the multiple tabs. In addition having multiple threads reduces the likelihood of unnecessary delays or timeouts when downloading web pages. Having multiple threads also makes the architecture more resilient because if a tab hangs only one tab hangs instead of potentially hanging all of the tabs. This is in contrast with other tabbed browsers that host their tabs on a single UI thread. In these tabbed browsers the entire application hangs when a single tab is blocked. Another advantage of the present tabbed browser is that each individual thread may be prioritized. This allows the thread for the active tab to be prioritized over background tabs.

Each of the components in architecture is now described. As mentioned above each content window is associated with its own toolbars menus custom bars status bars and content as needed. For example if there are five tabs open five instances of each add on e.g. custom bar toolbar etc are created and hooked to their own content. Similarly if menus or status bars are modified via internal logic HTML document hosting add ons or the like the menu or status bar associated with that content window is changed. The add ons and the content window operate in a well know manner. Because the add ons do not know about tabs the architecture does not modify the operation between the add ons and the content window. Instead the architecture wraps each set of content windows into one browser frame . While not shown there may be multiple browser frames each with a set of tabbed heterogeneous windows.

Content window maintains state for the content window such as size position visibility of frame elements and the like. The state may be persisted into a stream when the tabbed browser closes and then may be read when a new content window is launched. Alternatively the state may be saved in a registry and read from the registry when the new content window is launched.

The tab window lives on the frame thread. Each tab window is configured to manage communication between the outer frame components e.g. navigation bar browser frame etc and an individual tab. The tab window holds pointers to its associated content window and interfaces so that it can manage cross thread communication between the outer frame components and the individual content window . The cross thread communication may involve cross thread calls. In one embodiment calls from the browser frame to the content window may be asynchronous. The tab window is then responsible for marshalling the parameters and posting a message to the main window of content window . In contrast calls from the content window to the frame browser may be synchronous. The tab window is then responsible for marshalling the interfaces of the corresponding tab window . The tab window may also convert synchronous calls into asynchronous calls in order to reduce the likeliness that a tab will hang.

The tab window may also cache a limited amount of state. This allows the tab window to provide a quick synchronous lookup of state to other components. When the tab window receives an event from the content window that modifies the state the tab window propagates these events up to the tab window manager .

In addition the tab window exposes several operations that can be performed on a tab such as destroy set visibility set size set position and order. The tab window also exposes operations that the frame needs for asynchronously invoking a tab. These operations may be exposed via individual application programming interfaces API or through a generic API.

The tab window manager hosts multiple content windows via multiple tab windows . The tab window manager manages the overall state of each of the tabs. The state may include a top level URL a page title a back forward button availability a favorite icon for the current page a progress state for the current page security information reflected in the user interface e.g. HTTPs info and the like. The tab window manager may synchronously query the tab window for per tab data. In addition the tab window manager manages the operations performed on the tabs such as open close select move set size set position set order and the like. This is achieved by accessing the operations exposed via the tab window .

The browser frame hosts the navigation bar frame command bar tab window manager and the tab UI . The browser frame may also directly or indirectly host a rebar control not shown . The browser frame brokers communication between these hosted components.

The tab UI is configured to render the user interface for the collection of tabs. discussed below illustrate one embodiment for the user interface. In addition the tab UI controls the rectangle for the tabs browser region. Tab UI receives events from tab window manager via browser frame . The events pertain to the tabs being managed by tab window manager . The events include an OnTabListChanged event an OnTabChanged event and the like. The OnTabListChanged event is sent by tab window manager when changes are made to a collection of tabs e.g. Open Close Reorder etc . The OnTabChanged event is sent by tab window manager when a single tab changes e.g. progress title URL . The corresponding tab window sends a notification to tab window manager which forwards the notification to tab UI . The notification identifies the tab. This method of communication keeps the communication serialized. In an alternate embodiment individual tab windows may directly call into tab UI . In addition there may be multiple tab UI components each one handling the same set of tabs but for a different location on the user interface. For example one tab UI may handle a tab row along the top of the display and another tab UI may handle a tab listview along the side of the display.

The frame command bar provides a set of commands that have been determined to be the most useful to the tabs. By having this set of commands readily available for any tab a user can conveniently locate one of the commands for any tab.

In one embodiment items in the user interface that are per frame include the navigation bar the tab band the frame command bar and the links bar . Items in the user interface that are per tab include menu bar and third party toolbars e.g. MSN toolbar the page space control custom bars content and status bar . The optional components are well known and need not be discussed in further detail.

Interestingly content includes different type of data sources. For example content may be a web page a shell folder a navigation based application and the like. This heterogeneous content may be hosted in a single frame. Of particular interest to the present tabbed browser is the tab band the frame command bar and the operation of the navigation bar . Each of these items is discussed in more detail in conjunction with .

In another embodiment the selected tab may have a theme blended into the tab when the tab becomes active. For example certain content e.g. shell folders may have a theme associated with it. This theme may then be blended into the associated tab in order to help identify the tab.

In another embodiment the tab band may include a drag file icon not shown . A user can drop the drag file icon onto a tab to switch tabs.

The frame command bar appears when viewing a web page. By default the frame command bar may be hosted on same row as the tabs and may show the top N commands.

The process for adding a tab begins at step 1. At step 1 an add tab action is relayed to the TabUI . The add tab action may include a user selecting the create tab button on the user interface entering a hot key or the like.

At step 2 after the TabUI has been notified of the add tab action TabUI invokes a method e.g. CTabWindowManger Add on CTabWindowManager .

At step 4 the CTabWindowManager creates a new thread. A marshaled pointer to the new ITabWindow is passed as an argument inside a creation data structure e.g. IETHREADPARAM .

At step 5 the thread process creates an instance of CShellBrowser using a handle HWND from the ITabWindow as the parent.

At step 6 the thread process passes the creation data structure into CreateWindow and hooks up event sinks.

At step 7 the CShellBrowser performs per tab initialization logic and fires an event back to CTabWindowManager .

At step 8 the CShellBrowser is available for navigation. A process for navigating using tabs is illustrated in and described below.

The above logic allows the tab to appear immediately which gives the user fast feedback. The actual call to CTabWindowManager is asynchronous which prevents the user interface from hanging. The CTabWindow may paint a white background until the CShellBrowser has been created and is ready for navigation. In one embodiment adding a tab will open a tab to the right of the rightmost tab on the tab row.

At step 2 the navigation bar calls a navigation method on the frame browser . The URL and any other necessary parameters are passed into the navigation method.

At step 6 the method performs a cross thread PostMessage into the CShellBrowser . By using the PostMessage instead of a direct method call the architecture reduces the likelihood that the tab will hang. In one embodiment a IDispatch style wrapper may be used.

At step 7 the CShellBrowser processes the message and invokes the CShellBrowser s IOleCommandTarget Exec method with the command ID and arguments.

At step 8 during navigation events e.g. ProgressChange are fired back synchronously from CShellBrowser to the CTabWindow via a marshaled interface pointer.

At step 9 CTabWindow forwards the call to CTabWindowManger along with information identifying which tab was the source of the event.

At step 10 CTabWindowManager updates the CTabUI based on the event and forwards the event to the frame if the event occurred on the active tab step 11.

Reference has been made throughout this specification to one embodiment an embodiment or an example embodiment meaning that a particular described feature structure or characteristic is included in at least one embodiment of the present invention. Thus usage of such phrases may refer to more than just one embodiment. Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One skilled in the relevant art may recognize however that the present mechanism may be practiced without one or more of the specific details or with other methods resources materials etc. In other instances well known structures resources or operations have not been shown or described in detail merely to avoid obscuring aspects of the present consistent visual appearance technique.

While example embodiments and applications have been illustrated and described it is to be understood that the present technique is not limited to the precise configuration and resources described above. Various modifications changes and variations apparent to those skilled in the art may be made in the arrangement operation and details of technique disclosed herein without departing from the scope of the claimed invention.

