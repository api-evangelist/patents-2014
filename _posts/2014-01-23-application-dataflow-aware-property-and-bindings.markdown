---

title: Application dataflow aware property and bindings
abstract: In one embodiment, a non-transitory computer-readable medium stores instructions for implementing an application dataflow aware property and bindings system that implements two-way binding via a unidirectional directed acyclic graph and propagates data through the graph based on the connections between the graph nodes. In one embodiment, properties in a binding relationship are arranged in an upstream and downstream manner. Each property has an upstream node and a downstream node to send and receive messages from other properties. Where a first property is arranged upstream of a second property in the binding graph, the first property is more authoritative than the second property. The most upstream property is the truth for the binding. Requests to update the value of the property are propagated upstream via the upstream nodes and notifications of changes in the value of the property are propagated downstream via the downstream nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286034&OS=09286034&RS=09286034
owner: Apple Inc.
number: 09286034
owner_city: Cupertino
owner_country: US
publication_date: 20140123
---
Application development frameworks and programming languages known in the art provide binding mechanisms to facilitate synchronization of properties between data objects. A binding is an attribute of an object where a change in a property of one object is automatically reflected in properties of other objects. Bindings enable the synchronization of object properties to changes within for example a user interface or an underlying data store. Application Development frameworks that provide binding technology allow an application developer to synchronize properties or other data elements without requiring the application developer to implement extensive amounts of software to manually perform the synchronization. However the generally known methods of implementing data bindings have shortcomings. The binding methods are not application data flow aware in that they do not take into account the desired direction of data flow within the application. Accordingly binding methods known in the art may introduce significant system processing overhead due to redundant updates and may lead to cyclical update loops that can result in application crashes.

As illustrated model.name is the model object for the name property and controller.name is the controller object for the name property. Objects for two separate views e.g. view.name and view.name are illustrated which can be used within an application user interface to allow a user to view or manipulate a data object that represents the name property. In the example MVC system of model.name is bound with view.name and view.name via controller.name where view.name and view.name are associated with text input fields displayed on a user interface. Data flow in a classical two way binding implementation as known in the art may follow an update process where in response to a user providing input a for example the text field associated with view.name the name value at view.name is changed and view.name updates model.name via the controller.name . After model.name accepts the update the model updates all bindings via controller.name including both view.name and view.name. Accordingly an update to model.name by view.name will trigger an update to both view.name and view.name . The second update to view.name is an update cycle and is redundant. Repeated redundant updates increase data latency which harms the responsiveness of the data processing system.

Additionally an ambiguous relationship exists between the data objects and it may not be clear which objects contains the true or most authoritative value within the graph of the binding relationship. When implementing an MVC pattern it is assumed that the developer has declared the model object as truth but that declaration is conceptual and is not incorporated within the dataflow.

In one embodiment a non transitory computer readable medium stores instructions for an application dataflow aware property and bindings system that includes instructions to cause a processor at a client device to perform operations at a data node to receive a request to change a truth e.g. the most authoritative value of a property at the node and to determine whether the node that received the request is a truth node e.g. a node of the most authoritative instance of the property . When the request receiving node is the truth node processing logic causes a change the truth of the property at the node and causes the node to propagate the truth to a downstream node. When the node is not the truth node the processor causes the node to propagate the request to change the truth to an upstream node.

In one embodiment each property includes an upstream node and a downstream node. The upstream node is to propagate requests to change the truth towards the truth. The downstream node is to propagate notifications of the truth. The property can be a resource provided by an application framework and can be bound to other resources. The request to change the truth of the property at the node can be received in response to a change at a user interface or received in response to a request to programmatically change the value of the property from a resource that is bound to the property. In one embodiment at least one of the downstream nodes can be stored on a server that is coupled with the processor and client device over the network to enable the synchronization of the property between the server and the client.

In one embodiment a computer implemented method of propagating values between instances of a property within an application framework comprises providing a first instance of the property of the application framework. The first instance of the property includes a first upstream node and a first downstream node. The method additionally includes providing a second instance of the property of the application framework where the second instance bound to the first instance and the second instance includes a second upstream node and a second downstream node. The computer implemented method further includes defining the second instance of the property as a truth node to store the most authoritative value of the property. The method further includes at the first instance of the property receiving a message including a requested value for the property and then transmitting to the second instance of the property a request to set the truth to the requested value via the first upstream node. The method further includes at the second instance of the property receiving the request to set the truth to the requested value setting the truth to the requested value and then transmitting a notification of the truth to the first instance via the second downstream node.

In one embodiment the method further includes a third instance which receives the notification of the truth from the second instance and in response to receiving the notification of the truth sets an instance specific value to the truth. In one embodiment a data processing device comprising memory and a processor executes instructions included in the non transitory computer readable medium described above. In one embodiment the data processing device stores instructions which when executed by the processor cause the processor to perform the computer implemented method described above.

The above summary does not include an exhaustive list of all aspects of the embodiments. It is contemplated that the embodiments include all systems and methods that can be practiced from all suitable combinations of the various aspects summarized above and also those disclosed in the detailed description below.

Other features will be apparent from the drawings listed above and from the detailed description which follows.

Described herein is an application dataflow aware property and bindings system that implements two way data bindings in a directed acyclic manner that avoids redundant updates. The embodiments will be described along with additional descriptive and enabling details to provide a thorough understanding of various embodiments. In certain instances well known or conventional details are not described in order to provide a concise discussion. Additionally some elements of the embodiments are illustrated using object oriented design patterns as known in the art. The use of such design patterns is illustrative and not intended to limiting.

An embodiment of the property and bindings system can be implemented using a dataflow architecture that expresses an application s data e.g. properties bindings and data transformations as a directed acyclic graph and propagates data through the graph in an ordered predictable way based on the connections between the graph nodes. Each node can have any number of parent or child nodes where the nodes transmit data to their respective child nodes and receive data from their parent nodes. In two way binding as known in the art the binding system is aware that a change has taken place but does not have any context information as to source of the change. The lack of information as to the source of a change can lead to redundant and cyclical updates.

The property and binding system avoids redundant or cyclical updates by utilizing a concept of upstream and downstream where upstream is closer to truth for the binding and downstream is further away from truth. Each instance of a bound property has an upstream node and a downstream node. In one embodiment upstream instances of a property are more authoritative than downstream instances such that a first property or instance of a property that is bound upstream of a second property or property instance the first property or instance is considered more authoritative than the second property or instance. In such embodiment the most authoritative e.g. most upstream property is the truth. In one embodiment the truth is the definitive value of the property within in the binding relationship and all instances of the property are updated to reflect this value. Change requests for the property value propagate upstream towards the truth property or instance. If the truth instance accepts the request and updates the truth a notification of the update is sent through a chain of downstream nodes for each bound property.

In one embodiment cycles and redundant updates can be avoided by performing a reverse dependency analysis on the graph of the upstream and downstream nodes created by the binding arrangement creating the functionality of a classical property and bindings system using a formalized graph model. A queue of nodes is generated for processing and a node is not queued. for processing if it is already in the queue. Subsequently the queue is flushed where each queued node is instructed to push data to each of the node s children where upstream nodes push requests to change the truth to child upstream nodes and downstream nodes push notifications of a change in the truth to child downstream nodes.

Each of the property instances illustrated includes an upstream node and a downstream node. A request to set or change the value of the property at the UI element can be received which triggers an additional request that is subsequently received at view.upstream.name the upstream node of view . Instead of setting the requested value at view the request including the requested value is propagated via the view.upstream.name node to the controller.upstream.name node at the controller instance . The controller.upstream.name node at the controller propagates the change request which is transmitted or relayed to model.upstream.name at the model instance .

The model instance of the property is designated as truth in the exemplary illustration or contains the most authoritative value of the property. In one embodiment when the request is received at the model instance of the property that has been designated as truth the authoritative value for the property is set. In one embodiment setting the truth at the truth node creates a dataflow bridge between the set of upstream nodes and the set of downstream nodes which otherwise are functionally separate. In such embodiment data flow between an upstream node and a downstream node for a property occurs only in response to setting the truth at the truth node. This restriction on data flow assists in the avoidance of update cycles.

In response to setting or deriving the truth for the property a notify message e.g. and is propagated throughout the instances. The notify messages each contain the new value for the property. In one embodiment before the value included within the request is set as the truth the value is validated against a set of validation criteria that have been set for the property. In one embodiment the instance of the property that initially requested the change is not updated until a notification e.g. notify message or with the new value is received. For example a value change request received at view or view may not result in an immediate update. Instead a request for view or a request for view can be sent upstream and the view value of the property at view is not changed until a notification of the new truth is received via a notify message . Additionally view can be updated only when a notify message is received at the downstream node of view . In one embodiment the truth received at a downstream node of a view instance of a property can differ from the value initially requested by instance.

In one embodiment the association between the text field and the name properties is facilitated by an application framework provided by an operating system vendor and can be implemented using for example the MVC design pattern. The framework can provide an interface in which a user enters text into the first name text field and in response to the text entry a request to update the firstName property is propagated to the truth via upstream nodes as illustrated in . Likewise a user can enter text into the last name text field and in response to the text entry a request to update the lastName property is propagated to the truth via upstream nodes.

In the example shown at graph fullName.downstream is has two parent nodes firstName.downstream and lastName.downstream . In response to setting the value at the truth node for firstName a notification is sent from firstName.downstream to all downstream nodes that are bound to and depend on firstName e.g. fullName.downstream . In response to setting the value at the truth node for lastName notification of the truth is sent from a lastName.downstream node to the fullName downstream node . In one embodiment if firstName and lastName are both updated within the same update cycle only one notification is sent to fullName.downstream which includes updates from both bindings. For example an embodiment of a controller node for fullName.downstream can consolidate all updates into a single update containing all relevant truths to reduce the number of processing events.

In one embodiment an attempted change to the value of the first property causes an upstream node associated with the first property to transmit an upstream request to the upstream node of the controller . The upstream request is propagated by the upstream node of the controller as an upstream request which is received at a truth node of the truth . Likewise in one embodiment an attempted change to the value of the second property causes an upstream node associated with the second property to transmit an upstream request to the upstream node of the controller . The upstream request is propagated by the upstream node of the controller as an upstream request which is also received at a truth node of the truth .

In one embodiment the truth includes a truth node that is logically both an upstream node and a downstream node although other implementations are possible. When an upstream request e.g. request or request arrives at the truth node processing logic can perform a validation algorithm using validation criteria that define the acceptable set of values for the property before accepting the request and setting or modifying the truth for the property. Validation is discussed in further detail in .

In one embodiment multiple requests e.g. request and request that received concurrently or within a specific period are resolved such that only a notify message is dispatched. In one embodiment the multiple requests are arbitrated by time of receipt such that only the first or last upstream request for a property is accepted. In one embodiment the requests carry a relative priority such that a higher priority message is accepted over a lower priority message. In one embodiment the value of the request is considered such that only the highest value is accepted.

In one embodiment a binding arrangement exists such that multiple non conflicting updates are resolved as truth and single a consolidated notification is transmitted to all nodes downstream from the truth. For example the truth can be a separate but dependent property of the first property and the second property e.g. as in where the truth is fullName the first property is firstName and the second property is lastName . A first request to update the truth can include a new first name while a second request can include a new last name. An embodiment can derive a new full name at the truth and send a single notify message downstream to a downstream controller node . The downstream controller node can then propagate a notify message containing the updated truth to a downstream node associated with the second property and propagate a notify message to a downstream node associated with the first property . In one embodiment not shown the first property and second property are directly bound to truth .

As shown in block an embodiment can include processing logic to determine whether the request to change the truth is a valid request. A request can be validated based on a set of criteria that define the acceptable set of values for the property. Validation criteria can be pre defined by the software developer or included as a default element of the application framework. Validation criteria can include whether the request is within a data range or includes a value of a certain data type or can include more complex criteria such as whether an update to the truth has been made within a previous time period whether a timestamp of a request is older or newer than a timestamp assigned to the current value or whether the requested value is less than or greater than the currently set value.

For example in one embodiment a game application that tracks the highest game level achieved by a user can define validation criteria requiring new values for the property to be higher than old values. In one embodiment an application displaying a UI slider element to change a property containing for example an RGB value for the interface can use application framework provided validation to limit the set of acceptable values to within a particular range. In one embodiment as shown at block an incoming request to the truth node that includes a value that is outside of an acceptable value range is rejected or otherwise not serviced and processing ends for that request without sending an associated notification of a change of the truth.

As shown at block the application framework can include data and instructions to provide a first instance of a property for example in a first instance of an object having the property. As shown at block the data and instructions of the application framework can operate to provide a second instance of the property for example in a second instance of the object having the property. As shown at block a mechanism is available to define the second instance as a truth node for the binding arrangement to store the most authoritative value of the property. At block the instructions cause processing logic to bind an upstream node of the first instance of the property to the second instance. At block the instructions cause processing logic to bind a downstream node of the second instance to the first instance.

A two way binding is created between the first instance and the second instance using unidirectional bindings such that an attempt to update to the first instance triggers a request via the upstream node of the instance. The first instance updates its understanding of the truth for the binding only in response to a notification of a new truth from the designated truth node which in this example is the second instance. The illustrated binding is a two way such that the first instance will update in response to a notification of the truth received from the second instance under circumstances in which the first instance did not request the update such as in an MVC pattern in which the first instance is a first view the second instance is a model and the model is updated by a third instance used as a second view.

The binding between the third instance of the property and the second instance of the property can route through the first instance of the property as in an MVC pattern in which the third instance is a view the first instance is a controller and the second instance is a model. Alternatively the binding can be directly between the second instance and the third instance. Notwithstanding the binding arrangement when a message containing a requested value for the property is received at the third instance as shown at block a request including the requested value is transmitted via the upstream node of the third instance as shown at block . In one embodiment the requested value is not considered to be set until as shown at block the downstream node receives a notification containing an updated truth for the property.

The software components are illustrated with a division between user space and a kernel space. Although other arrangements are possible user applications e.g. user application and some operating system components e.g. operating system user interface layer and core operating system layer execute in user space. In kernel space the operating system kernel and a set of device drivers operate in the kernel and device driver layer . The kernel and device driver layer manage the underlying functionality of the operating system and provide a formalized and secure mechanism for user space software to access data processing system hardware.

A user interface UI application framework provides a mechanism for the user application to access UI services provided by the operating system OS UI layer . Underlying operating system functions that are not related to the user interface are performed in the core operating system layer . One or more data management frameworks may be available to a user application to access the core operating system functions.

The exemplary user application may be any one of a plurality of user applications such as a web browser a document viewer a picture viewer a movie player a word processing or text editing application an email application or other applications known in the art. The user application accesses instructions in an exemplary UI app framework for creating and drawing user interface objects such as buttons windows dialogs controls menus and other user interface elements and components as are known in the art. The UI application framework also provides additional functionality including menu management window management and document management as well as file open and save dialogs and copy and paste handling. The exemplary UI app framework implements an embodiment of the application dataflow aware property and binding system described herein to enhance the efficiency of dataflow among the various property bindings used during execution of instructions provided by the framework.

The core operating system layer contains operating system components that implement features including and related to application security system configuration graphics and media hardware acceleration and directory services. Multiple application frameworks such as the core app framework provide a set of APIs to enable a user application to access core services that are essential to the application but are not directly related to the user interface of the application. The core app framework can facilitate an application s access to database services credential and security services backup services data synchronization services and other underlying functionality that may be useful to an application.

For example using a core app framework an application can provide functionality that allows a user application to automatically synchronize application content between multiple client devices. The core app framework or equivalent application frameworks can provide access to remote server based storage for functionality including synchronized document storage key value storage and database services. Document storage synchronization allows a user application to access a common data store containing user visible file based content from multiple devices. Key value storage allows a user application to share small amounts of data such as user preferences or bookmarks among multiple instances of the user application across multiple client devices. The user application can also access server based multi device database solutions via the core app framework .

The dataflow of the synchronization for the ubiquitous key value store can be performed using one or more embodiments of application dataflow aware property and binding as described herein. A first instance of a property can be stored in the ubiquitous key value store which is managed by the user application a second instance of the property can be stored in the key value store of the data processing system which is managed by the operating system and a third instance of the property can be stored in the remote key value store on a distributed storage system. Each instance of the property is bound to another instance of the property and each instance includes an upstream node to send requests to set change or update the truth of the property and a downstream node to receive notifications of the truth of the property.

In the exemplary software architecture the path of the property binding dataflow is defined based on which of the instances of the property is designated the truth for the property. In one embodiment the truth is designated as the key value store of the data processing system . In such embodiment a change to the property at the user application will trigger the transmission of a request to change the truth of the property to be transmitted over a message channel via the upstream node of the instance. The instance of the property at the key value store of the data processing system receives the request and in one embodiment validates the request based on a set of validation conditions e.g. data range data type etc. before setting the truth to the requested value. Subsequently a notification including the new truth is transmitted via the downstream node of the property at the key value store over message channel and message channel . After receiving the notification via their respective downstream nodes the value stored at the remote key value store and the value reflected in the ubiquitous key value store provided to the user application via the application framework is changed to the new value.

Alternatively an embodiment may designate the key value store of the remote storage system as the truth. In such embodiment when a request that is received at the upstream node of the property stored in the key value store the instance propagates the request to the key value store of the remote storage over message channel . Additionally a notification of the truth received at the downstream node of the instance of the property stored in the key value store can be propagated to the instance of the property used by the user application over message channel .

Although the application aware property and binding system is described in conjunction with the exemplary software architectures illustrated it will be understood that the methods and systems described will have broad application to data binding and synchronization on data processing systems.

A display controller and display device can be used to provide a graphical user interface as discussed herein. Additionally a wireless transceiver may be available to transmit and receive data via one or more wireless technologies such as Wi Fi infrared Bluetooth or one or more variants of wireless cellular technology. One embodiment of system contains one or more camera devices configured in both a front and rear facing configuration though similarly configured systems each with a front facing camera can be one of many optimal configurations. The data processing system can also include one or more input devices that allow a user to provide input to the system. Input devices can include a keypad or keyboard alone or in conjunction with a touch or multi touch panel that is overlaid on the display device . Additionally embodiments of the data processing system can also include a device for providing location awareness services such as a Global Positioning System GPS device or its equivalent.

It is to be noted that the data processing system as represented in is by way of example. One or more buses or interfaces which are not shown can be used to interconnect the various components as is well known in the art. As well additional components not shown may also be part of the system in certain embodiments and in certain embodiments fewer components than shown may also be used.

The data processing system can also include nonvolatile storage memory which may be a hard disk drive flash memory optical memory other types of memory systems that maintain data after all power is removed from the system. The nonvolatile memory and the memory can both couple to the one or more buses using known interfaces and connection techniques. A display controller is coupled to the one or more buses in order to receive display data to be displayed on a display device which can display any one of the user interface features or embodiments described herein. The display device can include an integrated touch input to provide a touch screen. The data processing system can also include one or more input output I O controllers which provide interfaces for one or more I O devices such as one or more mice touch screens touch pads joysticks and other input devices including those known in the art. The I O controller can also provide interfaces for one or more output devices e.g. speakers . The input output devices are coupled through one or more I O controllers as is known in the art. Additionally one or more network interfaces can also be coupled to the one or more buses to provide access to one or more networks.

While shows that the nonvolatile memory and the memory are coupled to the one or more buses directly rather than through a network interface it will be appreciated that the data processing system can utilize a nonvolatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface or wireless interface such as a wireless Wi Fi transceiver or a wireless cellular telephone transceiver or a combination of such transceivers. As is known in the art the one or more buses may include one or more bridges or controllers or adapters to interconnect between various buses. In one embodiment the I O controller includes a USB adapter for controlling USB peripherals and can control an Ethernet port or a wireless transceiver or combination of wireless transceivers.

The techniques and methods described herein may be carried out in a data processing system in response to its processor executing a sequence of instructions contained in a volatile non transitory memory such as the memory or the non volatile memory or a combination of such memories. In various embodiments hardwired circuitry may be used in combination with software instructions thus the techniques are not limited to any specific combination of hardware circuitry and software or to any particular source for the instructions executed by the data processing system.

Non transitory machine readable storage medium comprises any type of machine readable storage medium including floppy disks flash memory devices optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions as opposed to media specifically designed or designated for carrying transitory propagating signals. In various embodiments software instructions stored on a machine readable storage medium can be used in combination with hardwired circuitry. Thus the techniques are not limited to any specific combination of hardware circuitry and software or to any particular source for the instructions executed by the data processing system associated an apparatus for performing one or more of the operations described herein.

As described herein if it is said that an element A is coupled to or with element B element A can be directly coupled to element B or be indirectly coupled through for example element C. When the specification or claims state that a component feature structure process or characteristic A triggers or causes a component feature structure process or characteristic B it means that A is at least a partial cause of B but that there also can be at least one other component feature structure process or characteristic that assists in causing B. If the specification or claim refers to a or an element this does not mean there is only one of the described elements.

In one embodiment the system described herein represents a classical property graph consisting of normal properties and a mix of two way and one way bindings. The classical property graph can be implicit in nature where the implicit graph is represented explicitly as a directed acyclic graph made up of nodes which each perform some action. In one embodiment triggering a node triggers all of the child nodes of the triggered node. Each child node is triggered through to the leaf nodes of the graph. Where a node is considered a truth node the node is a node of the property designated as the most authoritative property of the graph and the most upstream node of the graph. Where a first property e.g. property A is upstream of a second property e.g. property B property A is closer to truth than property B. Accordingly property A s downstream node is a parent of property B s downstream node and property B s upstream node a parent of property A s upstream node. Thus when property A s downstream node is triggered property B is also triggered and when property B pushes data upstream property A will receive it.

The specification and drawings are to be regarded in an illustrative rather than a restrictive sense. It will be evident that various modifications and changes can be made thereto and it will be apparent to those skilled in the art that many further modifications and adaptations can be made. Accordingly the scope of the embodiments is not to be determined by the specific examples provided above but only by the claims below.

