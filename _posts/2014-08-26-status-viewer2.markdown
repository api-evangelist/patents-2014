---

title: Status viewer
abstract: In various embodiments, methods, systems, and non-transitory computer-readable media are disclosed that allow developers to providing spreadsheets in a desktop integration framework that include error reports for validations. In various embodiments, a modeless error viewer is provided that allows end users to view an errors list for any failed row at the same time as the user corrects these errors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09626351&OS=09626351&RS=09626351
owner: Oracle International Corporation
number: 09626351
owner_city: Redwood Shores
owner_country: US
publication_date: 20140826
---
U.S. Provisional Application No. 62 019 613 filed Jul. 1 2014 and entitled Errors Task Pane the disclosures of which are incorporated by reference herein for all purposes.

An application refers to a software program which on execution performs specific desired tasks. In general several applications are executed in a run time environment containing one or more of operating systems virtual machines e.g. supporting Java programming language device drivers etc. as is well known in the relevant arts.

Developers often use Application Development Frameworks ADFs which are by themselves applications for implementing developing desired applications. An ADF provides a set of pre defined code data modules that can be directly indirectly used in the development of an application. An ADF may also provide tools such as an IDE integrated development environment code generators debuggers etc. which facilitates a developer in coding implementing the desired logic of the application in a faster simpler manner.

In general an ADF simplifies development of applications by providing re usable components and integrated development environments which application developers can use to define user interfaces and application logic by for example selecting components to perform desired tasks and defining the appearance behavior and interactions of the selected components. Some ADFs are based on a model view controller design pattern that promotes loose coupling and easier application development and maintenance. Oracle Application Development Framework is one example of an ADF that utilizes this design pattern.

Oracle ADF includes libraries of standards based Java Server Faces JSF components with built in HTML5 and Ajax functionality. With these components web deployed user interfaces can be developed with a level of functionality and interactivity previously reserved for thick client applications. The components offer data interaction data visualization and encapsulated browser side operations in a set of easy to use components that makes rich client application development easier than ever. Oracle ADF further provides a data binding framework that simplifies binding UI to business services through a simple drag and drop operations in the IDE. This is done while still keeping the independence of the business service from consuming interfaces. With the framework the UI developer is insulated from the underlying implementation of the business service layer. This makes the process of building the UI truly decoupled from the implementation of the business service layer better positioning the application for implementation in a service oriented architecture.

Accordingly what is desired is to solve problems relating to building application user interfaces using application development frameworks some of which may be discussed herein. Additionally what is desired is to reduce drawbacks relating to user interfaces for viewing status information in integrated documents some of which may be discussed herein.

The following portion of this disclosure presents a simplified summary of one or more innovations embodiments and or examples found within this disclosure for at least the purpose of providing a basic understanding of the subject matter. This summary does not attempt to provide an extensive overview of any particular embodiment or example. Additionally this summary is not intended to identify key critical elements of an embodiment or example or to delineate the scope of the subject matter of this disclosure. Accordingly one purpose of this summary may be to present some innovations embodiments and or examples found within this disclosure in a simplified form as a prelude to a more detailed description presented later.

In various embodiments methods systems and non transitory computer readable media are disclosed that allow developers working within desktop applications to create application specific documents that integrate with web based applications. Using a desktop integration framework a developer can design documents having components that provide user interfaces to data associated with data models of the web based applications. In one aspect how a component looks and is configured can be dynamically driven at runtime based on aspects of its underlying data model.

In various embodiments methods systems and non transitory computer readable media are disclosed that allow documents developed using a desktop integration framework to provide status information and error reports for validations. In various embodiments a modeless status viewer is provided that allows end users to view an errors list for any failed row at the same time as the user corrects these errors.

A further understanding of the nature of and equivalents to the subject matter of this disclosure as well as any inherent or express advantages and improvements provided should be realized in addition to the above section by reference to the remaining portions of this disclosure any accompanying drawings and the claims.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However it will be apparent that various embodiments may be practiced without these specific details. The figures and description are not intended to be restrictive.

Java EE is a standard robust scalable and secure platform that forms the basis for many of today s enterprise applications. Java EE provides a set of specifications for building multi tier applications using the Java language. In the past there was a direct correlation between the robust nature of an application to the complexity required to achieve it. However with the advent of ADFs such as Oracle ADF the implementation of extremely rich Java EE applications can be provided by adhering to standard patterns and practices with greatly reduced effort.

With the increased need for organizations to build composite applications that utilize Service Oriented Architecture SOA principles developers are forced to create applications that are extremely agile. Implementing these best practices in agile applications usually involves writing a significant amount of infrastructure code adding another obstacle for developers building their first Java EE application. In addition to providing robust performant and maintainable applications Oracle ADF provides the infrastructure code to implement agile SOA based applications thereby removing the effort involved in an organization rolling their own. 

Oracle ADF further provides a visual and declarative approach to Java EE development through the Oracle JDeveloper 11g development tool. Oracle ADF implements the Model View Controller design pattern and offers an integrated solution that covers all the layers of this architecture with solution to such areas as Object Relational mapping data persistence reusable controller layer rich Web user interface framework data binding to UI security and customization. Extending beyond the core Web based MVC approach ADF also integrates with the Oracle SOA and WebCenter Portal frameworks simplifying the creation of complete composite applications.

For example Oracle ADF makes it easy to develop agile applications that expose data as services by coupling a service interface to the built in business services in ADF. This separation of business service implementation details is performed in Oracle ADF via metadata. Use of this metadata driven architecture enables application developers to focus on the business logic and user experience rather than the details of how services are accessed.

Oracle ADF stores the implementation details of these services in metadata in the ADF Model layer. This enables developers to exchange services without modifying the user interface making the application extremely agile. Additionally the developer creating the user interface does not need to bother with business service access details. Instead developers can focus on developing the application interface and interaction logic. Creating the user experience can be as simple as dragging and dropping the desired business services onto a visual page designer and indicating what type of component should represent that data.

ADF may be embodied as Oracle ADF is one example. Accordingly ADF is based on a Model View Controller MVC design pattern. An MVC application is separated into 1 a model layer that handles interaction with data sources and runs the business logic 12 a view layer that handles the application user interface and 3 a controller that manages the application flow and acts as the interface between the Model and the View layers. Separating applications into these three layers simplifies maintenance and reuse of components across applications. The independence of each layer from the others results in a loosely coupled Service Oriented Architecture SOA .

In this embodiment modules forming an enterprise application are shown as being within ADF to represent that the modules are developed using ADF and then executed within the context of ADF . For conciseness the various internal details of ADF are not shown assuming that the application is developed using the JAVA programming language and Oracle ADF available as part of JDeveloper 10.1.3 a development tool available from Oracle Corporation. However the features of the present invention described below may be implemented using any desired combination of programming language and application development framework as will be apparent to one skilled in the relevant arts by reading the disclosure provided herein.

In various embodiments ADF an application to be developed in the form of multiple layers each layer containing code modules files implementing desired logic according to pre defined specification. Thus in one embodiment ADF enables the application to be developed as four layers view layer containing code modules files that provide the user interface of the application controller layer containing code modules that control the flow of the application model layer containing data code modules that provide an abstraction layer for the underlying data and business services layer containing code modules that provide access to data from various sources and handles business logic.

Oracle ADF lets developers choose the technology they prefer to use when implementing each of the layers. shows various options available for developers when building Oracle ADF applications. The glue that integrates the various components of Java EE applications and makes development so flexible is the Oracle ADF model layer. EJB Web Services JavaBeans JPA EclipseLink TopLink objects and many others can all be used as Business Services for the Oracle ADF Model. View layers can include Web based interfaces implemented with JSF Desktop Swing applications and MS Office front ends as well as interfaces for mobile devices.

It may be appreciated that the development of the application using such a layered approach often simplifies maintenance and reuse of components code modules across various applications. Further the independence of each layer from the other layers results in a loosely coupled service oriented architecture SOA which may be desirable when deploying the developed business enterprise application on multiple different systems.

In one aspect view layer represents the user interface of the application being developed. View layer is shown with desktop mobile and browser based views each of which provides all or a portion of the user interface and is accessible in a variety of manners corresponding to view type. For example web pages may be sent by the application in response to receiving client requests containing corresponding URLs. The web pages may then be displayed by a browser on a display unit not shown associated with a requesting client system thereby enabling users of the requesting client system to interact with the enterprise application. Oracle ADF support multi channel access to business services allowing reuse of business services and access from a Web client a client server swing desktop based application Microsoft Excel spreadsheets mobile devices such as a smart phone or the like.

The code files modules forming the view layer such as web pages may be implemented using one or more of hypertext markup language HTML Java server pages JSP and Java Server Faces JSF . Alternatively the user interface may be implemented using Java components such as Swing and or extensible markup language XML . As further noted the user interface may leverage a user s experience and familiarity with desktop applications such as Word and Excel by Microsoft.

As noted above the relevant user developed code data modules are provided in each of the layers. However each layer typically contains other pre defined code data modules provided by ADF . Some of the pre defined modules may be used during development for example as templates for developing the web pages for including desired functionality in the developed code etc. Other pre defined modules such as a URL rewriting module may be deployed along with the developed application and may provide additional functionalities mapping of requested URLs to internal names to the user during execution of the enterprise application.

Controller layer contains code modules files that control the flow of the application. Each controller object contains software instructions and or data implemented according to a desired manner of presenting information in view layer . The desired manner may include the specific web pages to be displayed when links in another web page are clicked selected by the user the page to be displayed when errors occur during execution indicating the specific data to be stored retrieved etc.

In one aspect controller layer manages the applications flow and handles user input. For example when a Search button is clicked on a page the controller determines what action to perform do a search and where to navigate to the results page . There are two controller options for web based applications in JDeveloper the standard JSF controller or the ADF Controller that extends the JSF controller functionality. Whichever controller is used application flow is typically designed by laying out pages and navigation rules on a diagram. An application s flow can be broken into smaller reusable task flows include non visual components such as method calls and decision points in a flow and create page fragment flows that run inside a region of a single containing page.

The code modules files forming controller layer are often implemented as Java servlets receiving the client requests and sending desired web pages as corresponding responses. Controller objects may also be implemented for example as Apache Jakarta Struts controllers or according to the JSF standard.

Model layer contains data code modules that connect various business services to the objects that use them in the other layers such as to the controller objects discussed above or directly to desktop applications as shown. Each abstract data objects of model layer provides a corresponding interface that can be used to access any type of business service executing in underlying business service layer . The data objects may abstract the business service implementation details of a service from a client and or expose data control methods attributes to view components providing a separation of the view and data layers.

In one aspect model layer consists of two components data controls and data bindings which utilize metadata files to define the interface. Data controls abstract the business service implementation details from clients. Data bindings expose data control methods and attributes to UI components providing a clean separation of the view and model. Due to the metadata architecture of the model layer developers get the same development experience when binding any type of Business Service layer implementation to the View and Controller layers.

Oracle ADF emphasizes the use of the declarative programming paradigm throughout the development process to allow users to focus on the logic of application creation without having to get into implementation details. At a high level the development process for a Fusion web application usually involves creating an application workspace. Using a wizard libraries and configuration needed for technologies selected by a developer are automatically added and an application is structured into projects with packages and directories.

By modeling database objects an online database or offline replica of any database can be created definitions edited and schemas updated. Using an UML modeler use cases can then be created for the application. Application control and navigation can also be designed. Diagrammers can be used to visually determine the flow of application control and navigation. Then an underlying XML file describing the flow can be automatically created. A resource library can be used to allow a developer to view and use imported libraries by simply dragging and dropping them into the application. From database tables entity objects can be created using wizards or dialogs. From those entity objects view objects are created to be used by pages in the application. Validation rules and other types of business logic can be implemented.

In this example business services layer manages interaction with a data persistence layer. It provides such services as data persistence object relational mapping transaction management and business logic execution. The Business Services layer in Oracle ADF can be implemented in any of the following options As simple Java classes EJB Web services JPA objects and Oracle ADF Business Components. In addition data can be consumed directly from files XML or CSV as well as REST.

Thus each business service manages interaction with a corresponding data persistence layer and also provides such services as object relational mapping transaction management business logic execution etc. The business services layer may be implemented using one or more of simple Java classes Enterprise Java Beans web services etc.

Business components represent a business service implemented using for example Oracle ADF Business Components to provide interaction with databases web services legacy systems application servers and the like. In one embodiment business components of business services layer contain a mixture of application modules view query objects and entity objects which cooperate to provide the business service implementation. An application module can be a transactional component code module that UI clients communicate with for working with application transaction data. The application module may provide an updatable data model and also procedures functions commonly referred to as service methods related to user transactions.

An entity object may represent a corresponding row in a database table and simplifies the manipulation update deletion etc. of the data stored in the corresponding row. An entity object often encapsulates business logic for the corresponding row to ensure that the desired business rules are consistently enforced. An entity object may also be associated with other entity objects to reflect relationships existing between rows stored in the underlying database.

ADF Desktop Integration ADFdi extends the Oracle Application Development Framework into the world of desktop applications like Microsoft Excel. Application developers can rapidly develop integrated documents such as spreadsheets and documents of other desktop based applications to allow users to access and edit critical business data. This framework integrates seamlessly with each web application s security and business logic infrastructure. It also allows end users to edit their data without a live connection to the network. Once reconnected ADF Desktop Integration can transparently upload and validate all user changes against the application s backend. Thus ADF Desktop Integration allows developers to extend functionality provided by web based applications to desktop applications. End users may also prefer ADF Desktop Integration because it provides a familiar user interface in the user s preferred desktop application to undertake information management tasks such as performing complex calculations or uploading a large amount of data easily and seamlessly.

In this example desktop integration framework includes client computer system and server computer system . Client computer system is representative of hardware and or software elements configured to provide access to and or host application . Client computer system may be embodied as a personal computer system a laptop a tablet a mobile device and the like. Client computer system may include one or more operating systems applications browsers and the like executing on one or more computers. Client computer system is merely illustrative of an embodiment or implementation of an invention disclosed herein should not limit the scope of any invention as recited in the claims. One of ordinary skill in the art may recognize through this disclosure and the teachings presented herein other variations modifications and or alternatives to those embodiments or implementations illustrated in the figures.

Application is representative of one or more software elements that allow users to generate edit or otherwise interact with documents. Some examples of application are text editors word processing applications spreadsheet applications image editing and manipulation programs and the like. In various embodiments desktop integration framework operates with configurations specific to desktop applications such as Microsoft Office products like Microsoft Word and Microsoft Excel.

Application further includes or is otherwise in communication with ADF DI client component and creates document . ADF DI client component is representative of one or more software elements that extend the functionality provided by web based or other network accessible applications to application . For example ADF DI client component allows end users to avail themselves of a familiar user interface associated with application to undertake information management tasks using document that are normally performed by accessing server computer system . These tasks may be performed by or handled by web based or other network accessible applications hosted by server computer system . In various embodiments data manipulated by such information management tasks performed in application is synchronized with server computer system .

Document is representative of one or more computer data files or units of electronic information. Document may include text images audio video and other multimedia information. Document may further be associated with metadata specific to application . Document or application may provide native functionality for creating interacting and managing content associated with document . In various aspects application provides one or more interfaces for interacting with functionality of application or content of document .

Server computer system is representative of hardware and or software elements configured to provide access to and or host application server . Server computer system may be embodied as local server computer system a cloud service and the like. Server computer system may include one or more operating systems servers services applications and the like executing on one or more computers. Server computer system is merely illustrative of an embodiment or implementation of an invention disclosed herein should not limit the scope of any invention as recited in the claims. One of ordinary skill in the art may recognize through this disclosure and the teachings presented herein other variations modifications and or alternatives to those embodiments or implementations illustrated in the figures.

Application server is representative of one or more software elements that allow users to interact with web based or network based applications. Some examples of application server are either a software framework that provides a generalized approach to creating an application server implementation without regard to what the application functions are or the server portion of a specific implementation instance. In various embodiments application server operates with configurations specific to Java Platform Enterprise Edition or Java EE that defines a core set of API and features of Java Application Servers. Application server may include servlets and JavaServer Pages Enterprise JavaBeans and the like. Application server is merely illustrative of an embodiment or implementation of an invention disclosed herein should not limit the scope of any invention as recited in the claims. One of ordinary skill in the art may recognize through this disclosure and the teachings presented herein other variations modifications and or alternatives to those embodiments or implementations illustrated in the figures.

ADF DI server component is representative of one or more server components such as part of application server . In general ADF DI client component acts as both view layer and controller layer and communicates with ADF DI server component acting in part as model layer to synchronize data and execute business logic in applications hosted by application server or in communication with application server using ADF model . As discussed above model layer represents the data values related to a current view presented by ADF DI client component within application along with model level business rules security and application logic used against the data values. In this example ADF DI client component and ADF DI server component allows end users to avail themselves of a familiar user interface associated with application to undertake View Controller tasks using document to access ADF model .

In one aspect a developer utilizes a design mode of ADF DI client component to work within application to create document . The developer can structure and format document in a desired manner utilizing native tools of application . The developer can also add components to document using ADF DI client component to integrate document with application server . Some examples of components or ADFdi components are input components e.g. form components output components labels lists buttons images tables and the like.

In various embodiments the developer maps components that are added to document to corresponding data or models associated with application server . The data or models can be provided by or through ADF DI server component . In various embodiments each component added to document is mapped to data or an attribute of a data model exposed by model layer to provide an input output mechanism within document . In this example a text box component can be added to document and mapped to an attribute of ADF model provided by or exposed through ADF DI server component to ADF DI client component .

In one aspect a component is a reusable entity one having functionality that can be used by many applications or that can be used multiple times by the same application. Components can be embedded within document . A component generally provides one or more interfaces such as a programming interface a data binding interface or a visual interface. In one embodiment a component having no visual representations added to document is rendered or but not otherwise displayed at runtime and can provide some additional functionality. A component may have zero or more visual representations. As described further below a component can have a visual representation driven by an underlying model.

In one aspect a component can specify any number of views at design time any of which can be displayed at runtime. A view assembly is the set of views that are actually displayed at runtime. The view assembly for an application or a component consists of views in the view composition that is selected for display at a certain point in time.

Once all desired components are included and mapped to data and or model metadata accessible to application server and ADF model document can be published or otherwise made available on application server . Application server may provide a download link to published documents enabling users to access the documents via a browser and begin working within application to view create and or manipulate data such as that stored in a database accessible to server computer system . In various embodiments published documents are stored separately from the document metadata that defines components data mappings and any logic a developer associated with a document. In some embodiments a published document includes all document metadata.

In step a document is created. In various embodiments documents are created by a user or developer by using an application that natively creates such documents or by using a software library that creates documents in their native format. According to a user can open an existing document or create a new document in application . For example the user may create a new spreadsheet in Microsoft Excel and populate the spreadsheet with various workbooks sheets tables graphs or the like. The user may edit structure or format the document in any desired manner using native and non native tools.

In step document metadata is generated. The document metadata includes information utilized by an integration component of an application e.g. ADF DI client component to render contents of an associated document. In one aspect the document metadata identifies each component included in the document. In another aspect the document metadata identifies how a component is bound to specific data or to attribute metadata of one or more models. The document metadata can further provide access information static data other logic or data manipulation information or references to where such may be obtained.

As discussed above with respect to a developer can add components to document using ADF DI client component to integrate document with application server . In various embodiments ADF DI client component provides an expression builder allowing a developer to specify values for one or more properties of documents or components that may be added to the documents. In one aspect a property defines an aspect of the behavior of its corresponding component. For example a property may specify a model or object that is mapped to the component and or one or more attributes of the model or object corresponding to the component. In another aspect a property may specify aspects of a document such as table column headers worksheet ribbon commands native document functionality and the like.

In step the document and the document metadata are published. As discussed above published documents can be stored separately from the document metadata. In various embodiments the document is uploaded to a web based application and made available to users of the application. The document metadata can be uploaded to a metadata repository associated with the application. In some embodiments a published document may include all or part of the document metadata.

In the example of a published document includes at least enough metadata that enables ADF DI client component to initialize the document and request additional information from ADF DI server component to render the contents of document for the user at runtime. ends in step .

During runtime a user downloads published document and opens it with application . In one embodiment ADF DI client component has been installed as an application plugin or module. ADF DI client component can then detect that document has been authored to include framework components. ADF DI client component contacts ADF DI server component to request document metadata actual data and any logic that needs to be performed to render document . For example ADF DI client component may first retrieve from or through from ADF DI server component document metadata defining which components are to be included and where to include them. ADF DI client component may retrieve from or through from ADF DI server component data from ADF model for which selected components will use or otherwise operate on. ADF DI client component may further retrieve from or through from ADF DI server component any logic associated with document . Finally ADF DI client component may then render contents of document utilizing the document metadata actual data and logic.

Accordingly a user may retrieve a document template and have the document content automatically updated and formatted based on processing performed by ADF DI client component and data obtained from application server . The users can then avail themselves of the familiar user interface associated with application to undertake tasks using document .

In various aspect as the user interacts with or manipulates document ADF DI client component and ADF DI server component may remain in communication to send and receive updates accordingly. Changes made within one or more components of document to data of a corresponding model in model layer may be persisted in ADF model .

In step a document is received. As discussed above documents are published enabling users to access the documents via a browser and begin working within an application e.g. application . In various embodiments a user selects a document from a web based application to use as an interface to data provided by the web based application. The user downloads the document to the user s computer and opens the document using its native application. A plugin of the native application or other software of the client device e.g. ADF DI client component detects that the document is an integrated document and begins the rendering process. According to a user can interact with application server to retrieve a desired document such as by clicking a document link. The document may be downloaded or otherwise communicated to client computer system and opened in application .

In step document metadata is received and processed. In various embodiments the document metadata is received separately from the document being rendered. For example an integration component of the native application can detect that a document being opened is an integrated document and begin the rendering process by requesting appropriate document metadata. In some embodiments all or part of the document metadata is integrated into the document being rendered. The document metadata includes information utilized by the integration component to render contents of the document. Accordingly based on the document metadata ADF DI client component can determine which components are to be added to document and where. ADF DI client component further determines what data or model is used by each component as well as applies any logic defined by a developer.

In optional step model metadata is received and processed. In various embodiments the model metadata is received separately from the document being rendered and the document metadata. For example an integration component of the native application can detect during the rendering process that one or more components have properties that are driven by attributes of one or more models. In one aspect the model metadata identifies how a component is bound to metadata of various models. Accordingly based on the model metadata ADF DI client component can update or augment the document metadata associated with document . ADF DI client component further determines what data is referenced by or otherwise used by the metadata of the various associated models.

In step the document is rendered based on the document metadata and the optional model metadata. As discussed above ADF DI client component may retrieve from or through from ADF DI server component data from ADF model for which selected components will use or otherwise operate on. ADF DI client component may further retrieve from or through from ADF DI server component any logic associated with document . Finally ADF DI client component may then render contents of document utilizing the document metadata actual data and logic.

In step a determination is made whether an update to the document exists. There may be a variety of reasons why an update to the document may exist. As a user interacts with or manipulates document ADF DI client component and ADF DI server component may remain in communication to send and receive updates accordingly. Changes made within one or more components of document to data of a corresponding model in model layer may be persisted in ADF model . In some embodiments an interaction by a user may require a new dataset. As such the flow of method returns to step to process any additional document data and optional model metadata. The document can then be rendered or a portion re rendered in step . ends in step .

In various embodiments desktop integration framework allows a developer to provide a modeless status viewer within document that allows end users to view status information error lists or the like at runtime. The developer can configure a status viewer to include information error lists or the like for a particular component of document or document in general. A status viewer according to various embodiments can provide end users additionally or alternatively with information or means to correct runtime or other errors. If enabled in Microsoft Excel for example a user can see a Status Viewer ribbon command in the Worksheet group under a runtime tab for desktop integration framework . The ribbon command can be used to open or close a status viewer for an active worksheet or workbook. If the status viewer is closed the ribbon command opens the status viewer and vice versa . In one aspect a status viewer according to various embodiments can be persistently present. In another aspect a status pane according to various embodiments can appear in response to one or more triggers. For example when a user s mouse is over a document element or when the user s mouse selects the document element.

In one aspect a document designer creates document to include status information for given columns rows or cells of a spreadsheet application such as Microsoft Excel in a status viewer. Like other Excel task panes the status viewer can be resized docked and undocked. In one aspect contents of the status viewer depends on one or more currently selected cells in an active worksheet. The status viewer can include validation or error checking performed on the contents of the one or more cells or one or more useful hints about the cells.

When document is rendered at run time ADF DI client component may leverage native dialog action pane or task pane functionality of application to provide a status viewer according to various embodiments. ADF DI client component can cause one or more status viewers to appear together with contents of document in an unobtrusive manner. ADF DI client component can obtain information from ADF DI server component and dynamically display the information to end users of document using the one or more status viewers. When document is rendered at run time ADF DI client component may leverage the native action or task pane functionality of application to provide the information as a result of validation or checking of data in document .

In this example pane is located to the right of a workbook in Excel. ADF DI client component can trigger display of pane upon opening of document in response to being triggered by selection of cell A1 a mouse over event associated with cell A1 or the like. ADF DI client component may utilize pane to display information associated with the active selection within the workbook. Pane is located to the top of the workbook in Excel. Similar to pane ADF DI client component can trigger display of pane upon opening of document in response to being triggered by selection of cell A1 a mouse over event associated with cell A1 or the like. Pane is provided to the left of the workbook in Excel and pane is provided to the bottom of the workbook in Excel. Other regions or locations can be envisioned as well as overlays popups and other dialogs to display status information.

In step a component specification is received. In general a component specification refers to information that specifies how the component is defined. According to a developer can open an existing document or create a new document in application such as creating a new spreadsheet in Microsoft Excel. The developer then may edit structure or format the document in any desired manner using native and non native tools. Additionally the developer may select from a plurality of predetermined components and add those components to document .

In step a data binding specification is received. In general a data binding specification refers to information that specifies how the component interacts with data such as its source and the like. In various embodiments ADF DI client component utilizes this information to further configure the component in addition to the component specification. In one aspect ADF DI client component identifies how each component will present one or more views based on one or more models or objects associated with the component. ADF DI client component may interact with ADF DI Server component to retrieve model aspects values and the like to configure the component any associated views as well as associated behaviors. In various embodiments ADF DI client component may receive a component specification and data binding specification in response to a user using the expression builder discussed above.

In step a status viewer specification is received. In general a status viewer specification refers to information that specifies where ADF DI client component places one or more status viewers and or how ADF DI client component renders information within the one or more status viewers. A status viewer specification may include location information for one or more status viewers styling information help information and or reference from where to retrieve the like. In one embodiment a status viewer specification may be generated by a developer enabling a status viewer in an integrated document. ADF DI client component can then receive information with respect to placement styling etc. at run time together with or independently of contents of any status viewers.

In step document metadata is generated based on the component specification data binding specification and status viewer specification. ends in step .

In step a document and its corresponding metadata are received. According to a user can interact with application server to retrieve a desired document such as by clicking a document link. The document and metadata may be downloaded or otherwise communicated to desktop and opened in application . As discussed above the document metadata includes information utilized by ADF DI client component to render contents of the document based on data obtained from application server . Accordingly ADF DI client component determines which components are to be added to the document and where and what data is used by each component as well as applies any logic defined by a developer.

In step a status viewer specification is determined based on the document metadata. ADF DI client component determines how and where to display one or more status viewers based on the determined status viewer specification. ADF DI client component may determine to display one or more status viewers upon loading document . In other embodiments ADF DI client component may determine to display one or more status viewers in response to predefined triggers or other events.

In step document data is processed. As discussed above published documents can be stored separately from the document metadata and the actual data used by the document. In general the published document includes at least enough metadata that enables ADF DI client component to initialize the document and request additional information from ADF DI server component to render the contents of document for the user. ADF DI client component may retrieve from or through ADF DI server component data from ADF model or other logic associated with document . As DF DI client component retrieve from or through from ADF DI server component any document data ADF DI client component may utilize one or more status viewers to display runtime information with respect to the document data or the processing thereof.

In step the document is rendered based on the document data. ADF DI client component may utilize one or more status viewers to display runtime information with respect to the rendered document. For example ADF DI client component may utilize one or more status viewers to provide tutorials for using document error messages validation information or the like. ADF DI client component may utilize one or more status viewers to provide user interfaces for taking actions such as correcting error or the like. ends in step .

In various embodiments end users can edit document data of rendered document with or without a live connection to application server . ADF DI client component can perform local validations or perform other logic and render the results in a status viewer. Once connected ADF DI client component can upload user changes to application server and receive the results of any further validations performed by application server . ADF DI client component can render the results in a status viewer. In one embodiment ADF DI client component receives validation errors or other errors caused by the manipulation of the document data missing data or the like. ADF DI client component can then cause application to display status information using a status viewer. Accordingly a status viewer can provide error information comments help text suggested fixes and the like at runtime. ADF DI client component may utilize external APIs APIs of application or other functionality native to application to display status information in one or more status viewers.

In step a user performs a business operation. In this example a user interacts with document to perform the business operation. The business operation can include adding data updating data deleting data performing calculations sorts filters or the like. ADF DI client component communicates with ADF DI server component in order to have the one or more web based applications associated with application perform a set of functions associated with the business operation.

In step status information is received. As discussed above status information may include errors resulting from data validation missing data logic processing or the like in performing the business operation. Status information can be received in real time or on demand e.g. at the request of a user or other process . As discussed above ADF DI client component determines at the time of document rendering how to display or trigger a status viewer within document .

In step a determination is made whether the status viewer information is applicable. A determination can be made that all or part of the received status information is applicable to document . In another aspect a determination can be made that all or part of the received status information is applicable to an active selection of document .

In step the status information is rendered in a status viewer for the document component. In various embodiments ADF DI client component renders results of performing the business operation in the status viewer. In another aspect ADF DI client component renders help information hints next steps or tutorials for the business operation. ADF DI client component may include user interfaces in the status viewer for taking actions such as correcting error or the like. ends in step .

In a user selects group that consists of a collection of cells of a table in a workbook. In response to the selection status viewer is displayed or otherwise has its contents rendered with status information applicable to. In one aspect status viewer displays error information associated with each individual cell in group . In one aspect status viewer displays information summarizing status information group or the table. Similar to status view status viewer can further display comments help text suggested fixes and the like as well as incorporate user interface elements that enable the user to fix or correct any errors within status viewer .

In various embodiments a status viewer can be configured to open automatically whenever appropriate e.g. when errors occur . In one embodiment when a status viewer is automatically triggered for display cell selection within the workbook can be adjusted to show the user the most interesting error details or other details satisfying predetermined criteria. In one aspect if an action set fails the status viewer shows worksheet level errors. In another aspect if an action set succeeds but there are row failures status cell of the row is selected and the status viewer shows any relevant row errors. In a further aspect if an action set succeeds and there is no row failure the status viewer may not appear.

In some embodiments a set of rules are used to determine how cell selection is adjusted to show worksheet level errors. In one aspect if there are ADF Output Text Worksheet Errors components in the worksheet the first configured one can be selected. In another aspect if there are no ADF Output Text Worksheet Errors components in the worksheet a check can be made whether the current selected cell is in an ADFdi table. If it is in an ADFdi table the upper left corner of this table is selected and if it is not in an ADFdi table no change occurs.

In further embodiments the contents of a status viewer depend on the currently selected cells in the active worksheet. In one aspect if current selected range is not a single cell the upper left corner from the first area of this range is considered the current selected cell. In another aspect the status viewer can be worksheet specific. For example when the user switches between worksheets in the same workbook say from worksheet A to worksheet B worksheet A s status viewer is hidden if it was shown Visibility hidden or shown of worksheet B s status viewer may depend on its visibility the last time worksheet B was active. Workbooks that are not integrated with ADFdi may not have a status viewer.

In various embodiments ADF DI client component monitors the results of user actions and automatically displays a Status Viewer when appropriate. End users need to be notified appropriately when their actions result in problems that need to be corrected. Previous error reporting mechanism did not offer sufficient flexibility. Previous error reporting mechanisms typically rely on the user to perform some gesture in order to view errors and warning. In various embodiments a status view can be displayed automatically when most appropriate. This enhances the usability of integrated workbooks by helping the user understand when to take action. This feature can be enabled on a per document basis or per component basis.

Example use case A worksheet level errors. In this example an end user clicks a button. The button s action set results in a failure. ADF DI client component can trigger a status viewer to appear automatically with any errors detail visible.

Example use case B Table upload failures. In this example an end user clicks a button that includes a table upload. The action set completes without error but the upload action produces one or more row level failures. ADF DI client component can trigger a status viewer to appear automatically with any errors detail visible.

In some embodiments when ADF DI client component automatically displays a status viewer cell selection is adjusted to show a user the most interesting error details. The following table describes various action set conditions and corresponding expected behavior for Status Viewer SV visibility and cell selection.

The following rule can be used to select a cell to show worksheet level errors when SV already visible prior to action set invocation. If current selected range is not a single cell the upper left corner from the first area of this range is considered the current selected cell. If there are ADF Output Text Worksheet Errors components in the worksheet select the first configured one. If there are no ADF Output Text Worksheet Errors components in the worksheet check whether the current selected cell is in an ADFdi table. If it is in an ADFdi table select the upper left corner of this table. If it is not in an ADFdi table no change.

In one aspect a status viewer may not be automatically displayed if no action set is executed. For example if a runtime workbook with a status viewer on is closed and then opened the status viewer may not be not restored. If the status viewer is not visible and the user selects a failed row the status viewer may not be automatically displayed.

Systems depicted in some of the figures may be provided in various configurations. In some embodiments the systems may be configured as a distributed system where one or more components of the system are distributed across one or more networks in a cloud computing system.

In various embodiments server may be adapted to run one or more services or software applications provided by one or more of the components of the system. In some embodiments these services may be offered as web based or cloud services or under a Software as a Service SaaS model to the users of client computing devices and or . Users operating client computing devices and or may in turn utilize one or more client applications to interact with server to utilize the services provided by these components.

In the configuration depicted in the figure the software components and of system are shown as being implemented on server . In other embodiments one or more of the components of system and or the services provided by these components may also be implemented by one or more of the client computing devices and or . Users operating the client computing devices may then utilize one or more client applications to use the services provided by these components. These components may be implemented in hardware firmware software or combinations thereof. It should be appreciated that various different system configurations are possible which may be different from distributed system . The embodiment shown in the figure is thus one example of a distributed system for implementing an embodiment system and is not intended to be limiting.

Client computing devices and or may be portable handheld devices e.g. an iPhone cellular telephone an iPad computing tablet a personal digital assistant PDA or wearable devices e.g. a Google Glass head mounted display running software such as Microsoft Windows Mobile and or a variety of mobile operating systems such as iOS Windows Phone Android BlackBerry 10 Palm OS and the like and being Internet e mail short message service SMS Blackberry or other communication protocol enabled. The client computing devices can be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows Apple Macintosh and or Linux operating systems. The client computing devices can be workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems such as for example Google Chrome OS. Alternatively or in addition client computing devices and may be any other electronic device such as a thin client computer an Internet enabled gaming system e.g. a Microsoft Xbox gaming console with or without a Kinect gesture input device and or a personal messaging device capable of communicating over network s .

Although exemplary distributed system is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

Network s in distributed system may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP transmission control protocol Internet protocol SNA systems network architecture IPX Internet packet exchange AppleTalk and the like. Merely by way of example network s can be a local area network LAN such as one based on Ethernet Token Ring and or the like. Network s can be a wide area network and the Internet. It can include a virtual network including without limitation a virtual private network VPN an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the Institute of Electrical and Electronics IEEE 802.11 suite of protocols Bluetooth and or any other wireless protocol and or any combination of these and or other networks.

Server may be composed of one or more general purpose computers specialized server computers including by way of example PC personal computer servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing described above according to an embodiment of the present disclosure.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP hypertext transport protocol servers FTP file transfer protocol servers CGI common gateway interface servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM International Business Machines and the like.

In some implementations server may include one or more applications to analyze and consolidate data feeds and or event updates received from users of client computing devices and . As an example data feeds and or event updates may include but are not limited to Twitter feeds Facebook updates or real time updates received from one or more third party information sources and continuous data streams which may include real time events related to sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like. Server may also include one or more applications to display the data feeds and or real time events via one or more display devices of client computing devices and .

Distributed system may also include one or more databases and . Databases and may reside in a variety of locations. By way of example one or more of databases and may reside on a non transitory storage medium local to and or resident in server . Alternatively databases and may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases and may reside in a storage area network SAN . Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases and may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple buses. Bus subsystem may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. For example such architectures may include an Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus which can be implemented as a Mezzanine bus manufactured to the IEEE P1386.1 standard.

Processing unit which can be implemented as one or more integrated circuits e.g. a conventional microprocessor or microcontroller controls the operation of computer system . One or more processors may be included in processing unit . These processors may include single core or multicore processors. In certain embodiments processing unit may be implemented as one or more independent processing units and or with single or multicore processors included in each processing unit. In other embodiments processing unit may also be implemented as a quad core processing unit formed by integrating two dual core processors into a single chip.

In various embodiments processing unit can execute a variety of programs in response to program code and can maintain multiple concurrently executing programs or processes. At any given time some or all of the program code to be executed can be resident in processor s and or in storage subsystem . Through suitable programming processor s can provide various functionalities described above. Computer system may additionally include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

I O subsystem may include user interface input devices and user interface output devices. User interface input devices may include a keyboard pointing devices such as a mouse or trackball a touchpad or touch screen incorporated into a display a scroll wheel a click wheel a dial a button a switch a keypad audio input devices with voice command recognition systems microphones and other types of input devices. User interface input devices may include for example motion sensing and or gesture recognition devices such as the Microsoft Kinect motion sensor that enables users to control and interact with an input device such as the Microsoft Xbox 360 game controller through a natural user interface using gestures and spoken commands. User interface input devices may also include eye gesture recognition devices such as the Google Glass blink detector that detects eye activity e.g. blinking while taking pictures and or making a menu selection from users and transforms the eye gestures as input into an input device e.g. Google Glass . Additionally user interface input devices may include voice recognition sensing devices that enable users to interact with voice recognition systems e.g. Siri navigator through voice commands.

User interface input devices may also include without limitation three dimensional 3D mice joysticks or pointing sticks gamepads and graphic tablets and audio visual devices such as speakers digital cameras digital camcorders portable media players webcams image scanners fingerprint scanners barcode reader 3D scanners 3D printers laser rangefinders and eye gaze tracking devices. Additionally user interface input devices may include for example medical imaging input devices such as computed tomography magnetic resonance imaging position emission tomography medical ultrasonography devices. User interface input devices may also include for example audio input devices such as MIDI keyboards digital musical instruments and the like.

User interface output devices may include a display subsystem indicator lights or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as that using a liquid crystal display LCD or plasma display a projection device a touch screen and the like. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system to a user or other computer. For example user interface output devices may include without limitation a variety of display devices that visually convey text graphics and audio video information such as monitors printers speakers headphones automotive navigation systems plotters voice output devices and modems.

Computer system may comprise a storage subsystem that comprises software elements shown as being currently located within a system memory . System memory may store program instructions that are loadable and executable on processing unit as well as data generated during the execution of these programs.

Depending on the configuration and type of computer system system memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. The RAM typically contains data and or program modules that are immediately accessible to and or presently being operated and executed by processing unit . In some implementations system memory may include multiple different types of memory such as static random access memory SRAM or dynamic random access memory DRAM . In some implementations a basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up may typically be stored in the ROM. By way of example and not limitation system memory also illustrates application programs which may include client applications Web browsers mid tier applications relational database management systems RDBMS etc. program data and an operating system . By way of example operating system may include various versions of Microsoft Windows Apple Macintosh and or Linux operating systems a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems the Google Chrome OS and the like and or mobile operating systems such as iOS Windows Phone Android OS BlackBerry 10 OS and Palm OS operating systems.

Storage subsystem may also provide a tangible computer readable storage medium for storing the basic programming and data constructs that provide the functionality of some embodiments. Software programs code modules instructions that when executed by a processor provide the functionality described above may be stored in storage subsystem . These software modules or instructions may be executed by processing unit . Storage subsystem may also provide a repository for storing data used in accordance with the present invention.

Storage subsystem may also include a computer readable storage media reader that can further be connected to computer readable storage media . Together and optionally in combination with system memory computer readable storage media may comprehensively represent remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information.

Computer readable storage media containing code or portions of code can also include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information. This can include tangible computer readable storage media such as RAM ROM electronically erasable programmable ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other tangible computer readable media. This can also include nontangible computer readable media such as data signals data transmissions or any other medium which can be used to transmit the desired information and which can be accessed by computing system .

By way of example computer readable storage media may include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM DVD and Blu Ray disk or other optical media. Computer readable storage media may include but is not limited to Zip drives flash memory cards universal serial bus USB flash drives secure digital SD cards DVD disks digital video tape and the like. Computer readable storage media may also include solid state drives SSD based on non volatile memory such as flash memory based SSDs enterprise flash drives solid state ROM and the like SSDs based on volatile memory such as solid state RAM dynamic RAM static RAM DRAM based SSDs magnetoresistive RAM MRAM SSDs and hybrid SSDs that use a combination of DRAM and flash memory based SSDs. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for computer system .

Communications subsystem provides an interface to other computer systems and networks. Communications subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . For example communications subsystem may enable computer system to connect to one or more devices via the Internet. In some embodiments communications subsystem can include radio frequency RF transceiver components for accessing wireless voice and or data networks e.g. using cellular telephone technology advanced data network technology such as 3G 4G or EDGE enhanced data rates for global evolution WiFi IEEE 802.11 family standards or other mobile communication technologies or any combination thereof global positioning system GPS receiver components and or other components. In some embodiments communications subsystem can provide wired network connectivity e.g. Ethernet in addition to or instead of a wireless interface.

In some embodiments communications subsystem may also receive input communication in the form of structured and or unstructured data feeds event streams event updates and the like on behalf of one or more users who may use computer system .

By way of example communications subsystem may be configured to receive data feeds in real time from users of social networks and or other communication services such as Twitter feeds Facebook updates web feeds such as Rich Site Summary RSS feeds and or real time updates from one or more third party information sources.

Additionally communications subsystem may also be configured to receive data in the form of continuous data streams which may include event streams of real time events and or event updates that may be continuous or unbounded in nature with no explicit end. Examples of applications that generate continuous data may include for example sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like.

Communications subsystem may also be configured to output the structured and or unstructured data feeds event streams event updates and the like to one or more databases that may be in communication with one or more streaming data source computers coupled to computer system .

Computer system can be one of various types including a handheld portable device e.g. an iPhone cellular phone an iPad computing tablet a PDA a wearable device e.g. a Google Glass head mounted display a PC a workstation a mainframe a kiosk a server rack or any other data processing system.

Due to the ever changing nature of computers and networks the description of computer system depicted in the figure is intended only as a specific example. Many other configurations having more or fewer components than the system depicted in the figure are possible. For example customized hardware might also be used and or particular elements might be implemented in hardware firmware software including applets or a combination. Further connection to other computing devices such as network input output devices may be employed. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

In the foregoing specification aspects of the invention are described with reference to specific embodiments thereof but those skilled in the art will recognize that the invention is not limited thereto. Various features and aspects of the above described invention may be used individually or jointly. Further embodiments can be utilized in any number of environments and applications beyond those described herein without departing from the broader spirit and scope of the specification. The specification and drawings are accordingly to be regarded as illustrative rather than restrictive.

Various embodiments of any of one or more inventions whose teachings may be presented within this disclosure can be implemented in the form of logic in software firmware hardware or a combination thereof. The logic may be stored in or on a machine accessible memory a machine readable article a tangible computer readable medium a computer readable storage medium or other computer machine readable media as a set of instructions adapted to direct a central processing unit CPU or processor of a logic machine to perform a set of steps that may be disclosed in various embodiments of an invention presented within this disclosure. The logic may form part of a software program or computer program product as code modules become operational with a processor of a computer system or an information processing device when executed to perform a method or process in various embodiments of an invention presented within this disclosure. Based on this disclosure and the teachings provided herein a person of ordinary skill in the art will appreciate other ways variations modifications alternatives and or methods for implementing in software firmware hardware or combinations thereof any of the disclosed operations or functionalities of various embodiments of one or more of the presented inventions.

The disclosed examples implementations and various embodiments of any one of those inventions whose teachings may be presented within this disclosure are merely illustrative to convey with reasonable clarity to those skilled in the art the teachings of this disclosure. As these implementations and embodiments may be described with reference to exemplary illustrations or specific figures various modifications or adaptations of the methods and or specific structures described can become apparent to those skilled in the art. All such modifications adaptations or variations that rely upon this disclosure and these teachings found herein and through which the teachings have advanced the art are to be considered within the scope of the one or more inventions whose teachings may be presented within this disclosure. Hence the present descriptions and drawings should not be considered in a limiting sense as it is understood that an invention presented within a disclosure is in no way limited to those embodiments specifically illustrated.

Accordingly the above description and any accompanying drawings illustrations and figures are intended to be illustrative but not restrictive. The scope of any invention presented within this disclosure should therefore be determined not with simple reference to the above description and those embodiments shown in the figures but instead should be determined with reference to the pending claims along with their full scope or equivalents.

