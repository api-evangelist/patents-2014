---

title: System and method for developing real-time web-service objects
abstract: A system and method for developing real-time web-service objects. The method includes providing a client-side application running on a connected device. The client-side application executes Webpage definition files having a composite Web-service objects, including a first and second composite Web-service objects where each of the object has been associatively linked to a data service from a data source. The method includes receiving, during runtime of the client-side application, a first updated data content from the data source. The method includes caching the first updated data content in memory and, upon receiving a second updated data content, retrieving the first updated data content from memory and updating the composite Web-service objects of the Webpage definition files using the first and second update data contents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09467533&OS=09467533&RS=09467533
owner: PTC Inc.
number: 09467533
owner_city: Needham
owner_country: US
publication_date: 20140321
---
The invention relates generally to systems and methods for application development for a computing device. More particularly in certain embodiments the invention relates to developing real time Web service objects for executing on an computing application.

Real time Web development generally refers to the making and testing of software applications that consume or receive Web data and Web services as they become available rather than requiring a user or the software to check a source periodically for updates. Real time Web services and data may include social feed such as Twitter Web chat services live charts on screen dashboards activity streams and real time Web analytics. Real time Web services and data may also include functions performed by enterprise back office operations such CRM ERP OSSm among others. A Web application or Web App is any application software that runs in a Web browser or is created in a browser supported programming language such as the combination of JavaScript HTML and CSS and relies on a common Web API to render the application.

One type of such Web application is a Mashup which generally is a Web page or Web application that uses content from more than one source to create a new service displayed in a graphical user interface. Mashup may be employed for business applications consumer applications and industrial applications. A Mashup may use application programming interfaces APIs of different vendors to use their site s content as well as the site s aggregated and reused content.

Heterogeneous development generally refers to using hardware and software from different vendors. Because of available selections of competing standards and platforms offered by various vendors application developers typically have to test a given application using multiple devices operating a number of competing platforms and standards. These tests may be in relation to the operating systems the communication networks and or the data storage.

Testing across multiple platforms is still performed for the most part manually. For example in order to test the interactions of a Web application across various types of devices in a heterogeneous environment an application developer has to individually update the client side Web application on each of the devices.

Web development and application development tools have been around for some time. Application libraries and toolkits have been developed that enable application developers to easily integrate data and functions. Nevertheless there is a still a need for better tools to make application development more efficient and quick. There additionally exists a need for a solution that allows for testing code of new classes of Web objects that employ Real time data and services.

In general overview an intermediary party provides an application developer with a development platform for building a client side computing device application e.g. a mobile application that includes Mashup elements. The Mashup elements display contents that are aggregated from multiples sources.

In some implementations the application developer accesses the development platform through a Web browser running on a computing device. The development platform hosts a Web based development workspace that is executed from the development platform managed by the intermediary party. The Web based development workspace includes a Mashup template library directed to building the client side application. The Mashup template library includes a list of Mashup templates to which a given application developer can instantiate within the development workspace to produce the Mashup elements to execute in the client side application.

In some implementations the development platform maintains data content to be used by the Mashup elements. The data content may include test data as well as third party Web data and services accessible to the development platform. In some implementations the development platform may reproduce some of the Web data within its own data storage. In some implementations the development platform may interface to a data warehouse having data curated by the intermediary party and made available within the intermediary party s local network.

To this end the application developer has access within the Web based development workspace to both the building elements e.g. Mashup templates and well as the content data to populate instances of the building elements in which the content data includes real time data and services intended for use during run time production.

To improve the development speed of the developer s client side application project the Web based development workspace in some implementations provides a function to test the client side application over multiple test computing devices collectively forming a heterogeneous environment. To this end an application developer during development of their client side application can centrally manage and test the user interface and the data interaction to identify any unexpected behaviors from for example the operating system and software native to each of the test devices. In some implementations each of the test devices may run an operating system of a different vendor.

Furthermore to reduce the testing time of a prototype client side application in some implementations the Web based development workspace includes a function that updates a given prototype client side application without requiring the application developer to physically touch any of the test devices to initiate the update nor to configure the test devices to be in test mode. In some implementations the application developer merely has to subscribe to the client side application at each of the test devices. In some implementations the application developer may choose within the Web based development workspace whether the function merely causes the test device to download the updated client side application or causes the device to both download and execute the updated application.

Furthermore for reducing the testing time of a client side application having Mashup elements in some implementations the development platform allows for a given updated client side application to retain the last view being displayed on a given test device before the update had occurred. In some implementations the retention includes a given navigable screen as well as various presentation states of each of the Mashup elements that may be presented on that particular screen.

In some implementations the content data may include metadata information associated with a given data content. The client side application may employ such metadata information to ascertain a current viewable state of any given Mashup elements to which the viewable state has a hierarchical relationship corresponding to the structure of the data content. In some implementations the metadata information and the data content may be structured in a self describing message format in which the metadata information is a part of the data content. The metadata information may be employed to describe one or more data of a given message organized as a multi level hierarchy. In some implementations the multi level hierarchy message may directly map to the rendering widgets executing at the client side application.

To improve or enhance an end user s experience in browsing data on the client side application during runtime the client side application may cache data and code objects to allow usage of the client side application when connectivity to the content sources is not present. In some implementations the development platform may send content data for multiple viewable states. To this end the content data may be structured such that a single service call to the content source results in a record set of the content data that can be used to view all states of the Mashup element during runtime.

To reduce the development time to create application having such user experience improvement features the development platform may be configured with functions to centrally manage the mechanisms when the updates are executed at the client side application. In some implementations the development platform may generate a list of all contents for a given distribution of the update. In some implementations the list is recorded in an update manifest file. The development form may generate the list using an associations made between various presentation and content objects during the development of the client side application. The association is preferably made without an application developer having to make such explicit definitions. In essence the development platform allows individual actions by an application developer to produce multiple effects to the end application.

Applications for the systems and methods described herein are not limited to the aforementioned examples but may be deployed in any number of contexts as would be understood by one of ordinary skill in the art. Contents of the background are not to be considered as an admission of the contents as prior art.

In one aspect the present disclosure describes a method of developing real time Web application for multiple platforms in a heterogeneous environment. A development workspace for a set of Webpage definition files for running on one or more of client side applications may be provided. The development workspace may combine composite Web service objects to create the set of Webpage definition files. The client side applications may be configured to run on a set of connected platforms composing a heterogeneous environment. Composite Web service objects may include Widgets elements and Mashup elements. The composite Web service object may aggregate information content or services from a number of content sources. The composite Web service object may include a content source service selected from a group consisting of a map service a calendar service a data stream service a wiki page service and a portal service. A content source of the content sources may be selected from a group consisting of public Web service API a third party Web service API a Web widget library a Web toolkit library a screen scraping of a Web site a local database and a Wiki page. A portion of the content sources may include data associated to one or more connected devices composing an Internet of Things or a machine to machine system.

In some implementations the method may include storing a set of modified Webpage definition files responsive to a save command being received by an input at the development workspace. The set of modified Webpage definition files may include at least one modification of at least one of the composite Web service objects from a set of current Webpage definition files associated with a previous save command.

In some implementations the method may include causing by a processor responding to the save command a message to be transmitted to each of the client side applications executing on the set of connected platforms. In some implementations the client side application is executed within a Web browser. The message may cause each of the client side applications to receive the set of modified Webpage definition files to which the receiving occurs without any input by a user at the client side application.

In some implementations the method may include causing the client side application to update the set of current Webpage definition files with the set of modified Webpage definition files upon receipt of the set of modified Webpage definition files. The updating may occur without any input by the user at the client side application. The method may include causing the client side application to display the last retained view being display prior to the update.

In some implementations the set of Webpage definition files may be configured to produce a number of presentation states in the composite Web service objects. The client side applications may determine a current presentation state being displayed at the set of current Webpage definition files. During a new update distribution the client side application may update the set of modified Webpage definition files and traverse the presentation states to the same current presentation state.

In one aspect the present disclosure describes a system including a processor and a memory the memory storing instruction that when executed by the processor cause the processor to provide a development workspace for a set of Webpage definition files for running on one or more client side applications. The development workspace may combine composite Web service objects to create the set of Webpage definition files. The client side applications may be configured to run on a set of connected platforms composing a heterogeneous environment. Composite Web service objects may include Widgets elements and Mashup elements. The composite Web service object may aggregate information content or services from a number of content sources. The composite Web service object may include a content source service selected from a group consisting of a map service a calendar service a data stream service a wiki page service and a portal service.

In some implementations the instructions may further cause the processor to store a set of modified Webpage definition files responsive to a save command being received by an input at the development workspace. The set of modified Webpage definition files may include at least one modification of at least one of the composite Web service objects from a set of current Webpage definition files associated with a previous save command.

In some implementations the instructions may further cause a message to be transmitted to each of the client side applications in response to the save command. In some implementations the client side application is executed within a Web browser. The message may cause each of the client side applications to receive the set of modified Webpage definition files to which receiving occurs without any input by a user at the client side application.

In some implementations the instructions may further cause the client side application to update the set of current Webpage definition files with the set of modified Webpage definition files upon receipt of the set of modified Webpage definition files. The updating may occur without any input by the user at the client side application. The method may include causing the client side application to display the last retained view being display prior to the update.

In some implementations the set of Webpage definition files may be configured to produce a number of presentation states in the composite Web service objects. The client side applications may determine a current presentation state being displayed at the set of current Webpage definition files. During a new update distribution the client side application may update the set of modified Webpage definition files and traverse the presentation states to the same current presentation state.

In one aspect the present disclosure describes a non transitory computer readable medium having instructions stored thereon where the instructions when executed by a processor cause the processor to provide a development workspace for a set of Webpage definition files for running on one or more client side applications. The development workspace may combine one or more composite Web service objects to create the set of Webpage definition files. The client side applications may be configured to run on a set of connected platforms composing a heterogeneous environment. The composite Web service objects may include Widgets elements and or Mashup elements. The composite Web service object may aggregate information content or services from a number of content sources. The composite Web service object may include a content source service selected from a group consisting of a map service a calendar service a data stream service a wiki page service and a portal service.

In some implementations the instructions may further cause the processor to store a set of modified Webpage definition files responsive to a save command being received by an input at the development workspace. The set of modified Webpage definition files may include at least one modification of at least one of the composite Web service objects from a set of current Webpage definition files associated with a previous save command.

In some implementations the instructions may further cause a message to be transmitted to each of the client side applications in response to the save command. In some implementations the client side application is executed within a Web browser. The message may cause each of the client side applications to receive the set of modified Webpage definition files to which the receiving occurs without any input by a user at the client side application.

In some implementations the instructions may further cause the client side application to update the set of current Webpage definition files with the set of modified Webpage definition files upon receipt of the set of modified Webpage definition files. The updating may occur without any input by the user at the client side application. The method may include causing the client side application to display the last retained view being display prior to the update.

In some implementations the set of Webpage definition files when executed on the client side application creates a number of presentation states of the composite Web service objects. The client side applications may determine a current presentation state being displayed at the set of current Webpage definition files. During a new update distribution the client side application may update the set of modified Webpage definition files and traverse the presentation states to the same current presentation state.

In one aspect the present disclosure describes a method of updating software distribution at a client side application. The method may include providing a client side application running on a connected device in which the client side application uses Webpage definition files to display one or more composite Web service objects.

In some implementations the method may include receiving updated Webpage definition files including an update of at least one composite Web service object within the Webpage definition files where the composite Web service objects includes a number of presentation states.

In some implementations the method may include receiving concurrent with the updated Webpage definition files a structured data table having content information to populate the presentation states of the at least one of the composite Web service objects where the structured data table comprises a set of markers.

In some implementations for each of the composite Web service objects being displayed the method may include determining a path of the set of markers associated with a current presentation state

In some implementations the method may include updating the Webpage definition files with the updated composite Web service objects.

In some implementations the method may include displaying each of the updated composite Web service objects of the updated Webpage definition files at the current presentation state using the determined marker path.

In one aspect the present disclosure describes a method of operations at a client side application. The method may include providing a client side application running on a connected device. The client side application may have a Webpage definition files. The Webpage definition files may have composite Web service objects including a first composite Web service object and a second composite Web service object where the first composite Web service object has been associatively linked to a first data service from a first data source and the second composite Web service object has been associative linked to a second data service from a second data source. The linking may have been made at a graphical user interface having an input represented as a wire diagram that links a first graphical widget representing the first composite Web service object to a second graphical widget representing an API associated with the first data source.

In some implementations the method may include receiving during runtime of the client side application a first updated data content of the first data service from the first data source. The first updated data content may be listed in a manifest file. Examples of the first updated data content may include for example but not limited to JavaScript object an HTML object an image a Web Mashup definition and a Web Mashup artifact.

In some implementations the method may include caching the first updated data content in memory if other files in the manifest file are not present.

In some implementations the method may include upon receiving a second updated data content of the second data service from the second data source retrieving the first updated data content from memory and updating the composite Web service objects of the Webpage definition files with the first and second update data contents. Updates of the composite Web service objects may be performed in a transactional manner.

At least one of the composite Web service objects may include a presentation states including a first state and a second state in which the first state had been associatively linked to a third data service from a third data source and the second state had been associatively linked to a fourth data service from a fourth data source. The update occurs only upon a third update of the third data service and a fourth update of the fourth data service being received.

In one aspect the present disclosure describes a system including a processor and a memory the memory storing instruction that when executed by the processor cause the processor to provide a client side application running on a connected device. The client side application may have a number of Webpage definition files. The Webpage definition files may have a number of composite Web service objects including a first composite Web service object and a second composite Web service object where the first composite Web service object has been associatively linked to a first data service from a first data source and the second composite Web service object has been associative linked to a second data service from a second data source. The linking may have been made at a graphical user interface having an input represented as a wire diagram that links a first graphical widget representing the first composite Web service object to a second graphical widget representing an API associated with the first data source.

In some implementations the instructions may further cause the processor to receive during runtime of the client side application a first updated data content of the first data service from the first data source. The first updated data content may be listed in a manifest file. Examples of the first updated data content may include for example but not limited to JavaScript object an HTML object an image a Web Mashup definition and a Web Mashup artifact.

In some implementations the instructions may further cause the processor to cache the first updated data content in memory if other files in the manifest file are not present.

In some implementations the instructions may further cause the processor to receive a second updated data content of the second data service from the second data source retrieving the first updated data content from memory and updating the composite Web service objects of the Webpage definition files with the first and second update data contents. Updates of the composite Web service objects may be performed in a transactional manner.

In one aspect the present disclosure describes a non transitory computer readable medium having instructions stored thereon where the instructions when executed by a processor cause the processor to execute a client side application running on a connected device. The client side application may have a number of Webpage definition files. The Webpage definition files may have a number of composite Web service objects including a first composite Web service object and a second composite Web service object where the first composite Web service object has been associatively linked to a first data service from a first data source and the second composite Web service object has been associative linked to a second data service from a second data source. The linking may have been made at a graphical user interface having an input represented as a wire diagram that links a first graphical widget representing the first composite Web service object to a second graphical widget representing an API associated with the first data source.

In some implementations the instructions may further cause the processor to receive during runtime of the client side application a first updated data content of the first data service from the first data source. The first updated data content may be listed in a manifest file. Examples of the first updated data content may include for example but not limited to JavaScript object an HTML object an image a Web Mashup definition and a Web Mashup artifact.

In some implementations the instructions may further cause the processor to cache the first updated data content in memory if other files in the manifest file are not present.

In some implementations the instructions may further cause the processor to receive a second updated data content of the second data service from the second data source retrieving the first updated data content from memory and updating the composite Web service objects of the Webpage definition files with the first and second update data contents. Updates of the composite Web service objects may be performed in a transactional manner.

In one aspect the present disclosure describes a method of displaying hierarchical data at a client side application executing on a computing device. The method may include providing a graphical user interface running at the client side application. The graphical user interface may present one or more rendering widgets and an input widget having one or more levels where each of the one or more rendering widgets had been associated to one or more data content source. The graphical user interface may present the input widget as a tree diagram. The rendering widgets may have been associatively linked to one or more data content source at a development workspace used to define the rendering widget. The graphical user interface may include a map widget where the received data set include data for each of the levels of the input widget for the map widget. The received data set may be an InfoTable.

In some implementations the method may include transmitting at the client side application a request for a dataset corresponding to the data content source.

In some implementations the method may include receiving at the client side application the data set where the data set forms a multi level hierarchy corresponding the one or more levels of the input widget and where the data set includes the one or more data content source associated with the rendering widgets.

In some implementations the method may include displaying a selected rendering widgets with a data content source where the selected rendering widgets corresponds to a selected level of the input widget.

In some implementations the method may further include receiving at the client side application an alert of an updated data set where the alert causes at the client side application a transmission of a request for the updated data set. The method may further include receiving a second input at the input widget corresponding a second level of the input widget. The second input may cause the client side application to render data from a portion of the multi level hierarchy corresponding to the second level.

In one aspect the present disclosure describes a system including a processor and a memory the memory storing instruction that when executed by the processor cause the processor to provide a graphical user interface running at the client side application. The graphical user interface may present one or more rendering widgets and an input widget having one or more levels where each of the one or more rendering widgets had been associated to one or more data content source. The graphical user interface may present the input widget as a tree diagram. The rendering widgets may have been associatively linked to one or more data content source at a development workspace used to define the rendering widget. The graphical user interface may include a map widget where the received data set include data for each of the levels of the input widget for the map widget. The received data set may be an InfoTable.

In some implementations the instructions when executed further cause the processor to transmit at the client side application a request for a dataset corresponding to the data content source.

In some implementations the instructions when executed further cause the processor to receive at the client side application the data set where the data set forms a multi level hierarchy corresponding the one or more levels of the input widget and where the data set includes the one or more data content source associated with the rendering widgets.

In some implementations the instructions when executed further cause the processor to display a selected rendering widgets with a data content source where the selected rendering widgets corresponds to a selected level of the input widget.

In some implementations the instructions when executed further cause the processor to receive at the client side application an alert of an updated data set where the alert causes at the client side application a transmission of a request for the updated data set. The method may further include receiving a second input at the input widget corresponding a second level of the input widget. The second input may cause the client side application to render data from a portion of the multi level hierarchy corresponding to the second level.

In one aspect the present disclosure describes a non transitory computer readable medium having instructions stored thereon where the instructions when executed by a processor cause the processor to provide a graphical user interface running at the client side application. The graphical user interface may present one or more rendering widgets and an input widget having one or more levels where each of the one or more rendering widgets had been associated to one or more data content source. The graphical user interface may present the input widget as a tree diagram. The rendering widgets may have been associatively linked to one or more data content source at a development workspace used to define the rendering widget. The graphical user interface may include a map widget where the received data set include data for each of the levels of the input widget for the map widget. The received data set may be an InfoTable.

In some implementations the instructions when executed further cause the processor to transmit at the client side application a request for a dataset corresponding to the data content source.

In some implementations the instructions when executed further cause the processor to receive at the client side application the data set where the data set forms a multi level hierarchy corresponding the one or more levels of the input widget and where the data set includes the one or more data content source associated with the rendering widgets.

In some implementations the instructions when executed further cause the processor to display a selected rendering widgets with a data content source where the selected rendering widgets corresponds to a selected level of the input widget.

In some implementations the instructions when executed further cause the processor to receive at the client side application an alert of an updated data set where the alert causes at the client side application a transmission of a request for the updated data set. The method may further include receiving a second input at the input widget corresponding a second level of the input widget. The second input may cause the client side application to render data from a portion of the multi level hierarchy corresponding to the second level.

The features and advantages of the present disclosure will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

In some implementations the system includes a server side application that executes on a Web server platform . The system further includes a development workspace that executes on a developer s computing device .

In some implementations the development workspace is a Web service or application that is presented on a Web browser executing on the developer s computing device and is hosted by the server side application . The development workspace includes a graphical user interface for building a client side application .

An application developer may keep test devices to in proximity to the developer s computing device during the development of the client side application . To this end the application developer can centrally manage and test the user interfaces and the data interactions to identify any unexpected behaviors from for example the operating system and software native to each of the test devices to

In some implementations the Web server platform provides the development workspace to an application developer on the developer s computing device also called a development client . In some implementations the Web server platform presents the development workspace through a Web browser application executing natively on the development client . Examples of Web browser applications include Internet Explorer Safari Mozilla and Google Chrome. In some implementations the development workspace may be a stand alone software application that executes on the development client that interfaces to the Web server platform .

In some implementations the Web server platform may provide various Web services to the client side applications and the development workspace . For example the Web server platform may include a development host server a data analytic and storage server a client side application host server collectively connected within an Intranet or Wide area network . The development host server may provide Web hosting services for the development workspace . The client application host server may host Web services for the client side applications . The data analytics and storage server may store and analyze data content for either the development host server or the client application host server .

In some implementations the Web server platform connects to various data content providers Webpages business entities data centers and device clusters to retrieve data and information to be used by the client side applications and the server side application . Such third party sources or self curated sources may include content source service such as map service a calendar service a data stream service a wiki page service and a portal service. The content source service may be accessible for example using public Web service APIs third party Web service APIs Web widget libraries Web toolkit libraries screen scraping mechanisms of Web sites local database and Wiki pages.

In some implementations the Web server platform may include servers and services relating to Internet of Things IOT or machine to machine M2M platforms that service data and information for a vast number of computing devices. Examples of such platforms are describe in co pending application and concurrently filed U.S. patent applications titled SYSTEM AND METHOD OF MESSAGE ROUTING USING NAME BASED IDENTIFIER IN A DISTRIBUTED COMPUTING ENVIRONMENT filed Mar. 21 2014 naming inventors Mike Mahoney Bob DeRemer and Rick Bullotta and having Ser. No. 14 222 123. The application is incorporated herein by reference in its entirety.

In some implementations subsequent to logging in an application developer registers to develop a new Web Mashup application. Upon starting a new Web Mashup project the server side application creates a new Webpage definition file . The Webpage definition file may include presentation and data elements to display a Webpage having Mashup element or real time data content when the Webpage definition file is executed at the client side application . The Webpage definition file may be stored in both the local memory at the development client and the host memory at the Web server platform . The application developer can retrieve previously saved projects and Webpage definition files from the development workspace .

In some implementations as the application developer uses the development workspace to incorporate third party contents and Web services in the project to build the client side application a modified Webpage definition file is generated. In some implementations the server side application generates the modified Webpage definition file to run at the client side application. The modified Webpage definition may also be previewed at the development workspace .

Alternatively as shown in upon starting a new Web Mashup project the development workspace creates the new Webpage definition file and stores the files in local memory. The server side application may maintain a mirror copy of the Webpage definition file at the platform server .

In an embodiment of the invention to improve or enhance an end user s experience in browsing data on the client side application during runtime the client side application may cache data and code objects to allow the usage of the client side application when connectivity to the content sources is not present.

The client side application caches the Webpage definition files and the associated linked data content within the local memory or buffer .

To prevent the unintended interactions of various executable or parse able elements the client side computing device application may cache the Webpage definitions files and all the data associatively linked to the Webpage definitions files and ensure that all the files and data content are present before rendering the data and code content.

To designate the appropriate content to cache in some implementations the development workspace may use the associative links that were explicitly made in generating the Webpage definitions to generate a list of contents for a given update of the application distribution. The list of contents may be recorded in an update manifest file. For example during development the Webpage definitions files A and B may have been associatively linked to one another and to the third party Web services and to the third party data . To this end the development workspace may add these files A and B the third party Web service and the data content to the manifest list.

In some implementations the server side application may use the manifest file to ensure that all the updated Webpage definition files and the associated linked data content are concurrently provided during runtime to the client side application . To this end the server side application maintains a definition of such associative links. During runtime the server side application may transmit the data contents and to the client side application as well as the Webpage definition files A and B.

Mashups may be imported manipulated and displayed using Widgets that display a physical element that consumes a data content element. To this end the Widgets may be defined by the physical elements the data content element and their associations.

In some implementations the development workspace includes a set of widget components and a set of data components that collectively serve as tools for building the client side application . The widget components may include for example but not limited to functions represented in a graphical form that can be dragged into a first development workspace . These functions may be GUI widgets such as buttons check boxes gauges etc. as well as the Mashup widgets and programming operations such as a file upload function a data export function an expression function among others . The GUI widgets may serve as definitions of the presentation elements to be displayed at the client side application during runtime. The Mashup widgets may include a Blog a contained Mashup a multi dimensional tree an event chart a gauge etc. The widget component tools may include a filter or a search function to allow searching of the list of available components.

Upon a given widget component here shown as a tree table being dragged and dropped from the widget components into the first development workspace a first representation of the widget appears in the first workspace and a second representation appears in a second development workspace .

In some implementations the first representation is defined within a framed workspace to which the size and location of the workspace provides a spatial definition of the widget . Various presentation and appearance properties of the Widget may be modified at the widget properties window .

In some implementations the second representation provides a data content definition of the widget . Various data properties of the Widget may be modified or set at the data properties window .

Data component may also be dragged and dropped from the data components into the second development workspace . The data component serves as a source of the data content that is accessible to the server side application that a given developer has permission to access. The data component shows available data associated with a given data source. The data component serves as definitions of the data content elements to be employed at the client side application during runtime. To this end the second development workspace allows the application developer to link or associate the property definitions of a Widget include Mashup with the definitions for the data content elements of the Widget.

In some implementations the link is preferably a rope object connecting between the data component and the Widget component such as widget . This link may be based on an association of two or more widgets. The link may be based on the data exchanged. The link may be based on the direction of the message or event. The link may be based on a property such as a user name a social networking aspect or a frequency associated with the update.

As shown a given element ALL DATA of the data component THINGS VENDING NETWORK SERVICES is linked to an elements DATA of TREE 32 of the Widget object . The elements includes an icon and or text to provide an indicia of the type of data available with the element. Similarly the Widget object element includes icons and or text to provide an indicia of the type of data that it can consume. In some implementations the development workspace may restrict the connections between mismatched data types. In some implementations the development workspace may highlight allowable connections when a data component element or a Widget object is selected in the second development workspace.

In some implementations the linkages and association made in the workspace may be used to designate contents for the a manifest file that may be used to cache the updates of modified Mashup applications or cache the code and contents for run time operations at the client side application as described in relation to .

The development workspace includes a save command . The save command saves the content of the first development workspace and the second development workspace . The content may be stored locally at the development workspace and or at the server side application .

In some implementations the save command initiates a wrapper creation process to convert the physical elements and the data content elements defined within the workspace to a Webpage definition file. The Webpage definition file may be expressed in one or more browser or server supported programming language and or code. An example may be JavaScript HTML CSS and or combinations thereof. The Webpage definition file may be expressed in various dynamic language such as but not limited to Perl VBScript Dart PHP ASP .NET ColdFusion Ruby Python and TKL. In some implementations adding a widgets component and or a data component into the workspaces and or may initiate the wrapper creation process.

In some implementations the development workspace includes a cancel edit command . The command may undo all the modification to the workspace since the previous save. Alternatively the command may cause the previously saved workspace to be loaded such as from local memory or from the server side application .

Other widget components shown in include a Mashup for status of community members . The status may provide a real time list of members that may be using the client side application during run time. In some implementations the workspace may include navigable tabs to allow navigation between the different workspace views of the client side application . Navigation between views may serve as states within the definitions of the presentation elements to be displayed at the client side application .

A Mashup element may be made of other Mashup elements which may be referred to as a nested Mashup or a contained Mashup . The development workspace provides a contained Mashup widget . The widget is shown having a widget representation in the workspace and having a data representation in the second development workspace . A nested Mashup or contained Mashup is a part of a Mashup definition.

Other widgets components shown in include a Mashup for communication logs a map service and Mashup for gauge elements . The communication logs may provide a display of real time communication between end users during runtime. The gauge elements may be provide displayable view of data from a Web data or service. The map service may provide a display of real time map data such as that provided by Google Map API.

In an aspect of an embodiment of the invention to reduce the testing time of a prototype client side application the save process is used as a trigger for both development actions and test actions. The save process may be executed at the development workspace and or the server side application.

Turning back to upon the application developer saving an instance of the development workspace a modified Webpage definition file is created.

The save process may initiate the wrapper process to generate the modified Webpage definition files as described in relation to .

In some implementations the save process may be triggered by the save command received at the development workspace . Additionally the modified Webpage definition file may be generated when the link relationship between the data and widget component is changed. Additionally the modified Webpage definition file may be generated when the properties of the data component or the widget component are changed within the properties windows or . Additionally the modified Webpage definition file may be generated when annotations are added to the workspace. Additionally the modified Webpage definition file may be generated when navigable tabs are changed. Additionally the modified Webpage definition file may be generated when nested Mashup are created modified replaced or deleted.

In some implementations the modified Webpage definition file may also be generated based on any change to a presentation elements or a logical connection with a data element as described in relation to . For example the modified Webpage definition file may be generated when a new widget is added replaced modified or removed. Similarly the modified Webpage definition file may be generated when a workspace is added removed or changed in relation to size and or location.

In some implementations the modified Webpage definition file replaces the new or previously saved or retrieved Webpage definition file.

In some implementations the save process causes the server side application to transfer the modified Webpage definition files to the workspace environment . To this end a save command causes the definitions files to be tested on both the workspace environment and the client side application . In such implementations the workspace environment may open a test window to display a preview of the Mashup. The server side application may provide the data content and or the Web services required for the display.

As shown the client side application displays a Mashup Web application intended for a vending machine operator relating to a set of deployed vending machines shown as VM VM VM VM VM and VM .

To this end the Mashup Web application provides a dashboard for a given operator to view data associated with the vending machines. Here the data includes sales goal volume information in percentage frequency of stock being out information as a percentage of the month frequency the machine is in service information and number of complaints received information. The data are respectively displayed on gauges and .

The Mashup Web application also displays map service information associated to a given vending machine and its respective location. As shown the deployed vending machines are organized by sites shown as Holiday Inn Express Lincoln Financial Field Frontier Field and Roseland Bowling Center by regions shown as Philadelphia Pa. and Rochester N.Y. and by companies shown only as Acme Beverage Corp . To this end the Mashup Web application may have a number of display states which are based on an end user s selection of what he or she would like displayed. The locations and vending machines are organized in a tree diagram having nested elements in a multi level table.

Upon selecting a vending machine or a location in the tree diagram the client side application is configured to display the appropriate data information. In some implementations the tree diagram is a Widget component namely the tree table as described in relation to . Similarly in some implementations gauges and correspond to the gauge elements as shown in .

Turning back to in another aspect of the embodiment of the invention the saving process may trigger a function that updates a given prototype client side application without requiring the application developer to physically touch any of the test devices to initiate the update. In some implementations upon receipt of a trigger message from the Web server platform each of the test devices to is triggered to receive the modified Webpage definition files .

In some implementations a given test devices to may receive the update by various conventional push pull and update operations. For example in some implementations a given test devices to may receive the update by the Web server platform pushing the update Webpage definition files to the device . Alternatively in some implementations a given test devices to may receive the update by the device pulling the updated Webpage definition files from the Web server platform .

In some implementations upon the modified Webpage definition file being received the client side application updates the set of current Webpage definition files with the set of modified Webpage definition files without any input by the user at the client side application. In some implementations to update the files the client side application may replace the current Webpage definition files running at the client side application with the modified Webpage definition file. Alternatively to update the files the client side application may execute the updated Webpage definition files and then delete files current Webpage definition files. Alternatively to update the files the client side application may read write or modify using various conventional operations.

In another aspect of the embodiment of the invention to reduce the testing time of a client side application having Mashup elements the development platform provides a function to allows for a given updated client side application to retain the last view being displayed on a given test device before the update had occurred. In some implementations the retention may be associated to both a given navigable screen as well as various presentation states of each of the Mashup elements that may be presented in that particular screen as described in relation to .

To retain the last view in some implementations client side application may use the data content to retain viewable state information of the Mashup. In some implementations the data content is structured as a hierarchical data table. To this end a presentation state may be associated to elements located within the hierarchical data table. In some implementations this presentation state may be a path that defines relationships between node elements composing the hierarchical data table.

An example of retaining the last view being displayed prior to updating the modified Webpage definition file is now discussed. As described in the client side application includes a tree diagram to display the vending machines organized by sites by regions and by companies. To this end an application developer or an end user may select an individual vending machines to see specific information relating to the selected machine or select a site to see aggregated information of the machines associated to that site or select a region to see aggregated information of sites associated to that region or select a company to see aggregated information of regions associated to that company. Each of the selections in essence presents a different state of the Mashup display for the client side application.

Take for example the last review being shown being of a vending machine VM node . The cursor is thus located at VM node . VM node has a path defined by a set of data nodes including node and i.e VM node Acme Vending Corp node Philadelphia Pa. node and Holiday Inn Express node . The path is also defined by the relationships among the nodes. In some implementations the relationship includes the Acme Vending Corp node being linked to the Philadelphia Pa. node the Philadelphia Pa. node being linked to the Holiday Inn Express node and the Holiday Inn Express node being linked to the VM node .

To this end in some implementations when updating the modified Webpage definition file the client side application stores a path describing the data node relationship that is associated a selected cursor. Subsequently after the modified Webpage definition file has been updated the client side application traverses the data table to the same selected cursor using the stored path. In instances in which the data structure or the presentation element is no longer present the client side application may display a default state such as the root of the data table or the furthest state along the path before a break in the node occurs.

In another aspect of an embodiment of the invention the real time Web application is configured to receive data organized in a structure mirroring its hierarchical data table . As described in relation to a tree diagram for example may be structured as a multi level hierarchy. To this end each of the nodes within the tree diagram may form a nested level that collectively defines a multi level hierarchy. In some implementations a server providing data service to the client side application can provide the data organized with the same node structure as this multi level hierarchy.

In some implementations the server may provide the data record in a self describing message. A self describing message refers to a message having both data and metadata that provides a description of the data. In some implementations the metadata may be described in a structure known to both the server side application that generates the message and the client side application that consumes the message. In some implementations the structure is defined as part of a Representational state transfer REST style data model.

The metadata may include definitions of objects that may be used to generate multi level hierarchy data set. In some implementations the metadata may include a to field definition and a from field definition . Moreover the metadata may include an asset Type field definition to serve as attribute associated with a level. To this end a data object may be structured as a linked list to form a hierarchical relationship where nodes within each level of the hierarchy shares a common asset Type field definition .

Further examples and description of InfoTable are described in co pending and concurrently filed patent application titled SYSTEM AND METHOD OF ABSTRACTING COMMUNICATION PROTOCOL USING SELF DESCRIBING MESSAGES filed Mar. 21 2014 naming inventors Rick Bullotta John Canosa Bob DeRemer and Mike Mahoney and having Ser. No. 14 222 067. The application is incorporated herein by reference in its entirety.

The tree diagram of is shown mapped to data records organized in a multi level hierarchy. The data records includes data objects and that organizes to the same hierarchical structure as the tree diagram .

Specifically the data records include several field values which are related to the structural information associated to the various nodes as well as the attribute and the specific record of the data. As shown the structural information of each of the field values may be used to organize the elements as a linked list. These structural information include a to field a from field and an assetType field .

As shown the data object Acme Vending Corp is a Corp asset type connected to Acme Vending Corp . To this end the data object serves as the first node in the list. The data object Philadelphia PA is a Region asset type connected from Acme Vending Corp to Philadelphia PA . Data object Holiday Inn Express is a Site asset type connected from Philadelphia PA to Holiday Inn Express . Subsequently the data object VM is a VerySmartVendingMach asset type connected from Holiday Inn Express to VM . Looking at this relationship mirrors the shown path in which the node connects to the node the node connects to the node and the node connects to the node .

As shown the data records is represented in JavaScript Object Notation JSON format. It should be appreciated that the example is merely for exemplary purposes and that other types representation of the data may be employed.

As shown the data records include data associated to each of the vending machines. This data may include values relating to sales volume goal number of complaints in server percentage and out of stock percent . The data may be used by the gauge widgets and to be displayed as described in relation to . To this end a new cursor selection to another vending machine in the tree diagram does not necessitate the client side application to retrieve additional data from a server.

To this end a single record set of the content data allows for the client side application to change its state to any of the Mashup views during runtime.

In some implementations the record set may be cached as described in relation to to allow the operations of the client side application including the Mashup element even when the communication to the server side application is not present.

The method includes storing a set of modified Webpage definition files responsive to a save command being received by an input at the development workspace step for example shown and described in relation to . The set of modified Webpage definition files includes at least one modification of at least one of the composite Web service objects from a set of current Webpage definition files associated with a previous save command.

The method then may include causing by a processor responding to the save command a message to be transmitted to each of the client side applications on the connected platforms step for example as described in . The message may cause each of the client side applications to receive the set of modified Webpage definition files to which receiving occurs without any input by a user at the client side application.

The method then may include causing the client side application to update the set of current Webpage definition files with the set of modified Webpage definition files upon receipt of the set of modified Webpage definition files step for example as shown as described in relation to . The updating occurs without any input by the user at the client side application.

The method then includes causing the client side application to display the last retained view being display prior to the update step for example as shown and described in relation to .

The method includes providing a client side application running on a connected device step for example as described in relation to . The client side application has a number of Webpage definition files having one or more composite Web service objects including a first composite Web service object and a second composite Web service object. The first composite Web service object is associatively linked to a first data service from a first data source and the second composite Web service object is associative linked to a second data service from a second data source.

The method includes receiving during runtime of the client side application a first updated data content of the first data service from the first data source step for example as shown and described in relation to . The first updated data content may be listed in a manifest file. Examples of the first updated data content includes for example but not limited to Javascript object an HTML object an image a Web Mashup definition and a Web Mashup artifact.

The method includes caching the first updated data content in memory step if other files in the manifest file are not present as shown and described in relation to .

The method includes upon receiving a second updated data content of the second data service from the second data source retrieving the first updated data content from memory and updating the composite Web service objects of the Webpage definition files with the first and second update data contents step . Updates of the composite Web service objects may be performed in a transactional manner.

The method includes providing at a client side application at a computing device a graphical user interface having one or more rendering widgets and an input widget having one or more levels step where each of the one or more rendering widgets had been associated to one or more data content source. The rendering widgets may have been associatively linked to one or more data content source at a development workspace used to define the rendering widget for example as shown and described in relation to .

In some implementations the graphical user interface may include a map widget where the received data set include data for each of the levels of the input widget for the map widget.

The method includes transmitting at the client side application a request for a dataset corresponding to the data content source step . The transmission may be in response to a alert received at the client side application.

The method includes receiving at the client side application the data set where the data set forms a multi level hierarchy corresponding one or more levels of the input widget step for example as shown and described in relation to . The data set may include one or more data content source associated with the rendering widgets. The input widget may be presented as a tree diagram.

The method includes displaying a selected rendering widgets with a data content source step where the selected rendering widgets corresponds to a selected level of the input widget for example as shown and described in .

The computing device includes a processor a memory a storage device a high speed interface connecting to the memory and multiple high speed expansion ports and a low speed interface connecting to a low speed expansion port and the storage device . Each of the processor the memory the storage device the high speed interface the high speed expansion ports and the low speed interface are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as a display coupled to the high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In some implementations the memory is a volatile memory unit or units. In some implementations the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In some implementations the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. Instructions can be stored in an information carrier. The instructions when executed by one or more processing devices for example processor perform one or more methods such as those described above. The instructions can also be stored by one or more storage devices such as computer or machine readable mediums for example the memory the storage device or memory on the processor .

The high speed interface manages bandwidth intensive operations for the computing device while the low speed interface manages lower bandwidth intensive operations. Such allocation of functions is an example only. In some implementations the high speed interface is coupled to the memory the display e.g. through a graphics processor or accelerator and to the high speed expansion ports which may accept various expansion cards not shown . In the implementations the low speed interface is coupled to the storage device and the low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. In addition it may be implemented in a personal computer such as a laptop computer . It may also be implemented as part of a rack server system . Alternatively components from the computing device may be combined with other components in a mobile device not shown such as a mobile computing device . Each of such devices may contain one or more of the computing device and the mobile computing device and an entire system may be made up of multiple computing devices communicating with each other.

The mobile computing device includes a processor a memory an input output device such as a display a communication interface and a transceiver among other components. The mobile computing device may also be provided with a storage device such as a micro drive or other device to provide additional storage. Each of the processor the memory the display the communication interface and the transceiver are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the mobile computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide for example for coordination of the other components of the mobile computing device such as control of user interfaces applications run by the mobile computing device and wireless communication by the mobile computing device .

The processor may communicate with a user through a control interface and a display interface coupled to the display . The display may be for example a TFT Thin Film Transistor Liquid Crystal Display display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may provide communication with the processor so as to enable near area communication of the mobile computing device with other devices. The external interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the mobile computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. An expansion memory may also be provided and connected to the mobile computing device through an expansion interface which may include for example a SIMM Single In Line Memory Module card interface. The expansion memory may provide extra storage space for the mobile computing device or may also store applications or other information for the mobile computing device . Specifically the expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example the expansion memory may be provide as a security module for the mobile computing device and may be programmed with instructions that permit secure use of the mobile computing device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory non volatile random access memory as discussed below. In some implementations instructions are stored in an information carrier. that the instructions when executed by one or more processing devices for example processor perform one or more methods such as those described above. The instructions can also be stored by one or more storage devices such as one or more computer or machine readable mediums for example the memory the expansion memory or memory on the processor . In some implementations the instructions can be received in a propagated signal for example over the transceiver or the external interface .

The mobile computing device may communicate wirelessly through the communication interface which may include digital signal processing circuitry where necessary. The communication interface may provide for communications under various modes or protocols such as GSM voice calls Global System for Mobile communications SMS Short Message Service EMS Enhanced Messaging Service or MMS messaging Multimedia Messaging Service CDMA code division multiple access TDMA time division multiple access PDC Personal Digital Cellular WCDMA Wideband Code Division Multiple Access CDMA2000 or GPRS General Packet Radio Service among others. Such communication may occur for example through the transceiver using a radio frequency. In addition short range communication may occur such as using a Bluetooth Wi Fi or other such transceiver not shown . In addition a GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to the mobile computing device which may be used as appropriate by applications running on the mobile computing device .

The mobile computing device may also communicate audibly using an audio codec which may receive spoken information from a user and convert it to usable digital information. The audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of the mobile computing device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on the mobile computing device .

The mobile computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementations in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium and computer readable medium refer to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementations of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

In view of the structure functions and apparatus of the systems and methods described here in some implementations a system and method of developing real time Web applications for multiple platforms in a heterogeneous environment are provided. Having described certain implementations of methods and apparatus of developing real time Web applications it will now become apparent to one of skill in the art that other implementations incorporating the concepts of the disclosure may be used. Therefore the disclosure should not be limited to certain implementations but rather should be limited only by the spirit and scope of the following claims.

