---

title: System and method for evaluating malware detection rules
abstract: A malware detection rule is evaluated for effectiveness and accuracy. The detection rule defines criteria for distinguishing files having a characteristic of interest from other files lacking that characteristic, for instance, malicious files vs. benign files. The detection rule is applied to a set of unknown files. This produces a result set that contains files detected from among the set of unknown files as having the at least one characteristic of interest. Each file from the result set is compared to at least one file from a set of known files having the characteristic to produce a first measure of similarity, and to at least one file from a set of known files lacking the characteristic to produce a second measure of similarity. In response to the first measure of similarity exceeding a first similarity threshold, the detection rule is deemed effective. In response to the second measure of similarity exceeding a second similarity threshold, the detection rule is deemed inaccurate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09171155&OS=09171155&RS=09171155
owner: KASPERSKY LAB ZAO
number: 09171155
owner_city: Moscow
owner_country: RU
publication_date: 20140527
---
This application claims the benefit of Russian Federation Patent Application No. 2013143770 filed Sep. 30 2013 incorporated by reference herein.

The invention relates generally to information processing and communications technologies and more particularly to computer based technologies for assessing effectiveness and accuracy of detection rules applicable to detection of malware and other attributes found in sets of software objects.

The scourge of malicious software is growing every hour. Antivirus companies must promptly and adequately react to these arising threats but face many challenges. One such challenge involves striving for accuracy of malware detection. An adequate response to a threat involves the absence of false positives i.e. the response must neutralize the threat but must not adversely affect benign files or other objects.

A response to a threat can involve creating a rule for detection of such threat and for its subsequent elimination. A detection rule in a particular case can be represented by signatures heuristic rules or hash sums i.e. methods which allow to detect target files from the whole variety of researched files. Once a rule is created the rule is tested for absence of false activations. After the testing the rule begins to function on the user side quite often a rule can be also additionally tested at the stage of its active functioning on the user side.

U.S. Pat. No. 8 280 830 discloses a system for modifying a detection rule based on preliminary testing of a created rule on a collection of safe files and malicious files. But a collection of safe files and malicious files available to antivirus software manufacturers cannot cover the entire variety of files encountered by users therefore quite often feedback from the detection rule is used when it is already functioning on the user side. An antivirus application using a detection rule sends notices to developers specifying which files activated the rule and the developers analyze this information on their side. U.S. Pat. No. 8 356 354 discloses a system for issuing updates of antivirus databases one of the embodiments provides that the antivirus application sends information to developers specifying what files triggered the rule and that the received information is analyzed for false activations of the rule.

But even the combined use of a collection of safe files and malicious files with feedback from users cannot guarantee the effectiveness of a detection rule because the collection is incomplete and because it is not possible to test the rule on files which will appear in the future and also because not all users have antivirus software installed. Also a significant drawback of the feedback method used today is that generally the file s checksum or hash rather than the file itself is used for the feedback and if a file from the collection is even slightly different from the file which activated the rule the checksums or hashes will not match and false activation will not be detected.

The probability of false activations increases in the case when the detection rule is created not for one file but for a group of similar files. In general the larger the number of files for which the rule is being created the higher the probability of false activation. Many of the known approaches have failed to take this fact into account.

An effective and practical solution is therefore needed to evaluate malware detection rules while avoiding false positives.

As discussed above the problem of using over inclusive detection rules meaning that a malware detection rule detects not only a specific known piece of malware code but also variations of that code is the increased possibility of indicating false detections of malware from benign files. According to one aspect of the invention this risk is managed by permitting the use of detection rules that are over inclusive and potentially imperfect.

Aspects of the invention can be realized in a computing system that includes a processor data storage and input output devices including a network interface device and an operating system.

A method for analyzing effectiveness and accuracy of a malware detection rule according to one embodiment includes obtaining the detection rule by the computing system. This can be achieved by receiving a remotely generated detection rule or locally generating the detection rule based on sets of known malicious and benign files. The detection rule defines criteria for distinguishing malicious files having at least one characteristic of interest from benign files lacking the at least one characteristic of interest.

The computing system applies the detection rule to a set of unknown files. Prior to the applying of the detection rule the at least one characteristic of interest is initially undetermined for each file of the set of unknown files. As a result of the applying of the detection rule a result set is generated that contains files detected from among the set of unknown files as having the at least one characteristic of interest.

The computing system compares each file from the result set to at least one file from a set of known malicious files to produce a first measure of similarity. Each file from the result set is also compared to at least one file from a set of known benign files to produce a second measure of similarity. In response to the first measure of similarity exceeding a first similarity threshold the detection rule is deemed effective. In response to the second measure of similarity exceeding a second similarity threshold the detection rule is deemed inaccurate.

In a related aspect of the invention a system for analyzing effectiveness and accuracy of a malware detection rule is provided. The system includes computing hardware including a processor a data storage device and input output devices including a network interface device and a graphical user interface. The data storage device contains a set of unknown files to be analyzed for a presence of malware. The system further includes instructions executable on the computing hardware and stored in a non transitory storage medium which can be the data storage device or a separate device . When executed the instructions cause the computing hardware to implement an check module and an analysis module.

The check module is configured to apply a detection rule to each of the files in the set of unknown files with the detection rule being defined based on properties of known malicious files and on properties of known benign files. The detection rule defines criteria for distinguishing between the malicious files and the benign files. As a result of application of the detection rule the check module is configured to produce a result set that contains files detected from among the set of unknown files as having characteristics associated with the known malicious files.

The analysis module configured to compare each file from the result set to at least one file from a set of the known malicious files to produce a first measure of similarity and to at least one file from a set of the known benign files to produce a second measure of similarity. In response to the first measure of similarity exceeding a first similarity threshold the detection rule is deemed effective and in response to the second measure of similarity exceeding a second similarity threshold the detection rule is deemed inaccurate.

In certain embodiments the check module can take various actions to either trust the result set as having correctly ascertained the presence of malware in the set of unknown files or perform further malware analysis on the result set to determine with greater confidence whether any items of the result set represent false positive malware determinations.

A variety of other advantages will become apparent from the following detailed description of the preferred embodiments.

While the invention is amenable to various modifications and alternative forms specifics thereof have been shown by way of example in the drawings and will be described in detail. It should be understood however that the intention is not to limit the invention to the particular embodiments described. On the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

Aspects of the present invention can be implemented as part of a computer system. The computer system can be one physical machine or can be distributed among multiple physical machines such as by role or function or by process thread in the case of a cloud computing distributed model. In various embodiments aspects of the invention can be configured to run in virtual machines that in turn are executed on one or more physical machines. It will be understood by persons of skill in the art that features of the invention may be realized by a variety of different suitable machine implementations.

The complete set of files in one embodiment includes all of the file types on a computer system. In related embodiments set of files is limited to files of a certain type or to files stored in a certain location or path in the computer system s file system.

A subset of known files is identified in this set. In this context the known files are files for which a characteristic of interest e.g. maliciousness has been determined. The files of the set which do not belong to the subset of known files are considered to be the unknown files subset . Using the known characteristic of interest the subset of known files is divided into at least two subsets subset A and subset B . This separation is performed at block . For example such subsets can be subsets of malicious and benign files the distinguishing characteristic being the maliciousness e.g. risk score associated with each file . For a characteristic that has a range of values e.g. a numerical score having many potential values one or more criteria are applied to categorize each score into a corresponding binary value e.g. using a thresholding comparison according to one type of embodiment so that the known files can be categorized into subset A and subset B .

In related embodiments the distinguishing characteristic differentiates between executable and non executable files the criterion being the method of use script files and portable executable PE format files the criterion being the file type etc. Also for separation purposes multiple characteristics can be used and a subset can be grouped based on files meeting criteria requiring multiple characteristics at the same time e.g. executable files that are malicious contrasted with files that are benign or non executable .

From subset A of the known files subset a group of representative files is selected and for this group of representative files at a detection rule is created. The detection rule in one embodiment represents a logical mechanism that defines criteria e.g. in terms of a combination of file characteristics to distinguish relevant files i.e. those having the distinguishing characteristic s of interest from files that lack the distinguishing characteristic. Files from the unknown files subset are checked for meeting the criteria defined by the detection rule at . This checking is performed by the computer system operating under program control according to one embodiment.

Before recognizing a rule to be effective i.e. capable of identifying files meeting the detection criteria and accurate i.e. not returning false positives the rule is tested for these qualities according to aspects of the invention. Effectiveness of a detection rule is a performance measure representing the absence of errors of a first kind during the rule s operation accuracy of a detection rule means the absence of errors of a second kind. Errors of the first kind relate to failure of the detection rule to detect a file on which the detection criteria defined by the rule should have been activated. Errors of the second kind relate to satisfaction of the detection criteria of the rule by a file that should not have been activated. This testing is performed at by first applying the detection rule to files of the unknown files subset . This operation produces a result set of detected files.

The result set consists of files from the subset of unknown files that satisfied the criteria of the detection rule. These result set files are separately identified from the remainder of unknown files subset . The files of the result set are used to determine the accuracy of the detection rule.

In order to perform this testing according to one embodiment properties of the files in the result set are obtained. In one embodiment for portable executable PE format files such properties include the file size the file image size the number of file sections the API application programming interface functions of the file the RVA Related Virtual Address of file sections the RVA of the entry point respective location of directory table objects frequency characteristics of the symbols including printed symbols the set of file strings and their quantity the information entropy of the start and the end of the section the virtual size of the section the physical size of the section the compiler used to create the file the subsystem type NATIVE WINDOWS GUI WINDOWS CUI OS2 CUI POSIX CUI NATIVE WINDOWS WINDOWS CE GUI the properties of the file from the COFF Common Object File Format header the location of directory table objects by file sections etc. In a related embodiment the file properties common among the files of the result set are represented in the form of a differentiating rule which is different from the detection rule being evaluated.

In one embodiment the obtained properties are used to determine if the detection rule is effective by checking if the properties of the result set files are similar to one or more files of subset A . Also the properties are used to determine if the detection rule is accurate by checking if the result set files are dissimilar from the files of subset B . In so doing a further assessment can be made as to the uniformity among the files of the result set.

Accordingly the result set files are compared to at least one file from subset A at in one embodiment such a file from subset A can be one of the files based upon which the detection rule was created. In another embodiment the one or more files from subset A used for the file comparison is different from the file or files used to create the detection rule. In a related embodiment multiple comparisons are made to different files from subset A for each file of the result set. The files selected from subset A for this purpose can be specifically selected to represent a diversity of files i.e. files of various type or format files located in different paths in the file system files of various ages files corresponding to different application programs etc.

In one embodiment this comparison is made in order to a evaluate the uniformity of files which met the detection criteria defined by the detection rule and b to determine the similarity of the result set files to the files from subset A .

Then at the result set files are compared with the files from subset B in order to check for overlap if any between the result set files with files from subset B. One set or optionally different combinations of file properties are used to make these comparisons according to one embodiment. Also in a related embodiment the selected files from subset B to be checked against the result set are selected to be diverse in similar fashion to the files selected from subset A to be used for comparison to the result set.

If based on the results of the comparison the result set files are found to be similar to files from subset A and not similar to files from subset B the detection rule is recognized as being accurate as indicated at . If the result set files are not similar to the files from subset A or if the result set files are similar to the files from subset B the detection rule is recognized to be unreliable at Stage .

When being compared files are considered to be similar if the degree of similarity between the files exceeds a specified threshold. In one embodiment the degree of similarity between files is determined based on the degree of similarity between certain file properties with different file properties given different weights for the comparison. In one embodiment the degree of similarity between files is determined based on the degree of similarity between the data stored in the files.

In another embodiment the degree of similarity between the files is determined based on the degree of similarity between the files functionality. A log of calls for API functions of the operating system during file execution emulation can be used as a definition of the file s functionality.

Various measures of similarity can be used according to contemplated embodiments. The degree of similarity can be determined using Dice s distance for example. In other embodiments the degree of similarity is determined using one of the following distances Hamming Levenstein Jaccard. In a related embodiment combinations of distance measures can be applied.

In the exemplary system a clustering module is given access to the set of files . Clustering module is programmed or otherwise configured to perform the separation of the subset A and of the subset B from the set of files using one or more selected separation criteria e.g. known state of maliciousness etc. and in one embodiment collects the values or ranges of values of relevant file characteristics that are distinct among the files in each of the subsets A and B and respectively.

The separated file subsets are saved in file storage . Rule creation module is programmed or otherwise configured to generate a detection rule based on a group of files from subset A. In one embodiment the group of files is the entire subset A in another embodiment the group of files is a part of subset A. In the latter example the part of subset A can be N randomly selected files where N is a predefined limit.

The created rule is passed to the check module which is programmed or otherwise configured to apply the generated rule to each of the files in the subset of unknown files . Accordingly the check module produces a result set of files which were detected by the detection rule. In one embodiment the result set is passed to the clustering module which proceeds to save copies of the result set files in the file storage .

The analysis module is programmed or otherwise configured to compare the result set files with one or more of the files belonging to each of subset A and subset B which can include at least one file used in the creation of the detection rule in the first place. Then the analysis module checks the accuracy of the detection rule based on the performed comparison. If as a result of the comparison the result set files are found to be dissimilar to any file from subset B and similar to the files for which the detection rule was created the analysis module deems the detection rule to be accurate as well as effective.

In a related embodiment the clustering module is further used to extract file characteristics from the result set and to store those characteristics in file storage .

In another related embodiment the analysis module in order to compare files determines the degree of similarity between files based on the degree of similarity between file characteristics or on functionality consistent with the method described above.

The set of files involved in the checking of the rule includes a subset of malicious files and a subset of benign files. From the subset of malicious files i.e. subset A some files are selected for creation of a detection rule. For example this can be files from one family of malicious software files packaged by the same packager in this case the use of the particular packager is typical only for malicious files etc. The detection rule creation module creates a detection rule for the selected files. In one embodiment the detection rule creation module is operated by the antivirus service provider.

The detection rule is used in the operation of the antivirus module . The rule creation module sends to the antivirus module a rule for checking a subset of unknown files. The subset of unknown files can be stored in a local file storage device or can be distributed over remote storage units for example user personal computers. The antivirus module checks the subset of unknown files for meeting the detection criteria defined by the detection rule. The antivirus module sends to the clustering module information indicating the files which met the detection criteria. These are the result set files in the present example.

The clustering module separates the result set files and saves them in the file storage . The clustering module also extracts the characteristics of the separated files. Then the analysis module compares the result set files against one or more files from the malicious files subset determining the degrees of similarity of the characteristics of the files being compared.

In one embodiment such files are selected from the malicious files subset for comparison for which the detection rule was created. For the files being compared the analysis module calculates the degree of similarity of the selected characteristics if the degree of similarity exceeds a preset threshold the files are considered to be similar.

If all result set files are considered similar to the files from the malicious files subset the analysis module continues the comparison comparing the separated files to the benign files subset. In one such embodiment the combination of file characteristics used for comparison is different from the combination used when comparing the result set files with the files from the malicious files subset.

If as a result of the comparison none of the separated files is found to be similar to any file from the safe files subset the analysis module recognizes the detection rule being tested as accurate.

In a related aspect of the invention the system depicted in is used in connection with a malware detection technique in which rules are purposefully designed to be over inclusive meaning that a malware detection rule detects not only a specific known piece of malware code but also variations of that code. As discussed above the problem of using over inclusive detection rules is the increased possibility of indicating false detections of malware from benign files. Accordingly this aspect of the invention involves managing this risk by permitting detection rules that are over inclusive and potentially imperfect to be released to antivirus programs running on client computer systems belonging to users. Using a system according to the embodiments described above the files in the file system of each user s computer system are evaluated against the over inclusive detection rules.

On each user s computer system the result set produced by application of the detection rules is evaluated to determine the effectiveness and accuracy of the rule. This evaluation can be performed on the client side i.e. at the user s computer system as part of the operation of the antivirus application program at the antivirus service provider s side or by some combination thereof with certain processing being performed by an assigned party.

In response to the detection rule being found to be effective and accurate the result set will reflect files deemed malicious and protective action can be called for to secure the user s computer system from these files.

In response to the detection rule being found to be not effective but accurate in other words some malware is missed but no false positives were recorded the result set can be treated by protective action and the antivirus service provider can be notified that a more inclusive rule is to be generated.

In response to the detection rule being found to be effective but inaccurate the result set may be subjected to further analysis such as using emulation or other more computationally expensive technique to better ascertain the true risk associated with each item in the result set.

In response to the detection rule being found to be neither effective nor accurate the result set may be disregarded as being unreliable or alternatively in a more cautious approach the result set can be quarantined and subjected to further analysis to ensure the safety of those files. Also the antivirus service provider can be notified about the lack of effectiveness of the detection rule which will prompt the antivirus service provider to create a more inclusive or better rule.

The removable and non removable memory interfaces may couple the computer to disk drives such as SSD or rotational disk drives. These disk drives may provide further storage for various software applications such as the operating system application programs and other program modules . Further the disk drives may store other information such as program or application data . In various embodiments the disk drives store information that doesn t require the same low latencies as in other storage mediums. Further the operating system application program data program modules and program or application data may be the same information as that stored in the RAM in various embodiments mentioned above or it may be different data potentially derivative of the RAM stored data.

Further the removable non volatile memory interface may couple the computer to magnetic portable disk drives that utilize magnetic media such as the floppy disk Iomega Zip or Jazz or optical disk drives that utilize optical media for storage of computer readable media such as Blu Ray DVD R RW CD R RW and other similar formats. Still other embodiments utilize SSD or rotational disks housed in portable enclosures to increase the capacity of removable memory.

The computer may utilize the network interface to communicate with one or more remote computers over a local area network LAN or a wide area network WAN . The network interface may utilize a Network Interface Card NIC or other interface such as a modem to enable communication. The modem may enable communication over telephone lines coaxial fiber optic powerline or wirelessly. The remote computer may contain a similar hardware and software configuration or may have a memory that contains remote application programs that may provide additional computer readable instructions to the computer . In various embodiments the remote computer memory can be utilized to store information such as identified file information that may be later downloaded to local system memory . Further in various embodiments the remote computer may be an application server an administrative server client computers or a network appliance.

A user may enter information to the computer using input devices connected to the user input interface such as a mouse and keyboard . Additionally the input device may be a trackpad fingerprint scanner joystick barcode scanner media scanner or the like. The video interface may provide visual information to a display such as a monitor . The video interface may be an embedded interface or it may be a discrete interface. Further the computer may utilize a plurality of video interfaces network interfaces and removable and non removable interfaces in order to increase the flexibility in operation of the computer . Further various embodiments utilize several monitors and several video interfaces to vary the performance and capabilities of the computer . Other computer interfaces may be included in computer such as the output peripheral interface . This interface may be coupled to a printer or speakers or other peripherals to provide additional functionality to the computer .

Various alternative configurations and implementations of the computer are within the spirit of the invention. These variations may include without limitation additional interfaces coupled to the system bus such as universal serial bus USB printer port game port PCI bus PCI Express or integrations of the various components described above into chipset components such as the northbridge or southbridge. For example in various embodiments the processing unit may include an embedded memory controller not shown to enable more efficient transfer of data from the system memory than the system bus may provide.

Interconnect includes the memory data and control busses as well as the interface with peripherals e.g. PCI USB etc. Memory e.g. dynamic random access memory DRAM and non volatile memory such as flash memory i.e. electrically erasable read only memory EEPROM are interfaced with memory management device and interconnect via memory controller . This architecture can support direct memory access DMA by peripherals. I O devices including video and audio adapters disk storage external peripheral busses such as USB Bluetooth etc as well as network interface devices such as those communicating via Ethernet or Wi Fi interfaces are collectively represented as I O devices and networking which interface with interconnect via corresponding I O controllers .

On the software side a pre operating system pre OS environment which is executed at initial system start up and is responsible for initiating the boot up of the operating system. One traditional example of pre OS environment is a system basic input output system BIOS . In present day systems a unified extensible firmware interface UEFI is implemented. Pre OS environment described in greater detail below is responsible for initiating the launching of the operating system but also provides an execution environment for embedded applications according to certain aspects of the invention. Operating system provides a kernel that controls the hardware devices manages memory access for programs in memory coordinates tasks and facilitates multi tasking organizes data to be stored assigns memory space and other resources loads program binary code into memory initiates execution of the application program which then interacts with the user and with hardware devices and detects and responds to various defined interrupts. Also operating system provides device drivers and a variety of common services such as those that facilitate interfacing with peripherals and networking that provide abstraction for application programs so that the applications do not need to be responsible for handling the details of such common operations. Operating system additionally provides a graphical user interface GUI that facilitates interaction with the user via peripheral devices such as a monitor keyboard mouse microphone video camera touchscreen and the like.

Libraries include collections of program functions that provide further abstraction for application programs. These include shared libraries dynamic linked libraries DLLs for example. Libraries can be integral to the operating system or may be added on features or even remotely hosted. Libraries define an application program interface API through which a variety of function calls can be made by application programs to invoke the services provided by the operating system . Application programs are those programs that perform useful tasks for users beyond the tasks performed by lower level system programs that coordinate the basis operability of the computer system itself.

The embodiments above are intended to be illustrative and not limiting. Additional embodiments are within the claims. In addition although aspects of the present invention have been described with reference to particular embodiments those skilled in the art will recognize that changes can be made in form and detail without departing from the spirit and scope of the invention as defined by the claims.

Persons of ordinary skill in the relevant arts will recognize that the invention may comprise fewer features than illustrated in any individual embodiment described above. The embodiments described herein are not meant to be an exhaustive presentation of the ways in which the various features of the invention may be combined. Accordingly the embodiments are not mutually exclusive combinations of features rather the invention may comprise a combination of different individual features selected from different individual embodiments as understood by persons of ordinary skill in the art.

Any incorporation by reference of documents above is limited such that no subject matter is incorporated that is contrary to the explicit disclosure herein. Any incorporation by reference of documents above is further limited such that no claims that are included in the documents are incorporated by reference into the claims of the present application. The claims of any of the documents are however incorporated as part of the disclosure herein unless specifically excluded. Any incorporation by reference of documents above is yet further limited such that any definitions provided in the documents are not incorporated by reference herein unless expressly included herein.

For purposes of interpreting the claims for the present invention it is expressly intended that the provisions of Section 112 sixth paragraph of 35 U.S.C. are not to be invoked unless the specific terms means for or step for are recited in a claim.

