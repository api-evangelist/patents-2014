---

title: Policy management of deployment plans
abstract: A deployment system enables a developer to define a logical, multi-tier application blueprint that can be used to create and manage (e.g., redeploy, upgrade, backup, patch) multiple applications in a cloud infrastructure. The deployment system supports the use of nested policies to manage a deployment plan. Upon determining compliance to the nested policies, the application can be deployed according to an application blueprint, which means any needed VMs are provisioned from the cloud infrastructure, and application components and software services are installed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652211&OS=09652211&RS=09652211
owner: VMware, Inc.
number: 09652211
owner_city: Palo Alto
owner_country: US
publication_date: 20140626
---
 Infrastructure as a Service also commonly referred to as IaaS generally describes a suite of technologies provided by a service provider as an integrated solution to allow for elastic creation of a fully virtualized network and pooled computing platform sometimes referred to as cloud computing platform . Enterprises may use IaaS as a business internal organizational cloud computing platform sometimes referred to as a private cloud that gives an application developer access to infrastructure resources such as virtualized servers storage and networking resources. By providing ready access to the hardware resources required to run an application the cloud computing platform enables developers to build deploy and manage the lifecycle of a web application or any other type of networked application at a greater scale and at a faster pace than ever before.

One or more embodiments of the present disclosure provide a deployment system for deploying a multi tier application to a cloud computing environment. This deployment system enables a developer or application architect to create application blueprints. The application blueprints define the structure of the application enable the use of standardized application infrastructure components and specify installation dependencies and default configurations. The application blueprints define the topology for deployment in an infrastructure agnostic manner to be portable across different cloud computing environments.

Embodiments of the present disclosure provide a method for deploying an application. The method includes receiving a deployment plan comprising a nested object having a plurality of levels. The method further includes for each level retrieving a policy having a domain object that matches a current level of the nested object and determining a next level of the nested object until no next level exists. The method includes determining compliance of the deployment plan to the one or more retrieved policies and executing the deployment plan to deploy the application in a cloud environment responsive to determining compliance.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures. It is contemplated that elements disclosed in one embodiment may be beneficially utilized on other embodiments without specific recitation.

A developer of enterprise uses an application director which may be running in one or more VMs to orchestrate deployment of a multi tier application onto one of deployment environments provided by a cloud computing platform provider . As illustrated application director includes the following software modules a topology generator a deployment plan generator and a deployment director . Topology generator generates a blueprint that specifies a logical topology of the application to be deployed. Blueprint generally captures the structure of an application as a collection of application components executing on virtual computing resources.

For example blueprint generated by application director for an online store application may specify a web application e.g. in the form of a Java web application archive or WAR file comprising dynamic web pages static web pages Java servlets Java classes and other property configuration and resources files that make up a Java web application executing on an application server e.g. Apache Tomcat application server and that uses as a database e.g. MongoDB as a data store. It is recognized that the term application is used herein to generally refer to a logical deployment unit comprised of application packages and their dependent middleware and operating systems. As such in the example described above the term application may refer to the entire online store application including application server and database components rather than just the application logic of the web application itself.

Blueprint may be assembled out of items from a catalog which is a listing of available virtual computing resources e.g. VMs networking storage that may be provisioned from cloud computing platform provider and available application components e.g. software services scripts code components application specific packages that may be installed on the provisioned virtual computing resources. Catalog may be pre populated and customized by an administrator e.g. IT or system administrator that enters in specifications configurations properties and other details about each item in catalog . Blueprint may define one or more dependencies between application components to indicate an installation order of the application components during deployment. For example since a load balancer usually cannot be configured until a web application is up and running developer may specify a dependency from an Apache service to an application code package.

Deployment plan generator of application director generates a deployment plan based on blueprint that includes deployment settings for blueprint e.g. virtual computing resources cluster size CPU memory networks and an execution plan of tasks having a specified order in which virtual computing resources are provisioned and application components are installed configured and started. Deployment plan provides an IT administrator with a process oriented view of blueprint that indicates discrete steps to be performed to deploy application . Different deployment plans may be generated from a single blueprint to test prototypes e.g. new application versions to scale up and scale down deployments or deploy application to different deployment environments e.g. testing staging production .

Deployment director of application director executes deployment plan by communicating with cloud computing platform provider via a cloud interface to provision and configure VMs in a deployment environment as specified by deployment plan . Cloud interface provides a communication abstraction layer by which application director may communicate with a heterogeneous mixture of cloud provider and deployment environments . After application has been deployed application director may be utilized to monitor and modify e.g. scale the deployment.

According to embodiments of the present disclosure deployment director of application director is configured to determine compliance of deployment plan to one or more policies . A policy is a statement of declaration that controls designated aspects of a target system i.e. deployment of an application. In one embodiment policies may be specified by a user e.g. administrator and enforced on other users e.g. developer when those other users deploy an application into one of deployment environments provided by a cloud computing platform provider . Deployment director may generate a compliance view user interface that lists all policies applicable to a target deployment and an indication of whether the target deployment complies with each policy. While embodiments describe identify policies that are applicable to a deployment of an application deployment director may traverses a data model which reflects the hierarchy associated with any action i.e. deployment and retrieves any policies matching that level of the hierarchy.

In one embodiment policies may be attachable to various points of interest propagatable through a hierarchy of objects scannable and reportable to assess a system s compliance against the policy remediable e.g. mutate the target system to make the system compliant and exceptionable i.e. approval driven policy exceptions . For example a blacklist policy that prohibits a deployment from having a particular software service as part of its topology may be attached to a deployment hierarchy level associated with deployment environments. In another example a maximum memory policy specifying that no node in a deployment may have more than a particular amount e.g. 1024 MB of RAM may include a remedial action that modifies i.e. decreases the allocated RAM for any violating node in the deployment to make the target system compliant. In yet another example a maximum VM count policy specifying that no deployment may exceed a particular number of VMs may permit exceptions to the policy in response to approval e.g. granted by an administrator that a violating deployment can still proceed despite having excess VMs. It is recognized that these are merely illustrative examples and other types of policies may be used.

In step in response to user inputs e.g. from developer application director generates a blueprint for an application to be deployed that includes a logical topology of virtual computing resources and application components for supporting the application. In one implementation developer may utilize a graphical user interface provided by application director to assemble and arrange items from catalog into a topology that represents virtual computing resources and application components for supporting execution of application .

In step application director generates a deployment plan based on blueprint to deploy application in a specific cloud environment e.g. deployment environments . Step may be carried out in response to user inputs e.g. from developer that initiate a deployment process for application on a specified deployment environment. From an application blueprint a user may generate multiple deployment plans having configurations customized for a variety of deployment environments and or cloud providers for example for testing prototypes deploying to staging environments or upgrading existing deployments. While blueprints provide a component oriented view of the application topology deployment plans provide a step oriented view of the application topology defined in blueprint that depicts time dependencies between tasks to deploy the application components in a particular order. Deployment plans provide settings such as cloud templates networks and application component properties allowed for use in specific deployment environments.

In step application director determines compliance of deployment plan to one or more policies . In one embodiment a deployment may be characterized as a nested object and a policy may target a specific level within that nested object. Using the example system of a deployment generally involves a particular deployment plan first level which specifies a particular deployment environment second level of a particular cloud computing platform provider third level . To identify policies that are applicable to a deployment application director traverses a data model which reflects the hierarchy associated with a deployment and retrieves any policies matching that level of the hierarchy. Operations for determining policy compliance are described in further detail in .

In step application director executes deployment plan responsive to determining compliance of the deployment plan to policies . In some embodiments a policy may have a critical priority which causes a target deployment plan to not be executed in case of non compliance or a non critical priority e.g. warning priority which permits a deployment plan to be executed anyway but with accompanying error messages and or warning indications.

At step application director generates a deployment object associated with a deployment operation. It is recognized that deployment object may be obtained as part of step of method described earlier. Deployment object is a data object that encapsulates data associated with an application blueprint and data associated with a deployment plan . In one embodiment deployment object is a nested object having a plurality of levels that represent different aspects or domains of the deployment operation. Deployment object may be comprised of a plurality of domain objects which are data objects that encapsulate data associated with a particular domain.

In the example shown in deployment object includes a first domain object associated with deployment plan a second domain object associated with deployment environments and a third domain object associated with cloud providers . These domain objects to encapsulate data associated with each deployment related domain. For example the deployment plan domain object e.g. may contain plan related data such as a topology for a three tier application to be deployed a listing of applications components to be installed and on how many nodes e.g. VMs . The deployment environment domain object e.g. may contain environment related data properties and parameters such as an indication of the type of deployment environment e.g. production development . The cloud provider data object e.g. may contain provider related data such as login credentials authentication keys and cloud gateway addresses.

To determine which policies are applicable to the deployment application director retrieves policies while traversing through the hierarchy of domain objects of deployment object starting with a first domain object e.g. object . In one embodiment at step application director retrieves any policies specifying a deployment domain that match a current domain object. For example as shown in on a first pass application director retrieves policies P and P that specify the domain of deployment plan. A policy may target a particular deployment domain in order to control the deployment based on data from that domain. For example a policy P may be a maximum memory policy i.e. that in any deployment no node may have more than particular amount e.g. 1024 MB of RAM. To enforce such a policy P data would be needed from deployment plan i.e. from the deployment plan domain. In another example a policy P may be a maximum VM count policy i.e. that no deployment may exceed a particular number of VMs.

Responsive to retrieving the policies application director traverses to a next level of deployment object . In one embodiment at step application director determines a parent of the current domain object. In one implementation each domain object may be configured to support a class interface for determining a next level i.e. parent of that domain object . To determine the parent of a current domain object application director may invoke a function e.g. getParent of the instance of the current domain object and obtain handle to the parent. In the example in application director may determine that the parent of deployment plan object is deployment environment object .

Responsive to determining that a parent object exists for the current domain object at step application director proceeds to set the current domain object to be the parent. Application director may proceed to retrieve policies that match that the new current domain object e.g. step and determine a next level to domain object e.g. step until application director determines no next level exists.

In the example in application director sets the current domain object to be deployment environment and retrieves any policies specifying deployment environment as the domain. Specifically application director retrieves policies P P and P having a domain that matches the current domain object of deployment environment. As with the policies P and P policies P P and P control aspects of the deployment except in this case based on data from the deployment environment domain. For example policy P may be a blacklist service policy that prohibits a multi tier application having a particular software service as part of its topology from deploying in a particular type of deployment environment. Such policies may be useful in enforcing software licensing restrictions between production and development deployment environments. To enforce such a policy data would be needed from a deployment environment object e.g. indicating the type of deployment environment has been specified for this deployment.

Continuing with this example application director may next determines a parent of deployment environment object is cloud provider object e.g. by invoking getParent on the instance of object and sets the current domain object as cloud provider object . Application director retrieves policies P and P having a domain that matches the current domain of cloud provider. 

Referring back to at step application director may determine that no parent object exists for the current domain object. For example when application director attempts to determine a parent of cloud provider object no parent object is found as this example hierarchy ends at the cloud provider level. At this point application director has gathered together a plurality of policies P P P P P P and P.

At step responsive to determining that no parent object exists for the current domain object application director executes the plurality of retrieved policies associated with the deployment. In one embodiment a policy may include or may be embodied as a script comprising program code that when executed determines a state of compliance using data from deployment object as a payload. In one implementation a policy may comprise JavaScript program code configured to determine a state of compliance of deployment object . An example policy is shown as pseudo code in Table 1 below.

In some embodiments a policy may include one or more properties which are input parameters used by script in determining compliance. Properties enable a script to be written in a generalized manner. A user may create an instance of a policy and specify a particular property value for that instance. For example a user may create an instance of a generalized maximum memory policy that specifies a value for a property max mem to be 1024 . In the example policy shown in Table 1 properties are declared for a minimum number of CPUs var min cpu count and a maximum number of CPUs var max cpu count . For simplicity of explanation policies and instances of policies may be referred to interchangeably.

In one embodiment application director executes the plurality of policies in a sandbox environment with limited access to the execution environment except for deployment object i.e. the payload. In one implementation policies may be embodied as program code written in a scripting language e.g. JavaScript and are executed by an application director software module implemented in a different programming language Java . In such implementations application director may use a framework configured to support embedding scripts such as policies into its Java source code and providing access to Java objects e.g. deployment object configured to be exposed to policies . One example framework for supporting other scripting languages may be found in Java Specification Request JSR describing scripting for the Java platform.

At step application director determines whether the deployment plan is compliant with all of the plurality of policies . In one embodiment execution of a policy may generate an indication i.e. COMPLIANT or NON COMPLIANT of whether the deployment plan is compliant with that policy. The indications from executing all of the plurality of policies may be aggregated and use to consider whether compliance has been determined. If so application director may proceed to execute the deployment as in step of method described earlier. Otherwise at step application director may raise an error indicating the deployment plan does not comply with at least one of the plurality of policies associated with the deployment plan. In some embodiments the error may include one or more error messages generated by execution of policies . The generated error messages may be displayed in a Compliance View graphical user interface provided by application director . In other embodiments policies may define one or more remedial actions to be performed in response to a policy violation such as uninstalling a blacklisted software service or notifying an administrator of the policy violation.

While the particular embodiments are described herein determining compliance of a deployment plan to one or more policies it should be noted that embodiments may be extended to determine compliance of other data objects encapsulating deployment related data. In one instance embodiments may be extended to support policies for an upgrade plan for an existing deployment by simply defining a new hierarchy of domain objects corresponding to an upgrade plan. For example the ne nested data object may include a hierarchy comprised of an upgrade plan domain object and a deployment environment domain object but not a cloud provider domain object . Accordingly embodiments of the present disclosure provide a technique for defining nested policies in a system based on a domain object reference without having to change the underlying framework that executes the policies.

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

