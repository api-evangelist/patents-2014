---

title: Protecting browser-viewed content from piracy
abstract: A content server provides a browser of a client with encrypted content and with obfuscated browser-executable code for decrypting and displaying the content within the browser. Both the encrypted content and the obfuscated browser-executable code are generated based at least in part on an identity of the user requesting the content, and thus are different from encrypted content and obfuscated browser-executable code provided to other users. Further, in one embodiment the browser-executable code provided by the server changes periodically, such as weekly, thereby rendering ineffective any malicious software tools that obtain decrypted content by calling expected functions of the code. In one embodiment, the obfuscated browser-executable code for a user is pre-computed before that user makes a request for content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09124560&OS=09124560&RS=09124560
owner: Google Inc.
number: 09124560
owner_city: Mountain View
owner_country: US
publication_date: 20140702
---
This application is a continuation of U.S. patent application Ser. No. 12 958 331 filed on Dec. 1 2010 which claims the benefit of Provisional Application No. 61 266 367 filed on Dec. 3 2009 both of which are hereby incorporated herein by reference.

The disclosure generally relates to protection of digital content and in particular to securing access to digital content viewed within a web browser.

More and more content such as printed documents e.g. books magazines and newsletters video audio and the like is being made available in digital form. One form of digital distribution being increasingly employed hereinafter referred to as web based viewing involves a content server providing portions of the content to a client device with the client viewing the provided content within a web browser rather than locally storing an entire file representing the content and viewing it within a dedicated local application. This form of digital distribution has the advantage of allowing a user to access content from any client device having a web browser rather than being limited to a client device on which the content has been locally stored.

However regardless of the particular form of digital distribution that is employed the ease with which digital content can be copied and disseminated over computer networks can be problematic for the producers of the content who do not wish for the content to be distributed without their consent and control. For example publishers of digital content such as books may wish to make the content available for viewing contingent on a prior purchase and consequently wish to avoid allowing the content to become readily available to those who have not purchased it. Without the ability to prevent widescale automated duplication of the content such publishers are often hesitant to allow their content to be made electronically available in the first place. One conventional approach to the problem of electronic copying is traditional digital rights management. However such an approach requires writing software that includes hardware and or operating system specific code which is not easily portable to different types of client devices and further requires the local installation of software on each client device rather than permitting viewing through a browser already installed on the client device.

Web based viewing of digital content does not involve downloading a single easily duplicatable file containing the content but rather relies on the browser to request and display the content in units such as individual pages of a printed publication. However it is possible for one with sufficient technical knowledge to create a downloading application that employs the same application programming interface API as the browser to request the content. Such a downloading application can then request each unit of content from the server using the browser API and assemble the resulting content into a single unencrypted file which may then be freely disseminated without the consent or control of the content producer. Currently there are no effective mechanisms to prevent such downloading of content made available for web based viewing.

The difficulties described above are addressed by a method computer and computer program product that encrypt content in a user specific manner and provide decryption capability via separate browser executable code the interface of which is varied periodically at a content server. More specifically the content server provides a browser of a client with encrypted content and with obfuscated browser executable code for decrypting and displaying the content within the browser. Both the encrypted content and the obfuscated browser executable code are generated based at least in part on an identity of the user requesting the content and thus are different from encrypted content and obfuscated browser executable code provided to other users. Further in one embodiment the browser executable code provided by the server changes periodically such as weekly thereby rendering ineffective any malicious software tools that obtain decrypted content by calling expected functions of the code. In one embodiment the obfuscated browser executable code for a user is pre computed before that user makes a request for content.

In one embodiment a computer implemented method of preventing unauthorized redistribution of content provided to a browser of a client device comprises receiving a request for content from a user the request including an identifier of the user. The method further comprises generating an obfuscated version of browser executable code stored in a code repository the generating of the obfuscated version based at least in part on the identifier the obfuscated version being functionally equivalent to the browser executable code and encrypting the content based at least in part on the identifier. The method additionally comprises providing the obfuscated version of the browser executable code and the encrypted content to a browser of a client device. The browser executable code when executed in the browser causes decryption of the content and display of the content within the browser.

The features and advantages described in the specification are not all inclusive and in particular many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter.

The figures depict embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

In general a client presents digital content to a user such as displaying pages of a digital book or playing audio or video. More specifically the digital content is stored on the content server and the client communicates with the content server to obtain both the content in encrypted form and the code required to decrypt and present it to the user within a browser . Both the content and the code are modified from their original forms according to the identity of the particular user.

A client is a computer such as a personal computer laptop computer personal digital assistant mobile phone or more generally any device connected to the network . The client executes a web browser such as MICROSOFT INTERNET EXPLORER MOZILLA FIREFOX or GOOGLE CHROME that allows the user to retrieve and be presented with content from the content server via the network .

The content server is a computer system used to serve digital content such as digitized printed publications audio or video to the client . The content server stores or has access to the digital content and in response to a user request for a unit of content provides to the client a version of the unit of content that is encrypted according to the user s identity. The content server further provides the client with browser executable code such as code written in a browser scripting language such as JAVASCRIPT used to decrypt the unit of content and to present it within the browser to the user. The content server also modifies the code according to the user s identity such as by using a code obfuscation algorithm and providing the user identity as a parameter to the algorithm.

The network represents the communication pathways between the clients and the content server . In one embodiment the network uses standard Internet communications technologies and or protocols. Thus the network can include links using technologies such as Ethernet 802.11 integrated services digital network ISDN asynchronous transfer mode ATM etc. Similarly the networking protocols used on the network can include the transmission control protocol Internet protocol TCP IP the hypertext transport protocol HTTP the simple mail transfer protocol SMTP the file transfer protocol FTP etc. The data exchanged over the network can be represented using technologies and or formats including the hypertext markup language HTML the extensible markup language XML etc. In addition all or some links can be encrypted using conventional encryption technologies such as the secure sockets layer SSL Secure HTTP HTTPS and or virtual private networks VPNs . In another embodiment the entities can use custom and or dedicated data communications technologies instead of or in addition to the ones described above.

The entities shown in are implemented using one or more computers or digital devices collectively referred to simply as computers. is a high level block diagram illustrating an example of a computer such as a client or content server for use in the computing environment shown in according to one embodiment. Illustrated are at least one processor coupled to a chipset . Also coupled to the chipset are a memory a storage device a keyboard a graphics adapter a pointing device and a network adapter . A display is coupled to the graphics adapter . In one embodiment the functionality of the chipset is provided by a memory controller hub and an I O controller hub . In another embodiment the memory is coupled directly to the processor instead of the chipset .

The storage device is any computer readable storage medium such as a hard drive compact disk read only memory CD ROM DVD or a solid state memory device. The memory holds instructions and data used by the processor . The pointing device may be a mouse track ball or other type of pointing device and is used in combination with the keyboard to input data into the computer . The graphics adapter displays images and other information on the display . The network adapter couples the computer system to a local or wide area network.

As is known in the art a computer can have different and or other components than those shown in . In addition the computer can lack certain illustrated components. In one embodiment a computer acting as a server may lack a keyboard pointing device graphics adapter and or display . Moreover the storage device can be local and or remote from the computer such as embodied within a storage area network SAN .

As is known in the art the computer is adapted to execute computer program modules for providing functionality described herein. As used herein the term module refers to computer program logic utilized to provide the specified functionality. Thus a module can be implemented in hardware firmware and or software. In one embodiment program modules are stored on the storage device loaded into the memory and executed by the processor .

Embodiments of the entities described herein can include other and or different modules than the ones described here. In addition the functionality attributed to the modules can be performed by other or different modules in other embodiments. Moreover this description occasionally omits the term module for purposes of clarity and convenience.

The content repository stores the various items of content such as digital publications e.g. books magazines newspapers etc. audio and video that are requested by and provided to the various clients . In one embodiment the content repository stores only one type of content e.g. printed publications in other embodiments it contains a plurality of types of content e.g. both printed publications and video . In one embodiment a given item of content such as a particular digitized book is stored so that the particular units requested by a user may easily be retrieved. For example a digitized book can be stored as a set of individual pages either as separate files or as a single file for which the starting locations of individual pages are noted either in an internal index within the file or within a global index associated with multiple files. Although the content repository is depicted in as being located on the content server it could equally be located on a different computer accessible to the content server or it could be partitioned across multiple computers such as multiple content servers.

The user data repository stores data pertaining to the various users who have previously registered to be provided content by the content server . For example in one embodiment the user data repository stores a unique identifier for each user of the system and with it associates information about the user such as the user s username and password an encryption key for encrypting content for that user and a decryption key for decrypting the encrypted content i.e. the inverse of the encryption key . The encryption and decryption keys can be distinct public and private keys of a public key cryptographic system and or they can be implemented with a single secret key of a symmetric key cryptographic system.

The code repository stores base i.e. not yet modified browser executable code such as JAVASCRIPT code that has the functionality to decrypt and display encrypted content provided by the content server to a client . Before the base browser executable code is provided to a user it is first modified to be specific to that user as described below. Additionally the base browser executable code is altered at periodic intervals such as once per week to increase the difficulty of writing a malicious general purpose tool that extracts data from the browser executable code for an arbitrary user. One example is to alter the method signatures e.g. method names and number order and types of the method parameters of the code. For example the method names or number of parameters can be altered by someone with access to the content server such as an administrator programmer or other employee of the organization operating the content server . Such modifications are not difficult to make yet thwart the attempts of downloading programs that attempt to copy browser viewed content by making calls to the browser executable code to decrypt provided content since the expected browser executable code API has effectively been altered. Other alterations that can alternatively and or additionally be employed include reorganizing the code adding new code deleting existing code or changing the obfuscation algorithm. Such alterations can be automated so that they can be performed automatically on a scheduled basis.

The code personalization module transforms the base browser executable code from the code repository into a form personalized for a particular user. The base browser executable code is personalized to the particular user by first inserting into a known location of the base browser code the decryption key from the user data repository that corresponds to the identity of the user. For example the known location could be the value of a variable of a known name. The code is further personalized to the user by then passing to an obfuscation algorithm such as that of an available tool such as the Closure Compiler utility for JAVASCRIPT provided by GOOGLE or a custom algorithm the resulting code which obfuscates the code based on the user identity.

Code obfuscation may be performed in different ways in different embodiments and results in an obfuscated version of the browser executable code that remains functionally equivalent to the base browser executable code in that it performs the same operations despite the change in the form of the code. However the obfuscation makes it more difficult for an attacker to formulate a general technique for extracting useful data such as the decryption key from the code. For example in one embodiment application of the obfuscation algorithm results in renaming of the lexical code units such as function and variable names thereby also altering the size of the code but the code still performs equivalent actions. In another embodiment the obfuscation encodes the decryption key as a series of expressions each expression evaluating to a Boolean value. For example the first bit of the key could be specified using code expression key 0 1 5 the second bit with expression key 1 4 2 5 3.7 3.6 and so forth. Such expressions can be made arbitrarily complex. The various expressions can be chosen based on the user identity rather than being fixed e.g. by selecting an expression from some set of expressions based on the user identity. Thus for example for one user key 0 could be the result of the expression 1 5 as above for another user it could be result of the expression 1.2 2.5 6

In the above example it is assumed that the names round1 round2 etc. will be changed by the obfuscation algorithm so that the correspondence between functions and rounds is not apparent based on the names of the functions. As above each expression can be selected based on the user identity. In one embodiment these obfuscation techniques can be combined such as by representing the key using the series of Boolean producing expressions and then using a utility such as Closure Compiler to rename the lexical code units.

Although the insertion of the user specific decryption key and the code obfuscation are described above as two separate and distinct steps it is appreciated that they could also be accomplished together. For example rather than placing the literal value of the key into the base browser executable code and then altering the code to represent the key as a series of expressions that evaluate to Boolean values the series of expressions could first be determined and then inserted into the code in a location associated with the key.

The content encryption module encrypts a given unit of content according to the identity of the requesting user. Specifically the content encryption module obtains an encryption key corresponding to the user s identity from the user data repository retrieves unit of content from the content repository and encrypts the unit using the encryption key.

In some embodiments the content server includes user specific content repository which stores the obfuscated forms of the base browser executable code and or encrypted units of content. This allows the obfuscation and or encryption to be performed in a pre computation phase before the associated user has made a request for content and the results retrieved from the user specific content repository at runtime. Thus the computation of the obfuscated form is not responsive to receipt of a user request for content but rather is independent of it and prior to it. This pre computation results in improved runtime performance. In one embodiment in order to reduce required storage space some users are assigned the same version of obfuscated code. For example some fixed number of obfuscated versions such as 1000 can be computed with users being assigned one of the versions based on their identities e.g. a user being assigned one of the obfuscated versions having an index corresponding to the user ID modulo 1000. This makes it highly unlikely that a given two users will share the same obfuscated version without requiring every user to have his or her own version.

The content server then receives an initial request for content from the browser of a client such as a first request to view a particular book. Such a request might be triggered for example by the user clicking on a thumbnail image of one of the books to which he or she has access.

If the user does in fact have access to the requested item of content the content server then provides initial content to the client the initial content including additional information related to the content such as HTML code. For example in the case of book content the additional information could include HTML layout code for positioning and displaying the individual pages of the book content including general information such as the book title and author. Further the additional information includes a reference to external browser executable code used to decrypt and display the encrypted content. In one embodiment the reference is a tag within the provided HTML that references external script content such as JAVASCRIPT.

Since the browser executable code is external separate from the provided HTML page used to display the content upon parsing the HTML the browser on the client automatically requests the browser executable code from the content server . The content server then receives the request and provides the base browser executable code from the code repository in a user specific form modified according to the user. Thus the code is provided by the content server without an explicit request for it from the user. In one embodiment for example the content server inserts a decryption key for decrypting the encrypted content provided in step e.g. as a data variable within the code. This decryption key corresponds to the user specific encryption key and is therefore likewise user specific.

The content server then obfuscates the browser executable code using a code obfuscation algorithm passing the identity of the user to the algorithm as a parameter. In an embodiment that precomputes the user specific browser code the above operations can be performed during a pre computation phase and the result merely read from the user specific content repository in response to the client request for browser code. Some code obfuscation techniques such as those of the Closure Compiler algorithm result in renaming of the lexical code units such as function and variable names. This means that both the name of the variable associated with the key and the size of the browser executable code and thus the location of the decryption key within the code vary between different users making it more difficult to extract the decryption key without executing the browser code. More generally the use of obfuscation vastly increases the difficulty of writing a general purpose tool to circumvent content protections and decrypt content for an arbitrary user.

When the browser receives this obfuscated browser code it then executes it the execution causing extraction of the decryption key from the body of the code. For example execution of the code key 0 1 5 from the above example would cause the first bit of the key to be set to the value 0 since the expression 1 5 is false.

With the browser executable code obtained the content server at some later point receives a request for a unit of content from the client . For example the client could request a particular page of a digital image of a printed document such as book e.g. in response to the user using the browser to scroll the image of the document to a page not yet obtained by the client. The request includes an identifier of the user making the request such as the user ID determined during authentication an optional signature indicating that the request was issued by the browser executable code received from the content server and an identifier of the item of content and unit thereof. In one embodiment the signature is the requested URL encrypted with the decryption key extracted from the browser executable code. In one embodiment the request is made via the browser executable code using an object such as one of type XMLHTTPRequest which allows dynamic updating of an existing web page with content. The specific request can be specified with a URL query string such as userID w83kss89z2 sig 9DFF28BBA contentID eWhWAAAAMAAJ page 72.

In embodiments in which a signature is employed the content server verifies that the signature corresponds to the user s browser executable code by examining the user data repository e.g. by encrypting the requested URL with the decryption key and determining whether it matches the signature accompanying the request thereby ensuring that the request for content originates from the browser executable code as opposed to a malicious tool. If the signature is correct then the content server provides the requested unit of content. Before providing the unit of content the content server first encrypts the content in accordance with the user s identity e.g. by using an encryption key from the user data repository that is associated with the user s identity. The encrypted content is then provided to the client . The client may then immediately perform the below described steps to obtain the decrypted content. Alternatively and or additionally it may store the encrypted content and the browser executable code offline e.g. cached locally on the client and perform the below steps at some later point in time.

The received browser executable code of the browser then applies the previously extracted decryption key to decrypt the encrypted content and displays the decrypted content within the browser . Since the content is encrypted and decrypted only at time of display within the browser reading the browser cache will not enable obtaining of the actual content in the absence of the browser executable code.

The present invention has been described in particular detail with respect to one possible embodiment. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. First the particular naming of the components and variables capitalization of terms the attributes data structures or any other programming or structural aspect is not mandatory or significant and the mechanisms that implement the invention or its features may have different names formats or protocols. Also the particular division of functionality between the various system components described herein is merely exemplary and not mandatory functions performed by a single system component may instead be performed by multiple components and functions performed by multiple components may instead performed by a single component.

Some portions of above description present the features of the present invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. These operations while described functionally or logically are understood to be implemented by computer programs. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules or by functional names without loss of generality.

Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system memories or registers or other such information storage transmission or display devices.

Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software firmware or hardware and when embodied in software could be downloaded to reside on and be operated from different platforms used by real time network operating systems.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of computer readable storage medium suitable for storing electronic instructions and each coupled to a computer system bus. Furthermore the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

The algorithms and operations presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may also be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will be apparent to those of skill in the art along with equivalent variations. In addition the present invention is not described with reference to any particular programming language. It is appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references to specific languages are provided for invention of enablement and best mode of the present invention.

The present invention is well suited to a wide variety of computer network systems over numerous topologies. Within this field the configuration and management of large networks comprise storage devices and computers that are communicatively coupled to dissimilar computers and storage devices over a network such as the Internet.

Finally it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

