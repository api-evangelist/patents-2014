---

title: Methods for providing per-connection routing in a virtual environment and devices thereof
abstract: A method, non-transitory computer readable medium, and host device that receives, at a routing interface, a request from a transmission control protocol (TCP) connection with a stateful network device. A media access control (MAC) address of the stateful network device is determined and the MAC address and the routing interface are stored as associated with information for the TCP connection in a per-connection routing table. The request is sent to one of a plurality of virtual machines, a response is received from the one of the virtual machines, and the MAC address and routing interface are retrieved from the per-connection routing table based on a comparison of information included in the response to the information for the TCP connection. The response is sent to the stateful network device using the retrieved MAC address and routing interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509600&OS=09509600&RS=09509600
owner: F5 Networks, Inc.
number: 09509600
owner_city: Seattle
owner_country: US
publication_date: 20140806
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 862 855 filed on Aug. 6 2013 which is hereby incorporated by reference in its entirety.

This technology generally relates to methods and devices for managing network traffic and more particularly to providing per connection routing in a virtual environment to facilitate symmetric routing for stateful network devices.

Stateful network devices such as application delivery controllers network traffic managers routers and firewalls for example are present in many network environments. As one example a firewall is a stateful network device that maintains the state of active network connections such as transmission control protocol TCP connections for example. Firewalls identify and allow the transmission of network communications associated with active network connections and restrict the transmission of network communications that do not match a known active connection in order to increase network security.

Accordingly firewalls as well as other stateful network devices expect both directions of network traffic for a connection and require symmetric routing in order to operate properly and determine which connections are active and for which network communications are permitted. In order to provide symmetric routing some network devices provide per connection routing which is also referred to as auto last hop capability or reverse persistence. Network devices can provide per connection routing by storing the media access control MAC address of the stateful network device and routing interface from which a request was received as associated with information for the connection. The connection information can include the source and destination Internet protocol IP addresses and or port numbers included in a header of a request for example.

Using the stored information the network device can determine the MAC address and routing interface required to route a response back to the stateful network device from which the corresponding request was received and thereby provide symmetric routing. Without using the stored information the network device would use Internet protocol IP routing or a default route based on the origin of the request e.g. a client computing device . Such routing may be asymmetric since there may be a network path to the origin of the request that does not include a stateful network device from which the request was received.

Increasingly virtualization has been used to optimize performance of various network devices. Using virtualization a host network device may execute virtual machine s managed by a hypervisor which acts as an intermediary between the virtual machine s and the host network device hardware. It may be advantageous in some network environments to have a host network device with a virtual environment including virtual machines running different operating systems which execute application to provide traffic management or application delivery functionality for example. However many operating systems do not support per connection routing. Accordingly symmetric routing would not be guaranteed in a network environment including a host network device with such a virtual environment thereby negatively impacting the performance of upstream stateful network devices in the network environment.

A method for providing per connection routing in a virtual environment includes receiving by a host network device and at a routing interface a request from a transmission control protocol TCP connection with a stateful network device. A media access control MAC address of the stateful network device is determined by the host network device and the MAC address and the routing interface are stored by the host network device as associated with information for the TCP connection in a per connection routing table. The request is sent by the host network device to one of a plurality of virtual machines a response is received by the host network device from the one of the virtual machines and the MAC address and routing interface are retrieved by the host network device from the per connection routing table based on a comparison of information included in the response to the information for the TCP connection. The response is sent by the host network device to the stateful network device using the retrieved MAC address and routing interface.

A non transitory computer readable medium having stored thereon instructions for providing per connection routing in a virtual environment comprising machine executable code which when executed by a processor causes the processor to perform steps including receiving at a routing interface a request from a transmission control protocol TCP connection with a stateful network device. A media access control MAC address of the stateful network device is determined and the MAC address and the routing interface are stored as associated with information for the TCP connection in a per connection routing table. The request is sent to one of a plurality of virtual machines a response is received from the one of the virtual machines and the MAC address and routing interface are retrieved from the per connection routing table based on a comparison of information included in the response to the information for the TCP connection. The response is sent to the stateful network device using the retrieved MAC address and routing interface.

A host network device includes a processor coupled to a memory and configured to be capable of executing programmed instructions stored in the memory including receiving at a routing interface a request from a transmission control protocol TCP connection with a stateful network device. A media access control MAC address of the stateful network device is determined and the MAC address and the routing interface are stored as associated with information for the TCP connection in a per connection routing table. The request is sent to one of a plurality of virtual machines a response is received from the one of the virtual machines and the MAC address and routing interface are retrieved from the per connection routing table based on a comparison of information included in the response to the information for the TCP connection. The response is sent to the stateful network device using the retrieved MAC address and routing interface.

This technology provides a number of advantages including methods non transitory computer readable media and devices that provide per connection routing in a network environment with a network device hosting a virtual environment having virtual machines executing operating systems that do not support per connection routing. With this technology a hypervisor of a host network device can override routing decisions made by virtual machine operating systems that do not support per connection routing. Accordingly symmetric routing can be provided for stateful network devices in a network environment with such a host network device thereby allowing the stateful network devices to continue operating with expected performance.

Referring to a network environment which incorporates an exemplary host network device is illustrated. The host network device is coupled to a first stateful network device and a second stateful network device through a local area network LAN a plurality of client computing devices through the LAN the first stateful device and the second stateful network device and a wide area network WAN and a plurality of server computing devices through another LAN although the host network device stateful network devices and client computing devices and server computing devices may be coupled together via other topologies and the network environment may include other network devices. This technology provides a number of advantages including methods non transitory computer readable media and devices that improve processing of communications in networks with stateful network devices by providing per connection routing for and thereby improving the functioning of host network devices with virtual environments.

Referring to the host network device may perform any number of functions such as network traffic management application delivery load balancing or optimizing and or securing network traffic between the client computing devices and the server computing devices for example. In this example the host network device includes a processor memory and a communication interface which are coupled together by a bus or other communication link although the host network device may include other types and numbers of elements in other configurations. The processor in the host network device executes a program of stored instructions for one or more aspects of the present technology as described and illustrated by way of the examples herein although other types and numbers of processing devices and logic could be used and the processor could execute other numbers and types of programmed instructions.

The memory of the host network device stores these programmed instructions for one or more aspects of the present technology as described and illustrated herein although some or all of the programmed instructions could be stored elsewhere. In this example the memory of the host network device stores programmed instructions for a hypervisor which is configured to manage a plurality of virtual machines each of which is associated with an operating system configured to execute on a respective one of the virtual machines . Various networking applications can be configured to execute on the operating system of each of the virtual machines in order to carry out any number of functions on behalf of the host network device such as those identified earlier.

Additionally the memory of the host network device stores a per connection routing table in this example. The per connection routing table stores connection information and data link layer or physical addresses of upstream stateful network devices such as the first stateful network device and or the second stateful network device for example. Accordingly the per connection routing table can store a media access control MAC address of an originating one of the first stateful network device or the second stateful network device and a routing interface at which a network communication is received as associated with connection information for the connection through which the network communication was received as described and illustrated in more detail later.

Additionally the memory of the host network device can store programmed instructions for networking applications and or operating system s not included in the virtual environment managed by the hypervisor . A variety of different types of memory storage devices such as a random access memory RAM read only memory ROM flash memory hard disk solid state storage or any other computer readable medium which is read from and written to by a magnetic optical or other reading and writing system that is coupled to the processor can be used for the memory in the host network device .

The communication interface of the host network device operatively couples and communicates between the host network device first stateful network device second stateful network device client computing devices and server computing devices which are all coupled together by the LANs and and WAN although other types and numbers of communication networks or systems with other types and numbers of connections and configurations to other devices and elements can also be used. By way of example only the LANs and and WAN can use TCP IP over Ethernet and industry standard protocols including NFS CIFS SOAP XML LDAP and SNMP although other types and numbers of communication networks can also be used.

The LANs and in this example may employ any suitable interface mechanisms and network communication technologies including for example teletraffic in any suitable form e.g. voice modem and the like Public Switched Telephone Network PSTNs Ethernet based Packet Data Networks PDNs combinations thereof and the like. The WAN may comprise any wide area network e.g. Internet although any other type of network traffic topology may be used.

The first stateful network device and the second stateful network device can be the same or different devices configured to receive send and optionally manage network traffic associated with flows or connections in a stateful manner although again other numbers of stateful devices could be used. The first stateful network device and or the second stateful network device can be an application delivery controller network traffic manager router or firewall for example or any other network device that relies on symmetric routing in order to function properly. Each of the first stateful network device and the second stateful network device includes at least a processor and or configurable hardware logic a memory and a communication interface which are coupled together by a bus or other communication link although other numbers and types of devices could be used.

Each of the client computing devices in this example includes a processor a memory a communication interface an input device and a display device which are coupled together by a bus or other communication link although other numbers and types of network devices could be used. The client computing devices may run interface applications that facilitate communication with the server computing devices via the WAN LANs and the first stateful network device and or the second stateful network device and the host network device . The communications can be requests for resources such as content or applications for example hosted by the server computing devices .

Each of the server computing devices in this example includes a processor a memory and a communication interface which are coupled together by a bus or other communication link although other numbers and types of network devices could be used. The server computing devices may be hardware or software or may represent a system with multiple server computing devices in a server pool which may include internal or external networks. Accordingly additional other types and or numbers of server computing devices may be present in the network environment .

Generally the server computing devices process requests received from requesting client computing devices via the WAN LANs and the first stateful network device and or the second stateful network device and the host network device according to the HTTP based application RFC protocol the CIFS or NFS protocol a TCP UDP based protocol or any protocol that can be used to communicate data. Various network processing applications such as CIFS applications NFS applications HTTP Web Server computing device applications and or FTP applications for example may be operating on the server computing devices and transmitting data e.g. files or Web pages to the host network device in response to requests from the client computing devices although any other network processing applications can also be used and many different types of applications may be available on each of the server computing devices .

Although an exemplary network environment with the host network device first stateful network device second stateful network device client computing devices server computing devices LANs and and WAN are described and illustrated herein other types and numbers of systems devices components and elements in other topologies can be used. It is to be understood that the systems of the examples described herein are for exemplary purposes as many variations of the specific hardware and software used to implement the examples are possible as will be appreciated by those skilled in the relevant art s .

In addition two or more computing systems or devices can be substituted for any one of the systems or devices in any example. Accordingly principles and advantages of distributed processing such as redundancy and replication also can be implemented as desired to increase the robustness and performance of the devices and systems of the examples.

One or more of the examples may also be embodied as a non transitory computer readable medium having instructions stored thereon for one or more aspects of the present technology as described and illustrated by way of the examples herein as described herein which when executed by a processor cause the processor to carry out the steps necessary to implement the methods of the examples as described and illustrated herein.

An exemplary method for providing per connection routing in a virtual environment will now be described with reference to . Referring more specifically to in step the host network device receives a request from the first stateful network device at a routing interface. The routing interface can be a virtual network interface controller NIC a physical NIC a virtual LAN VLAN a network bridge an Internet Protocol IP security IPSec tunnel a virtual extensible LAN VXLAN tunnel a network virtualization using Generic Routing Encapsulation GRE NVGRE tunnel a Multiprotocol Label Switching MPLS tunnel an IP in IP tunnel or any other type of tunnel for example.

The request in this example is sent in response to a request by one of the client computing devices for content stored by one of the server computing devices . However the request can be associated with other types of communications originating with the one of the client computing devices and received by the first stateful network device which is located along a path to the one of the server computing devices or any other destination network device.

The request can be received by the communication interface of the host computing device and can be a transmission control protocol TCP packet sent using a TCP connection between the first stateful network device and the host network device for example. Accordingly the routing interface can indicate a physical or virtual interface or port used by the TCP connection with the first stateful network device . In this example the first stateful network device is a firewall configured to provide security functionality including restricting network traffic that is not associated with a known active connection and or may be malicious for example. However in other examples the first stateful network device can be any other device requiring symmetric routing in order to function properly as described and illustrated earlier.

In step the host network device determines the MAC address of the first stateful network device . The host network device can determine the MAC address using Address Resolution Protocol ARP in this example although other discovery processes protocols and methods of determining the MAC address of the first stateful network device can also be used. For example one or more of an OpenFlow protocol a representational state transfer REST application programming interface API or a VXLAN multicast can be used to determine the MAC address. The host network device can communicate the request to the hypervisor which communicates with the communication interface of the host network device to determine the MAC address for example although the MAC address can be determines in other manners.

In step the host network device stores the MAC address of the first stateful network device and the routing interface at which the request was received. The MAC address and routing interface can be stored in the per connection routing table in a portion of the memory of the host network device that is accessible to and managed by the hypervisor of the host device for example although the MAC address and routing interface can also be stored elsewhere.

Referring more specifically to an exemplary per connection routing table is illustrated. In this example the MAC address and routing interface are stored in the per connection routing table as associated with connection information for the TCP connection in this example such as the source IP address destination IP address source port number and or destination port number for example. The connection information which is also referred to as a four tuple can be retrieved from the header of the request received in step for example.

Referring back to in step the host network device or more specifically the hypervisor executing on the host network device in this example distributes the request to one of the virtual machines . In one example the virtual machines provide equivalent functionality and the hypervisor utilizes a load balancing technique to distribute the request. In other examples the connection associated with the request is also associated by the hypervisor with one of the virtual machines an operating system of one of the virtual machines and or an application or thread executed on one of the virtual machines . In these examples the hypervisor of the host device distributes the request according to associated information regarding the association as previously stored in the memory of the host network device for example. Other methods of and policies for distributing the request to the one of the virtual machines can also be used.

Once distributed in step the request is processed and communicated to another device in the network such as one of the one of the server computing devices in this example. The processing can include encrypting optimizing accelerating or load balancing the request for example although other types of processing can also be performed by the one of the virtual machines . Once processed the hypervisor of the host device receives the request from the one of the virtual machines and sends it to the one of the server computing devices in this example using the communication interface of the host device .

Accordingly the one of the server computing devices in this example will send a response. The response received from the one of the server computing devices includes the content requested by the one of the client computing devices in the request received in step in this example although other information from other types of network devices can also be included in the response. The response from the one of the server computing devices is received by the communication interface of the host network device and communicated to the hypervisor which distributes it to one of the virtual machines based on stored information and or a stored policy.

The one of the virtual machines to which the response is distributed is the same one of the virtual machines that processed the request in this example although in other examples one of the virtual machines to which the response is distributed can be a different one of the virtual machines . Accordingly the one of the virtual machines processes the response received from the one of the server computing devices in order to prepare the response for eventual transmission to the one of the client computing devices that originated the request received in step .

In step the host network device or more specifically the hypervisor of the host network device receives the processed response from the one of the virtual machines . In this example the operating system of the one of the virtual machines does not support per connection routing. Accordingly the response received from the one of the virtual machines will include destination information resulting from a route lookup by one of the operating systems executing on the one of the virtual machines .

The one of the operating systems will perform the route lookup using the origin of the corresponding request the one of the client computing devices in this example and a routing table managed by the one of the operating systems or a default route stored by the one of the operating systems for example. Accordingly in this example the routing information could identify the second stateful network device and would not guarantee symmetric routing of the response back to the first stateful network device from which the corresponding request was received by the host network device in step

In step the host network device retrieves a MAC address and a routing interface associated with the TCP connection from which the corresponding request was received by the communication interface of the host device . In this example the hypervisor of the host network device queries the per connection routing table using information included in the header of the response such as the source and or destination IP addresses and or port numbers. Accordingly the MAC address and routing interface is retrieved by the host network device based on a comparison of information included in the header of the response with connection information for the TCP connection. In this example the retrieved MAC address is associated with the first stateful network device as determined and stored in steps and respectively as described and illustrated in more detail earlier.

In step the host network device sends the response to the first stateful network device based on the MAC address and routing interface retrieved in step . The hypervisor of the host network device communicates with the communication interface of the host network device in this example to send the response to the first stateful network device from which the request was received instead of a network device identified by a routing decision of the one of the operating systems of the one of the virtual machines . Accordingly the routing decision of the one of the operating systems of the one of the virtual machines is effectively ignored by the host network device in order to guarantee symmetric routing of response. Additionally in examples in which the routing interface is a tunnel the host network device encapsulates the response for transmission using the tunnel.

Referring more specifically to a timing diagram of an exemplary method for providing per connection routing in a virtual environment is illustrated. In step in this example the client computing device sends a request. The request can be an HTTP request for content hosted by the server computing device for example. However the first stateful network device is located between the client computing device and the server computing device in this example and receives the request.

In step the first stateful network device processes the request and forwards the request to the host network device . The processing can be determining whether to allow the request in an example in which the first stateful network device is a network device implementing a firewall for example.

In step the host network device receives the request at a routing interface and determines and stores the MAC address of the first stateful network device and the routing interface as associated with connection information obtained from headers of the request for example. The MAC address and routing interface can be stored in the per connection routing table as associated with the connection information. The host network device can send the request to one of the virtual machines which processes the request as described and illustrated in more detail earlier.

In step the one of the virtual machines of the host device in this example forwards the request to the server computing device . In step the server computing device sends a response back to the host network device . The response can include the content requested by the client computing device in the request for example.

In step the host network device retrieves the MAC address of the first stateful network device and a routing interface at which the request was received using information included in headers of the response for example and matching connection information stored in the per connection routing table . The host network device then sends the responses to one of the virtual machines such as optionally the one of the virtual machines to which the corresponding request was distributed.

In step the host network device forwards the response to the first stateful network device using the retrieved MAC address and routing interface. Accordingly the symmetric routing is provided for the first stateful network device which in this example receives network communications in both directions for the connection. In step the first stateful network device processes and forwards the response to the client computing device .

Accordingly by this technology a host network device can include a virtual environment with virtual machines on which operating systems are executed. Some or all of the operating systems do not have to support per connection routing in order for the host network device to provide symmetric routing for upstream stateful network devices. Instead a hypervisor of the host network device maintains a per connection routing table to route responses according to the MAC address and routing interface from which a corresponding request for the connection was received. Thereby the hypervisor overrides routing decisions made by the operating systems of the virtual machines and advantageously allows the host network device to provide symmetric routing for responses.

Having thus described the basic concept of the invention it will be rather apparent to those skilled in the art that the foregoing detailed disclosure is intended to be presented by way of example only and is not limiting. Various alterations improvements and modifications will occur and are intended to those skilled in the art though not expressly stated herein. These alterations improvements and modifications are intended to be suggested hereby and are within the spirit and scope of the invention. Additionally the recited order of processing elements or sequences or the use of numbers letters or other designations therefore is not intended to limit the claimed processes to any order except as may be specified in the claims. Accordingly the invention is limited only by the following claims and equivalents thereto.

