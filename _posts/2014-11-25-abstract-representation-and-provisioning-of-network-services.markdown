---

title: Abstract representation and provisioning of network services
abstract: A network management device connects to a device on the network, receives a trigger for an operation command, supplies to the device a command line interface command for the operation command, wherein a randomly generated string is included at the end of the command line interface command. The network management device receives the output of the operation command from the device, detects the end of the operation command output and parses the output using an XML-based parser. XML based configuration files are used for configuration of different network devices. XML based report files are used to generate different network reports.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09264326&OS=09264326&RS=09264326
owner: Cisco Technology, Inc.
number: 09264326
owner_city: San Jose
owner_country: US
publication_date: 20141125
---
This application is a continuation of U.S. Non Provisional Application No. 13 334 268 filed Dec. 22 2011 which claims priority to U.S. Provisional Application Nos. 61 429 139 61 429 147 and 61 429 148 each filed on Jan. 2 2011 the entirety of each of which is incorporated herein by reference.

The present disclosure relates monitoring network services on network devices in a network management system.

In a network there are many different kinds of network devices each performing different types of functions. For example a router routes forwards packets from an external network to an internal network and vice versa. A switch connects different types of networked devices like printers different types of servers and computers in a network. A network device may support a feature like network address translation firewall or domain name services etc.

Different types of network management system software are employed to configure and monitor different network management systems. Network management software is typically tied to the devices with which the software can operate. When the network device software version or the vendor of a network device changes the network management software typically cannot incorporate those changes. For example if a customer is using network devices manufactured by Company A and then decides to buy and deploy network devices from Company B a single network management software product will not work with network devices of both Company A and Company B.

Additionally network management is usually performed from a central location with a collection of modules running at different network nodes assisting a central management node. A client software instance needs to be installed on the network devices for them to be able to talk to the management device. Customers typically do not want to install monitoring or configuring software on their network devices because these modules can slow the normal operations of the network devices.

In a network management and configuration system one or more network devices can be monitored or configured using different operation commands. An input from the user or automatic scheduling can trigger the network management device to invoke execution of an operation command. The network management device connects to one or more network devices. After establishing a connection the network management device supplies the operation command with a randomly generated string at the end of the command. The network device executes the command and sends the response back to the network management device with the randomly generated string at the end of the output. The network management device detects the end of the command output based on the randomly generated string. The network management device then proceeds to parse the command output using an XML based parser.

Referring first to a network is shown generally at reference numeral . The network can incorporate the network management techniques disclosed herein. The different devices in the network are logically connected to all the other devices in the same network. The arrows shown in the are for example only and do not depict all the possible connections and interconnections between devices. For example router is shown to be connected to a wireless router or switch . A server is connected to the router . For example the server can be a database server webserver or email server etc. shows one server by way of example only. A typical network may have numerous servers. Similarly network client devices in the network may include smart phone and computer . A network printer and network fax are also connected to the router . The network management software described herein can be executed on any device on the network . For example the network management software can run on a network device network server or network client.

Reference is now made to for a description of a block diagram showing different modules within a network management device and its communication with different network devices. The network management device is connected to one or more network devices . . . N . The network management device can connect to any of the network devices using any widely used and available network application programming interface over network . For example the network management device can connect using telnet for an unsecure connection and Secure Shell ssh for a secure connection. The network management device does not have any special client code executing on any of the network devices. The network devices . . . N treat a connect request from the network management device with the same response as it would treat a user triggered connect request. The network devices . . . N do not have the intelligence to determine whether the connect request is coming from a user or automated programmatically through a network management device. The intelligence for performing the techniques described herein resides within the network management device .

To this end the network management device comprises a processor a network interface unit and memory . The processor may be a microprocessor microcontroller or a collection or microprocessors or microcontrollers. The processor executes software i.e. computer executable instructions stored in memory to perform various operations including those of the modules shown and described herein. The network interface unit is a device that enables communications over network . For example the network interface unit is an Ethernet card.

Memory may comprise read only memory ROM random access memory RAM magnetic disk storage media devices optical storage media devices flash memory devices electrical optical or other physical tangible non transitory memory storage devices. Thus in general the memory may comprise one or more tangible computer readable storage media e.g. a memory device encoded with software comprising computer executable instructions and when the software is executed by the processor it is operable to perform the operations described herein.

Specifically the memory stores executable instructions for a trigger detection module a show commands module a configuration commands module a report generation module an optional user interface for input module and an optional user interface for display module . These modules are described hereinafter.

Once a connection is established with a network device the network management device uses one or more of the software modules shown in to perform different functionality and features. The network management device responds to a trigger that is based on an automatic scheduler or based on user input. The trigger defines the current task to be carried out by the network management device . The network management device selects an operation command based on the trigger request. The processor executes instructions of the trigger detection module to detect to different triggers and select the operation command to be executed.

One type of network command is a status or show command and another type of network command is a configuration command. The network management device executes the show commands module to handle operation of show commands and executes the configuration commands module to handle operation of the configuration commands. The network management device supplies the operation command with a randomly generated string and sends it to a network device after establishing a connection with the network device. The response from the network device is then handled by the show commands module or the configuration commands module .

The parsed output from the show commands module or configuration commands module is then given to a report generation module . The report generation module generates reports based on an XML defined report format. The report may be of a simple format and indicates whether the configuration was successful or whether the configuration failed. There may be different types of reports based on the user request.

The user interface for input module is an optional module. The network management device can be configured automatically by a task scheduler and configuration files that are used to configure the network management device or through a user interface. For example a user may schedule network management operations to be performed on one or more network devices once a day weekly or monthly. In addition the network management device may be configured to generate an end of life cycle report for all the devices on the network. Once the user schedules such a task the network management device does not require any further user interface inputs to trigger an event. Another scenario is when a user using an HTML based interface or a graphical user interface invokes certain operation commands. These user interface commands define the operation command and request the network management device to invoke them on the selected network devices. The user interface for input module may be implemented in any programming language including and not limited to object oriented programming languages like Java and C .

The user interface for displaying reports module is another optional module. Once a report is generated the network management device is capable of sending the report by email fax or text messaging using any now known or hereinafter developed notifications techniques in the field. The user may also choose to have a user interface displaying the reports. This user interface could be driven by HTML pages on a web server or through a software graphical user interface using a Java application programming interface or any other graphical user interface software.

The modules shown in may reside on the management device. However it is not necessary or essential for all the modules to reside on a single device. The functionality of the network management device may be divided into or distributed across two or more devices where the devices can communicate with each other any heretofore known or hereinafter developed communication techniques.

Reference is now made to for a description of a flow to detect end of the command output. These operations may be part of the functions of the trigger detection module for example. At a trigger to invoke an operation command occurs. The management device then begins the exchange of messages with a network device e.g. the network device . First at the network management device makes a request to connect to the network device . The network device can accept the connection or reject it. If the network device rejects the connection then the network management device returns an error or optionally generates an error report for that network device. If the network device accepts the connection as shown at the network management device then sends the operation command e.g. in the form of a Command Line Interface CLI command followed by a carriage return followed by a randomly generated unique character string at the end of the operation command at . The network device at then generates the output of the operation command that it executed and sends the output of the operation command back together with the same randomly generated unique string at the end of the output of the operation command. The network management device can determine that the output is finished or complete by detecting the randomly generated unique string that it sent with the operation command. There is no special software stored on the network device to send back the output with the unique string appended at the end of the output it is automatically added to the output because of the way it was included with the command sent by the network management device . At the network management device then parses the output of the operation command in order to detect the randomly generated unique string. At the network management device then supplies only the operation command output to an XML based parser to parse the output for analysis etc. The XML based parser may be configured to parse different operation command outputs with XML files using anchors and regular expressions irrespective of whether the output is free style or in tabular form.

Currently there is no easy way to detect end of command output when executing commands programmatically on network devices. For example network devices manufactured and sold by Cisco Systems Inc. have different operating systems namely IOS IOSXR CatOS NXOS. The network management applications need to learn about the different submodes and command prompts before attempting to execute the CLIs on the device. The learned command prompts are used to identify the end of the command output. In some cases the same command can be executed in different submodes. A developer also needs to identify the submode of a CLI session before attempting to read the command output and identify the end of command output.

Appending a Carriage Return and a unique string to the end of the command is used to detect the end of command output generated and returned by the network device to the network management device. A CLI session allows a single command at a time from a single CLI session. Even if multiple commands are sent simultaneously to the network device the network device will execute the commands in serial. If a command is sent to the device along with a and a unique string the device executes the command dumps the output and echoes the unique string at the end of the command output. When reading the command output the software application that parses the output looks for and detects this unique string to reliably identify the end of the command output. There are numerous techniques available in the art to generate various unique character strings for use in connection with these techniques.

By using the technique described above in connection with the process of detecting the end of the output becomes very simple and with very little effort from a software programmer. There is no need to learn about different submodes different command prompts or keeping track of the submode of a CLI session. The developer merely appends and a unique string to the command before sending to the device. The network device dumps the command output and echoes the unique string on a new line at the end of the command output. The parsing software detects the unique string to identify the end of the output.

Reference is now made to that shows a flow chart for use of XML files to parse network device output and generate reports. These operations are performed when the instructions for the report generation module are executed on the network management device . At the management device parses the CLI output received from a network device. In so doing the management device may detect and remove the unique string at the end of the output. Based on the CLI output and the particular network device from which the output is received at the management device selects a stored XML definitional file for that particular network device and command performed by that particular network device. At the management device supplies the combination of the CLI output and the XML definitional file to the output parser to parse the output. At the XML based parser generates a report based on a selected XML report file and creates a run time version of the XML report.

For example on the management device the module parsing the output received from a network device runs on a server engine. The server engine parses the text file i.e. XML file and obtains the data in the output received from the network device. There is no need to write a parser for all the numerous different operation commands which can change or be different across network devices and different software versions on network devices. Since the parsing of the output from the network device is performed using XML text files with a predefined grammar adding new files in the event a new show command is defined is rather simple and does not require any additional work other than placing the XML file for that network device in a location accessible for selection.

The technique depicted by can be used to generate different reports. Examples of these reports include network device reports service reports compliance and audit reports lifecycle management reports and traffic flow reports. When the operation commands are status or show commands the output generated by the network device for the command provides a wealth of information and that information is processed by the management device to check the network device health and the overall health of the network.

Currently there is no easy way to parse the show outputs to gather the required information from a network device such as the show commands that may be generated by the show commands module shown in . Each show command has a different format and a different parser needs to be written to parse the output from different network devices. Supporting a new show command requires considerable amount of work and code change. The techniques described in connection with simplify the process of parsing status command outputs and also adding support for new commands.

An XML Schema is defined that can show the command output in an XML format. The XML based parser takes the XML file and the output of the command and fetches the information as defined by the XML file. The XML Schema file defines different attributes in a command output. This technique allows for parsing of show command output in an extendible way and consequently provides an application with a wealth of knowledge that is otherwise buried in command output received from a network device without a user having to parse the CLI output. Different standards bodies define different types of reports and the techniques described herein allow for generating these reports in a flexible manner. For example reports for PSIRT HIPAA PCI and Field Notices can be readily generated using these techniques.

Network devices provide various services also called features to be configured on them in order to make use of these features in establishing and maintaining networks. These features could be simple features or more advanced features. Some examples of the features available on network devices are SNMP Agent BGP Routing Network Address Translation NAT . 

Even though several parameters of these network services are independent of the vendor manufacturing these devices operating system and firmware executed on the device each of the services has a different manner of configuration. For example configuring a BGP Routing feature on a network device manufactured by Vendor A is different from network devices manufactured by Vendor B even though the general concepts of how BGP works are the same across all vendors. There is no easy way for users to be able to view the current configurations or to provision these features across devices of multiple vendors and multiple releases of operating systems without knowing the intricate details of the user interfaces for those devices.

Reference is now made to that shows a diagram depicting techniques for configuration of services on a network device. The data structures and operations depicted by may be defined and performed by the configurations command module shown in . shows two different underlying networks and by way of example. There may be more than two networks with varied configurations. Network includes network devices that operate according to a first version of an operating system OS e.g. OS v and network includes network devices that operate according to another vendor OS or a different version of the same OS used by network devices in network . The overlaying architecture remains consistent across different networks.

A device configuration abstraction layer is provided that defines different network devices and the configuration commands a network device can accept for a given network. These network devices are defined as text files in XML format using a pre defined XML Schema. A normalized configuration view represents existing device configuration in XML format that can then be presented to a user using a graphical user interface e.g. user interface display monitor of a network management device in one example . The user interface receives the current configuration which is designated as service runtime data of an existing network. The current configuration is divided into different feature sets called services. Provision service definitions are used to generate the normalized configuration view from the service runtime data .

The techniques to define various network device features can be represented in an abstract XML format that is independent of the command syntaxes and semantics of how these features are actually configured on the network devices. According to these techniques there are three types of XML files. The first type is Definition XML files which define the meta or static information of each service. i.e. the definition of a service and its attributes. For example BGP Routing has attributes of BGP Process identifier ID neighbor ID BGP global attributes etc. The second type is a Runtime XML file that contains the actual values of attributes configured or to be configured on the network device for a given service. The third type is a Decorator XML file that contains information about how a user interface should render these attributes how to group the attributes hints on laying out these attributes etc. The Service Definition XML also defines the relationships between various attributes within a service or across different services. These relationships may help validate the values in a Runtime XML to ensure that the runtime values are accurate. The Service Definition XML also defines the constraints of a given attribute. For example minimum and maximum values allowed for that attribute. Thus the network management device stores in its memory definition XML files runtime XML files and decorator XML files.

A graphical user interface GUI can be automatically created from the Service Definition XML files. The GUI engine parses the Service Definition XML files and lays out the GUI attributes for presentation to a user. Using the three different XMLs a GUI is automatically presented to the user without having to write customized user interface software for each of these services separately.

The advantages of managing services using the techniques depicted by are independent of the vendor operating system or firmware versions of the network devices. A GUI configuration screen is automatically created to allow a user to quickly visualize current configurations of these features on the devices make changes to the settings and configure and provision features on network devices without the user having to know the complex syntaxes used in a typical CLI command. The use of XML files can automate provisioning of network features on devices uniformly instead of generating CLIs for each type of device or OS version. It becomes much easier to port and migrate configurations from one platform of network devices to a completely different platform.

Reference is now made to that shows a flow chart depicting the operations involved in network management and or configuration of one or more network devices using a flexible XML based parser. At the management device receives a trigger to execute an operation command on a network device. At the management device connects to the network device. At the management device supplies a CLI command for execution of the operation command with a randomly generated unique string being included at the end of the command. At the management device receives output of the operation command from the network device. At the management device detects the end of the operation command output based on the randomly generated string. At the operation command output is parsed using an XML based parser.

The above description is intended by way of example only. Various modifications and structural changes may be made therein without departing from the scope of the concepts described herein and within the scope and range of equivalents of the claims.

