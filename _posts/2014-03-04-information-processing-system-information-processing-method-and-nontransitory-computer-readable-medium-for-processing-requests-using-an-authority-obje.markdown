---

title: Information processing system, information processing method, and non-transitory computer readable medium for processing requests using an authority object
abstract: An information processing system includes a management unit that manages information of an object that determines at least one of a parent and a child of the object, a receiving unit that receives specification of an authority object that is an object with which authority information is associated and a request of processing that is to be executed by using the authority object, and a determining unit that determines whether to accept the request or not on the basis of results of a comparison between information of an owner object that is an object that approves the authority information and information of an object that is a parent of the authority object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09467291&OS=09467291&RS=09467291
owner: FUJI XEROX CO., LTD.
number: 09467291
owner_city: Tokyo
owner_country: JP
publication_date: 20140304
---
This application is based on and claims priority under 35 USC 119 from Japanese Patent Application No. 2013 148173 filed Jul. 17 2013.

The present invention relates to an information processing system an information processing method and a non transitory computer readable medium.

In a server that manages objects there is a case where processing such as creation acquisition change or deletion is performed on the objects in accordance with the authority of a client that is a request source of the processing. Since there is a case where creation change deletion and the like are performed on objects that are managed by a server when authority is fixedly associated with a client independently of the objects it may sometimes be difficult to perform such processing on the objects in a flexible manner in accordance with the authority of the client.

According to an aspect of the invention there is provided an information processing system including a management unit that manages information of an object that determines at least one of a parent and a child of the object a receiving unit that receives specification of an authority object that is an object with which authority information is associated and a request of processing that is to be executed by using the authority object and a determining unit that determines whether to accept the request or not on the basis of results of a comparison between information of an owner object that is an object that approves the authority information and information of an object that is a parent of the authority object.

An exemplary embodiment of the present invention will be described below with reference to the drawings.

In a computer that includes a controller such as a central processing unit CPU a memory such as a semiconductor memory or a magnetic disk unit and a communication unit such as a network interface the controller executes a program that is stored in the memory so that functions of the above mentioned sections which are provided in the information processing apparatus may be realized. Note that a program may be supplied to the information processing apparatus while stored in an information storage medium or may be supplied to the information processing apparatus via a data communication unit such as the internet. Details of each of the sections which are provided in the information processing apparatus will be described below.

The tree structure data management section manages two or more objects that form a tree structure. Here except for a root object that is present in a series each object has only one parent object a prototype . A root object does not have a prototype. When an object A is the prototype of an object B it may be said that the object B is an artifact of the object A. On the basis of a prototype relationship between objects the set of all the objects may be represented by a tree structure. As long as a tree structure does not break the tree structure may be modified by linking an object with a prototype that is different from the original prototype of the object. Each of the objects that are managed by the tree structure data management section may have a value. In the context of REpresentational State Transfer architectural style REST an object may sometimes be referred to as a resource and a value may sometimes be referred to as a representation. Such objects each having a value include an object called an access token that represents authority information. Examples of objects may include an object that represents only a pure identity that is simply formed of only an object identifier and a prototype an object that represents data that includes a value of an arbitrary content type and an object that represents an access token which is a credential that proves access qualification or an entity such as a resource owner which is an owner of an object or an application a client that accesses the object under the resource owner s approval. These objects are included in one tree structure. The tree structure data management section executes addition of an object that is to be managed by the tree structure data management section and update information readout or deletion of objects that are managed by the tree structure data management section or the like in response to an instruction that is received from a client apparatus . An example of data that is managed by the tree structure data management section will be described below.

As illustrated in the validation management table includes one or more records each of which includes fields which are KEY and VALUE of an object. KEY is an object ID and may be for example a random number of about 32 bytes that is generated by a system in a random manner when an object is created. In the exemplary embodiment as an example a four byte hexadecimal encoded value is used as KEY. VALUE is a flag value and may be for example a truth value. In the tree structure illustrated in the object key of an object spf and the object key of an object spf token are a1f40f99 and bfa67956 respectively and both of the objects are validated 0 . Note that in the case of invalidating an object in the validation management table the value stored in VALUE that is associated with the object key of the object may be updated to 1 .

As illustrated in the object management table includes one or more records each of which includes fields which are OBJECT KEY object ID PROTOTYPE VALUE ARTIFACT VALUE STATE VALUE and CONTENT TYPE VALUE. An object ID is stored in OBJECT KEY. An object ID of the parent object of an object is stored in PROTOTYPE VALUE. A key which may be for example a hash value of a record in the data content management table in which an object ID of an artifact of an object is stored is stored in ARTIFACT VALUE. A key which may be for example a hash value of a record in the data content management table which shows the data contents of an object is stored in STATE VALUE. A key which may be for example a hash value of a record in the data content management table which shows a type of an object is stored in CONTENT TYPE VALUE.

As illustrated in in the data content management table in which the data contents of objects are stored data contents are stored in such a manner as to be associated with corresponding keys e.g. the values that are stored in ARTIFACT VALUE STATE VALUE and CONTENT TYPE VALUE . For example in the data content management table information of a list of artifacts of an object is stored in such a manner as to be associated with the key of the object in ARTIFACT VALUE. In addition for example in the data content management table information of owner object ID of owner client object ID of client scope character string representing scope is associated with the key is stored in STATE VALUE that is associated with an object which is an access token. Every processing request is accompanied by an access token and in this case an owner is treated as a requester of the processing and a client is treated as a proxy requester of the processing. A scope includes information of a type of processing that is approved such as creation C create update U update deletion D delete list acquisition L list or the like. Note that a scope may include information of processing for which a client has authority. For example in the data content management table for example information of the data type of an object may be associated with the key stored in CONTENT TYPE VALUE that is associated with the object.

The request receiving section receives a request of processing that is to be performed on an object that is managed by the tree structure data management section from the client apparatus . In addition the request receiving section retrieves information of an access token a key of authority information along with the request.

The authority information acquisition section acquires on the basis of the access token which has been received by the request receiving section authority information e.g. owner information client information and scope information that relates to the request which has been received. For example in the case where the access token which has been received by the request receiving section is valid in the validation management table the authority information acquisition section searches for by using the access token as a key a record that corresponds to the key from the object management table. In this case when the record which corresponds to the key is not retrieved from the object management table the authority information acquisition section may output a retrieval error to the verification section . When the record which corresponds to the key is retrieved from the object management table the authority information acquisition section searches for by using a value that is stored in STATE VALUE of the record which has been retrieved as a key a particular key a record that corresponds to the particular key from the data content management table. In this case when the record which corresponds to the particular key is not retrieved from the data content management table the authority information acquisition section may output a retrieval error to the verification section . When the record which corresponds to the particular key is retrieved from the data content management table the authority information acquisition section acquires data owner information client information and scope information that is stored in VALUE of the record which has been retrieved as authority information verifies the owner information and the client information verifies whether or not an owner and a client have valid object IDs and outputs the authority information to verification section .

The verification section executes verification based on comparison between the authority information which has been acquired by the authority information acquisition section and information of a parent object a prototype object of the access token which has been received by the request receiving section . For example when the verification section is informed of a retrieval error by the authority information acquisition section the verification section outputs the retrieval error to the request processing section . The verification section verifies whether or not owner information an owner object that is included in the authority information which has been acquired by the authority information acquisition section matches the parent object the prototype object of the access token which has been received by the request receiving section . The verification section determines that the verification is successful when the parent object the prototype object of the access token is included in a path a prototype chain that sequentially links a parent object of the owner object and a parent object of the parent object and otherwise the verification section determines that the verification is not successful. The verification section informs the request processing section of the verification results.

Processing that is related to a notification queue will now be described. First in the case where an access token that has been received by the request receiving section is verified the prototype of the access token which has been received by the request receiving section has a queue a notification queue in which a notification is to be stored an empty queue is set as the notification queue . In addition in the case where the access token which has been received by the request receiving section is verified when the prototype of the access token is included in a prototype chain of an owner object that is specified by the access token a search is performed for an object that has a notification queue along the prototype chain starting from the owner object and an object that is found first is set as a notification destination.

On the basis of the request which has been received by the request receiving section the authority information which is acquired by the authority information acquisition section and the verification results of which the request processing section has been informed by the verification section the request processing section controls execution of processing that relates to the request. For example in the case where the processing which relates to the request received by the request receiving section is included in scope information of the authority information which has been acquired by the authority information acquisition section and in addition in the case where a condition that the verification results of which the request processing section has been informed by the verification section show that the verification is successful and a condition with respect to a relationship between a target resource a target object of the request and the owner the object which is specified by the access token for example whether or not the owner has a privilege to the target resource are satisfied the request processing section may execute the processing which relates to the request received by the request receiving section and outputs the execution results to the processed data providing section . When the above described conditions are not satisfied the request processing section may output an error to the processed data providing section by not accepting the processing which relates to the request. Alternatively even in the case where the request which has been received does not satisfy the above described conditions the request processing section may hold the processing e.g. update and may inform the prototype of the target resource of a request of the processing e.g. update . In this case in the case where the prototype of the target resource does not have a notification queue an object having a notification queue a notification destination object that is found first in a prototype chain of the target resource is informed of the request. Here after the notification destination object has noticed the notification that is stored in the notification queue the notification destination object may execute the processing on the target resource e.g. setting of a value by using its own access token or may simply delete the notification from the queue.

Examples of processing acquisition of a list of artifacts creation of an artifact acquisition of an object representation update of an object representation deletion of an object acquisition of a prototype update of a prototype or the like that is executed by the request processing section in the case where a request from the client apparatus is accepted in accordance with the request which is received will be described below. In the examples that will be described below as an example the case where the request that is transmitted from the client apparatus to the information processing apparatus uses REST API in an HTTPS transport and an access token is included in an HTTP request header will be described.

In the case where the request which is received is GET the request processing section retrieves by using an owner object that is included in authority information as a key a record that corresponds to the key from the object management table retrieves a record that corresponds to the value of ARTIFACT VALUE that is included in the record that has been retrieved from the data content management table and outputs the value of VALUE that is included in the record which has been retrieved to the processed data providing section as processing results.

In the case where the request which is received is POST the request processing section creates a key an object ID of a new object having the owner object that is included in the authority information as a parent thereof. The object ID may be created by for example a random number. Then the request processing section adds a record in which the object ID which has been created and information of a prototype object are stored in the object management table and outputs the object ID which has been created to the processed data providing section as processing results. Then the request processing section may update the value of the prototype object stored in ARTIFACT VALUE and may add a record that includes the value which has been updated in KEY and list information that includes information of an object that is newly created in a list.

In the case where the request which is received is GET id the request processing section retrieves by using id as an object key a record that corresponds to the object key from the object management table refers to a value stored in STATE VALUE that is included in the record which has been retrieved retrieves by using the value which the request processing section has referred to as a key a record that corresponds to the key from the data content management table and outputs a value of VALUE that is included in the record that has been retrieved to the processed data providing section as processing results.

In the case where the request which is received is PUT id when an owner that is specified by the access token has a privilege over a target object that is determined by id i.e. when the owner which is specified by the access token is included in a prototype chain of the target object the request processing section retrieves by using id as an object key a record that corresponds to the object key from the object management table refers to a value stored in STATE VALUE that is included in the record that has been retrieved retrieves by using the value which the request processing section has referred to as a key a record that corresponds to the key from the data content management table and updates a value of VALUE that is included in the record that has been retrieved in accordance with update information that is received along with the request.

In the case where the request which is received is DELETE id when the owner which is specified by the access token has a privilege over a target object that is determined by id i.e. when the owner which is specified by the access token is included in a prototype chain of the target object the request processing section retrieves by using id as an object key a record that corresponds to the object key from the object management table. In the case where no value is stored in ARTIFACT VALUE of the record that has been retrieved i.e. the target object does not have an artifact the request processing section may update the value stored in VALUE that corresponds to the object key id to an invalidation value in the validation management table. In the case where a value is stored in ARTIFACT VALUE of the record which has been retrieved the request processing section may output an error to the processed data providing section .

In the case where the request which is received is GET id prototype the request processing section retrieves by using id as an object key a record that corresponds to the object key the object management table and outputs a value stored in PROTOTYPE VALUE that is included in the record that has been retrieved to the processed data providing section as processing results.

In the case where the request which is received is PUT id prototype and where the body of the request is an object ID of a new prototype the owner a requester which is specified by the access token is the current prototype of a target resource an object that is determined by id and in the case where change of the prototype does not break a tree structure the request processing section reserves the new prototype. Then the requester is reserved as the new prototype and in the case where the change of the prototype does not break the tree structure the request processing section completes setting of the new prototype i.e. executes update of the prototype . In any cases other than the above described case the request processing section rejects the request. For example when the original prototype of an object C is A and the new prototype of the object C is B in the case where both of a first instruction that is requester A new prototype B target object C and a second instruction that is requester B new prototype B target object C do not break the tree structure at the timing for each of the instructions the request processing section may execute processing of changing the prototype of the object C from A to B.

The processed data providing section provides processing results of which the processed data providing section is informed by the request processing section to the client apparatus . Note that in the case where the processed data providing section is informed of an error by the request processing section the processed data providing section may inform the client apparatus of the error.

For each of the objects that are managed by the tree structure data management section a queue that holds a request that is pending for execution on the object may be prepared and an owner of the object may be allowed to read or delete items that are held by the queue which is prepared for the object. Here each of the items which are held by the queue is a hash value of a header and a body of an HTTP request and the contents of a body may be stored in such a manner as to be referable from a hash value. When the contents of a request are appropriate the owner of the object may execute the request by performing a replay using an access token of the owner. However in the case where the original HTTP request header is stored as is an access token that would have been kept secret will be known by the owner of the object i.e. the owner may pretend to be an entity that has made the original request and thus the access token in the request header may be replaced by not an object identifier but a hash value that is allocated to the object identifier i.e. the hash value with respect to the object identifier the access token that is managed by the data content management table so that leaking of the access token may be prevented. With this configuration although the contents of the token owner object ID of owner client object ID of client scope character string representing scope as a JSON object may be determined from the hash value the access token itself will not be known by the owner.

Specific examples of object addition processing and object update processing that are executed in the information processing apparatus according to the exemplary embodiment will be described below with reference to to .

Next as illustrated in processing of adding an object users as an artifact of the object spf in the tree structure which is formed of the objects will be described. In this case first the client apparatus throws a request POST to the information processing apparatus by using the access token spf token . As a result as illustrated in the information processing apparatus creates a new object key adds a record of the object key which is created to a validation management table of and an object management table of . In addition the information processing apparatus updates the value of ARTIFACT VALUE with respect to a prototype object the spf object in this example to which the artifact is added in the object management table of and adds the value of ARTIFACT VALUE with respect to the prototype object in and a data content management table of . Note that the data in that is changed from is underlined. The information processing apparatus informs the client apparatus of the object key e356bf46 that has been added.

The client apparatus throws a request PUT e356bf46 for updating the information of the object key e356bf46 of which the client apparatus has been informed from the information processing apparatus and the updated contents name users to the information processing apparatus by using the access token spf token . As a result as illustrated in the data contents of the object key e356bf46 are registered in an object management table of and a data content management table of . Note that the data in that is changed from is underlined.

Next as illustrated in an object temp users token is added as a temporary access token of the object users . The client apparatus may newly add an object by throwing a request POST to the information processing apparatus by using the object spf token . illustrate management tables to which an object key de75e969 of the object temp users token is added. Note that the data in that is changed from is underlined.

The client apparatus throws a request PUT de75e969 for updating the information of the object key de75e969 of which the client apparatus has been informed from the information processing apparatus and the updated contents owner e356bf46 client e356bf46 scope create update delete list to the information processing apparatus by using the access token spf token . As a result as illustrated in authority information having the object users as an owner is set for the object key de75e969 in an object management table of and a data content management table of . Note that the data in that is changed from is underlined.

Next as illustrated in the client apparatus adds an object users token as a child of the object users by using the access token temp users token . In other words the client apparatus may newly add an object by throwing a request POST to the information processing apparatus by using the object temp users token . illustrate management tables to which an object key 1ff64df4 of the object users token is added. Note that the data in that is changed from is underlined.

Here the client apparatus throws a request PUT 1ff64df4 for updating the information of the object key 1ff64df4 of which the client apparatus has been informed from the information processing apparatus and the updated contents owner e356bf46 client e356bf46 scope create update delete list to the information processing apparatus by using the access token temp users token . As a result as illustrated in authority information having the object users as an owner is set for the object key 1ff64df4 in an object management table of and a data content management table of . Note that the data in that is changed from is underlined.

Next as illustrated in the client apparatus adds an artifact Alice to the object users by using the access token users token . In other words the client apparatus may newly add an object by throwing a request POST to the information processing apparatus by using the object users token . illustrate management tables to which an object key 87ad557f of the artifact Alice is added. Note that the data in that is changed from is underlined.

As described above by executing addition of an access token and addition and update of an object authority information and resources may be provided in the same tree structure and detailed authority information may be set for each of the resources.

An example of notification processing that is executed in the case where an owner that is specified by an access token and a prototype a parent object are different from each other will now be described with reference to a tree structure of objects illustrated in . Note that a type of access token that has a prototype a parent object that is different from the owner that is specified by the access token will be referred to as a singular token.

As illustrated in an object B that is an artifact of an object A is an access token. Each of the owner and the client of the access token is the object A and the scope of the access token is s create update delete list .

Next assume that an object C is created by utilizing the object B hereinafter referred to as a token B . In this case when the token B is utilized the object A that is the prototype of the token B has a queue in which a notification is to be stored.

Next assume that a token D is created by utilizing the token B. In this case the object A is the prototype of the token D each of the owner and the client of the token D is the object C and the scope of the token D is s.

Next assume that a token E is created by utilizing the token D. In this case when the token D is verified it is sensed that the token D is a singular token and a notification is issued to the object C that is the owner of the token D. In this case a search is performed for an object that has a notification queue along a prototype chain starting from the object C and an object that is found first the object A is set to be a notification destination.

Next assume that an object F is created by utilizing the token E. In this case the token E is verified and the object C that is the prototype of the token E has a queue in which a notification is to be stored.

Assume that an object G is created by utilizing the token D. In this case it is sensed that the token D is a singular token a notification is issued to the object C which is the owner of the token D and the notification is stored in the queue of the object C.

In addition there is a token K that has the object C as a parent thereof and in the case where the owner of the token K is the object C the client of the token K an object to which the authority of the owner is delegated is the object J and the scope of the token K is s the object J may create for example the object G that is an artifact of the object C on behalf of the object C.

 1 In the information processing apparatus according to the exemplary embodiment in the case where a prototype of an object that has a corresponding owner attribute thereof hereinafter referred to as an access token matches an owner the access token is referred to as a normal access token in this case transmission of a method that is accompanied by the access token may be considered to be approved by the owner and may be accepted.

 2 In 1 in the case where the prototype of the access token is included in a prototype chain of the owner the access token is referred to as a singular access token in this case transmission of a method that is accompanied by the access token may be considered to be approved by the owner and may be accepted.

 3 In 2 in the case where the transmission of the method which is accompanied by the singular access token is accepted the owner may be informed of the acceptance.

 4 In 2 in the case where the transmission of the method which is accompanied by the singular access token is accepted the prototype of the access token may be informed of the acceptance.

 5 In 1 to 4 the information processing apparatus may have a method cloning for creation of an object and an object that is created may be a clone of the owner i.e. the owner is the prototype of the object .

 6 In 1 to 5 the access token has a corresponding client attribute thereof and transmission of a method that is accompanied by the access token may be considered to be delegated to a client that is specified.

 7 In 1 to 6 the access token has a corresponding scope attribute thereof and transmission of a method that is accompanied by the access token may be considered to be delegated in the range of the scope that is specified.

 8 In 1 to 7 the information processing apparatus may have a method clone listing for acquisition of a list of clones and may return a collection of clones of the owner.

 9 In 1 to 8 the information processing apparatus may have a method for acquisition of a representation of a target object.

 10 In 1 to 9 the information processing apparatus may have a method for update of a representation of a target object and the update of a representation may be executed only when the prototype of the target object approves the execution of the update of a representation.

 11 In 1 to 10 the information processing apparatus may have a method for deletion of a target object and the deletion may be executed only when the prototype of the target object approves the execution of the deletion.

 12 In 1 to 11 the methods may be executed only when the methods are included in a scope that is specified by the access token.

 13 In 1 to 12 the methods may be executed when an object that is included in a prototype chain of the target object approves the execution of the methods.

 14 In 1 to 13 in the case where the methods are executed with an approval from the object which is included in the prototype chain of the target object the prototype of the target object may be informed of the execution of the methods.

 15 In 1 to 14 in the case where the methods are executed with an approval from the object which is included in the prototype chain of the target object a method transmission owner may be informed of the execution of the methods.

 17 In 1 to 16 a representation has an identifier that is determined as a hash value of the representation and a binding between the representation and a corresponding object may be performed via the identifier.

 18 In 1 to 17 in the case of execution of methods such as acquisition of a representation of an object and update of a representation of an object along which transmission and reception of a representation occur a representation identifier may be added to a response.

 19 In 1 to 18 in the case of execution of methods such as acquisition of a representation of an object and update of a representation of an object along which transmission and reception of a representation occur a representation identifier may be added at the time of method transmission and the methods may be conditionally executed in accordance with the representation identifier which is added.

 20 In 1 to 19 the contents of method transmission to a target object that does not have authority are stored and the prototype of the target object may refer to the transmission contents.

 21 In 1 to 20 a token that is added at the time of method transmission may be replaced by a hash value.

 24 In 1 to 23 the contents of method transmission to an object and attendant circumstances may be recorded and the owner may refer to the contents of the method transmission and the attendant circumstances.

 26 In 1 to 25 the access token may be attached by using an Authorization field in an HTTP request message.

 29 In 1 to 28 acquisition of a representation of an object may be represented by GET to an entity resource.

 30 In 1 to 29 update of a representation of an object may be represented by PUT to the entity resource.

In addition in the exemplary embodiment even if the information processing apparatus does not have authority with respect to a request that is received from the client apparatus the information processing apparatus may provide information of a prototype to the client apparatus by using an access token that is received along with the request.

The foregoing description of the exemplary embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obviously many modifications and variations will be apparent to practitioners skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications thereby enabling others skilled in the art to understand the invention for various embodiments and with the various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalents.

