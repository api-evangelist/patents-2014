---

title: Generic distributed processing for multi-agent systems
abstract: Generic Distributed Processing Unit (DPU) for Multi-Agent Systems (MAS) provides a Machine to Machine (M2M) interface that is fast, flexible, redundant and scalable. It allows the handling of unlikely edge cases that Human Machine Interfaces (HMI) cannot. It also allows the processing of excessive amounts of ancillary data that are not processed easily with an HMI arrangement. In the digital ecosystem, any like DPU can back up any other, making the system exceedingly robust.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569289&OS=09569289&RS=09569289
owner: INTROSPECTIVE POWER, INC.
number: 09569289
owner_city: Broomfield
owner_country: US
publication_date: 20141024
---
This application is a continuation of U.S. patent application Ser. No. 14 171 143 filed Feb. 3 2014 now U.S. Pat. No. 8 898 218 issued Nov. 25 2014 which claims the benefit of U.S. Provisional Patent Application No. 61 759 864 filed Feb. 1 2013. The disclosures of the prior applications are incorporated herein in their entirety by reference.

The technology herein relates to multi agent processing and to systems and methods providing robust coordination and control for multi agent architectures.

Many industries use distributed heterogeneous systems to make up larger multi agent ecosystems. For the most part coordination of these systems is managed manually with the control agents being humans. In some cases humans cannot react fast enough. In other cases the solution is not sufficiently robust and does not have an adequate backup. Also human based systems are generally hard to scale. Facilities for humans are expensive to build and take time to construct. Training people for complex tasks is expensive takes time and may not be possible or entirely effective for critical rarely encountered edge cases. In disaster situations these limitations can compound already trying situations.

Many existing systems for the most part work with heterogeneous equipment or a subset of all the equipment and have little automation. Some solutions are not sufficiently flexible and have a concept of centralized control with a single master server process. Other systems also depend on a Human Machine Interface HMI that requires users to process large data sets quickly. Still other solutions are not sufficiently robust due to manual processes single point of failure and or minimal redundancy. Most solutions have poor heterogeneous support working for one vendor and or long lead times for new support.

The technology herein provides a generic Distributed Processing Unit DPU for use in a wide area Multi Agent Systems MAS architecture. This solution can be applied to a MAS of any size from a single micro or other processor to a digital ecosystem spanning the globe. Example non limiting embodiments provide unified control over a collection of discrete elements and or acts as a System of Systems SoS controlling other control systems. DPU technology can also be applied recursively or contain a hierarchy of implementations. In this way the DPU can be a framework for creating a digital MAS and can be used to create Software Hardware or hybrid Agents to control existing System Elements. Example embodiments react to conditions created either by events in the controlled digital ecosystem or external events that will affect that digital ecosystem.

In more detail a distributed processing and control architecture can comprise a number of intelligent or other elements distributed across a network geography an enterprise or any other domain. Intelligent elements such as Agents and or Agent Adapters may generate and supply events for handling by the distributed processing and control architecture. For example such Agents and or Agent Adapters may interface with machines or other apparatus of any type complexity or functionality. In one example non limiting implementation the Agents and or Agent Adapters may discover distributed processing units by for example setting up intentional race conditions and determining lowest response latency. Example distributed processing unit event processing can include for example 

In the example shown each DPU has or communicates with an associated database DB. Thus DPU can access database DB DPU can access database DB and DPU N can access database DB N N can be any integer greater than one . In one embodiment database DB is local to DPU database DB is local to DPU and so on. As shown in a communications path C can exist between the databases DB DB . . . DB N . Communications path C can comprise any type of path including wired wireless networked optical radio local long distance wide area the Internet sneaker net telephone or any other kind of path that can communicate information between the databases DB DB . . . DB N . Communications path C allows databases DB DB DB N to synchronize with and or update with respect to one another so that information acquired and or stored into database DB by CPU can be shared with DPU . . . DB N via database DB . . . DB N and vice versa. In one example embodiment databases are provided numbering in X associated with N distributed processing units where N X and for cases where X 1 a communication link for synchronizing all of the X number of databases is also provided.

In the example shown machine M looks to a DPU for support coordination control or other functionality. In one example implementation machine M includes a latency select LS to discover and select which DPU to use. Selection between DPU DPU . . . DPU N is based on how long it takes for machine M to receive responses. For example machine M can send pings substantive inquiries or other messaging to DPU DPU . . . DPU N to thereby set up an intentional race condition. Machine M can then choose the DPU with the fastest response time e.g. the one that wins the race. Fast response time can indicate a low network or other communications latency on the communications path between machine M and the sooner responding DPU and or b greater processing availability of the faster responding DPU and or c better availability to the faster responding DPU of relevant information needed to respond to the machine M s substantive request. Machine M can select one or several sooner responding DPU s .

A particular DPU might intentionally delay response if conditions warrant. Conditions can include but are not limited to available processing time available memory and available network bandwidth. In short the DPU can delay if there is a shortage of any system resource ahead of system overload and or thrashing which would affect in flight event processing. If any system resource is low it is possible to delay the response to bias away from that unit. This maintains the 0 compute cycle decision making by the client agent on that end where decision latency needs to remain low and resources are likely more constrained. In a more extreme situation one DPU might not respond at all due to damage malfunction communications breakdown prearranged reservation and or other factors and machine M may therefore select the other DPU s that do respond.

Any number of DPUs N may communicate with machine M over any number of communications paths some of which can be different from others e.g. some paths might be via the Internet or other network other paths might be over leased satellite or other dedicated or semi dedicated communications links and still other paths might be via alternate communications links such as point to point radio or microwave communications power line telecommunications or other techniques . Machine M can be comprise or be coupled to an Agent and communication is facilitated through an Agent Adapter in the diagrams. For ease of understanding and reading we will infer communication directly to a machine M with the understanding the machine M is or can be an Agent and the agent adapter is the facilitator of those communications to and from the distributed processing units diagrammed as DPU .

Machine M may cooperate with more than one distributing processing unit and rely on different distributing processing units for the same or different things. For example one distributed processing unit may provide real time event processing and control whereas for another distributing processing unit may serve as a resource for storage sensing or the like.

Once machine M selects a DPU s it may continue to operate with that DPU s unless or until that DPU s fails has increased latency or otherwise becomes a less optimal choice. During ongoing operations machine M may continue to check latency to determine whether the DPU s it is cooperating with is the best choice. If machine M determines that it would be better to cooperate with a different DPU s or if the DPU the machine has been cooperating with fails or otherwise becomes unavailable machine M can change its selection and begin cooperating with a different DPU s . Communications C between the respective DPU databases DB DB can be used to ensure that the respective databases are synchronized so that any DPU can pick up where the other DPU left off without delay. Such communications C between databases DB DB can be conducted continually intermittently constantly on demand or otherwise.

Non limiting embodiments are also designed to be implemented in redundant manner so when there are multiple DPUs available an Agent Adapter can fail over automatically from DPU to DPU during an outage. In this way the system provides a robust and redundant overall ecosystem. The technology also allows for hot deploys removals. This means the system can be expanded or contracted quickly with minimal cost. As will be explained below a selection algorithm is used to select which DPU is to be used to send events to control or otherwise communicate with any given Agent Adapter .

In the example shown in DPUs can work through Agent Adapters to access and or control Agents which in turn interact with system . Each Agent Adapter communicates with one or more Agents . As will be detailed below Agents can interact with a System of arbitrary breadth and complexity in any of a variety of ways. Some Agents can control aspects of System other agents can sense aspects of System and still other agents can perform other operations in connection with System . Any given Agent can perform any or all such functions.

The embodiment can be used to provide a cloud based highly scalable solution with a high degree of automation that works with a homogeneous or heterogeneous set of elements. shows a more detailed diagram of an example DPU coupled to streaming network which in turn is coupled to Agent Adapter via a Wireless Adapter . Agent Adapter is coupled to System Agent which is coupled to or is part of system . In the example shown DPU may comprise one or more central processing units CPU s which can execute instructions stored in non transitory Persistent Storage and can Access Memory . One or more network interfaces permit DPU to communicate with and via Network . An interface device may provide an application programming interface API and or user interface UI to provide input output for DPU . An example non limiting DPU based system is a Machine to Machine M2M interface that is faster more redundant scalable and can handle unlikely edge cases. In the ecosystem any like or other DPU can back up any other making the system exceedingly robust.

Agent Adapter similarly may comprise one or more CPU s coupled to persistent non transitory storage and memory . Network Interface permits the Agent Adapter to communicate with Network in the example shown at least some such communications is wireless via wireless adapter . System Agent also comprises one or more CPUs coupled to Persistent Storage memory and Network Interface . In the example shown DPU communicates via Network with Agent Adapter which in turn communicates with System Agent . System agent in the example shown includes CPU s Persistent Storage memory and Communications Adapter . In the example shown Agent Adapter and System Agent cooperate to exert control over and or receive information from System . In some example embodiments System Agent and Agent Adapter may comprise a single or distributed unit sharing resources.

An example request contains the System Agent type. If the System Agent type is supported by a given DPU the DPU s Responder process responds with the information needed for that DPU s Connector see . The Requester will accept the first response as being the optimal choice using the latency of the response to be the deciding factor. The Requester will pass the information on to System Agent supplying the connectivity information. Once that is chosen requests are made to the selected item DPU via an associated Connector . This process can and should be repeated periodically to make sure the optimal DPU is selected. In the case where a response to a request does not happen fast enough or events are not acknowledge this procedure should be repeated immediately and the event or request resent. See . 

As shown in the example Event Processor to Reactor DPU internal registration Event Reactor is the registrar for events that Event Processor is interested in. Event Processor may register with Event Reactor for multiple events.

In the example shown in the System Agent sends messages and event information through Agent Adapter and Connector block which in turn sends messages and events to Transformer to allow them to be transformed block into a common system specific format. Transformer sends system specific events to Event Reactor for distribution to Event Processors block and if necessary discovery of handlers there may be more than one . Event Processor receives events it has registered for from the Event Reactor analyzes the data and when analysis dictates takes one of two actions blocks 

2 Sends a command or commands to Commander to take action or poll for information from System Agents through Connector . Connector sends any responses from System Agent back to Commander which in turn returns a possibly modified response to Event Processor . See blocks . Depending on the response more commands may be sent to any required System Agent if needed this is also possible for sending back super events . This continues until the event handling is satisfactorily completed. It is also possible that after commands replies are compete option 1 may be invoked and a new event sent to the reactor. This encompasses both actions 1 and 2 respectively.

The example System allows elements agents to be connected and controlled by a selected DPU s . The type of control and the type of elements agents can vary depending on the particular application. This is a framework to use in multiple industries for wide area control over disparate systems working in a common ecosystem. There are four parts to describing a working system 

1. Define the abstract methods or representation for a problem domain abstract Commander and Transformer .

2. Define the concrete Commander and Transformers for each System Agent types for a given digital ecosystem.

4. Describe the defined system interactions. This is accomplished with particular implementations of Event Processors . This also may possibly discover abstract Commander methods and use particular implementations of those methods per commander type.

The first step is for an Agent Adapter to decide the optimal DPU to use. In one example embodiment this is done using the Broadcast Request Reply design pattern. The request can be sent by the DPU Requester to all Responders on DPUs via Multicast Broadcast Network with a payload of the System Agent type. All DPUs with support for the System Agent type return a response to the DPU Requester . The first response to the request will be the selected DPU . The DPU Requester will pass on the information to the Agent Adapter to allow requests to be made directly to the selected DPU . This process should be repeated periodically to ensure the optimal DPU is being used. The process will also be repeated on connectivity failure.

Once that is decided System Agent events are sent to the Connector generalized through the Transformer and passed on to the Event Reactor . The Event Reactor uses a Reactor design pattern to allow Event Processors to register for events they are interested in. The Event Reactor then brokers events to the interested Event Processors to be evaluated and potentially acted upon.

The Event Processor takes events potentially from multiple data sources and processes them. This can be done with simple conditional logic more complex AI algorithms through an analytics engine or any other method or combination of methods possible. If the Event Processor deems action needs to be taken based on received information one of two things can be done 

1 The Event Processor may create a super event that can be fed back into the Event Reactor for processing by other Event Processors for further analysis or

2 It can send commands through the Commander and then Connector to various elements to either gather more information directly from System Agents or send commands to take automated action on System Agent s .

Choice 2 may also invoke choice one based on the response. In that situation both commands are sent and a super event created.

Event Processor Given event s if a threshold is violated either 1 create a new event to the Event Reactor 2 send commands to the Commander which in turn sends specific commands to a the given System Agent or 3 Combine 2 and 1 to send commands and then create a new event based on the response s .

DPU Requester Responder The Requester sends a request to all Responders with the System Agent type for the request. If the DPU supports the System Agent type the Responder within the DPU returns connection information for that DPU s Connector for the given System Agent type. The first response is selected.

The first step to creating a solution for a given industry or problem domain is to define the high level events and commands to be supported. Once those are well understood abstract classes for the Commander and Transformer are created. There may be several classes of events and controls so there might be more than one abstract class defined. Next concretely define the Commander and Transformer classes per System Agent type.

Once those are defined the communications protocols to be used can be understood. Connectors for each communication protocol to be encountered needs to be added or if not available created developed for the code base.

The next step is to create the Event Processors and the logic needed for taking action on given generic events. Functionality may be identified based on particular applications by industry users and what they desire to automate control and or report on.

Once those programming steps are complete we are ready to create a physical DPU . The DPU consists of an independent computer system with a CPU storage memory and connectivity networking plus an installed version of the code base created earlier.

A Multi cast Broadcast network will then be established and the DPU Requester and Responder configured to use it.

Once DPUs are created the physical unit needs to be connected to and configured for the Network . The System Agent will also need connectivity to this Network . To accomplish this the System Agent connects directly over a Local Area Network LAN through a serial interface or any other connectivity method conceivable to the Agent Adapter . The Agent Adapter proxies all System Agent to DPU communications. Once this is complete and communication verified the assimilation of the System Agent into the MAS is complete.

One optional component would be the Requester Responder . The system can be used without it but use of such components adds to system robustness and scalability features. The example non limiting embodiment also provides System Agents to be configured with DPU connection information making the system more brittle as each element will be bound to a DPU or need to maintain connectivity information for all DPUs .

Conversely the Requester Responder can be used standalone for other frameworks or systems. It can in fact in one embodiment it can be used as its own component to distribute load across a bank of web or other services.

Other optional components are the Transformer and Commander . These would be optional in a situation where all events and commands were the same for all elements or the elements were different enough that there was no commonality. In these cases the Connector could pass events directly to the Reactor and the Event Processor can send commands directly to the Connector. You might see this where the example non limiting framework is used for a SCADA system or plant automation where all System Agents are machine elements and each is unique and or containing sets of homogeneous elements from a vendor command perspective or they are using a protocol standard that is well adhered to.

In a wide area configuration to make the system exceedingly secure and ensure the lowest possible network latency the DPUs can be connected across a private line transport Network . This allows the purveyor of the System to completely control the network and data. The System Agents could also be added to this network through private lines to increase the security of the network. Bastion hosts could be added to allow access from the public Internet for when desired. The bastions could also work as a fall back to the public Internet in the case of private network disruption or connectivity issues.

It is possible to spread the DPU components across separate computers creating a cluster or bank of functionality for each component. Components could be mixed or separated depending on parallel and or real time processing needs. This would be lucrative if one component was requiring a lot of processing while others need guarantees against being blocked. In this case the DPU Requester Responder can be reused to facilitate load balancing across the cluster. This also has other aforementioned benefits of hot deploys removal of computing resources and robustness at a component level.

This type of configuration would be very likely in situation with high levels of automation or learning AI that requires massive processing. In these examples the Event Processors could be run on a large cluster of computers while the other elements are run on more modest hardware. This allows the bulk of the processing to be handled with potentially massive processing resources while the rest of the components could probably be well served on a single computer. This also ensures that the potential large processing needs of the Event Processor will not interfere with the critical and time sensitive act of receiving events.

Example I controls an electrical grid. The flow of the electrical grid is controlled by dispatch centers. The system would initially be engineered to enhance the dispatching centers but as iterative development increases capabilities eventually those centers should be phased out.

The real utility comes with the advent of smart grids. The amount of data such as weather spot utilization from appliances supplemental energy from home solar panels and other data considerations makes it increasingly difficult if not impossible for human agents to accurately process all the information in a timely manner. Handling this as a DPU MAS solves this problem and allows the data to be processed and reacted to near real time.

To do this in an optimal manner the DPUs should be distributed in a wide geographic region. In this way this system increases the robustness of the electrical grid s MAS . Instead of a single dispatch centers for an area multiple DPUs can be deployed over a wide geographic region. This can be done at a fraction of the cost of running dispatch centers.

While the energy grids are one example the present technology can be applied to any grid network problem. There are many industries that would benefit equally well from automation in a wide area.

Additionally on a smaller scale a specific utilization can be burned onto chips and used in embedded systems or included as subsystems with a microcomputer. The example technology can now be used to control and automate any single unit that reacts to events and requires automation cars planes robots . . . . The DPU MAS solution also allows for redundancy and automatic fail over even at a small area single unit MAS level.

While the invention has been described in connection with what is presently considered to be the most practical and preferred embodiments it is to be understood that the invention is not to be limited to the disclosed embodiments but on the contrary is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims.

