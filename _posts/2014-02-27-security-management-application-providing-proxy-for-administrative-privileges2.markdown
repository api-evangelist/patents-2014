---

title: Security management application providing proxy for administrative privileges
abstract: Accessing a security enabled application may require certain access privileges that are not readily available or associated with the application at the time a user is seeking access via a login operation. In operation, an access attempt to a security enabled application may include identifying user credentials associated with the access attempt, generating a query based on the user credentials to identify whether the user credentials are associated with a predetermined group membership. A response to the query may be received that includes group information corresponding to the user and the group information may be compared to a set of predetermined rules to determine whether the group information includes privilege rules used to grant access to the access attempt.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09614851&OS=09614851&RS=09614851
owner: Open Invention Network LLC
number: 09614851
owner_city: Durham
owner_country: US
publication_date: 20140227
---
This application relates to a method and apparatus of accessing a security application via a computer device and more particularly to identifying the user s rights and privileges via group associations of the user.

Conventionally in a communication data networking environment if a user operating a network computer device was going to manage membership of a particular group of users they would need specific management rights over that particular group or the container in which the group is operating. Normally that user attempting to perform management operations would need specifically granted rights.

A flexible method of distributing permissions to certain users to perform administrative level tasks for a large scale communication network infrastructure does not exist in the current security role management applications. Such logic is normally found on the actual specific device application or node that would be manipulated by the administrator task each of which would need to be configured separately.

In one specific example when processing the business rules for permissions conventional application programming interfaces APIs used to manage authorization efforts rely on the operations level of permissions. If the operations indicate that a user should belong to a specific role that user is associated with the role. Then the user receiving rights to a privilege is determined by their assigned role association. This scenario provides business rules which cannot be independent of a particular role since the rules are stored within the role. When using such an API a check against access to operations may be used however this is not a true role identification operation.

Using conventional authorization approaches any operations associated with a role would only pass an access check consistent with that role s privileges and during any other time not consistent with that role s privileges the user would neither have access to those operations nor be in the role due to time limitations. Also if a change is made to the business rules while a user is logged into the conventional security application the user must log out and log back in to the application to experience the changes.

One example embodiment may provide a method that includes receiving an access attempt to a security enabled application identifying user credentials associated with the access attempt generating a query based on the user credentials to identify whether the user credentials are associated with at least one predetermined group membership receiving a response to the query including group information corresponding to the user and comparing the group information to a set of predetermined rules to determine whether the group information includes privilege rules used to grant access to the access attempt.

Another example embodiment may include an apparatus that includes a receiver configured to receive an access attempt to a security enabled application a processor configured to identify user credentials associated with the access attempt generate a query based on the user credentials to identify whether the user credentials are associated with at least one predetermined group membership receive a response to the query comprising group information corresponding to the user and compare the group information to a set of predetermined rules to determine whether the group information comprises privilege rules used to grant access to the access attempt.

It will be readily understood that the components of the present application as generally described and illustrated in the figures herein may be arranged and designed in a wide variety of different configurations. Thus the following detailed description of the embodiments of a method apparatus and system as represented in the attached figures is not intended to limit the scope of the application as claimed but is merely representative of selected embodiments of the application.

The features structures or characteristics of the application described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of the phrases example embodiments some embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present application. Thus appearances of the phrases example embodiments in some embodiments in other embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In addition while the term message has been used in the description of embodiments of the present application the application may be applied to many types of network data such as packet frame datagram etc. For purposes of this application the term message also includes packet frame datagram and any equivalents thereof. Furthermore while certain types of messages and signaling are depicted in exemplary embodiments of the application the application is not limited to a certain type of message and the application is not limited to a certain type of signaling.

According to example embodiments a user may access a user interface for a security role management application to perform administrative level tasks. Examples may provide distributing permissions to perform administrative level tasks to users for all infrastructure related activities in a security role management application. For example if a user wanted to manage membership of a group the user would only need to meet the criteria of a rule defined by the security role management application to view another user s history. Then the user could perform this action as long as their active directory group had such a rule to allow this within the XML file. The rules in the .xml file can be based on the corresponding active directory group the operation they would like to perform and or the resources effected. Another example might be managing Exchange mail settings for user accounts the user would only need to meet the rule criteria.

Example embodiments provide an outlet to handle administrator activities for an infrastructure in one application. The security webware application permits security administration to occur for applications devices and nodes. Security webware or the security application communicates via lightweight directory access protocol LDAP to an active directory to gather information on the active directory groups for the user. Then the application compares the groups to a defined set of rules within an XML file. This XML file is easily configurable and sets permissions within the application for each active directory group.

According to example embodiments the proxy user permissions application technique has a robust architecture that leverages different platforms stores rules etc. The proxy user permissions PUP rules are maintained in an application agnostic XML file and have a more flexible interface with the active directory instead of the application itself. The active directory does not have to pass specified parameters as the PUP will use the source user object to determine access. In addition to the source user one or more active directory objects can be passed to the PUP to make access determinations. Based on all objects passed to the PUP the rule logic will be applied taking all passed objects into consideration. The XML format is also more intuitive to traverse when making updates.

According to another example by using the PUP rules the operations and roles are both taken into consideration when applying user access. PUP analyzes a user s operation privileges and roles. PUP does not associate or dissociate a user with a role based on their operation privileges. If for example a user can sometimes perform tasks within a role the user is always in that role. However a conditional operation privilege can be added to determine when the user can perform certain tasks within a role. Thus the PUP adds another layer of logic by independently analyzing operations and roles and the relationships therebetween. Business rules may exist for operations but not for roles. Roles are purely determined by membership in configured security groups. As a result two users in the same role may have different results when attempting to perform a task based on the operation rules. The conditions on roles operations can be with regard to the role action to be performed and or what resource will be affected. This is explained in additional detail with respect to .

In one example if a role is named BestFriend with a rule specifying that it is only true on Fridays. Using the PUP the user would always be in the role BestFriend but any associated permissions would be independently evaluated depending on their specific rules. Taking the example further suppose two operations permissions are named CanHaveSomeOfMyCake and IsAwesome . Using PUP each permission could have a separate rule to differentiate them from one another. For this example both would have an is in role rule check applied against BestFriend but could if CanHaveSomeOfMyCake is only true on Friday then have IsAwesome is also true on Thursday. This approach offers greater configurability and places the definitions of various operations closer to the place where evaluation is performed. Also PUP can apply rule changes during the user s active session instead of having to log out and log back into the application as required by the conventional approach of .

Certain terms used throughout application may be referring to the same entity unless specified otherwise. Information technology IT service center may be an issue resolution group help desk within an enterprise. The security WEBWARE or security application is a custom security management tool. The active directory is a domain controller that assigns and enforces security policies.

In operation a user may log into the security application via their device and submit a query . The security application may generate a specific query for the user groups and query the active directory for that specific user s groups via the lightweight directory access protocol. The active directory may return user groups that the user is currently a member and those groups may be returned from the active directory. The security application may then gather the rules from the active directory in order to compare them against the privilege rules. The group rules may then be compared to predetermined rules stored in an XML file. The rules determine if a user in the user s active directory group can perform certain administrative tasks. Also a different rule may exist to grant privileges to a group. If a rule does not exist in the XML file to grant a privilege to the user s group the process is complete. However if such a rule does exist the user s desired administrative task is allowed. As a result an administrative change may be performed to the security application that is not normally granted to that user s particular group role s . The user may then perform an administrative change by having the security application perform the actual administrative task s to materialize the change made by the user.

The user group may perform a user group query by retrieving all groups within an active directory to which the user is a member. The retrieved information and query is compared to rules within an XML file to determine if any of the user s groups have been granted special permissions. The user groups to which the user belongs are contingent upon the user. The groups are typical active directory groups that are used to organize users based on their roles. The rules are stored in a XML file that is retrieved by a security WEBWARE application. The XML file stores rules that pertain to and or reference active directory groups.

The active directory groups are compared to the rules within the XML file since the rules explicitly list which AD groups are granted privileges while those that do not have privileges are not listed. As a result a rule may exist that makes changes to the user s current role which may be limited or provide limited access on the fly to provide the user with access. Those changes can be made to modify a user s rules. A user s roles will not change in general but the rules can define different conditions under which membership in a role or other criteria may or may not grant rights to perform certain tasks. These rules are calculated on the fly as they pertain to specific AD accounts. For example a rule to determine whether the current user can add a member to a group would take into account the user s roles as well as properties of the group and its members. Properties may include for example who manages the group is the member already in the group etc. The user interface of an application or admin console is updated to enable or disable access to features or tasks depending on the outcome of the rule processing.

Group memberships for the user are first extracted matched to roles defined in an XML file and cached. Then as rules are analyzed and applied the user s role membership can be used as part of the rule analysis. This provides a way for calculating complex sets of rules as they apply to a user between sets of AD accounts. For example can user X add user Y to group Z or can user X create a new user account W reporting to user Y . Automated systems such as batch scripts that run under authenticated credentials can be subject to these rules as the account they operate under would be the equivalent of a current user . A task that is performed may include creating a new user account disabling or enabling a user account creating a group viewing access on administration screens for certain content such as Exchange settings. In general any sort of IT administration task that a user s normal account typically would not have access to perform.

The set of predetermined rules are stored in an extensible mark up language XML data file and can be retrieved automatically when a request is received. Also the mapping module may also identify at least one rule in the XML data file that grants access to the access attempt and as a result allow the access attempt and at least one task associated with the access attempt. Next the query may be transmitted to an active directory stored in memory and the active directory can then be queried via the lightweight directory access protocol LDAP . Also if a user account associated with the access attempt is identified to be part of at least one group of user accounts then the user account is granted access to administrative privileges which are granted to at least one other user in the at least one group.

The operations of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a computer program executed by a processor or in a combination of the two. A computer program may be embodied on a computer readable medium such as a storage medium. For example a computer program may reside in random access memory RAM flash memory read only memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disk read only memory CD ROM or any other form of storage medium known in the art.

An exemplary storage medium may be coupled to the processor such that the processor may read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an application specific integrated circuit ASIC . In the alternative the processor and the storage medium may reside as discrete components. For example illustrates an example network element which may represent any of the above described network components etc.

As illustrated in a memory and a processor may be discrete components of the network entity that are used to execute an application or set of operations. The application may be coded in software in a computer language understood by the processor and stored in a computer readable medium such as the memory . The computer readable medium may be a non transitory computer readable medium that includes tangible hardware components in addition to software stored in memory. Furthermore a software module may be another discrete entity that is part of the network entity and which contains software instructions that may be executed by the processor . In addition to the above noted components of the network entity the network entity may also have a transmitter and receiver pair configured to receive and transmit communication signals not shown .

Although an exemplary embodiment of the system method and computer readable medium of the present application has been illustrated in the accompanied drawings and described in the foregoing detailed description it will be understood that the application is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit or scope of the application as set forth and defined by the following claims. For example the capabilities of the system of can be performed by one or more of the modules or components described herein or in a distributed architecture and may include a transmitter receiver or pair of both. For example all or part of the functionality performed by the individual modules may be performed by one or more of these modules. Further the functionality described herein may be performed at various times and in relation to various events internal or external to the modules or components. Also the information sent between various modules can be sent between the modules via at least one of a data network the Internet a voice network an Internet Protocol network a wireless device a wired device and or via plurality of protocols. Also the messages sent or received by any of the modules may be sent or received directly and or via one or more of the other modules.

One skilled in the art will appreciate that a system could be embodied as a personal computer a server a console a personal digital assistant PDA a cell phone a tablet computing device a smartphone or any other suitable computing device or combination of devices. Presenting the above described functions as being performed by a system is not intended to limit the scope of the present application in any way but is intended to provide one example of many embodiments of the present application. Indeed methods systems and apparatuses disclosed herein may be implemented in localized and distributed forms consistent with computing technology.

It should be noted that some of the system features described in this specification have been presented as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom very large scale integration VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices graphics processing units or the like.

A module may also be at least partially implemented in software for execution by various types of processors. An identified unit of executable code may for instance comprise one or more physical or logical blocks of computer instructions that may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module. Further modules may be stored on a computer readable medium which may be for instance a hard disk drive flash device random access memory RAM tape or any other such medium used to store data.

Indeed a module of executable code could be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

It will be readily understood that the components of the application as generally described and illustrated in the figures herein may be arranged and designed in a wide variety of different configurations. Thus the detailed description of the embodiments is not intended to limit the scope of the application as claimed but is merely representative of selected embodiments of the application.

One having ordinary skill in the art will readily understand that the application as discussed above may be practiced with steps in a different order and or with hardware elements in configurations that are different than those which are disclosed. Therefore although the application has been described based upon these preferred embodiments it would be apparent to those of skill in the art that certain modifications variations and alternative constructions would be apparent while remaining within the spirit and scope of the application. In order to determine the metes and bounds of the application therefore reference should be made to the appended claims.

While preferred embodiments of the present application have been described it is to be understood that the embodiments described are illustrative only and the scope of the application is to be defined solely by the appended claims when considered with a full range of equivalents and modifications e.g. protocols hardware devices software platforms etc. thereto.

