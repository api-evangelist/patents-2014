---

title: Management of data replication and storage apparatuses, methods and systems
abstract: The MANAGEMENT OF DATA REPLICATION AND STORAGE APPARATUSES, METHODS AND SYSTEMS (“BDR”) transform machine datasets using BDR components into replications over a network distributing redundant ready-to-use backup files. In some implementations, the disclosure provides a processor-implemented method for managing the replication and storage of data sets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09594636&OS=09594636&RS=09594636
owner: Datto, Inc.
number: 09594636
owner_city: Norwalk
owner_country: US
publication_date: 20140530
---
This application for letters patent disclosure document describes inventive aspects that include various novel innovations hereinafter disclosure and contains material that is subject to copyright mask work and or other intellectual property protection. The respective owners of such intellectual property have no objection to the facsimile reproduction of the disclosure by anyone as it appears in published Patent Office file records but otherwise reserve all rights.

The present innovations generally address the generation replication and synchronization of disk imaged backups and more particularly include MANAGEMENT OF DATA REPLICATION AND STORAGE APPARATUSES METHODS AND SYSTEMS.

However in order to develop a reader s understanding of the innovations disclosures have been compiled into a single description to illustrate and clarify how aspects of these innovations operate independently interoperate as between individual innovations and or cooperate collectively. The application goes on to further describe the interrelations and synergies as between the various innovations all of which is to further compliance with 35 U.S.C. 112.

Many industries are changing the way they handle and protect data in response to compliance regulations migration to electronic data emerging data management strategies and end user demands. For example a loss of financial records can easily result in large monetary losses and can subject businesses to government fines. Other examples are healthcare and legal institutions that are also required to comply with data integrity government regulations which could potentially lead to severe noncompliance consequences. In addition small businesses are generating more electronic data than ever and the value of that data is increasing. Simultaneously there are more risks of losing data. Thus backing up data in a reliable way may be desired by industries small business and organizations alike.

The leading number of each reference number within the drawings indicates the figure in which that reference number is introduced and or detailed. As such a detailed discussion of reference number would be found and or introduced in . Reference number is introduced in etc.

The MANAGEMENT OF DATA REPLICATION AND STORAGE APPARATUSES METHODS AND SYSTEMS hereinafter BDR user interface synchronizes storage nodes in a replication network via BDR components in response to user inputs and scheduled backups. In some embodiments this is carried out in real time.

In one embodiment the BDR monitors block level changes as they occur on a plurality of physical or virtual hard disks performing block based backups and storing substantially ready to run disk images e.g. VMDK VHDX VDI and or the like formats corresponding to the latest and or multiple previous restore points of a hard disk life span. In some embodiments the previous restore points may be represented as snapshots stored in a file system capable of snapshotting such as for example ZFS . In one embodiment a ready to run disk image as described herein is a file stored in a format that is ready to be booted mounted and or exported to a virtual host. In another embodiment a ready to run disk image may be pre appended with a header to be booted or mounted in a virtual host. Having ready to run images allows the BDR system to facilitate effective failover strategies such as instant on site and off site virtualization. In another embodiment the BDR system relies on its ability to take block based snapshots capable to contain information for an entire file system occupying significantly less memory space than full size images. Because the BDR applies incremental ascend images upon receipt and integrates them into a file system there is no need to store a series of previous incremental backups once applied. In still another embodiment the BDR system comprises a management engine regulating in real time the offsite transfer and replication of backup files. Yet in another embodiment the memory space preservation provided by the BDR s backup technology and the BDR s backup management engine allows the generation and transfer of backup files at a high rate mapping an extensive number of points in time of a hard disk without rapidly reaching storage space or bandwidth constraints.

In one embodiment the BDR components provide complete and swift recovery of data corresponding to multiple restore points but unlike conventional image based backup and recovery systems the BDR does not require the bandwidth to either transfer full size disk images to and from the cloud or transfer backup files to the cloud for each of the restore points that a client may want to maintain. For example the BDR may implement a policy to backup a client s device to a local storage node on an hourly basis providing the client s device with multiple one hour apart restore points. The BDR may also convert or merge two or more hourly backup files into a single backup representation containing the changes made to the client s device during the lapse of the selected hours and send it to a cloud based storage system. Therefore the client s device may be able to rollback to restore points generated on hourly basis or restore points separated by a certain number hours apart chosen by the user. Moreover the restore points may be expunged from the BDR system based on memory space preservation policies that may be configured by the client defining a number of hours days months or year s worth of data the client may want to maintain.

In one embodiment the BDR leverages a file system capable of snapshotting contents in a manner that allows for the efficient storage of the most recent substantially ready to run disk image e.g. the last Mock level image based backup . However previous versions of the substantially ready to run disk image may be represented in the file system of the BDR server holding the substantially ready to run disk image or another server in communication with the BDR . In such a configuration the BDR may avoid the requirement to retain multiple files representing incremental changes to the physical or virtual hard disk being backed up e.g. the hard drive represented by the substantially ready to run disk image . Upon receipt of a new substantially ready to run disk image the BDR may overwrite the currently stored version of the substantially ready to run disk image. The BDR may thereafter perform a local file system snapshot such that the differential between the previous and current substantially ready to run disk image is tracked by the file system itself. This BDR feature provides at least the feature of allowing the BDR to maintain the currently active substantially ready to run disk image in a state that represents the last backup. Advantageously in a disaster event the BDR does not need to incrementally build or create a substantially ready to run disk image because it is already created and stored by the BDR as described above. In cases where the BDR is called upon to provide a substantially ready to run disk image of an image at a previous point in time the BDR may execute a file system command to make a previous snapshot of the current substantially ready to run disk image available for instantiation. Based on the manner in which some snapshot capable file systems operate the time to instantiation of the previous snapshot may be substantially faster than a procedure whereby multiple incremental changes are applied to a base backup or image to determine or create the needed substantially ready to run disk image. Furthermore the above BDR configuration may provide substantial overhead savings in the potentially more common case wherein the most recent substantially ready to run disk image is the disk image to be instantiated e.g. taking advantage of the fact that in most disaster recover situations the most recent backup is the desired backup .

In one embodiment the BDR may be configured to initiate an underlying snapshot capable file system command to merge two or more file system maintained snapshots into a single snapshot representation. For example in one configuration the BDR may generate hourly snapshots of the substantially ready to run disk image such a schedule corresponding to but lagging the BDR s receipt of an updated substantially ready to run disk image . After a period of one week the oldest hourly snapshots may be merged by the underlying snapshot capable file system at the direction of the BDR. By utilizing the underlying file system s representation of the substantially ready to run disk image at various points in time as opposed to for example incremental files representing each hour of changes the BDR may take advantage of efficiencies in merging incremental snapshots that are not available in other backup systems. For example files that are created and then deleted between the first and last hourly snapshot being merged may be skipped completely in determining the merged snapshot because the underlying file system may be aware of the file status over time while a configuration applying incremental changes would only be aware of the one hour differences to the substantially ready to run disk image.

Furthermore the above configuration of the BDR may allow for the more efficient management and generation of remote synchronization files such as replication files as discussed herein with respect to because the local BDR device for example a backup aggregator may have a backup retention schedule that differs from the remote BDR device. As such the local BDR device may in some embodiments generate custom replication files that represent substantially ready to run disk image states at times spaced apart further than that actually available e.g. replication files representing daily overall changes to the underlying snapshot file system whereas the underlying snapshot file system itself stores hourly snapshot information . The ability of the BDR to store previous states of a single substantially ready to run disk image in a manner that allows the computationally efficient determination of exactly the differences that should be applied to a remote BDR device snapshot file system to allow the remote BDR device to determine the state of the substantially ready to run disk image according to its own backup schedule may be utilized by a BDR administrator to optimize network transfer requirements and push required computational processing overhead to devices that are best able to perform them.

In another embodiment other types of policies may be implemented for example a maximum rolling retention policy may be configured to retain restore points according to a repository s maximum storage capacity once the storage limit is about to be reached then any number of intermediate segments may be removed from the repository without affecting the functionality of the latest restore point.

In one embodiment backup aggregator may maintain such a local backup policy while additionally maintaining a remote backup policy. The remote backup policy may be a backup policy maintained at the backup aggregator that determines how frequently the backup aggregator will synchronize certain image based backup file snapshot data with remote cloud storage center . In one embodiment backup aggregator may coordinate the execution of its remote backup schedule with a master server e.g. . The master server may receive from the backup aggregator an indication of the backup aggregator s last known storage server pairing within the cloud storage center . A storage server for example StorageServer A may be a server that is directly paired with the backup aggregator such that is capable of receiving and applying to its own snapshot capable file system a received send file representing the file system differences between image based file backups snapshotted at two different points in time.

In one embodiment after coordinating with master server backup aggregator may thereafter initiate a send file transfer operation e.g. with its paired storage server within the cloud storage center. In some embodiments storage server may itself have a paired or file system mirroring relationship with a second storage server. Such a BDR configuration may be useful in cases where the image based backup snapshot history maintained on the backup aggregator would be advantageously stored on both the backup aggregator s paired server e.g. and a secondary storage server located in a different geographical location. Such a configuration may enable recovery of cloud storage center stored image snapshot data even in scenarios where cloud storage center is completely destroyed.

Furthermore in one embodiment the master server may direct the activity of multiple backup aggregators as well as manage or direct the pairing of backup aggregators with different storage server nodes within cloud storage center e.g. B B B. It should be understood that the maintenance of the local or remote backup policy need not necessarily be performed by a backup aggregator device. For example the master server or a storage server could instead maintain a backup policy associated with the backup aggregator. In such a configuration the coordination of the backup aggregator with the master server may for example additionally comprise sending or receiving information about the currently active local or remote backup policy associated with the backup aggregator.

In one embodiment user in communication with client device configures a backup agent e.g. installed on server to perform a backup and replicate it over a plurality of storage devices utilizing features of the BDR. Thereafter server may run its backup agent e.g. which may be programmed to generate and send periodic backup files e.g. to a BackupAggregator e.g. . A periodic backup file e.g. may comprise an image based backup. An image based backup is a block by block copy of a full hard drive. A block refers to a specific physical area on a hard drive which may contain data. Therefore an image based backup represents the content exactly as it was on the original storage device at the time the backup file was generated including operating system and all data associated with it the data stored in the system along with structural information and application configurations. However the source used to create the image backup file need not actually be a physical hard drive and may for example be a virtual hard disk or even another image backup file. The embodiments described herein may be utilized on backup files that are based on a different formatting scheme but otherwise lend themselves to processing by the described embodiments of the BDR. Once generated block level image backup files may serve as the basis for restoring a hard drive to a substantially similar state as present at the time of backup. Image backup files may contain additional data elements such as file system metadata that was present on the source drive master boot records partition information and or the like. This manner of backup may be distinguished from what may be thought of as a file directory level backup which merely duplicates the contents and location of files and or directories contained on a hard drive without necessarily including additional metadata file system data etc. An example server backup file substantially in the form of an HTTP S POST message including XML formatted data is provided below 

In one embodiment the BackupAggregator may receive a periodic server backup file e.g. . Afterward the BackupAggregator may validate the link which connects it to the server and may process the received backup file. Further details with respect to link validations and the processing of backup files e.g. are described herein and particularly with respect to an example CIH Component e.g. .

In one embodiment the BackupAggregator may perform backups replication and restoration tasks following a prioritization order defined by the user . A non exhaustive list of BDR tasks that may be used with the systems methods and apparatuses described herein is illustrated in the following Table 1.

In another embodiment the BDR may perform composite tasks comprising two or more simple or composite tasks. For example the composite task backupDataset shown in Table 2 may comprises the tasks S S s s and s.

A user may prioritize the transfer of certain type of files regardless from which device they have been received and or may prioritize the transfer of files related to a specific machine depending on what the user deems as critical and or necessary data. Furthermore a second level of prioritization that conditionally favors certain tasks depending on the type of action they comprise may be utilized. For example a second level priority order may be determined where tasks that specify a building file e.g. generateIncremental may have precedence over tasks that specify a streaming action. Similarly a task that specifies a sending action e.g. syncFile call may have precedence over tasks specifying building actions lastly tasks specifying a receiving action e.g. receiveCall may have precedence over tasks specifying a sending action and therefore all other type of tasks i.e. building and streaming . In one embodiment the BDR may prioritize the processing of tasks based on the last successful sendFile operation. For example if a number of sendFile operations for a particular replication incremental file have failed due to transient network issues the BDR may prioritize the next sendFile operation or one containing a sendFile operation over other operations even if the BDR s default prioritization would otherwise instruct. Further details with respect to prioritization assignment enforcement e.g. are described herein and particularly with respect to an example PAE Component e.g. 

In one embodiment the BackupAggregator may send a task processing assistance request e.g. to a master server e.g. . A task processing assistance request may be triggered periodically e.g. every 10 minutes and or in response to determined events e.g. a failing to connect with a remote storage server. An example task processing assistance request substantially in the form of an HTTP S POST message including XML formatted data is provided below 

In one embodiment a master server e.g. may receive a task processing assistance request from a BackupAggregator. Thereafter the master server may perform a validity check of the task processing assistance request retrieve task required objects which depending on the requester i.e. BackupAggregator may be one or more commands that may need to be executed and or reconfiguration related tasks the outcome of such commands will be included in a task processing assistance response e.g. which may be sent to the requester at a later time. Further details with respect to the validation retrieval and generation of the assistance response e.g. are described herein and particularly with respect to an example VRG Component e.g. 

In one embodiment a master server e.g. may send an assisting node processing request e.g. to a storage server e.g. . An assisting node processing request may be triggered periodically e.g. every 10 min and or in response to determined events e.g. a reconfiguration of the BDR system. In one embodiment an assistance node processing request may specify commands that are required to be performed by the storage server including but not limited to calculating how much disk space is available in the storage server updating software e.g. file system software logical volume manager software and the like. An example assisting node processing request substantially in the form of an HTTP S POST message including XML formatted data is provided below 

Once the commands have been attempted or performed the storage server may send an assisting node processing response e.g. to the master server which may include a status report a processed task confirmation and or notice of failure. An example assisting node processing response substantially in the form of an HTTP S POST message including XML formatted data is provided below 

In one embodiment the BackupAggregator may generate a replication file representing the differential between two snapshots represented by the BackupAggregator s underlying file system. The snapshots chosen as the endpoints for the replication file generation may not necessarily correspond to the time quantum at which the BackupAggregator receives and generates snapshots. As discussed herein the replication file may be generated according to a backup retention requirement of a remote server such as StorageServer E or Master Server . Because of the BDR s ability to generate replication files between arbitrary locally maintained snapshot points and transfer those replication files for application to a remote snapshot file system representation network transfer and computational requirements may be optimized. An example command for generating a replication file at BackupAggregator substantially in the form of php code and shell commands is 

In one embodiment the BackupAggregator may start a port forwarding or TCP IP connection tunneling e.g. secure shell session e.g. with the storage server to transfer a replication file. Thereafter backup files may be replicated to synchronize the BackupAggregator and the storage server while minimizing data transfers. In one embodiment the mechanism to start a port forwarding connection and synchronization process e.g. may be implemented substantially in the form of php code and shell commands as presented below 

Concurrently the BackupAggregator may start a polling process e.g. which may continuously check the storage server for a notification message indicating that the synchronization process has been completed. In an alternative embodiment the polling process may be directed to the master server which will be responsible of sending the notification message. Once the completion message has been emitted by the storage server the BackupAggregator may bring the tunneling session to an end. By utilizing a separate polling process to monitor the synchronization process allows the BDR to utilize a regularly updating file transfer path e.g. secured via automatically rotating SSH keys while allowing the polling of an individual transfer to proceed over a channel secured via a different mechanism. Such a separation additionally allows the BDR to monitor aspects of performance related to a synchronization command and thereafter adjust or modify task priorities as a result of the observed performance of otherwise lower level transfer commands utilized in some synchronization embodiments of the BDR. In one embodiment the mechanism to perform the polling process may be implemented substantially in the form of PHP code as presented below 

In one embodiment the storage server may start a port forwarding or TCP IP connection tunneling e.g. secure shell session e.g. with the storage server . Thereafter backup files may be synchronized from the storage server to the storage server while minimizing data transfers. An example of a mechanism to start a port forwarding connection and synchronization process has been already substantially shown in this specification e.g. . Concurrently the storage server may start a polling process e.g. which will continuously check the storage server for a message indicating that the synchronization process has been completed. Once the completion message has been emitted by the storage server the storage server may bring the tunneling session to an end.

In one embodiment the BackupAggregator may send a backup request e.g. to a server e.g. . The server may receive the backup request and consequently may send a backup response e.g. . In one embodiment the BackupAggregator may receive the backup response and afterward take a snapshot of the backup image file e.g. . Thereafter the BackupAggregator may determine if the snapshot should be replicated to a remote storage server utilizing a remote backup schedule e.g. . An example remote backup schedule e.g. substantially in the form of XML formatted data is provided below 

In one embodiment the BackupAggregator may perform backups replication and restoration tasks following a prioritization order. For example the system may prioritize the transfer of certain type of files regardless from which device they have been received and or may prioritize the transfer of files related to a specific machine depending on what it is deemed as critical and or necessary data. Furthermore a second level of prioritization that conditionally favors certain tasks depending on the type of action they comprise may be utilized. For example a priority order may be determined where tasks that specify a building file action have precedence over tasks that specify a streaming action. Similarly a task that specify a sending action may have precedence over tasks specifying building actions lastly tasks specifying a receiving action may have precedence over tasks specifying a sending action and therefore all other type of tasks i.e. building and streaming . Further details with respect to prioritization assignment enforcement e.g. are described herein and particularly with respect to an example PAE Component e.g. . The aforementioned prioritization order it is just an example of many orders that may be handled by a BackupAggregator and other BDR devices. In other embodiments the prioritization order may be configured based on the availability of resources for example a bandwidth conserving prioritization technique may comprise sending BDR related data packets at a time when a network experiences less traffic. Additionally other prioritization orders may overcome obstacles occurring in a node e.g. a disk has reached its maximum capacity by routing around datapackets and the like techniques.

In one embodiment the BackupAggregator may send a task processing assistance request e.g. to a master server e.g. . A task processing assistance request may be triggered periodically e.g. every minute and or in response to determined events e.g. a failing to connect with a remote storage server. An example of a task processing assistance request in one embodiment of the BDR has been already substantially shown in this specification e.g. .

In one embodiment a master server e.g. may receive a task processing assistance request from a BackupAggregator. Thereafter the master server may perform a validity check of the task processing assistance request retrieve task required objects which depending on the requester i.e. BackupAggregator may be one or more commands that may need to be executed and or reconfiguration related tasks the outcome of such commands will be included in a task processing assistance response e.g. which may be sent to the requester at a later time. Further details with respect to the validation retrieval and generation of the assistance response e.g. are described herein and particularly with respect to an example VRG Component e.g. 

In one embodiment a master server e.g. may send an assisting node processing request e.g. to a storage server e.g. . An assisting node processing request may be triggered periodically e.g. every 10 min and or in response to determined events e.g. a reconfiguration of the BDR system. In one embodiment an assistance node processing request may specify commands that are required to be performed by the storage server including but not limited to calculating how much disk space is available in the storage server updating software e.g. file system software logical volume manager software and the like. An example of an assisting node processing request in one embodiment of the BDR has been already substantially shown in this specification e.g. . Once the commands have been performed or attempted the storage server may send an assisting node processing response e.g. to the master server which may include a status report a processed task confirmation and or notice of failure. An example of an assisting node processing response in one embodiment of the BDR has been already substantially shown in this specification e.g. .

In one embodiment a Network Administrator e.g. in communication with the Administrator Device may send a command to the master server to configure the BDR network model e.g. . Thereafter the master server may reconfigure the network s model and propagate the changes to the affected nodes. Further details with respect to the processing of a reconfiguration command e.g. are described herein and particularly with respect to an example RP component e.g. .

In one embodiment the master server may send an assisting node reconfiguration request e.g. to the storage server . The assisting node reconfiguration request may indicate to the storage server that the synchronization from an specific BackupAggregator e.g. may no longer be authorized. Consequently the storage server may deactivate its corresponding authentication mechanisms e.g. ssh keys employed by the BackupAggregator to establish a connection tunneling to synchronize files. An example assisting node reconfiguration request e.g. substantially in the form of an HTTP S POST message including XML formatted data is provided below 

In one embodiment the BackupAggregator may send a port forwarding for file transfer session request to the storage server e.g. . Thereafter the storage server may process the request and may send a port forwarding for file transfer session response which may contain an ssh connection failure message e.g. if the connection was denied because the BackupAggregator does not have an adequate authentication credential e.g. ssh key otherwise the connection may be established. Thereafter in the case of a connection failure the BackupAggregator may send a task processing assistance request e.g. to the master server to verify if synchronization to the storage server is still expected. An example of a task processing assistance request in one embodiment of the BDR has been already substantially shown in this specification e.g. . In one embodiment the master server may validate the task retrieve the task required objects and generate an assistance response e.g. utilizing a VRG Component e.g. and may send an assisting node reconfiguration request e.g. back to the BackupAggregator.

In one embodiment the BackupAggregator may receive an assisting node reconfiguration request e.g. indicating to delete a no longer valid mirroring relationship and add a new mirroring relationship. Thereafter the BackupAggregator may execute the specified commands and may delete authentication credentials to connect to the storage server e.g. and may generate authentication credentials to connect to a different storage server as specified by the commands. An example assisting node reconfiguration request e.g. substantially in the form of an HTTP S POST message including XML formatted data is provided below 

In an alternative example the assisting node reconfiguration request e.g. can also be implemented substantially in the form of an HTTP S POST message including XML formatted data as provided below 

In one embodiment a task is extracted from the tArray e.g. . If the number of zfs slots is greater than zero and the task is of a ZFS type e.g. then the number of zfs slots is decreased by one unit e.g. and the current task is executed e.g. . If the number of zfs slots is not greater than zero or the task is not of a ZFS type e.g. then condition is evaluated. If the number of transfer slots is greater than zero and if the task is of a transfer type e.g. then the number of transfer slots is decreased by one unit e.g. and the current task is executed e.g. . Alternatively if the number of transfer slots is not greater than zero or the task is not of a transfer type e.g. and after the execution of a current task e.g. and then the available slots are evaluated e.g. . If the number of zfs slots is not greater than zero and the number of transfer slots is not greater than zero then the process may stop e.g. . If the number of zfs slots is greater zero or the number of transfer slots is greater than zero e.g. then it is verified if the current task is the last task in the tArray e.g. . If the current task is the last task in the tArray then the process may stop. However if the current task is not the last task in the tArray then the next task is extracted from the tArray e.g. and the subsequent steps are repeated one more time.

In another embodiment the MasterServer may send periodically or triggered by a BDR system event an assisting node processing request e.g. to the StorageServer . The StorageServer receives the processing request and may reset the SSH keys employed by the BackupAggregator to communicate with the StorageServer e.g. . Thereafter the StorageServer may send an assisting node processing response acknowledging the performed operation to the MasterServer e.g. .

In another embodiment the StorageNode receives an assisting node reconfiguration request containing vector VEC e.g. . Thereafter the StorageNode may deactivate the SSH key utilized by the vector s primary machine to mirror a dataset to the StorageNode e.g. .

In another embodiment the BackupAggregator may send a request to establish a tunneling connection and perform file synchronization with the StorageNode e.g. . Thereafter the StorageNode may receive the request and while processing the request may determine that the authentication credentials employed by the BackupAggregator are not valid e.g. . In consequence the StorageNode may extract the credentials SSH sent by the BackupAggregator and verify its validity e.g. . If the SSH key is valid e.g. then the response is Connection established e.g. . If the SSH key is not valid e.g. the response is Connection rejected because of wrong authentication . In another embodiment the BackupAggregator may receive a Rsync over SSH Response which can acknowledge an SSH connection or may informed a connection failure e.g. . When a connection failure is reported back then the BackupAggregator may invoke the BDR s VRG Component e.g. .

Typically users which may be people and or other systems may engage information technology systems e.g. computers to facilitate information processing. In turn computers employ processors to process information such processors may be referred to as central processing units CPU . One form of processor is referred to as a microprocessor. CPUs use communicative circuits to pass binary encoded signals acting as instructions to enable various operations. These instructions may be operational and or data instructions containing and or referencing other instructions and data in various processor accessible and operable areas of memory e.g. registers cache memory random access memory etc. . Such communicative instructions may be stored and or transmitted in batches e.g. batches of instructions as programs and or data components to facilitate desired operations. These stored instruction codes e.g. programs may engage the CPU circuit components and other motherboard and or system components to perform desired operations. One type of program is a computer operating system which may be executed by CPU on a computer the operating system enables and facilitates users to access and operate computer information technology and resources. Some resources that may be employed in information technology systems include input and output mechanisms through which data may pass into and out of a computer memory storage into which data may be saved and processors by which information may be processed. These information technology systems may be used to collect data for later retrieval analysis and manipulation which may be facilitated through a database program. These information technology systems provide interfaces that allow users to access and operate various system components.

In one embodiment the BDR controller may be connected to and or communicate with entities such as but not limited to one or more users from user input devices peripheral devices an optional cryptographic processor device and or a communications network .

Networks are commonly thought to comprise the interconnection and interoperation of clients servers and intermediary nodes in a graph topology. It should be noted that the term server as used throughout this application refers generally to a computer other device program or combination thereof that processes and responds to the requests of remote users across a communications network. Servers serve their information to requesting clients. The term client as used herein refers generally to a computer program other device user and or combination thereof that is capable of processing and making requests and obtaining and processing any responses from servers across a communications network. A computer other device program or combination thereof that facilitates processes information and requests and or furthers the passage of information from a source user to a destination user is commonly referred to as a node. Networks are generally thought to facilitate the transfer of information from source points to destinations. A node specifically tasked with furthering the passage of information from a source to a destination is commonly called a router. There are many forms of networks such as Local Area Networks LANs Pico networks Wide Area Networks WANs Wireless Networks WLANs etc. For example the Internet is generally accepted as being an interconnection of a multitude of networks whereby remote clients and servers may access and interoperate with one another.

The BDR controller may be based on computer systems that may comprise but are not limited to components such as a computer systemization connected to memory .

A computer systemization may comprise a clock central processing unit CPU s and or processor s these terms are used interchangeable throughout the disclosure unless noted to the contrary a memory e.g. a read only memory ROM a random access memory RAM etc. and or an interface bus and most frequently although not necessarily are all interconnected and or communicating through a system bus on one or more mother board s having conductive and or otherwise transportive circuit pathways through which instructions e.g. binary encoded signals may travel to effectuate communications operations storage etc. The computer systemization may be connected to a power source e.g. optionally the power source may be internal. Optionally a cryptographic processor and or transceivers e.g. ICs may be connected to the system bus. In another embodiment the cryptographic processor and or transceivers may be connected as either internal and or external peripheral devices via the interface bus I O. In turn the transceivers may be connected to antenna s thereby effectuating wireless transmission and reception of various communication and or sensor protocols for example the antenna s may connect to a Texas Instruments WiLink WL1283 transceiver chip e.g. providing 802.11n Bluetooth 3.0 FM global positioning system GPS thereby allowing BDR controller to determine its location Broadcom BCM4329FKUBG transceiver chip e.g. providing 802.11n Bluetooth 2.1 EDR FM etc. a Broadcom BCM4750IUB8 receiver chip e.g. GPS an Infineon Technologies X Gold 618 PMB9800 e.g. providing 2G 3G HSDPA HSUPA communications and or the like. The system clock typically has a crystal oscillator and generates a base signal through the computer systemization s circuit pathways. The clock is typically coupled to the system bus and various clock multipliers that will increase or decrease the base operating frequency for other components interconnected in the computer systemization. The clock and various components in a computer systemization drive signals embodying information throughout the system. Such transmission and reception of instructions embodying information throughout a computer systemization may be commonly referred to as communications. These communicative instructions may further be transmitted received and the cause of return and or reply communications beyond the instant computer systemization to communications networks input devices other computer systemizations peripheral devices and or the like. It should be understood that in alternative embodiments any of the above components may be connected directly to one another connected to the CPU and or organized in numerous variations employed as exemplified by various computer systems.

The CPU comprises at least one high speed data processor adequate to execute program components for executing user and or system generated requests. Often the processors themselves will incorporate various specialized processing units such as but not limited to integrated system bus controllers memory management control units floating point units and even specialized processing sub units like graphics processing units digital signal processing units and or the like. Additionally processors may include internal fast access addressable memory and be capable of mapping and addressing memory beyond the processor itself internal memory may include but is not limited to fast registers various levels of cache memory e.g. level 1 2 3 etc. RAM etc. The processor may access this memory through the use of a memory address space that is accessible via instruction address which the processor can construct and decode allowing it to access a circuit path to a specific memory address space having a memory state. The CPU may be a microprocessor such as AMD s Athlon Duron and or Opteron ARM s application embedded and secure processors IBM and or Motorola s DragonBall and PowerPC IBM s and Sony s Cell processor Intel s Celeron Core 2 Duo Itanium Pentium Xeon and or XScale and or the like processor s . The CPU interacts with memory through instruction passing through conductive and or transportive conduits e.g. printed electronic and or optic circuits to execute stored instructions i.e. program code according to conventional data processing techniques. Such instruction passing facilitates communication within the BDR controller and beyond through various interfaces. Should processing requirements dictate a greater amount speed and or capacity distributed processors e.g. Distributed BDR mainframe multi core parallel and or super computer architectures may similarly be employed. Alternatively should deployment requirements dictate greater portability smaller Personal Digital Assistants PDAs may be employed.

Depending on the particular implementation features of the BDR may be achieved by implementing a microcontroller such as CAST s R8051XC2 microcontroller Intel s MCS 51 i.e. 8051 microcontroller and or the like. Also to implement certain features of the BDR some feature implementations may rely on embedded components such as Application Specific Integrated Circuit ASIC Digital Signal Processing DSP Field Programmable Gate Array FPGA and or the like embedded technology. For example any of the BDR component collection distributed or otherwise and or features may be implemented via the microprocessor and or via embedded components e.g. via ASIC coprocessor DSP FPGA and or the like. Alternately some implementations of the BDR may be implemented with embedded components that are configured and used to achieve a variety of features or signal processing.

Depending on the particular implementation the embedded components may include software solutions hardware solutions and or some combination of both hardware software solutions. For example BDR features discussed herein may be achieved through implementing FPGAs which are a semiconductor devices containing programmable logic components called logic blocks and programmable interconnects such as the high performance FPGA Virtex series and or the low cost Spartan series manufactured by Xilinx. Logic blocks and interconnects can be programmed by the customer or designer after the FPGA is manufactured to implement any of the BDR features. A hierarchy of programmable interconnects allow logic blocks to be interconnected as needed by the BDR system designer administrator somewhat like a one chip programmable breadboard. An FPGA s logic blocks can be programmed to perform the operation of basic logic gates such as AND and XOR or more complex combinational operators such as decoders or mathematical operations. In most FPGAs the logic blocks also include memory elements which may be circuit flip flops or more complete blocks of memory. In some circumstances the BDR may be developed on regular FPGAs and then migrated into a fixed version that more resembles ASIC implementations. Alternate or coordinating implementations may migrate BDR controller features to a final ASIC instead of or in addition to FPGAs. Depending on the implementation all of the aforementioned embedded components and microprocessors may be considered the CPU and or processor for the BDR.

The power source may be of any standard form for powering small electronic circuit board devices such as the following power cells alkaline lithium hydride lithium ion lithium polymer nickel cadmium solar cells and or the like. Other types of AC or DC power sources may be used as well. In the case of solar cells in one embodiment the case provides an aperture through which the solar cell may capture photonic energy. The power cell is connected to at least one of the interconnected subsequent components of the BDR thereby providing an electric current to all subsequent components. In one example the power source is connected to the system bus component . In an alternative embodiment an outside power source is provided through a connection across the I O interface. For example a USB and or IEEE 1394 connection carries both data and power across the connection and is therefore a suitable source of power.

Interface bus ses may accept connect and or communicate to a number of interface adapters conventionally although not necessarily in the form of adapter cards such as but not limited to input output interfaces I O storage interfaces network interfaces and or the like. Optionally cryptographic processor interfaces similarly may be connected to the interface bus. The interface bus provides for the communications of interface adapters with one another as well as with other components of the computer systemization. Interface adapters are adapted for a compatible interface bus. Interface adapters conventionally connect to the interface bus via a slot architecture. Conventional slot architectures may be employed such as but not limited to Accelerated Graphics Port AGP Card Bus Extended Industry Standard Architecture E ISA Micro Channel Architecture MCA NuBus Peripheral Component Interconnect Extended PCI X PCI Express Personal Computer Memory Card International Association PCMCIA and or the like.

Storage interfaces may accept communicate and or connect to a number of storage devices such as but not limited to storage devices removable disc devices and or the like. Storage interfaces may employ connection protocols such as but not limited to Ultra Serial Advanced Technology Attachment Packet Interface Ultra Serial ATA PI Enhanced Integrated Drive Electronics E IDE Institute of Electrical and Electronics Engineers IEEE 1394 fiber channel Small Computer Systems Interface SCSI Universal Serial Bus USB and or the like.

Network interfaces may accept communicate and or connect to a communications network . Through a communications network the BDR controller is accessible through remote clients e.g. computers with web browsers by users . Network interfaces may employ connection protocols such as but not limited to direct connect Ethernet thick thin twisted pair 10 100 1000 Base T and or the like Token Ring wireless connection such as IEEE 802.11a x and or the like. Should processing requirements dictate a greater amount speed and or capacity distributed network controllers e.g. Distributed BDR architectures may similarly be employed to pool load balance and or otherwise increase the communicative bandwidth required by the BDR controller. A communications network may be any one and or the combination of the following a direct interconnection the Internet a Local Area Network LAN a Metropolitan Area Network MAN an Operating Missions as Nodes on the Internet OMNI a secured custom connection a Wide Area Network WAN a wireless network e.g. employing protocols such as but not limited to a Wireless Application Protocol WAP I mode and or the like and or the like. A network interface may be regarded as a specialized form of an input output interface. Further multiple network interfaces may be used to engage with various communications network types . For example multiple network interfaces may be employed to allow for the communication over broadcast multicast and or unicast networks.

Input Output interfaces I O may accept communicate and or connect to user input devices peripheral devices cryptographic processor devices and or the like. I O may employ connection protocols such as but not limited to audio analog digital monaural RCA stereo and or the like data Apple Desktop Bus ADB IEEE 1394a b serial universal serial bus USB infrared joystick keyboard midi optical PC AT PS 2 parallel radio video interface Apple Desktop Connector ADC BNC coaxial component composite digital Digital Visual Interface DVI high definition multimedia interface HDMI RCA RF antennae S Video VGA and or the like wireless transceivers 802.11a b g n x Bluetooth cellular e.g. code division multiple access CDMA high speed packet access HSPA high speed downlink packet access HSDPA global system for mobile communications GSM long term evolution LTE WiMax etc. and or the like. One typical output device may include a video display which typically comprises a Cathode Ray Tube CRT or Liquid Crystal Display LCD based monitor with an interface e.g. DVI circuitry and cable that accepts signals from a video interface may be used. The video interface composites information generated by a computer systemization and generates video signals based on the composited information in a video memory frame. Another output device is a television set which accepts signals from a video interface. Typically the video interface provides the composited video information through a video connection interface that accepts a video display interface e.g. an RCA composite video connector accepting an RCA composite video cable a DVI connector accepting a DVI display cable etc. .

User input devices often are a type of peripheral device see below and may include card readers dongles finger print readers gloves graphics tablets joysticks keyboards microphones mouse mice remote controls retina readers touch screens e.g. capacitive resistive etc. trackballs trackpads sensors e.g. accelerometers ambient light GPS gyroscopes proximity etc. styluses and or the like.

Peripheral devices may be connected and or communicate to I O and or other facilities of the like such as network interfaces storage interfaces directly to the interface bus system bus the CPU and or the like. Peripheral devices may be external internal and or part of the BDR controller. Peripheral devices may include antenna audio devices e.g. line in line out microphone input speakers etc. cameras e.g. still video webcam etc. dongles e.g. for copy protection ensuring secure transactions with a digital signature and or the like external processors for added capabilities e.g. crypto devices force feedback devices e.g. vibrating motors network interfaces printers scanners storage devices transceivers e.g. cellular GPS etc. video devices e.g. goggles monitors etc. video sources visors and or the like. Peripheral devices often include types of input devices e.g. cameras .

It should be noted that although user input devices and peripheral devices may be employed the BDR controller may be embodied as an embedded dedicated and or monitor less i.e. headless device wherein access would be provided over a network interface connection.

Cryptographic units such as but not limited to microcontrollers processors interfaces and or devices may be attached and or communicate with the BDR controller. A MC68HC16 microcontroller manufactured by Motorola Inc. may be used for and or within cryptographic units. The MC68HC16 microcontroller utilizes a 16 bit multiply and accumulate instruction in the 16 MHz configuration and requires less than one second to perform a 512 bit RSA private key operation. Cryptographic units support the authentication of communications from interacting agents as well as allowing for anonymous transactions. Cryptographic units may also be configured as part of the CPU. Equivalent microcontrollers and or processors may also be used. Other commercially available specialized cryptographic processors include Broadcom s CryptoNetX and other Security Processors nCipher s nShield SafeNet s Luna PCI e.g. 7100 series Semaphore Communications 40 MHz Roadrunner 184 Sun s Cryptographic Accelerators e.g. Accelerator 6000 PCIe Board Accelerator 500 Daughtercard Via Nano Processor e.g. L2100 L2200 U2400 line which is capable of performing 500 MB s of cryptographic instructions VLSI Technology s 33 MHz 6868 and or the like.

Generally any mechanization and or embodiment allowing a processor to affect the storage and or retrieval of information is regarded as memory . However memory is a fungible technology and resource thus any number of memory embodiments may be employed in lieu of or in concert with one another. It is to be understood that the BDR controller and or a computer systemization may employ various forms of memory . For example a computer systemization may be configured wherein the operation of on chip CPU memory e.g. registers RAM ROM and any other storage devices are provided by a paper punch tape or paper punch card mechanism however such an embodiment would result in an extremely slow rate of operation. In a typical configuration memory will include ROM RAM and a storage device . A storage device may be any conventional computer system storage. Storage devices may include a drum a fixed and or removable magnetic disk drive a magneto optical drive an optical drive i.e. Blueray CD ROM RAM Recordable R ReWritable RW DVD R RW HD DVD R RW etc. an array of devices e.g. Redundant Array of Independent Disks RAID solid state memory devices USB memory solid state drives SSD etc. other processor readable storage mediums and or other devices of the like. Thus a computer systemization generally requires and makes use of memory.

The memory may contain a collection of program and or database components and or data such as but not limited to operating system component s operating system information server component s information server user interface component s user interface Web browser component s Web browser database s mail server component s mail client component s cryptographic server component s cryptographic server the BDR component s PAE component CIH component VRG component RP component and or the like i.e. collectively a component collection . These components may be stored and accessed from the storage devices and or from storage devices accessible through an interface bus. Although non conventional program components such as those in the component collection typically are stored in a local storage device they may also be loaded and or stored in memory such as peripheral devices RAM remote storage facilities through a communications network ROM various forms of memory and or the like.

The operating system component is an executable program component facilitating the operation of the BDR controller. Typically the operating system facilitates access of I O network interfaces peripheral devices storage devices and or the like. The operating system may be a highly fault tolerant scalable and secure system such as Apple Macintosh OS X Server AT T Plan 9 Be OS Unix and Unix like system distributions such as AT T s UNIX Berkley Software Distribution BSD variations such as FreeBSD NetBSD OpenBSD and or the like Linux distributions such as Red Hat Ubuntu and or the like and or the like operating systems. However more limited and or less secure operating systems also may be employed such as Apple Macintosh OS IBM OS 2 Microsoft DOS Microsoft Windows 2000 2003 3.1 95 98 CE Millenium NT Vista XP Win7 Server Palm OS and or the like. An operating system may communicate to and or with other components in a component collection including itself and or the like. Most frequently the operating system communicates with other program components user interfaces and or the like. For example the operating system may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses. The operating system once executed by the CPU may enable the interaction with communications networks data I O peripheral devices program components memory user input devices and or the like. The operating system may provide communications protocols that allow the BDR controller to communicate with other entities through a communications network . Various communication protocols may be used by the BDR controller as a subcarrier transport mechanism for interaction such as but not limited to multicast TCP IP UDP unicast and or the like.

An information server component is a stored program component that is executed by a CPU. The information server may be a conventional Internet information server such as but not limited to Apache Software Foundation s Apache Microsoft s Internet Information Server and or the like. The information server may allow for the execution of program components through facilities such as Active Server Page ASP ActiveX ANSI Objective C C and or .NET Common Gateway Interface CGI scripts dynamic D hypertext markup language HTML FLASH Java JavaScript Practical Extraction Report Language PERL Hypertext Pre Processor PHP pipes Python wireless application protocol WAP WebObjects and or the like. The information server may support secure communications protocols such as but not limited to File Transfer Protocol FTP HyperText Transfer Protocol HTTP Secure Hypertext Transfer Protocol HTTPS Secure Socket Layer SSL messaging protocols e.g. America Online AOL Instant Messenger AIM Application Exchange APEX ICQ Internet Relay Chat IRC Microsoft Network MSN Messenger Service Presence and Instant Messaging Protocol PRIM Internet Engineering Task Force s IETF s Session Initiation Protocol SIP SIP for Instant Messaging and Presence Leveraging Extensions SIMPLE open XML based Extensible Messaging and Presence Protocol XMPP i.e. Jabber or Open Mobile Alliance s OMA s Instant Messaging and Presence Service IMPS Yahoo Instant Messenger Service and or the like. The information server provides results in the form of Web pages to Web browsers and allows for the manipulated generation of the Web pages through interaction with other program components. After a Domain Name System DNS resolution portion of an HTTP request is resolved to a particular information server the information server resolves requests for information at specified locations on the BDR controller based on the remainder of the HTTP request. For example a request such as http 123.124.125.126 myInformation.html might have the IP portion of the request 123.124.125.126 resolved by a DNS server to an information server at that IP address that information server might in turn further parse the http request for the myInformation.html portion of the request and resolve it to a location in memory containing the information myInformation.html. Additionally other information serving protocols may be employed across various ports e.g. FTP communications across port 21 and or the like. An information server may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the information server communicates with the BDR database operating systems other program components user interfaces Web browsers and or the like.

Access to the BDR database may be achieved through a number of database bridge mechanisms such as through scripting languages as enumerated below e.g. CGI and through inter application communication channels as enumerated below e.g. CORBA WebObjects etc. . Any data requests through a Web browser are parsed through the bridge mechanism into appropriate grammars as required by the BDR. In one embodiment the information server would provide a Web form accessible by a Web browser. Entries made into supplied fields in the Web form are tagged as having been entered into the particular fields and parsed as such. The entered terms are then passed along with the field tags which act to instruct the parser to generate queries directed to appropriate tables and or fields. In one embodiment the parser may generate queries in standard SQL by instantiating a search string with the proper join select commands based on the tagged text entries wherein the resulting command is provided over the bridge mechanism to the BDR as a query. Upon generating query results from the query the results are passed over the bridge mechanism and may be parsed for formatting and generation of a new results Web page by the bridge mechanism. Such a new results Web page is then provided to the information server which may supply it to the requesting Web browser.

Also an information server may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

Computer interfaces in some respects are similar to automobile operation interfaces. Automobile operation interface elements such as steering wheels gearshifts and speedometers facilitate the access operation and display of automobile resources and status. Computer interaction interface elements such as check boxes cursors menus scrollers and windows collectively and commonly referred to as widgets similarly facilitate the access capabilities operation and display of data and computer hardware and operating system resources and status. Operation interfaces are commonly called user interfaces. Graphical user interfaces GUIs such as the Apple Macintosh Operating System s Aqua IBM s OS 2 Microsoft s Windows 2000 2003 3.1 95 98 CE Millenium NT XP Vista 7 i.e. Aero Unix s X Windows e.g. which may include additional Unix graphic interface libraries and layers such as K Desktop Environment KDE mythTV and GNU Network Object Model Environment GNOME web interface libraries e.g. ActiveX AJAX D HTML FLASH Java JavaScript etc. interface libraries such as but not limited to Dojo jQuery UI MooTools Prototype script.aculo.us SWFObject Yahoo User Interface any of which may be used and provide a baseline and means of accessing and displaying information graphically to users.

A user interface component is a stored program component that is executed by a CPU. The user interface may be a conventional graphic user interface as provided by with and or atop operating systems and or operating environments such as already discussed. The user interface may allow for the display execution interaction manipulation and or operation of program components and or system facilities through textual and or graphical facilities. The user interface provides a facility through which users may affect interact and or operate a computer system. A user interface may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the user interface communicates with operating systems other program components and or the like. The user interface may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

A Web browser component is a stored program component that is executed by a CPU. The Web browser may be a conventional hypertext viewing application such as Microsoft Internet Explorer or Netscape Navigator. Secure Web browsing may be supplied with 128 bit or greater encryption by way of HTTPS SSL and or the like. Web browsers allowing for the execution of program components through facilities such as ActiveX AJAX D HTML FLASH Java JavaScript web browser plug in APIs e.g. Firefox Safari Plug in and or the like APIs and or the like. Web browsers and like information access tools may be integrated into PDAs cellular telephones and or other mobile devices. A Web browser may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the Web browser communicates with information servers operating systems integrated program components e.g. plug ins and or the like e.g. it may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses. Also in place of a Web browser and information server a combined application may be developed to perform similar operations of both. The combined application would similarly affect the obtaining and the provision of information to users user agents and or the like from the BDR enabled nodes. The combined application may be nugatory on systems employing standard Web browsers.

A mail server component is a stored program component that is executed by a CPU . The mail server may be a conventional Internet mail server such as but not limited to sendmail Microsoft Exchange and or the like. The mail server may allow for the execution of program components through facilities such as ASP ActiveX ANSI Objective C C and or .NET CGI scripts Java JavaScript PERL PHP pipes Python WebObjects and or the like. The mail server may support communications protocols such as but not limited to Internet message access protocol IMAP Messaging Application Programming Interface MAPI Microsoft Exchange post office protocol POP3 simple mail transfer protocol SMTP and or the like. The mail server can route forward and process incoming and outgoing mail messages that have been sent relayed and or otherwise traversing through and or to the BDR.

Access to the BDR mail may be achieved through a number of APIs offered by the individual Web server components and or the operating system.

Also a mail server may contain communicate generate obtain and or provide program component system user and or data communications requests information and or responses.

A mail client component is a stored program component that is executed by a CPU . The mail client may be a conventional mail viewing application such as Apple Mail Microsoft Entourage Microsoft Outlook Microsoft Outlook Express Mozilla Thunderbird and or the like. Mail clients may support a number of transfer protocols such as IMAP Microsoft Exchange POP3 SMTP and or the like. A mail client may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the mail client communicates with mail servers operating systems other mail clients and or the like e.g. it may contain communicate generate obtain and or provide program component system user and or data communications requests information and or responses. Generally the mail client provides a facility to compose and transmit electronic mail messages.

A cryptographic server component is a stored program component that is executed by a CPU cryptographic processor cryptographic processor interface cryptographic processor device and or the like. Cryptographic processor interfaces will allow for expedition of encryption and or decryption requests by the cryptographic component however the cryptographic component alternatively may run on a conventional CPU. The cryptographic component allows for the encryption and or decryption of provided data. The cryptographic component allows for both symmetric and asymmetric e.g. Pretty Good Protection PGP encryption and or decryption. The cryptographic component may employ cryptographic techniques such as but not limited to digital certificates e.g. X.509 authentication framework digital signatures dual signatures enveloping password access protection public key management and or the like. The cryptographic component will facilitate numerous encryption and or decryption security protocols such as but not limited to checksum Data Encryption Standard DES Elliptical Curve Encryption ECC International Data Encryption Algorithm IDEA Message Digest 5 MD5 which is a one way hash operation passwords Rivest Cipher RC5 Rijndael RSA which is an Internet encryption and authentication system that uses an algorithm developed in 1977 by Ron Rivest Adi Shamir and Leonard Adleman Secure Hash Algorithm SHA Secure Socket Layer SSL Secure Hypertext Transfer Protocol HTTPS and or the like. Employing such encryption security protocols the BDR may encrypt all incoming and or outgoing communications and may serve as node within a virtual private network VPN with a wider communications network. The cryptographic component facilitates the process of security authorization whereby access to a resource is inhibited by a security protocol wherein the cryptographic component effects authorized access to the secured resource. In addition the cryptographic component may provide unique identifiers of content e.g. employing and MD5 hash to obtain a unique signature for an digital audio file. A cryptographic component may communicate to and or with other components in a component collection including itself and or facilities of the like. The cryptographic component supports encryption schemes allowing for the secure transmission of information across a communications network to enable the BDR component to engage in secure transactions if so desired. The cryptographic component facilitates the secure accessing of resources on the BDR and facilitates the access of secured resources on remote systems i.e. it may act as a client and or server of secured resources. Most frequently the cryptographic component communicates with information servers operating systems other program components and or the like. The cryptographic component may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

The BDR database component may be embodied in a database and its stored data. The database is a stored program component which is executed by the CPU the stored program component portion configuring the CPU to process the stored data. The database may be a conventional fault tolerant relational scalable secure database such as Oracle or Sybase. Relational databases are an extension of a flat file. Relational databases consist of a series of related tables. The tables are interconnected via a key field. Use of the key field allows the combination of the tables by indexing against the key field i.e. the key fields act as dimensional pivot points for combining information from various tables. Relationships generally identify links maintained between tables by matching primary keys. Primary keys represent fields that uniquely identify the rows of a table in a relational database. More precisely they uniquely identify rows of a table on the one side of a one to many relationship.

Alternatively the BDR database may be implemented using various standard data structures such as an array hash linked list struct structured text file e.g. XML table and or the like. Such data structures may be stored in memory and or in structured files. In another alternative an object oriented database may be used such as Frontier ObjectStore Poet Zope and or the like. Object databases can include a number of object collections that are grouped and or linked together by common attributes they may be related to other object collections by some common attributes. Object oriented databases perform similarly to relational databases with the exception that objects are not just pieces of data but may have other types of capabilities encapsulated within a given object. If the BDR database is implemented as a data structure the use of the BDR database may be integrated into another component such as the BDR component . Also the database may be implemented as a mix of data structures objects and relational structures. Databases may be consolidated and or distributed in countless variations through standard data processing techniques. Portions of databases e.g. tables may be exported and or imported and thus decentralized and or integrated.

In one embodiment the database component includes several tables . A Users table may include fields such as but not limited to user id ssn dob first name last name age state address firstline address secondline zipcode devices list contact info contact type alt contact info alt contact type and or the like. The Users table may support and or track multiple entity accounts on a BDR. A Clients table may include fields such as but not limited to client id client name client ip client type client model operating system os version app installed flag and or the like. A Machines table may support and or track multiple entity accounts on a BDR. A Machines table may include fields such as but not limited to machine id machine type machine index and or the like. A Dataset table may include fields such as but not limited to ds id ds origin ds type ds name and or the like. A Vectors table may include fields such as but not limited to vec id vec primaryMachine vec secondaryMachine vec dataset and or the like. A Snapshots table may include fields such as but not limited to snp machine snp dataset snp timeStamp and or the like. An Incrementals table may include fields such as but not limited to inc machine inc dataset inc timeStamp inc timeStamp inc path and or the like. A Targets table may include fields such as but not limited to tgt deviceID tgt primaryServerID tgt secondaryServerID and or the like. A SSHkeys table may include fields such as but not limited to ssh machine ssh address ssh key and or the like. An Actions table may include fields such as but not limited to act id act action act machine act dataset act timeStamp act timeStamp act state act pid and or the like.

In one embodiment the BDR database may interact with other database systems. For example employing a distributed database system queries and data access by search BDR component may treat the combination of the BDR database an integrated data security layer database as a single database entity.

In one embodiment user programs may contain various user interface primitives which may serve to update the BDR. Also various accounts may require custom database tables depending upon the environments and the types of clients the BDR may need to serve. It should be noted that any unique fields may be designated as a key field throughout. In an alternative embodiment these tables have been decentralized into their own databases and their respective database controllers i.e. individual database controllers for each of the above tables . Employing standard data processing techniques one may further distribute the databases over several computer systemizations and or storage devices. Similarly configurations of the decentralized database controllers may be varied by consolidating and or distributing the various database components . The BDR may be configured to keep track of various settings inputs and parameters via database controllers.

The BDR database may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the BDR database communicates with the BDR component other program components and or the like. The database may contain retain and provide information regarding other nodes and data.

The BDR component is a stored program component that is executed by a CPU. In one embodiment the BDR component incorporates any and or all combinations of the aspects of the BDR that was discussed in the previous figures. As such the BDR affects accessing obtaining and the provision of information services transactions and or the like across various communications networks. The features and embodiments of the BDR discussed herein increase network efficiency by reducing data transfer requirements the use of more efficient data structures and mechanisms for their transfer and storage. As a consequence more data may be transferred in less time and latencies with regard to transactions are also reduced. In many cases such reduction in storage transfer time bandwidth requirements latencies etc. will reduce the capacity and structural infrastructure requirements to support the BDR s features and facilities and in many cases reduce the costs energy consumption requirements and extend the life of BDR s underlying infrastructure this has the added benefit of making the BDR more reliable. Similarly many of the features and mechanisms are designed to be easier for users to use and access thereby broadening the audience that may enjoy employ and exploit the feature sets of the BDR such ease of use also helps to increase the reliability of the BDR. In addition the feature sets include heightened security as noted via the Cryptographic components and throughout making access to the features and data more reliable and secure.

The BDR component may transform machine datasets into replications and redundant ready to use backup files and or the like and use the BDR. In one embodiment the BDR component takes inputs e.g. configure backup agent periodic backup server task processing assistance request assisting node processing request port forwarding for file transfer session and backup request task processing assistance request and assisting node processing request assisting node reconfiguration request and port forwarding for file transfer session BDR network reconfiguration and or the like etc. and transforms the inputs via various components e.g. PAE Component CIH Component VRG Component RP Component and or the like into outputs e.g. periodic server backup response task processing assistance response assisting node processing response backup response task processing assistance response assisting node processing response port forwarding for file transfer session response and or the like .

The BDR component enabling access of information between nodes may be developed by employing standard development tools and languages such as but not limited to Apache components Assembly ActiveX binary executables ANSI Objective C C and or .NET database adapters CGI scripts Java JavaScript mapping tools procedural and object oriented development tools PERL PHP Python shell scripts SQL commands web application server extensions web development environments and libraries e.g. Microsoft s ActiveX Adobe AIR FLEX FLASH AJAX D HTML Dojo Java JavaScript jQuery UI MooTools Prototype script.aculo.us Simple Object Access Protocol SOAP SWFObject Yahoo User Interface and or the like WebObjects and or the like. In one embodiment the BDR server employs a cryptographic server to encrypt and decrypt communications. The BDR component may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the BDR component communicates with the BDR database operating systems other program components and or the like. The BDR may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

The structure and or operation of any of the BDR node controller components may be combined consolidated and or distributed in any number of ways to facilitate development and or deployment. Similarly the component collection may be combined in any number of ways to facilitate deployment and or development. To accomplish this one may integrate the components into a common code base or in a facility that can dynamically load the components on demand in an integrated fashion.

The component collection may be consolidated and or distributed in countless variations through standard data processing and or development techniques. Multiple instances of any one of the program components in the program component collection may be instantiated on a single node and or across numerous nodes to improve performance through load balancing and or data processing techniques. Furthermore single instances may also be distributed across multiple controllers and or storage devices e.g. databases. All program component instances and controllers working in concert may do so through standard data processing communication techniques.

The configuration of the BDR controller will depend on the context of system deployment. Factors such as but not limited to the budget capacity location and or use of the underlying hardware resources may affect deployment requirements and configuration. Regardless of if the configuration results in more consolidated and or integrated program components results in a more distributed series of program components and or results in some combination between a consolidated and distributed configuration data may be communicated obtained and or provided. Instances of components consolidated into a common code base from the program component collection may communicate obtain and or provide data. This may be accomplished through intra application data processing communication techniques such as but not limited to data referencing e.g. pointers internal messaging object instance variable communication shared memory space variable passing and or the like.

If component collection components are discrete separate and or external to one another then communicating obtaining and or providing data with and or to other component components may be accomplished through inter application data processing communication techniques such as but not limited to Application Program Interfaces API information passage distributed Component Object Model D COM Distributed Object Linking and Embedding D OLE and or the like Common Object Request Broker Architecture CORBA Jini local and remote application program interfaces JavaScript Object Notation JSON Remote Method Invocation RMI SOAP process pipes shared files and or the like. Messages sent between discrete component components for inter application communication or within memory spaces of a singular component for intra application communication may be facilitated through the creation and parsing of a grammar. A grammar may be developed by using development tools such as lex yacc XML and or the like which allow for grammar generation and parsing capabilities which in turn may form the basis of communication messages within and between components.

where Value1 is discerned as being a parameter because http is part of the grammar syntax and what follows is considered part of the post value. Similarly with such a grammar a variable Value1 may be inserted into an http post command and then sent. The grammar syntax itself may be presented as structured data that is interpreted and or otherwise used to generate the parsing mechanism e.g. a syntax description text file as processed by lex yacc etc. . Also once the parsing mechanism is generated and or instantiated it itself may process and or parse structured data such as but not limited to character e.g. tab delineated text HTML structured text streams XML and or the like structured data. In another embodiment inter application data processing protocols themselves may have integrated and or readily available parsers e.g. JSON SOAP and or like parsers that may be employed to parse e.g. communications data. Further the parsing grammar may be used beyond message parsing but may also be used to parse databases data collections data stores structured data and or the like. Again the desired configuration will depend upon the context environment and requirements of system deployment.

For example in some implementations the BDR controller may be executing a PHP script implementing a Secure Sockets Layer SSL socket server via the information server which listens to incoming communications on a server port to which a client may send data e.g. data encoded in JSON format. Upon identifying an incoming communication the PHP script may read the incoming message from the client device parse the received JSON encoded text data to extract information from the JSON encoded text data into PHP script variables and store the data e.g. client identifying information etc. and or extracted information in a relational database accessible using the Structured Query Language SQL . An exemplary listing written substantially in the form of PHP SQL commands to accept JSON encoded input data from a client device via a SSL connection parse the data to extract variables and store the data to a database is provided below 

Also the following resources may be used to provide example embodiments regarding SOAP parser implementation 

2. The system of embodiment 1 wherein the said received image enabled backup data is selected from the group consisting of full backup data differential backup data and incremental backup data.

3. The system of embodiment 1 wherein the image enabled backup data is stored in the first file system and the captured snapshot is associated with the time when the image enabled backup data was generated.

4. The system of embodiment 1 wherein the captured snapshot comprises an incremental relation mirroring data blocks that have been modified in the computer system from the time when a previously received image enabled backup data was generated to the time when the current image enabled backup data was generated and associating the snapshot with the time when the current image enabled backup data was generated.

5. The system of embodiment 4 wherein each snapshot can serve as a restore point for the computer device corresponding to its associated time 

6. The system of embodiment 4 further comprising means to generate a rapid recovery file in a ready to run disk image format corresponding to the image enabled backup data received by the host of the first file system in the current backup response and storing the rapid recovery file in the first file system.

7. The system of embodiment 6 wherein the first and second file system can be synchronized at a different frequency than the frequency on which the backup responses are received by the host of the first file system.

8. The system of embodiment 5 wherein the host of the first file system is different from a host of the second file system.

9. The system of embodiment 8 wherein the task processing assistance request further comprises at least one new cryptographic key generated by the host of the first file system and a plurality of metrics related to the operational state of the host of the first file system.

10. The system of embodiment 9 further comprising a step wherein said master server sends an assisting node processing request to the host of the second file system comprising at least one new cryptographic key generated by the host of the first file system.

11. The system of embodiment 10 further comprising a step wherein said master server receives an assisting node processing response comprising a plurality of metrics related to the operational state of the host of the second file system.

12. The system of embodiment 11 further comprising a step wherein said master server receives a network reconfiguration request comprising a command to delete a vector describing a relation between the first file system and the second file system.

13. The system of embodiment 12 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the second file system comprising at least one command to disable at least one cryptographic key corresponding to the host of the first file system.

14. The system of embodiment 13 wherein a synchronization request generated by the host of the first file system is declined by the host of the second file system.

15. The system of embodiment 14 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the first file system comprising at least one command to delete a vector from a remote backup schedule.

16. The system of embodiment 3 wherein each snapshot can serve as a restore point for the computer device corresponding to its associated time 

17. The system of embodiment 3 further comprising means to generate a rapid recovery file in a ready to run disk image format corresponding to the image enabled backup data received by the host of the first file system in the current backup response and storing the rapid recovery file in the first file system.

18. The system of embodiment 17 wherein the first and second file system can be synchronized at a different frequency than the frequency on which the backup responses are received by the host of the first file system.

19. The system of embodiment 16 wherein the host of the first file system is different from a host of the second file system.

20. The system of embodiment 19 wherein the task processing assistance request further comprises at least one new cryptographic key generated by the host of the first file system and a plurality of metrics related to the operational state of the host of the first file system.

21. The system of embodiment 20 further comprising a step wherein said master server sends an assisting node processing request to the host of the second file system comprising at least one new cryptographic key generated by the host of the first file system.

22. The system of embodiment 21 further comprising a step wherein said master server receives an assisting node processing response comprising a plurality of metrics related to the operational state of the host of the second file system.

23. The system of embodiment 22 further comprising a step wherein said master server receives a network reconfiguration request comprising a command to delete a vector describing a relation between the first file system and the second file system.

24. The system of embodiment 23 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the second file system comprising at least one command to disable at least one cryptographic key corresponding to the host of the first file system.

25. The system of embodiment 24 wherein a synchronization request generated by the host of the first file system is declined by the host of the second file system.

26. The system of embodiment 25 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the first file system comprising at least one command to delete a vector from a remote backup schedule.

2. The apparatus of embodiment 1 wherein the said received image enabled backup data is selected from the group consisting of full backup data differential backup data and incremental backup data.

3. The apparatus of embodiment 1 wherein the image enabled backup data is stored in the first file system and the captured snapshot is associated with the time when the image enabled backup data was generated.

4. The apparatus of embodiment 1 wherein the captured snapshot comprises an incremental relation mirroring data blocks that have been modified in the computer system from the time when a previously received image enabled backup data was generated to the time when the current image enabled backup data was generated and associating the snapshot with the time when the current image enabled backup data was generated.

5. The apparatus of embodiment 4 wherein each snapshot can serve as a restore point for the computer device corresponding to its associated time 

6. The apparatus of embodiment 4 further comprising instructions to generate a rapid recovery file in a ready to run disk image format corresponding to the image enabled backup data received by the host of the first file system in the current backup response and storing the rapid recovery file in the first file system.

7. The apparatus of embodiment 6 wherein the first and second file system can be synchronized at a different frequency than the frequency on which the backup responses are received by the host of the first file system.

8. The apparatus of embodiment 5 wherein the host of the first file system is different from a host of the second file system.

9. The apparatus of embodiment 8 wherein the task processing assistance request further comprises at least one new cryptographic key generated by the host of the first file system and a plurality of metrics related to the operational state of the host of the first file system.

10. The apparatus of embodiment 9 further comprising a step wherein said master server sends an assisting node processing request to the host of the second file system comprising at least one new cryptographic key generated by the host of the first file system.

11. The apparatus of embodiment 10 further comprising a step wherein said master server receives an assisting node processing response comprising a plurality of metrics related to the operational state of the host of the second file system.

12. The apparatus of embodiment 11 further comprising a step wherein said master server receives a network reconfiguration request comprising a command to delete a vector describing a relation between the first file system and the second file system.

13. The apparatus of embodiment 12 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the second file system comprising at least one command to disable at least one cryptographic key corresponding to the host of the first file system.

14. The apparatus of embodiment 13 wherein a synchronization request generated by the host of the first file system is declined by the host of the second file system.

15. The apparatus of embodiment 14 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the first file system comprising at least one command to delete a vector from a remote backup schedule.

16. The apparatus of embodiment 3 wherein each snapshot can serve as a restore point for the computer device corresponding to its associated time 

17. The apparatus of embodiment 3 further comprising instructions to generate a rapid recovery file in a ready to run disk image format corresponding to the image enabled backup data received by the host of the first file system in the current backup response and storing the rapid recovery file in the first file system.

18. The apparatus of embodiment 17 wherein the first and second file system can be synchronized at a different frequency than the frequency on which the backup responses are received by the host of the first file system.

19. The apparatus of embodiment 16 wherein the host of the first file system is different from a host of the second file system.

20. The apparatus of embodiment 19 wherein the task processing assistance request further comprises at least one new cryptographic key generated by the host of the first file system and a plurality of metrics related to the operational state of the host of the first file system.

21. The apparatus of embodiment 20 further comprising a step wherein said master server sends an assisting node processing request to the host of the second file system comprising at least one new cryptographic key generated by the host of the first file system.

22. The apparatus of embodiment 21 further comprising a step wherein said master server receives an assisting node processing response comprising a plurality of metrics related to the operational state of the host of the second file system.

23. The apparatus of embodiment 22 further comprising a step wherein said master server receives a network reconfiguration request comprising a command to delete a vector describing a relation between the first file system and the second file system.

24. The apparatus of embodiment 23 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the second file system comprising at least one command to disable at least one cryptographic key corresponding to the host of the first file system.

25. The apparatus of embodiment 24 wherein a synchronization request generated by the host of the first file system is declined by the host of the second file system.

26. The apparatus of embodiment 25 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the first file system comprising at least one command to delete a vector from a remote backup schedule.

1. A non transitory medium storing instructions for managing the replication and storage of data sets to 

2. The medium of embodiment 1 wherein the said received image enabled backup data is selected from the group consisting of full backup data differential backup data and incremental backup data.

3. The medium of embodiment 1 wherein the image enabled backup data is stored in the first file system and the captured snapshot is associated with the time when the image enabled backup data was generated.

4. The medium of embodiment 1 wherein the captured snapshot comprises an incremental relation mirroring data blocks that have been modified in the computer system from the time when a previously received image enabled backup data was generated to the time when the current image enabled backup data was generated and associating the snapshot with the time when the current image enabled backup data was generated.

5. The medium of embodiment 4 wherein each snapshot can serve as a restore point for the computer device corresponding to its associated time 

6. The medium of embodiment 4 further comprising instructions to generate a rapid recovery file in a ready to run disk image format corresponding to the image enabled backup data received by the host of the first file system in the current backup response and storing the rapid recovery file in the first file system.

7. The medium of embodiment 6 wherein the first and second file system can be synchronized at a different frequency than the frequency on which the backup responses are received by the host of the first file system.

8. The medium of embodiment 5 wherein the host of the first file system is different from a host of the second file system.

9. The medium of embodiment 8 wherein the task processing assistance request further comprises at least one new cryptographic key generated by the host of the first file system and a plurality of metrics related to the operational state of the host of the first file system.

10. The medium of embodiment 9 further comprising a step wherein said master server sends an assisting node processing request to the host of the second file system comprising at least one new cryptographic key generated by the host of the first file system.

11. The medium of embodiment 10 further comprising a step wherein said master server receives an assisting node processing response comprising a plurality of metrics related to the operational state of the host of the second file system.

12. The medium of embodiment 11 further comprising a step wherein said master server receives a network reconfiguration request comprising a command to delete a vector describing a relation between the first file system and the second file system.

13. The medium of embodiment 12 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the second file system comprising at least one command to disable at least one cryptographic key corresponding to the host of the first file system.

14. The medium of embodiment 13 wherein a synchronization request generated by the host of the first file system is declined by the host of the second file system.

15. The medium of embodiment 14 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the first file system comprising at least one command to delete a vector from a remote backup schedule.

16. The medium of embodiment 3 wherein each snapshot can serve as a restore point for the computer device corresponding to its associated time 

17. The medium of embodiment 3 further comprising instructions to generate a rapid recovery file in a ready to run disk image format corresponding to the image enabled backup data received by the host of the first file system in the current backup response and storing the rapid recovery file in the first file system.

18. The medium of embodiment 17 wherein the first and second file system can be synchronized at a different frequency than the frequency on which the backup responses are received by the host of the first file system.

19. The medium of embodiment 16 wherein the host of the first file system is different from a host of the second file system.

20. The medium of embodiment 19 wherein the task processing assistance request further comprises at least one new cryptographic key generated by the host of the first file system and a plurality of metrics related to the operational state of the host of the first file system.

21. The medium of embodiment 20 further comprising a step wherein said master server sends an assisting node processing request to the host of the second file system comprising at least one new cryptographic key generated by the host of the first file system.

22. The medium of embodiment 21 further comprising a step wherein said master server receives an assisting node processing response comprising a plurality of metrics related to the operational state of the host of the second file system.

23. The medium of embodiment 22 further comprising a step wherein said master server receives a network reconfiguration request comprising a command to delete a vector describing a relation between the first file system and the second file system.

24. The medium of embodiment 23 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the second file system comprising at least one command to disable at least one cryptographic key corresponding to the host of the first file system.

25. The medium of embodiment 24 wherein a synchronization request generated by the host of the first file system is declined by the host of the second file system.

26. The medium of embodiment 25 further comprising a step wherein said master server sends an assisting node reconfiguration request to the host of the first file system comprising at least one command to delete a vector from a remote backup schedule.

In order to address various issues and advance the art the entirety of this application for BDR including the Cover Page Title Headings Field Background Summary Brief Description of the Drawings Detailed Description Claims Abstract Figures Appendices and otherwise shows by way of illustration various embodiments in which the claimed innovations may be practiced. The advantages and features of the application are of a representative sample of embodiments only and are not exhaustive and or exclusive. They are presented only to assist in understanding and teach the claimed principles. It should be understood that they are not representative of all claimed innovations. As such certain aspects of the disclosure have not been discussed herein. That alternate embodiments may not have been presented for a specific portion of the innovations or that further undescribed alternate embodiments may be available for a portion is not to be considered a disclaimer of those alternate embodiments. It will be appreciated that many of those undescribed embodiments incorporate the same principles of the innovations and others are equivalent. Thus it is to be understood that other embodiments may be utilized and functional logical operational organizational structural and or topological modifications may be made without departing from the scope and or spirit of the disclosure. As such all examples and or embodiments are deemed to be non limiting throughout this disclosure. Also no inference should be drawn regarding those embodiments discussed herein relative to those not discussed herein other than it is as such for purposes of reducing space and repetition. For instance it is to be understood that the logical and or topological structure of any combination of any program components a component collection other components and or any present feature sets as described in the figures and or throughout are not limited to a fixed operating order and or arrangement but rather any disclosed order is exemplary and all equivalents regardless of order are contemplated by the disclosure. Furthermore it is to be understood that such features are not limited to serial execution but rather any number of threads processes services servers and or the like that may execute asynchronously concurrently in parallel simultaneously synchronously and or the like are contemplated by the disclosure. As such some of these features may be mutually contradictory in that they cannot be simultaneously present in a single embodiment. Similarly some features are applicable to one aspect of the innovations and inapplicable to others. In addition the disclosure includes other innovations not presently claimed. Applicant reserves all rights in those presently unclaimed innovations including the right to claim such innovations file additional applications continuations continuations in part divisions and or the like thereof. As such it should be understood that advantages embodiments examples functional features logical operational organizational structural topological and or other aspects of the disclosure are not to be considered limitations on the disclosure as defined by the claims or limitations on equivalents to the claims. It is to be understood that depending on the particular needs and or characteristics of a BDR individual and or enterprise user database configuration and or relational model data type data transmission and or network framework syntax structure and or the like various embodiments of the BDR may be implemented that enable a great deal of flexibility and customization. For example aspects of the BDR may be adapted for single server backup e.g. a server local instantiation of the BDR to back up the local server itself automatic discovery of client devices on a local network and automatic pairing of client devices with a backup aggregator device file based backups and or the like. While various embodiments and discussions of the BDR have been directed to image based hybrid cloud backup services however it is to be understood that the embodiments described herein may be readily configured and or customized for a wide variety of other applications and or implementations.

