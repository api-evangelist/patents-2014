---

title: Personal and pooled virtual machine update
abstract: The updating of virtual machines. A task broker schedules update tasks for multiple virtual machines on the host machine. As each update task is to be performed, if the virtual machine is not currently running, as might be the case for a personal virtual machine, the virtual machine is caused to begin running to allow the update task to be performed on the virtual machine. Also, a pooled virtual machine is updated by copying information from the old virtual hard drive to a location to allow the information to be preserved as the master image is updated. After the update is completed, the virtual machine is formed, associated with the new virtual hard drive, and copied back to the virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164755&OS=09164755&RS=09164755
owner: Microsoft Technology Licensing, LLC
number: 09164755
owner_city: Redmond
owner_country: US
publication_date: 20140604
---
This application is a divisional of U.S. patent application Ser. No. 13 315 270 filed on Dec. 8 2011 entitled PERSONAL AND POOLED VIRTUAL MACHINE UPDATE which issued as U.S. Pat. No. 8 769 519 on Jul. 1 2014 and which application is expressly incorporated herein by reference in its entirety.

A virtual machine is an executable object that is capable of emulating an entire computing system including the operating system potentially also applications and corresponding state. The virtual machine may also have access to virtual hardware such as a virtual hard drive via a hypervisor. Often multiple virtual machines run on the same server and each virtual machine has a corresponding user. The virtual machines provide a complete isolation model such that one user s interaction with the computing system emulated by one virtual machine does not interact or interfere in any way with another virtual machine that emulates another computing system even though those virtual machines operate on the same server. Such virtual machines are helpful in providing remote desktop capability in which the virtual machine provides the underlying processing capability for a client machine which can be remotely located. The virtual machine responds to events such as user input transmitted from the client to the virtual machine and serves up desktop images or graphics instructions representing the desktop state corresponding to the virtual machine state.

Virtual machines can be pooled virtual machines or personal desktop virtual machines also called herein personal virtual machines . Pooled virtual machines are created from the same master image and thus are created in the same initial state. As users interact with the pooled virtual machine the state of the virtual machine may change but that changed state including any user data is not preserved when the user logs off the virtual machine. Thus when a user is allocated a virtual machine from a pool of virtual machines one virtual machine is not initially distinguishable from another.

Personal virtual machines on the other hand may be initially created by a master image. However the personal virtual machine is allocated to the user for more than the duration of just that one session and perhaps permanently. Thus changes made to the state such as user data is preserved even after the user logs off from the corresponding virtual machine and also across virtual machine shutdown cycles. Thus the next time the user runs the personal virtual machine the user may continue where he she left off.

At least one embodiment described herein relates to the updating of virtual machines running on a host machine. In at least one embodiment described herein a task broker schedules update tasks for multiple virtual machines on the host machine. As each update task is to be performed if the virtual machine is not currently running as might be the case if the virtual machine is a personal virtual machine in a saved state then the virtual machine is caused to begin running to allow the update task to be performed on the virtual machine. In some embodiments the task broker may perform load balancing such that not too many virtual machines are woken to perform update tasks.

In at least one embodiment described herein a pooled virtual machine is updated by updating a corresponding master image from which the pooled virtual machine is created. However information is preserved from the old version of the pooled virtual machine to the new version of the pooled virtual machine. Information is saved from the old virtual hard drive to a location external to the old virtual hard drive. The old virtual hard drive is then disconnected from the virtual machine. The virtual machine is then associated with the new virtual hard drive that reflects the update. At least some of the information the information that is to be preserved is then copied back to the updated virtual hard drive. Such copied information might include for example an identifier of the virtual machine and or an identifier for an update instructor.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

In accordance with embodiments described herein the updating of virtual machines is described. As an example a task broker schedules update tasks for multiple virtual machines on the host machine. As each update task is to be performed if the virtual machine is not currently running as might be the case for a personal virtual machine the virtual machine is caused to begin running to allow the update task to be performed on the virtual machine.

Also information is preserved across the updating of a pooled virtual machine in which the corresponding master image is updated. This preservation occurs by copying information from the old virtual hard drive to an external location. The pooled virtual machine is then disconnected from the old virtual hard drive and connected to the new virtual hard drive that reflects the updated master image. At least some of the preserved information is then copied back to the new virtual hard drive. First some introductory discussion regarding computing systems will be described with respect to . Then the embodiments of the virtual machine updating will be described with respect to .

Computing systems are now increasingly taking a wide variety of forms. Computing systems may for example be handheld devices appliances laptop computers desktop computers mainframes distributed computing systems or even devices that have not conventionally been considered a computing system. In this description and in the claims the term computing system is defined broadly as including any device or system or combination thereof that includes at least one physical and tangible processor and a physical and tangible memory capable of having thereon computer executable instructions that may be executed by the processor. The memory may take any form and may depend on the nature and form of the computing system. A computing system may be distributed over a network environment and may include multiple constituent computing systems.

As illustrated in in its most basic configuration a computing system typically includes at least one processing unit and memory . The memory may be physical system memory which may be volatile non volatile or some combination of the two. The term memory may also be used herein to refer to non volatile mass storage such as physical storage media. If the computing system is distributed the processing memory and or storage capability may be distributed as well. As used herein the term module or component can refer to software objects or routines that execute on the computing system. The different components modules engines and services described herein may be implemented as objects or processes that execute on the computing system e.g. as separate threads .

In the description that follows embodiments are described with reference to acts that are performed by one or more computing systems. If such acts are implemented in software one or more processors of the associated computing system that performs the act direct the operation of the computing system in response to having executed computer executable instructions. An example of such an operation involves the manipulation of data. The computer executable instructions and the manipulated data may be stored in the memory of the computing system . Computing system may also contain communication channels that allow the computing system to communicate with other message processors over for example network .

Embodiments described herein may comprise or utilize a special purpose or general purpose computer including computer hardware such as for example one or more processors and system memory as discussed in greater detail below. Embodiments described herein also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions are physical storage media. Computer readable media that carry computer executable instructions are transmission media. Thus by way of example and not limitation embodiments of the invention can comprise at least two distinctly different kinds of computer readable media computer storage media and transmission media.

Computer storage media includes RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. In this description and in the claims a computer program product includes one or more computer storage media having computer executable instructions thereon that when executed by the one or more processors of the computing system perform the function of the computer program product.

A network is defined as one or more data links that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a transmission medium. Transmissions media can include a network and or data links which can be used to carry or desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code means in the form of computer executable instructions or data structures can be transferred automatically from transmission media to computer storage media or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a NIC and then eventually transferred to computer system RAM and or to less volatile computer storage media at a computer system. Thus it should be understood that computer storage media can be included in computer system components that also or even primarily utilize transmission media.

Computer executable instructions comprise for example instructions and data which when executed at a processor cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs pagers routers switches and the like. The invention may also be practiced in distributed system environments where local and remote computer systems which are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network both perform tasks. In a distributed system environment program modules may be located in both local and remote memory storage devices.

In one example embodiment one or more of the virtual machines the task broker or any of the other software components described herein may be instantiated in a memory such as memory of of a computing system such as computing system of in response to the processor s e.g. processor s executing one or more computer executable instructions that are on a computer readable media that are at least part of a computer program product accessed by the computing system. Alternatively or in addition one or more of the virtual machines the task broker or any of the other software components described herein may be operated by the computing system in accordance with one or more embodiments described herein in response to the computing system executing the computer executable instructions.

There is no limit to the update tasks that may be performed by the task broker on the virtual machines . However as an example only an update tasks may include any one or more of the following 1 an operating system upgrade task in which an operating system is installed or upgraded from a prior version 2 an application installation in which a new application is installed on the virtual machine 3 an application upgrade in which a new version of an application is installed or new functionality is added to an existing application and 4 system configuration instructions in which system configuration is changed.

In accordance with the method the task broker identifies an update task to be performed act . For instance suppose that an operating system upgrade is to be performed on all virtual machines running on the host machine . The task broker schedules the update task in a manner that the host machine is not overloaded as will be described further below.

For any given virtual machine the task broker determines whether at a given time it is time to perform the update task on that virtual machine decision block . If not No in decision block the method does not progress but simply waits until the update task is to be performed Yes in decision block . At some point the task broker decides that it is time for the update task to be performed on the virtual machine Yes in decision block .

At that time it might be that the virtual machine is awake i.e. is running No in decision block or it might be that the virtual machine is sleeping i.e. is not running but has saved state Yes in decision block . For instance if the virtual machine were a personal virtual machine the virtual machine is dedicated to a particular user and thus state is saved from one session to the next. In that case the virtual machine may be sleeping in a saved state. This contrasts with a pooled virtual machine in which each virtual machine in the pool always starts with the same initial state and thus state is not saved once the pooled virtual machine is closed.

If the virtual machine is sleeping Yes in decision block the virtual machine is caused to awake act in preparation for updating the virtual machine. For instance the virtual machine may be configured to respond to an instruction from the task broker to begin running. In the case of the virtual machine already being awake and running No in decision block or alternatively after the virtual machine is caused to awake act in the case of the virtual machine having been sleeping Yes in decision block the update task is caused to be performed act on the running virtual machine. For instance the virtual machine may be configured to respond to an instruction from the task broker to perform the update.

When scheduling the update tasks on a larger number of virtual machines the task broker may perform the scheduling in a manner that the host machine is not overloaded due to the upgrade. Accordingly the task broker may determine an impact on the host machine before the causing a particular virtual machine to begin running. For instance the task broker may determine how many prior virtual machines have begun running and are still running to perform the update task. As an example the task broker may be configured not to cause more than a certain number of virtual machines to be running the update task simultaneously. Alternatively or in addition the task broker may also consider performance metrics of the host machine such as processor utilization memory utilization and the like . Thus the task broker causes the update task to be performed without significant impact to the currently running virtual machines and without significantly impacting the overall performance capability of the host machine .

As represented by arrow of and arrow of the task broker may schedule the update task in response to a request from the virtual machine on which the update task is to be performed. Furthermore the task broker is also capable of receiving update tasks via a channel as represented by arrow of and arrow of for more urgent tasks. For instance the arrow may be implemented by a WMI interface that causes the update tasks to be performed right away perhaps in the same day.

Referring to the virtual machine receives an update task to be performed on the virtual machine act . If the virtual machine includes a trigger agent and an update agent the appropriate update agent corresponding to the update instructor initiating the update receives information identifying the update. The update agent calls the trigger agent using the interface which may be an application programming interface causing the trigger agent to communicate a request to schedule the update to the host agent act . The host agent then causes the task broker to schedule the update task in a manner that the host machine is not significantly impacted while performing the update task on the virtual machine .

First the master image from which the pooled virtual machine is created is updated to perform the update task act . This results in the generation of an updated virtual hard drive that is derived from the updated master image. illustrates a state A of the environment in which an updated virtual hard drive is shown as available for future association with the pooled virtual machine . For now however the pooled virtual machine remains associated as represented by element with the first virtual hard drive that reflects a not updated state.

Information that includes information to be preserved across the update is copied act from the first virtual hard drive that is associated with the pooled virtual machine to a location external to the first virtual hard drive. shows state B of the environment in which information is copied to an external location . The external location may be any memory location outside of the virtual hard drive . Examples may include a pre determined folder in the file system or a pre determined system memory location.

The information includes information for which it would be helpful to have restored to a new virtual hard drive that is derived from the master image once the master image is updated. For instance the information may include an identifier for the virtual machine an identifier for an updating instructor and or perhaps some user data if the update is to occur before the user is able to properly complete a task before the update is to occur but in which the user data would assist the users in completing the task. Once again although the method is described with respect to a single pooled virtual machine the method may be performed for many pooled virtual machines and perhaps all pooled virtual machines running from the same master image that is to be updated. Accordingly for some or all of those pooled virtual machines information may be copied to the external location.

The pooled virtual machine is then disconnected from the virtual hard drive act . illustrates this state C in which the virtual machine no longer has access to a virtual hard drive due to the disassociation of act . Furthermore information is shown properly stored in external memory due to the prior copying act . Other virtual machines in the pool may be similarly disassociated from their virtual hard drives.

The pooled virtual machine is then associated with the updated virtual hard drive act . illustrates the state D of this environment in which the pooled virtual machine is associated as represented by element with the updated virtual hard drive .

At least some of the copied information is then copied from the external location to the updated virtual hard drive act . illustrates this state E of the environment in which information is copied back into the updated virtual hard drive .

Accordingly some embodiments described herein provide a mechanism for updating virtual machines running on a host machine in an orderly fashion. Furthermore some embodiments described herein describe a mechanism for performing an update task on pooled virtual machines while keeping some information from prior to the upgrade.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

