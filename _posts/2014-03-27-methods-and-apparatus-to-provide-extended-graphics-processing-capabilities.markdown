---

title: Methods and apparatus to provide extended graphics processing capabilities
abstract: Methods, apparatus, and articles of manufacture to provide extended graphics processing capabilities are disclosed. A disclosed example method involves sending a display panel parameter to a shared library module. The display panel parameter is sent by a programmable driver interface in communication between the shared library module and a graphics hardware device driver. The shared library module includes a first graphics processing capability. The graphics hardware device driver includes a second graphics processing capability different from the first graphics processing capability. The example method also involves performing a render operation via the programmable driver interface on a frame buffer based on the first graphics processing capability. The first graphics processing capability is received at the programmable driver interface from the shared library module based on the display panel parameter. The frame buffer is output to a display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09530386&OS=09530386&RS=09530386
owner: Intel Corporation
number: 09530386
owner_city: Santa Clara
owner_country: US
publication_date: 20140327
---
The present disclosure relates generally to electronic displays and more particularly to methods apparatus and articles of manufacture to provide extended graphics processing capabilities.

Display subsystems of computer architectures and other electronic devices include display interface hardware that converts received information into graphical information to be displayed. The display interface hardware can be a graphics processor or controller that is connected between a central processing unit CPU and a display. In many computer systems and or electronic devices an operating system OS and or applications do not send display information directly to the display interface hardware because operating systems and applications are often not programmed with the capabilities to output display information in whichever specific format is required by the display interface hardware to display graphical information on a display. Instead computer systems and electronic devices communicate display information to OS level device drivers that translate information from OS s and applications into the specific format required by the display interface hardware to show graphical information on a display. Sometimes different display interface hardware will require completely different drivers that will translate information from OS s and applications into different specific formats required by those different display interface hardware.

Sometimes graphics processing features required by some application are not provided in device drivers. To meet such needs some applications are programmed with graphics processing features that are unique to the needs of those applications and that are not provided in a device driver corresponding to particular display interface hardware. For example graphics intensive personal computer PC game programs may be programmed to include custom rendering algorithms to maximize the graphics performance for those PC games. As such graphics intensive PC games can take advantage of better display capabilities to enhance a gaming experience based on the custom rendering algorithms built into the PC game programs.

Examples disclosed herein may be used to provide different extended graphics processing capabilities at a device driver level for use with display interface hardware of an electronic device. For example disclosed examples may be used to implement device drivers that accept third party add ons or plug ins having additional graphics processing capabilities than the graphics processing capabilities that are built in or statically programmed in the device drivers. The teachings of this disclosure are useful in connection with any type of device driver e.g. device drivers for any type of peripheral device or subsystem of an electronic computing device . Examples disclosed herein are described in connection with display capabilities and graphics processing capabilities of electronic computing devices without limitation to such an application.

Prior display subsystems are designed to have a fixed set of graphics processing features that are used across numerous operating system processes and applications. Such graphics processing features are often provided in device drivers from equipment manufacturers of the display interface hardware. For example an equipment manufacturer of a graphics adapter card for use in personal computers PCs will provide a device driver e.g. software and or firmware that enables a particular operating system OS e.g. a Windows operating system an Apple Mac operating system a UNIX operating system etc. to communicate with the graphics adapter card. In this manner when applications call OS level display functions to display information the OS level display functions can use the device driver for the graphics adapter card to send the information to be displayed to the graphics adapter card. That is when the device driver receives the information for display from the OS level display functions the device driver provides the information to the graphics adapter card in a specific manner as required by the graphics adapter card. Implementing display subsystems in this manner allows the OS to be abstracted from the hardware level e.g. the graphics adapter card so that the OS need not be provided with numerous different functions to directly communicate with any graphics adapter hardware that may be incorporated into a computer system. That is instead of increasing the size and complexity of an OS to be able to directly communicate with any graphics adapter hardware the OS is designed so that it can interface with any graphics device driver via a standard interface.

The graphics device driver can be developed and provided by the manufacturer of the graphics adapter hardware. Graphics device drivers are typically developed or programmed by graphics hardware manufacturers to include graphics features that the manufacturer believes are useful across numerous applications and or OS processes. Graphics hardware manufacturers may also program their device drivers to include graphics processing features that they believe will be in high demand among software developers based on the use of such graphics processing features in popular applications e.g. popular graphics intensive PC games .

Prior device drivers for graphics hardware are static or fixed in that third parties cannot add additional features to a device driver without rebuilding the device driver. As such when a software developer programs an application needing a custom graphics processing feature the software developer is required to incorporate such a custom feature into the application. Although this prior approach is a workable solution for a single application the custom feature is available only to that single application and is not available outside of that application for use by other applications. A drawback to this prior approach is that the software developer will need to incorporate the same custom graphics processing feature into every one of the software developer s applications needing the graphics capabilities provided by that custom feature. Another drawback is that the software developer may not be able to take advantage of hardware acceleration capabilities available in the graphics hardware because the software developer implements the custom feature entirely in software so that it can be packaged in the software application.

Another drawback of such prior device drivers is that computer system builders or system integrators cannot easily add graphics processing features to a display subsystem of a computer without building a new device driver to incorporate such additional graphics processing features. For example a PC manufacturer may want to include a gaming specific graphics feature into a PC system targeted to gamers and may want to include a 3D modeling feature in a PC system targeted to professionals such as architects and engineers. To achieve such customer features the PC manufacturer would need to develop its own graphics device driver which can be overly costly and time consuming. In some instances the PC manufacturer may not be able to build its own device driver if the manufacturer of the graphics adapter hardware is not willing to provide hardware specifics or hardware configurations of the graphics adapter hardware needed to build a suitable device driver. Alternatively the PC manufacturer could ask the manufacturer of the graphics adapter hardware used in the PC systems to incorporate the custom graphics features into the device driver developed by the manufacturer of the graphics adapter hardware.

Examples disclosed herein may be used to implement a programmable driver interface PDI framework that enables equipment manufacturers e.g. PC manufacturers original equipment manufacturers OEMs etc. and or software developers to incorporate custom graphics processing features at the device driver level of a display subsystem. In this manner a graphics hardware manufacturer may provide graphics processing units GPUs and or graphics adapter cards e.g. a peripheral component interconnect PCI graphics card installable on a PC motherboard to numerous PC equipment manufacturers along with a PDI device driver. Example PDI device drivers disclosed herein allow the PC equipment manufacturers to add their third party custom graphics processing features to the display subsystems of their PCs so that application developers can make use of the third party custom graphics processing features in their software applications. For example a PC equipment manufacturer may incorporate a custom noise correction algorithm that is popular among software applications often used by its target customer base and another PC equipment manufacturer may incorporate a 3D look up table LUT that is popular among software applications often used by its target customer base. Examples disclosed herein enable such third party customization by allowing third parties to add custom graphics processing features at the device driver level so that equipment manufacturers can use hardware present on GPUs and or display panels to implement their custom features.

Example PDI framework techniques disclosed herein enable custom image processing algorithms to be plugged into device driver stacks of graphics hardware. In some examples the disclosed PDI framework is used in connection with shared libraries which include a collection of functions that are shared across numerous applications that have access to that shared library. For example example PDI framework techniques disclosed herein may be used to load secured custom shared libraries for use with a display graphics device driver. The secured custom shared library can have custom graphics algorithms that may be used by any application that accesses the corresponding display device driver. Shared libraries are often referred to as dynamic link libraries DLLs which are Microsoft s implementation of shared libraries.

In examples disclosed herein after a custom shared library is loaded for use with a display device driver as part of the example disclosed PDI framework one or more image processing algorithms provided in the custom shared library become available to applications in a GPU friendly language e.g. a pixel shader . Using the example PDI framework to load custom shared libraries enables loading custom image processing algorithms in a runtime environment in the same way for access by multiple applications. In addition example PDI frameworks disclosed herein ensure that all display frame buffers are rendered via the additional custom image processing provided by the custom shared library. Some disclosed example PDI frameworks may also be integrated with capabilities to compensate for different environmental lighting conditions such as ambient color temperature ambient lighting brightness panel backlighting brightness etc. Environmental lighting conditions may be affected by the type of light in which a display is used the time of day the weather e.g. an overcast day versus a sunny day whether backlighting or frontlighting is being used in connection with the display etc.

Disclosed example methods involve sending a display panel parameter to a shared library module. In some such examples the display panel parameter is sent by a programmable driver interface in communication between the shared library module and a device driver for graphics hardware. The shared library module includes a first graphics processing capability. The device driver includes a second graphics processing capability different from the first graphics processing capability. Some example methods also involve performing a render operation via the programmable driver interface on a frame buffer based on the first graphics processing capability. In some such examples first graphics processing capability is received at the programmable driver interface from the shared library module based on the display panel parameter. The frame buffer is output to a display. In some examples the rendering operation is performed on a first copy of the frame buffer maintained by the programmable driver interface separate from a second copy of the frame buffer maintained by the device driver. In some examples the installed shared library module is in communication with the device driver via the programmable driver interface after the shared library module successfully completes a secure signing validation based on a certification process from a provider of the graphics hardware. In some examples the shared library module is provided by a third party separate from a provider of the device driver and the graphics hardware. Some examples also involve installing the shared library module in communication with the device driver via the programmable driver interface after the device driver is provided as a compiled object code file. In some examples changes in environmental lighting conditions changes how frame buffers are rendered. For example a render operation of a first frame buffer may be based on first graphics processing parameters corresponding to first environmental lighting conditions information and a second render operation of a second frame buffer may be based on second graphics processing parameters corresponding to second environmental lighting conditions information obtained based on a notification from a sensor monitor. Examples disclosed herein also include computer readable storage mediums comprising instructions that when executed cause a machine to perform operations of example methods disclosed herein.

Disclosed example apparatus include an extended graphics processing capabilities database to receive a display panel parameter and a programmable driver interface that is in communication between the extended graphics processing capabilities database and a device driver for graphics hardware. In disclosed examples the extended graphics processing capabilities database includes a first graphics processing capability and the device driver includes a second graphics processing capability. The programmable driver interface of disclosed examples is configured to perform a render operation on a frame buffer based on the first graphics processing capability received at the programmable driver interface from the extended graphics processing capabilities database based on the display panel parameter. Disclosed example apparatus also include graphics hardware that includes a graphics processing unit to output the frame buffer to a display. In some examples the programmable driver interface is configured to install the extended graphics processing capabilities database in communication with the device driver after the extended graphics processing capabilities database successfully completes a secure signing validation based on a certification process from a provider of the graphics hardware. In some examples the extended graphics processing capabilities database is provided by a third party separate from a provider of the device driver and the graphics hardware. In some examples the programmable driver interface is configured to install the extended graphics processing capabilities database in communication with the device driver after the device driver is provided as a compiled object code file. In some examples the programmable driver interface is configured to perform the render operation on the frame buffer by performing the render operation on a first copy of the frame buffer maintained by the programmable driver interface separate from a second copy of the frame buffer maintained by the device driver. In some examples the programmable driver interface is configured to perform the render operation on the frame buffer based on first graphics processing parameters corresponding to first environmental lighting conditions information and the programmable driver interface is configured to perform a second render operation on a second frame buffer based on second graphics processing parameters corresponding to second environmental lighting conditions information obtained based on a notification from a sensor monitor. In some examples when the graphics hardware device driver is compiled object code the shared library module provides the first graphics processing capability via the programmable driver interface without recompiling the graphics hardware device driver.

Some disclosed example apparatus include a programmable driver interface means for performing a render operation on a frame buffer based on a first graphics processing capability received from an extended graphics processing capabilities database based on a display panel parameter. The programmable driver interface means may be in communication with a graphics hardware device driver. The graphics hardware device driver includes a second graphics processing capability different from the first graphics processing capability. Some such disclosed example apparatus also include graphics hardware means for outputting the frame buffer to a display. In some examples the programmable driver interface means may be used for installing the extended graphics processing capabilities database in communication with the device driver after the extended graphics processing capabilities database successfully completes a secure signing validation based on a certification process from a provider of the graphics hardware.

Some disclosed example apparatus include graphics hardware to present information on a hardware display and a device driver corresponding to the graphics hardware. The device driver includes a first graphics processing capability to process the information for presenting on the hardware display. Disclosed example apparatus also include a programmable driver interface in communication with the device driver. The programmable driver interface is to enable a third party to add a second graphics processing capability for use with the graphics hardware without recompiling the device driver. In some examples the graphics hardware includes a graphics processing unit. In some examples the first graphics processing capability is in a compiled object code file of the device driver when the third party is enabled to add the second graphics processing capability via the programmable driver interface. In some such examples the programmable driver interface enables the third party to add the second graphics processing capability without recompiling the device driver by adding the second graphics processing capability in at least one of a shared library module plugin or a database to be in communication with the programmable driver interface without recompiling a source code file corresponding to the compiled object code file. In some examples the second graphics processing capability is accessible by an operating system and a plurality of applications in a same runtime environment. In some examples the device driver and the programmable driver interface enable an operating system and an application to send the information to the graphics hardware without needing specific hardware configurations and or communication configurations of the graphics hardware.

During the development phase of the device driver of the illustrated example programming personnel e.g. one or more programmers employed or contracted by the graphics hardware provider write s software and or firmware into source code files using a human readable programming language that allows the programming personnel to add modify and or delete functionality from the source code files. The human readable source code files are not executable by a processor e.g. a central processing unit CPU of the computing machine of . However when the programming personnel finishes programming the graphics hardware processing functions into the source code files the source code files are compiled into one or more machine readable and executable object code files that form the device driver of the illustrated example. In this example the object code files are executable by a processor but do not contain human readable language that would allow a programmer to modify and or add additional capabilities to the device driver . Thus when the graphics hardware provider provides the device driver and the graphics hardware to an equipment manufacturer e.g. the equipment manufacturer of the computing machine for installation and use in the computing machine the device driver is static in that it is not modifiable by the equipment manufacturer to customize the display capabilities of the computing machine by adding additional display graphics processing capabilities.

Examples disclosed herein provide the PDI to enable a third party to provide extended graphics processing capabilities in the shared library module plugin to supplement the graphics processing capabilities of the device driver . For example the third party may develop additional graphics processing capabilities that are not incorporated into the device driver but that the third party elects to enable for use across one or more applications and or for use on an OS to process graphics information for displaying on the hardware display . Thus even if the graphics hardware provider does not include some desirable functionality in the device driver for use with the graphics hardware the PDI of the illustrated example which is in communication with the device driver enables the third party to provide any additional functionality in the shared library module plugin that is not already programmed in the device driver e.g. provide one or more graphics processing capabilities in the shared library module plugin that is are different from the graphics processing capabilities of the device driver so that graphics processing capabilities of the device driver and the graphics hardware can be extended even after the graphics hardware provider delivers the non modifiable device driver .

In some examples the third party may be separate from the equipment manufacturer and the graphics hardware provider . For example the third party may be an application developer that develops multiple applications that use advanced graphics processing functions that are not incorporated in the device driver . In such examples the third party may program the advanced graphics processing functions in the shared library module plugin so that those functions can be accessed across numerous applications executed by the computing machine. In other examples the third party and the equipment manufacturer may be the same entity. For example the equipment manufacturer may develop and manufacture the computing machine for a particular market segment that uses particular types of graphics processing capabilities that are not in the device driver . For example the equipment manufacturer may target the computing machine to PC gamers and may want to include a gaming specific graphics feature in the shared library module plugin . Alternatively the equipment manufacturer may target the computing machine to professionals such as architects and engineers and may want to include a 3D modeling feature in the shared library module plugin .

In some examples the graphics hardware provider may provide a shared library module plugin instead of or in addition to a shared library module plugin being provided by the third party . For example the graphics hardware provider may provide a baseline of functionality in the device driver that includes typical graphics processing capabilities used by a majority of applications and or an operating system. To supplement the graphics processing capabilities of the baseline device driver with unique or specific graphics processing capabilities used by specific market segments the graphics hardware provider may provide one or more shared library module plugins to interface with the PDI .

Regardless of what entity provides shared library module plugins in addition to providing additional graphics processing capabilities shared library module plugins are also useful to protect intellectual property in the additional graphics processing capabilities. For example the third party may develop a proprietary graphics processing capability for which it wishes to control usage rights. For example the third party may want to provide a shared library module plugin only to customers that are willing to pay for the additional graphics processing capabilities in the shared library module plugin and or only to customers that execute an end user license agreement EULA .

In some examples the PDI is provided with security features that allow only secured third party shared library plugins e.g. the shared library module plugin to be loaded installed. For example when the PDI is provided with such security features the PDI requires that third party shared library plugins successfully pass a secure signing process. Such a signing process may be based on a certification process e.g. based on a digital certificate provided by the graphics hardware provider .

In the illustrated example the graphics hardware provider provides the device driver and the PDI . The device driver of the illustrated example may be run as a user mode driver UMD and or as a kernel mode driver KMD . A UMD may be instantiated at runtime for a particular application so that the UMD only has access to memory space allocated to the particular application. A KMD may be instantiated at runtime to access memory space of an operating system that is allocated for processes of an OS . In the illustrated example the example PDI is in communication with the UMD the UMD is in communication with the OS and the OS is in communication with the KMD . In the example runtime environment of the UMD is configured to render processes requested by an application. The example KMD is configured to submit commands and or display information to the graphics hardware and is also configured to perform graphics processing functions programmed into the device driver .

In the illustrated example the PDI is a layer on the UMD and operates to intercept rendering requests e.g. requests to render create graphics such as GFX images text video etc. and presentation requests e.g. requests to display information on the hardware display . In addition the example PDI maintains it s own copies of frame buffers e.g. memory locations at which graphics are stored in memory during a rendering phase . For presentation requests e.g. a function call from an application or an OS involving graphics processing capabilities provided by the shared library module plugin the example PDI performs one or more extra render operation s to create a new frame buffer based on one or more graphics processing capability ies in the shared library module plugin and to display the newly rendered frame buffer on the hardware display . In the illustrated example the PDI provides the frame buffers that it generates for displaying on the hardware display instead of the device driver providing OS frame buffers for displaying on the hardware display . In this manner the frame buffers output to the hardware display are display buffers that have been processed using the one or more extended graphics processing capability ies in the shared library module plugin .

In the illustrated example the graphics hardware provider also provides an example sensor monitor . The sensor monitor of the illustrated example uses OS provided services to register for sensor event notifications corresponding to changes in environmental lighting conditions e.g. detected by a light sensor such as ambient color temperature ambient lighting brightness panel backlighting brightness etc. that affect viewing of the hardware display . Environmental lighting conditions may be affected by the type of light in which a display is used the time of day the weather e.g. an overcast day versus a sunny day whether backlighting or frontlighting is being used in connection with the display etc. In the illustrated example when the sensor monitor receives a sensor event notification from the OS the sensor monitor communicates sensor information to the example PDI about changes in ambient light color temperature panel backlighting and or any other environmental lighting condition. The example PDI of then sends the sensor information to the shared library module plugin .

In the illustrated example an OS provider provides the example OS example graphics runtime application programming interfaces APIs and an example graphical user interface GUI manager . The OS of the illustrated example may be for example a Windows OS an Apple Mac OS a UNIX OS a Linux OS a portable device OS an embedded OS and or any other OS. The graphics runtime APIs are a collection of graphics APIs that can be called by applications to process and or display graphics information. Example graphics runtime APIs are DirectX runtime APIs provided by Microsoft corporation. The example GUI manager is provided to manage graphical user interface elements of the OS such as windows controls menus etc. with which a user interfaces on a screen. An example GUI manager is the Microsoft Desktop Window Manager DWM .

In the illustrated example an application developer provides applications that call the graphic runtime APIs to use graphics processing capabilities of the PDI and or the UMD . The application developer may provide different applications that use the graphics processing capabilities of the PDI . An example application shown in is a Direct3D D3D full screen application .

The illustrated example of shows how the example interface handshake is performed between the example PDI and the example shared library module plugin . In the illustrated example the PDI sends one or more display panel parameter s to the example shared library module plugin . In the illustrated example the one or more display panel parameter s e.g. gamma information color gamut information etc. correspond to hardware configurations display capabilities features etc. of the graphics hardware and or the hardware display . The example shared library module plugin returns one or more graphics processing capabilities e.g. instructions functions algorithms etc. provided in the shared library module plugin based on the one or more display panel parameter s . The example PDI uses the graphics processing capabilities from the shared library module plugin to process frame buffers of display data before providing the processed frame buffers for presenting via the hardware display .

In the illustrated example the PDI sends environmental lighting conditions information to the shared library module plugin . In response to the environmental lighting conditions information the example shared library module plugin provides one or more graphics processing parameter s e.g. register values for the graphics hardware brightness settings etc. to the example PDI . For example if a graphics processing capability provided by the shared library module plugin to the PDI is a pixel shader the graphics processing parameters may include pixel shader parameters to enable the PDI to use the pixel shader capabilities of the shared library module plugin . That is the graphics processing parameters provide the PDI with settings or values to be used by the PDI to implement the graphics processing capabilities on one or more frame buffers. In some examples when the sensor monitor receives a notification event from the OS of a change in environmental lighting conditions the example PDI informs the shared library module plugin of the updated graphics processing parameters representative of the changes. In response to the updated graphics processing parameters the shared library module plugin sends one or more updated graphics processing parameters to the example PDI to apply to subsequent frame buffers of display data before presenting the frame buffers on the hardware display . For example when the environmental lighting conditions change visual effects applied to frame buffers may need to be changed to compensate for the new lighting conditions so that graphics on the hardware display appear at the same or similar quality sought to be achieved by the third party regardless of changes in environmental lighting characteristics.

In some examples the example shared library module plugin of is able to run CPU code e.g. machine instructions executed by a central processing unit CPU . However some entities may not want to allow use of a plugin that is able to run such CPU code. As such illustrates another example that may be used to provide extended graphics processing capabilities for use with the graphics hardware and the hardware display of without needing to provide a plugin that is capable of running CPU code. In the illustrated example of instead of using the shared library module plugin of which can run CPU code an example extended graphics processing capabilities database shown in includes extended graphics processing capabilities to be shared across numerous applications and OS processes. The example of is useful to increase security in computer processing because the database is not able to run CPU code. For example using the example database of extended graphics processing capabilities decreases the risk of intrusion by malicious code. That is while malicious code could infiltrate the computing machine of through a shared library such malicious code is less likely to infiltrate the computing machine through the database because the database does not run CPU code. As such some entities may find the example of useful for use in secure computing environments.

In the illustrated example of the PDI is in communication with the example database . The example database may also be provided by a third party such as the third party graphics capabilities provider of . The example database is provided with one or more example graphics processing capabilities one or more example temporary extra surface s example register settings and initial values and an example mapping table to map environmental lighting condition values to register values and brightness settings. In the illustrated example the graphics processing capabilities specify extended graphics processing capabilities that are provided by the database . In the illustrated example the PDI sends the database a graphics processing capabilities request to request the graphics processing capabilities . For example if the graphics processing capabilities include a pixel shader the database may send the PDI a shader file that specifies the type of pixel shader capabilities provided by the database . In some examples the graphics processing capabilities request includes display panel parameters e.g. gamma information color gamut information etc. corresponding to hardware configurations display capabilities features etc. of the graphics hardware and or the hardware display of .

In the illustrated example the temporary extra surface s provide example surface type information such as the type of display graphics information that is to be rendered such as an engine managed surface e.g. a device independent surface a device managed surface etc. In the illustrated example the PDI sends a temporary surfaces request to the database to request one or more of the temporary extra surfaces . In the illustrated example the temporary extra surfaces are temporary because they are used to temporarily replace or override a surface set in the UMD .

The register settings and initial values of the illustrated example specify hardware registers of the graphics hardware and their configuration values to be used for different graphics processing capabilities provided by the database . In the example mapping table values of environmental lighting conditions e.g. ambient color temperature ambient lighting brightness panel backlighting brightness etc. are mapped to register values e.g. register values for the graphics hardware and brightness settings for use with the graphics hardware to implement the graphics processing capabilities provided by the database . The register values and brightness settings of the mapping table provide the same or similar type of information as provided in the graphics processing parameters of by the shared library module plugin . For example if a graphics processing capability provided by the database is a pixel shader the register values and brightness settings of the example mapping table include pixel shader parameters to enable the PDI to use the pixel shader capabilities of the database . That is the register values and brightness settings of the example mapping table provide graphics processing parameters to the PDI to specify settings or values for use with the graphics hardware to apply the graphics processing capabilities to one or more frame buffers. For example when the PDI provides environmental lighting condition measures e.g. the environmental lighting conditions information of to the database the database returns register values and brightness settings to the PDI that correspond to the environmental lighting condition measures. In the illustrated example the PDI sends a graphics processing parameter request to the database to provide the database with the environmental lighting conditions information to request corresponding register values and brightness settings from the mapping table . In the illustrated example when the sensor monitor notifies the PDI of updated environmental lighting conditions information the PDI provides the updated environmental lighting conditions information to the database . In response the database provides the PDI with updated graphics processing parameters from the mapping table .

To update the database with other extended graphics processing capabilities the third party of can provide updated versions of the database storing additional information in the graphics processing capabilities the temporary extra surface s the register settings and or initial values and or the mapping table . In some examples the PDI may be provided with security features that allow only secured databases to be loaded. For example when the PDI is provided with such security features the PDI requires that third party databases successfully pass a secure signing process. Such a signing process may be based on a certification process provided by the graphics hardware provider .

In the illustrated example the PDI sends the updated environmental lighting conditions information to the shared library module plugin and or to the database using a write event . For example the sensor monitor of the example of sends the write event including the updated environmental lighting conditions information to a communication mailbox of the OS . In the illustrated example to receive updated environmental lighting conditions information at the PDI the PDI uses a register callback communication to register a callback with the OS . The register callback from the PDI of the illustrated example is to register a callback corresponding to the sensor monitor . In this manner when the sensor monitor writes updated environmental lighting conditions information to the communication mailbox the OS can use an event callback registered to the PDI to send the PDI the updated environmental lighting conditions information from the communication mailbox .

While example manners of implementing the example computing machine e.g. an apparatus of including the example PDI the example device driver the example shared library module plugin and the example sensor monitor are illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example PDI the example device driver the example shared library module plugin and the example sensor monitor of and or more generally the example computing machine of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example PDI the example device driver the example shared library module plugin and the example sensor monitor and or more generally the example computing machine could be implemented by one or more analog or digital circuit s logic circuits programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s . When reading any of the apparatus or system claims of this patent to cover a purely software and or firmware implementation at least one of the example PDI the example device driver the example shared library module plugin and or the example sensor monitor is are hereby expressly defined to include a tangible computer readable storage device or storage disk such as a memory a digital versatile disk DVD a compact disk CD a Blu ray disk etc. storing the software and or firmware. Further still the example computing machine of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

In some examples the PDI is implemented using any suitable programmable driver interface means. Such driver interface means are in communication with a graphics hardware device driver e.g. the device driver of . Example programmable driver interface means include any or all of a logical circuit a hardware processor an ASIC etc. configured or programmed using machine readable instructions to perform the operations and processes disclosed herein in connection with the PDI . In addition in some examples the graphics hardware of may be implemented using any suitable graphics hardware means for receiving frame buffers from the programmable driver interface means and for outputting the frame buffers for display on the hardware display of . Example graphics hardware means include any or all of a GPU a graphics adapter card a graphics chipset etc. Such graphics hardware means may be in communication between the hardware display and the programmable driver interface means and between the hardware display and the graphics hardware device driver .

In some examples the example PDI disclosed herein requires the graphics hardware provider to modify a UMD e.g. an original user mode driver for a particular GPU to create the UMD of so that the PDI can maintain context information across the UMD and the example PDI . For example by maintaining such context when the OS and or the UMD refers to a shared private OS resource the example PDI is aware of how to access the shared private OS resource. To implement such context awareness across the UMD and the example PDI the UMD facilitates storing private resource information that may be subsequently required by the example PDI . Although the process flow of is described in connection with providing the shared library module plugin the same or a similar process flow may be used to provide the extended graphics process capabilities database of for use with the PDI in the computing machine .

A flowchart representative of example machine readable instructions for implementing the example PDI of and or the computing machine of is shown in . In this example the machine readable instructions comprise a program for execution by a processor such as the processor shown in the example processor platform discussed below in connection with . The program may be embodied in software stored on a tangible computer readable storage medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD a Blu ray disk or a memory associated with the processor but the entire program and or parts thereof could alternatively be executed by a device other than the processor and or embodied in firmware or dedicated hardware. Further although the example program is described with reference to the flowchart illustrated in many other methods of implementing the example PDI and or the computing machine may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example process of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a tangible computer readable storage medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable storage medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein tangible computer readable storage medium and tangible machine readable storage medium are used interchangeably. Additionally or alternatively the example process of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a non transitory computer and or machine readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein when the phrase at least is used as the transition term in a preamble of a claim it is open ended in the same manner as the term comprising is open ended.

The example program of may be used to provide extended graphics processing capabilities based on the shared library module plugin of and or based on the extended graphics processing capabilities database of . That is the example program of may be used in connection with the example shared library module plugin without use of the example database . Alternatively the example program of may be used in connection with the example database without use of the example shared library module plugin . As such example operations of are described below in connection with the shared library module plugin and the database even though the example program of does not require concurrent use of both the example shared library module plugin and the example database .

The program of begins at block at which the example PDI performs a signing validation of the shared library module plugin or the extended graphics processing capabilities database . For example the signature validation may be based on a certification process e.g. based on a digital certificate provided by the graphics hardware provider . The example PDI installs the shared library module plugin or the database block . In the illustrated example the PDI installs the shared library plugin or the database when the PDI has confirmed a successful signing validation at block . For example at block the PDI may install the shared library module plugin so that the PDI is in communication between the device driver and the shared library module plugin . Alternatively at block the PDI may install the database so that the PDI is in communication between the device driver and the database . In the illustrated example the PDI installs the shared library module plugin and or the database after the device driver is provided as compiled object code e.g. one or more compiled object code files by for example the graphics hardware provider .

The example PDI sends one or more display panel parameter s to the shared library module plugin or the database block . For example at block the PDI may send the one or more display panel parameter s to the shared library module plugin as described above in connection with . Alternatively at block the PDI may send one or more display panel parameter s to the database as part of the graphics processing capabilities request as described above in connection with . The example PDI receives one or more graphics processing capabilities block . For example at block the example PDI may receive the one or more graphics processing capabilities from the shared library module plugin as described above in connection with in response to the one or more display parameters that the PDI sent at block . Alternatively at block the example PDI may receive the one or more graphics processing capabilities from the database as described above in connection with in response to the one or more display parameters that the PDI sent at block .

The example PDI sends one or more environmental lighting condition s to the shared library module plugin or the database block . For example at block the PDI may send the environmental lighting conditions information to the shared library module plugin as described above in connection with . Alternatively at block the PDI may send environmental lighting conditions to the database in the graphics processing parameter request as described above in connection with . The example PDI receives one or more graphics processing parameter s block . For example at block the PDI may receive the one or more graphics processing parameter s from the shared library module plugin as described above in connection with in response to the environmental lighting conditions information sent by the PDI at block . Alternatively at block the example PDI may receive the one or more graphics processing parameter s including register values and brightness settings from the mapping table of the database as described above in connection with in response to the environmental lighting conditions information sent by the PDI at block .

The example PDI renders a frame buffer block . For example the PDI may render the frame buffer based on the one or more graphics processing capabilities received at block and or based on the one or more graphics processing parameters received at block . In some examples the PDI performs the render operation of block on a copy of a frame buffer maintained by the PDI separate from frame buffers maintained by the device driver . In this manner the PDI may processes and render graphics information using the graphics processing capabilities and or graphics processing parameters that are provided by the shared library module plugin or the database without needing to access frame buffers maintained by the device driver which does not have the graphics processing capabilities provided by the shared library module plugin or the database .

At block the example PDI outputs the frame buffer for displaying. For example the PDI may output the frame buffer to the hardware display via the graphics hardware of to display the frame buffer via the hardware display . The example PDI determines whether there is another frame buffer to render block . When there is another frame buffer to render block the example PDI determines whether there are updated environmental lighting conditions block . In the illustrated example the PDI receives a sensor event notification from the sensor monitor of when a change in environmental lighting is detected e.g. by a light sensor . As such when the example PDI receives a sensor event notification from the sensor monitor then the PDI determines at block that there are one or more updated environmental lighting condition s . When there are updated environmental lighting conditions control returns to block so that the example PDI can send the updated environmental lighting conditions to the shared library module plugin or the database to receive one or more updated graphics processing parameter s at block corresponding to the updated environmental lighting conditions. Thus frame buffers rendered by the PDI at block may be rendered using different graphics processing parameters corresponding to different environmental lighting conditions based on when environmental lighting conditions change. For example a previous frame buffer rendered at block may be rendered based on first graphics processing parameters corresponding to first environmental lighting conditions and a subsequent frame buffer rendered at block may be rendered based on second graphics processing parameters corresponding to second environmental lighting conditions different from the first environmental lighting conditions. For instances in which updated environmental lighting conditions are not detected at block control returns to block at which the PDI renders a next frame buffer based on the same graphics processing parameter s that the PDI used to render the previous frame buffer. When the PDI determines at block that there is not another frame buffer to render the example process of ends.

The processor platform of the illustrated example includes a processor . The processor of the illustrated example is hardware. For example the processor can be implemented by one or more integrated circuits logic circuits microprocessors or controllers from any desired family or manufacturer.

The processor of the illustrated example includes a local memory e.g. a cache . The processor of the illustrated example is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is controlled by a memory controller.

The processor platform of the illustrated example also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a PCI express interface.

In the illustrated example one or more input devices are connected to the interface circuit . The input device s permit s a user to enter data and commands into the processor . The input device s can be implemented by for example an audio sensor a microphone a camera still or video a keyboard a button a mouse a touchscreen a track pad a trackball isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit of the illustrated example. The output devices can be implemented for example by display devices e.g. a light emitting diode LED an organic light emitting diode OLED a liquid crystal display a cathode ray tube display CRT a touchscreen a tactile output device a light emitting diode LED a printer and or speakers . The interface circuit of the illustrated example thus typically includes a graphics driver card a graphics driver chip or a graphics driver processor.

The interface circuit of the illustrated example also includes a communication device such as a transmitter a receiver a transceiver a modem and or network interface card to facilitate exchange of data with external machines e.g. computing devices of any kind via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The processor platform of the illustrated example also includes one or more mass storage devices for storing software and or data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives Blu ray disk drives RAID systems and digital versatile disk DVD drives.

Coded instructions which may be used to implement the machine readable instructions of may be stored in the mass storage device in the volatile memory in the non volatile memory and or on a removable tangible computer readable storage medium such as a CD or DVD.

From the foregoing it will be appreciated that methods apparatus and articles of manufacture have been disclosed to enable third parties to provide extended graphics processing capabilities for use with graphics hardware of computing machines without needing to rebuild new device drivers provided by manufacturers of the graphics hardware. In this manner examples disclosed herein are useful for equipment manufacturers such as PC manufacturers or manufacturers of other electronic devices to customize the graphics capabilities of machines without needing the manufacturer or provider of the graphics hardware to agree to incorporate such custom capabilities into the device driver for the graphics hardware. In addition examples disclosed herein enable equipment manufacturers or third parties to protect their intellectual property in custom graphics processing capabilities by maintaining control of such custom graphics processing capabilities when determining which machines are to be equipped with such custom features. That is by not needing to provide the custom graphics processing capabilities to the hardware manufacturer or provider of the graphics hardware for incorporating into a device driver e.g. the device driver of the custom graphics processing capabilities are less likely to be freely distributed to any machine or end user without proper credit recognition and or compensation to the owner of the custom graphic processing capabilities. As such examples disclosed herein may be used by some equipment manufacturers or third parties to differentiate themselves from other equipment manufacturers or third parties based on their custom graphic processing capabilities.

Although certain example methods apparatus and articles of manufacture have been disclosed herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.

