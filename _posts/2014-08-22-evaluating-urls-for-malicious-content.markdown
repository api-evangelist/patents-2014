---

title: Evaluating URLS for malicious content
abstract: A system includes one or more “BotMagnet” modules that are exposed to infection by malicious code. The BotMagnets may include one or more virtual machines hosing operating systems in which malicious code may be installed and executed without exposing sensitive data or other parts of a network. In particular, outbound traffic may be transmitted to a Sinkhole module that implements a service requested by the outbound traffic and transmits responses to the malicious code executing within the BotMagnet. Requests by a user system for a resource at a URL may be received by a firewall, a honey client module may access the URL and permit installation of malicious code or other malicious activities. In response to detecting malicious activities, the honey client module characterizes the malicious activity to generate a descriptor used to detect malicious code in other systems. The URL may also be blacklisted by the firewall.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09356950&OS=09356950&RS=09356950
owner: ATTIVO NETWORKS INC.
number: 09356950
owner_city: Fremont
owner_country: US
publication_date: 20140822
---
This application claims the benefit of U.S. Provisional Application Ser. No. 61 989 965 filed May 7 2014 and entitled Distributed System for Bot Detection. This application is also a Continuation in part of U.S. application Ser. No. 14 458 026 filed Aug. 12 2014 and entitled Distributed System for Bot Detection both of which are hereby incorporated herein by reference in its entirety.

In information technology IT and networking the word Bot is derived from robot and refers to an automated process that interacts with other network elements. Bots may be configured to automate tasks that would otherwise be conducted by a human being. A growing problem is the use of Bots by malicious entities to attack and gain unauthorized access to network connected computers and other network resources via the Internet.

One type of Bot process may initially run on a computer controlled by the malicious entity. It may probe victim networks and computers for vulnerabilities and upon finding such exploits them to access information often personal information of individuals stored in computers. A Bot may install a program known as malware on a victim computer merely for the malicious purpose of randomly displaying rude messages or perhaps even damaging the victim s file system. The malware program may then perform one or more automated processes which itself may be a type of Bot.

In recent years Bot exploits have become much more sophisticated and financially rewarding for the malicious entities. For example the modern Bots may be programmed to access the victim s computer and surreptitiously access certain websites and click on advertisements that are displayed there. In pay per click type advertising each click from a potential buyer generates revenue for the displaying website. Thus clicks generated by the Bot could create undeserved revenue for the displaying website. In the art this is called click fraud. 

The problem is greatly compounded by the fact that Bots on a victim s computer may be programmed to probe the network for additional victims and install itself on their computers. Victims on the same local network as the first victim computer may be particularly vulnerable because they may exist behind any corporate firewall or intrusion detection system designed to protect against Bots or malware. This is because many local computers are often addressed privately and may not be visible outside the corporate firewall but can be readily accessed by other local computers. Also local computers may erroneously assume that communications from other local computers are benign. Thus once one local computer is infected the number of infected computers may increase significantly.

Bots that have been installed on victim computers may maintain communication with what is known in the art as a Command and Control facility C C operated by the malicious entity. A collection of such Bots is known in the art as a Botnet and has the potential to cause widespread damage which may not even be evident to victim computer systems. Click fraud is an example that can go unseen initially. If a large Botnet were programmed to cause widespread click fraud it could potentially generate a significant number of clicks from a diverse set of fraudulent buyers causing substantial adverse economic impact. A large Botnet could also be used to cause a large amount of spurious traffic to overwhelm and shut down a targeted website. This is known in the art as a distributed denial of service attack. 

Besides trying to keep Bots out of a local network conventional security systems also focus on trying to detect the presence of Bots on infected computers within the local network. One way to do this is to analyze the behavior of a known infected computer and generate a signature according to a schema to summarize the behavior of the Bot. A schema is a multi element template for summary information and a signature is a schema that is populated with a particular set of values. A detailed example is given later. Typically such a schema and signature would be created by the security company that is protecting the local network distributed to customers and then used by anti virus anti malware software installed on each computer in the customer s network to fight off known Bots. However the usefulness of this approach is limited because the ability for any anti malware or anti virus software operating on any single local computer to ascertain the number of details in and the sophistication of the schema and signature is limited by what can be observed. Also this approach is typically not effective against attacks early in the lifetime of a new Bot known in the art as Zero Day Attacks because developers of the anti malware and anti virus software do not have the opportunity or time to create a corresponding schema and signature for a new Bot.

Honeypots are known in the art as counter deceptive decoy systems that may be deployed along with production systems to distract attackers such as Bots from particular targets luring attacker hackers away in order to observe and learn the malicious behavior in a controlled environment as well as to trap the attackers.

A Honeypot appears to an attacker to be a legitimate active component of the network containing information or resources that would be valuable to attackers but is actually isolated and monitored. The idea is similar to the police baiting a criminal and then doing undercover surveillance.

So called research Honeypots can capture a lot of information about specific known threats but are complex and expensive to deploy and maintain and are therefore used primarily by research military or government organizations. In a production network it is simpler and more economical to deploy a low interaction Honeypot but such a Honeypot typically can collect much less information about an attack and its lifecycle and may be ineffective at identifying and characterizing Zero Day Attacks. A production Honeypot even with high interaction may be designed more to waste the attacker s time that to analyze and characterize its behavior and share the detailed characterization with a larger community.

As will be seen the systems and methods described herein address shortcomings such as these in an elegant manner by providing a highly structured distributed and extensible means for constructing very detailed characterizations of attack behaviors and for sharing such characterizations within a local network and beyond

It will be readily understood that the components of the invention as generally described and illustrated in the Figures herein could be arranged and designed in a wide variety of different configurations. Thus the following more detailed description of the embodiments of the invention as represented in the Figures is not intended to limit the scope of the invention as claimed but is merely representative of certain examples of presently contemplated embodiments in accordance with the invention. The presently described embodiments will be best understood by reference to the drawings wherein like parts are designated by like numerals throughout.

Embodiments in accordance with the invention may be embodied as an apparatus method or computer program product. Accordingly the invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a module or system. Furthermore the invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable media may be utilized. For example a computer readable medium may include one or more of a portable computer diskette a hard disk a random access memory RAM device a read only memory ROM device an erasable programmable read only memory EPROM or Flash memory device a portable compact disc read only memory CDROM an optical storage device and a magnetic storage device. In selected embodiments a computer readable medium may comprise any non transitory medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

Computer program code for carrying out operations of the invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages and may also use descriptive or markup languages such as HTML XML JSON and the like. The program code may execute entirely on a computer system as a stand alone software package on a stand alone hardware unit partly on a remote computer spaced some distance from the computer or entirely on a remote computer or server. In the latter scenario the remote computer may be connected to the computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions or code. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a non transitory computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Conventional honeypots have limitations and shortcomings in areas related to methods of data collection engagement detection supporting multiple operating systems OSes services and applications scaling number of subnets and IP addresses watched tapping information from the cloud as well from other sources correlating multi dimensional events identifying Bots generating incident reports and are not generally designed to integrate with other existing security solutions in the cloud

The systems and methods disclosed herein provide an improved bot detection system that addresses the foregoing limitations of conventional approaches. In one embodiment virtualization is used to host multiple guest operating systems GuestOSes implementing honeypots that provide various types of network services and applications for addressing Bots logging insider bad behavior and performing advanced persistent threat APT detection.

In one example a bot detection system architecture is configured to scale in terms of the number of subnets and total number of IP addresses supported. In another example a Bot detection system can be deployed in an enterprise perimeter DMZ referred to in the art metaphorically as the demilitarized zone because it is meant to isolate the corporate network from potential outside attackers and or cloud. In one embodiment the Bot detection system architecture may be configured in a single network appliance referred to herein as the Botsink.

One embodiment is configured to perform novel identification and analysis of Bots and characterizing specific Bot behaviors in real time allowing Bots to be detected and characterized quickly and accurately. This allows anti Bot countermeasures to be put in place quickly and effectively. In yet another embodiment a Bot detection system may quickly share learned Bot characteristics among a community of interested or affected network sites. This would improve Bot characterizations and would further allow for installations of countermeasures before more Bot attacks occur.

Bots may be present in the corporate network as well as in the Internet . A command and control C C facility operated by the originator of the Bots may also be connected to the Internet and communicate with Bots using the Internet through the corporate network and or using more sophisticated means intended to hide its whereabouts.

The detailed interconnections of devices with each other and with routers switches and the like within the corporate network may be made in a variety of ways. For example routers such as router may further partition the network into multiple subnets for management performance resource allocation and other purposes. End devices connect to the subnets and may include servers and workstations . A management station or server may be used by network administrators to observe and control the network .

In one example the corporate network may be a local area network LAN where its elements are often located at a single geographic site. The Internet is drawn as a cloud and may be a Wide Area Network WAN where it connects geographically dispersed sites.

While elements of a corporate network may be co located at a single geographic site they also may be located at multiple sites and connected to each other with private links. In the latter case the overall network may still be represented as a single corporate network cloud . If desired the various examples described herein may be used in such a network to protect against internal threats. This may be done in one example by treating certain internal networks devices and services with the same circumspection that is applied to the public Internet in other examples described herein. To avoid obfuscation the examples described herein will assume that all threats are either connected to the corporate network via the public Internet or located within the local corporate network as shown.

The Bot detection system may have various configurations depending on particular applications. In one example a server device called the BotMagnet is attached to one or more subnets . A plurality of subnets may be connected to the BotMagnet using one physical interface per subnet or by combining the subnets onto a smaller number of physical links. In one operational example the BotMagnet may lure and or engage with Bots . In another example the BotMagnet may allow Bots to infect it and may also collect data about the Bots behavior and characteristics.

The BotMagnet may share collected behavioral or character data with a Multi Dimension Correlation Engine MDCE . The MDCE may record and correlate information about the behavior of one or more Bots such as for example multiple instances of the same Bot and may build a new or augment an existing schema and signature that summarizes the Bots behaviors and characteristics as described later in the Schemas and Signatures section.

In one example a Bot may gather local corporate data and may in turn cause such data to be sent back to other Bots to the C C facility or elsewhere. The BotMagnet may block such potentially harmful leaks of private corporate data and instead gather it in a device called the Sinkhole . Software in the Sinkhole can analyze the characteristics of such data to further enhance Bot detection. It can also optionally substitute innocuous data for the private data in order to prolong Bot engagement without harm. The Bot detection system may further include a management station or server used by network administrators to observe and control the operation of the system. Secure methods are used as appropriate for communication among elements of the Bot detection system . The attributes and manner of operation of the components illustrated in are described in greater detail below.

Referring again to a Bot detection system may be attached to e.g. in data communication with a number of subnets in a corporate network . The Bot detection system need not connect to all of the subnets in the corporate network but the system s Bot detection effectiveness may be improved by connecting to as many subnets as possible. In a large network it may be desirable or necessary to deploy a larger Bot detection system in disparate locations. Reasons to deploy a larger system include performance a corporate network may receive too much attack traffic for a small system to handle co location network may extend over a corporate campus or multiple geographical sites and ease of management physically located with different equipment clusters or managed by different departments . For example if the network has several internal routers each of which partitions the network into subnets then it may be desirable to deploy multiple BotMagnets with each one handling all or a subset of the subnets created by one internal router .

The MDCE may or may not be replicated in a larger Bot detection system. In one embodiment a separate MDCE may be associated with and receive Bot behavioral information from each BotMagnet .

However Bot detection is enhanced if the MDCE can collect and correlate Bot behavioral information from as many sources BotMagnets as possible thereby increasing the generality and accuracy of Bot detection schemas signatures. Thus in another embodiment a single MDCE may collect such information from all the BotMagnets.

In yet another embodiment Bot behavioral information may be collected and correlated in a hierarchical way as shown in . Each first level MDCE may collect and correlate Bot behavioral information from one BotMagnet or a small number of BotMagnets . A second level MDCE may then collect and further correlate summaries of Bot behavioral information from the first level MDCEs .

The hierarchy may be further extended. In particular it is possible for an MDCE or to communicate through the Internet with other MDCEs serving other corporate networks for the beneficial purpose of sharing information about new Bot attacks. Such sharing could be done strictly hierarchically with a master top level MDCE existing somewhere in the cloud or within a corporate network and maintaining a master database of Bot behavioral information. In some embodiments advantageously multiple MDCEs or may have a peer to peer relationship much like the one that exists among other internet devices for distributing routes providing domain name services and the like continuously updating each other with respect to content generated according to the methods described herein by using methods understood by one skilled in the art.

Referring again to and to scaling of the Bot detection system the Sinkhole may also be replicated with each Sinkhole serving one or a small number of BotMagnets . The degree of replication may be dictated by performance requirements co location convenience and other factors.

The Management Station or Server may be replicated. Within a corporate network it is typically desirable to centralize network management. This would suggest managing as many Bot detection systems with a common Management Station or Server or even integrating system management with an existing overall Network Management Station or Server . But for performance organizational or other reasons it may be desirable to provide a separate Management Station or Server for each Bot detection system as will be understood by one skilled in the art. As will be understood this is possible and a hierarchical approach again may be employed.

A Virtual Machine VM is known in the art as an implementation of a computer that operates like a single standalone computer but in fact is one of a plurality of such implementations running on a single hardware platform. Historically the first VMs were pure software implementations recent years have seen the development of both hardware and software to support easy and efficient deployment of VMs on the latest generations of microprocessors. VMs may be deployed on microprocessors containing a single hardware processor CPU as well as on microprocessors containing multiple processors.

A collection of VMs operating on a single microprocessor may be created and controlled by a low level operating system called a hypervisor. Each VM is in turn controlled by a traditional operating system OS which is typically unaware that it is running in a VM rather than on a single standalone computer. Different VMs on a single microprocessor may run different OSes and different applications may run on each. VMs controlled by a single microprocessor are typically isolated from each other and cannot communicate with each other using traditional memory sharing and other techniques. Rather they must communicate with each other through a network. However they need not actually communicate over the physical network. Rather the hypervisor can create simulated networks or bridges through which they can communicate with the hypervisor arranging internally to transfer data from one VM to another.

In one embodiment a BotMagnet may use a VM to host a GuestOS that appears to be a real server or workstation insofar as other devices in the network are concerned. Using multiple VMs the BotMagnet can take on the appearance of being multiple servers and workstations at different IP addresses running multiple applications and services for the purpose of luring Bots detecting them and analyzing their behavior. Further the BotMagnet may use one or more additional VMs to host its own protected software for overall BotMagnet control and Bot detection and analysis.

The Sinkhole may also include or be embodied by one or more VMs each programmed to receive and analyze the outgoing traffic from GuestOSs that are engaged with Bots within a BotMagnet . For example the sinkhole may implement one VM for each GuestOS that is engaged with a Bot.

The BotMagnet may have one or more interfaces for communicating with subnets in the corporate network . The network administrator or some other network management module e.g. a dynamic host configuration protocol DHCP module configures the BotMagnet with one or more otherwise unused IP addresses from the subnets e.g. assigns an IP address to the BotMagnet by which packets may be addressed to the BotMagnet . The network administrator may use the Management Station Server to perform such configuration. The BotMagnet then may create a GuestOS VM corresponding to each such IP address. Thus each GuestOS VM may have its own IP address and through the Hypervisor may also be assigned its own unique MAC address for layer 2 network connectivity. Thus each GuestOS VM for all outward appearances may behave like an independent physical computer communicating at its assigned IP address. Each GuestOS VM is an instance of an operating system which may be a different OS or version thereof on different VMs. Each GuestOS VM is also loaded with a set of applications such as web applications and services which again could be different on different VMs. OSes applications and services may be configured either by the network administrator or automatically by the Management Station Server to ensure that the BotMagnet is hosting an appropriate mix of potentially vulnerable software.

Applications and services existing on a GuestOS VM or on any server or workstation for that matter are accessed by potential clients when clients access them through the network interface. A typical application or service may be accessed using a well known protocol such as TCP or UDP and a port number such as SMTP 25 HTTP 80 RLOGIN 513 FTP 20 21 or one of many others. If a computer does not offer a particular application or service it may discard incoming traffic directed to the corresponding port. Otherwise it directs such traffic to the appropriate application or service program. Thus a GuestOS may accept only inbound traffic corresponding to the applications and services that have been configured on it.

Bots and other malicious entities perform port scans on target networks in order to find available applications and services and then engage with them with the goal of finding vulnerabilities that can be exploited to gain further access to the target. A port scan typically attempts communication with all of the IP addresses that might be used in the target network and for each IP address it attempts all of the port numbers for which it may be able to find a vulnerability.

Thus if a large proportion of a network s IP addresses are assigned to the Bot detection system and a large number of applications and services are offered there there is a high probability that a Bot s port scan will soon encounter a GuestOS VM in the Bot detection system where its behavior will be recorded and subsequently analyzed.

The Bot detection system is designed to attract Bots and allow them to infect GuestOS VMs so that behavioral details of Bot operation can be recorded and subsequently analyzed. The GuestOSes in the BotMagnet may have no special mechanisms to prevent Bot infections. Indeed Bot infections are desired.

Consider a Bot that is able to communicate with a GuestOS VM through the FTP port. It may try to download an executable file such as a copy of itself into the GuestOS file system and subsequently try to execute it. If these operations would have been allowed by the GuestOS applications and services running on a real computer they will be allowed on the GuestOS VM. The GuestOS VM therefore becomes infected.

Bot operations on a GuestOS VM may advantageously be contained such that they cannot actually harm the corporate network and the devices attached to it. Because of the Bot s containment in a VM it can be prevented from doing any direct harm. To understand how this is done in some embodiments the concepts of inbound and outbound traffic on a VM should first be understood. Inbound traffic is traffic from an external entity that results in the VM taking internal actions such as allowing the entity to log in or run a service or program or accepting data that is sent to it such as storing a file that has been downloaded by the external entity. Outbound traffic is traffic in which the VM sends potentially private data to an external entity. For example a web page that is normally visible to all external entities is not considered private while an arbitrarily selected file may be considered potentially private. A basic principle of operation for a GuestOS VM is that it may allow and act upon all inbound traffic from external entities while it may block all outbound traffic directed to external entities.

For example suppose the Bot now running within the infected GuestOS VM tries initiate its own port scan of the corporate network or tries to transfer a file back to its C C facility using FTP. The BotMagnet may be programmed such that no outbound traffic can be sent from a GuestOS VM to the corresponding connected subnet . Thus the consequences of the infection are effectively blocked no matter how bad things may look inside the infected GuestOS VM.

On the other hand it may not be possible to fully record and analyze the behavior of a Bot unless it is allowed to continue its engagement in a meaningful way. The Sinkhole is the system component that makes this possible in some embodiments. For selected inbound traffic the BotMagnet may be configured to forward such traffic to the Sinkhole which may contain one or more VMs corresponding to each GuestOS VM of the BotMagnet with which it is currently engaged. Each Sinkhole VM may further configured with the applications and services that it is expected to handle.

For example if a Sinkhole VM is expected to handle HTTP traffic then it could be configured with an Apache Web Server. Outbound traffic from the Apache Web Server may then be sent back to the requester such as a Bot elsewhere in the corporate network or Internet . The web pages and other information visible through this server would be configured in much the same way as in a conventional honeypot in order to lure a Bot to engage further without disclosing anything of value. This provides an opportunity to record and analyze the further behavior of the Bot on an infected target.

The MDCE receives extensive log information from both the GuestOS VMs and the Sinkhole VMs as well as certain information gleaned by the BotMagnet s control software which manages the VMs . Thus the MDCE is able to track the engagement and profile the entire lifecycle of a Bot . Once the Bot s behavior has been profiled in a schema signature the MDCE may create an alert notifying the network administrator and optionally may distribute the schema signature to potential victim servers and workstations in the network. As is understood in the art after receiving an alert the network administrator may take steps to prevent further infection such as blocking the attacker at the network DMZ firewall. Also upon receiving a schema signature describing the new threat anti virus malware software running on a potential victim can take automatically take action when a matching behavior is detected as is understood in the art. To discover already infected victims a network administrator can invoke thorough virus malware scanning operations to be run on each potential victim and or can use standard software tools to examine their log files for behavior patterns that match the schema signature as is also understood in the art.

The Bot detection capabilities of the system are enhanced by the system s ability to capture and correlate events occurring both in the GuestOS VMs when an infection begins and in the Sinkhole VMs as the consequences of an infection begin to occur. However embodiments of the invention are possible with no Sinkhole or no BotMagnet .

For example operating without a Sinkhole it is still quite feasible for a GuestOS VM in the BotMagnet to send log information to the MDCE which can correlate information from this and other GuestOS VMs in order to build a profile albeit a less extensive profile than what could be done in a complete system. Yet such a system still has the advantage of creating such profiles from multiple infected GuestOS VMs and subnets and such profiles may also be correlated with Bot information gleaned from other facilities.

Conversely operating without a BotMagnet it would still be possible for real servers and workstations to be configured with software that collects behavioral information such as logs and sends it to the MDCE for correlation with other information as before. Further if the real server or workstation is suspicious about any activity for example based on its origin or behavior pattern it may forward the session to the Sinkhole for engagement in much the same way that a BotMagnet GuestOS VM would as described above. In this case the MDCE can build a more complete profile because it can correlate behavioral information from both the originally targeted real server or workstation and the Sinkhole .

In yet another example embodiments could be combined with application Ser. No. 14 074 532 filed Nov. 7 2013 which is incorporated herein by reference in its entirety. The Inspector in that application instead of redirecting blocked traffic to a Labyrinth or could redirect it to a GuestVM OS in the BotMagnet or directly to the Sinkhole . One or more GuestVM OSes and corresponding Sinkhole VMs may be instantiated to handle such traffic either by configuration or dynamically as needed. As the MDCEs and in present invention are designed to share information with other MDCEs and security services they could also share information as appropriate with the Cloud Inspection Service CIS 262 in application Ser. No. 14 074 532.

For robust operation of the Bot Detection System communication among the BotMagnet the MDCE the Sinkhole and the Management Station or Server should be secure. Conventional methods may be used to encrypt such communication. Also it is important to ensure that the MDCE and the Management Station or Server cannot become infected and that BotMagnet and the Sinkhole can become infected only within the GuestOS and Sinkhole VMs as desired and not within their supporting VMs and processes. This can be ensured in part by using secure private communication between these elements for example by using secure tunnels. In the Botsink appliance described next most of such communication privacy is inherent because communication occurs internal to the appliance.

In a preferred embodiment the Bot detection system is integrated into a single network connected device called the BotSink appliance. As shown in the BotSink appliance connects to multiple subnets using one or more physical interfaces as discussed previously in connection with . BotSink appliance may also connect through an interface to the corporate network for the purposes of communicating with other BotSinks or standalone MDCEs or Management Stations or Servers or and for any other required purpose. Secure communication is used as appropriate. The interface to the corporate network may or may not use the same physical link s as the subnet interface s .

In the bottom set of software modules Master may be running in Privileged Mode and have higher privileges configured by the Hypervisor compared to the Slave GuestOS and sinkhole VMs that run in Unprivileged Mode. The Slave software modules may be off the shelf software such as standard releases of various operating systems web services applications and utilities such as event loggers.

Software modules listed above may run in a single VM while in some embodiments they may advantageously be split among a plurality of VMs. As such they are protected from any of the other VMs. These components may run in Privileged Mode which means they have access to the Hypervisor to create destroy and otherwise access control and monitor VMs bridges and other resources while in some embodiments the GuestOS of VMs and Sinkhole VMs cannot.

Some or all outbound traffic originating from any of the GuestOS VMs may be either dropped or redirected to a Sinkhole VM thus initially confining potential outbound traffic within the appliance e.g. system . The Sinkhole VM may then allow selected traffic to be passed as is modified or substituted and returned to the requester such as a Bot so that engagement may proceed in a harmless manner.

Multiple strategies and methods may be used to harden the Master software modules so that they do not get infected or become targets of an attack. Also a GuestOS VM being infected may advantageously have no impact on any of the other system components or other VMs in terms of the CPU usage resources and so on nor on the Master software modules.

In step the Bot is attempting to access the service at a particular port number. If the GuestOS VM does not offer the service it logs the probe but there is no engagement with the Bot. Logging the probe is useful for automatically detecting port scans. If the service is offered the Bot is allowed to engage with the GuestOS VM and the service is performed in step . In this step all of the communication and other activity normally associated with the service occurs.

A typical Bot once engaged with a service or application on a victim system looks for vulnerabilities that may allow it exploit the victim system for example by downloading installing and running an executable file. The executable file typically contains a program that may be able to initiate outbound traffic and it may be a copy of the original Bot itself as the Bot attempts to spread itself laterally across the network. Thus a copy of the Bot may be running inside one or more GuestOS VMs in the BotMagnet as was shown in .

During the engagement agents in and associated with the GuestOS VM capture and log events in step . This step may be performed periodically e.g. be substantially a continuous activity that may take place in parallel with the normal activity of the service being performed in step . Periodically or on the occurrence of particular events such as the Bot attempting to send outbound traffic for the first time in step activity logs may be sent to the MDCE for correlation with other events logged elsewhere.

During the engagement in step the Bot may attempt to send various types of outbound traffic. One type may be an attempt by the Bot to contact its C C facility . Another type may be an attempt to perform a port scan on other servers and workstations in the local network or beyond and to infect any vulnerable ones that are found. Yet another type of outbound traffic may be an attempt to send files or other sensitive information such as passwords security keys configuration information and the like to the C C facility or elsewhere.

In step an attempt to send outbound traffic from the GuestOS VM is detected. Like step step is a periodic e.g. substantially continuous activity that may take place in parallel with the normal activity of the service being performed in step . Ensuring that outbound traffic is blocked or redirected may typically be a function of the Master Controller software module running in Privileged Mode in the BotMagnet or the BotSink . In step a decision is made by such software whether to block such traffic or to redirect it to a Sinkhole VM in step . In either case the activity is logged in step for eventual sending to the MDCE in step .

When sending of outbound traffic is attempted for the first time in a particular GuestOS VM the blocking and redirecting software may also be responsible for arranging to allocate or instantiate an associated Sinkhole VM and install and run the appropriate services and applications on it in the present example this operation is performed by the Sinkhole itself as will be seen next.

In step the Sinkhole VM decides whether to engage with the Bot . The decision whether to engage is based at least in part on the nature of the outbound traffic. If there is no engagement then the traffic is dropped otherwise it is forwarded to step for engagement.

Whether or not engagement occurs events and traffic may be captured and logged in step . The logging in step is a continuous activity that takes place in parallel with the normal activity of any engagement being performed in step . Periodically or on the occurrence of particular events such as determining the name or address of the Bot s C C facility for the first time activity logs may be sent to the MDCE for correlation with other events logged elsewhere e.g. events logged by a GuestOS for the Bot the same Bot that generated the traffic being processed by the Sinkhole VM according to the method .

Any kind of engagement may occur in step if the Sinkhole VM is configured with the appropriate services and other software. For example if the outbound traffic uses the HTTP protocol the Sinkhole VM may host an Apache web server e.g. provisioned on the fly to host an Apache web server to respond to the Bot s web page requests and serve up pages that may trap the Bot into continuing the engagement giving the Bot detection system more opportunities to learn about and log the Bot s behaviors and what it is ultimately looking for.

In another example the outbound traffic may be a port scan that has been initiated by the Bot in the GuestOS VM. In this case the software in the Sinkhole may ensure that all port scans are directed to one or more Sinkhole VMs e.g. one or more other Sinkhole VMs that offer various services and applications. Thus the Bot in the local GuestOS VM may be tricked into engaging with a service running on a Sinkhole VM. This provides more opportunities for the Bot Detection System to observe and log the behavior of the Bot such as according to the methods described herein.

In another example if the outbound traffic uses the IRC Internet Relay Chat protocol then it is likely to be an attempt by the Bot to communicate with its C C facility . In this case software in the Sinkhole VM may engage with the Bot using the IRC protocol and attempt to learn valuable information about the Bot. For example it may be able to learn the URL uniform resource locator of C C facility or the identity of the Bot. If the outbound traffic includes a DNS request to learn the IP address associated with the C C s URL a DNS service in the Sinkhole VM may respond with the IP address of the Sinkhole VM itself thereby fooling the Bot into communicating directly with the Sinkhole VM as if it were the C C facility further enhancing the Sinkhole VM s opportunity to learn and log more details of Bot C C interaction.

In yet another example the Bot may be attempting to send in the outbound traffic corporate data that it accessed in the GuestOS VM. In such a case the Sinkhole VM may simply maintain the HTTP IRC FTP or other communication and data transfer channel and log the data that comes across it for further analysis e.g. report the data to the MDCE as described above.

In the examples above the Sinkhole VM continues to prevent the original outbound traffic received from the GuestOS VM from leaving the confines of the Sinkhole . However the Sinkhole VM may be configured to optionally enable a feature called Proxy Mode. When the Sinkhole VM attempts to send outbound traffic as a result of the engagement in step step determines whether Proxy Mode is enabled. If not then the traffic is blocked in step and logged in step . If Proxy Mode is enabled the Sinkhole VM with the cooperation of the Master Controller software may in step allow the original outbound traffic received from the GuestOS VM to exit the Sinkhole . The Proxy Mode software may also modify the source IP address and other information in the outbound traffic so that further engagement occurs directly with the engaging software running on the Sinkhole VM rather than with the GuestOS VM.

Proxy Mode may be especially useful if outbound traffic is determined to be an attempt by the Bot to communicate with its C C facility . Such traffic activity is monitored in step along with other activities of the Bot. Thus Proxy Mode may be particularly useful for Bot research. That is if the Bot Detection System discovers a Bot whose behavior does not match any previously known Bot network administrators or others may wish to investigate the Bot further to determine what additional exploits it may be capable of and what kind of information or resource theft it is ultimately seeking By enabling Proxy Mode in a carefully controlled environment the network administrators create the opportunity for Bot communication with the C C facility so that more information on the Bot and the C C facility may be revealed. In Proxy Mode it is also possible for the researchers to modify the outbound traffic to the C C facility to reveal even more information. As for the method A logs of events captured at step may be sent to the MDCE for processing according to the functionality ascribed to the MDCE herein.

Similarly in step the MDCE collects events and log information from the Sinkhole VMs and other software running in one or more Sinkholes . In step the MDCE collects schemas signatures and other information from other MDCEs and or . In step the MDCE collects schemas signatures and other information from other Bot information sources. Such sources may include publicly accessible services that collect and publish information on known Bots using software such as Snort and formats such as the STIX language to describe IOCs Indicators of Compromise and Bot signatures. Such sources may also include privately accessible services with which the operators of the Bot Detection System have cooperation agreements.

In each case above the events collected are placed into a database where they can be accessed by further steps. In step the MDCE correlates information received from the various sources to build and enhance Bot schemas signatures. In particular it correlates information from each particular GuestOS VM and the associated Sinkhole VM if any and determines which information may indicate the presence of a Bot and should be included in a corresponding schema signature.

In step the MDCE compares a new schema signature with other schema signatures in its database and determines whether it may correspond to a new Bot e.g. a new type of Bot. The other schema signatures may have been created as a result of other activity in the same Bot Detection System or they may have been received from other MDCEs in step or other sources in step .

If step determines that the new schema signature corresponds to an existing Bot in step the MDCE may combine the new schema signature with the existing schema signature s for the same Bot to create an enhanced signature and update its database accordingly. In step the MDCE may share the enhanced signature if any with other MDCEs and publicly and privately accessible Bot information services.

If step determines that the new schema signature does not correspond to an existing Bot in step the MDCE may update its database with the new schema signature and continue to step to share the new signature with others. It may continue to step immediately or depending on MDCE configuration or characteristics of the Bot such as potential for damage it may elect to wait until more activity or more instances of the Bot have been detected.

In step the MDCE may share a new or enhanced schema signature with Sinkholes . Having the ability to access the signatures of both new and previously known Bots may provide useful capabilities in Sinkholes . For example a Sinkhole VM may decide whether or not to enable Proxy Mode or alert a research team depending on whether a Bot that it is engaged with is new or is already well known.

In step the MDCE may also share a new or enhanced schema signature with servers and workstations that are capable of interpreting such a signature and using it to block any attacks that should be directed at them. For any of the sharing partners above the MDCE may share some or all of its schema signature database with others periodically or upon other events triggers or requests not just upon the creation of a new or enhanced schema signature. In step the MDCE may send alerts to a network administrator and or others indicating that a new Bot or an instance of a known one has been detected. If desired such alerts may be sent earlier in the process based on configuration or other characteristics of the detected activity such as the potential for damage.

As introduced previously a schema is a multi element template for summarizing information and a signature is a schema that is populated with a particular set of values. A schema may have just one or a few elements. However an aspect of the invention is to base Bot detection not just on one or a few individual events like network behavior or signature but across multiple dimensions across various VMs services and applications across multiple subnets. Thus the schema for describing a particular Bot may have many elements corresponding to the many dimensions and the values that populate the elements may capture the behaviors of many instances of the Bot. The populated schema may be called a Multi Dimension Bot Lifecycle Signature. 

Such activities may be captured on either of the GuestOS VMs and Sinkhole VMs on which they occur or by which they are detected. In some cases the capturing is accomplished by small agents that are installed with the GuestOS or Sinkhole software typically monitoring calls to the OS kernel for various services. How to create and install such agents is understood by those skilled in the art. For example among other things the Linux Audit System has the ability to watch file accesses and monitor system calls c.opensuse.org products draft SLES SLES security sd draft cha.audit.comp.html Chapter 30 Understanding Linux Audit .

An example of a schema written in XML is shown in . For the purposes of illustration this schema has been limited to a few dimensions and has correspondingly few elements. However the number of and complexity of the elements may be expanded to describe any desired number of Bot lifecycle behavioral dimensions. The elements of the example schema are described in the paragraphs that follow.

The first nine lines of the example schema in and B contain identifying information about the schema itself such as the name description creation date and author of the schema. The definition of the schema begins at line .

On line the OR operator specifies that matching any of the elements within its scope creates a match of the schema. Other operations such as AND can be used and logical conditions can be nested as desired. The id and its value are for identification and tracking purposes and are placed in the schema by its author the MDCE in the present example.

The first element within the OR operator s scope is specified on lines . This element matches a file whose name matches the string value fsmgmtio32.msc which in this schema is the name of a file that may have been accessed or installed by a Bot.

The next element is specified on lines and matches a file whose MD5 checksum equals a specified value. Thus if the Bot installs the same malicious file in different victims it will still be matched even if a different filename is used. Or additional elements could be added to the schema to specify additional variations of filename or MD5 checksum in different instances of the Bot.

The next two elements on lines and match a DNS lookup for either of two URLs that may correspond to a C C facility for the Bot. The element on lines matches a particular remote IP address that may be associated with the Bot.

The example schema s list of elements continues in this manner with each element specifying a value to be matched. The element on lines is worth pointing out as it matches an event detected by SNORT software running in the Master privileged layer of software in a BotMagnet Sinkhole or BotSink . The element on lines is also worth mentioning as it is composite element involving several values and two logical operations designed to match a Microsoft Windows registry entry. The registry item path must match Software Microsoft Windows CurrentVersion Run AND the registry item value must match WindowsNT svchost.exe OR WindowsNT svclogon.exe .

The event and the value to be matched in each element may have been logged originally by a GuestOS VM a Sinkhole VM or in some cases by other software modules running on the BotMagnet Sinkhole or BotSink . In any case it is the responsibility of the MDCE or to determine which events may be relevant to a particular Bot and to incorporate appropriate matching elements as it builds or augments the corresponding schema and the values that are matched thus creating a multi dimension lifecycle signature for the Bot.

As previously explained one component of the Bot Detection System is the multi dimension Correlation Engine MDCE . One function of the MDCE may be to correlate multi dimension individual events collected across various modules across different VMs to generate a multi dimension schema and signature corresponding to a Bot . That is the MDCE observes Bot behavior and thereby generates a Bot Lifecycle Signature using a schema. The MDCE can import various signatures schemas from other MDCEs and and from the cloud as well as transform these schemas for export in various standard formats. The MDCE can reduce false positives by dynamic learning and incorporating other information like white lists and so on.

The MDCE can classify as well as group the events according to the type of Bot infection phases such as those described in the section on Lifecycle of Bot Detection.

The MDCE supports importing of data related to one or more Bots from multiple sources and formats as well feed this data to the MDCE resulting in better detection. Similarly Bot related data like signatures traffic events pcap packet capture and so on can be transformed into various formats for exporting to other systems. Some of the input output formats supported are listed below 

On detection of any infection on any of the Guest OS VMs based on the collection of data and events the Master Controller software module running in Privileged Mode in the BotMagnet is responsible for taking a set of actions on that particular VM without any user involvement. The list of possible actions includes 

In any of these cases any outbound traffic from the infected GuestOS VM may always be dropped by the GuestOS VM or it may be redirected to a SinkHole VM which may send it may modify and then send it or may drop it as was explained previously in connection with . Hence there may advantageously be no leakage of any outbound traffic from any of the VMs on the BotSink appliance .

A Bot s behavior may be similar to one that has been seen before either by the local MDCE by another MDCE or or by another security service that has shared Bot signatures using a known format. In such a case the MDCE that has detected the Bot may export the locally constructed signature to these other devices and services to enhance global recognition of the Bot. If the Bot is not recognized a so called Day Zero attack the MDCE may advantageously share the locally constructed signature with other devices and services.

In either case signatures shared with other MDCEs devices and services may characterize Bot behavior in much more detail because of unique capability of the Bot detection system to capture very detailed behavioral information from multiple sources over the entire lifetime of the Bot.

This section describes a sample Bot and gives details right from the infection phase to the Command Control C C communication phase. The lifecycle of a Bot infection process may be classified into five stages called Bot infection phases 

On the other hand it is entirely possible that some Bots may skip a few phases and may execute the phases in a different order. Also some events like E4 and E5 can happen independently of each other.

This section details and lists multi dimension events their processing and their grouping which results in detection of the sample Bot by the BotSink system or appliance . This also includes the subsequent generation of alerts and target client list reporting. The events listed here may be specific to the Botsink system or appliance implementation and follow a generic format used to log each of the events as shown below 

A Bot installed on a workstation or server initiates a port scan thereby probing to discover new computers for infection to laterally spread itself. The BotSink appliance engages with the Bot by responding to all probes that arrive at each of the GuestOS VMs that it hosts. It also logs these probes. The following set of events are triggered 

Based on the response the Bot determines or further probes to determine a set of services enabled on each of the GuestOS VMs. Bots usually probe some of the set of ports that host standard services that is one or more standard well known ports looking for services like SMTP IIS server HTTP S FTP and so on.

The Bot tries to exploit a particular service by running a set of known vulnerabilities against that service. If successful the Bot tries to take control of the target host by setting up a backdoor by means of a payload drop. The payload is usually an executable program intended to take control of the target. The exploit of this vulnerability as well the payload drop result in generation of the following set of events. In this example the Bot is using a password cracking mechanism for the initial attack vector and then drops in a payload called mmm.exe.

The Event Collector and Shipper module transforms these as well as other events into a fixed format and sends them off to the Event Collector and Storage Engine . It may add relevant information like a host name and the like.

The Event Collector and Storage Engine running in the Privileged Mode may collect some or all events from different VMs hosting different GuestOS and feed them to MDCE .

The MCDE may correlate all these individual multi dimension events possibly in real time to generate one summary alert. The summary alert will be provided to the network administrator with some or all the critical information need to identify the Bot and the infected targets list. The UI module will provide the network administrator the ability to query all the associated individual events that led to the raising of the summary alert and all other associated data collected as part of individual events.

Some or all individual events that can be generated by the VMs may be mapped to one or more Bot Infection Phase numbers. Based on the Bot Infection Phase number it is possible to track what phase a particular Bot infection is in and monitor its progress. The Bot Infection Phase number transition and the associated individual events are unique for each of the Bots and hence can be used to create a Bot Lifecycle Phases Signature 

This Bot Lifecycle Phases Signature can be shared with other MDCEs security components end points IPS intrusion prevention system devices and so on and helps them to quickly identify behaviors seen on those systems as corresponding to Bot activity or not. Based on this information the Bot can be quickly terminated and threat mitigated for example by quarantining devices whose event logs contain events matching the Bot s now known behavior. It is also possible to safeguard private data at the network level by configuring filters on Internet connected routers to block all outbound traffic destined for the C C facility s now known address.

Some or all other security appliance components existing in a network can be configured to drop and or quarantine any traffic originating from any of the IP addresses that have been assigned to the BotSink Appliance . In some embodiments a signature or schema generated according to the methods described hereinabove may be formatted and contain some or all of the types of data in the example schema shown in . An understanding of the context in which the novel methods described herein may be applied can be found in the following articles which are hereby incorporated herein by reference as constituted on May 2 2014 

Referring to the illustrated environment may be used to evaluate URLs uniform resource locators to determine whether they link to malicious content such as a Bot as described above or some other type of invasive or harmful content. The environment may include a user system that uses a firewall to access an external network. As known in the art a firewall is a software or hardware component that evaluates incoming data to determine whether it is likely to be harmful to a computer system or network. The firewall is further operable to block data from being transmitted to a computer system or internal network if deemed harmful.

For example a URL requested by the user system may point to a resource that is hosted by an attacker system . The attacker system may be owned or controlled by an entity wishing to gain unauthorized access or cause harm or may simply be a computer system coopted by a Bot or some other malicious code in order to carry out attacks such as any of the attacks described herein.

The firewall may cooperate with a honey client and a BotSink appliance which may also be replaced with the BotSink system described herein. In some embodiments an intervening network may be positioned between the honey client and the BotSink . For example the honey client may be a separate device from the rest of an enterprise network. In some embodiments the honey client only has access to or any visibility of the BotSink and the simulated network defined thereby. The honey client may have no visibility of an enterprise network protected by the firewall and its connection to the firewall may be limited to communications described according to the methods of described below. The firewall may access a firewall database that records such information as a system log that reports network activity transmitted through the firewall . The system log may advantageously store URLs requested by user systems or otherwise identified as the source of content requested from the external network or received from the external network by the firewall . The firewall database may further include one or both of a blacklist and a whitelist . The blacklist may list URLs that are known to reference malicious content files that are known to contain malicious code signatures of files that are known to contain malicious content or other identifiers of content that is known to be harmful. A whitelist may identify addresses and content that are known to be benign.

The method may include sending by the user system a request for a resource located at a URL the requested URL . The request is received by the firewall which requests a resource e.g. web page file etc. at the requested URL and returns the resource to the user system. The firewall transmits the requested URL to the honey client . Transmitting the requested URL may be performed as URLs are received e.g. within 0 to 1 s. of receipt. In other embodiments transmitting the requested URL may include periodically transmitting the latest entries of a log e.g. system log of received URLs to the honey client such as in response to periodic requests for this log by the honey client . The firewall may be configured to send URLs to the honey client i.e. the honey client may be specified in the configuration of the firewall as the syslog server for the firewall . Alternatively the firewall may also store URLs in some other syslog server in which case honey client may be configured with the syslog server details and probe the syslog server periodically to get new URLs for processing according to the methods disclosed herein.

The honey client may then access the requested URL. For example the honey client may be configured as a BotMagnet with one or more VMs executing one or more GuestOSs. Accordingly the honey client may invoke accessing of the requested URL by a GuestOS such as by a browser or other application executing within the GuestOS.

As described above with respect to the GuestOS of a BotMagnet infection may be allowed by the honey client . For example by accessing the URL an attacker system may be informed of a port from which the URL was accessed and exploit the port as described above. The URL may reference a web page file application or other data that contains malicious code. Accordingly upon accessing the resource infection by malicious code may occur according to any manner. Malicious activity occurring on the honey client such as within the VM and or Guest OS may be logged and reported in the same manner as described above with respect to the BotMagnet and Sinkhole. In particular the events logged and reported may include some or all of the events described as being logged and reported above. The events may be reported to an MDCE and used to detect and prevent exploitation of other networks and computer systems in the same manner as described above.

If malicious activity is detected the requested URL may be reported to the firewall which may then blacklist the URL i.e. add it to a blacklist of URLs known to result in exploitation of requesting computer systems. In some embodiments the honey client or MDCE may generate a schema that describes the actions and attributes of malicious code infecting the honey client in response to accessing the requested URL. This schema may have some or all of the attributes of the schema of . The manner in which a schema is generated may be the same as for the other embodiments described hereinabove. The schema may then be used by the user system to remove malicious code from the user system .

If a URL is found to result in malicious activity by the honey client then the URL may be processed in the same manner as for the method of . The honey client may send events to an MDCE and the MDCE may analyze the events to determine that they in fact indicate malicious activity. To detect stealth bots APTs advanced persistent attacks that are looking for network targets the honey client may be permitted to probe and look for targets at the URL or domain referenced by the URL.

The honey client may further permit probing and infection of the honey client . In some embodiments the honey client prevents outbound traffic in order to avoid spreading malicious code or allowing exploitation of other networks or computer systems The honey client can be deployed in isolated network VLAN. It can communicate only with an external network e.g. the Internet and to the BotSink . The honey client and BotSink together form a virtual network in which malware can execute and operate in isolated environment. In some embodiments the honey client may direct outbound traffic to a BotMagnet and or Sinkhole as described above. Each honey client may be mapped to a specific BotSink in implementations where multiple honey clients and BotSinks are implemented. For example files shared by the honey client may be mapped to the specific BotSink to which it is mapped. The honey client may knowledge of a customer network from its corresponding BotSink . The honey client may host a proxy VM which redirects traffic originated towards customer network or internal private network Ex 172.16.0.0 12 192.168.0.0 16 10.0.0.0 8 towards its corresponding BotSink . The BotSink and Sinkhole may then engage malicious code executing in the honey client or remote attacker systems in the same manner as described hereinabove. As noted above some or all of the BotSink Sinkhole MDCE and other components may be implemented by a single BotSink Appliance . In some embodiments the functionality of the honey client may also be implemented by the BotSink Appliance .

The method may include engaging an attacker system and malicious code executing on some or all of the honey client BotMagnet and SinkHole. Where accessing a URL results in detecting malicious activity in some or all of the honey client BotMagnet and Sinkhole the honey client or other component may transmit notification of the URL being malicious to the firewall which may then blacklist the URL in response to this notification.

Using events occurring during this engagement at step a schema may be generated that describes the exploitive activity and code resulting from the requested URL. For example events detected by some or all of the honey client BotMagnet and SinkHole may be reported to an MDCE which then generates a schema as described hereinabove.

The schema may then be transmitted to one or more systems in a network. The schema may be transmitted to these systems which then use it to preemptively detect attacks that conform to the schema. Systems that receive the schema may also use the schema to detect the presence of malicious code on the systems prior to receiving the schema. These systems may then use the schema to remove the malicious code and or detect what exploitation may have occurred.

The honey client may include a switch that routes received URLs to a plurality of different scenarios . The resource at the requested URL may be retrieved in each scenario and any exploitive activity that occurs in response may be allowed to occur and recorded as described hereinabove. In some embodiments the switch may have data describing a customer network and redirect NAT network address translation traffic originating from the honey client towards a simulated customer network defined by the BotSink . As shown in the BotSink may be integrated with the honey client . In particular the BotSink which enables malicious code to access the IP addresses subnets and VLANs configured in the BotSink .

The honey client may further include a firewall integration module . Many firewalls provide an interface used to retrieve logs and other operational data from the firewall. Accordingly the firewall integration module may implement an API application programming interface for the firewall that receives or retrieves the URLs requested from the firewall by one or more user systems .

Referring to a corporate network may include a plurality of workstations and servers . The network may include any topology of networks and sub networks. The workstations may include laptop or desktop computers mobile computing devices or other computing device. Each workstation may implement one or more scenarios combination of operating system and browser and may implement one or more network applications. Likewise the one or more servers may implement one or more network services.

A BotSink or some other module implemented by a computer system may probe the corporate network and discover the network topology including the one or more server systems and the services offered by the one or more server systems. Likewise a computer system implementing one or more honey clients or some other module implemented by a computer system may discover the workstations as well as network connections between workstations and between the workstations and the one or more server systems .

In response to discovering the topology of the corporate network one or more BotSinks may be instantiated and one or more honey clients may be instantiated. In particular a honey client may be instantiated for each of some or all of the discovered workstations and a BotSink may be instantiated for each of some or all of the server systems . Bridges between virtual machines implementing the honey clients and BotSinks implemented on the same computer system may be defined in order to mimic the connections between corresponding workstations and server systems of the corporate network. Likewise network connections among honey clients and BotSinks may be defined where these are implemented on separate computer systems. Each honey client may be configured with a scenario of its corresponding workstation in the corporate network. Likewise the BotSink may be configured to implement some or all of the services implemented by its corresponding server system .

The method may include proving a corporate network in order to determine some or all of the IP internet protocol addresses and or URLs of workstations and server systems a network topology e.g. sub networks and computer systems within sub networks of the corporate network interconnections between workstations and server systems of the corporate network scenarios of workstations network applications executing on the workstations services implemented on the server systems and like information.

The method may further include generating corresponding honey clients and BotSinks for some or all of the identified workstations and server systems . Generating the corresponding honey clients and BotSinks may include some or all of

The method may include accessing by the honey client identified at step the requested URL. The method may further include permitting a resource or remote system accessed by the honey client using the URL in the same manner as described hereinabove. Likewise traffic generated by the honey client responsive to any malicious code executed in the honey client may be permitted. In particular traffic may be routed to a BotSink or other honey client . As for other methods described herein actions occurring on either of the honey client and any recipient of traffic generated in the honey client may be monitored and used to generate a schema as described hereinabove

The systems and methods of advantageously enable the responses of the honey clients and BotSinks to more closely mimic those of the actual corporate network and enable more convincing deception of malicious computer system and code and more realistic engagement of malicious codes and systems.

Computing device may be used to perform various procedures such as those discussed herein. Computing device can function as a server a client or any other computing entity. Computing device can perform various monitoring functions as discussed herein and can execute one or more application programs such as the application programs described herein. Computing device can be any of a wide variety of computing devices such as a desktop computer a notebook computer a server computer a handheld computer tablet computer and the like.

Computing device includes one or more processor s one or more memory device s one or more interface s one or more mass storage device s one or more Input Output I O device s and a display device all of which are coupled to a bus . Processor s include one or more processors or controllers that execute instructions stored in memory device s and or mass storage device s . Processor s may also include various types of computer readable media such as cache memory.

Memory device s include various computer readable media such as volatile memory e.g. random access memory RAM and or nonvolatile memory e.g. read only memory ROM . Memory device s may also include rewritable ROM such as Flash memory.

Mass storage device s include various computer readable media such as magnetic tapes magnetic disks optical disks solid state memory e.g. Flash memory and so forth. As shown in a particular mass storage device is a hard disk drive . Various drives may also be included in mass storage device s to enable reading from and or writing to the various computer readable media. Mass storage device s include removable media and or non removable media.

I O device s include various devices that allow data and or other information to be input to or retrieved from computing device . Example I O device s include cursor control devices keyboards keypads microphones monitors or other display devices speakers printers network interface cards modems lenses CCDs or other image capture devices and the like.

Display device includes any type of device capable of displaying information to one or more users of computing device . Examples of display device include a monitor display terminal video projection device and the like.

Interface s include various interfaces that allow computing device to interact with other systems devices or computing environments. Example interface s include any number of different network interfaces such as interfaces to local area networks LANs wide area networks WANs wireless networks and the Internet. Other interface s include user interface and peripheral device interface . The interface s may also include one or more user interface elements . The interface s may also include one or more peripheral interfaces such as interfaces for printers pointing devices mice track pad etc. keyboards and the like.

Bus allows processor s memory device s interface s mass storage device s and I O device s to communicate with one another as well as other devices or components coupled to bus . Bus represents one or more of several types of bus structures such as a system bus PCI bus IEEE 1394 bus USB bus and so forth.

For purposes of illustration programs and other executable program components are shown herein as discrete blocks although it is understood that such programs and components may reside at various times in different storage components of computing device and are executed by processor s . Alternatively the systems and procedures described herein can be implemented in hardware or a combination of hardware software and or firmware. For example one or more application specific integrated circuits ASICs can be programmed to carry out one or more of the systems and procedures described herein.

