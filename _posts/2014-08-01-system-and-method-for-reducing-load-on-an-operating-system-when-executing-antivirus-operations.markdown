---

title: System and method for reducing load on an operating system when executing antivirus operations
abstract: An initial trust status is assigned to a first object, the trust status representing one of either a relatively higher trust level or a relatively lower trust level. Based on the trust status, the first object is associated with an event type to be monitored, where the event type is selected from among: essential events, occurrence of which is informative as to trust status evaluating for an object, and critical events, including the essential events, and additional events, occurrence of which is informative as to execution of suspicious code. Occurrences of events relating to the first object are monitored. In response to the first object being assigned the relatively higher trust level, only the essential events are monitored. In response to the first object being assigned the relatively lower trust level, the critical events are monitored. A need for performing malware analysis is determined based on the trust status of the first object and the event type. In response to determination of the need for performing the malware analysis, the malware analysis for the first object is either performed, or not.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09094451&OS=09094451&RS=09094451
owner: KASPERSKY LAB ZAO
number: 09094451
owner_city: Moscow
owner_country: RU
publication_date: 20140801
---
This Application claims the benefit of Russian Federation Patent Application No. 2013153767 filed Dec. 5 2013 the content of which is incorporated by reference herein.

The invention relates generally to information processing systems and security and more particularly to systems and methods for improving efficiency of anti malware operations.

Malicious software commonly referred to as malware describes any software designed for infiltration into a computer system in order to gain control over such a system and to perform unauthorized actions such as theft of confidential information for example. A wide variety of malware exists today including network worms trojan programs rootkits exploits and computer viruses. Therefore many owners of computer devices for example personal computers use various antivirus applications for protection which allow to detect and remove malicious programs. Usually today s antivirus applications are multi component complex systems which include various protection modules.

One of the protection technologies is signature scanning which allows to identify known malicious programs among all programs installed in a computer system. For this purpose this technology has a database which contains information on known malicious programs for example in the form of hashes of such programs. Such databases are usually updated by receiving information on newly detected malicious programs from a manufacturer of antivirus security through distribution on the Internet.

Another protection technology is the technology known as whitelisting which ensures monitoring of applications using white lists of trusted programs. This technology allows not to restrict and to permit operation of software in a computer system if the software is classified as trusted.

Another technology which is also used in contemporary antivirus applications is behavioral detection which allows to analyze the behavior of applications. This technology can be based for example on the interception of the application programming interface API functions called by an application and on their subsequent analysis. It should be noted that it is not the API functions themselves that are studied but the sequence of the calls for various API functions and their parameters. The analysis identifies various suspicious actions such as an attempt to access system files by a non trusted process for example a process launched from a file which appeared in the system rather recently and has not been checked by an antivirus application . After the identification of suspicious actions an analysis is performed and a decision is made regarding the maliciousness of the software.

The above described technologies used jointly to detect malicious programs have one substantial deficiency. This deficiency is related to the fact that a malicious code for example due to a vulnerability of the program or of the operating system can infiltrate the address space of a trusted process and continue to be executed with the rights of the trusted process. Then an access attempt by the infiltrated malicious code will not be considered suspicious and will be completed because it will be completed apparently by the trusted process.

In known approaches for detecting malicious programs monitoring analysis and evaluation of the behavior of all the processes are very resource consuming tasks the performance of which can cause the so called freezing of the applications run by the user or of the whole operating system. A solution to these and related issues is needed.

One aspect of the invention is directed to selectively performing malware analysis of objects residing in a computer system. An initial trust status is assigned to a first object the trust status representing one of either a relatively higher trust level or a relatively lower trust level. Based on the trust status the first object is associated with an event type to be monitored where the event type is selected from among essential events occurrence of which is informative as to trust status evaluating for an object and critical events including the essential events and additional events occurrence of which is informative as to execution of suspicious code. Occurrences of events relating to the first object are monitored. In response to the first object being assigned the relatively higher trust level only the essential events are monitored. In response to the first object being assigned the relatively lower trust level the critical events are monitored. A need for performing malware analysis is determined based on the trust status of the first object and the event type. In response to determination of the need for performing the malware analysis the malware analysis for the first object is either performed or not.

While the invention is amenable to various modifications and alternative forms specifics thereof have been shown by way of example in the drawings and will be described in detail. It should be understood however that the intention is not to limit the invention to the particular embodiments described. On the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

The following Glossary sets forth definitions of terms used herein. This Glossary is applicable to only the present Application.

 Antivirus analysis malware analysis security related analysis performance of a detailed evaluation as to possible maliciousness of an object. One or more of a variety of different techniques can be employed including signature analysis i.e. checking for the presence of known patterns in the object heuristic techniques emulation and the like. Antivirus analysis of a process involves examining all of the events occurring during the execution of the associated program code. In general antivirus analysis is more computationally expensive i.e. involving more time more processor cycles etc. than a trust status evaluation. Computer computer system and computing System an electronic device or system of inter operable electronic devices containing hardware including one or more processors data storage input output devices and capable of storing and manipulating information according to software instructions carried out by the hardware. It can be one physical machine or it can be distributed among multiple physical machines such as by role or function or by process thread in the case of a cloud computing distributed model. Examples include desktop or mobile personal computers PCs smartphones and tablets as well as networking devices such as routers switches and the like. Computer systems can be stand alone devices or embedded devices that are part of a larger device or system. Critical event an event the occurrence of which is informative as to execution of suspicious or malicious code. Critical events are also essential events. Data storage one or more electronic hardware devices that stores data in a physical storage medium. Examples include volatile storage e.g. random access memory RAM whether static or dynamic non volatile storage e.g. electrically erasable programmable read only memory magnetic disk etc. . Essential event an event pertaining to an object which is to be monitored and analyzed regardless of the trust status of that object and the occurrence of which is informative as to trust status setting of an object. An essential event is not necessarily a critical event although it may be. Event an action or occurrence taking place in a computer system that is detectable by a monitoring process. Examples include the launching or closing of a program or data file a user action e.g. clicking a mouse button receipt or creation of a file system occurrences e.g. memory violation etc. Interception detecting an occurrence of a start of an event such as the launching of a process for instance and holding up the completion of that event until a specific action relating to that event is initiated or completed. Malware malicious code or software any software used to disrupt computer operation gather sensitive information or gain access to a computer system in an unauthorized manner. Malware can appear in the form of code script active content and other software. Examples include viruses worms Trojans ransom ware scare ware rootkits bootkits spyware etc. Module a real world device component or arrangement of components implemented using hardware or as a combination of hardware and software such as by a microprocessor system and a set of program instructions that adapt the module to implement the particular functionality which while being executed transform the microprocessor system into a special purpose device. A module can also be implemented as a combination of the two with certain functions facilitated by hardware alone and other functions facilitated by a combination of software controlled hardware. In certain implementations at least a portion and in some cases all of a module can be executed on the processor s of one or more computers that execute an operating system system programs and application programs while also implementing the module using multitasking multithreading distributed e.g. cluster peer peer cloud etc. processing where appropriate or other such techniques. In addition a module can itself be composed of more than one sub modules each of which can be regarded as a module in its own right. Object a process a file or other extant data structure in the computer system e.g. a piece of software code or data structure stored in computer hardware. Examples include files programs data packets etc. The term object also refers to related files and processes such that a file from which a process is created or which stores data structures of a running process constitutes a common object. Operating system OS software executable on computer hardware that handles functions for interaction with network ports and connections peripherals scheduling of tasks allocation of data storage and presents a default interface to the user when no application program is running Examples include the Windows family of operating systems by Microsoft Corporation Mac OS by Apple Inc. Unix Linux iOS Android etc. Process a container of resources loaded into the memory space of a computer system which are allocated and utilized to execute the program code of an executable file. A process has a virtual address space within the computer system s physical data storage and is managed by the operating system. The required sections of an executable file from which the process is loaded are loaded into the virtual address space of the process together with the dynamic linked libraries DLL related to the file. The address space of a process also stores various data structures such as stacks. Each process represents at least one execution thread each of which uses system resources for example files system registry keys synchronization objects etc. and the virtual address space of the process. The execution of the program code occurs by way of execution of the threads of the associated process. Processor electronic hardware part of a computer system that carries out the instructions of a computer program by performing basic arithmetical logical temporary storage and input output operations of the system. Typically a processor is implemented as a microprocessor i.e. integrated on a single chip though this definition includes processor circuits that are implemented on multiple interconnected integrated circuits. Modern day processors typically include multiple processing cores and can distribute workload among the multiple processing cores. Suspicious code suspicious program suspicious process or suspicious object an object that exhibits behavior or one or more characteristics of malware. This object may or may not actually be malicious but its behavior or other characteristic generally gives rise to added scrutiny to be paid to the object by security related software or services. Trust status An indication associated with an object that represents a degree of trust worthiness of that object from a maliciousness perspective. The trust status can be binary i.e. trusted non trusted or can represent a continuum of trustworthiness. In one sense the trust status can be considered as a representation of a level of suspicion of an object based on an existing knowledge base such as a whitelist blacklist certificate authority owner of a digital signature or the like. In general the trust status of an object is obtained in a computationally inexpensive manner i.e. involving less time fewer processor cycles etc. than an antivirus analysis.

Aspects of the present invention can be implemented as part of a computer system. The computer system can be one physical machine or can be distributed among multiple physical machines such as by role or function or by process thread in the case of a cloud computing distributed model. In various embodiments aspects of the invention can be configured to run in virtual machines that in turn are executed on one or more physical machines. It will be understood by persons of skill in the art that features of the invention may be realized by a variety of different suitable machine implementations.

The system includes various modules each of which is constructed programmed configured or otherwise adapted to carry out a function or set of functions. The term module as used herein means a real world device component or arrangement of components implemented using hardware such as by an application specific integrated circuit ASIC or field programmable gate array FPGA for example or as a combination of hardware and software such as by a microprocessor system and a set of program instructions that adapt the module to implement the particular functionality which while being executed transform the microprocessor system into a special purpose device. A module can also be implemented as a combination of the two with certain functions facilitated by hardware alone and other functions facilitated by a combination of hardware and software. In certain implementations at least a portion and in some cases all of a module can be executed on the processor s of one or more computers that execute an operating system system programs and application programs while also implementing the module using multitasking multithreading distributed e.g. cluster peer peer cloud etc. processing where appropriate or other such techniques. Accordingly each module can be realized in a variety of suitable configurations and should generally not be limited to any particular implementation exemplified herein unless such limitations are expressly called out. In addition a module can itself be composed of more than one sub modules each of which can be regarded as a module in its own right. Moreover in the embodiments described herein each of the various modules corresponds to a defined functionality however it should be understood that in other contemplated embodiments each functionality may be distributed to more than one module. Likewise in other contemplated embodiments multiple defined functionalities may be implemented by a single module that performs those multiple functions possibly alongside other functions or distributed differently among a set of modules than specifically illustrated in the examples herein.

The objects and characteristics of this invention and the methods for achieving these objects and characteristics will become clear by reference to sample embodiments. However this invention is not limited to the sample embodiments disclosed below and can be implemented in various forms. The substance provided in the description represents nothing else than specific details required in order to help technology specialists to fully understand the invention this invention is defined within the scope of the enclosed claim.

It should be noted that a process is in fact a container of resources which are allocated and utilized to execute the program code of an executable file. A process has a virtual address space within the computer system s physical data storage and is managed by the operating system. The required sections of an executable file from which the process is loaded are loaded into the virtual address space of the process together with the dynamic linked libraries DLL related to the file. The address space of a process also stores various data structures such as stacks. Each process represents at least one execution thread. A thread uses system resources for example files system registry keys synchronization objects etc. and the virtual address space of the process. The execution of the program code occurs by way of execution of the threads of the associated process. In performing security related operations the analysis of a process ordinarily involves examining all of the events occurring during the execution of the associated program code.

In response to the launch of a process process monitoring module detects and intercepts the associated event. In one example this can be accomplished via interception of a call for the function responsible for the launch of the process e.g. CreateProcess followed by creation of a corresponding entry of that action is into an events log. Process monitoring module assigns an initial trust status to the process. In a related embodiment if the process had been launched prior to the operation of process monitoring module the process will nonetheless be intercepted and its trust status assessed. Accordingly process monitoring module classifies the process as trusted or not trusted based on an analysis of the process s source for example the file from which the process was loaded.

In a related embodiment the file analysis is made using a lookup in the trusted objects database which contains information on all trusted files known at the moment of the analysis. Consequently depending on the availability of information about the file in the database the status of the process will be also determined. Therefore if the database contains information on the file the status of the process will be determined as trusted. In the opposite case if the database does not contain information on the file the status of the process will be determined as not trusted. In another embodiment the analysis of the file can be performed based on a verification of a digital signature of the file if one is available.

Then in accordance with the currently assigned trust status of the process the process monitoring module assigns at least one type of event for subsequent monitoring and analysis. Accordingly for a process with a trusted status in the VISIO.EXE process is an example of such process the process monitoring module will track among all the occurring events only the essential events information about which is contained in the essential events database . Essential events are events that must be monitored and analyzed regardless of the trust status because the occurrence of these events is informative as to the trust status setting of an object. In other words the trust status of an object may need to be changed in response to an occurrence of an essential event. Examples of essential events can be events indicating the launch or closure of an executable file the opening establishment of a network connection or reading of a file.

For a process with a non trusted status in the explorer.exe process is an example of such process the process monitoring module will track among all the occurring events both the essential events and the critical events information about which is contained in the critical events database . Critical events are events the occurrence of which is informative as to the execution of malicious code or at least suspicious code in an analyzed process. Suspicious code is code that may or may not actually be malicious but has one or more characteristics that are indicative of a likelihood that the code is malicious. Examples of critical events can be events indicating the creation of a new file CreateFile new process CreateProcess and new thread CreateThread CreateRemoteThread writing into a file WriteFile infiltration into an address space of a process by another process change in OS settings in particular security settings and access to the registry keys responsible for automatic loading. Malicious code is also suspicious code but suspicious code is not always malicious.

It should be noted that in in addition to essential and critical events a third type of event is depicted namely insignificant events. Insignificant events are events that are not very important in terms of analyzing the hazardousness of the application s behavior because such events can occur during the execution of both safe and malicious software and during the execution of safe software only. Examples of insignificant events are events that occurred during the execution of a service code added by the compiler during the compilation of the software or events related to the call for the current process name retrieval function process threads number determination function graphical window creation function etc. Insignificant events will be ignored during the detection of essential and critical events in the thread of events. In addition in one of the embodiments of the invention detection and filtering of insignificant events is possible using a suitable algorithm for identifying and filtering out insignificant events such as one using the decision criteria noted above.

After the detection of at least one monitored essential or critical event depending on the process trust status the process monitoring module sends information on the detected event and on the current process trust status to the event processing module . The event processing module analyzes the received information using the evaluation criteria which is stored in the evaluation criteria database .

Depending on the embodiment of this invention examples of the evaluation criteria determining the need to change the process trust status or file trust status can be the following 

In addition the files and processes being created inherit the trusted or non trusted status from the process creating them. For example if a process with an established trusted status creates a file or a new process then the file or process being created will also be assigned a trusted status. It should also be noted that the above mentioned assessment criteria are examples and are not limited by them.

After performing the analysis the event processing module makes a decision as to the need to change the process trust status which it sends to the processes monitoring module . Also the event processing module will make changes in the trusted objects database in case of file trust status change. Such changes can be an addition of information about a new trusted file which was previously unknown or non trusted to the database or removal of the information about a trusted file from the database because the file trust status became non trusted.

The processes monitoring module after receiving information from the event processing module will change the current process trust status and will assign the relevant types of events for subsequent tracking.

In one embodiment the event processing module also makes a decision on the need to perform an antivirus check of a file or process. This decision depends on the type of the received event and on the process trust status see .

In case if the event is a critical event the event processing module will prompt the antivirus module to immediately perform as a high priority task a check of a non trusted process as it was described earlier critical events are tracked only for non trusted processes and of the file from which the process was launched. The antivirus module will perform the check and will provide a verdict on the maliciousness of the file to the event processing module . It should be noted that the file and process check methods depend on the capabilities of the antivirus module . The antivirus module can use either a simpler type of check such as a signature file analysis or a more complicated type of check allowing to perform a more detailed analysis for example using an expert system based on a completed events analysis. In case if the file is considered malicious the file will be blocked and consequently the process will be stopped. In the opposite case if the file is safe the event processing module will subsequently add that file to the trusted objects database and will make a decision on the need to change the process trust status to trusted process . After that the decision will be sent to the processes monitoring module for subsequent monitoring.

If the event is a essential one and the process trust status is non trusted the antivirus module will perform an antivirus check of the process and of the file in a non urgent manner i.e. as a background task to avoid interfering with the user s main activity.

If the event is a essential one and the process trust status is trusted the antivirus module will not perform an antivirus check of the process and of the file.

The interaction between computer devices depicted in includes the transfer of various items of information from one device to another. In addition the devices can be located either on a local area network for example an intra corporate network or intranet or on a wide area network for example on the Internet . In one embodiment polling is first performed among the devices i.e. devices present on a local area network and then among the devices i.e. devices present on a world area network.

As one example on device an essential event indicating a network connection was detected. For example assume the application from which the process being monitored was launched requested access to an outside resource. In addition the device cannot by itself determine the trust status of the resource with which the network connection occurred because it encountered that resource for the first time. Then the device sends a request to the device and . The request contains information on the detected essential event for example the name of the outside resource or the resource s address URL . In case if any of the devices has already evaluated this event and made a decision on the resource s trust status e.g. trusted or non trusted this information will be sent to the device . In the opposite case if the devices do not have any information the device will request help from the devices on the world area network namely the devices .

In a related embodiment in case the device does not have direct access to the devices device will access the device while the device will in turn access the devices . After that the device will perform aggregation of the information received from the devices and subsequent transfer of the gathered information to the device .

Therefore the one aspect of the invention can at the device receive information about the detected network connection from other similar inventions installed on the devices . After that this embodiment will at the device make its own decision on the trust status of the process and or file being analyzed. It should be noted that the information gathered from other network devices can have various forms. An example of information is the result of the analysis of a similar event or process information on the trust status of a resource or PC with which network interaction was performed or lists of safe devices outside addresses URL safe applications etc.

Another example of network connection analysis is a situation when network connection occurred between two devices containing the presented invention. In this case the analysis of the network connection will be determined by the status of applications on both devices. Usually the status will be passed on from the status of the application installed on the device being accessed. In other words if device identifies a network connection of an application with the application installed on the device and the device also implements an embodiment of the invention then the determination of the status of the application installed on the device will use the information on the status of the application installed on the device

If the analyzed event is a critical event then at the event processing module will make a request for the antivirus module to perform an antivirus check. After the antivirus check is performed the antivirus module will send the results of the check to the event processing module for further evaluation of the event.

The removable and non removable memory interfaces may couple the computer to disk drives such as SSD or rotational disk drives. These disk drives may provide further storage for various software applications such as the operating system application programs and other program modules . Further the disk drives may store other information such as program or application data . In various embodiments the disk drives store information that doesn t require the same low latencies as in other storage mediums. Further the operating system application program data program modules and program or application data may be the same information as that stored in the RAM in various embodiments mentioned above or it may be different data potentially derivative of the RAM stored data.

Further the removable non volatile memory interface may couple the computer to magnetic portable disk drives that utilize magnetic media such as the floppy disk Iomega Zip or Jazz or optical disk drives that utilize optical media for storage of computer readable media such as Blu Ray DVD R RW CD R RW and other similar formats. Still other embodiments utilize SSD or rotational disks housed in portable enclosures to increase the capacity of removable memory.

The computer may utilize the network interface to communicate with one or more remote computers over a local area network LAN or a wide area network WAN . The network interface may utilize a Network Interface Card NIC or other interface such as a modem to enable communication. The modem may enable communication over telephone lines coaxial fiber optic powerline or wirelessly. The remote computer may contain a similar hardware and software configuration or may have a memory that contains remote application programs that may provide additional computer readable instructions to the computer . In various embodiments the remote computer memory can be utilized to store information such as identified file information that may be later downloaded to local system memory . Further in various embodiments the remote computer may be an application server an administrative server client computers or a network appliance.

A user may enter information to the computer using input devices connected to the user input interface such as a mouse and keyboard . Additionally the input device may be a trackpad fingerprint scanner joystick barcode scanner media scanner or the like. The video interface may provide visual information to a display such as a monitor . The video interface may be an embedded interface or it may be a discrete interface. Further the computer may utilize a plurality of video interfaces network interfaces and removable and non removable interfaces in order to increase the flexibility in operation of the computer . Further various embodiments utilize several monitors and several video interfaces to vary the performance and capabilities of the computer . Other computer interfaces may be included in computer such as the output peripheral interface . This interface may be coupled to a printer or speakers or other peripherals to provide additional functionality to the computer .

Various alternative configurations and implementations of the computer are within the spirit of the invention. These variations may include without limitation additional interfaces coupled to the system bus such as universal serial bus USB printer port game port PCI bus PCI Express or integrations of the various components described above into chipset components such as the northbridge or southbridge. For example in various embodiments the processing unit may include an embedded memory controller not shown to enable more efficient transfer of data from the system memory than the system bus may provide.

The embodiments above are intended to be illustrative and not limiting. Additional embodiments are within the claims. In addition although aspects of the present invention have been described with reference to particular embodiments those skilled in the art will recognize that changes can be made in form and detail without departing from the scope of the invention as defined by the claims.

Persons of ordinary skill in the relevant arts will recognize that the invention may comprise fewer features than illustrated in any individual embodiment described above. The embodiments described herein are not meant to be an exhaustive presentation of the ways in which the various features of the invention may be combined. Accordingly the embodiments are not mutually exclusive combinations of features rather the invention may comprise a combination of different individual features selected from different individual embodiments as will be understood by persons of ordinary skill in the art.

Any incorporation by reference of documents above is limited such that no subject matter is incorporated that is contrary to the explicit disclosure herein. Any incorporation by reference of documents above is further limited such that no claims that are included in the documents are incorporated by reference into the claims of the present Application. The claims of any of the documents are however incorporated as part of the disclosure herein unless specifically excluded. Any incorporation by reference of documents above is yet further limited such that any definitions provided in the documents are not incorporated by reference herein unless expressly included herein.

For purposes of interpreting the claims for the present invention it is expressly intended that the provisions of Section 112 sixth paragraph of 35 U.S.C. are not to be invoked unless the specific terms means for or step for are recited in a claim.

