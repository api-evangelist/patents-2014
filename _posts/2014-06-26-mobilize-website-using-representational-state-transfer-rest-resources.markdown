---

title: Mobilize website using representational state transfer (REST) resources
abstract: In an approach for mobilizing a web application, a processor receives a representational state transfer (REST) resource of a web application. A processor analyzes the REST resource to identify a pattern in the REST resource. A processor retrieves a template corresponding to the pattern in the REST resource. A processor generates a mobile web application based, at least in part, on the REST resource and the template.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09383971&OS=09383971&RS=09383971
owner: International Business Machines Corporation
number: 09383971
owner_city: Armonk
owner_country: US
publication_date: 20140626
---
The present invention relates generally to the field of website mobilization and more particularly to generating a mobile website using representational state transfer REST resources.

The mobile web refers to access to the Internet from a handheld mobile device such as a smartphone connected to a mobile network or other wireless network. Mobile devices can include smartphones netbooks tablets e books and other devices with a variety of screen sizes and input capabilities e.g. touchscreen mouse keyboard etc. .

Representational state transfer REST is a set of principles that define how web standards such as hypertext transfer protocol HTTP and uniform resource identifier URI are intended to be used. REST is intended to evoke an image of how a well designed web application behaves presented with a network of webpages a user progresses through an application by selecting links or state transitions resulting in the next page being transferred to the user and rendered for their use. RESTful applications maximize the use of existing well defined interfaces and other built in capabilities provided by the chosen network protocol and minimize the addition of new application specific features.

Aspects of an embodiment of the present invention disclose a method computer program product and computing system for mobilizing a web application. A processor receives a representational state transfer REST resource of a web application. A processor analyzes the REST resource to identify a pattern in the REST resource. A processor retrieves a template corresponding to the pattern in the REST resource. A processor generates a mobile web application based at least in part on the REST resource and the template.

Embodiments of the present invention recognize that attempting to port an existing desktop website to a mobile website can be a complex process resulting in a less than optimal application for mobile devices. Embodiments of the present invention recognize that building a new mobile web application can present challenges with regards to the best form of representation for a collection of data. Embodiments of the present invention recognize that developers oftentimes cannot understand what mobile user interface UI constructs available can best represent their data without trial and error. Embodiments of the present invention recognize that a solution is required to optimize the process of generating a mobile web UI using representational state transfer REST resources present within desktop versions of websites.

In the depicted embodiment computing system includes server and network . Network may be a local area network LAN a wide area network WAN such as the Internet any combination thereof or any combination of connections and protocols that will support communications between server and computing devices not shown attempting to access website on server in accordance with embodiments of the invention. Network may include wired wireless or fiber optic connections. Computing system may include additional computing devices servers computers or other devices not shown.

Server may be a management server a web server or any other electronic device or computing system capable of processing program instructions and receiving and sending data. In some embodiments server may be a laptop computer tablet computer netbook computer personal computer PC a desktop computer or any programmable electronic device capable of communicating with other devices not shown via network . In other embodiments server may represent a server computing system utilizing multiple computers as a server system such as in a cloud computing environment. Server contains website REST mobilization program and template storage . Server may include components as depicted and described in further detail with respect to .

Website is any web document or collection of web documents containing information accessible to other computing devices not shown through a web browser over network . Website may include one or more webpages that include one or more widgets e.g. JavaScript widgets page objects user interface elements images RESTful applications or other elements. A widget is a stand alone or self contained application or set of script or code for use within a webpage. In general website is any website that includes at least one REST resource capable of being accessed by REST mobilization program .

REST mobilization program operates to identify patterns within REST resources of a website such as website . REST mobilization program also operates to generate mobile applications for each REST resource based on a template associated with identified patterns of each REST resource. If multiple REST resources exist REST mobilization program may further generate a mobile web application catalog for website . In one embodiment REST mobilization program resides on server . In other embodiments REST mobilization program may reside on another server or another computing device provided mobilization program has access to website and template storage .

Template storage may be a repository that may be written to and read by REST mobilization program . Templates corresponding to patterns in REST interfaces may be stored to template storage . In some embodiments templates stored to template storage may be created by a user at server using a user interface associated with REST mobilization program . In one embodiment template storage resides on server . In other embodiments template storage may reside on another server or another computing device provided that template storage is accessible to REST mobilization program .

In one embodiment initially a web developer or other user may create a webpage or website such as website . Website may be a single webpage or a website comprising a collection of multiple webpages. Website includes one or more REST resources or interfaces. A REST resource is generally a resource accessible by a well defined uniform resource identifier URI . A URI is a string of characters used to identify a name of a web resource. Such identification enables interaction with representations of the web resource over a network typically the World Wide Web using specific protocols. A REST resource may use hypertext transfer protocol HTTP methods e.g. GET POST DELETE etc. as verbs to perform actions on the REST resource. Multiple REST resource members e.g. users id may make up a REST resource collection e.g. users .

Further a web developer or other user may additionally create and store templates associated with patterns identifiable within a REST resource. For example one template may be associated with a collection pattern. A collection is a simple model for manipulating a set of resources that includes member items that can be added removed updated and or deleted. Templates associated with different patterns may be stored to a repository such as template storage .

In step REST mobilization program receives one or more REST resources of a webpage or website such as website . In some embodiments a web developer or other user may input website or another website or webpage to REST mobilization program through a UI accessible via server or through a UI accessible via another server or another computing device across network not shown . In some embodiments REST mobilization program may receive a request to access website .

REST mobilization program identifies REST resources of a received webpage or website such as website . In some embodiments website is a rich Internet application RIA and REST mobilization program monitors RIA REST accesses to website . RIA is a web application that has many of the characteristics of desktop application software. RIA s are typically delivered via a site specific browser browser plugin extensive use of JavaScript or virtual machine. In some embodiments REST mobilization program monitors and analyzes information gathered from an HTTP website access log. In some embodiments REST mobilization program uses an HTTP OPTION to query the resource and get the web application description language WADL definition for the REST resource. A WADL definition is a machine readable extensible markup language XML description of HTTP based web applications typically REST web services. WADL definitions model the resources provided by a service and the relationships between them. In some embodiments REST mobilization program receives a WADL definition associated with website rather than extracting REST resources from website .

In step REST mobilization program selects a REST resource from website or the input WADL definition. In embodiments of the present invention REST mobilization program may iteratively perform each of step through step on REST resources until each REST resource from website has been processed see decision . In some embodiments REST mobilization program selects each REST resource according to the order listed within the WADL definition. In other embodiments REST mobilization program may select REST resources based on other criteria.

In step REST mobilization program identifies a pattern from the selected REST resource. In some embodiments patterns and criteria associated with each pattern may be stored to template storage along with templates associated with each pattern. In some embodiments REST mobilization program may access template storage to retrieve predefined patterns or sets of patterns for comparison to the selected REST resource. In some embodiments REST mobilization program compares information retrieved from the REST resource to predefined patterns or sets of patterns. In such a comparison REST mobilization program may utilize factors such as but not limited to resource names URIs associated HTTP methods e.g. GET DELETE OPTIONS POST PUT etc. members of resources e.g. user id may be a member of resource users or other information. Patterns may include for example a collection collection instance or resource. A collection is a simple model for manipulating a set of resources. Collections have member items that a user can add remove update and or delete.

In one example REST mobilization program may identify a collection pattern with a resource users because the main URI or uniform resource locator URL associated with the resource users or users is followed by more than one member i.e. multiple instances of users id . Further REST mobilization program may identify that each member for example the multiple instances of users id corresponds to a collection instance pattern. REST mobilization program may also take into consideration HTTP methods available in associating one or more patterns with a REST resource. In some embodiments REST mobilization program may also take into consideration the types of data associated with the REST resource and the organizational structure associated with that data such as lists tables amount of information etc.

In step REST mobilization program selects at least one template for the REST resource based on the identified pattern s . In some embodiments patterns are associated with templates and stored to a repository such as template storage for access by REST mobilization program . Each template corresponds to a particular pattern such that data designed for access in a desktop environment may be more easily accessible on a mobile device such as a tablet or smartphone. Each template may be for example a widget or hypertext markup language HTML snippet. Templates may cause detailed sets of information to be displayed such that only certain fields are initially displayed touchscreen friendly selection command methods may be deployed and or methods of organization may vary based on each identified pattern. In some embodiments templates are designed to operate using a model view controller MVC software pattern for implementing the user interface within the mobile device or tablet. MVC separates internal representations of information from the way information is presented to or accepted from a user. The model notifies associated views and controllers where there has been a change in its state. This notification allows views to update their presentation and controllers to change the set of commands available to a user. In embodiments of the present invention the model may be a REST resource of website . A view generates an output representation to the user based on information received from the model and or view. A controller sends commands to the model to update the model s state for example due to use of an available HTTP method. A controller may also be capable of sending commands to the view to change the view s presentation of the model.

A template for an instance of a collection or for a single item may yield a form. Form fields may be included within the selected template based on their organizational structure within the instance data or by other organizational means. In some embodiments each form field may be extracted from the resultant REST calls or from any schemas defined for the REST API. A schema is a way to define the structure content and to some extent the semantics of data. In some embodiments a template may designate form field labels or another form field indicator with names extracted from schema fields corresponding to the selected data.

In step REST mobilization program generates a mobile application for the selected REST resource. In some embodiments REST mobilization program populates the selected template with data extracted from the selected REST resource. Embodiments of REST mobilization program populate the selected template according to methods previously described utilizing applicable schemas data formats and other information based on the selected template and the information the selected REST resource represents. For example REST mobilization program may utilize a template consisting of UI components for a scrollable view and list with buttons to add and remove items from the list. Such a list may be tied to or otherwise associated with a data model for the REST resource. In some embodiments a populated template may include a list of services wherein each service includes a URI of the REST resource and HTML method e.g. GET DELETE POST etc. and the internet media type of the resulting document.

In decision REST mobilization program determines whether there are more REST resources within website . REST mobilization program may determine whether there are more REST resources within website by accessing website and identifying the existence of additional REST resources by means similar to the identification method discussed with regard to step . If REST mobilization program determines there are more REST resources within website decision yes branch REST mobilization program proceeds to select an additional REST resource step .

If REST mobilization program determines there are not more REST resources within website decision no branch REST mobilization program generates a mobile web application or mobile web application catalogue step . A mobile web application catalogue may be a combination of mobile applications such as mobile applications generated by step . In some embodiments the mobile web application catalogue may be integrated into website such that mobile devices or tablets are directed to the mobile catalogue. In other embodiments the mobile web application may be a native mobile application stored as an application downloadable from an app store. Embodiments of REST mobilization program may provide UI options to navigate between the multiple mobile applications present within a single mobile web application catalogue. In some embodiments REST mobilization program may detect the type of device accessing website and adjust the presentation of website based on the type of device For example REST mobilization program may utilize browser detection methods such as JavaScript to determine the type of device a user is using to access website and website may present a desktop version mobile version created by REST mobilization program or other versions created by REST mobilization program for other types of devices.

Server includes communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

Website REST mobilization program and template storage are stored in persistent storage for execution and or access by one or more of the respective computer processors via one or more memories of memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Website REST mobilization program and template storage may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to server . For example I O interface may provide a connection to external devices such as a keyboard keypad a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. website REST mobilization program and template storage can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to a display .

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

