---

title: Dynamic selection of network traffic for file extraction shellcode detection
abstract: A method for network security includes, in a computer network that exchanges traffic among multiple network endpoints using one or more network switches, configuring at least one network switch to transfer at least some of the traffic for inspection. Only a portion of the traffic, which is suspected of carrying executable software code, is selected from the transferred traffic. The selected portion of the traffic is inspected, so as to verify whether any of the executable software code is malicious.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09491190&OS=09491190&RS=09491190
owner: GUARDICORE LTD.
number: 09491190
owner_city: Tel Aviv
owner_country: IL
publication_date: 20141207
---
This application claims the benefit of U.S. Provisional Patent Application 61 920 823 filed Dec. 26 2013 and U.S. Provisional Patent Application 61 922 910 filed Jan. 2 2014 whose disclosures are incorporated herein by reference.

The present invention relates generally to network security and particularly to methods and systems for protection against malicious executable files.

An embodiment of the present invention that is described herein provides a method for network security in a computer network that exchanges traffic among multiple network endpoints using one or more network switches. The method includes configuring at least one network switch to transfer at least some of the traffic for inspection. Only a portion of the traffic which is suspected of carrying executable software code is selected from the transferred traffic. The selected portion of the traffic is inspected so as to verify whether any of the executable software code is malicious.

In some embodiments the network endpoints include Virtual Machines VMs the network switch includes a virtual switch that serves the VMs and selection of the portion of the traffic is performed by a selection software module coupled to the virtual switch. In other embodiments the computer network includes a Software Defined Network SDN whose network switches are controlled by an SDN controller and selection of the portion of the traffic is performed by a selection application connected to the SDN controller.

In an embodiment selecting the portion of the traffic includes detecting in the traffic one or more executable files suspected of malicious code. Additionally or alternatively selecting the portion of the traffic includes detecting a suspected shellcode in the traffic. In another embodiment selecting the portion includes choosing the portion from traffic that is exchanged between Virtual Machines VMs within a single physical node of the computer network.

In an example embodiment inspecting the selected portion includes inspecting only a predefined data size in a beginning of each selected traffic session. In another embodiment selecting the portion includes defining a prioritization among suspected traffic sessions in accordance with deviation of the suspected traffic sessions from a predefined baseline behavior and selecting one or more of the suspected traffic sessions for inspection based on the prioritization.

In a disclosed embodiment selecting the portion includes prioritizing selection of the portion based on an a priori characteristic of the traffic. In another embodiment selecting the portion includes receiving indications external to the traffic and prioritizing selection of the portion based on the indications. In yet another embodiment selecting the portion includes identifying a file that is transferred in the traffic examining a header of the file and selecting the file for inspection upon identifying based on the header that the file is executable.

In some embodiments at least one of the network endpoints includes a Virtual Machine VM and selecting the portion includes examining an internal process in the VM which initiates the selected portion of the traffic using memory introspection. In an embodiment selecting the portion includes running multiple traffic selection modules in the computer network and coordinating selection of the portion by communication among the multiple traffic selection modules.

In some embodiments upon detecting malicious executable software code in given traffic the method includes selecting for inspection subsequent traffic having characteristics that match the given traffic. In an embodiment selection of the portion of the traffic or inspection of the selected portion are performed at least partially in the network switches.

There is additionally provided in accordance with an embodiment of the present invention a system for security in a computer network that exchanges traffic among multiple network endpoints using one or more network switches. The system includes a traffic selection module and an inspection module. The traffic selection module is configured to receive from at least one of the network switches at least some of the traffic for inspection and to select from the received traffic only a portion of the traffic that is suspected of carrying executable software code. The inspection module is configured to inspect the selected portion of the traffic so as to verify whether any of the executable software code is malicious.

There is further provided in accordance with an embodiment of the present invention a computer software product the product including a tangible non transitory computer readable medium in which program instructions are stored which instructions when read by a processor of a compute node in a computer network that exchanges traffic among multiple network endpoints using one or more network switches cause the processor to receive from at least one of the network switches at least some of the traffic for inspection to select from the received traffic only a portion of the traffic that is suspected of carrying executable software code and to send the selected portion of the traffic for inspection so as to verify whether any of the executable software code is malicious.

The present invention will be more fully understood from the following detailed description of the embodiments thereof taken together with the drawings in which 

Many types of malicious attacks on computer networks involve transfer of executable software code from one network endpoint to another. Such executable code may be malicious by itself e.g. a virus or a Trojan horse. In other cases the executable code comprises a shellcode i.e. a small piece of code that gives the attacker some control over the endpoint and allows subsequent delivery of malicious code.

In modern computer networks such as virtualized data centers and Software Defined Networks SDNs the volume of traffic exchanged over the network is huge. The large traffic volume and the computational complexity of detecting and inspecting executable code make it unfeasible to inspect all or even most of the traffic.

Embodiments of the present invention that are described herein provide improved methods and systems for protecting a computer network from attacks. The disclosed techniques efficiently identify and select only small portions of the network traffic that contain executable code. The selected portion is then sent for inspection. In some embodiments selection of traffic for inspection is performed by a traffic selection module that is coupled to one of the network switches. Depending on the network architecture the switches as well as the endpoints may be physical or virtual.

Various traffic selection techniques and example system configurations are described herein. In some embodiments the endpoints comprise Virtual Machines VMs and the traffic selection module runs on the same compute node as the VMs it protects. In some of these techniques the traffic selection module exploits the access it has to internal VM memory and thus to processes files and data structures of the VM to obtain information that assists in identifying traffic carrying potentially hostile executable code. In other embodiments multiple traffic selection modules running in multiple compute nodes cooperate with one another in identification and selection of traffic for inspection.

The methods and systems described herein are highly effective in identifying and selecting traffic that is suspected of conveying executable software code. By using the disclosed techniques it is possible to reduce the volume of inspected traffic to a fraction of the total traffic volume. As such available inspection resources can be utilized efficiently and attacks can be detected with high detection rate and low false detection rate.

System comprises multiple compute nodes that communicate with one another over a computer network . Nodes may comprise for example servers workstations or any other suitable computing platform. Network may operate in accordance with any suitable protocol such as Ethernet or Infiniband.

At least some of nodes run Virtual Machines VMs which in turn run various client applications. In each node a hypervisor implements a virtualization layer that assigns physical resources e.g. CPU memory storage and networking resources to the VMs. In the present context both VMs and nodes i.e. both virtual and physical machines are referred to as network endpoints.

In the present example hypervisor of each node runs a respective virtual network switch also referred to as soft switch that forwards traffic for the VMs running on the node. Typically the virtual switch forwards both the traffic between VMs on the same node and traffic exchanged between VMs on different nodes. In many real life implementations hypervisor runs multiple interconnected virtual switches that jointly form a complex switching fabric. In the context of the present patent application and in the claims the terms switch and network switch refer both to a single switch and to multiple interconnected switches whether physical or virtual. 

In the embodiment of hypervisor of each node runs a respective traffic selection module that is connected to the respective virtual switch of the node. Module monitors the traffic traversing the virtual switch and identifies and selects a portion of the traffic that is suspected of containing executable code. Such traffic may comprise for example executable files such as viruses or small pieces of code such as shellcode.

Since traffic selection module is coupled to switch it is able to select and send for inspection traffic that is exchanged between VMs that run in the same hypervisor all within a single node . The capability of inspecting internal traffic which is not present on network at all increases the detection performance considerably. Generally however modules examine both internal traffic internal to the node and external traffic traffic exchanged with other nodes .

In an embodiment traffic selection module configures switch to transfer e.g. forward or mirror the traffic to the traffic selection module. Alternatively switch configuration can be performed by some management function.

Upon identifying a traffic session e.g. packet flow that is suspected of carrying executable code module transfers some or all of the suspected session to an inspection module . The inspection module may be implemented on a standalone node or on one of the nodes that also run VMs for example. In an example embodiment some or all of the inspection functions may be implemented on the node from which the traffic originates or on the node to which the traffic is destined often close to the traffic selection module.

Inspection module may carry out any suitable technique for verifying whether the inspected traffic indeed carries executable code and or whether this code is malicious or innocent. For example module may employ known sandbox techniques that test suspicious executable files in an isolated environment. Sandbox techniques that can be used by module are described for example by Prevelakis and Spinellis in Sandboxing Applications Proceedings of the FREENIX Track 2001 USENIX Annual Technical Conference 2001 and by Goldberg et al. in A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker Proceedings of the Sixth USENIX UNIX Security Symposium July 1996 which are incorporated herein by reference.

Additionally or alternatively module may employ known shellcode emulation techniques that attempt to execute binary code suspected of comprising shellcode. Shellcode emulation techniques that can be used by module are described for example by Polychronakis et al. in Comprehensive Shellcode Detection using Runtime Heuristics Proceedings of the 26th Annual Computer Security Applications Conference December 2010 and by Wicherski in Efficient Bytecode Analysis Linespeed Shellcode Detection March 2011 which is incorporated herein by reference.

In some embodiments selection modules receive indications from external sources not shown in the figure that assist in the traffic selection process. External sources may comprise for example behavioral analysis tools. Several examples of such indications and their use in traffic selection are given further below. In some embodiments system comprises a management module not shown in the figure that connects to the external sources. The management module typically also collects analyzes and presents the inspection results e.g. detected malicious code or shellcode .

The SDN further comprises an SDN controller that configures and controls switches . The SDN controller may configure and control switches using any suitable protocol such as OpenFlow or OnePK. OpenFlow is specified for example in OpenFlow Switch Specification Version 1.1.0 Implemented Wire Protocol 0x02 Feb. 28 2011 which is incorporated herein by reference. OnePK is described for example in One Platform Kit onePK for Developers March 2014 which is incorporated herein by reference.

In the SDN example of the traffic selection functionality is carried out by a traffic selection application that runs on top of SDN controller . Application may run in the SDN controller or it may communicate with the SDN controller using a suitable Application Programming Interface API for example. The SDN further comprises an inspection module which is similar in functionality to module of above.

Typically SDN controller configures switches to transfer e.g. forward or mirror some or all of the traffic traversing the switches for inspection. Selection of traffic for inspection may be performed by traffic selection application and or locally at switches . In an embodiment application inspects the transferred traffic selects a portion of the traffic that is suspected of containing executable code and sends the selected portion of the traffic for inspection by inspection module . In another embodiment application instructs that the traffic is sent to switches which perform local traffic inspection. When a switch completes inspecting a given flow it may request application to stop forwarding traffic of this flow. In an example embodiment a given switch may be configured with static redirection rules and a local traffic selection module that offloads specific sessions after inspection dynamic rules.

In some embodiments the SDN comprises an extraction module not shown in the figure that extracts files from the selected portion of the traffic and transfers the extracted files to inspection module . In other embodiments extraction of the files may be performed by application or by inspection module .

In some embodiments selection application receives indications from external sources not shown in the figure that assist in the selection process. External sources may comprise for example behavioral analysis tools or cloud management services. Several examples of such indications and their use in traffic selection are given further below. In some embodiments the system of comprises a management module that connects to external sources. The management module typically also collects analyzes and presents the inspection results e.g. detected malicious code or shellcode .

When detecting a malicious executable code e.g. malicious file or shellcode inspection module may communicate with selection application either directly or via the extraction module and request application to take appropriate countermeasures. Application may for example block the node in question from accessing the network e.g. by configuring appropriate rules in the switch that is connected to that node.

The system configurations shown in are example configurations which are chosen purely for the sake of conceptual clarity. In alternative embodiments any other suitable configurations can be used. For example in not all nodes necessarily run traffic selection modules and or a given traffic selection module may serve VMs on a different node. As another example in both and the system may comprise more than a single inspection module.

As yet another example some of the functionality of selecting traffic for inspection and or inspecting selected traffic may be performed in the network switches. Such solutions are feasible for both physical switches e.g. switches in and virtual switches e.g. switches in . For example a switch may perform some or all shellcode inspection functions.

The different system elements shown in such as switches and traffic selection modules and application and inspection modules and may be implemented using any suitable hardware such as in an Application Specific Integrated Circuit ASIC or Field Programmable Gate Array FPGA . Alternatively the various system elements can be implemented using software or using a combination of hardware and software elements.

In some embodiments nodes nodes inspection module inspection module and or SDN controller may comprise general purpose processors which are programmed in software to carry out the functions described herein. The software may be downloaded to the processors in electronic form over a network for example or it may alternatively or additionally be provided and or stored on non transitory tangible media such as magnetic optical or electronic memory.

At a checking step the traffic selection module application checks whether the session traffic is suspected of containing executable code. Note that in some cases e.g. in the case of shellcode checking step does not conclude that the session traffic contains executable code only that it is suspected of containing code. The conclusion that the traffic indeed contains executable code may be established later at the inspection stage.

If the traffic is not suspected of containing executable code the traffic selection module application checks whether the session is to be removed from mirroring at a removal checking step . If the session is to be removed e.g. because no suspected executable code was found in the beginning e.g. first 1K bytes of the session the method ends at an innocent termination step . Otherwise the method loops back to step above.

If the checking result at step is positive the traffic selection module application sends some or all of the session traffic to inspection module or at an inspection delivery step . The session is typically allowed to proceed during inspection.

At a testing step the inspection module or checks whether the executable code in question is hostile or innocent. In the case of shellcode module first verifies using CPU emulation whether the suspected traffic indeed contains executable code. 

If the code is innocent the inspection module allows the session to proceed e.g. allows the file transfer to proceed at innocent termination step . If the code is declared hostile the inspection module terminates the session and initiates mitigation of the detected threat at a hostile termination step .

The process of is an example process which is depicted purely for the sake of conceptual clarity. In alternative embodiments any other suitable method flow can be used.

As noted above an attack on a computer network often involves transfer of executable software code from one network endpoint to another. Such code may comprise for example malicious executable files such as viruses or Trojan horses tools used by the attacker shellcode or other types of executable code. The disclosed techniques detect attacks by detecting and inspecting traffic carrying executable software code.

The techniques described below are applicable mutatis mutandis to the virtualized data center configuration of to the SDN configuration of as well as to any other suitable network configuration. Some of the examples below refer to selection module or to selection application for the sake of clarity. Generally each of the examples is applicable to either module or application .

An attacker may transfer files using any suitable protocol e.g. Hyper Text Transfer Protocol HTTP Trivial File Transfer Protocol TFTP or Server Message Block SMB . Alternatively the attacker may transfer code using some proprietary protocol and using various Transmission Control Protocol TCP ports in order to evade detection.

In some embodiments inspection module inspects only a predefined data size at the beginning of each suspected session. The data size may specified in terms of a given number of bytes e.g. the first 10 KB of each session. Alternatively the data size may specified in terms of time e.g. the first N seconds of the session. The rest of the session is excluded from inspection. Since the majority of data center sessions are long this technique reduces the volume of inspected traffic significantly.

The rationale behind the above technique is that executable code if present will typically be small and will typically be located at the beginning of the session. These assumptions hold in practice with high probability. In a variant of this embodiment if executable code is detected during inspection inspection will proceed until the end of the code even if exceeding the predefined data size.

In the configuration of the above technique can be implemented by application configuring switches e.g. using OpenFlow commands with mirroring rules that cause the switches to mirror new sessions to inspection module or to the extraction module that extracts files for module . In an embodiment the rules have a short expiration time e.g. two seconds and therefore only the beginning of each new session will be mirrored. In an embodiment if module or the extraction module detects a beginning of a file during this period it may communicate with application or with switch directly in order to extend the expiration period and enable mirroring and extraction of the entire file.

In some embodiments selection module prioritizes suspected sessions in accordance with their deviation from some predefined statistical behavior pattern. The sessions that deviate the most will be selected and sent for inspection for presence of executable code. The baseline behavior may consider any suitable factor. For example the baseline behavior may define how common the two endpoints of the sessions communicate over the given ports. In this example a session between endpoints that do not communicate regularly or a session over uncommon ports will be considered suspicious. As another non limiting example the baseline behavior may consider how common it is for the two endpoints of the session to communicate at the given time e.g. time of day or day of week . A deviation from this pattern will typically be considered suspicious.

In the configuration of the above technique can be implemented by application collecting traffic statistics over time. Application also configures switches e.g. using OpenFlow commands to report beginning of sessions. For each session reported by a switch application may decide whether that session deviates from the baseline behavior pattern. If so the application may instruct the switch to mirror the session to module or to the preceding extraction module for inspection.

In some embodiments selection module uses some a priori characteristic of the traffic which increases or decreases the likelihood that certain sessions carries malicious files. The selection module may use this characteristic to prioritize the selection and inspection of sessions. At the extreme certain sessions may be excluded from inspection altogether whereas other sessions may be selected and inspected immediately.

For example sessions originating from user facing endpoints as opposed to back end processing endpoints may be regarded as more likely to carry malicious executable code. As another example traffic that is known to comprise database replication sessions may be regarded safe and excluded from inspection. The latter criterion is highly effective since it often excludes from inspection very large traffic volumes.

In the configuration of the above technique can be implemented by pre configuring application with session attributes e.g. session types endpoints nodes and or protocols that can be safely excluded from inspection. Upon detecting a session that matches these attributes the selection application may command the relevant switch to exclude the session from inspection by module .

In some embodiments selection module receives indications from some source that is external to the traffic and uses these indications to prioritize the selection and inspection of sessions. For example module may receive an indication from a behavioral analysis tool that identifies a certain endpoint as suspicious. Based on this indication module may increase the priority of selecting and inspecting sessions involving the suspicious endpoint. As another example module may receive an indication from a cloud management service which reports that a VM is migrating from one endpoint to another. Based on this indication module may exclude from inspection traffic that is known to be associated with the migration process.

In the configuration of the above technique can be implemented by application communicating with the external sources of the indications. Based on the indications application instructs the relevant switches e.g. using OpenFlow commands to mirror or refrain from mirroring specific sessions to inspection module .

In some embodiments module first detects that a file is being transferred in a certain session. Upon detecting a file transfer selection module may examine the header of the file. If the header indicates a file type that is not executable the session may be excluded from inspection at least for the duration in bytes of the transferred file which may also be specified in the header .

In some embodiments which are particularly relevant to VMs and virtual switches as in selection module may select sessions for inspection using memory introspection in VMs . In an embodiment module extracts the process in a given VM that is responsible for a given session. If the process is a known process e.g. a signed or otherwise authorized process module may exclude the session from inspection. This sort of technique takes advantage of the close coupling between module and VMs which run in the same hypervisor of the same node.

In one possible implementation of the above technique module is aware of the type and version of the operating system of the VM that initiates the session. This knowledge may be obtained for example from an administrator from a cloud management service such as vSphere or OpenStack or by pattern matching the memory of the VM. Module may examine the appropriate location in the kernel memory using memory introspection detect the socket that is responsible for the session and then detect the process that holds the socket. Module is then able to access the image of the process the image name is typically given in the process structure in the operating system.

The opposite logic can also be used If the process is not known e.g. not signed or otherwise authorized module may prioritize the session higher for inspection and or hold it for a longer time period.

In some embodiments after a shellcode or malicious file has been detected module may detect the initiating process using the above technique and instruct other elements of hypervisor to prioritize this sort of process for inspection.

In some embodiments after a shellcode has been detected module selects or at least prioritizes for inspection all sessions having similar characteristics e.g. protocol destination port . In an embodiment module looks for the specific signature of the shellcode in the traffic which is faster than emulation for detecting shellcodes .

For example for each destination port module may examine the beginning of the session and verify whether the protocol of the session is the expected protocol. If so the session can be excluded from inspection. For example if a given port is known to be used for database replication module may examine the beginning of a session and determine whether the session is indeed a database replication session and not an attack that abuses a permitted port in the firewall.

In some embodiments modules in the various nodes of system communicate and cooperate with one another in selecting sessions for inspection. Consider for example a scenario in which a malicious file has been detected in traffic that was selected by a given module . That module may signal its peer modules on other nodes to examine the various VMs and search for such file in the file systems of these machines using memory introspection.

The selection methods and criteria described above are examples which are chosen purely for the sake of conceptual clarity. In alternative embodiments any other suitable selection methods and criteria can be used.

Although the embodiments described herein mainly address security applications that detect malicious code the methods and systems described herein can also be used in other applications such as for tracking file transfers in network management or visualization tools.

It will thus be appreciated that the embodiments described above are cited by way of example and that the present invention is not limited to what has been particularly shown and described hereinabove. Rather the scope of the present invention includes both combinations and sub combinations of the various features described hereinabove as well as variations and modifications thereof which would occur to persons skilled in the art upon reading the foregoing description and which are not disclosed in the prior art. Documents incorporated by reference in the present patent application are to be considered an integral part of the application except that to the extent any terms are defined in these incorporated documents in a manner that conflicts with the definitions made explicitly or implicitly in the present specification only the definitions in the present specification should be considered.

