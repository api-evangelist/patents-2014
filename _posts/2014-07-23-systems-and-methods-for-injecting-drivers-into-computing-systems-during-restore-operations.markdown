---

title: Systems and methods for injecting drivers into computing systems during restore operations
abstract: The disclosed computer-implemented method for injecting drivers into computing systems during restore operations may include (1) identifying a restore operation directed to restoring a system volume on a computing system, (2) locating, at least in part by examining a hardware configuration of the computing system being restored, at least one driver utilized by the hardware configuration, (3) representing the system volume as an image to a deployment image servicing and management application, and (4) causing the deployment image servicing and management application to inject the driver into the computing system as part of the restore operation. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146748&OS=09146748&RS=09146748
owner: Symantec Corporation
number: 09146748
owner_city: Mountain View
owner_country: US
publication_date: 20140723
---
Computing devices may be configured with a wide and ever growing variety of hardware and or connected to a plethora of peripherals. These hardware devices and peripherals are typically managed by scripts known as device drivers and may not be usable without the correct driver. Each piece of hardware or peripheral may have its own driver which may be customized or tailored for each operating system the hardware may be connected to. Even virtual devices may use drivers to interact with operating systems.

Early systems for installing drivers often required users to have access to physical media such as a compact disk that came with the hardware. More modern systems may automatically inject drivers into the operating system during device installation. However drivers may be lost during computing system crashes or may not be available from their original sources if a computing environment is restored onto different hardware than the computing environment was originally generated on.

Traditional systems for restoring system volumes typically involve injecting drivers into an offline version of a volume after the volume has been restored. However these systems often use specific code that is tailored to the hardware configuration and or operating system of the device in question increasing the difficulty and complexity of maintaining proper driver configurations. Vendors of an operating system also often change which registry keys are updated upon driver injection requiring the applications that inject these drivers to be rewritten each time.

In some traditional systems Deployment Image Servicing and Management DISM applications may be used to inject drivers before the volume is deployed to a target device. However anticipating the future hardware configurations of computing systems that have not yet been deployed may be very difficult making it unlikely that the correct combination of drivers may be installed in advance. Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for injecting drivers into to be restored volumes.

As will be described in greater detail below the instant disclosure describes various systems and methods for using DISM applications to inject drivers into deployed system volumes during restore operations in a hardware agnostic fashion. In one example a computer implemented method for performing such a task may include 1 identifying a restore operation directed to restoring a system volume on a computing system 2 locating at least in part by examining a hardware configuration of the computing system being restored at least one driver utilized by the hardware configuration 3 representing the system volume as an image to a DISM application and 4 causing the DISM application to inject the driver into the computing system as part of the restore operation.

The driver may be located in a variety of ways. In some examples locating the driver may include locating an identifier of the driver in a driver database and retrieving the driver from the driver database. In some examples locating the driver may include retrieving the driver from a driver store maintained by a restore application that is performing the restore operation. Additionally or alternatively locating the driver may include prompting a user for a location of the driver.

In some examples examining the hardware configuration of the computing system may include examining the hardware configuration during the restore operation. Additionally or alternatively the step of examining the hardware configuration may occur after deployment of the system volume to the computing system such that the steps of locating and injecting the driver may be hardware agnostic.

In some examples identifying the restore operation directed to restoring the system volume may include detecting on the system volume a file structure that is characteristic of the system volume. In one embodiment the step of locating the driver may be contingent on determining that the restore operation is directed to restoring the system volume and not a data volume.

In some examples causing the DISM application to inject the driver may include interacting with the DISM application via an application programming interface. In one embodiment the step of causing the DISM application to inject the driver into the computing system may occur after deployment of the system volume to the computing system.

In one embodiment the computer implemented method may further include determining that the driver represents an incorrect driver for the hardware configuration. In this case the systems described herein may automatically restart the restore operation locate a correct driver for the hardware configuration and cause the DISM application to inject the correct driver.

In one example the computer implemented method may further include identifying an additional restore operation on an additional computing system. In this example the systems described herein may 1 determine that the additional computing system includes a different hardware configuration that does not utilize the driver and 2 remove as part of the additional restore process the driver that is not utilized by the different hardware configuration.

In one embodiment a system for implementing the above described method may include 1 an identification module stored in memory that identifies a restore operation directed to restoring a system volume on a computing system 2 a location module stored in memory that locates at least in part by examining a hardware configuration of the computing system being restored at least one driver utilized by the hardware configuration 3 a representation module stored in memory that represents the system volume as an image to a DISM application 4 an injection module stored in memory that causes the DISM application to inject the driver into the computing system as part of the restore operation and 5 at least one physical processor configured to execute the identification module the location module the representation module and the injection module.

In some examples the above described method may be encoded as computer readable instructions on a non transitory computer readable medium. For example a computer readable medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify a restore operation directed to restoring a system volume on a computing system 2 locate at least in part by examining a hardware configuration of the computing system being restored at least one driver utilized by the hardware configuration 3 represent the system volume as an image to a DISM application and 4 cause the DISM application to inject the driver into the computing system as part of the restore operation.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for injecting drivers into computing systems during restore operations. As will be explained in greater detail below by representing a to be restored system volume as an image to a DISM application that is built into a target device s operating system the disclosed systems may enable the DISM application to inject the drivers that are required by the system volume for successful operation during as opposed to prior to the restore operation itself. In addition because this driver injection process occurs after the system volume has already been deployed to the target device this driver injection process may in effect represent a hardware agnostic process that avoids the need for driver specific and or operating system specific code. This may in turn simplify the restore process reduce the chances of incorrect injection of drivers and improve the chances of successful disaster recovery.

The following will provide with reference to and detailed descriptions of exemplary systems for injecting drivers into computing systems during restore operations. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

Exemplary system may also include a representation module that may represent the system volume as an image to a DISM application. Exemplary system may additionally include an injection module that may cause the DISM application to inject the driver into the computing system as part of the restore operation. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application. In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as computing device in computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device . In one example computing device may be programmed with one or more of modules .

In one embodiment one or more of modules from may when executed by at least one processor of computing device enable computing device to inject drivers into computing systems during restore operations. For example and as will be described in greater detail below identification module may identify a restore operation directed to restoring a system volume on computing device . Next location module may locate at least in part by examining a hardware configuration of computing device at least one driver utilized by the hardware configuration. After driver has been located representation module may represent system volume as an image to a DISM application within an operating system installed on computing device . Finally injection module may cause DISM application to inject driver into computing device as part of restore operation .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems wearable devices e.g. smart watches smart glasses etc. gaming consoles combinations of one or more of the same exemplary computing system in or any other suitable computing device.

As illustrated in at step one or more of the systems described herein may identify a restore operation directed to restoring a system volume on a computing system. For example identification module may as part of computing device in identify a restore operation directed to restoring a system volume on computing device .

The term restore operation as used herein generally refers to any operation directed to restoring previously stored data applications and or operating systems to a computing system regardless of whether the data applications and or operating systems were previously stored on the computing system that is the target of the restore operation. In some examples a restore operation may be used to restore a computing system to a previous state held by the computing system.

Identification module may identify the restore operation in a variety of ways and or contexts. For example identification module may identify a restore operation directed to restoring a personal computer. In another example identification module may identify a restore operation launched from a server to restore an enterprise computer. In some embodiments identification module may execute as part of the restore application that is processing the restore operation.

The term system volume as used herein generally refers to any storage container used to store files that are critical to starting an operating system. In some examples a system volume may include a disk volume that includes operating system and or hardware specific files such as device drivers. For example a WINDOWS system volume may include a variety of operating system and or hardware specific files such as a Boot.ini file and or Boot Configuration Data.

In some examples identification module may determine that the restore operation is directed to restoring a system volume by detecting on the system volume a file structure that is characteristic of system volumes. For example identification module may detect a WINDOWS folder a system volume information folder a boot folder a boot file and or a combination of folders and or files typically found on system volumes.

At step one or more of the systems described herein may locate at least in part by examining a hardware configuration of the computing system being restored at least one driver utilized by the hardware configuration. For example location module may as part of computing device in locate at least in part by examining a hardware configuration of computing device at least one driver utilized by the hardware configuration.

The term hardware configuration as used herein generally refers to any type or form of information that describes and or details the devices that are attached to or that make up a computing system. For example a hardware configuration for a computing system may include information that identifies each device that is attached to or that forms a part of the computing system and for each device the device s configuration or version how the device interacts with the computing system s operating system the device s type etc. Examples of such devices include without limitation a hardware device a peripheral and or a virtual device.

The term device driver or driver as used herein generally refers to any script application software and or set of instructions for interfacing between a device and an operating system. In some examples a driver may communicate with a device through a communications subsystem in the computing system. In addition a driver may be specific to a device and or an operating system.

Location module may locate the driver in a variety of ways. In one example location module may locate the driver by locating an identifier of the driver in a driver database and then retrieving the driver from the driver database. An identifier of the driver may include a name of the driver an identifier of a vendor of the driver a version number of the driver and or a numerical identifier of the driver. In some embodiments the driver database may be located on the computing system being restored. In other embodiments the driver database may be stored on a server on a local network and or on the Internet.

In some examples location module may locate the driver by retrieving the driver from a driver store maintained by a restore application that is performing the restore operation. In some embodiments the restore application may maintain the driver store by storing driver information during the creation of system restore points.

Additionally or alternatively location module may locate the driver by prompting a user for a location of the driver. For example location module may prompt the user to connect a storage device that stores a copy of the driver enter a location on the computing system and or the network where the driver may be downloaded and or enter a location on the Internet where the driver may be downloaded.

In some embodiments location module may examine the hardware configuration of the computing system during the restore operation. In these embodiments the systems described herein may have no previous information about the hardware configuration of the computing system before location module examines the same during the restore operation.

For example location module may examine the hardware configuration of the target computing system during the restore operation which occurs after the system volume has already been deployed to the computing system. In this example the computing system may have a specific hardware configuration that requires a particular driver. As such the restore operation may have no information about this specific hardware configuration or particular driver until after location module has examined the computing system s hardware. Because location module may examine the hardware configuration at restore time the restore operation and or driver injection applications may be written in a hardware agnostic manner.

In one embodiment the performance of step may be contingent on determining that the restore operation identified in step is directed to restoring a system volume and not a data volume. For example if identification module determines that the restore operation identified in step is directed to restoring a data volume the systems described herein may not operate on the data volume and or may not inject drivers into the volume that is being restored.

At step one or more of the systems described herein may represent the system volume as an image to a DISM application. For example representation module may as part of computing device in represent system volume as an image to a DISM application that is part of an operating system installed on computing device .

The term image as used herein generally refers to any representation of the state of a computing system. In some examples an image may include the complete contents and structure of a computing system and or data storage device. Examples of images include without limitation system deployment images virtual hard drive files and or WINDOWS imaging WIM files.

The term deployment image servicing and management application or DISM application as used herein generally refers to any tool used to manipulate configure and or service offline images that have not yet been deployed. In some examples a DISM application may be used to install uninstall configure and or update operating system features packages drivers and or settings before image deployment. An example of a DISM application may include the DISM.exe command line tool on WINDOWS operating systems.

Representation module may represent the system volume as an image to the DISM application in a variety of ways. For example representation module may represent the system volume as a WIM file to an application programming interface API provided by the DISM application. In some examples representation module may represent the system volume as an image to the DISM application by wrapping the system volume in a wrapper that mimics an image file. Additionally or alternatively representation module may fill out one or more fields in a call to a DISM API in a manner that indicates that the DISM API should expect an image file.

In some embodiments representation module may represent the system volume as a WIM file because the DISM application may be unable to inject drivers into system volumes and or may be configured to only inject drivers into WIM files. Thus by representing the system volume as a WIM file representation module may enable the DISM application to directly interact with and inject drivers into the system volume potentially avoiding the need for driver specific and or operating system specific code.

At step one or more of the systems described herein may cause the DISM application to inject the driver into the computing system as part of the restore operation. For example injection module may as part of computing device in cause the DISM application to inject driver into computing device as part of restore operation .

Injection module may cause the DISM application to inject the driver in a variety of ways and or contexts. For example injection module may cause the DISM application to inject the driver by interacting with the DISM application via an API. In this example injection module may send the DISM application instructions via the DISM API to configure the system volume with the driver.

As detailed above in some embodiments location module may locate the driver in question after the system volume has already been deployed to the computing system that is being restored. In these embodiments injection module may also cause the DISM application to inject the driver into the computing system after the system volume has already been deployed to the computing system such that the steps of locating and injecting the driver are performed in a hardware agnostic manner. For example a system volume may be deployed to a computing system with a specific hardware configuration that requires a particular driver. In this example the systems described herein may have no information about the specific hardware configuration or the particular driver until after location module has examined the hardware which as detailed above may only occur after the system volume has already been deployed . In this example injection module may then use the hardware configuration information and or driver information from location module to inject the driver into the computing system even though injection module was not previously configured to handle the specific hardware configuration of the computing system in question. The method described above is different from traditional methods that involve injecting drivers into images before deployment thus requiring detailed assumptions about hardware configurations that may prove to be incorrect.

In some examples an incorrect driver may be injected despite the efforts detailed above. Accordingly in one embodiment the systems described herein may include 1 determining that the driver represents an incorrect driver for the hardware configuration 2 automatically restarting the restore operation 3 locating a correct driver for the hardware configuration and 4 causing the DISM application to inject the correct driver. For example during step a user may have specified an incorrect driver for the hardware configuration. The computing system may fail to boot properly after the restore operation if an incorrect driver is used in place of the correct driver. In this example the systems described herein may detect the incorrect driver and may automatically restart the restore operation so that the correct driver may be found and the restore operation may succeed.

The systems described herein may operate in a variety of ways. is a flow diagram of an exemplary method for injecting drivers into computing systems during restore operations. As illustrated in at step the systems described herein may identify a restore operation on a computing system. For example identification module may as part of a restore application running on computing device in identify an attempt by the restore application to restore system volume to computing device. At step the systems described herein may determine if the restore operation is directed to restoring a system volume. For example identification module may determine that system volume is a target of restore operation . If the restore operation is not directed to restoring a system volume the involvement of the systems described herein in the restore operation may come to an end.

If the restore operation is directed to a system volume at step the systems described herein may examine the hardware configuration to determine what drivers are needed. For example location module may as part of a restore application running on computing device in examine any or all hardware connected to computing device . The systems described herein may then retrieve the drivers in any or all of a number of ways.

At step the systems described herein may retrieve the drivers from a database. At step the systems described herein may retrieve the drivers from a driver store. Additionally or alternatively at step the systems described herein may prompt a user for driver locations. In some examples location module may retrieve the drivers in any or all of the ways described above. After the drivers have been retrieved the systems described herein may inject the drivers using a DISM application at step . In some embodiments the systems described herein may represent the system volume as an image file to a DISM API. For example representation module may as part of a restore application running on computing device in represent system volume as an image to DISM application and injection module may cause DISM application to inject driver into the computing system.

Before after and or in lieu of injecting drivers into the computing system the systems described herein may remove at least one driver from the computing system. In one example the systems described herein may identify an additional restore operation on an additional computing system determine that the additional computing system includes a different hardware configuration that does not utilize the driver and remove as part of the additional restore process the driver that is not utilized by the different hardware configuration. In another example the hardware configuration of a computing system may have changed since a restore image was taken and may no longer make use of all the drivers included in the restore image. is a block diagram of an exemplary computing system for injecting drivers into computing systems during restore operations. As illustrated in computing device may include modules DISM application driver and or hardware configuration . Computing device may include modules DISM application driver and or hardware configuration . In some examples hardware configuration may not require driver . In this example modules may use DISM application to remove unnecessary driver from computing device . In some examples modules may remove drive from computing device as part of a restore operation.

As described above in connection with method the systems described herein may inject drivers into a computing system during a restore operation by representing a system volume as an image to a DISM application. Representing the system volume as an image may allow the systems described herein to take advantage of the fact that the DISM application is a part of the target system s operating system such that the restore application does not need to know the precise configuration of the system s registry in order to successfully inject the drivers. Using the DISM application in this way may also enable the systems described herein to inject drivers more accurately while being written in a hardware agnostic fashion that may allow for increased flexibility.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of physical processing unit e.g. a hardware implemented central processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The term computer readable medium as used herein generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives tape drives and floppy disks optical storage media e.g. Compact Disks CDs Digital Video Disks DVDs and BLU RAY disks electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for injecting drivers into computing systems during restore operations.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example the modules and or data described herein may reside and or execute within a virtual machine. As used herein the term virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the term virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the term information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the term information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the term endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive restore operation data to be transformed transform the restore operation data output a result of the transformation to a DISM application use the result of the transformation to inject drivers into a system volume and store the result of the transformation to a computing device. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms connected to and coupled to and their derivatives as used in the specification and claims are to be construed as permitting both direct and indirect i.e. via other elements or components connection. In addition the terms a or an as used in the specification and claims are to be construed as meaning at least one of. Finally for ease of use the terms including and having and their derivatives as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

