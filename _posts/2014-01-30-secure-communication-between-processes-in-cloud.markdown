---

title: Secure communication between processes in cloud
abstract: Secure communication between processes in cloud platform may be performed by receiving a request from a client application process hosted in an application virtual machine at a load balancer. A first secure communication channel is established between the client application process and the load balancer. The first secure communication channel is encrypted with the client certificate. The first secure communication channel is terminated at the load balancer. A service process in a service virtual machine is identified based on the request received from the client application process. A new request is sent to the service virtual machine to establish a second secure communication channel between the load balancer and the service virtual machine. The load balancer certificate signed by the internal certificate authority is validated at the service virtual machine. Upon successful validation of the load balancer certificate, the second secure communication channel is accepted at the service virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09503447&OS=09503447&RS=09503447
owner: SAP SE
number: 09503447
owner_city: Walldorf
owner_country: DE
publication_date: 20140130
---
Some enterprises offer cloud services where computing resources such as servers storage and applications are shared and delivered through the internet. These computing resources such as servers storage and applications remain as virtual resources to end users. Based on a user request a communication channel is established to a cloud platform where computing resources may be provisioned to a user dynamically or on the fly. Typically such communication channels are established via proxies and or load balancers which reside in the cloud platform. Based on the user request communication channels may be established between processes via load balancers. In such a scenario dual authentication of the communicating parties is challenging.

Embodiments of techniques for secure communication between processes in cloud are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. A person of ordinary skill in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In some instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Cloud computing refers to applications and services offered over the Internet. The term cloud in cloud computing can be defined as the set of hardware networks storage services and interfaces that combine to deliver aspects of computing as a service. Enterprises offering cloud computing solutions offer their services in various types of models such as infrastructure as a service IaaS platform as a service Paas software as a service SaaS etc. By way of example consider a platform as a service which provides application runtime environment and a set of platform specific services. In PaaS developers can deploy and use application processes in a cloud environment. PaaS offers tools infrastructure and services for developers to collaborate and build application processes in the cloud environment. In one embodiment the computing resources in the cloud environment are virtualized and provided as services to end users. Virtualization is the enabling technology for the cloud environment where the physical infrastructure is made available as a software. Virtualization refers to creation of application virtual machines where application virtual machines are software implementations of the underlying physical infrastructure such as computing resources that executes applications.

In one embodiment a central cloud component named orchestrator is responsible for managing the lifecycle of the application virtual machines in a cloud platform. Based on a request from a client an application virtual machine may be provisioned in the cloud platform to host an application process. The orchestrator generates and provisions a client certificate such as X.509 certificate for this application virtual machine. A client certificate also referred to as a digital certificate or identity certificate is an electronic document that uses digital signature and cryptographic keys to identify an entity such as person application host etc. holding the client certificate. The client certificate can be used to verify the identity of the entity and establish a secure communication. The client certificate may be signed by a trusted certificate authority such as internal certificate authority. The internal certificate authority may act like a trusted third party that issues digital certificates. The generated client certificate includes virtual machine attributes such as a host name an account name an application name permission flags tenant identifiers etc.

Based on an end user request an application virtual machine may be provisioned in a cloud platform to host a client application process. Application virtual machine may be provisioned to host and run the client application process not shown . In the cloud platform the requests to and from the application virtual machine are directed via proxies or load balancers. The client application process may request service process from a service virtual machine. A secure communication channel may be established between the application virtual machine and load balancer . Load balancers are devices and or applications that distribute network or application traffic across a number of servers in the cloud platform. Load balancers improve the overall performance by managing and maintaining application specific tasks. Load balancers register entry points for applications and distribute incoming requests across the executing applications.

Based on application virtual machine attributes not shown such as a host name an account name an application name permission flags tenant identifiers etc. the load balancer identifies a service process and communicates with service virtual machine associated with the service process. Service processes execute in the service virtual machines in the server systems in the cloud platform. The service virtual machine accepts request from the application virtual machine by establishing a secure communication channel between the application virtual machine and the service virtual machine . The service process executing in the service virtual machine provides the service requested by the application virtual machine .

When an application virtual machine is provisioned certificate generator of the orchestrator creates a virtual machine certificate also referred to as a client certificate that may hold attribute information of the application virtual machine and application that is to be hosted and run on the application virtual machine. This client certificate may be signed and or issued by a trusted certificate authority such as an internal certificate authority . In one embodiment the internal certificate authority itself may be a self signed certificate. For an independent instance of cloud platform there is an internal certificate authority. The components of this instance of cloud platform can trust this internal certificate authority and the certificates issued by the internal certificate authority. The internal certificate authority is available on the orchestrator . Secure store stores the provisioned client certificates and other related information.

The cloud controller provisions application virtual machine which runs client application process . The certificate generator of the orchestrator creates client certificate that holds the attribute information associated with the application virtual machine and the client application process that is running on the application virtual machine . The application virtual machine requests services from service virtual machine via load balancer . By way of example a secure communication channel can be established using secure sockets layer SSL protocol which provides communication security over the internet. Secure communication channel established from the application virtual machine by using a uniform resource locator associated with a Hypertext Transfer Protocol Secure HTTPS and Secure Socket Layer protocol SSL .

The application virtual machine establishes a secure communication channel with a load balancer named loadbalancer using HTTPS SSL communication channel. Because the secure communication channel is to be established via the load balancer the secure communication channel HTTPS SSL from the application virtual machine is terminated at the loadbalancer and another secure communication channel HTTPS SSL is established from the loadbalancer to the service virtual machine . The service processes of a service virtual machine may be registered at the loadbalancer . Accordingly the loadbalancer may identify service process executing in the service virtual machine appropriate for fulfilling the request from the application virtual machine . In one embodiment the service processes can be set up to allow multiple application virtual machines to access the services. The trust store in the service virtual machine stores service certificate associated with the service process . The service certificate may hold attribute information of the service virtual machine and the service process executing in the service virtual machine .

In one embodiment database used in the cloud platform architecture to store data may be an in memory database. In an in memory database memory organization may be linear. In a linear memory organization data may be stored as a row store or a column store. In a row store data is stored in a row sequentially whereas in a column store data is stored in a column in contiguous memory locations.

The client application process A running in the application virtual machine requests a service process executing in the service virtual machines. Service processes executing in the service virtual machines may register with loadbalancer . Loadbalancer identifies a service process executing in service virtual machine . The application virtual machine may not be able or allowed to establish a direct communication channel with the service virtual machine . The communication channel can be established via the loadbalancerr .

The establishment of the secure communication channel and the authentication may occur in two phases. In first phase the client application process A running the application virtual machine requests the loadbalancer for establishing a first secure communication channel using HTTPS request. The first secure HTTPS communication channel may be encrypted using the client certificate . The loadbalancerr trusts the internal certificate authority and can identify the application virtual machine based on the client certificate that is used in the HTTPS communication channel between the application virtual machine and the loadbalancerr . This client certificate may be transmitted to the service virtual machine e.g. in an HTTPS request header. A first secure communication channel may be established between the client application process A running in the application virtual machine and the loadbalancerr . As the service processes executing in the service virtual machine are registered at the loadbalancer the loadbalancerr identifies or discovers the service process appropriate for fulfilling the request from the application virtual machine . The first secure communication channel between the client application process A running in the application virtual machine and the loadbalancer may be terminated.

In second phase a new HTTPS request may be sent from the loadbalancerr to establish a second secure connection between the loadbalancerr and the service virtual machine executing the identified service process. The loadbalancerr tries to establish a second secure communication channel to the service virtual machine . The second secure connection from the loadbalancer to the identified service process in the service virtual machine is encrypted using load balancer certificate signed by the internal certificate authority. The service process in the service virtual machine may inspect the load balancer certificate and verify whether the second secure connection is signed by the internal certificate authority . Based on the result may accept connections that are received from the loadbalancerr encrypted with the load balancer certificate signed by the internal certificate authority.

The service process validates the load balancer certificate to determine if it is signed by the internal certificate authority and if the host name specified in the loadbalancerr certificate is equal to the name of the loadbalancerr . Upon validation that the host name specified in the loadbalancer certificate is equal to the name of the loadbalancer the service process accepts the client certificate from a new HTTPS request header. Application filter may be installed on the service virtual machine which enables a second level of validation of the identity of the application virtual machine . In this way a dual authentication between a the client application process A running in the application virtual machine client and the loadbalancer and b the loadbalancer and the service process executing in the service virtual machine is achieved.

A second secure communication channel is established between the loadbalancerr and the service process executing in the service virtual machine using a new HTTPS request. The new HTTPS request header holds the client certificate sent by the original HTTPS request. The second secure communication channel from the loadbalancerr to the service process executing in the service virtual machine is encrypted using a loadbalancerr certificate signed by the internal certificate authority. SSL connector enables accepting the second secure communication channel from the loadbalancerr at a preconfigured port. Service process validates the loadbalancerr certificate and upon successful validation accepts the second secure communication channel.

Application filter performs a second level of validation. The application filter reads the client certificate from the new HTTPS request header and based on the client certificate attributes authenticates accessing the service process . The client certificate may be validated to determine if it is signed by internal certificate authority. If the client certificate is not signed by the internal certificate authority then it is inferred as an invalid certificate or missing certificate accordingly the second secure communication channel is rejected. The client certificate is also validated to determine if the application virtual machine name specified in the new HTTPS request header is the same as the application virtual machine from which the HTTPS request was originally sent. If the application virtual machine name specified in the new HTTPS request header is not the same as the application virtual machine from which the HTTPS request was originally sent then it is inferred as a counterfeit or stolen certificate.

At it is validated whether the request from the application virtual machine is a secure request such as a HTTPS request. Upon validation that the request is a non secure request the request is rejected at . Upon validation that the request is a secure request at it is determined whether the certificate in the secure communication channel has the host name of the load balancer. Upon determining that the certificate in the secure communication channel has the host name of the load balancer at a client certificate is retrieved from an HTTPS request header. At it is validated whether the client certificate is signed by an internal certificate authority. Upon validating that the client certificate is not signed by the internal certificate authority at the HTTPS request is rejected.

Upon validating that the client certificate is signed by the internal certificate authority at it is validated whether the HTTPS request originated from the application virtual machine in the cloud platform or an internet call originated from some client outside the established cloud platform. Upon validation that the HTTPS request originated from the application virtual machine in the cloud platform at parse the client certificate and at forward the HTTPS request to access the service process or to other underlying applications as appropriate. This validation may preprocess the HTTPS request before accessing the underlying applications as appropriate. Upon validation that the HTTPS request is an internet call originated from some client outside the established cloud platform at the HTTPS request is rejected.

Upon determining that the certificate in the secure communication channel does not have the host name of the load balancer it is inferred that the secure communication channel is not initiated by the load balancer but by some other client. In this scenario the certificate in the HTTPS header is not trusted and the certificate used to encrypt the secure communication channel may be retrieved and used. Accordingly at the certificate from the HTTPS request header is retrieved and removed and at the certificate used to encrypt the secure communication channel is retrieved. The retrieved certificate is parsed at and forwarded at to appropriate authentication software programs which implements authentication modules.

At a service process of a service virtual machine is identified based on the request received from the client application process. At a new request is sent from the load balancer to the service virtual machine to establish a second secure communication channel between the load balancer and the service process of the service virtual machine. The second secure communication channel is encrypted with a load balancer certificate signed by an internal certificate authority. At step upon successful validation of the load balancer certificate the second secure communication channel is accepted at the service virtual machine establishing a secure communication between the client application process and the service process.

The various embodiments described above have a number of advantages. The application virtual machine establishes secure connection to the service virtual machine via the load balancer. The secure connection is established in two phases using certificates signed by internal certificate authority. Secure connection is ensured with valid certificates signed by internal certificate authority. Connections from hosts holding a certificate not signed by internal certificate authority is rejected thereby ensuring security. The complexity of dual authentication between the application virtual machine and the load balancer and the load balancer and the service virtual machine is reduced thereby ensuring efficient dual authentication.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the one or more embodiments are described herein for illustrative purposes various equivalent modifications are possible within the scope as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

