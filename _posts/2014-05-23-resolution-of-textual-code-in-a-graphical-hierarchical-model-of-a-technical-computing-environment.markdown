---

title: Resolution of textual code in a graphical hierarchical model of a technical computing environment
abstract: A device may receive a chart generated via a technical computing environment, where the chart includes a textual portion and a graphical portion, and the graphical portion includes state information. The device may parse the chart into the textual portion and the graphical portion, and may process the textual portion with a textual engine of the technical computing environment to generate textual results. The device may process the graphical portion with a graphical engine of the technical computing environment to generate graphical results, and may combine the textual results with the graphical results to generate chart results. The device may output or store the chart results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411559&OS=09411559&RS=09411559
owner: The MathWorks, Inc.
number: 09411559
owner_city: Natick
owner_country: US
publication_date: 20140523
---
This application claims priority under 35 U.S.C. 119 based on U.S. Provisional Patent Application No. 61 827 863 filed May 28 2013 the disclosure of which is incorporated by reference herein in its entirety.

The following detailed description of example implementations refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

A technical computing environment TCE may include a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. The TCE may use an array a vector and or a matrix as basic elements.

The TCE may provide a graphical environment for modeling and simulating combinatorial and sequential decision logic based on state machines and flow charts. The decision logic may enable users to combine graphical and tabular representations including state transition diagrams flow charts state transition tables and truth tables to model how a system reacts to events time based conditions and external input signals. The graphical environment may generate models such as a textual model a graphical model with one or more model elements e.g. blocks one or more input signals and one or more output signals a combination of a textual model and a graphical model etc. The TCE may exist for creating computer generated models such as graphical behavioral models that represent dynamic systems. A model may include a plurality of graphical objects such as blocks or icons. A model may be executed to simulate the operation or behavior of the system being modeled. Executing the model may be referred to as simulating the model.

The TCE may provide a textual environment that includes a high level language and an interactive environment for numerical computation visualization and programming. The textual environment may enable users to analyze data develop algorithms create models and applications manipulate matrices plot functions and data implement algorithms create user interfaces and interface with programs written in other languages including C C Java and Fortran. Unlike the graphical environment which models how a system reacts to events and time based conditions the textual environment includes an imperative or declarative language with no concept of logical model physical and or simulation time and events.

Conventional action languages for the graphical environment e.g. Stateflow consisted of statically typed scalar based languages such as for example C C etc. is a diagram of an overview of an example implementation 100 described herein. In some implementations a graphical environment of the TCE may utilize a dynamically typed and or array based language as an action language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. . The dynamically typed and or array based language may be understood by a textual environment of the TCE. In some implementations the textual environment of the TCE may be provided in the graphical environment of the TCE. Time based and event based simulation may be introduced into the language of the textual environment while maintaining the syntax and style of the language. In some implementations the textual environment may include a well defined textual resolution scheme for resolving unknown data symbols within a function or script. In some implementations the textual resolution scheme of the textual environment may be enhanced so that textual code e.g. a function script etc. may refer to symbols within a graphical hierarchy as defined by the graphical environment. In some implementations the language of the textual environment may be enhanced to refer to a data or function symbol which is parented by another state by using a particular notation e.g. a dot notation such as A.B.data or A.B.function .

With reference to a user may utilize a TCE of a computing device to create a chart or a model that includes a chart. The chart may include a graphical hierarchy of state blocks that are created by a graphical environment of the TCE. One or more of the state blocks may include graphical symbols that are understood by the graphical environment. One or more of the state blocks may include textual code e.g. functions algorithms etc. and or data that are understood by a textual environment of the TCE. As shown in the chart may include a graphical portion e.g. the state blocks the graphical symbols and the graphical hierarchy understood by the graphical environment and a textual portion e.g. the textual code and the data understood by the textual environment.

As further shown in the TCE may parse the chart into the textual portion and the graphical portions. However one of the graphical portions may not be understood by a graphical engine associated with the graphical environment. For example one or more graphical symbols may not be understood by the graphical engine. In such situations the TCE may transform the one graphical portion into a form that is understood by the textual engine.

The TCE may provide the untransformed graphical portions to the graphical engine and may provide the transformed graphical portions and the textual portion to a textual engine associated with the textual environment. The graphical engine may process the untransformed graphical portions to generate graphical results such as for example how a system reacts to events time based conditions external input signals etc. The textual engine may process the textual portion to generate textual results such as for example data analysis results function calculation results array calculation results etc. The graphical engine may provide the graphical results to a combiner associated with the TCE and the textual engine may provide the textual results to the combiner. The combiner may combine the graphical results with the textual results to generate combined results that may be understood by the graphical environment and the textual environment. In some implementations the combiner may link the textual code and or the data to a corresponding graphical hierarchy e.g. a state block based on the graphical symbols. In some implementations the combiner may correspond to the graphical engine or the textual engine.

Such an arrangement may enable a user of the TCE to utilize time based and event based simulation from the graphical environment in the textual environment. This may enable the user to naturally draw a model where the actual hierarchy of the model is encoded in the textual environment. The arrangement may also enable the user to utilize the features of the textual environment e.g. analyze data develop algorithms manipulate matrices perform calculations etc. with the features of the graphical environment e.g. simulating combinatorial and sequential decision logic based on state machines and flow charts .

Client device may include a device capable of receiving generating storing processing executing and or providing information in a manner described herein. For example client device may include a computing device such as a desktop computer a laptop computer a tablet computer a handheld computer a server a mobile phone e.g. a smart phone a radiotelephone etc. or a similar device. In some implementations client device may receive information from and or transmit information to server device .

TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In some implementations TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. A model may be declarative in that the model may not allow the user to explicitly specify when a state of a machine that the model is executing on changes. In a declarative model the user may not explicitly specify an order in which state changes in the model. In an imperative model the user may explicitly specify when a particular state may change e.g. relative to other state changes .

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In some implementations TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . In some implementations TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python JavaScript Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dassault Systemes etc. and a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dassault Systemes SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhapsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. . In some implementations TCE may include a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

In some implementations TCE may provide a graphical environment for modeling and simulating combinatorial and sequential decision logic based on state machines and flow charts. The decision logic may enable users to combine graphical and tabular representations including state transition diagrams flow charts state transition tables and truth tables to model how a system reacts to events time based conditions and external input signals. The graphical environment may generate models such as a textual model a graphical model with one or more model elements e.g. blocks one or more input signals and one or more output signals a combination of a textual model and a graphical model etc.

In some implementations TCE may provide a textual environment that includes a high level language and an interactive environment for numerical computation visualization and programming. The textual environment may enable users to analyze data develop algorithms create models and applications manipulate matrices plot functions and data implement algorithms create user interfaces and interface with programs written in other languages including C C Java and Fortran. Unlike the graphical environment which models how a system reacts to events and time based conditions the textual environment may include an assignment based imperative language with no concept of logical model physical and or simulation time and events.

In some implementations and as further shown in TCE may include a parser a transformer a graphical engine and a textual engine . Parser may include a component that parses TCE code e.g. a model or a chart into a graphical portion and a textual portion. The graphical portion may include information associated with a graphical hierarchy graphical symbols etc. of the TCE code. The textual portion may include information associated with textual code of the TCE code that may be understood by textual engine . In some implementations parser may parse the textual portion into two or more portions e.g. a time based portion and an output portion and may parse the graphical portion into two or more portions e.g. a functional portion and a non functional portion . In some implementations parser may parse TCE code into other types of portions.

Transformer may include a component that receives the graphical portion of the TCE code that is not understood by graphical engine . For example one or more graphical symbols may not be understood by graphical engine and may be provided to transformer . Transformer may transform the received graphical portion into a form that is understood by graphical engine .

Graphical engine may receive the transformed graphical portion and the graphical portion that did not need to be transformed and may process the received information. The processing of the received information may include generating graphical results such as for example how a system reacts to events time based conditions and external input signals. In some implementations graphical engine may include Simulink software Stateflow software Simscape software and or SimEvents software.

Textual engine may receive the textual portion and may process the textual portion to generate textual results such as for example data analysis results matrix calculation results array calculation results etc. Graphical engine may combine the graphical results with the textual results to generate combined results that may be understood by the graphical environment and the textual environment. In some implementations textual engine may include MATLAB software.

Server device may include one or more devices capable of receiving generating storing processing executing and or providing information in a manner described herein. For example server device may include a computing device such as a server a desktop computer a laptop computer a tablet computer a handheld computer or a similar device. In some implementations server device may host TCE .

Network may include one or more wired and or wireless networks. For example network may include a cellular network a public land mobile network PLMN a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network e.g. the Public Switched Telephone Network PSTN an ad hoc network an intranet the Internet a fiber optic based network and or a combination of these or other types of networks.

The number of devices and or networks shown in is provided as an example. In practice there may be additional devices and or networks fewer devices and or networks different devices and or networks or differently arranged devices and or networks than those shown in . Furthermore two or more devices shown in may be implemented within a single device or a single device shown in may be implemented as multiple distributed devices. Additionally one or more of the devices of environment may perform one or more functions described as being performed by another one or more devices of environment .

Bus may include a path that permits communication among the components of device . Processor may include a processor e.g. a central processing unit a graphics processing unit an accelerated processing unit etc. a microprocessor and or any processing component e.g. a field programmable gate array FPGA an application specific integrated circuit ASIC etc. that interprets and or executes instructions and or that is designed to implement a particular function. In some implementations processor may include multiple processor cores for parallel computing. Memory may include a random access memory RAM a read only memory ROM and or another type of dynamic or static storage component e.g. a flash magnetic or optical memory that stores information and or instructions for use by processor .

Storage component may store information and or software related to the operation and use of device . For example storage component may include a hard disk e.g. a magnetic disk an optical disk a magneto optic disk a solid state disk etc. a compact disc CD a digital versatile disc DVD a floppy disk a cartridge a magnetic tape and or another type of computer readable medium along with a corresponding drive. In some implementations storage component may store TCE .

Input component may include a component that permits a user to input information to device e.g. a touch screen display a keyboard a keypad a mouse a button a switch etc. . Output component may include a component that outputs information from device e.g. a display a speaker one or more light emitting diodes LEDs etc. .

Communication interface may include a transceiver like component such as a transceiver and or a separate receiver and transmitter that enables device to communicate with other devices such as via a wired connection a wireless connection or a combination of wired and wireless connections. For example communication interface may include an Ethernet interface an optical interface a coaxial interface an infrared interface a radio frequency RF interface a universal serial bus USB interface a high definition multimedia interface HDMI or the like.

Device may perform various operations described herein. Device may perform these operations in response to processor executing software instructions included in a computer readable medium such as memory and or storage component . A computer readable medium may be defined as a non transitory memory device. A memory device may include memory space within a single physical storage device or memory space spread across multiple physical storage devices.

Software instructions may be read into memory and or storage component from another computer readable medium or from another device via communication interface . When executed software instructions stored in memory and or storage component may cause processor to perform one or more processes described herein. Additionally or alternatively hardwired circuitry may be used in place of or in combination with software instructions to perform one or more processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

The number of components shown in is provided as an example. In practice device may include additional components fewer components different components or differently arranged components than those shown in . Additionally or alternatively one or more components of device may perform one or more functions described as being performed by another one or more components of device .

As shown in process may include receiving a chart with a textual portion and a graphical portion block . For example TCE may enable a user of client device to create a model or to instruct client device to receive the model from another source e.g. server device a CD ROM a flash memory etc. . In some implementations the model may include a chart with a graphical hierarchy of one or more chart elements e.g. areas or regions associated with one or more states referred to herein as state blocks one or more input signals and one or more output signals. For example assume that a chart has state blocks A B and C and that state block A includes state block B and a transition to state block C. An arrangement that includes a state block containing one or more state blocks and or transitions to one or more state blocks may be referred to as a graphical hierarchy. Each of the chart elements may correspond to a status of a physical device a subsystem a model etc. of a system being modeled e.g. chart elements may behavioral so that a state may correspond to a status of a device a subsystem etc. .

In some implementations the chart may include graphical symbols transitions and or state transitions associated with the state blocks of the chart. The graphical symbols may include for example textual information that provides event based conditions time based conditions invariants etc. to the state blocks transitions junctions etc. In some implementations one or more of the state blocks transitions and or state transitions may include textual code that may be understood and processed by textual engine of TCE . The textual code may include for example one or more functions matrices data etc. that may be understood and processed by textual engine .

In some implementations TCE may cause client device to display a user interface so that the user may create and or view the model and the chart. For example the user may utilize the user interface to create the state blocks for the chart and to connect the state blocks together. The user may associate the graphical symbols with the state blocks and or other elements of the chart e.g. transitions state transitions junctions etc. and may add the textual code in the one or more state blocks. The user may utilize the user interface to provide the chart within the model.

As further shown in process may include parsing the chart into a textual portion and a graphical portion block . For example parser of TCE may receive information associated with the chart and may identify based on the information a portion of the chart that may be understood and processed by textual engine e.g. a textual portion and a portion of the chart that may be understood and processed by graphical engine e.g. a graphical portion . In some implementations parser may have access to a data structure e.g. a database that stores syntax associated with the language of the textual environment of TCE e.g. and understood by textual engine . Parser may compare the chart information with the syntax stored in the data structure and may determine that particular portions of the chart information match the syntax. Parser may designate the matching portions of the chart information as the textual portion. For example parser may designate functions arrays matrices algorithms etc. in the chart as the textual portion.

In some implementations parser may have access to a data structure e.g. a database that stores information associated with the graphical environment of TCE e.g. and understood by graphical engine . Parser may compare the chart information with information stored in the data structure and may determine that particular portions of the chart information match the information in the data structure. Parser may designate the matching portions of the chart information as the graphical portion. For example parser may designate time based conditions event based conditions other conditions hierarchy information etc. as the graphical portion.

As further shown in for the textual portion block TEXTUAL PORTION process may include processing the textual portion with the textual engine to generate textual results block . For example parser may provide the textual portion of the chart to textual engine and textual engine may process the textual portion of the chart to generate textual results. In some implementations textual engine may execute the textual portion of the chart to generate the textual results. For example assume that the textual portion of the chart includes a function for performing matrix calculations on data. In such an example textual engine may execute the function so that the matrix calculations are performed on the data. The matrix resulting from the calculations may be referred to as textual results. In another example assume that the textual portion of the chart includes an algorithm for performing data analysis. In this example textual engine may execute the algorithm so that the data analysis is performed. The results of the data analysis may be referred to as textual results.

As further shown in for the graphical portion block GRAPHICAL PORTION process may include transforming if necessary the graphical portion into a form understood by the graphical engine block . For example parser may determine whether any of the graphical portion of the chart will not be understood by graphical engine . In some implementations parser may identify text in the graphical portion that may not be understood by graphical engine . For example assume that the graphical portion includes the text before abs a eig b 1 10 1 10 sec and that graphical engine does not understand the text since graphical engine needs to calculate a time to execute the text. In this example parser may provide the text to transformer and transformer may transform the text into a form understood by graphical engine . For example transformer may transform the text to utilize counters maintained by the graphical environment e.g. Simulink so that a time e.g. one second two seconds etc. may be calculated by graphical engine . In some implementations transformer may provide the transformed text to graphical engine for processing. In some implementations the text provided in the graphical portion may include textual operations e.g. after abs a eig b 1 10 1 10 sec that are understood by the textual environment such as for example TCE operations.

In some implementations parser may provide the remaining graphical portion e.g. which may be understood by graphical engine directly to graphical engine . In some implementations parser may determine that all of the graphical portion may be understood by graphical engine . In such a situation parser may provide the entire graphical portion to graphical engine and transformer may not be utilized.

As further shown in for the graphical portion block GRAPHICAL PORTION process may include processing the graphical portion with the graphical engine to generate graphical results block . For example parser may provide to graphical engine the graphical portion of the chart that is understood by graphical engine . Transformer may provide to graphical engine any of the graphical portion that has been transformed into a form that is understood by graphical engine . Graphical engine may process the graphical portion of the chart to generate graphical results. In some implementations graphical engine may execute the graphical portion of the chart to generate the graphical results. For example assume that the graphical portion of the chart includes instructions to combine graphical and tabular representations. In such an example graphical engine may execute the instructions so that the graphical and tabular representations are combined. The resulting combination may be referred to as graphical results. In another example assume that the graphical portion of the chart includes an event based condition e.g. transition to state block A when a function is calculated . In this example graphical engine may execute the event based condition so that state block A is transitioned to. The results of the execution of the event based condition may be referred to as graphical results. In some implementations graphical engine may execute textual information.

As further shown in process may include combining the textual results with the graphical results to generate chart results block . For example TCE may combine the textual results generated by textual engine with the graphical results generated by graphical engine to generate chart results. In some implementations the chart results may include results associated with execution of the chart. For example assume that the textual results include a calculation of a function bar and that the graphical results include utilizing the calculation when a state block B is transitioned to. In such an example the chart results may include transitioning to state block B and utilizing the calculation of the function bar. In another example assume that the textual results include performing a matrix calculation and that the graphical results include computing the time period based on the array based computations. In such an example the chart results may include determining when the time period has expired and utilizing the matrix calculation after the time period has expired and or utilizing the matrix calculation to determine the time period. In some implementations the chart may model reactive systems via state machines and flow charts within a model. In some implementations the chart may use a variant of a finite state machine notation which may enable representation of hierarchy parallelism event broadcast and or history within the chart. In some implementations the chart may provide state transition tables and or truth tables. In some implementations the chart may represent discrete modes of a system by a state may control how a system responds to faults and failures within the system and may schedule when specific tasks occur e.g. either within the chart or within an overall model .

As further shown in process may include utilizing the chart results to execute the model and generate model results block . For example TCE may utilize the chart results in the model e.g. during execution of the model to generate model results. In some implementations the model results may include results associated with execution of the model based on the chart results. For example assume that the chart results include transitioning to state block B and utilizing a calculation of a function bar. After state block B is transitioned to and the function bar is calculated TCE may utilize the function calculation in the model to generate the model results. In another example assume that the chart results include determining when a time period has expired and utilizing the computations to determine the time period. After the matrix calculation is performed TCE may utilize the matrix calculation in the model to generate the model results and or to determine the time period.

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

The sine wave block may include a representation of a sine wave that is to be displayed by the scope block. In example assume that the sine wave block provides a chart in signal e.g. a sine wave signal to the chart block. The chart block may include a representation of a chart that processes the sine wave signal so that it may be understood by the scope block. The chart block may include a graphical portion and a textual portion. The chart block may receive the chart in signal and may process the chart in signal to produce a chart out signal e.g. a voltage time signal to be displayed by the scope block . The chart block may provide the chart out signal to the scope block. The scope block may include a representation of an oscilloscope that displays constantly varying signal voltages as a function of time. The scope block may receive the chart out signal and may display the signal e.g. a voltage time signal . In some implementations the chart block may include a chart that may be executed based on different execution semantics provided by a user and or inferred from the model. The execution semantics may include dynamic notions associated with continuous time for example computing the time derivatives of a dynamic system based on matrix calculations etc. In some implementations the chart may be provided in an environment that includes multiple domains.

As further shown in TCE may instruct client device to display an option to execute the model. For example user interface may display a window or some other display mechanism that requests whether the user wants to execute the model. If the user elects to execute the model e.g. via selection of a Yes button with a mouse or other selection mechanism TCE may execute the model. In some implementations the user may select a Play button with the mouse and TCE may execute the model. In order to execute the model assume that TCE needs to execute the chart block as shown in a user interface of . In some implementations the model may include computational semantics associated with graphical and textual elements and may include computational semantics associated with various blocks in the model. In some implementations TCE may debug the model before or during execution of the model or generation of code.

As shown in user interface the chart may include a graphical hierarchy of state blocks A B C and D. The graphical hierarchy may include the arrangement of the state blocks in the chart. For example state block A may be transitioned to first state block B may be transitioned to second state block C may be transitioned to third and state block D may be transitioned to last. The state blocks may include state information provided by graphical symbols. For example state block A may include the graphical symbols en a data 3 and du u buffer chart in u buffer 1 end 1 e.g. which may be parsed by graphical engine into a portion du that may be understood by graphical engine and another portion u buffer chart in u buffer 1 end 1 that may be understood by textual engine state block B may include the graphical symbols en chart out a data state block C may include the graphical symbols en foo and state block D may include the graphical symbols en chart out data. Some or all of the graphical hierarchy state blocks A B C and D and the graphical symbols may be understood by graphical engine . State block A may also include textual code e.g. a function foo that may be understood by textual engine . In some implementations the textual code may include text for a function e.g. foo bar etc. text for a matrix e.g. C 1 2 3 array based text dynamically typed text dynamic assignments script or function name spaces etc. e.g. text that ignores certain output arguments a function with logic that involves a caller s number of output arguments fixed point quantities that use integer containers to specify approximate floating point values . In some implementations graphical engine may execute graphical code and textual code e.g. C code but may not execute dynamically typed and or array based code. In some implementations textual engine may execute the dynamically typed array based code.

As further shown in when the chart wakes up the default transitions of the chart may be executed. For example an action in a default transition e.g. data 4 u buffer zeros 128 1 may be executed and state block A may be marked as active. Graphical symbols of state block A e.g. an entry action en a data 3 may be executed and default transitions inside state block A may be executed to establish an active child of state block A e.g. mark state block B as active . Graphical symbols of state block B e.g. an entry action en chart out a data may be executed and the chart execution may be complete e.g. the chart may go to sleep since no child states remain. When the chart sleeps state blocks A and B may be active. A next time the chart wakes up graphical symbols of state block A e.g. the during action du u buffer chart in u buffer 1 end 1 may be executed since there are no direct outer transitions of state block A. Outer transitions of state block B may be checked and since there is no condition the transition to state block C may be assumed to be true. Therefore the chart may transition from state block B to state block C. State block C may become active and state block A may remain active. The chart may keep waking up according to solver settings and or system dynamics and may wake up many times or a few times. Every time the chart wakes up the outer transitions of all active state blocks may be checked for example in a top down manner. If an outer transition of a particular state block is not true a during action of the particular state block may be executed. Otherwise a transition may occur to a next state block. This may result in one or more executions of the during action of state block A e.g. du u buffer chart in u buffer 1 end 1 .

At some point the chart may wake up with a condition specified in an outer transition of state block C e.g. after 3 sec being true after state block C is first entered. When this condition is true a transition from state block C may occur. State block C may be marked as inactive when state block C is exited. State block A may be marked as inactive since the outer transition of state block C e.g. after 3 sec leaves a graphical boundary of state block A. State block C may transition to state block D and state block D may be marked as active. At this time only state block D may be active in the chart. Graphical symbols of state block D e.g. an entry action en chart out data may be executed at this time.

As further shown in TCE may instruct client device to display an option to execute the chart or may automatically execute the chart when the model is executed. For example user interface may display a window or some other display mechanism that requests whether the user wants to execute the chart. If the user elects to execute the chart e.g. via selection of a Yes button with a mouse or other selection mechanism TCE may execute the chart to generate chart information as further shown in . Chart information may include information associated with the graphical hierarchy state blocks A B C and D the graphical symbols the textual code and or execution of the graphical hierarchy state blocks A B C and D the graphical symbols and or the textual code. In some implementations the chart may be executed based on conditions in a model e.g. a time based block diagram model . For example if a temperature in a model of an HVAC system exceeds a certain value e.g. at a particular time a status of a heater device may change from on to off.

In some implementations TCE may begin searching at a lowest level of the graphical hierarchy for data and or a function and move up the graphical hierarchy level by level until the data function is found. In some implementations TCE may include a global or logical workspace that may be searched first or last for example for data and or a function. In some implementations TCE may execute the chart by executing one or more transitions by executing in microsteps by executing all events and actions at a hierarchical level etc. Each microstep may result in a set of transitions that result in a stable state configuration e.g. the result of one state chart execution . A state machine may continue to execute microsteps until no state transitions are possible from a current state configuration.

As shown in assume that TCE provides chart information to parser . For example TCE may provide to parser the information associated with the graphical hierarchy and the state of the chart e.g. the hierarchy and active state information of state blocks A B C and D the information associated with the graphical symbols e.g. chart out data after 3 sec etc. the information associated with the textual code e.g. the function foo and or the execution of the graphical hierarchy state blocks A B C and D the graphical symbols and or the textual code. Parser may parse chart information into information associated with graphical symbols that are not understood by graphical engine information associated with the graphical hierarchy and state blocks A B C and D and information associated with the textual code.

Information may not be generated if all of the graphical symbols in chart information are understood by graphical engine . In such a situation parser may provide information associated with the graphical symbols directly to graphical engine . In one example information may include the text after 3 sec or after abs a eig b 1 10 1 10 sec which may not be understood by graphical engine since graphical engine does not understand TCE language syntax e.g. abs a eig b . In this example parser may provide the text to transformer and transformer may transform the text into a form understood by graphical engine e.g. transformed graphical symbols as shown in . For example transformer may transform the text to utilize counters maintained by the graphical environment e.g. Simulink so that a time e.g. one second two seconds etc. may be calculated by graphical engine . Information associated with the graphical hierarchy and state blocks A B C and D may include for example the hierarchy and state information of state blocks A B C and D information identifying that state A is a parent state for state B etc. Information associated with the textual code may include for example information associated with the function foo.

As shown in graphical engine may receive information associated with graphical symbols e.g. chart out a data transformed graphical symbols e.g. counters information associated with the graphical hierarchy and state e.g. the hierarchy and state information of state blocks A B C and D and information associated with the textual code e.g. the functions foo abs eig A 

Graphical engine may provide information associated with textual code to textual engine . Textual engine may process information to generate textual results . In example assume that textual results include numerical results from executing the textual code e.g. the function foo and or an intermediate representation IR from compiling the textual code. Textual engine may provide textual results to graphical engine . Graphical engine may process information transformed graphical symbols information and textual results to generate chart results . In example assume that chart results include the calculations performed by one or more of state blocks A B C and or D numerical results from executing the textual code e.g. the function foo and or an intermediate representation IR from compiling the textual code.

After one or more portions of the chart are executed and chart results are generated TCE may utilize chart results to execute the model. For example as described above in connection with the chart may wake up and execute one or more of state blocks A B C and D. In some implementations the chart may execute one or more portions of a model and or the model may execute one or more portions of the chart. As shown in TCE may cause client device to display a user interface that includes the executed model. As shown in user interface the chart block may receive an input signal e.g. a sine wave from the sine wave block and may output a voltage time signal based on the input signal to the scope block. As further shown the voltage time signal may correspond to the calculations performed by state blocks A B C and or D and or the calculation of the function foo.

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in process may include providing a TCE user interface for creating a model block . For example TCE may cause client device to display a user interface to a user of client device . The user interface may include mechanisms e.g. menus buttons icons libraries etc. that enable the user to create a model using TCE . In some implementations the user may wish to create a model that includes a chart with one or more chart elements e.g. state blocks one or more input signals and one or more output signals. One or more of the chart elements may correspond to a status of a physical device a subsystem a model etc. of a system being modeled.

As further shown in process may include receiving a graphical hierarchy and graphical symbols for the model block . For example the user may utilize the user interface to create a model that includes a chart with a graphical hierarchy of one or more chart elements e.g. state blocks one or more input signals and one or more output signals. For example the user may create via the user interface a chart with state blocks E F and G where state block E includes state block F and does not include but transitions to state block G. An arrangement that includes a state block containing one or more other state blocks and or transitioning to one or more other state blocks e.g. via a containment hierarchy may be referred to as a graphical hierarchy. In some implementations the graphical hierarchy may include other arrangements of state blocks different types of decomposition with different scoping rules e.g. and state decomposition or state decomposition etc. . The user may utilize the user interface to connect the state blocks together in the graphical hierarchy. In some implementations the user may utilize the user interface to associate graphical symbols with the state blocks of the chart. The graphical symbols may include for example textual information that provides event based conditions time based conditions etc. to the state blocks. For example the graphical symbols may include text for a time based condition e.g. after 10 sec before 5 sec etc. text for an event based condition e.g. when a function is executed etc.

As further shown in process may include receiving textual code for the model block . For example the user may utilize the user interface to provide within one or more of the state blocks textual code that may be understood and processed by textual engine of TCE . In some implementations the textual code may include one or more functions matrices arrays data etc. that may be understood and processed by textual engine . For example the textual code may include text for a function e.g. foo bar etc. text for a matrix e.g. C 1 2 3 array based text dynamically typed text dynamic assignments script or function name spaces etc. e.g. text that ignores certain output arguments a function with logic that involves a caller s number of output arguments fixed point quantities that use integer containers to specify approximate floating point values text to select elements based on specification etc. .

As further shown in process may include linking the textual code to the graphical hierarchy based on the graphical symbols block . For example TCE may determine whether any of the graphical symbols of the state blocks reference the textual code. In some implementations TCE may compare the graphical symbols to the textual code to determine whether any of the graphical symbols match the textual code. For example if the model includes textual code for a function foo and if particular graphical symbols in the model include the text foo TCE may determine that the particular graphical symbols match the textual code for the function foo. In some implementations the textual code may be referenced by graphical symbols associated with one or more of the state blocks and may be utilized by the state block s that reference the textual code. For example if a particular state block includes graphical symbols referencing a function bar the particular state block may utilize results associated with the execution of the function bar.

In some implementations TCE may automatically or when instructed by the user link the textual code to the graphical hierarchy based on the graphical symbols. For example assume that a state block A includes the function bar e.g. textual code and that a state block B includes a reference e.g. graphical symbols to the function bar. In such an example TCE may link the function bar to state block B in the graphical hierarchy based on the reference to the function bar. When TCE links the function bar to state block B state block B may utilize results associated with the execution of the function bar.

As further shown in process may include processing the model to generate output code block . For example TCE may process the model to generate output code. In some implementations TCE may execute the model based on the graphical hierarchy the graphical symbols and the textual code of the model to generate the output code. For example assume that a model includes a chart with state blocks A and B calculations e.g. graphical symbols associated with the state blocks and a function X e.g. textual code . TCE may execute the calculations associated with state blocks A and B to generate output code and or may determine the output code for the function X. In some implementations the output code may include TCE code e.g. MATLAB code C code C code Pascal code Fortran code Hardware Description Language HDL code Java code and or code for other languages.

As further shown in process may include executing storing and or embedding the output code block . For example TCE may cause client device to execute the output code and to provide results of the executed code for display to the user. In some implementations TCE may cause client device to store the output code in memory e.g. memory storage component etc. associated with client device and or server device . In some implementations TCE may cause client device to embed the output code in a physical device e.g. a robot manufacturing equipment etc. . The physical device may utilize the output code to perform one or more tasks e.g. perform manufacturing operations .

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

The sine wave block may include a representation of a sine wave that is to be displayed by the scope block. Assume that the sine wave block provides a chart in signal e.g. a sine wave signal to the chart block. The chart block may include a representation of a chart that processes the sine wave signal so that it may be understood by the scope block. The chart block may receive the chart in signal and may process the chart in signal to produce a chart out signal e.g. a voltage time signal to be displayed by the scope block . The chart block may provide the chart out signal to the scope block. The scope block may include a representation of an oscilloscope that displays constantly varying signal voltages as a function of time. The scope block may receive the chart out signal and may display the signal e.g. a voltage time signal .

As further shown in user interface may include a menu of icons or buttons that enable the user to create elements of the chart of the model. The user may utilize the menu to add one or more state blocks to the chart. In example assume that the user utilizes the menu to add state blocks A B C and D to the chart as shown in a user interface of . As further shown in user interface state block A may include state blocks B and C and state block A may be separate from state block D. The arrangement of state blocks A B C and D may create a graphical hierarchy e.g. a containment hierarchy of state information e.g. state blocks .

The user may utilize the menu to connect state blocks A B C and D together. In example assume that the user utilizes the menu to add connector arrows to the chart as shown in a user interface of . As further shown in user interface state block A may receive an input arrow and may connect to state block B. State block B may connect to state block C and state block C may connect to state block D.

After connecting state blocks or while adding the connector arrows the user may provide state information to state blocks A B C and D as shown in a user interface of . In example state blocks A B C and D may include state information provided by graphical symbols. For example state block A may include the graphical symbols en a data 3 and du u buffer chart in u buffer 1 end 1 state block B may include the graphical symbols en chart out a data state block C may include the graphical symbols en foo and state block D may include the graphical symbols en chart out data. The user may provide graphical symbols e.g. data 4 u buffer zeros 128 1 as event statements condition statements statements to implement when transitioning to state block A and or actions to take when transitioning to state block A. The user may also provide in state block A textual code e.g. a function foo that may be understood by textual engine as further shown in . For example the user may add a text block into state block A and once added a user interface may be presented to the user. The user interface may enable the user to specify the textual code and or a graphical symbol by typing the textual code graphical symbol or by identifying a location where the textual code graphical symbol is stored.

TCE may link the textual code to the graphical hierarchy based on the graphical symbols. In example TCE may link the function foo to state block C in the graphical hierarchy based on the reference to the function foo provided in state block C as indicated by reference number in . When TCE links the function foo to state block C state block C may call function foo to be executed e.g. operations and statements that are associated with state block C may have access to the function foo and results associated with the execution of the function foo .

In example further assume that the user utilizes client device to instruct TCE to execute the model. TCE may generate output code e.g. TCE code C code C code etc. for the model and the chart based on the graphical hierarchy the graphical symbols and the textual code as shown in . In example assume that TCE executes the graphical symbols associated with state blocks A B C and D in accordance with the graphical hierarchy and generates output code based on the function foo. As further shown in TCE may cause client device to execute output code and to provide results of the executed output code for display to the user. Alternatively or additionally TCE may cause client device to store output code in storage associated with client device and or server device . Alternatively or additionally TCE may cause client device to embed output code in a physical device e.g. a robot a machine etc. for utilization by the physical device.

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in process may include identifying a data symbol or a function symbol in a graphical hierarchy block . For example TCE may enable a user of client device to create a model or to instruct client device to receive the model from another source. In some implementations the model may include a chart with a graphical hierarchy of one or more chart elements e.g. state blocks one or more input signals and one or more output signals. One or more of the chart elements may correspond to a status of a physical device a subsystem a model etc. of a system being modeled.

In some implementations the chart may include graphical symbols associated with the state blocks of the chart. The graphical symbols may include for example textual information that provides event based conditions time based conditions etc. to the state blocks. In some implementations one or more of the state blocks may include textual code that may be understood and processed by textual engine of TCE . The textual code may include for example one or more functions matrices arrays data etc. that may be understood and processed by textual engine .

In some implementations TCE may identify a data symbol or a function symbol in the graphical hierarchy. For example a particular state block may include graphical symbols that reference data and or a function e.g. textual code provided in the particular state block or in another state block of the chart. In one example assume that a state block includes data X or a function Y and that another state block includes a data symbol e.g. X.temperature referencing data X or a function symbol e.g. Y.get pressure referencing function Y. In such an example TCE may identify the data symbol X.temperature or the function symbol Y.get pressure. Such referencing of data or functions may be referred to as dot notation. Dot notation may include a way to identify data or a function at a specific level of the chart hierarchy. A qualified data or function name may utilize dot notation to specify a path to a parent state block for that data or function.

As further shown in process may include searching a level of the graphical hierarchy for data or a function block . For example TCE may search a level of the graphical hierarchy of the chart for data or a function that corresponds to the identified data symbol or function symbol. In some implementations TCE may first search the level e.g. a state block of the graphical hierarchy for the data or the function where the data symbol or the function symbol appears. For example if a particular state block includes a data symbol e.g. X.temperature referencing temperature data or a function symbol e.g. Y.get pressure or Y.get pressure referencing a get pressure function TCE may search the particular state block first for the data or the function symbol. In some implementations TCE may begin searching at a highest level of the graphical hierarchy for the data function and move down the graphical hierarchy level by level until the data function has been found. In some implementations TCE may begin searching at a lowest level of the graphical hierarchy for the data function and move up the graphical hierarchy level by level until the data function is found. In some implementations TCE may include a global or logical workspace that may be searched first or last for example for data and or a function. In some implementations in addition to dot notation a function a method a procedure etc. may be distinguished from data based on open and closed parentheses.

As further shown in process may include determining whether the identified data symbol or function symbol matches any data or functions of the searched level of the graphical hierarchy block . For example TCE may identify any data or functions contained in the graphical hierarchy level and may compare the identified data or functions to the data symbol or the function symbol. If an identified data or function of the graphical hierarchy level includes the same syntax as the data symbol or the function symbol TCE may determine that the identified data or function matches the data symbol or the function symbol. For example if a particular state block includes data X or a function Y TCE may determine that data X or function Y matches a data symbol e.g. X.temperature or a function symbol e.g. Y.get pressure . If an identified data or function of the graphical hierarchy level does not include the same syntax as the data symbol or the function symbol TCE may determine that the identified data or function does not match the data symbol or the function symbol. For example if a particular state block includes data A or function B TCE may determine that data A or a function B does not match the data symbol e.g. X.temperature or the function symbol e.g. Y.get pressure . In some implementations this matching may include matching an argument list in terms of a number of arguments data types sample times etc. and the matching of data may proceed accordingly.

As further shown in if the identified data symbol or function symbol matches any data or functions of the searched level of the graphical hierarchy block YES process may include adding the data or the function to a list of matches block and proceed to block . For example if an identified data or function of the graphical hierarchy level includes the same syntax as the data symbol or the function symbol TCE may determine that the identified data or function matches the data symbol or the function symbol. In some implementations TCE may add the identified data or function to a list of matches stored in memory e.g. of client device . For example if a particular state block includes data X or a function Y TCE may determine that data X or function Y matches a data symbol e.g. X.temperature or a function symbol e.g. Y.get pressure and may add information e.g. a path to the data or the function associated with data X or a function Y to a list of matches.

As further shown in if the identified data symbol or function symbol does not match any data or functions of the searched level of the graphical hierarchy block NO process may include determining whether the level is a final level of the graphical hierarchy block . For example if an identified data or function of the graphical hierarchy level does not include the same syntax as the data symbol or the function symbol TCE may determine that the identified data or function does not match the data symbol or the function symbol. In such situations TCE may determine whether all of the levels of the graphical hierarchy have been searched. In some implementations the final level of the graphical hierarchy may include a chart level in the graphical hierarchy. For example assume that the chart includes state blocks A B and C that state block A transitions to state block B and that state block B transitions to state block C. In this example the chart area outside of state blocks A B and C may be considered the final level of the graphical hierarchy. If TCE searches a lowest level e.g. a leaf state of the graphical hierarchy and traverses the graphical hierarchy upwards the chart level e.g. a root state may be the last level of the search. In some implementations TCE may continue the search through the graphical model with subsystems and or workspaces until TCE reaches a global workspace of TCE as the last level of the search.

As further shown in if the level is not the final level of the graphical hierarchy block NO process may include moving up or down one level of the graphical hierarchy block and returning to block . For example if TCE determines that the searched level of the graphical hierarchy is not the chart level or root level of the graphical hierarchy TCE may move up one level in the graphical hierarchy and continue the search for matching data or functions. For example assume again that the graphical hierarchy includes state blocks A B and C that state block A contains state block B and that state block B contains state block C. If TCE searched state block C for matching data or functions TCE may move to state block B and continue the search for matching data or functions. If TCE searched state block B for matching data or functions TCE may move up to state block A and continue the search for matching data or functions. If TCE searched state block A for matching data or functions TCE may move up the chart level and continue the search for matching data or functions based on an arrangement of the state blocks. In some implementations TCE may start searching at the chart level of the graphical hierarchy and may traverse the graphical hierarchy in a downward direction. In some implementations TCE may search a global workspace including an environment e.g. a path of the global workspace.

As further shown in if the level is the final level of the graphical hierarchy block YES process may include determining whether a unique data or function is provided in the list of matches block . For example if TCE determines that the searched level of the graphical hierarchy is the chart level of the graphical hierarchy TCE may determine whether the list of matches includes a single entry associated with matching data or a function. In some implementations if the list of matches includes a single entry associated with matching data or a function TCE may determine that there is a unique data or function provided in the list of matches. In some implementations if the list of matches includes more than one entry or no entries associated with matching data or a function TCE may determine that there is not a unique data or function provided in the list of matches.

As further shown in if there is a unique data or function provided in the list of matches block YES process may include providing an indication of successful resolution of the data symbol or the function symbol block . For example if TCE determines that there is a unique data or function provided in the list of matches TCE may cause client device to display an indication of successful resolution of the data symbol or the function symbol.

As further shown in if there is not a unique data or function provided in the list of matches block NO process may include generating an error message associated with the data symbol or the function symbol block . For example if TCE determines that there are two or more data or functions identified in the list of matches or that no data or functions are identified in the list of matches TCE may cause client device to display an error message associated with the data symbol or the function symbol. In some implementations the error message may indicate that the data symbol or the function symbol cannot be successful resolved in the graphical hierarchy. In some implementations if there is no unique data or function rules to resolve to a unique one may be applied by TCE . In some implementations a user may set up rules to resolve when a same data symbol or function symbol is encountered in a search. For example TCE may dynamically resolve workspaces e.g. A.data may be replaced with active.data where active may resolve at execution time to an active substate .

In some implementations when performing process TCE may automatically search for and extract all data function symbols of a graphical hierarchy of a chart. For each data function symbol TCE may automatically search the graphical hierarchy for data or a function that matches the data function symbol. If there is a single match for the data function symbol TCE may automatically create the list of matches. If there are no matches for the data function symbol TCE may provide to the user a notification e.g. an error message indicating that there are no matches for the data function symbol. If there are multiple matches for the data function symbol TCE may provide to the user a notification e.g. an error message indicating that there are multiple matches and identifying the multiple matches in the chart. The user may remove the multiple matches so that a single match for the data function symbol remains in the chart. For all data function symbols with a single matching data or function TCE may automatically link the data function symbols with the corresponding data or function.

In some implementations TCE may cause client device to display a user interface that enables the user to specify a data function symbol. TCE may perform the automatic process described above for the specified data function symbol and may inform the user as to whether there is a single match for the specified data function symbol no matches for the specified data function symbol or multiple matches for the specified data function symbol.

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

TCE may automatically or at the user s request analyze the chart and may determine whether the data symbols of the chart may be successfully resolved to state aa and data. In example assume that TCE identifies the data symbol e.g. a.aa.data in the input and searches state block a for state aa and data based on the data symbol. TCE may locate state aa and data in state block a and may add state aa and data to a list of matches. TCE may search a chart level e.g. the next level outside of state blocks a and b and may not locate state aa and data in the chart level. TCE may not continue to search for state aa and data in the chart since the chart level is the final level of the chart. In example assume that TCE identifies the data symbol e.g. aa.data in state block a and searches state block a for state aa and data based on the data symbol. TCE may locate state aa and data in state block a and may add state aa and data to another list of matches. TCE may search the chart level e.g. the next level for state aa and data and may not locate state aa and data in the chart level. TCE may not continue to search for state aa and data in the chart since the chart level is the final level of the chart.

Further assume that TCE identifies the data symbol e.g. a.aa.data in state block b and searches state block b for state aa and data based on the data symbol. TCE may not locate state aa and data in state block b and may move up one level in the chart to state block a. TCE may search state block a for state aa and data may locate state aa and data in state block a and may add state aa and data to still another list of matches. TCE may search the chart level for state aa and data and may not locate state aa and data in the chart level. TCE may not continue to search for state aa and data in the chart since the chart level is the final level of the chart.

Thus TCE successfully resolves each of the data symbols in the chart since each list of matches may include a unique match associated with state aa and data for each of the data symbols. As further shown in since TCE successfully resolves the data symbols TCE may cause client device to display an indication that a unique match exists for each of the data symbols e.g. aa.data and a.aa.data in the chart.

Assume that the user modifies the chart to include the information provided in a user interface of . For example assume that the user removes the data symbols from state block a and removes the input data symbol. Further assume that the user modifies the data symbol of state block b to include the text en aa.data 1 e.g. which references state aa and data . TCE may identify the data symbol e.g. aa.data in state block b and may search state block b for state aa and data based on the data symbol. TCE may not locate state aa and data in state block b and may move up to the chart level of the chart rather than to state block a since state block a is not referenced by the data symbol e.g. as was the case in . TCE may search the chart level for state aa and data and may not locate state aa and data in the chart level. The search may end and TCE may cause client device to display an error message indicating that no match exists for aa.data in the chart as further show in .

Based on the error message of assume that the user modifies the data symbol to include the text a.aa.data e.g. which references state a state aa and data as shown in a user interface of . TCE may identify the data symbol e.g. a.aa.data in state block b and may search state block b for state aa and data based on the correct data symbol. TCE may not locate state aa and data in state block b and may move up one level in the chart to state block a. TCE may search state block a for state aa and data may locate state aa and data in state block a and may add state aa and data to a list of matches. TCE may search the chart level for state aa and data and may not locate state aa and data in the chart level. The search may end and TCE may cause client device to display an indication that a unique match exists for the data symbol e.g. a.aa.data in the chart as further shown in . In some implementations the search may end when a first match is identified and only a global workspace search may be performed after the search ends.

Now assume that the user modifies the chart to include the information provided in a user interface of . For example assume that the user removes the input data symbol and the data symbol from state block b. Further assume that the user adds data symbols en y aa.data e.g. which references state aa and data and aa.data 1 e.g. which references state aa and data to state block a and creates an additional state aa and data separate from state blocks a and b. The additional state aa and data may include the same name as state aa and data provided in state block a. TCE may identify the data symbol e.g. aa.data in state block a and may search state block a for state aa and data based on the data symbol. TCE may locate state aa and data in state block a and may add state aa and data to a list of matches. TCE may search the chart level for state aa and data may locate state aa and data in the chart level e.g. the additional state aa and data and may add the additional state aa and data to the list of matches. The search may end and TCE may cause client device to display an error message indicating that multiple matches exist for aa.data in the chart as further shown in .

Based on the error message of the user may rename one of the states named state aa and data so that multiple matches do not exist for aa.data. Alternatively the data symbols of state block a may be modified to include a more specific path for the data names. For example the user may change the data symbols of state block a to en y a.aa.data e.g. which references state a state aa and data and a.aa.data 1 e.g. which references state a state aa and data . This may cause TCE to only search state block a for matching states named state aa and data. Alternatively the user may enclose the additional state aa and data in an enclosure or another state as shown in a user interface of . The enclosure or other state may prevent TCE from detecting the additional state aa and data when TCE is searching for matching states named state aa and data in the chart level. As further shown in when the enclosure or other state is added TCE may cause client device to display an indication that a unique match exists for the data symbol e.g. aa.data in the chart. TCE may access the data symbol based on state aa and data contained in state block a

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

In some implementations TCE may provide temporal expression and modeling for assessment and verification. For example TCE may provide specific tools for expressing and evaluating temporal conditions in a graphical environment e.g. for graphical programming languages such as for example Simulink and Stateflow . Typical graphical environments utilize complicated modeling and or logic to express temporal conditions which limits functional model verification using temporal conditions particularly in an online domain e.g. during simulation . In contrast TCE may simplify temporal expressions with mechanisms to define a time interval operate on the interval and related signal conditions and provide for combinations and outputs of intervals. For example TCE may utilize objects e.g. Interval predicates for those objects e.g. Exactly and or combinatorial or reducing operators. In some implementations the mechanisms utilized by TCE may extend the capability of temporal modeling. For verification TCE may perform an assessment using the objects the predicates and logic in conjunction with graphical modeling methods such as state charts.

In one example functional and temporal expressions may be used for online assessment e.g. during simulation and offline assessment e.g. post simulation . For example a functional expression for an online assessment may include monitor this condition a temporal expression for an online assessment may include monitor this interval with respect to condition s a functional expression for an offline assessment may include analyze this condition in the signal log and a temporal expression for an offline assessment may include analyze this interval with respect to condition s in the signal log. A functional assessment may include an assessment of signal conditions where simulation time is a secondary consideration or not considered at all. An example of a functional assessment may include checking that a signal does not exceed static or comparative limits. A temporal assessment may include an assessment of a time dependent condition where a simulation time window required to return an assessment result may vary based on predicates that define an interval.

In some implementations TCE may provide temporal expression and evaluation with interval objects such as predicates e.g. atmost atleast exactly within etc. and logical operators e.g. and or not etc. applied to both temporal and signal conditions interval composition such as a union with other intervals interval refinement such as reduction using additional conditions and reduction using nested intervals etc. In some implementations an interval object may return a defined and deterministic output at any point in time for all temporal predicates regardless of the time at which an interpretation result e.g. pass or fail of the interval object is known. For example assume the following syntax is generated in a state chart block 

In some implementations TCE may enable declarative temporal assessments e.g. interval within verify to be written without drawing states and or transitions at the beginning of during syntax or some new code section . For example assume that a user utilizes TCE to generate the following syntax 

In some implementations TCE may enable retroactive temporal intervals e.g. atleast atmost exactly interval qualifiers to be utilized. For example some intervals may be detected retroactively e.g. interval of at most 5 ticks long may not be represented as states e.g. without extensions and may be detected using a set of states transitions. TCE may provide predicates with the syntax interval to represent retroactive intervals such as interval . . . .atleast N evt e.g. intervals of at least N evts long interval . . . .atmost N evt e.g. intervals of at most N evts long interval . . . .exactly N evt e.g. intervals of exactly N evts long etc. In some implementations TCE may enable intervals of signals that match a certain pattern e.g. interval x .followedby interval y to be utilized.

In some implementations TCE may enable retroactive temporal intervals e.g. tri state transactional interval signals to be utilized. For example nested syntax for interval and verify may be valid if an enclosing retroactive interval is confirmed. TCE may provide tri state transactional signals that represent retroactive interval activity such as inactive 0 active 1 canceled 1 e.g. a one tick delay to cancel no delay to confirm . For example TCE may be utilized to generate the following syntax 

In some implementations TCE may enable retroactive temporal intervals e.g. tri state transactional interval signals to be interpreted. For example interpreting interval signals may be difficult so TCE may post process interval signals before drawing in simulation data inspector SDI e.g. draw unconfirmed signals differently and redraw upon confirmation cancellation .

In some implementations TCE may provide unique extensions to the action language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that abstract the concepts of time intervals nested time intervals and or various temporal operates within the action language. These extensions may be utilized to concisely capture desired timed behavior in the action language for the purpose of simulation e.g. execution verification and validation e.g. dynamic testing as well as static analysis production and or optimized code generation with respect to specified target languages hardware systems and or budgetary concerns e.g. RAM ROM speed etc. etc. In some implementations the extensions may be used within Stateflow diagrams state transition tables truth tables blocks within Simulink system objects timed MATLAB functions etc.

In some implementations the concept of time may include regular time or irregular time. For example time may depend on a domain specific notion of clock or multiple clocks discrete or dense time local events e.g. within an epoch communication messages e.g. event and payload exogenous events e.g. crank shaft angle sensor etc. For example within a Simulink environment time may include simulation time and within a Stateflow environment time may include an elapsed number of clock ticks an absolute time relative to an associated state entry counted occurrence of events etc.

In some implementations such high level abstraction may enable semantic driven optimizations and efficient synthesis of high level abstractions into various software or hardware languages utilizing available target resources with respect to a user defined and target specific balance between RAM ROM speed etc. In some implementations the concept of intervals may enable the possibility of parameterization leveraging of expressions and variables. This may permit users to create parameterized intervals whose attributes can dynamically change during execution.

The foregoing disclosure provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above disclosure or may be acquired from practice of the implementations.

A component is intended to be broadly construed as hardware firmware or a combination of hardware and software.

User interfaces may include graphical user interfaces GUIs and or non graphical user interfaces such as text based interfaces. The user interfaces may provide information to users via customized interfaces e.g. proprietary interfaces and or other types of interfaces e.g. browser based interfaces etc. . The user interfaces may receive user inputs via one or more input devices may be user configurable e.g. a user may change the sizes of the user interfaces information displayed in the user interfaces color schemes used by the user interfaces positions of text images icons windows etc. in the user interfaces etc. and or may not be user configurable. Information associated with the user interfaces may be selected and or manipulated by a user of a technical computing environment TCE e.g. via a touch screen display a mouse a keyboard a keypad voice commands etc. .

The term generated code is to be broadly interpreted to include text based code that may be automatically executed e.g. C code C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example generated code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally generated code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally generated code may be of any type such as function script object etc. and a portion of generated code may include one or more characters lines etc. of the generated code.

It will be apparent that systems and or methods as described herein may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these systems and or methods is not limiting of the implementations. Thus the operation and behavior of the systems and or methods were described without reference to the specific software code it being understood that software and control hardware can be designed to implement the systems and or methods based on the description herein.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of possible implementations. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one claim the disclosure of possible implementations includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used herein should be construed as critical or essential unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items and may be used interchangeably with one or more. Furthermore as used herein the term set is intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

As another example an executable graphical model may include a state machine model e.g. a graphical state machine model . The state machine model may include an executable time based model. The state machine model may include a discrete state transition system that evaluates its transitions at certain points in time. The points in time may be based on a periodic and discrete sample time or the points in time may be based on the change of truth value of an expression e.g. an inequality . An evaluation of the transition system may be associated with the occurrence of an event and the evaluation may consist of evaluating whether a transition out of a state is enabled. A transition may be enabled when the associated event s occur and when the associated condition s are satisfied.

The state transition system may have input and output variables that may be obtained from and provided to other entities in the graphical model. As noted above the graphical entities may represent time based dynamic systems such as differential equation systems and difference equation systems. In some implementations the graphical model and the graphical entities may represent a multi domain dynamic system. The domains may include execution domains or behaviors such as for example continuous time discrete time discrete event state transition systems and or a model of computation. The model of computation may be based on differential equations difference equations algebraic equations discrete events discrete states stochastic relations data flows synchronous data flows control flows process networks and or state machines.

