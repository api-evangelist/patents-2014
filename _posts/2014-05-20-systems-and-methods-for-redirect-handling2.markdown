---

title: Systems and methods for redirect handling
abstract: The present invention is related to a method for routing requests among a plurality of database servers. A device intermediary to a client and a plurality of database servers receives a request to access a database provided by the plurality of database servers. The plurality of database servers can include a first database server configured to process write requests and one or more second database servers configured to process read requests. The device determines that the request to access the database is a read request. The device identifies, responsive to determining that the request is a read request, one of the one or more second database servers to send the request instead of the first database server. The device then transmits the request to the identified second database server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652514&OS=09652514&RS=09652514
owner: CITRIX SYSTEMS, INC.
number: 09652514
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20140520
---
The present application generally relates to data communication networks. In particular the present application relates to systems and methods for routing requests among a plurality of database servers.

A client may transmit a request to access one or more databases provided by a plurality of database servers. The plurality of database servers can include a primary database server designated to receive all requests from the client and one or more secondary database servers. Depending on the request type received by the primary database server the primary database server may generate a redirect response inviting the client to transmit the request to a secondary database server. In network environments where the primary database server can receive a large number of requests corresponding to request types that can be processed by secondary database servers the primary database server can spend a lot of resources to generate and transmit these redirect responses.

The present application is directed towards systems and methods for routing requests among a plurality of database servers. A device intermediary to a client and a plurality of database servers receives a request to access a database provided by a plurality of database servers identifies a type of the request and routes the request to a particular subset of the plurality of database servers based on the type. If the device determines that the request is a read request the device can transmit the request to one of a set of secondary database servers of the plurality of database servers configured to process read requests. The secondary database server receiving the request may be selected based on load balancing among the secondary database servers. If however the device determines that the request is a non read request such as a write request the device can transmit the request to one of a subset of the plurality of database servers that serve as primary database servers.

In one aspect the present disclosure is related to a method for routing requests among a plurality of database servers. A device intermediary to a client and a plurality of database servers receives a request to access a database provided by the plurality of database servers. The plurality of database servers can include a first database server configured to process write requests and one or more second database servers configured to process read requests. The device determines that the request to access the database is a read request. The device identifies responsive to determining that the request is a read request one of the one or more second database servers to send the request instead of the first database server. The device then transmits the request to the identified second database server.

In some embodiments the device can receive a second request from the client to access the database. The device can determine that the second request to access the database is a write request. The device can identify responsive to determining that the second request is a write request the first database server to send the write request. The device can then transmit the second request to the first database server.

In some embodiments a virtual server of the device can determine that the request is a read request. In some embodiments the device can assign a first virtual server for routing write requests to the first database server. The device can assign to each of the one or more second database servers a second virtual server for routing read requests.

In some embodiments the device can determine that the request to access the database is a read request based on a property of a connection over which the device receives the request. In some embodiments the device can determine that the request to access the database is a read request based on content of the request.

In some embodiments the device can select from the one or more second database servers the second database server to send the read request based on a respective load on each of the one or more second database servers. In some embodiments the device can identify by monitoring each of the one or more second database servers the one or more second database servers as available and the device selects the second database server from a subset of the one or more second database servers identified as being available. In some embodiments the device can identify by monitoring each of the one or more second database servers a subset of the plurality of services assigned to the one or more second database servers as up responsive to determining that a status of the second database server associated with the service is available to process requests.

In some embodiments the first database server is configured to serve as a primary server. The one or more second database servers are configured to serve as secondary servers and further configured to be read only.

In another aspect the present disclosure is directed to a system for routing requests among a plurality of database servers. The system includes a device intermediary to a client and a plurality of database servers. The plurality of database servers includes a first database server configured to process write requests and one or more second database servers configured to process read request. The device includes a virtual server. The virtual server receives a request to access a database provided by the plurality of database servers. The virtual server determines that the request to access the database is a read request. The device identifies responsive to determining that the request is a read request one of the one or more second database servers to send the read request instead of the first database server. The device transmits the request to the identified second database server.

In some embodiments the device can receive a second request from the client to access the database. The device can determine that the second request to access the database is a write request. The device can identify responsive to determining that the second request is a write request the first database server to send the write request. The device can transmit the second request to the first database server.

In some embodiments the device can determine that the request is a read request. In some embodiments the system can assign a first virtual server for routing write requests to the first database serve. The device can assign to each of the one or more second database servers a second virtual server for routing read requests.

In some embodiments the device can determine that the request to access the database is a read request based on a property of a connection over which the device receives the request. In some embodiments the device can determine that the request to access the database is a read request based on content of the request.

In some embodiments the device can select from the one or more second database servers the second database server to send the read request based on a respective load on each of the one or more second database servers.

In some embodiments the device can identify by monitoring each of the one or more second database servers the one or more second database servers as available. The device can select the second database server from a subset of the one or more second database servers identified as available.

In some embodiments the device can identify by monitoring each of the one or more second database servers a subset of a plurality of services assigned to the one or more second database servers as up responsive to determining that a status of the second database server associated with the service is available to process requests.

In some embodiments the first database server is configured to serve as a primary server. The one or more second database servers are configured to serve as secondary servers and further configured to be read only.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office . In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliance is depicted. For example a first WAN optimization appliance is shown between networks and and a second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm 

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiments the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif. In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

As shown in the computing device may comprise multiple processors and may provide functionality for simultaneous execution of instructions or for simultaneous execution of one instruction on more than one piece of data. In some embodiments the computing device may comprise a parallel processor with one or more cores. In one of these embodiments the computing device is a shared memory parallel device with multiple processors and or multiple processor cores accessing all available memory as a single global address space. In another of these embodiments the computing device is a distributed memory parallel device with multiple processors each accessing local memory only. In still another of these embodiments the computing device has both some memory which is shared and some memory which can only be accessed by particular processors or subsets of processors. In still even another of these embodiments the computing device such as a multi core microprocessor combines two or more independent processors into a single package often a single integrated circuit IC . In yet another of these embodiments the computing device includes a chip having a CELL BROADBAND ENGINE architecture and including a Power processor element and a plurality of synergistic processing elements the Power processor element and the plurality of synergistic processing elements linked together by an internal high speed bus which may be referred to as an element interconnect bus.

In some embodiments the processors provide functionality for execution of a single instruction simultaneously on multiple pieces of data SIMD . In other embodiments the processors provide functionality for execution of multiple instructions simultaneously on multiple pieces of data MIMD . In still other embodiments the processor may use any combination of SIMD and MIMD cores in a single device.

In some embodiments the computing device may comprise a graphics processing unit. In one of these embodiments depicted in the computing device includes at least one central processing unit and at least one graphics processing unit. In another of these embodiments the computing device includes at least one parallel processing unit and at least one graphics processing unit. In still another of these embodiments the computing device includes a plurality of processing units of any type one of the plurality of processing units comprising a graphics processing unit.

In some embodiments a first computing device executes an application on behalf of a user of a client computing device . In other embodiments a computing device executes a virtual machine which provides an execution session within which applications execute on behalf of a user or a client computing devices . In one of these embodiments the execution session is a hosted desktop session. In another of these embodiments the computing device executes a terminal services session. The terminal services session may provide a hosted desktop environment. In still another of these embodiments the execution session provides access to a computing environment which may comprise one or more of an application a plurality of applications a desktop application and a desktop session in which one or more applications may execute.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element may comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identify specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packet. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance . The GUI or CLI can comprise code running in user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a vServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or IntranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP address which is a network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement numbers expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a mini filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client a collection agent and or monitoring agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol. The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments the client agent includes a monitoring agent as discussed in conjunction with . The monitoring agent may be any type and form of script such as Visual Basic or Java script. In one embodiment the monitoring agent monitors and measures performance of any portion of the client agent . For example in some embodiments the monitoring agent monitors and measures performance of the acceleration program . In another embodiment the monitoring agent monitors and measures performance of the streaming client . In other embodiments the monitoring agent monitors and measures performance of the collection agent . In still another embodiment the monitoring agent monitors and measures performance of the interceptor . In some embodiments the monitoring agent monitors and measures any resource of the client such as memory CPU and disk.

The monitoring agent may monitor and measure performance of any application of the client. In one embodiment the monitoring agent monitors and measures performance of a browser on the client . In some embodiments the monitoring agent monitors and measures performance of any application delivered via the client agent . In other embodiments the monitoring agent measures and monitors end user response times for an application such as web based or HTTP response times. The monitoring agent may monitor and measure performance of an ICA or RDP client. In another embodiment the monitoring agent measures and monitors metrics for a user session or application session. In some embodiments monitoring agent measures and monitors an ICA or RDP session. In one embodiment the monitoring agent measures and monitors the performance of the appliance in accelerating delivery of an application and or data to the client .

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Referring now to a block diagram depicts one embodiment of a virtualization environment . In brief overview a computing device includes a hypervisor layer a virtualization layer and a hardware layer. The hypervisor layer includes a hypervisor also referred to as a virtualization manager that allocates and manages access to a number of physical resources in the hardware layer e.g. the processor s and disk s by at least one virtual machine executing in the virtualization layer. The virtualization layer includes at least one operating system and a plurality of virtual resources allocated to the at least one operating system . Virtual resources may include without limitation a plurality of virtual processors generally and virtual disks generally as well as virtual resources such as virtual memory and virtual network interfaces. The plurality of virtual resources and the operating system may be referred to as a virtual machine . A virtual machine may include a control operating system in communication with the hypervisor and used to execute applications for managing and configuring other virtual machines on the computing device .

In greater detail a hypervisor may provide virtual resources to an operating system in any manner which simulates the operating system having access to a physical device. A hypervisor may provide virtual resources to any number of guest operating systems generally . In some embodiments a computing device executes one or more types of hypervisors. In these embodiments hypervisors may be used to emulate virtual hardware partition physical hardware virtualize physical hardware and execute virtual machines that provide access to computing environments. Hypervisors may include those manufactured by VMWare Inc. of Palo Alto Calif. the XEN hypervisor an open source product whose development is overseen by the open source Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft or others. In some embodiments a computing device executing a hypervisor that creates a virtual machine platform on which guest operating systems may execute is referred to as a host server. In one of these embodiments for example the computing device is a XEN SERVER provided by Citrix Systems Inc. of Fort Lauderdale Fla.

In some embodiments a hypervisor executes within an operating system executing on a computing device. In one of these embodiments a computing device executing an operating system and a hypervisor may be said to have a host operating system the operating system executing on the computing device and a guest operating system an operating system executing within a computing resource partition provided by the hypervisor . In other embodiments a hypervisor interacts directly with hardware on a computing device instead of executing on a host operating system. In one of these embodiments the hypervisor may be said to be executing on bare metal referring to the hardware comprising the computing device.

In some embodiments a hypervisor may create a virtual machine generally in which an operating system executes. In one of these embodiments for example the hypervisor loads a virtual machine image to create a virtual machine . In another of these embodiments the hypervisor executes an operating system within the virtual machine . In still another of these embodiments the virtual machine executes an operating system .

In some embodiments the hypervisor controls processor scheduling and memory partitioning for a virtual machine executing on the computing device . In one of these embodiments the hypervisor controls the execution of at least one virtual machine . In another of these embodiments the hypervisor presents at least one virtual machine with an abstraction of at least one hardware resource provided by the computing device . In other embodiments the hypervisor controls whether and how physical processor capabilities are presented to the virtual machine .

A control operating system may execute at least one application for managing and configuring the guest operating systems. In one embodiment the control operating system may execute an administrative application such as an application including a user interface providing administrators with access to functionality for managing the execution of a virtual machine including functionality for executing a virtual machine terminating an execution of a virtual machine or identifying a type of physical resource for allocation to the virtual machine. In another embodiment the hypervisor executes the control operating system within a virtual machine created by the hypervisor . In still another embodiment the control operating system executes in a virtual machine that is authorized to directly access physical resources on the computing device . In some embodiments a control operating system on a computing device may exchange data with a control operating system on a computing device via communications between a hypervisor and a hypervisor . In this way one or more computing devices may exchange data with one or more of the other computing devices regarding processors and other physical resources available in a pool of resources. In one of these embodiments this functionality allows a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In another of these embodiments multiple hypervisors manage one or more of the guest operating systems executed on one of the computing devices .

In one embodiment the control operating system executes in a virtual machine that is authorized to interact with at least one guest operating system . In another embodiment a guest operating system communicates with the control operating system via the hypervisor in order to request access to a disk or a network. In still another embodiment the guest operating system and the control operating system may communicate via a communication channel established by the hypervisor such as for example via a plurality of shared memory pages made available by the hypervisor .

In some embodiments the control operating system includes a network back end driver for communicating directly with networking hardware provided by the computing device . In one of these embodiments the network back end driver processes at least one virtual machine request from at least one guest operating system . In other embodiments the control operating system includes a block back end driver for communicating with a storage element on the computing device . In one of these embodiments the block back end driver reads and writes data from the storage element based upon at least one request received from a guest operating system .

In one embodiment the control operating system includes a tools stack . In another embodiment a tools stack provides functionality for interacting with the hypervisor communicating with other control operating systems for example on a second computing device or managing virtual machines on the computing device . In another embodiment the tools stack includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In some embodiments at least one of the tools stack and the control operating system include a management API that provides an interface for remotely configuring and controlling virtual machines running on a computing device . In other embodiments the control operating system communicates with the hypervisor through the tools stack .

In one embodiment the hypervisor executes a guest operating system within a virtual machine created by the hypervisor . In another embodiment the guest operating system provides a user of the computing device with access to resources within a computing environment. In still another embodiment a resource includes a program an application a document a file a plurality of applications a plurality of files an executable program file a desktop environment a computing environment or other resource made available to a user of the computing device . In yet another embodiment the resource may be delivered to the computing device via a plurality of access methods including but not limited to conventional installation directly on the computing device delivery to the computing device via a method for application streaming delivery to the computing device of output data generated by an execution of the resource on a second computing device and communicated to the computing device via a presentation layer protocol delivery to the computing device of output data generated by an execution of the resource via a virtual machine executing on a second computing device or execution from a removable storage device connected to the computing device such as a USB device or via a virtual machine executing on the computing device and generating output data. In some embodiments the computing device transmits output data generated by the execution of the resource to another computing device .

In one embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a fully virtualized virtual machine which is not aware that it is a virtual machine such a machine may be referred to as a Domain U HVM Hardware Virtual Machine virtual machine . In another embodiment a fully virtualized machine includes software emulating a Basic Input Output System BIOS in order to execute an operating system within the fully virtualized machine. In still another embodiment a fully virtualized machine may include a driver that provides functionality by communicating with the hypervisor . In such an embodiment the driver may be aware that it executes within a virtualized environment. In another embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a paravirtualized virtual machine which is aware that it is a virtual machine such a machine may be referred to as a Domain U PV virtual machine . In another embodiment a paravirtualized machine includes additional drivers that a fully virtualized machine does not include. In still another embodiment the paravirtualized machine includes the network back end driver and the block back end driver included in a control operating system as described above.

Referring now to a block diagram depicts one embodiment of a plurality of networked computing devices in a system in which at least one physical host executes a virtual machine. In brief overview the system includes a management component and a hypervisor . The system includes a plurality of computing devices a plurality of virtual machines a plurality of hypervisors a plurality of management components referred to variously as tools stacks or management components and a physical resource . The plurality of physical machines may each be provided as computing devices described above in connection with .

In greater detail a physical disk is provided by a computing device and stores at least a portion of a virtual disk . In some embodiments a virtual disk is associated with a plurality of physical disks . In one of these embodiments one or more computing devices may exchange data with one or more of the other computing devices regarding processors and other physical resources available in a pool of resources allowing a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In some embodiments a computing device on which a virtual machine executes is referred to as a physical host or as a host machine .

The hypervisor executes on a processor on the computing device . The hypervisor allocates to a virtual disk an amount of access to the physical disk. In one embodiment the hypervisor allocates an amount of space on the physical disk. In another embodiment the hypervisor allocates a plurality of pages on the physical disk. In some embodiments the hypervisor provisions the virtual disk as part of a process of initializing and executing a virtual machine .

In one embodiment the management component is referred to as a pool management component . In another embodiment a management operating system which may be referred to as a control operating system includes the management component. In some embodiments the management component is referred to as a tools stack. In one of these embodiments the management component is the tools stack described above in connection with . In other embodiments the management component provides a user interface for receiving from a user such as an administrator an identification of a virtual machine to provision and or execute. In still other embodiments the management component provides a user interface for receiving from a user such as an administrator the request for migration of a virtual machine from one physical machine to another. In further embodiments the management component identifies a computing device on which to execute a requested virtual machine and instructs the hypervisor on the identified computing device to execute the identified virtual machine such a management component may be referred to as a pool management component.

Referring now to embodiments of a virtual application delivery controller or virtual appliance are depicted. In brief overview any of the functionality and or embodiments of the appliance e.g. an application delivery controller described above in connection with may be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the application delivery controller being deployed in the form of an appliance such functionality may be deployed in a virtualized environment on any computing device such as a client server or appliance .

Referring now to a diagram of an embodiment of a virtual appliance operating on a hypervisor of a server is depicted. As with the appliance of the virtual appliance may provide functionality for availability performance offload and security. For availability the virtual appliance may perform load balancing between layers 4 and 7 of the network and may also perform intelligent service health monitoring. For performance increases via network traffic acceleration the virtual appliance may perform caching and compression. To offload processing of any servers the virtual appliance may perform connection multiplexing and pooling and or SSL processing. For security the virtual appliance may perform any of the application firewall functionality and SSL VPN function of appliance .

Any of the modules of the appliance as described in connection with may be packaged combined designed or constructed in a form of the virtualized appliance delivery controller deployable as one or more software modules or components executable in a virtualized environment or non virtualized environment on any server such as an off the shelf server. For example the virtual appliance may be provided in the form of an installation package to install on a computing device. With reference to any of the cache manager policy engine compression encryption engine packet engine GUI CLI shell services and health monitoring programs may be designed and constructed as a software component or module to run on any operating system of a computing device and or of a virtualized environment . Instead of using the encryption processor processor memory and network stack of the appliance the virtualized appliance may use any of these resources as provided by the virtualized environment or as otherwise available on the server .

Still referring to and in brief overview any one or more vServers A N may be in operation or executed in a virtualized environment of any type of computing device such as any server . Any of the modules or functionality of the appliance described in connection with may be designed and constructed to operate in either a virtualized or non virtualized environment of a server. Any of the vServer SSL VPN Intranet UP Switching DNS acceleration App FW and monitoring agent may be packaged combined designed or constructed in a form of application delivery controller deployable as one or more software modules or components executable on a device and or virtualized environment .

In some embodiments a server may execute multiple virtual machines in the virtualization environment with each virtual machine running the same or different embodiments of the virtual application delivery controller . In some embodiments the server may execute one or more virtual appliances on one or more virtual machines on a core of a multi core processing system. In some embodiments the server may execute one or more virtual appliances on one or more virtual machines on each processor of a multiple processor device.

In accordance with Moore s Law the number of transistors that may be placed on an integrated circuit may double approximately every two years. However CPU speed increases may reach plateaus for example CPU speed has been around 3.5 4 GHz range since 2005. In some cases CPU manufacturers may not rely on CPU speed increases to gain additional performance. Some CPU manufacturers may add additional cores to their processors to provide additional performance. Products such as those of software and networking vendors that rely on CPUs for performance gains may improve their performance by leveraging these multi core CPUs. The software designed and constructed for a single CPU may be redesigned and or rewritten to take advantage of a multi threaded parallel architecture or otherwise a multi core architecture.

A multi core architecture of the appliance referred to as nCore or multi core technology allows the appliance in some embodiments to break the single core performance barrier and to leverage the power of multi core CPUs. In the previous architecture described in connection with a single network or packet engine is run. The multiple cores of the nCore technology and architecture allow multiple packet engines to run concurrently and or in parallel. With a packet engine running on each core the appliance architecture leverages the processing capacity of additional cores. In some embodiments this provides up to a 7 increase in performance and scalability.

Illustrated in are some embodiments of work task load or network traffic distribution across one or more processor cores according to a type of parallelism or parallel computing scheme such as functional parallelism data parallelism or flow based data parallelism. In brief overview illustrates embodiments of a multi core system such as an appliance with n cores a total of cores numbers through N. In one embodiment work load or network traffic can be distributed among a first core A a second core B a third core C a fourth core D a fifth core E a sixth core F a seventh core G and so on such that distribution is across all or two or more of the n cores N hereinafter referred to collectively as cores . There may be multiple VIPs each running on a respective core of the plurality of cores. There may be multiple packet engines each running on a respective core of the plurality of cores. Any of the approaches used may lead to different varying or similar work load or performance level across any of the cores. For a functional parallelism approach each core may run a different function of the functionalities provided by the packet engine a VIP or appliance . In a data parallelism approach data may be paralleled or distributed across the cores based on the Network Interface Card NIC or VIP receiving the data. In another data parallelism approach processing may be distributed across the cores by distributing data flows to each core.

In further detail to in some embodiments load work or network traffic can be distributed among cores according to functional parallelism . Functional parallelism may be based on each core performing one or more respective functions. In some embodiments a first core may perform a first function while a second core performs a second function. In functional parallelism approach the functions to be performed by the multi core system are divided and distributed to each core according to functionality. In some embodiments functional parallelism may be referred to as task parallelism and may be achieved when each processor or core executes a different process or function on the same or different data. The core or processor may execute the same or different code. In some cases different execution threads or code may communicate with one another as they work. Communication may take place to pass data from one thread to the next as part of a workflow.

In some embodiments distributing work across the cores according to functional parallelism can comprise distributing network traffic according to a particular function such as network input output management NW I O A secure sockets layer SSL encryption and decryption B and transmission control protocol TCP functions C. This may lead to a work performance or computing load based on a volume or level of functionality being used. In some embodiments distributing work across the cores according to data parallelism can comprise distributing an amount of work based on distributing data associated with a particular hardware or software component. In some embodiments distributing work across the cores according to flow based data parallelism can comprise distributing data based on a context or flow such that the amount of work A N on each core may be similar substantially equal or relatively evenly distributed.

In the case of the functional parallelism approach each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine or VIP of the appliance. For example core 1 may perform network I O processing for the appliance while core 2 performs TCP connection management for the appliance. Likewise core 3 may perform SSL offloading while core 4 may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and or described in conjunction with . In this the approach the work across the cores may be divided by function in either a coarse grained or fine grained manner. In some cases as illustrated in division by function may lead to different cores running at different levels of performance or load .

In the case of the functional parallelism approach each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine of the appliance. For example core 1 may perform network I O processing for the appliance while core 2 performs TCP connection management for the appliance. Likewise core 3 may perform SSL offloading while core 4 may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and or described in conjunction with . In this the approach the work across the cores may be divided by function in either a coarse grained or fine grained manner. In some cases as illustrated in division by function may lead to different cores running at different levels of load or performance.

The functionality or tasks may be distributed in any arrangement and scheme. For example illustrates a first core Core 1 A processing applications and processes associated with network I O functionality A. Network traffic associated with network I O in some embodiments can be associated with a particular port number. Thus outgoing and incoming packets having a port destination associated with NW I O A will be directed towards Core 1 A which is dedicated to handling all network traffic associated with the NW I O port. Similarly Core 2 B is dedicated to handling functionality associated with SSL processing and Core 4 D may be dedicated handling all TCP level processing and functionality.

While illustrates functions such as network I O SSL and TCP other functions can be assigned to cores. These other functions can include any one or more of the functions or operations described herein. For example any of the functions described in conjunction with may be distributed across the cores on a functionality basis. In some cases a first VIP A may run on a first core while a second VIP B with a different configuration may run on a second core. In some embodiments each core can handle a particular functionality such that each core can handle the processing associated with that particular function. For example Core 2 B may handle SSL offloading while Core 4 D may handle application layer processing and traffic management.

In other embodiments work load or network traffic may be distributed among cores according to any type and form of data parallelism . In some embodiments data parallelism may be achieved in a multi core system by each core performing the same task or functionally on different pieces of distributed data. In some embodiments a single execution thread or code controls operations on all pieces of data. In other embodiments different threads or instructions control the operation but may execute the same code. In some embodiments data parallelism is achieved from the perspective of a packet engine vServers VIPs A C network interface cards NIC D E and or any other networking hardware or software included on or associated with an appliance . For example each core may run the same packet engine or VIP code or configuration but operate on different sets of distributed data. Each networking hardware or software construct can receive different varying or substantially the same amount of data and as a result may have varying different or relatively the same amount of load .

In the case of a data parallelism approach the work may be divided up and distributed based on VIPs NICs and or data flows of the VIPs or NICs. In one of these approaches the work of the multi core system may be divided or distributed among the VIPs by having each VIP work on a distributed set of data. For example each core may be configured to run one or more VIPs. Network traffic may be distributed to the core for each VIP handling that traffic. In another of these approaches the work of the appliance may be divided or distributed among the cores based on which NIC receives the network traffic. For example network traffic of a first NIC may be distributed to a first core while network traffic of a second NIC may be distributed to a second core. In some cases a core may process data from multiple NICs.

While illustrates a single vServer associated with a single core as is the case for VIP1 A VIP2 B and VIP3 C. In some embodiments a single vServer can be associated with one or more cores . In contrast one or more vServers can be associated with a single core . Associating a vServer with a core may include that core to process all functions associated with that particular vServer. In some embodiments each core executes a VIP having the same code and configuration. In other embodiments each core executes a VIP having the same code but different configuration. In some embodiments each core executes a VIP having different code and the same or different configuration.

Like vServers NICs can also be associated with particular cores . In many embodiments NICs can be connected to one or more cores such that when a NIC receives or transmits data packets a particular core handles the processing involved with receiving and transmitting the data packets. In one embodiment a single NIC can be associated with a single core as is the case with NIC1 D and NIC2 E. In other embodiments one or more NICs can be associated with a single core . In other embodiments a single NIC can be associated with one or more cores . In these embodiments load could be distributed amongst the one or more cores such that each core processes a substantially similar amount of load. A core associated with a NIC may process all functions and or data associated with that particular NIC.

While distributing work across cores based on data of VIPs or NICs may have a level of independency in some embodiments this may lead to unbalanced use of cores as illustrated by the varying loads of .

In some embodiments load work or network traffic can be distributed among cores based on any type and form of data flow. In another of these approaches the work may be divided or distributed among cores based on data flows. For example network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. In some embodiments the data flow is based on any unit or portion of network traffic such as a transaction a request response communication or traffic originating from an application on a client. In this manner and in some embodiments data flows between clients and servers traversing the appliance may be distributed in a more balanced manner than the other approaches.

In flow based data parallelism distribution of data is related to any type of flow of data such as request response pairings transactions sessions connections or application communications. For example network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. The distribution of data flow may be such that each core carries a substantially equal or relatively evenly distributed amount of load data or network traffic.

In some embodiments the data flow is based on any unit or portion of network traffic such as a transaction a request response communication or traffic originating from an application on a client. In this manner and in some embodiments data flows between clients and servers traversing the appliance may be distributed in a more balanced manner than the other approached. In one embodiment data flow can be distributed based on a transaction or a series of transactions. This transaction in some embodiments can be between a client and a server and can be characterized by an IP address or other packet identifier. For example Core 1 A can be dedicated to transactions between a particular client and a particular server therefore the load A on Core 1 A may be comprised of the network traffic associated with the transactions between the particular client and server. Allocating the network traffic to Core 1 A can be accomplished by routing all data packets originating from either the particular client or server to Core 1 A.

While work or load can be distributed to the cores based in part on transactions in other embodiments load or work can be allocated on a per packet basis. In these embodiments the appliance can intercept data packets and allocate them to a core having the least amount of load. For example the appliance could allocate a first incoming data packet to Core 1 A because the load A on Core 1 is less than the load B N on the rest of the cores B N. Once the first data packet is allocated to Core 1 A the amount of load A on Core 1 A is increased proportional to the amount of processing resources needed to process the first data packet. When the appliance intercepts a second data packet the appliance will allocate the load to Core 4 D because Core 4 D has the second least amount of load. Allocating data packets to the core with the least amount of load can in some embodiments ensure that the load A N distributed to each core remains substantially equal.

In other embodiments load can be allocated on a per unit basis where a section of network traffic is allocated to a particular core . The above mentioned example illustrates load balancing on a per packet basis. In other embodiments load can be allocated based on a number of packets such that every 10 100 or 1000 packets are allocated to the core having the least amount of load. The number of packets allocated to a core can be a number determined by an application user or administrator and can be any number greater than zero. In still other embodiments load can be allocated based on a time metric such that packets are distributed to a particular core for a predetermined amount of time. In these embodiments packets can be distributed to a particular core for five milliseconds or for any period of time determined by a user program system administrator or otherwise. After the predetermined time period elapses data packets are transmitted to a different core for the predetermined period of time.

Flow based data parallelism methods for distributing work load or network traffic among the one or more cores can comprise any combination of the above mentioned embodiments. These methods can be carried out by any part of the appliance by an application or set of executable instructions executing on one of the cores such as the packet engine or by any application program or agent executing on a computing device in communication with the appliance .

The functional and data parallelism computing schemes illustrated in can be combined in any manner to generate a hybrid parallelism or distributed processing scheme that encompasses function parallelism data parallelism flow based data parallelism or any portions thereof. In some cases the multi core system may use any type and form of load balancing schemes to distribute load among the one or more cores . The load balancing scheme may be used in any combination with any of the functional and data parallelism schemes or combinations thereof.

Illustrated in is an embodiment of a multi core system which may be any type and form of one or more systems appliances devices or components. This system in some embodiments can be included within an appliance having one or more processing cores A N. The system can further include one or more packet engines PE or packet processing engines PPE A N communicating with a memory bus . The memory bus may be used to communicate with the one or more processing cores A N. Also included within the system can be one or more network interface cards NIC and a flow distributor which can further communicate with the one or more processing cores A N. The flow distributor can comprise a Receive Side Scaler RSS or Receive Side Scaling RSS module .

Further referring to and in more detail in one embodiment the packet engine s A N can comprise any portion of the appliance described herein such as any portion of the appliance described in . The packet engine s A N can in some embodiments comprise any of the following elements the packet engine a network stack a cache manager a policy engine a compression engine an encryption engine a GUI a CLI shell services monitoring programs and any other software or hardware element able to receive data packets from one of either the memory bus or the one of more cores A N. In some embodiments the packet engine s A N can comprise one or more vServers A N or any portion thereof. In other embodiments the packet engine s A N can provide any combination of the following functionalities SSL VPN Intranet UP switching DNS packet acceleration App FW monitoring such as the monitoring provided by a monitoring agent functionalities associated with functioning as a TCP stack load balancing SSL offloading and processing content switching policy evaluation caching compression encoding decompression decoding application firewall functionalities XML processing and acceleration and SSL VPN connectivity.

The packet engine s A N can in some embodiments be associated with a particular server user client or network. When a packet engine becomes associated with a particular entity that packet engine can process data packets associated with that entity. For example should a packet engine be associated with a first user that packet engine will process and operate on packets generated by the first user or packets having a destination address associated with the first user. Similarly the packet engine may choose not to be associated with a particular entity such that the packet engine can process and otherwise operate on any data packets not generated by that entity or destined for that entity.

In some instances the packet engine s A N can be configured to carry out the any of the functional and or data parallelism schemes illustrated in . In these instances the packet engine s A N can distribute functions or data among the processing cores A N so that the distribution is according to the parallelism or distribution scheme. In some embodiments a single packet engine s A N carries out a load balancing scheme while in other embodiments one or more packet engine s A N carry out a load balancing scheme. Each core A N in one embodiment can be associated with a particular packet engine such that load balancing can be carried out by the packet engine. Load balancing may in this embodiment require that each packet engine A N associated with a core communicate with the other packet engines associated with cores so that the packet engines A N can collectively determine where to distribute load. One embodiment of this process can include an arbiter that receives votes from each packet engine for load. The arbiter can distribute load to each packet engine A N based in part on the age of the engine s vote and in some cases a priority value associated with the current amount of load on an engine s associated core .

Any of the packet engines running on the cores may run in user mode kernel or any combination thereof. In some embodiments the packet engine operates as an application or program running is user or application space. In these embodiments the packet engine may use any type and form of interface to access any functionality provided by the kernel. In some embodiments the packet engine operates in kernel mode or as part of the kernel. In some embodiments a first portion of the packet engine operates in user mode while a second portion of the packet engine operates in kernel mode. In some embodiments a first packet engine on a first core executes in kernel mode while a second packet engine on a second core executes in user mode. In some embodiments the packet engine or any portions thereof operates on or in conjunction with the NIC or any drivers thereof.

In some embodiments the memory bus can be any type and form of memory or computer bus. While a single memory bus is depicted in the system can comprise any number of memory buses . In one embodiment each packet engine can be associated with one or more individual memory buses .

The NIC can in some embodiments be any of the network interface cards or mechanisms described herein. The NIC can have any number of ports. The NIC can be designed and constructed to connect to any type and form of network . While a single NIC is illustrated the system can comprise any number of NICs . In some embodiments each core A N can be associated with one or more single NICs . Thus each core can be associated with a single NIC dedicated to a particular core .

The cores A N can comprise any of the processors described herein. Further the cores A N can be configured according to any of the core configurations described herein. Still further the cores A N can have any of the core functionalities described herein. While illustrates seven cores A G any number of cores can be included within the system . In particular the system can comprise N cores where N is a whole number greater than zero.

A core may have or use memory that is allocated or assigned for use to that core. The memory may be considered private or local memory of that core and only accessible by that core. A core may have or use memory that is shared or assigned to multiple cores. The memory may be considered public or shared memory that is accessible by more than one core. A core may use any combination of private and public memory. With separate address spaces for each core some level of coordination is eliminated from the case of using the same address space. With a separate address space a core can perform work on information and data in the core s own address space without worrying about conflicts with other cores. Each packet engine may have a separate memory pool for TCP and or SSL connections.

Further referring to any of the functionality and or embodiments of the cores described above in connection with can be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the cores being deployed in the form of a physical processor such functionality may be deployed in a virtualized environment on any computing device such as a client server or appliance . In other embodiments instead of the functionality of the cores being deployed in the form of an appliance or a single device the functionality may be deployed across multiple devices in any arrangement. For example one device may comprise two or more cores and another device may comprise two or more cores. For example a multi core system may include a cluster of computing devices a server farm or network of computing devices. In some embodiments instead of the functionality of the cores being deployed in the form of cores the functionality may be deployed on a plurality of processors such as a plurality of single core processors.

In one embodiment the cores may be any type and form of processor. In some embodiments a core can function substantially similar to any processor or central processing unit described herein. In some embodiments the cores may comprise any portion of any processor described herein. While illustrates seven cores there can exist any N number of cores within an appliance where N is any whole number greater than one. In some embodiments the cores can be installed within a common appliance while in other embodiments the cores can be installed within one or more appliance s communicatively connected to one another. The cores can in some embodiments comprise graphics processing software while in other embodiments the cores provide general processing capabilities. The cores can be installed physically near each other and or can be communicatively connected to each other. The cores may be connected by any type and form of bus or subsystem physically and or communicatively coupled to the cores for transferring data between to from and or between the cores.

While each core can comprise software for communicating with other cores in some embodiments a core manager not shown can facilitate communication between each core . In some embodiments the kernel may provide core management. The cores may interface or communicate with each other using a variety of interface mechanisms. In some embodiments core to core messaging may be used to communicate between cores such as a first core sending a message or data to a second core via a bus or subsystem connecting the cores. In some embodiments cores may communicate via any type and form of shared memory interface. In one embodiment there may be one or more memory locations shared among all the cores. In some embodiments each core may have separate memory locations shared with each other core. For example a first core may have a first shared memory with a second core and a second share memory with a third core. In some embodiments cores may communicate via any type of programming or API such as function calls via the kernel. In some embodiments the operating system may recognize and support multiple core devices and provide interfaces and API for inter core communications.

The flow distributor can be any application program library script task service process or any type and form of executable instructions executing on any type and form of hardware. In some embodiments the flow distributor may any design and construction of circuitry to perform any of the operations and functions described herein. In some embodiments the flow distributor distribute forwards routes controls and ors manage the distribution of data packets among the cores and or packet engine or VIPs running on the cores. The flow distributor in some embodiments can be referred to as an interface master. In one embodiment the flow distributor comprises a set of executable instructions executing on a core or processor of the appliance . In another embodiment the flow distributor comprises a set of executable instructions executing on a computing machine in communication with the appliance . In some embodiments the flow distributor comprises a set of executable instructions executing on a NIC such as firmware. In still other embodiments the flow distributor comprises any combination of software and hardware to distribute data packets among cores or processors. In one embodiment the flow distributor executes on at least one of the cores A N while in other embodiments a separate flow distributor assigned to each core A N executes on an associated core A N. The flow distributor may use any type and form of statistical or probabilistic algorithms or decision making to balance the flows across the cores. The hardware of the appliance such as a NIC or the kernel may be designed and constructed to support sequential operations across the NICs and or cores.

In embodiments where the system comprises one or more flow distributors each flow distributor can be associated with a processor or a packet engine . The flow distributors can comprise an interface mechanism that allows each flow distributor to communicate with the other flow distributors executing within the system . In one instance the one or more flow distributors can determine how to balance load by communicating with each other. This process can operate substantially similarly to the process described above for submitting votes to an arbiter which then determines which flow distributor should receive the load. In other embodiments a first flow distributor can identify the load on an associated core and determine whether to forward a first data packet to the associated core based on any of the following criteria the load on the associated core is above a predetermined threshold the load on the associated core is below a predetermined threshold the load on the associated core is less than the load on the other cores or any other metric that can be used to determine where to forward data packets based in part on the amount of load on a processor.

The flow distributor can distribute network traffic among the cores according to a distribution computing or load balancing scheme such as those described herein. In one embodiment the flow distributor can distribute network traffic according to any one of a functional parallelism distribution scheme a data parallelism load distribution scheme a flow based data parallelism distribution scheme or any combination of these distribution scheme or any load balancing scheme for distributing load among multiple processors. The flow distributor can therefore act as a load distributor by taking in data packets and distributing them across the processors according to an operative load balancing or distribution scheme. In one embodiment the flow distributor can comprise one or more operations functions or logic to determine how to distribute packers work or load accordingly. In still other embodiments the flow distributor can comprise one or more sub operations functions or logic that can identify a source address and a destination address associated with a data packet and distribute packets accordingly.

In some embodiments the flow distributor can comprise a receive side scaling RSS network driver module or any type and form of executable instructions which distribute data packets among the one or more cores . The RSS module can comprise any combination of hardware and software. In some embodiments the RSS module works in conjunction with the flow distributor to distribute data packets across the cores A N or among multiple processors in a multi processor network. The RSS module can execute within the NIC in some embodiments and in other embodiments can execute on any one of the cores .

In some embodiments the RSS module uses the MICROSOFT receive side scaling RSS scheme. In one embodiment RSS is a Microsoft Scalable Networking initiative technology that enables receive processing to be balanced across multiple processors in the system while maintaining in order delivery of the data. The RSS may use any type and form of hashing scheme to determine a core or processor for processing a network packet.

The RSS module can apply any type and form hash function such as the Toeplitz hash function. The hash function may be applied to the hash type or any the sequence of values. The hash function may be a secure hash of any security level or is otherwise cryptographically secure. The hash function may use a hash key. The size of the key is dependent upon the hash function. For the Toeplitz hash the size may be 40 bytes for IPv6 and 16 bytes for IPv4.

The hash function may be designed and constructed based on any one or more criteria or design goals. In some embodiments a hash function may be used that provides an even distribution of hash result for different hash inputs and different hash types including TCP IPv4 TCP IPv6 IPv4 and IPv6 headers. In some embodiments a hash function may be used that provides a hash result that is evenly distributed when a small number of buckets are present for example two or four . In some embodiments hash function may be used that provides a hash result that is randomly distributed when a large number of buckets were present for example 64 buckets . In some embodiments the hash function is determined based on a level of computational or resource usage. In some embodiments the hash function is determined based on ease or difficulty of implementing the hash in hardware. In some embodiments the hash function is determined based on the ease or difficulty of a malicious remote host to send packets that would all hash to the same bucket.

The RSS may generate hashes from any type and form of input such as a sequence of values. This sequence of values can include any portion of the network packet such as any header field or payload of network packet or portions thereof. In some embodiments the input to the hash may be referred to as a hash type and include any tuples of information associated with a network packet or data flow such as any of the following a four tuple comprising at least two IP addresses and two ports a four tuple comprising any four sets of values a six tuple a two tuple and or any other sequence of numbers or values. The following are example of hash types that may be used by RSS 

The hash result or any portion thereof may used to identify a core or entity such as a packet engine or VIP for distributing a network packet. In some embodiments one or more hash bits or mask are applied to the hash result. The hash bit or mask may be any number of bits or bytes. A NIC may support any number of bits such as seven bits. The network stack may set the actual number of bits to be used during initialization. The number will be between 1 and 7 inclusive.

The hash result may be used to identify the core or entity via any type and form of table such as a bucket table or indirection table. In some embodiments the number of hash result bits are used to index into the table. The range of the hash mask may effectively define the size of the indirection table. Any portion of the hash result or the hash result itself may be used to index the indirection table. The values in the table may identify any of the cores or processor such as by a core or processor identifier. In some embodiments all of the cores of the multi core system are identified in the table. In other embodiments a port of the cores of the multi core system are identified in the table. The indirection table may comprise any number of buckets for example 2 to 128 buckets that may be indexed by a hash mask. Each bucket may comprise a range of index values that identify a core or processor. In some embodiments the flow controller and or RSS module may rebalance the network rebalance the network load by changing the indirection table.

In some embodiments the multi core system does not include a RSS driver or RSS module . In some of these embodiments a software steering module not shown or a software embodiment of the RSS module within the system can operate in conjunction with or as part of the flow distributor to steer packets to cores within the multi core system .

The flow distributor in some embodiments executes within any module or program on the appliance on any one of the cores and on any one of the devices or components included within the multi core system . In some embodiments the flow distributor can execute on the first core A while in other embodiments the flow distributor can execute on the NIC . In still other embodiments an instance of the flow distributor can execute on each core included in the multi core system . In this embodiment each instance of the flow distributor can communicate with other instances of the flow distributor to forward packets back and forth across the cores . There exist situations where a response to a request packet may not be processed by the same core i.e. the first core processes the request while the second core processes the response. In these situations the instances of the flow distributor can intercept the packet and forward it to the desired or correct core i.e. a flow distributor instance can forward the response to the first core. Multiple instances of the flow distributor can execute on any number of cores and any combination of cores .

The flow distributor may operate responsive to any one or more rules or policies. The rules may identify a core or packet processing engine to receive a network packet data or data flow. The rules may identify any type and form of tuple information related to a network packet such as a 4 tuple of source and destination IP address and source and destination ports. Based on a received packet matching the tuple specified by the rule the flow distributor may forward the packet to a core or packet engine. In some embodiments the packet is forwarded to a core via shared memory and or core to core messaging.

Although illustrates the flow distributor as executing within the multi core system in some embodiments the flow distributor can execute on a computing device or appliance remotely located from the multi core system . In such an embodiment the flow distributor can communicate with the multi core system to take in data packets and distribute the packets across the one or more cores . The flow distributor can in one embodiment receive data packets destined for the appliance apply a distribution scheme to the received data packets and distribute the data packets to the one or more cores of the multi core system . In one embodiment the flow distributor can be included in a router or other appliance such that the router can target particular cores by altering meta data associated with each packet so that each packet is targeted towards a sub node of the multi core system . In such an embodiment CISCO s vn tag mechanism can be used to alter or tag each packet with the appropriate meta data.

Illustrated in is an embodiment of a multi core system comprising one or more processing cores A N. In brief overview one of the cores can be designated as a control core A and can be used as a control plane for the other cores . The other cores may be secondary cores which operate in a data plane while the control core provides the control plane. The cores A N may share a global cache . While the control core provides a control plane the other cores in the multi core system form or provide a data plane. These cores perform data processing functionality on network traffic while the control provides initialization configuration and control of the multi core system.

Further referring to and in more detail the cores A N as well as the control core A can be any processor described herein. Furthermore the cores A N and the control core A can be any processor able to function within the system described in . Still further the cores A N and the control core A can be any core or group of cores described herein. The control core may be a different type of core or processor than the other cores. In some embodiments the control may operate a different packet engine or have a packet engine configured differently than the packet engines of the other cores.

Any portion of the memory of each of the cores may be allocated to or used for a global cache that is shared by the cores. In brief overview a predetermined percentage or predetermined amount of each of the memory of each core may be used for the global cache. For example 50 of each memory of each code may be dedicated or allocated to the shared global cache. That is in the illustrated embodiment 2 GB of each core excluding the control plane core or core 1 may be used to form a 28 GB shared global cache. The configuration of the control plane such as via the configuration services may determine the amount of memory used for the shared global cache. In some embodiments each core may provide a different amount of memory for use by the global cache. In other embodiments any one core may not provide any memory or use the global cache. In some embodiments any of the cores may also have a local cache in memory not allocated to the global shared memory. Each of the cores may store any portion of network traffic to the global shared cache. Each of the cores may check the cache for any content to use in a request or response. Any of the cores may obtain content from the global shared cache to use in a data flow request or response.

The global cache can be any type and form of memory or storage element such as any memory or storage element described herein. In some embodiments the cores may have access to a predetermined amount of memory i.e. 32 GB or any other memory amount commensurate with the system . The global cache can be allocated from that predetermined amount of memory while the rest of the available memory can be allocated among the cores . In other embodiments each core can have a predetermined amount of memory. The global cache can comprise an amount of the memory allocated to each core . This memory amount can be measured in bytes or can be measured as a percentage of the memory allocated to each core . Thus the global cache can comprise 1 GB of memory from the memory associated with each core or can comprise 20 percent or one half of the memory associated with each core . In some embodiments only a portion of the cores provide memory to the global cache while in other embodiments the global cache can comprise memory not allocated to the cores .

Each core can use the global cache to store network traffic or cache data. In some embodiments the packet engines of the core use the global cache to cache and use data stored by the plurality of packet engines. For example the cache manager of and cache functionality of may use the global cache to share data for acceleration. For example each of the packet engines may store responses such as HTML data to the global cache. Any of the cache managers operating on a core may access the global cache to server caches responses to client requests.

In some embodiments the cores can use the global cache to store a port allocation table which can be used to determine data flow based in part on ports. In other embodiments the cores can use the global cache to store an address lookup table or any other table or list that can be used by the flow distributor to determine where to direct incoming and outgoing data packets. The cores can in some embodiments read from and write to cache while in other embodiments the cores can only read from or write to cache . The cores may use the global cache to perform core to core communications.

The global cache may be sectioned into individual memory sections where each section can be dedicated to a particular core . In one embodiment the control core A can receive a greater amount of available cache while the other cores can receiving varying amounts or access to the global cache .

In some embodiments the system can comprise a control core A. While illustrates core 1 A as the control core the control core can be any core within the appliance or multi core system. Further while only a single control core is depicted the system can comprise one or more control cores each having a level of control over the system. In some embodiments one or more control cores can each control a particular aspect of the system . For example one core can control deciding which distribution scheme to use while another core can determine the size of the global cache .

The control plane of the multi core system may be the designation and configuration of a core as the dedicated management core or as a master core. This control plane core may provide control management and coordination of operation and functionality the plurality of cores in the multi core system. This control plane core may provide control management and coordination of allocation and use of memory of the system among the plurality of cores in the multi core system including initialization and configuration of the same. In some embodiments the control plane includes the flow distributor for controlling the assignment of data flows to cores and the distribution of network packets to cores based on data flows. In some embodiments the control plane core runs a packet engine and in other embodiments the control plane core is dedicated to management and control of the other cores of the system.

The control core A can exercise a level of control over the other cores such as determining how much memory should be allocated to each core or determining which core should be assigned to handle a particular function or hardware software entity. The control core A in some embodiments can exercise control over those cores within the control plan . Thus there can exist processors outside of the control plane which are not controlled by the control core A. Determining the boundaries of the control plane can include maintaining by the control core A or agent executing within the system a list of those cores controlled by the control core A. The control core A can control any of the following initialization of a core determining when a core is unavailable re distributing load to other cores when one core fails determining which distribution scheme to implement determining which core should receive network traffic determining how much cache should be allocated to each core determining whether to assign a particular function or element to a particular core determining whether to permit cores to communicate with one another determining the size of the global cache and any other determination of a function configuration or operation of the cores within the system .

As discussed in the previous section to overcome limitations on transistor spacing and CPU speed increases many CPU manufacturers have incorporated multi core CPUs to improve performance beyond that capable of even a single higher speed CPU. Similar or further performance gains may be made by operating a plurality of appliances either single or multi core together as a distributed or clustered appliance. Individual computing devices or appliances may be referred to as nodes of the cluster. A centralized management system may perform load balancing distribution configuration or other tasks to allow the nodes to operate in conjunction as a single computing system. Externally or to other devices including servers and clients in many embodiments the cluster may be viewed as a single virtual appliance or computing device albeit one with performance exceeding that of a typical individual appliance.

Referring now to illustrated is an embodiment of a computing device cluster or appliance cluster . A plurality of appliances or other computing devices sometimes referred to as nodes such as desktop computers servers rackmount servers blade servers or any other type and form of computing device may be joined into a single appliance cluster . Although referred to as an appliance cluster in many embodiments the cluster may operate as an application server network storage server backup service or any other type of computing device without limitation. In many embodiments the appliance cluster may be used to perform many of the functions of appliances WAN optimization devices network acceleration devices or other devices discussed above.

In some embodiments the appliance cluster may comprise a homogenous set of computing devices such as identical appliances blade servers within one or more chassis desktop or rackmount computing devices or other devices. In other embodiments the appliance cluster may comprise a heterogeneous or mixed set of devices including different models of appliances mixed appliances and servers or any other set of computing devices. This may allow for an appliance cluster to be expanded or upgraded over time with new models or devices for example.

In some embodiments each computing device or appliance of an appliance cluster may comprise a multi core appliance as discussed above. In many such embodiments the core management and flow distribution methods discussed above may be utilized by each individual appliance in addition to the node management and distribution methods discussed herein. This may be thought of as a two tier distributed system with one appliance comprising and distributing data to multiple nodes and each node comprising and distributing data for processing to multiple cores. Accordingly in such embodiments the node distribution system need not manage flow distribution to individual cores as that may be taken care of by a master or control core as discussed above.

In many embodiments an appliance cluster may be physically grouped such as a plurality of blade servers in a chassis or plurality of rackmount devices in a single rack but in other embodiments the appliance cluster may be distributed in a plurality of chassis plurality of racks plurality of rooms in a data center plurality of data centers or any other physical arrangement. Accordingly the appliance cluster may be considered a virtual appliance grouped via common configuration management and purpose rather than a physical group.

In some embodiments an appliance cluster may be connected to one or more networks . For example referring briefly back to in some embodiments an appliance may be deployed between a network joined to one or more clients and a network joined to one or more servers . An appliance cluster may be similarly deployed to operate as a single appliance. In many embodiments this may not require any network topology changes external to appliance cluster allowing for ease of installation and scalability from a single appliance scenario. In other embodiments an appliance cluster may be similarly deployed as shown in or discussed above. In still other embodiments an appliance cluster may comprise a plurality of virtual machines or processes executed by one or more servers. For example in one such embodiment a server farm may execute a plurality of virtual machines each virtual machine configured as an appliance and a plurality of the virtual machines acting in concert as an appliance cluster . In yet still other embodiments an appliance cluster may comprise a mix of appliances or virtual machines configured as appliances . In some embodiments appliance cluster may be geographically distributed with the plurality of appliances not co located. For example referring back to in one such embodiment a first appliance may be located at a first site such as a data center and a second appliance may be located at a second site such as a central office or corporate headquarters. In a further embodiment such geographically remote appliances may be joined by a dedicated network such as a T1 or T3 point to point connection a VPN or any other type and form of network. Accordingly although there may be additional communications latency compared to co located appliances there may be advantages in reliability in case of site power failures or communications outages scalability or other benefits. In some embodiments latency issues may be reduced through geographic or network based distribution of data flows. For example although configured as an appliance cluster communications from clients and servers at the corporate headquarters may be directed to the appliance deployed at the site load balancing may be weighted by location or similar steps can be taken to mitigate any latency.

Still referring to an appliance cluster may be connected to a network via a client data plane . In some embodiments client data plane may comprise a communication network such as a network carrying data between clients and appliance cluster . In some embodiments client data plane may comprise a switch hub router or other network devices bridging an external network and the plurality of appliances of the appliance cluster . For example in one such embodiment a router may be connected to an external network and connected to a network interface of each appliance . In some embodiments this router or switch may be referred to as an interface manager and may further be configured to distribute traffic evenly across the nodes in the application cluster . Thus in many embodiments the interface master may comprise a flow distributor external to appliance cluster . In other embodiments the interface master may comprise one of appliances . For example a first appliance may serve as the interface master receiving incoming traffic for the appliance cluster and distributing the traffic across each of appliances . In some embodiments return traffic may similarly flow from each of appliances via the first appliance serving as the interface master. In other embodiments return traffic from each of appliances may be transmitted directly to a network or via an external router switch or other device. In some embodiments appliances of the appliance cluster not serving as an interface master may be referred to as interface slaves A N.

The interface master may perform load balancing or traffic flow distribution in any of a variety of ways. For example in some embodiments the interface master may comprise a router performing equal cost multi path ECMP routing with next hops configured with appliances or nodes of the cluster. The interface master may use an open shortest path first OSPF In some embodiments the interface master may use a stateless hash based mechanism for traffic distribution such as hashes based on IP address or other packet information tuples as discussed above. Hash keys and or salt may be selected for even distribution across the nodes. In other embodiments the interface master may perform flow distribution via link aggregation LAG protocols or any other type and form of flow distribution load balancing and routing.

In some embodiments the appliance cluster may be connected to a network via a server data plane . Similar to client data plane server data plane may comprise a communication network such as a network carrying data between servers and appliance cluster . In some embodiments server data plane may comprise a switch hub router or other network devices bridging an external network and the plurality of appliances of the appliance cluster . For example in one such embodiment a router may be connected to an external network and connected to a network interface of each appliance . In many embodiments each appliance may comprise multiple network interfaces with a first network interface connected to client data plane and a second network interface connected to server data plane . This may provide additional security and prevent direct interface of client and server networks by having appliance cluster server as an intermediary device. In other embodiments client data plane and server data plane may be merged or combined. For example appliance cluster may be deployed as a non intermediary node on a network with clients and servers . As discussed above in many embodiments an interface master may be deployed on the server data plane for routing and distributing communications from the servers and network to each appliance of the appliance cluster. In many embodiments an interface master for client data plane and an interface master for server data plane may be similarly configured performing ECMP or LAG protocols as discussed above.

In some embodiments each appliance in appliance cluster may be connected via an internal communication network or back plane . Back plane may comprise a communication network for inter node or inter appliance control and configuration messages and for inter node forwarding of traffic. For example in one embodiment in which a first appliance communicates with a client via network and a second appliance communicates with a server via network communications between the client and server may flow from client to first appliance from first appliance to second appliance via back plane and from second appliance to server and vice versa. In other embodiments back plane may carry configuration messages such as interface pause or reset commands policy updates such as filtering or compression policies status messages such as buffer status throughput or error messages or any other type and form of inter node communication. In some embodiments RSS keys or hash keys may be shared by all nodes in the cluster and may be communicated via back plane . For example a first node or master node may select an RSS key such as at startup or boot and may distribute this key for use by other nodes. In some embodiments back plane may comprise a network between network interfaces of each appliance and may comprise a router switch or other network device not illustrated . Thus in some embodiments and as discussed above a router for client data plane may be deployed between appliance cluster and network a router for server data plane may be deployed between appliance cluster and network and a router for back plane may be deployed as part of appliance cluster . Each router may connect to a different network interface of each appliance . In other embodiments one or more planes may be combined or a router or switch may be split into multiple LANs or VLANs to connect to different interfaces of appliances and serve multiple routing functions simultaneously to reduce complexity or eliminate extra devices from the system.

In some embodiments a control plane not illustrated may communicate configuration and control traffic from an administrator or user to the appliance cluster . In some embodiments the control plane may be a fourth physical network while in other embodiments the control plane may comprise a VPN tunnel or communication via one of planes . Thus the control plane may in some embodiments be considered a virtual communication plane. In other embodiments an administrator may provide configuration and control through a separate interface such as a serial communication interface such as RS 232 a USB communication interface or any other type and form of communication. In some embodiments an appliance may comprise an interface for administration such as a front panel with buttons and a display a web server for configuration via network or back plane or any other type and form of interface.

In some embodiments as discussed above appliance cluster may include internal flow distribution. For example this may be done to allow nodes to join leave transparently to external devices. To prevent an external flow distributor from needing to be repeatedly reconfigured on such changes a node or appliance may act as an interface master or distributor for steering network packets to the correct node within the cluster . For example in some embodiments when a node leaves the cluster such as on failure reset or similar cases an external ECMP router may identify the change in nodes and may rehash all flows to redistribute traffic. This may result in dropping and resetting all connections. The same drop and reset may occur when the node rejoins. In some embodiments for reliability two appliances or nodes within appliance cluster may receive communications from external routers via connection mirroring.

In many embodiments flow distribution among nodes of appliance cluster may use any of the methods discussed above for flow distribution among cores of an appliance. For example in one embodiment a master appliance master node or interface master may compute a RSS hash such as a Toeplitz hash on incoming traffic and consult a preference list or distribution table for the hash. In many embodiments the flow distributor may provide the hash to the recipient appliance when forwarding the traffic. This may eliminate the need for the node to recompute the hash for flow distribution to a core. In many such embodiments the RSS key used for calculating hashes for distribution among the appliances may comprise the same key as that used for calculating hashes for distribution among the cores which may be referred to as a global RSS key allowing for reuse of the calculated hash. In some embodiments the hash may be computed with input tuples of transport layer headers including port numbers internet layer headers including IP addresses or any other packet header information. In some embodiments packet body information may be utilized for the hash. For example in one embodiment in which traffic of one protocol is encapsulated within traffic of another protocol such as lossy UDP traffic encapsulated via a lossless TCP header the flow distributor may calculate the hash based on the headers of the encapsulated protocol e.g. UDP headers rather than the encapsulating protocol e.g. TCP headers . Similarly in some embodiments in which packets are encapsulated and encrypted or compressed the flow distributor may calculate the hash based on the headers of the payload packet after decryption or decompression. In still other embodiments nodes may have internal IP addresses such as for configuration or administration purposes. Traffic to these IP addresses need not be hashed and distributed but rather may be forwarded to the node owning the destination address. For example an appliance may have a web server or other server running for configuration or administration purposes at an IP address of 1.2.3.4 and in some embodiments may register this address with the flow distributor as its internal IP address. In other embodiments the flow distributor may assign internal IP addresses to each node within the appliance cluster . Traffic arriving from external clients or servers such as a workstation used by an administrator directed to the internal IP address of the appliance 1.2.3.4 may be forwarded directly without requiring hashing.

In some network environments a client connects directly to a database server and sends a request to the database server. The database server may respond to the client with a redirect response also called a redirect packet. The redirect response may include information identifying another database server to which to send the request. The client may receive the redirect response determine the identity of the database server included in the redirect response to which to send the request and then send the request to the identified database server.

In some network environments a device intermediary to the client and the plurality of database servers can facilitate communications between the client and the plurality of database servers. The device may receive a request to access a database provided by the plurality of servers from the client. In some embodiments the request may be a login request. In some such embodiments the request may be a LOGIN7 request. The device may be configured to send the request to the database server designated as the primary database server. The primary database server may send a redirect response to the device if the primary server determines to route the request to a database server of the plurality of database servers designated as a secondary database server. In some embodiments the redirect response can include a token such as a ENVCHANGE Type 20 token. The token may include information that identifies the secondary database server to which to route the request. In some embodiments the token can include the domain name of the secondary database server to which to route the request. In some embodiments the primary database server may be configured to send the redirect response for read requests. The primary database server may be able to identify a read request based on the contents of the request or on one or more properties of a connection over which the read request was received by the primary database server.

The present disclosure relates to methods and systems for routing requests among a plurality of database servers. In particular the present disclosure relates to methods and systems for routing requests among a plurality of database servers without the need for a primary database server to generate or transmit redirect response packets. A device intermediary to a client and a plurality of database servers can receive a request to access a database provided by the plurality of database servers. The device can determine that the request is a read request. The device can identify a secondary database server to which to route the request. The device can then transmit the request to the identified database server. Details of the methods and systems for routing requests among a plurality of database servers are provided below with respect to .

In network environments in which the device is not configured to handle a redirect responses received from the primary database server the device may forward the redirect response received from the primary database server to the client. The client can then resend the request to the database server identified in the redirect response via the device.

The present disclosure also relates to methods and systems for handling a redirect response received from a primary database server. Providing redirect response handling by the device intermediary to the client and the plurality of database servers may reduce the amount of traffic traversing the network as the device may no longer need to forward the redirect response to the client and for the client to resend the request to the device to forward to the database server identified in the redirect response. Additional details relating to the methods and systems for handling a redirect response received from a primary database server are provided below with respect to .

Referring now to is a block diagram of an embodiment of a system for routing requests among a plurality of database servers. As shown in an appliance can be a device intermediary to a plurality of clients generally referred to as clients and a plurality of servers generally referred to as servers such as the appliance shown in . In some implementations the appliance can be part of a cluster of appliances such as the appliance cluster shown in . The appliance may communicate with clients via network and communicate with a plurality of servers via network . The appliance can facilitate communications between the clients and the servers via the networks and . The appliance includes a content switching vServer CS vServer with a content switching policy CS Policy to determine a request type of a request to access a database received by the appliance and to forward or otherwise transmit the request towards a database server providing the database associated with the request. The appliance includes a write vServer for receiving non read requests such as write requests and forwarding such requests to primary database servers such as the server . The appliance includes a read vServer for receiving read requests and forwarding such requests to secondary database servers such as the server . one or more of the CS vServer the write vServer and the read vServer may include a load balancer configured to select a database server based on the status and load of each of the database servers . The appliance includes monitors for monitoring the status of the database servers or services executing on respective database servers 

The servers may be database servers or otherwise include a database server. The services of the servers may include database servers or provide database access services. In some embodiments the servers may be configured to provide or maintain one or more databases and or any services associated with or providing access to the databases such as a listener service. The database server may provide or otherwise maintain any type and form of database including a SQL based database or an object based database. In some embodiments the database servers can be SQL servers configured to handle SQL requests. In some embodiments the database servers can be Microsoft SQL servers. In some embodiments the database servers can be Oracle database servers. The database services may include a listener service that listens for requests to access the database received via a network such as at an IP address and or port for the database.

The database servers may be grouped logically and or physically into one or more groups. The database servers may be arranged or configured as one or more clusters of database servers. The database servers may be grouped as an availability group AG . The availability group can include a first subset of the plurality of database servers that may be configured designed constructed or designated to function as primary database servers such as the primary database server and a second subset of plurality of database servers that may be configured designed constructed or designated to function as secondary database servers such as the secondary database servers . In some embodiments the availability group can include one or more primary database servers while the remaining database servers of the plurality of database servers are designated to function as secondary database servers.

In some embodiments primary database servers such as the primary database server may service write requests and or non read requests. In some embodiments the primary database server may be capable of servicing read requests. In some embodiments the primary database server may be configured to receive read requests and non read requests. In some implementations the primary database server can generate responsive to receiving a read request a redirect response identifying a secondary database server to which to redirect the read request. In some embodiments the primary database server may execute one or more services such as a listener service. In some embodiments the primary database server can execute a listener service that determines the type of request that is received and determines either to send a redirect response or to service the request.

In some embodiments secondary servers such as the secondary servers may be designed constructed or configured to collectively form or function as a server cluster. The secondary servers may be configured to service read requests. Each of the servers may execute one or more services such as a service generally referred to as services . Additional details of the services are provided below.

In some embodiments the request sent by the client may be any request sent over a network in any protocol in any protocol layer of any protocol suite. In some embodiments the request may be using the TCP IP protocol. In some embodiments the request may be using the application layer of the TCP IP protocol. In some embodiments the request may be a tabular data stream TDS protocol. In some embodiments the request may be using a protocol used to communicate with a database such as a structured query language SQL protocol. In some embodiments the request may be a protocol used to communicate with a Not only SQL NoSQL or object based or oriented database. In some embodiments the request may be a LOGIN7 stream request including authentication rules for a client with a server. The request may include information identifying the type of request. The type of request may be a read request type or a non read request type. In some embodiments a read request can be a request that does not result in writing altering or modifying entries of a database. In some embodiments a non read request can include a write request or any other type of request that relates to the administrative functions of the database server. In some embodiments a write request can be a request that results in altering modifying creating deleting rearranging entries or otherwise changing a database. In some embodiments the type of request may be a read intent request or a non read intent request such as a write intent request. In some embodiments the request may include information identifying the type of connection with the client or the type of connection requested with a server. In some embodiments the request may include or be associated with information identifying the type of connection the type of client and or the type of server.

The appliance may include content switching virtual server content switching policy one or more write virtual servers one or more read virtual servers and one or more monitors generally referred to as monitors . The write virtual servers and the read virtual servers may include one or more load balancers .

The content switching virtual server also referred to as CS vServer may include software executable on a device hardware or any combination of software and hardware. The CS vServer may include any type and form of program service task process or executable instructions or any combination thereof in the appliance . The CS vServer may include any logic functions rules or operations to receive a request from the client process the request and determine the request type of the request. The CS vServer may switch between or forward requests among one or more services executing on the server such as services comprising a database server or providing database access services. The CS vServer may be configured to receive a request to access a database provided by the plurality of database servers from the client . In some embodiments the CS vServer can be configured to establish a connection with the client over which the request the access the database is received. In some embodiments the CS vServer can establish a connection responsive to receiving the request to access the database. In some embodiments the CS vServer can be configured to establish a connection having one or more properties that correspond to the type of request received by the appliance .

In some embodiments the CS vServer can be configured to determine the type of the request. In some embodiments the CS vServer can be configured to determine the type of the request by parsing the request. In some embodiments the CS vServer can be configured to parse the request to identify properties parameters or content included in the request that identify or otherwise correspond to a particular type of request such as a read request or a non read request. For example the request can include syntax that corresponds to a read request a write request or any other type of request. In some embodiments the CS vServer may parse the request to identify one or more commands options parameters or flags that specify a read request or a read intent. For instance if request includes a READ command a SELECT command or any other SQL or TDS command that performs a function that accesses the database but does not result in writing to removing from or otherwise altering the database the CS vServer may determine that the request is a read request. If the request includes a WRITE command a CREATE INDEX command an INSERT INTO command a JOIN command or any other SQL or TDS command that writes or alters the data stored in the database the CS vServer may determine that the request is a non read request. In some embodiments a flag or a bit on a request may indicate whether the request is a read intent request or a non read intent request. The flag or the bit may be set or cleared by the client or a process executing on the appliance or the CS vServer .

In some embodiments the CS vServer can determine the type of request based on an identity or type of database to access the identity of the client or the identity of the database server to which the request is destined. In some embodiments the CS vServer can be configured to determine the type of request based on the source and or destination address of the request. In some embodiments the CS vServer can determine the type of request based on whether an existing connection between the client and one of the database servers exists. In some embodiments the CS vServer can be configured to identify one or more established connections between the appliance and the plurality of database servers and can identify from the parameters of the established connections the type of request. In some embodiments the CS vServer can be configured to determine the type of request based on the type or identity of the server to which the request is destined. In some embodiments the CS vServer can be configured to determine the type of request based on the type or identity of the client sending the request.

The CS vServer may determine the type of request of the second request based on the type of connection established with the server . If the connection established with the server is a read only connection then the CS vServer may determine that the second request is a read request type. If the connection established with the server is a non read connection then the CS vServer may determine that the second request is a non read request type. The CS vServer may determine the type of request from the type of server that the CS vServer is connected to. For instance if the CS vServer is connected to a primary server then the CS vServer may determine that the second request is a non read request type. If the CS vServer is connected to a secondary server then the CS vServer may determine that the second request is a read request type.

In some embodiments the CS vServer may determine the type of request from the properties of a connection established between the CS vServer and a client . For instance if the CS vServer receives a request from a client over a read only connection the CS vServer may determine that the request is a read request. If the CS vServer receives a request from a client over a non read connection the CS vServer may determine that the request is non read request. In some embodiments the CS vServer may determine the type of request from an authorization level associated with the client or an authorization level associated with a user of the client .

In some embodiments the CS vServer may be configured to determine that the request received by the appliance is a read request or a non read request using the content switching policy also referred to as CS policy . The CS vServer can apply the CS policy to determine a type of request. In some embodiments the CS vServer can apply the CS policy to identify information in the request to determine the type of request. The CS policy can include one or more rules and may be used by the CS vServer to pass the request to the write vServer in response to determining that the request is a non read request such as a write request. The CS policy can include one or more rules used by the CS vServer to pass the request to the read vServer in response to determining that the request is a read request. The CS policy may be similar to the one or more policies of the policy engine of . The CS policy may specify characteristics of a request such as a type of request and type of content. In some embodiments the CS vServer may apply the CS Policy to determine the type of request from the type of connection established between the CS vServer and the client the appliance and the database server to which the request is destined or between the appliance and one or more of the database servers to which the appliance serves as an intermediary to the client.

The CS vServer may further be designed constructed or configured to transmit pass or otherwise forward the request to either a write vServer such as the write vServer or a read vServer such as the read vServer . In some embodiments the CS vServer may be configured to pass the request to the write vServer in response to determining that the request is a non read request such as the write request. The CS vServer may send a non read request to the write vServer via an API or function call or a writing to a memory location on the appliance . Conversely the CS vServer may be configured to pass the request to the read vServer in response to determining that the request is a read request. The CS vServer may send a non read request to the read vServer via an API or function call or a writing to a memory location on the appliance .

The appliance may further include write vServer . The write vServer may include software executable on a device hardware or any combination of software and hardware. The write vServer may include any type and form of program service task process or executable instructions or any combination thereof in the appliance . The write vServer includes any logic functions rules or operations to receive a non read request via the CS vServer identify a database server to which to route the non read request and to transmit the request to the identified server . The write vServer may be a vServer configured to process and handle write or non read requests. The write vServer may be a vServer configured to manage the services of one or more primary database servers or database servers that process and or handle non read or write requests.

In some embodiments the write vServer may be configured to communicate with one or more services such as the service corresponding to the servers designated as primary database servers. In some embodiments the write vServer may be assigned or bound to services such as the service executing on each of the primary database servers . In some embodiments the write vServer may be assigned or bound to a server designated to function as a primary server. In some embodiments the write vServer may be assigned or bound to each of a plurality of database servers designated to function as a primary server.

In some embodiments the write vServer may be configured to receive non read requests via the CS vServer . The write vServer may receive a non read request from the CS vServer via an API or a function call or a writing to a memory location on the appliance . The write vServer may be configured to determine that the type of the request is a non read request type. In some embodiments the write vServer may determine that the type of the request is a non read request type based on content included in the request. In some embodiments the request can be marked tagged or otherwise include an identifier that indicates that the request is a non read request. In some embodiments the write vServer may determine that the request is a non read request using a policy similar to the CS policy .

The write vServer may be configured to identify or select a database server to which to transmit the request received from the CS vServer . In some embodiments the write vServer may be configured to identify a database server designated as a primary database server such as database server . In some embodiments in which there is a plurality of database servers designated as primary database servers the write vServer may be configured to select a database server from the plurality of primary database servers to which to transmit the request received from the CS vServer . In some embodiments the write vServer may determine which of the one or more primary database servers have resources available to service a non read request.

In some embodiments the write vServer may communicate with one or more monitors of the appliance to determine a status of one or more services executing on the primary database servers such as the primary database server . The monitors may include any software executable on a device hardware or combination thereof for performing monitoring measurement and data collection activities on a device. Each monitor may be assigned to a corresponding primary database server or a service executing on the corresponding primary database server . In some embodiments the write vServer may be configured to communicate or otherwise receive or exchange information with the monitors monitoring the status of the services at each of the primary database servers to which the write vServer is assigned. The monitors may include any type and form of program service task process or executable instructions or any combination thereof in the appliance . Each of the monitors may include any logic functions rules or operations to monitor the status of services and or the server to which the monitor is assigned or bound. The monitors may mark or indicate whether the corresponding primary database server or service has resources available to service a non read request. The monitors may also update the mark or indication periodically. In some embodiments each monitor may be updated by the corresponding primary database server or the service executing on the corresponding primary database server . In some embodiments the monitors may be included in the write vServer .

In some embodiments the write vServer may be configured to transmit the non read request to the selected primary database server . In some embodiments the write vServer may be configured to determine whether a connection between the write vServer and the selected primary database server exists. In some embodiments the write vServer may be configured to establish a connection between the write vServer and the selected primary database server to transmit the non read request from the write vServer to the selected primary database server exists. In some embodiments the write vServer may establish a connection between the write vServer and the selected primary database server dedicated to the non read request. In some embodiments the write vServer may establish a connection specific to each client. In some embodiments the write vServer may manage the connections between the write vServer and the primary database servers with which the write vServer established a connection.

The read vServer may include software executable on a device hardware or any combination of software and hardware. The read vServer may include any type and form of program service task process or executable instructions or any combination thereof in the appliance . The read vServer includes any logic functions rules or operations to receive a read request from the CS vServer identify a secondary database server to which to route the read request and to transmit the read request to the identified database server designated as a secondary server. The read vServer may be a vServer configured to process and handle read requests. The read vServer may be a vServer configured to manage the services of one or more second database servers or database servers that process and or handle read requests and in some implementations only read requests.

In some embodiments the read vServer may be assigned or bound to one or more of the database servers designated as secondary servers. In some embodiments the read vServer may be assigned or bound to the one or more of the database servers designated as secondary servers via a configuration of the appliance .

In some embodiments the read vServer may be configured to receive read requests via the CS vServer . The read vServer may receive a read request from the CS vServer via an API or function call or a writing to a memory location on the appliance . The read vServer may be configured to determine that the type of the request is a read request type. In some embodiments the read vServer may determine that the type of the request is a read request type based on content included in the request such as by identifying particular commands instructions or keywords in the request. In some embodiments the request can be marked tagged or otherwise include an identifier that indicates that the request is a read request. In some embodiments the read vServer may determine that the request is a read request using a policy similar to the CS policy .

In some embodiments the read vServer may determine which of the one or more secondary database servers have resources available to service a request. In some embodiments the read vServer may communicate with one or more monitors included in the appliance .

The monitors are similar to the monitors except that the monitors may monitor the status of services of the secondary database servers and or secondary database servers. Each monitor may be assigned to a corresponding secondary server or a service executing on the corresponding secondary server . In some embodiments the monitors are added to the secondary servers or to the services executing on the secondary servers . The monitors may mark or indicate whether the corresponding secondary server or service has resources available to service a request. The monitors may also update the mark or indication periodically. In some embodiments each monitor may be updated by the corresponding server or the service executing on the corresponding server 

In some embodiments the read vServer may be configured to transmit the read request to the selected secondary database server . In some embodiments the read vServer may be configured to determine whether a connection between the read vServer and the selected secondary database server exists. In some embodiments the read vServer may be configured to establish a connection between the read vServer and the selected secondary database server to transmit the read request to the read vServer and the selected secondary database server exists. In some embodiments the read vServer may establish a connection between the read vServer and the selected secondary database server dedicated to the read request. In some embodiments the read vServer may establish a connection specific to each client. In some embodiments the read vServer may manage the connections between the read vServer and the secondary database servers with which the read vServer established a connection.

In some embodiments the appliance such as any of the vServers may include a load balancer . The load balancer may be used to determine which service or server to forward or send requests such as which of the primary database servers or secondary database servers to send the request to. In some embodiments the load balancer may be part of the CS vServer . In some embodiments the load balancer may be part of the write vServer . In some embodiments the load balancer may be part of the read vServer . The load balancer may have access to one or more monitors to identify which of the secondary servers are available for servicing requests and which are not available. The load balancer may include expressions rules logic functions and operations to select one of the secondary servers that are available for servicing requests. In some embodiments that include a plurality of primary servers the load balancer may select one of the primary servers in a manner similar to how the load balancer selects a secondary database server 

Referring now to a block diagram of an embodiment of a flow of data in a system for routing requests among a plurality of database servers is shown. The appliance receives an incoming request from a client. The request can be a request to access a database provided by the plurality of database servers . In some embodiments the CS vServer at the appliance receives the incoming request . The CS vServer may determine whether the incoming request is a read request or a non read request such as a write request. If the incoming request is a write request or otherwise includes a write intent the CS vServer routes the incoming request to the write vServer . The write vServer may then send the incoming request to a primary database server or a service executing on the primary database server . If the incoming request is a read request or otherwise includes a read intent the CS vServer routes the incoming request to the read vServer . In some embodiments the CS vServer may select one of the one or more secondary servers before routing the incoming request to the read vServer . In some embodiments the read vServer may select one of the one or more secondary database servers to which to route the read request received from the CS vServer . The read vServer may route the incoming request to one of the one or more secondary servers or to a service executing on the one of the one or more secondary servers 

Referring now to a flow chart of an embodiment of a method for routing requests is shown and described. In brief overview the method may include assigning virtual servers to a plurality of database servers step . The method includes receiving a request to access a database provided by a plurality of database servers step . The method further includes determining that the request is a read request step . The method may further include identifying a status of one or more second database servers step . The method may further include selecting one of the one or more second database servers based on the status of the second database servers step . The method further includes transmitting the request to the selected second database servers step .

At step a device may assign virtual servers to a plurality of database servers. The plurality of database servers can correspond to database servers of an availability group. In some embodiments the device may be configured such as by an administrator to assign a write virtual server to each of the primary virtual servers. In some embodiments the device can assign a write virtual server to services associated with the primary database servers. In some embodiments the device can assign a read virtual server to each of the secondary virtual servers. In some embodiments the device can assign a read virtual server to services associated with the secondary virtual servers. The device can assign virtual servers to a database server via a configuration of the device. The device can assign or otherwise bind virtual servers to a database server to enable the device to route requests to the database servers via the virtual servers.

At step the device may receive a request to access a database provided by the plurality of database servers. The request may be generated or transmitted from an application on a client accessing a database using a database access language or protocol such as SQL. In some embodiments a content switching virtual server CS vServer of the device may receive the request. In some embodiments the device may receive the request and forward or otherwise pass the request to the CS vServer. In some embodiments the device may intercept the request that is sent from the client to one of the servers. In some embodiments the request may be directed to the device. In some embodiments the request may be directed to a specific server of the plurality of servers. In some embodiments the request may be directed to the plurality of servers or to a database service executing on one of the servers. In some embodiments the request may be directed to database service executing on the servers. In some embodiments the request received by the device can be a read request or a write request. In some embodiments the request received by the device may be over a read only connection to the database.

At step the device may determine that the request is a read request. In some embodiments the CS vServer of the device may determine that the request is a read request. In some embodiments the device may determine that the request to access the database is a read request based on content of the request. In some embodiments the request may include a plurality of requests and the device may determine that each of the requests in the plurality of requests is a read request type. In some embodiments the device may determine that one request is a read request and that another request is a write request.

In some embodiments the device may determine that the request to access the database is a read request based on a property of a connection over which the device receives the request. The device may read a connection information associated with the request such as the client information specifying authorization level of the client. The device may read header information or meta data associated or attached to the request that identifies the connection as a read request or a write request.

In some embodiments the CS vServer can determine the type of the request. In some embodiments the CS vServer can determine the type of the request by parsing the request. In some embodiments the CS vServer can parse the request to identify properties parameters or content included in the request that identify or otherwise correspond to a particular type of request such as a read request or a non read request. For example the request can include syntax that corresponds to a read request a write request or any other type of request. In some embodiments the CS vServer may parse the request to identify one or more commands options parameters or flags that specify a read request or a read intent. For instance if request includes a READ command a SELECT command or any other SQL or TDS command that performs a function that accesses the database but does not result in writing to removing from or otherwise altering the database the CS vServer may determine that the request is a read request. If the request includes a WRITE command a CREATE INDEX command an INSERT INTO command a JOIN command or any other SQL or TDS command that writes or alters the data stored in the database the CS vServer may determine that the request is a non read request. In some embodiments a flag or a bit on a request may indicate whether the request is a read intent request or a non read intent request. The flag or the bit may be set or cleared by the client or a process executing on the device or the CS vServer.

In some embodiments the CS vServer can determine the type of request based on an identity or type of database to access the identity of the client or the identity of the database server to which the request is destined. In some embodiments the CS vServer can determine the type of request based on the source and or destination address of the request. In some embodiments the CS vServer can determine the type of request based on whether an existing connection between the client and one of the database servers exists. In some embodiments the CS vServer can be configured to identify one or more established connections between the device and the plurality of database servers and can identify from the parameters of the established connections the type of request. In some embodiments the CS vServer can be configured to determine the type of request based on the type or identity of the server to which the request is destined. In some embodiments the CS vServer can be configured to determine the type of request based on the type or identity of the client sending the request.

The CS vServer may determine the type of request of the second request based on the type of connection established with the server. If the connection established with the server is a read only connection then the CS vServer may determine that the second request is a read request type. If the connection established with the server is a non read connection then the CS vServer may determine that the second request is a non read request type. The CS vServer may determine the type of request from the type of server that the CS vServer is connected to. For instance if the CS vServer is connected to a primary server then the CS vServer may determine that the second request is a non read request type. If the CS vServer is connected to a secondary server then the CS vServer may determine that the second request is a read request type.

In some embodiments the CS vServer may determine the type of request from the properties of a connection established between the CS vServer and the client. In some embodiments the CS vServer may determine the type of request from an authorization level associated with the client or an authorization level associated with a user of the client.

In some embodiments the CS vServer may determine that the request received by the device is a read request or a non read request using the content switching policy also referred to as CS policy. The CS vServer can apply the CS policy to determine a type of request. In some embodiments the CS vServer can apply the CS policy to identify information in the request to determine the type of request. The CS policy can include one or more rules and may be used by the CS vServer to pass the request to the write vServer in response to determining that the request is a non read request such as a write request. The CS policy can include one or more rules used by the CS vServer to pass the request to the read vServer in response to determining that the request is a read request. The CS policy may specify characteristics of a request such as a type of request and type of content. In some embodiments the CS vServer may apply the CS policy to determine the type of request from the type of connection established between the CS vServer and the client the device and the database server to which the request is destined or between the device and one or more of the database servers to which the device serves as an intermediary to the client.

At step the device may identify a status of one or more secondary servers. In some embodiments the read vServer of the device can identify the status of one or more secondary servers. The device may identify the status of one or more secondary servers responsive to determining that the request is a read request. In some embodiments the device may examine the services assigned to each of the secondary servers. In some embodiments the device may examine the services or resources available in each of the secondary servers. In some embodiments the device may query a secondary server for availability of services.

In some embodiments the device may monitor each of the one or more secondary database servers. In some embodiments each of the services executing on the one or more secondary database servers may monitor the one or more secondary database servers. In some embodiments each of the monitors associated with each of the services may monitor the one or more secondary database servers. The device may monitor the availability of services or resources on one or more of the secondary servers. In some embodiments a subset of the one or more secondary servers may be monitored. In some embodiments the device may randomly monitor a secondary server from the plurality of secondary servers until finding a secondary server with available services and or resources. In some embodiments the device may examine the monitors bound to each of the services assigned to each of the secondary servers. In some embodiments the device may update the monitors. In some embodiments the device may identify one or more of the secondary servers as up if services are available on those servers and identify one or more other secondary servers as down if services are not available on those servers.

At step the device may select one of the secondary servers to which to route the request based on the status of the second database servers. In some embodiments the device may select the secondary server with the most resources available. In some embodiments the device may select the secondary server with the most available capacity for servicing additional requests. In some embodiments the device may randomly select a secondary server out of a subset of secondary servers that have available services or resources. In some embodiments where the device monitored one secondary server with available services or resource the device selects that monitored secondary server. In some embodiments the device selects the secondary server according to a load balancing policy that may employ one or more load balancing schemes to select a secondary server.

At step the device may transmit the request to the selected secondary database server. The device may transmit the request to the selected secondary database server instead of the primary database server. In some embodiments the read vServer of the device may transmit the request to the selected secondary database server. In some embodiments the device may forward route or otherwise transmit the request to a service executing on the secondary server. In some embodiments the device may forward route or otherwise transmit the request to a database service executing on the secondary server. In some embodiments the read vServer may establish a connection with the selected secondary database server over which the request can be transmitted. The read vServer may send a request to the selected secondary database server over the connection.

Referring now to systems and methods for handling a redirect response from a primary database server is described. is a block diagram of an embodiment of a system for redirect response handling. An appliance may be deployed intermediary to one or more clients generally referred to as clients via network and a plurality of servers generally referred to as servers via network . The appliance may communicate with clients via network and communicate with a plurality of servers via network . The appliance can facilitate communications between clients and the servers via the networks and . The appliance includes a content switching vServer with a content switching policy to handle and redirect a response sent from a database server and to forward or otherwise transmit the request towards a database server providing the database associated with the response. The content switching vServer may include a load balancer configured to select a database server based on the status and load of each of the database servers .

The system can also include plurality of servers similar to servers described in relation to . The servers may be database servers. In some embodiments the servers may provide database access services. In some embodiments the servers may be configured to provide or maintain one or more databases and or any services associated with or providing access to the database such as a listener service. The database server may be any type and form of database. The servers may be grouped as an availability group AG . In some embodiments there may be a plurality of primary servers

In some embodiments primary servers may service non read requests such as write requests and or other requests for which the primary servers are configured to handle. In some embodiments the primary server may receive a read request generate redirect response identifying a secondary server to which the device can redirect the request and transmit the generated redirect response to the device. In this way the read request can be redirected to other servers such as secondary servers that are configured to handle process or otherwise service read requests. In some embodiments the primary server may execute a service such as a listener service that determines the type of request that is received and determines either to route the request or to service the request. The listener service may generate the redirect response that is sent to the appliance . Each of the secondary servers may also include or execute services 

The appliance may include content switching virtual server referred to as CS vServer content switching policy referred to as CS policy and load balancer . The CS vServer may be structurally similar to the CS vServer described in relation to but may differ in functionality. In some embodiments the CS vServer may receive a request from a client and send it to a primary server of the plurality of servers . The CS vServer may also receive a redirect response or a redirect packet from the primary server. The CS vServer may handle the redirect response by parsing the response to identify a secondary server to which to route the request drop the connection with the primary server and route the request to another server of the plurality of servers .

The CS vServer may include a load balancer . The load balancer may be similar to the load balancer described in relation to . The load balancer may be used to determine to which of the secondary servers the request is sent. The load balancer may have access to one or more services or status of the one or more services . The load balancer may include expressions rules logic functions and operations to select one of the secondary servers that are available for servicing requests. In some embodiments that include a plurality of primary servers the load balancer may select one of the primary servers to which to send the requests to access a database from one or more clients . In some embodiments the load balancer may select one of the secondary servers 

The appliance may further include a CS policy . The CS policy may be similar to the CS policy described in relation to . In some embodiments the CS policy may include one or more rules according to which the CS vServer can parse the redirect response. The CS policy may specify a domain of a request a URL associated with a request and other expressions rules logic functions and operations through which the CS vServer can parse the request to identify a secondary database server to which to send the request.

Referring now to a flow chart of an embodiment of a method for redirect response handling is shown. In brief overview the method includes transmitting a request to access a database to a primary database server step . The method further includes receiving a redirect response to the request from the primary database server step . The method further includes parsing the redirect response to identify a secondary server to which to send the request step . The method further includes dropping an existing connection with the primary database server step . The method further includes transmitting the request to the secondary server identified in the redirect response step .

At step a device may transmit a request to access a database to a primary database server. In some embodiments the content switching vServer CS vServer executing on the device may transmit a request to access a database to a primary database server. The device may be intermediary to a plurality of clients and a plurality of database servers. The plurality of database servers may include one or more primary database servers and one or more secondary database servers. The device may have received the request to access the database from a client. The device may send every request to access the database to the primary database server before sending it to another server. In some embodiments the device may establish a connection with the primary database server and transmit the database access request over that connection. In some embodiments the database access request is a LOGIN7 packet.

At step the device may receive a redirect response to the request from the primary database server. In some embodiments the CS vServer may receive the redirect response to the request from the primary database server. In some embodiments the device may receive the response over the connection that was opened for the purpose of transmitting the database access request. In some embodiments the device may receive the response over a new connection established by the primary database server with the device. In some embodiments the device may receive a response that identifies another server to which the request should be routed. In some embodiments the response includes a ENVCHANGE Type 20 Token that indicates that the database access request should be routed to the identified server. The response may also include an address of the identified server to which the request is to be routed. In some embodiments the address includes a domain name of a server. In some embodiments a listener service executing on the primary server sends the response.

At step the device may parse the redirect response to identify a secondary server to which to send the request. In some embodiments the CS vServer may parse the redirect response to identify a secondary server to which to send the request. In some embodiments the device may parse the Type 20 token in the response. In some embodiments the device may parse the address or the domain name of the secondary server. In some embodiments the CS vServer may determine the identity of the secondary server to which to send the request by identifying an IP address or other identifying information of the secondary server.

At step the device may drop the existing connection with the primary database server. In some embodiments the device can drop the existing connection with the primary database server to free up resources on the primary database server. In some embodiments the existing connection that is dropped had been established by the device when transmitting the database access request to the primary database server. In some embodiments the existing connection had been established by the primary database server when it sent a response to the device.

At step the device may transmit the database access request to the secondary server. In some embodiments the device may select a different secondary server based on load balancing on the secondary servers. In some embodiments the device may keep track of which secondary server the request is sent to so that if an error is received the database access request can be transmitted to another secondary server.

Referring now to a block diagram of an embodiment of a flow of data in a system for redirect response handling is shown. A client may send a database access request such as a login to a device intermediary to the client and a plurality of database servers. The plurality of database servers may include one or more primary database servers and one or more secondary database servers. The device may receive the login and send it to a server . The device may at first send the login to a primary database server. The server may receive the login and send back a response to the appliance . The response may be an authentication response. The device may parse the authentication response . The response may indicate that the server will service the request that there was an error with servicing the request or that the request should be redirected. The primary server will service the request if the request is a write request or if the read only intent bit on the request indicates that the primary server will service the request. There may also be an error with the request if for instance the request has syntax error or refers to an entry in the database that does not exist. If the response indicates that the request will be serviced or the if there was an error the process terminates . The response may also indicate that the request should be redirected and include the identity of a secondary server to which to transmit the request. The device may then drop the server side connection . The device may then determine whether an alternate service or server is available . The alternate service may be executing on one of the secondary servers identified in the response. The device sends the login to the alternate server identified in the response. Similar to the primary server the secondary server may then send back a response that indicates that the secondary server can process the response that there was an error or that the request should be redirected. If no alternate service is available for instance and there are no secondary servers left with available resources to service the request that has not already received the request then the device sets the request as a write request by setting a read only intent bit on the request to indicate that the request is a write request for example by setting the bit to 0 . The device then sends the login to the primary server which may send a response back to the device.

The device may receive a response from the secondary server indicating that the request was not serviced. The device may find another secondary server to send the request to and repeats until a secondary server is found that will service the database access request. If no secondary server is found the device may set the database access request to appear as a write request. In some embodiments a flag or a bit on the database access request may be set or cleared to indicate that the request is a write request or not a read only request. The database access request may then be resent to the primary server which will then process the request.

It should be appreciated that the methods and systems for redirect response handling described herein provide the device the capability to route requests to other servers other than the primary server without having to communicate the redirect response received from the primary server to the client. This can reduce the amount of traffic traversing the network as well as reduce the use of resources of the client to parse the redirect response to identify the alternate server to which to send the request as well as to resend the request to the identified alternate server.

It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. The systems and methods described above may be implemented as a method apparatus or article of manufacture using programming and or engineering techniques to produce software firmware hardware or any combination thereof. In addition the systems and methods described above may be provided as one or more computer readable programs embodied on or in one or more articles of manufacture. The term article of manufacture as used herein is intended to encompass code or logic accessible from and embedded in one or more computer readable devices firmware programmable logic memory devices e.g. EEPROMs ROMs PROMs RAMs SRAMs etc. hardware e.g. integrated circuit chip Field Programmable Gate Array FPGA Application Specific Integrated Circuit ASIC etc. electronic devices a computer readable non volatile storage unit e.g. CD ROM floppy disk hard disk drive etc. . The article of manufacture may be accessible from a file server providing access to the computer readable programs via a network transmission line wireless transmission media signals propagating through space radio waves infrared signals etc. The article of manufacture may be a flash memory card or a magnetic tape. The article of manufacture includes hardware logic as well as software or programmable code embedded in a computer readable medium that is executed by a processor. In general the computer readable programs may be implemented in any programming language such as LISP PERL C C C PROLOG or in any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

While various embodiments of the methods and systems have been described these embodiments are exemplary and in no way limit the scope of the described methods or systems. Those having skill in the relevant art can effect changes to form and details of the described methods and systems without departing from the broadest scope of the described methods and systems. Thus the scope of the methods and systems described herein should not be limited by any of the exemplary embodiments and should be defined in accordance with the accompanying claims and their equivalents.

