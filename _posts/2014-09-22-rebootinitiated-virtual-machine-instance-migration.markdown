---

title: Reboot-initiated virtual machine instance migration
abstract: A method for migrating a virtual machine instance within a service provider environment may include determining to migrate an instance running on a source server computer, the source server computer associated with a plurality of hardware resource settings. A target server computer may be identified based at least in part on the plurality of hardware resource settings. A local data volume of the target server computer may be synchronized with a local data volume of the source server computer. A notification may be sent to the user, indicating migration of the instance can be initiated. Upon receiving a reboot request, disconnecting at least one network interface attached to the instance. The instance may be terminated from running on the source server computer, and may be launched on the target server computer using the synchronized local data volume and instance state data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348646&OS=09348646&RS=09348646
owner: Amazon Technologies, Inc.
number: 09348646
owner_city: Reno
owner_country: US
publication_date: 20140922
---
Cloud computing is the use of computing resources hardware and software that are available in a remote location and accessible over a network such as the Internet. In a computing environment with many computing devices such as a virtual server or cloud computing environment with many server computers the use of computing resources can provide a number of advantages including cost advantages and or the ability to adapt rapidly to changing computing resource needs.

With the increased use of cloud computing resources some cloud computing environments may be inefficient in managing resource allocation. Additionally multiple application installations and reboots may cause latencies contributing to the inefficient use of the cloud computing environment resources.

A virtual machine image contains an operating system e.g. Linux and other data needed to launch a virtual machine in a virtual environment. The virtual machine image is similar to a physical computer s disk volume and may include a file system the operating system and other components needed to boot up as a machine. In order to launch a virtual machine hardware needs to be selected. The hardware selection may be accomplished through instance types which may allow a variety of different sizes of memory CPU capacity I O performance and so forth. The combination of the virtual machine image and the instance type can be used to create an instance or a virtual machine which may be launched on a cloud computing resource such as a host server computer in a multi tenant network environment.

As used herein the terms instance virtual machine and virtual machine instance or VMI are interchangeable.

As used herein the term resources refers to hardware resources associated with a server computer running one or more virtual machine instances e.g. CPU memory disk storage or other type of storage network card and so forth and or software resources e.g. one or more applications and or operating system running on the virtual machine . The term resources e.g. VMI resources may refer to a specific configuration of a VMI e.g. as offered for rent to a customer of a compute service provider . The term resource state may refer to state information associated with one or more resources of a virtual machine and or a server at a given point in time which state information may be stored for subsequent use e.g. in network storage or in a local storage attached to a server computer and associated with an instance .

As used herein the terms moving or migrating a virtual machine refer to moving a virtual machine from one server computer to another server computer e.g. virtual machine is terminated or otherwise suspended from running at the current server computer and is launched at another server computer or re launching the virtual machine at the same server computer e.g. virtual machine is terminated or otherwise suspended from running at the current server computer state of one or more resources of the server computer may be changed and the virtual machine may be re launched at the same server computer .

The following description is directed to techniques and solutions supporting reboot initiated migration of virtual machine instances or VMIs in a network environment such as a cloud computing multi tenant network environment or another service provider environment. After a determination that a given server computer may need to shut down e.g. for maintenance one or more VMIs may be identified that are running on the server source server that has to be disconnected. Based on resource settings for the source server and or settings associated with the one or more VMIs a new target server may be selected. A first local drive e.g. a drive connected to the motherboard of the source sever associated with the one or more VMIs may be used at the source server for storing state data for the one or more VMIs. A second local drive may be attached to the target server e.g. the motherboard of the target server and the state data from the first local drive may be copied to the second local drive. Thereafter the second local drive may be kept in sync with i.e. periodically synchronized with the first drive. After the two drives are initially synchronized a notice may be communicated to the customer running the one or more identified VMIs notifying the customer that a migration of the VMIs to a different server may be performed at a future date or may be performed at any time the customer reboots the one or more VMI . A virtual machine manager e.g. a hypervisor or management domain running on the source server may then intercept a reboot request for the one or more VMIs. Upon intercepting the reboot request the one or more VMIs may be shut down from the source server first local drive may be synced for a last time with state data and disconnected network interfaces are disconnected network storage drives are disconnected and may be re launched on the target server second local drive is connected to the re launched one or more VMIs previous network interfaces are re connected network storage drives are re connected . The customer may be notified that the one or more VMIs are rebooted on the new target server.

Each of the server computers e.g. may comprise suitable logic circuitry interfaces and or code and may be operable to run the VMIs e.g. using computing resources . The server computer may comprise a virtual machine instance manager or virtual machine manager VMM which may include code operable to run one or more VMIs on the server computer . In example embodiment the VMM may be a hypervisor. The resources information block of each server computer may comprise for example information identifying describing the central processing unit or CPU memory e.g. on chip and or off chip memory storage e.g. disk storage remote storage and so forth as well as any other computer resources used by each server computer . Similarly a VMM may include code to run one or more VMIs on the server computer .

The server computer may also comprise a virtual machine monitor which can include suitable logic circuitry interfaces and or code and may be operable to handle migration of data associated with one or more VMIs e.g. VMI from one server computer e.g. to another e.g. . More specifically a similar virtual machine monitor may be present on server and both monitors and may communicate with each other to transfer data in connection with VMI migration between servers and .

For each of the VMIs e.g. VMI the resources may be characterized with specific resource state information associated with resource state for the VMI at a given time point. The resource state may be implemented as a separate module operable to report state information for a given VMI e.g. VMI running on the server computer at a given time point. Alternatively resource state information may be obtained and reported by the CPU the operating system OS and or the virtual machine manager which may have similar functionalities to the virtual machine manager as described in reference to . In some instances a local data volume e.g. a local disk drive a partition on a local disk drive or other type of local storage may be attached to the VMI for storing resource state information e.g. including memory and processor state associated with the VMI . Additionally a network storage drive may also be attached to the VMI .

The instance migration service IMS within the service provider may comprise suitable logic circuitry interfaces and or code and may be operable to coordinate and or perform instance migration functions. More specifically the IMS may obtain information e.g. from a network administrator identifying a server that has to be shut down e.g. for maintenance . The IMS may then identify the VMIs running on such server determine a new server e.g. by matching server resources for migrating the VMIs synchronize one or more local drives attached to the first server with a local drive attached to the new server and notify the customer running the VMIs that a migration of the VMIs may take place at a subsequent future date or that a migration of the VMIs will take place if the customer initiates a reboot of the VMIs .

The IMS may also be operable to detect a reboot of the VMIs initiated by the customer e.g. a reboot outside of or independent of the VMIs or a reboot initiated from within the VMIs . Upon detecting the reboot the IMS may perform a final synchronization of the local drives disconnect any network interfaces or network storage drives from the VMIs shut down the VMIs running on the first server and re launch them on the new server and then reconnect the network interfaces the local drive of the new server and any network storage drive to the newly re launched VMIs. The IMS may also communicate a notification to the client that the VMI migration has been completed and the VMIs are running on a new server.

Even though reference numerals and in are discussed as resource information and resource state information respectively these numerals may also refer to a module block and or service providing the respective information. For example a resources module or service may comprise suitable circuitry logic and or code and may be operable to provide information on one or more hardware and or software resources used by the server computer to run a VMI. Similarly the resource state module or service may comprise suitable circuitry logic and or code and may be operable to provide resource state information for one or more of the resources.

In an example embodiment the instance migration service may use a policy which may describe one or more settings for automatic generation of migration profiles for a given customer virtual machine and or server computer. For example the client may set up the policy so that the local data volumes attached to the source and target server computers e.g. and are synchronized at a determined time interval. The policy may also specify other rules associated with instance migration functionality described herein e.g. rules for matching resource data of a source server to other servers in order to select a target server VMI disconnect and re launch sequences client customer notifications and so forth . The policy may be stored in a database used by the instance migration service or in any other storage accessible within the service provider . An example instance migration using the IMS is explained in greater detail below in reference to .

The instance manager may comprise suitable circuitry logic and or code and may be operable to manage one or more VMIs within the compute service provider . A more detailed description of the functionalities of the instance manager is provided herein below in reference to . More specifically the instance manager which may be similar to instance manager may control launching and termination of virtual machine instances in the service provider environment . When an instruction is received such as through an API request to launch an instance the instance manager determines available resources from e.g. a capacity pool of VMIs and launches the instance on a decided upon host server computer. The instance manager may also terminate one or more VMIs then migrate and launch the VMIs on another server computer based on e.g. instructions from the instance migration service .

After the instance manager receives the VMI identification information the resources information and the resource state information collectively the instance manager may cause the migration of the VMI from server computer to server computer to start. More specifically the instance manager may use the information to select the target server computer so that its resources match the resources of the source server computer and send a message to the virtual machine monitor running on server to start migrating the block data stored on the local disk to server computer . Similarly instance manager may send a message to the virtual machine monitor running on server indicating that a migration of an instance from server will be coming. In an example embodiment both the instance manager the virtual machine monitors and and the instance migration service may include application program interfaces APIs that can be used to receive requests. After the virtual machine monitors and receive migration notification messages the virtual machine monitor on server computer can open a connection to virtual machine monitor on server computer and use it to start copying block data to server computer . After the local disk volumes associated with servers and e.g. are synchronized e.g. the block storage used by the instance has been copied to the target server virtual machine monitor can report that the instance is ready for a reboot migration and send a message to instance migration service a migration notification e.g. can then be sent to client . If the customer reboots the instance e.g. either by going to a service provider console and selecting reboot logging into the instance and rebooting it or replying to the notification with a reboot proceed command the virtual machine monitor on server computer will detect a reboot event and store any additional state e.g. any input and output operations that the operating system in the instance makes before shutting down to disk e.g. as part of the shut down and reboot procedure. After the instance has been shut down instead of rebooting the instance the virtual machine monitor can report the reboot to instance migration service and copy the additional state to server computer . Instance migration service may receive the message from server computer and at terminate the VMI on server and migrate and launch at the terminated VMI as VMI on the server . In example embodiment the IMS may be implemented as part of the instance manager . Additionally even though illustrates that the migration of VMIs is performed by the instance manager the present disclosure is not limited in this regard and the migration may be performed in part or entirely by the instance migration service .

After the initial copy the virtual machine monitors and of each server may keep the local data volume synchronized with the local data volume e.g. upon any change in the content stored in volume the virtual machine monitor may send data indicative of the change to the target server and the virtual machine monitor on the target server may apply the change to volume . At the IMS may send a migration notification to the client at user device . The notification may be a notification that VMI will be shut down and migrated at a future date. The notification may further provide an option to the client to initiate the VMI migration at any time prior to the future date by initiating a reboot operation on the VMI .

The client may be using user device to run an instance management application for purposes of managing the instances e.g. of the client. The application may provide a software button or another indication for initiating an instance reboot. At the client may initiate a reboot of VMI by activating or selecting the button . Upon activation of the button an instance reboot instruction is communicated to the service provider . Similarly the notification could include a link that can be selected by the client to initiate a reboot of the VMI . In the embodiment where the notification is an email or text based message the button could include a hyperlink to an application program interface. Selecting the hyperlink can cause a web service request to be sent to the application program interface indicating that the customer has requested a reboot. At the virtual machine monitor running on the source server may intercept the reboot instruction and initiate migration. More specifically the virtual machine monitor can disconnect the network interfaces from VMI and can copy the last amount of state written to storage by the instance when it shut down. After performing a last synchronization of current state information the local data volume may be disconnected. The network storage volume may also be disconnected from the VMI . The VMI may then be re launched as VMI on server . The network interfaces which may be the same as the local data volume and the network storage volume may be re connected to the VMI . At a notification of successful VMI migration may be communicated from the IMS to the user device . At the notification may be received at the user device .

In an example embodiment the service provider can be established for an organization by or on behalf of the organization. That is the service provider may offer a private cloud environment. In another embodiment the service provider supports a multi tenant environment wherein a plurality of customers operate independently i.e. a public cloud environment . Generally speaking the service provider can provide the following models Infrastructure as a Service IaaS Platform as a Service PaaS and or Software as a Service SaaS . Other models can be provided. For the IaaS model the service provider can offer computers as physical or virtual machines and other resources. The virtual machines can be run as guests by a hypervisor as described further below. The PaaS model delivers a computing platform that can include an operating system programming language execution environment database and web server. Application developers can develop and run their software solutions on the compute service provider platform without the cost of buying and managing the underlying hardware and software. The SaaS model allows installation and operation of application software in the compute service provider. In some embodiments end users access the service provider using networked customer devices such as desktop computers laptops tablets smartphones etc. running web browsers or other lightweight customer applications. Those skilled in the art will recognize that the service provider can be described as a cloud environment.

The particular illustrated service provider includes a plurality of server computers A D. While only four server computers are shown any number can be used and large centers can include thousands of server computers. The server computers A D can provide computing resources for executing software instances A D. In one embodiment the instances A D are virtual machines. As known in the art a virtual machine is an instance of a software implementation of a machine i.e. a computer that executes applications like a physical machine. In the example each of the server computers A D can be configured to execute a hypervisor or another type of program configured to enable the execution of multiple instances on a single server. For example each of the servers A D can be configured e.g. via the hypervisor to support one or more virtual machine partitions with each virtual machine partition capable of running a virtual machine instance e.g. server computer A could be configured to support three virtual machine partitions each running a corresponding virtual machine instance . Additionally each of the instances can be configured to execute one or more applications.

In an example embodiment each of the server computers A D may also comprise resources module A D and resource state module A D . The resources module may comprise suitable circuitry logic and or code and may be operable to provide information on hardware and or software resources within the server computer . The resources state module may comprise suitable circuitry logic and or code and may be operable to provide state information for one or more of the hardware and or software resources of the server computer and or the instances running on the server at a given point in time. Functionalities of the modules and are similar to the functionalities of modules and respectively as discussed above in reference to .

The compute service provider may also comprise an instance migration service . The instance migration service may comprise suitable circuitry logic and or code and may be operable to perform the functionalities described herein e.g. in reference to including migrating one or more virtual machine instances e.g. from one server computer to another server computer using the resource state information. The instance migration service may be implemented as a stand alone service within the provider as a dedicated server similar to the servers A D and or may be implemented as part of the server computer that performs management functions. For example the instance migration service may be implemented as part of the management component as seen in .

It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machines other types of instances can be utilized with the concepts and technologies disclosed herein. For instance the technologies disclosed herein can be utilized with storage resources data communications resources and with other types of computing resources. The embodiments disclosed herein might also execute all or a portion of an application directly on a computer system without utilizing virtual machine instances.

One or more server computers can be reserved for executing software components for managing the operation of the server computers the instances the hypervisors and or the instance migration service . For example the server computer can execute a management component . A customer can access the management component to configure various aspects of the operation of the instances purchased by the customer. For example the customer can purchase rent or lease instances and make changes to the configuration of the instances. The customer can also specify settings regarding how the purchased instances are to be scaled in response to demand. The management component can further include a policy document e.g. in to implement migration related policies as described in reference to .

The server computer may further comprise memory which may be used as processing memory by the discontinuous migration service . An auto scaling component can scale the instances based upon rules defined by the customer. In one embodiment the auto scaling component allows a customer to specify scale up rules for use in determining when new instances should be instantiated and scale down rules for use in determining when existing instances should be terminated. The auto scaling component can consist of a number of subcomponents executing on different server computers or other computing devices. The auto scaling component can monitor available computing resources over an internal management network and modify resources available based on need.

A deployment component can be used to assist customers in the deployment of new instances of computing resources. The deployment component can have access to account information associated with the instances such as who is the owner of the account credit card information country of the owner etc. The deployment component can receive a configuration from a customer that includes data describing how new instances should be configured. For example the configuration can specify one or more applications to be installed in new instances provide scripts and or other types of code to be executed for configuring new instances provide cache logic specifying how an application cache should be prepared and other types of information. The deployment component can utilize the customer provided configuration and cache logic to configure prime and launch new instances . The configuration cache logic and other information may be specified by a customer using the management component or by providing this information directly to the deployment component . The instance manager e.g. in can be considered part of the deployment component .

Customer account information can include any desired information associated with a customer of the multi tenant environment. For example the customer account information can include a unique identifier for a customer a customer address billing information licensing information customization parameters for launching instances scheduling information auto scaling parameters previous IP addresses used to access the account and so forth.

A network can be utilized to interconnect the server computers A D and the server computer . The network can be a local area network LAN and can be connected to a Wide Area Network WAN so that end users can access the compute service provider . It should be appreciated that the network topology illustrated in has been simplified and that many more networks and networking devices can be utilized to interconnect the various computing systems disclosed herein.

In order to access and utilize instances such as instances of a customer device can be used. The customer device can be any of a variety of computing devices mobile or otherwise including a cell phone smartphone handheld computer Personal Digital Assistant PDA desktop computer etc. The customer device can communicate with the compute service provider through an end point which can be a DNS address designed to receive and process application programming interface API requests. In particular the end point can be a web server configured to expose an API. Using the API requests a customer device can make requests to implement any of the functionality described herein e.g. request a reboot to initiate an instance migration . Other services which can be internal to the compute service provider can likewise make API requests to the end point . For example the customer device may use the API requests to communicate a customer request associated with an instance migration. The API requests from the client can pass through the admission control and onto the discontinuous migration service in order to access the policy document and or to request migration related services. An administrative portal can be used to access and make changes to the policy document by an administrator of either the customer or the compute service provider .

Other general management services that may or may not be included in the compute service provider and or within the management component include an admission control e.g. one or more computers operating together as an admission control web service. The admission control can authenticate validate and unpack the API requests for service or storage of data within the compute service provider . The capacity tracker is responsible for determining how the servers need to be configured in order to meet the need for the different instance types by managing and configuring physical inventory in terms of forecasting provisioning and real time configuration and allocation of capacity. The capacity tracker maintains a pool of available inventory in a capacity pool database . The capacity tracker can also monitor capacity levels so as to know whether resources are readily available or limited.

An instance manager controls launching and termination of virtual machine instances in the network. When an instruction is received such as through an API request to launch an instance the instance manager pulls resources from the capacity pool and launches the instance on a decided upon host server computer. Similar to the instance manager are the storage manager and the network resource manager . The storage manager relates to initiation and termination of storage volumes while the network resource manager relates to initiation and termination of routers switches subnets etc. A network of partitions is described further in relation to and includes a physical layer upon which the instances are launched.

The instance migration service may perform the migration related functionalities described herein. The IMS may communicate with the capacity tracker to receive information regarding available partitions and or host servers that can be used for migrating and launching an instance or other network resources requested by a customer entity . Additionally communications with the admission control may be used to detect reboot requests and communicate notifications to the customer and communications with the network of partitions may be used to perform migration related functionalities affecting a plurality of partitions e.g. a plurality of instances running on such partitions associated with one or more server computers .

The router reads address information in a received packet and determines the packet s destination. If the router decides that a different data center contains a host server computer then the packet is forwarded to that data center. If the packet is addressed to a host in the data center then it is passed to a network address translator NAT that converts the packet s public IP address to a private IP address. The NAT also translates private addresses to public addresses that are bound outside of the data center . Additional routers can be coupled to the NAT to route packets to one or more racks of host server computers. Each rack can include a switch coupled to multiple host server computers. A particular host server computer is shown in an expanded view at .

Each host has underlying hardware which may include a network interface card one or more CPUs memory and so forth not illustrated in . Running a layer above the hardware is a hypervisor or kernel layer . The hypervisor or kernel layer can be classified as a type 1 or type 2 hypervisor. A type 1 hypervisor runs directly on the host hardware to control the hardware and to manage the guest operating systems. A type 2 hypervisor runs within a conventional operating system environment. Thus in a type 2 environment the hypervisor can be a distinct layer running above the operating system and the operating system interacts with the system hardware. Different types of hypervisors include Xen based Hyper V ESXi ESX Linux etc. but other hypervisors can also be used.

A management layer can be part of the hypervisor or separated therefrom and generally includes device drivers needed for accessing the hardware . The partitions are logical units of isolation by the hypervisor. Each partition can be allocated its own portion of the hardware layer s memory CPU allocation storage etc. Additionally each partition can include a virtual machine and its own guest operating system e.g. VMI may be running on partition and VMIn may be running on partition n . As such each partition is an abstract portion of capacity designed to support its own virtual machine independent of the other partitions.

In accordance with an example embodiment of the disclosure discontinuous migration service functionalities may be part of the hypervisor and may be used to implement VMI migration related functionalities as described herein. The discontinuous migration service functionalities may include the functionalities associated with for example the discontinuous migration service the resources module and or the resource state module .

Additionally when a virtual machine instance e.g. VMI is migrated e.g. re launched as VMIn on a partition at another host server computer the newly launched VMIn will be associated with the same public and private IP addresses as was used for VMI. This is illustrated at the expanded view of the NAT . As seen at even though each VMI or each server running the VMI may be associated with its own private IP address after the migration takes place e.g. VMI is terminated or suspended and replaced with VMIn as VMIn is launched at the same or different host server computer the newly launched VMIn has the same public IP address e.g. IP and private IP address PIP as previously used by the terminated or suspended VMI. Additionally routing information i.e. routing information for the specific server computer hosting the VMI may remain different e.g. routing information routing is associated with VMI and routing information routing n is associated with VMIn even though private and public IP addresses of VMI and VMIn after the migration remain the same.

At the IMS may send a notification e.g. to a user account e.g. of user at device associated with the instance. The notification may indicate that migration of the instance can be initiated. At after the notification is sent the IMS may receive an indication that a reboot of the instance has been initiated.

At the at least one network interface e.g. attached to the instance may be disconnected. The IMS may send a request to the source server computer to copy state data associated with the instance stored in local storage on the source server computer to the target server computer . The IMS may instruct the target server computer to launch the instance e.g. on the target server computer using the synchronized local data volume and the copied state data.

Referring to the example method may start at when the IMS may synchronize a first local data volume of a first server computer with a second local data volume of a second server computer . The second local data volume may be attached to a virtual machine instance VMI running on the second server computer and may store for example instance data associated with the VMI state data associated with resources and or data associated with a user of the VMI e.g. user . At upon synchronizing the first local data volume with the second local data volume the IMS may communicate a notification to the user . The notification may indicate a subsequent date a migration of the instance will be initiated. At the IMS may detect prior to the subsequent date a reboot request for rebooting the instance. At the IMS may terminate running of the instance on the second server computer . At the IMS may launch the instance on the first server computer using the synchronized first local data volume so as to migrate the instance from the second server computer as instance running on the first server computer .

For example an instance migration service can send a notification to a user that migration will happen at a particular time in the future e.g. a particular day or a particular time on a particular day . The notification can be provided in the form of an email an instant message an alert within a management system a phone call or in another format. The notification can be provided once the target instance is ready to accept the migration e.g. once the virtual machine instance has been setup including local data volume synchronization on the target system . The notification can indicate that the user e.g. a contact such as an administrator associated with the instance can initiate the migration earlier than the particular time in the future e.g. a message such as Your instance will be automatically migrated on Sep. 15 2015 at 10 00 PM pacific time. To initiate a reboot migration before this time click here. . Providing the user an option to migrate sooner than the scheduled time e.g. the scheduled time may be days or weeks in the future can provide benefits. For example the user may be able to initiate the reboot migration at a time when the instance is not in active use e.g. to minimize impact of the migration . In addition a service provider may benefit from systems that are freed up sooner than the scheduled time for maintenance or retirement e.g. equipment end of life .

With reference to the computing environment includes one or more processing units and memory . In this basic configuration is included within a dashed line. The processing units execute computer executable instructions. A processing unit can be a general purpose central processing unit CPU processor in an application specific integrated circuit ASIC or any other type of processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power. For example shows a central processing unit as well as a graphics processing unit or co processing unit . The tangible memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory etc. or some combination of the two accessible by the processing unit s . The memory stores software implementing one or more innovations e.g. functionalities described herein in the form of computer executable instructions suitable for execution by the processing unit s .

A computing system may have additional features. For example the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus controller or network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The tangible storage may be removable or non removable and includes magnetic disks magnetic tapes or cassettes CD ROMs DVDs or any other medium which can be used to store information in a non transitory way and which can be accessed within the computing environment . The storage stores instructions for the software implementing one or more innovations described herein.

The input device s may be a touch input device such as a keyboard mouse pen or trackball a voice input device a scanning device or another device that provides input to the computing environment . The output device s may be a display printer speaker CD writer or another device that provides output from the computing environment .

The communication connection s enable communication over a communication medium to another computing entity. The communication medium conveys information such as computer executable instructions audio or video input or output or other data in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media can use an electrical optical RF or other carrier.

Although the operations of some of the disclosed methods are described in a particular sequential order for convenient presentation it should be understood that this manner of description encompasses rearrangement unless a particular ordering is required by specific language set forth below. For example operations described sequentially may in some cases be rearranged or performed concurrently. Moreover for the sake of simplicity the attached figures may not show the various ways in which the disclosed methods can be used in conjunction with other methods.

Any of the disclosed methods can be implemented as computer executable instructions stored on one or more computer readable storage media e.g. one or more optical media discs volatile memory components such as DRAM or SRAM or non volatile memory components such as flash memory or hard drives and executed on a computer e.g. any commercially available computer including smart phones or other mobile devices that include computing hardware . The term computer readable storage media does not include communication connections such as signals and carrier waves. Any of the computer executable instructions for implementing the disclosed techniques as well as any data created and used during implementation of the disclosed embodiments can be stored on one or more computer readable storage media. The computer executable instructions can be part of for example a dedicated software application or a software application that is accessed or downloaded via a web browser or other software application such as a remote computing application . Such software can be executed for example on a single local computer e.g. any suitable commercially available computer or in a network environment e.g. via the Internet a wide area network a local area network a customer server network such as a cloud computing network or other such network using one or more network computers.

For clarity only certain selected aspects of the software based implementations are described. Other details that are well known in the art are omitted. For example it should be understood that the disclosed technology is not limited to any specific computer language or program. For instance the disclosed technology can be implemented by software written in C JAVA PERL JAVASCRIPT ADOBE FLASH or any other suitable programming language. Likewise the disclosed technology is not limited to any particular computer or type of hardware. Certain details of suitable computers and hardware are well known and need not be set forth in detail in this disclosure.

It should also be well understood that any functionality described herein can be performed at least in part by one or more hardware logic components instead of software. For example and without limitation illustrative types of hardware logic components that can be used include Field programmable Gate Arrays FPGAs Program specific Integrated Circuits ASICs Program specific Standard Products ASSPs System on a chip systems SOCs Complex Programmable Logic Devices CPLDs etc.

Furthermore any of the software based embodiments comprising for example computer executable instructions for causing a computer to perform any of the disclosed methods can be uploaded downloaded or remotely accessed through a suitable communication means. Such suitable communication means include for example the Internet the World Wide Web an intranet software applications cable including fiber optic cable magnetic communications electromagnetic communications including RF microwave and infrared communications electronic communications or other such communication means.

The disclosed methods apparatus and systems should not be construed as limiting in any way. Instead the present disclosure is directed toward all novel and nonobvious features and aspects of the various disclosed embodiments alone and in various combinations and sub combinations with one another. The disclosed methods apparatus and systems are not limited to any specific aspect or feature or combination thereof nor do the disclosed embodiments require that any one or more specific advantages be present or problems be solved.

In view of the many possible embodiments to which the principles of the disclosed invention may be applied it should be recognized that the illustrated embodiments are only preferred examples of the invention and should not be taken as limiting the scope of the invention. Rather the scope of the invention is defined by the following claims. Therefore what is claimed as the invention is all that comes within the scope of these claims.

