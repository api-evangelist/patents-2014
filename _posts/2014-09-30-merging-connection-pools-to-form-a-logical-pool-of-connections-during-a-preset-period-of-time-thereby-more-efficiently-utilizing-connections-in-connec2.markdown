---

title: Merging connection pools to form a logical pool of connections during a preset period of time thereby more efficiently utilizing connections in connection pools
abstract: A method, system and computer program product for efficiently utilizing connections in connection pools. A period of time an application running on a virtual machine needs a greater number of connections to an external resource than allocated in its pool of connections is identified. The connection pool for this application as well as the connection pools for the other applications containing connections to the same external resource are merged to form a logical pool of connections to be shared by those applications during the identified period of time. Alternatively, in an application server cluster environment, the connection pools utilized by the application servers to access the external resource may be reconfigured based on the weight assigned to each member (or application server) of the cluster which is based on the member's load size. In these manners, the resource connections in these pools of connections will be more efficiently utilized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563475&OS=09563475&RS=09563475
owner: International Business Machines Corporation
number: 09563475
owner_city: Armonk
owner_country: US
publication_date: 20140930
---
The present invention relates generally to connection pools utilized in the Java EE Connector Architecture JCA and more particularly to merging connection pools to form a logical pool of connections during a preset period of time thereby more efficiently utilizing connections in connection pools.

The Java 2 Platform Enterprise Edition J2EE is a software standard for developing multitier enterprise applications. The J2EE architecture has a client tier middle tier and back end tier. The client tier supports a variety of client types and the middle tier supports client services and business logic through web and Enterprise Java Beans EJB containers in the middle tier. The back end tier includes the Enterprise Information Systems EIS in the EIS tier and many standard Application Programming Interfaces APIs for accessing databases. An Enterprise Information System is generally any kind of computing system that offers high quality of service deals with large volumes of data and capable of supporting some large organization an enterprise . One of skill in the art can accordingly alter the objects and components resident on the several tiers. Containers are standardized runtime environments that provide services to components on the platform. All containers provide runtime support for responding to client requests and returning results to clients. The containers also provide APIs to support user session management.

Resident within the J2EE architecture is a resource adapter that plays a central role in the integration and connectivity between an EIS and an application server software framework dedicated to the efficient execution of procedures for supporting the construction of applications and serves as the point of contact between application components application servers and enterprise information systems. A resource adapter and other components must communicate with one another based on a standard referred to as the J2EE Connector Architecture JCA . To enable seamless integration with an application server the resource adapter abides by system level contracts defined by the JCA. These contracts exist between the application server and the EIS and are implemented through the resource adapter. The contracts specify how a system external to the J2EE platform integrates with it by supporting basic functions handled by the J2EE container. There are three major contracts the connection management contract which allows applications to connect to an EIS and enables the application server to utilize pooling pooling of resource connections the transaction management contract which allows an application server to manage and perform transactional access across one to many EIS resource managers and the security contract which provides support for secure access to the EIS.

As discussed above the connection management contract allows the application server to pool resource connections. In connection with pooling resource connections an object commonly referred to as a connection factory creates the resource connections to a resource e.g. database based on the properties configured on the connection factory instance.

Applications running by an EIS system e.g. tax collection application online banking application may service different number of requests during different times of the day and therefore need a different number of resource connections to a database resource to store or retrieve data in connection with servicing these requests. For example suppose a tax collection application is used to collect tax information from individuals and corporations on behalf of the government. The tax collection application is busy at the end of the work day between 4 00 pm 6 00 pm and also at the end of the month e.g. 29 30and 31day as tax submissions peak at this time. At peak time this application requires more than 100 connections to the database resource to be available for the requests to be serviced. Normally during non peak times the application needs an average of 30 40 connections to the database. Hence in order to ensure that there are enough connections to the database resource during any particular time the administrator configures the connection factory to create a maximum pool size of 100 connections. In case there are more than 100 concurrent users accessing the tax collection application they would have to wait for free connections to become available.

Furthermore suppose a second application an online banking application uses a separate connection pool to access the same database resource . The online banking application is busy from 9 00 am 4 00 pm on Monday through Friday and especially busy during 9 00 am 1 00 pm peak time where 250 connections to the database are required to service the requests. However if the database can only handle 300 connections concurrently then the administrator configures the connection factory to create a maximum pool size of 200 connections for this application. Hence during the peak time the online banking application would not be able to service all the requests concurrently.

However during 9 00 am 4 00 pm on Monday through Friday except the last few days of the month the tax collection application only needs an average of 30 40 connections to the database. Hence it has about 60 70 connections unused during that time since it is allocated 100 connections to the database to service requests. As a result the resource connections are not being optimally utilized. The online banking application users will have to wait until the connections are released in order to be served despite the fact that tax collection application has about 60 70 connections unused during the time that the online banking application could use additional connections.

While an administrator may attempt to manually reconfigure the size of the connection pool for the applications such as reducing the size of the connection pool for the tax collection application and increasing the size of the connection pool for the online banking application applications may unpredictably receive an increase in the number of requests to be serviced including for the application whose pool of connections was reduced and therefore may no longer be able to service all the requests concurrently.

Hence there is not currently a means for efficiently utilizing the resource connections in the connection pools.

In one embodiment of the present invention a method for efficiently utilizing connections in connection pools comprises identifying a period of time a first application running on a first virtual machine needs a greater number of resource connections to a resource than allocated in its first pool of connections of a first fixed size. The method further comprises merging by a processor the first pool of connections with a second pool of connections of a second fixed size utilized by a second application of a second virtual machine to access the resource to form a logical pool of connections to be shared by the first and second applications of the first virtual machine and the second virtual machine respectively during the period of time where the first and second pools of connections contain resource connections to the resource.

Other forms of the embodiment of the method described above are in a system and in a computer program product.

In another embodiment of the present invention a method for efficiently utilizing connections in connection pools comprises assigning a weight to each member of a cluster of members based on a size of a load serviced by each cluster member. The method further comprises computing a maximum connection pool size for each member of the cluster of members based on the weight assigned to each member of the cluster of members and a total number of connections allocated to a resource. Furthermore the method comprises configuring by a processor a connection pool size for each member of the cluster of members to correspond with its corresponding computed maximum connection pool size.

Other forms of the embodiment of the method described above are in a system and in a computer program product.

The foregoing has outlined rather generally the features and technical advantages of one or more embodiments of the present invention in order that the detailed description of the present invention that follows may be better understood. Additional features and advantages of the present invention will be described hereinafter which may form the subject of the claims of the present invention.

The present invention comprises a method system and computer program product for efficiently utilizing connections in connection pools. In one embodiment of the present invention a period of time an application running on a virtual machine needs a greater number of resource connections to an external resource e.g. database than allocated in its pool of connections is identified. The connection pool for this application as well as the connection pools for the other applications containing the resource connections to the same external resource are merged to form a logical pool of connections to be shared by those applications of the virtual machines during the identified period of time. In this manner when an application needs more connections at its peak load than the number of connections allocated in its pool of connections then those connections that are not being utilized in the connection pools by the other applications can be utilized by the application. As a result the resource connections are being more efficiently utilized in the connection pools. Alternatively in an application server cluster environment the connection pools utilized by the application servers to access the external resource may be reconfigured based on the weight assigned to each member or application server of the cluster which is based on the load size serviced by the member. In this manner the resource connections in these pools of connections will be more efficiently utilized.

In the following description numerous specific details are set forth to provide a thorough understanding of the present invention. However it will be apparent to those skilled in the art that the present invention may be practiced without such specific details. In other instances well known circuits have been shown in block diagram form in order not to obscure the present invention in unnecessary detail. For the most part details considering timing considerations and the like have been omitted inasmuch as such details are not necessary to obtain a complete understanding of the present invention and are within the skills of persons of ordinary skill in the relevant art.

Referring now to the Figures in detail illustrates a virtualization environment for a conventional server system in accordance with an embodiment of the present invention. Server includes a virtual operating system which can be an IBM z VM operating system. Operating system executes on a real or physical computer . Real computer includes one or more processors a memory also referred to herein as the host physical memory one or more disk drives and the like. Real computer further includes a processor controller that provides communication between virtual operating system and physical computer . Other components of real computer are not discussed herein for the sake of brevity.

Referring again to virtual operating system includes user portions A C identified as Guest Guest and Guest respectively in referred to herein as guests. Guests A C may collectively or individually be referred to as guests or guest respectively. Each guest is capable of functioning as a separate system. That is each guest A C can be independently reset host a guest operating system A C identified as Guest O S Guest O S and Guest O S respectively in respectively and operate with different programs. An operating system or application program running in guest appears to have access to a full and complete system but in reality only a portion of it is available. Guest operating systems A C may collectively or individually be referred to as guest operating systems or guest operating system respectively.

Each guest operating system may host one or more virtual machine applications A E identified as VM VM VM VM and VM respectively in such as Java virtual machines. For example guest operating system A hosts virtual machine applications A B. Guest operating system B hosts virtual machine applications C D and guest operating system C hosts virtual machine application E. Virtual machine applications A E may collectively or individually be referred to as virtual machine applications or virtual machine application respectively.

Virtual operating system further includes a common base portion referred to as a hypervisor or as a control program. Hypervisor or control program may be implemented in microcode running on processor or it may be implemented in software as part of virtual operating system . Control program is configured to manage and enable guests to run on a single host. Control program includes a virtual processor controller A C associated with each guest A C respectively. Virtual processor controllers A C may collectively or individually be referred to as virtual processor controllers or virtual processor controller respectively. Virtual processor controller provides communication between guest operating system and control program .

Control program further implements virtual processors A C one for each virtual processor controller A C respectively. That is control program implements virtual processors A C one for each guest A C respectively. Virtual processors A C may collectively or individually be referred to as virtual processors or virtual processor respectively.

As discussed above virtual operating system and its components execute on physical or real computer . These software components may be loaded into memory for execution by processor . Furthermore an application for efficiently utilizing connections in connection pools as discussed below in connection with may be loaded into memory for execution by processor .

Server may include applications running on virtual machines including an application server that includes applications. Server may provide interfaces to certain external resources such as a database. In one embodiment server includes a J2EE compatible system. In operation of server connections may be required between the applications running on virtual machines and the external resources. To produce such connections an entity may make a request to generate an instance of a connection factory the connection factory being a program object to generate a pool of connections between the application and the external resource. The principles of the present invention ensure that there are enough connections available to the external resource by the application during a particular time such as during the peak load time of the application as discussed further below.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

As stated in the Background section in order to ensure that there are enough connections to the database external resource by the application during any particular time including the peak load time of the application the administrator configures the connection factory to create a maximum connection pool size for each application. However in certain situations there may be connections in the connection pool to the resource unused by the application during its non peak times whereas other applications may have an insufficient number of connections to the resource during its peak times which may correspond to the non peak times of the application with excess resource connections. As a result the resource connections are not being optimally utilized. While an administrator may attempt to manually reconfigure the size of the connection pool for the applications applications may unpredictably receive an increase in the number of requests to be serviced including for the application whose pool of connections was reduced and therefore may no longer be able to service all the requests concurrently. Hence there is not currently a means for efficiently utilizing the resource connections in the connection pools.

The principles of the present invention provide a means for more efficiently utilizing the resource connections in the connection pools by merging the pools of connections utilized by the applications running on virtual machines containing connections to the same resource to form a logical pool of connections to be shared by the applications during a period of time which may be based on business requirements as discussed below in association with . is a flowchart of a method for merging pools of connections to form a logical pool of connections. illustrates merging pools of connections utilized by the applications running on the virtual machines to form a logical pool of connections. illustrates configuring connection pool sizes for members of a cluster in an application server cluster environment. is a flowchart of a method for configuring connection pool sizes for members of a cluster in an application server cluster environment.

As stated above is a flowchart of a method for merging pools of connections to form a logical pool of connections in accordance with an embodiment of the present invention.

Referring to in conjunction with in step server identifies a period of time an application running on a virtual machine needs a greater number of resource connections to an external resource e.g. database than allocated in its pool of connections. For example suppose that an online banking application running on virtual machine needs 250 connections to the external resource e.g. database from 9 00 am 1 00 pm peak time on Monday Friday. However the maximum connection pool size for the online banking application is limited to 200 connections. Hence based on the business requirements for this application there is a need for a greater number of resource connections to the external resource during that period of time. The period of time as used herein may be based on the day week month morning evening and or specific hours.

In step server identifies the connection factory object involved with the application application discussed in step which will be part of the resource reference declaration. As discussed above the connection factory object creates the resource connections to the external resource such as a database based on the properties configured on the connection factory instance. Each application may be associated with a connection factory object which is used to create a pool of connections to the external resource. In one embodiment the resource is referenced by a resource reference declaration which will include the connection factory that is used to create the pool of connections utilized by the application discussed in step to connect to the external resource.

In step server clusters the identified connection factory object of step with the other connection factory objects connecting to the same external resource to be accessed by the other virtual machines . By clustering the connection factory objects connecting to the same external resource the connection pools created by these connection factory objects will be able to be merged as discussed below.

In step server merges the connection pools for the cluster connection factory objects for those connection pools containing the resource connections to the same external resource to be accessed by virtual machines during the period of time identified in step thereby forming a logical pool of connections to be shared by the applications of virtual machines during the period of time as illustrated in .

Referring to in conjunction with applications of virtual machines such as application A identified as Application in of virtual machine A application B identified as Application in of virtual machine B and application C identified as Application in of virtual machine C are connected to an external resource such as a database via connection pools A C respectively established by connection factory objects. Applications A C may collectively or individually be referred to as applications or application respectively. Connection pools A C may collectively or individually be referred to as connection pools or connection pool respectively. is not to be limited in scope to the depicted number of applications virtual machines and connection pools . The principles of the present invention may be used to merge any number of connection pools into a logical pool of connections as discussed below to be shared by any number of applications running on any number of virtual machines .

During a period of time such as when application A needs a greater number of resource connections to external resource than allocated in its pool of connections each of these connection pools A C are merged to form a logical pool of connections to be shared by applications A C for a period of time determined in step . In this manner when an application such as application A needs more connections at its peak load than the number of connections allocated in its pool of connections then those connections that are not being utilized in the other connection pool s by the other applications such as application B can be utilized by application A. As a result the resource connections are being more efficiently utilized in connection pools . After the period of time identified in step elapses those connections that were utilized by application that came from a different connection pool than its own connection pool would be returned to its original connection pool .

Returning to in conjunction with in step a determination is made by server as to whether the period of time identified in step elapsed. If the period of time identified in step did not elapse then server continues to determine whether the period of time identified in step elapsed in step .

If however the period of time identified in step elapsed then in step server returns the merged connection pools to the connection pools of fixed size. For example referring to if connection pool A had a fixed size of 200 resource connection connection pool B had a fixed size of 50 resource connections and connection pool C had a fixed size of 50 resource connections then after merging connection pools A C a logical pool of connections of 300 resource connection to be shared among applications would be formed for the period of time identified in step . After the period of time elapses then the merged connection pools i.e. the logical pool of connections would be returned to connection pools A C of fixed size of 200 50 and 50 resource connections respectively.

As discussed above server may include applications running on virtual machines including an application server that includes applications. In an application server cluster environment where each application server runs on a virtual machine that corresponds to a node of the cluster an application server may need a greater number of resource connections to the external resource than allocated in its pool of connections in a similar manner as discussed above. To address such a need the connection pools utilized by the application servers to access the external resource may be reconfigured based on the weight assigned to each member or application server of the cluster which is based on the load size serviced by the member as discussed further below in connection with .

Referring to application servers A C identified as application server application server and application server respectively in running on virtual machines A C respectively in cluster are connected to an external resource such as a database via connection pools A C respectively established by connection factory objects. Application servers A C may collectively or individually be referred to as application servers or application server respectively. Connection pools A C may collectively or individually be referred to as connection pools or connection pool respectively. In one embodiment each virtual machine e.g. virtual machines A C is located on a node of cluster .

As further illustrated in a software component referred to as a load balancer which may be loaded into memory for execution by processor is configured to reconfigure the number of resource connections in connections pools based on the weight assigned to each member or application server of cluster as discussed further below in connection with . is not to be limited in scope to the depicted number of application servers virtual machines and connection pools .

Referring to in conjunction with in step load balancer assigns a weight to a cluster member based on the size of the load serviced by the cluster member e.g. application server . For example load balancer may assign a weight of 20 to application server A assign a weight of 10 to application server B and assign a weight of 5 to application server C based on the size of the load serviced by these application servers . For instance application server B may be assigned a weight of twice the weight of application server C since the size of its load is twice the size of the load serviced by application server C. Similarly application server A may be assigned a weight of twice the weight of application server B since the size of its load is twice the size of the load serviced by application server B.

In step load balancer computes the maximum connection pool size i.e. the number of connections available in connection pool for each cluster member e.g. application server based on the weights assigned to the cluster members and the total number of connections allocated to external resource . In one embodiment the maximum connection pool size for each cluster member equals MaxConnectionPoolSizecm MaxTotalSize EQ 1 where the parameter MaxConectionPoolSizecm corresponds to the maximum connection pool size for a cluster member e.g. application server A the parameter Wcm corresponds to the weight assigned to the cluster member e.g. weight of 20 assigned to application server A the parameter TWcms corresponds to the total weight assigned to all the cluster members e.g. weights of 20 plus 10 plus 5 and the parameter of MaxTotalSize corresponds to the total number of resource connections e.g. 300 connections allocated to this external resource e.g. database .

For example suppose that application server A is assigned a weight of 20 application server B is assigned a weight of 10 and application server C is assigned a weight of 5. Suppose further that the total number of resource connections allocated to database is 300. Hence the maximum connection pool size for application server A i.e. the maximum number of resource connections in connection pool A corresponds to 171 20 35 300 connections using EQ 1 as illustrated in . The maximum connection pool size for application server B i.e. the maximum number of resource connections in connection pool B corresponds to 86 10 35 300 connections using EQ 1 as illustrated in . Furthermore the maximum connection pool size for application server C i.e. the maximum number of resource connections in connection pool C corresponds to 43 5 35 300 connections using EQ 1 as illustrated in .

In step load balancer configures the connection pool size i.e. the number of connections available in connection pool for each cluster member e.g. application server to correspond with the maximum connection pool size computed in step .

Method may be reiterated in response to any changes in the weight assigned to an application server which occurs based on changes in the size of the load handled by application server .

By load balancer reconfiguring the sizes of the pools of connections for application servers in cluster based on the size of the loads serviced by application servers the resource connections in these pools of connections will be more efficiently utilized.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

