---

title: Dynamic scaling of storage volumes for storage client file systems
abstract: A network-based data store maintaining storage volumes for file systems at storage clients may implement dynamic storage volume scaling. A scaling event may be detected according to a specified scaling policy for a storage volume maintained at a network-based data store that is mounted at a storage client and configured for a file system. In a least some embodiments, the scaling policy for the storage volume may be received from the storage client. In response to detecting the storage event, storage maintaining the storage volume may be modified according to the scaling policy to scale the storage volume. An indication of the scaling event may be sent to the storage client in order to update the file system at the storage client so that the file system may utilize the scaled storage volume.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09628350&OS=09628350&RS=09628350
owner: Amazon Technologies, Inc.
number: 09628350
owner_city: Reno
owner_country: US
publication_date: 20141105
---
The recent revolution in technologies for dynamically sharing virtualizations of hardware resources software and information storage across networks has increased the reliability scalability and cost efficiency of computing. More specifically the ability to provide on demand virtual computing resources and storage through the advent of virtualization has enabled consumers of processing resources and storage to flexibly structure their computing and storage costs in response to immediately perceived computing and storage needs. Virtualization allows customers to purchase processor cycles and storage at the time of demand rather than buying or leasing fixed hardware in provisioning cycles that are dictated by the delays and costs of manufacture and deployment of hardware. Rather than depending on the accuracy of predictions of future demand to determine the availability of computing and storage users are able to purchase the use of computing and storage resources on a relatively instantaneous as needed basis.

Virtualized computing environments are frequently supported by block based storage. Such block based storage provides a storage system that is able to interact with various computing virtualizations through a series of standardized storage calls that render the block based storage functionally agnostic to the structural and functional details of the volumes that it supports and the operating systems executing on the virtualizations to which it provides storage availability. However as network transmission capabilities increase along with greater processing capacity for virtualized resources I O demands upon block based storage may grow. If I O demands exceed the capacity of block based storage to service requests then latency and or durability of block based storage performance for virtualized computing resources suffer resulting in a loss of virtualized computing performance.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . The words include including and includes indicate open ended relationships and therefore mean including but not limited to. Similarly the words have having and has also indicate open ended relationships and thus mean having but not limited to. The terms first second third and so forth as used herein are used as labels for nouns that they precede and do not imply any type of ordering e.g. spatial temporal logical etc. unless such an ordering is otherwise explicitly indicated.

Various components may be described as configured to perform a task or tasks. In such contexts configured to is a broad recitation generally meaning having structure that performs the task or tasks during operation. As such the component can be configured to perform the task even when the component is not currently performing that task e.g. a computer system may be configured to perform operations even when the operations are not currently being performed . In some contexts configured to may be a broad recitation of structure generally meaning having circuitry that performs the task or tasks during operation. As such the component can be configured to perform the task even when the component is not currently on. In general the circuitry that forms the structure corresponding to configured to may include hardware circuits.

Various components may be described as performing a task or tasks for convenience in the description. Such descriptions should be interpreted as including the phrase configured to. Reciting a component that is configured to perform one or more tasks is expressly intended not to invoke 35 U.S.C. 112 f interpretation for that component.

 Based On. As used herein this term is used to describe one or more factors that affect a determination. This term does not foreclose additional factors that may affect a determination. That is a determination may be solely based on those factors or based at least in part on those factors. Consider the phrase determine A based on B. While B may be a factor that affects the determination of A such a phrase does not foreclose the determination of A from also being based on C. In other instances A may be determined based solely on B.

The scope of the present disclosure includes any feature or combination of features disclosed herein either explicitly or implicitly or any generalization thereof whether or not it mitigates any or all of the problems addressed herein. Accordingly new claims may be formulated during prosecution of this application or an application claiming priority thereto to any such combination of features. In particular with reference to the appended claims features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the appended claims.

Various embodiments of dynamic scaling of storage volumes for storage client file systems are described herein. Network based data stores offer durable and flexible storage solutions for a variety of different storage client applications. For example storage clients may implement a storage volume that supports a file system in a network based data store. Providing dynamic scaling of storage volumes allows the storage costs to tightly fit the actual use of the storage volume compensating for changing storage requirements over time. is a series of diagrams illustrating dynamic scaling of storage volumes for storage client file systems according to some embodiments. Network based data store may provide persistent data storage for various storage client s . Storage in network based data store may be block based storage in at least some embodiments. Storage client s may provision a storage volume in network based data store . Upon provisioning the data store the storage client s may mount the storage volume and configure it for a file system implemented at storage client s .

As noted earlier storage capacity and or performance needs may change over time. In light of these changes statically provisioned storage resources may become less cost efficient. Moreover for network based data stores providing storage for multiple different storage clients underused storage resources may be better utilized for another storage client reducing efficiency for the network based data store. Thus in various embodiments network based data store may implement dynamic scaling of storage volumes for storage client file systems. As illustrated in scene file system manager at storage client s may send various I O requests to storage volume as part of utilizing storage volume for the file system implemented at storage client s . Volume performance may be reported to data store control plane which may monitor the storage volume to detect scaling events for the storage volume .

Scaling events may be detected according to a scaling policy for the storage volume . A scaling policy may include on or more conditions that trigger various control plane actions to scale the storage volume . For example storage volume may be scaled to increase in size decrease in size redistribute storage resources for the storage volume differently and or provision different throughput performance e.g. input output operations per second IOPs for the storage volume . Various different thresholds or conditions may be evaluated with respect to volume performance metrics and storage capacity to detect scaling events e.g. too much or too little storage capacity or bandwidth .

As illustrated in scene a scaling event for the storage volume has occurred. Data store control plane provides an indication of the scaling event for the volume to file system manager . This indication may allow file system manager to access the scaled storage volume. Data store control plane also dynamically scales the storage volume adding addition in this example. Various different storage operations to allocate storage resources commensurate with the desired configuration of the storage volume for the scaling event may be performed including various storage maintenance operations. File system manager may receive the indication and update the file system at the storage client s to include the scaled storage volume . For instance file system manager may perform various resize operations to update file system metadata to indicate the scaled storage volume as a result of the volume addition . File system manager may then send I O requests to utilize the scaled storage volume in network based data store .

Please note is provided as an illustration dynamic scaling of storage volumes for storage client file systems and is not intended to be limiting as to the physical arrangement size or number of components modules or devices described therein.

The specification first describes an example of a network based data store as a block based storage service which may provide dynamic scaling of storage volumes for storage client file systems. Various components modules systems or devices which may implement the block based storage service and a client of the block based storage service are described. The specification then describes flowcharts of various embodiments of methods for implementing dynamic scaling of storage volumes for storage client file systems. Next the specification describes an example system that may implement the disclosed techniques. Various examples are provided throughout the specification.

As noted above virtual compute service may offer various compute instance s to clients . A virtual compute instance may for example comprise one or more servers with a specified computational capacity which may be specified by indicating the type and number of CPUs the main memory size and so on and a specified software stack e.g. a particular version of an operating system which may in turn run on top of a hypervisor . A number of different types of computing devices may be used singly or in combination to implement the compute instances of virtual compute service in different embodiments including general purpose or special purpose computer servers storage devices network devices and the like. In some embodiments instance clients or other any other user may be configured and or authorized to direct network traffic to a compute instance. In various embodiments compute instances may attach or map to one or more data volumes provided by block based storage service in order to obtain persistent block based storage for performing various operations.

Compute instance s may operate or implement a variety of different platforms such as application server instances Java virtual machines JVMs general purpose or special purpose operating systems platforms that support various interpreted or compiled programming languages such as Ruby Perl Python C C and the like or high performance computing platforms suitable for performing client applications without for example requiring the client to access an instance. In some embodiments compute instances have different types or configurations based on expected uptime ratios. The uptime ratio of a particular compute instance may be defined as the ratio of the amount of time the instance is activated to the total amount of time for which the instance is reserved. Uptime ratios may also be referred to as utilizations in some implementations. If a client expects to use a compute instance for a relatively small fraction of the time for which the instance is reserved e.g. 30 35 of a year long reservation the client may decide to reserve the instance as a Low Uptime Ratio instance and pay a discounted hourly usage fee in accordance with the associated pricing policy. If the client expects to have a steady state workload that requires an instance to be up most of the time the client may reserve a High Uptime Ratio instance and potentially pay an even lower hourly usage fee although in some embodiments the hourly fee may be charged for the entire duration of the reservation regardless of the actual number of hours of use in accordance with pricing policy. An option for Medium Uptime Ratio instances with a corresponding pricing policy may be supported in some embodiments as well where the upfront costs and the per hour costs fall between the corresponding High Uptime Ratio and Low Uptime Ratio costs.

Compute instance configurations may also include compute instances with a general or specific purpose such as computational workloads for compute intensive applications e.g. high traffic web applications ad serving batch processing video encoding distributed analytics high energy physics genome analysis and computational fluid dynamics graphics intensive workloads e.g. game streaming 3D application streaming server side graphics workloads rendering financial modeling and engineering design memory intensive workloads e.g. high performance databases distributed memory caches in memory analytics genome assembly and analysis and storage optimized workloads e.g. data warehousing and cluster file systems . Size of compute instances such as a particular number of virtual CPU cores memory cache storage as well as any other performance characteristic. Configurations of compute instances may also include their location in a particular data center availability zone geographic location etc. . . . and in the case of reserved compute instances reservation term length.

In various embodiments provider network may also implement block based storage service for performing storage operations. Block based storage service is a storage system composed of a pool of multiple independent storage nodes through e.g. server block data storage systems which provide block level storage utilizing one or more persistent storage device s through . Storage volumes maintained may be mapped to particular clients providing virtual block based storage e.g. hard disk storage or other persistent storage as a contiguous set of logical blocks. In some embodiments a storage volume may be divided up into multiple data chunks including one or more data blocks for performing other block storage operations such as snapshot operations or replication operations.

A volume snapshot of a storage volume may be a fixed point in time representation of the state of the storage volume. In some embodiments volume snapshots may be stored remotely from a storage node maintaining a storage volume such as in backup storage service . Snapshot operations may be performed to send copy and or otherwise preserve the snapshot of a given storage volume in another storage location such as a remote snapshot data store in backup storage service .

Block based storage service may implement block based storage service control plane to assist in the operation of block based storage service . In various embodiments block based storage service control plane assists in managing the availability of block data storage to clients such as programs executing on compute instances provided by virtual compute service and or other network based services located within provider network and or optionally computing systems not shown located within one or more other data centers or other computing systems e.g. client s external to provider network available over a network . Access to storage volumes on storage nodes may be provided over an internal network within provider network or externally via network in response to block data transaction instructions.

Block based storage service control plane may provide a variety of services related to providing block level storage functionality including the management of user accounts e.g. creation deletion billing collection of payment etc. . Block based storage service control plane may further provide services related to the creation usage and deletion of storage volumes and scaling policies in response to configuration requests. Block based storage service control plane may also provide services related to the creation usage and deletion of volume snapshots on backup storage service . Block based storage service control plane may also provide services related to the collection and processing of performance and auditing data related to the use of storage volumes and snapshots of those volumes.

Block based storage service may manage and maintain storage volumes in a variety of different ways. Different durability schemes may be implemented for some data volumes among two or more storage nodes maintaining a replica of a storage volume. For example different types of mirroring and or replication techniques may be implemented e.g. RAID 1 to increase the durability of a data volume such as by eliminating a single point of failure for a data volume. In order to provide access to a storage volume storage nodes may then coordinate I O requests such as write requests among the two or more storage nodes maintaining a replica of a storage volume.

Provider network may also implement backup storage service as noted above. Backup storage service may provide a same or different type of storage as provided by block based storage service . For example in some embodiments other storage service may provide an object based storage service which may store and manage data as data objects. For example volume snapshots of various storage volumes may be stored as snapshot objects for a particular storage volume. In addition to backup storage service provider network may implement other network based services which may include various different types of analytical computational storage or other network based system allowing clients as well as other services of provider network e.g. block based storage service virtual compute service and or other storage service to perform or request various tasks.

Clients may encompass any type of client configurable to submit requests to network provider . For example a given client may include a suitable version of a web browser or may include a plug in module or other type of code module configured to execute as an extension to or within an execution environment provided by a web browser. Alternatively a client may encompass an application such as a database application or user interface thereof a media application an office application or any other application that may make use of compute instances a storage volume or other network based service in provider network to perform various operations. In some embodiments such an application may include sufficient protocol support e.g. for a suitable version of Hypertext Transfer Protocol HTTP for generating and processing network based services requests without necessarily implementing full browser support for all types of network based data. In some embodiments clients may be configured to generate network based services requests according to a Representational State Transfer REST style network based services architecture a document or message based network based services architecture or another suitable network based services architecture. In some embodiments a client e.g. a computational client may be configured to provide access to a compute instance or storage volume in a manner that is transparent to applications implement on the client utilizing computational resources provided by the compute instance or block storage provided by the storage volume. In at least some embodiments client s may provision mount and configure storage volumes implemented at block based storage service for file systems implemented at client s .

Clients may convey network based services requests to provider network via external network . In various embodiments external network may encompass any suitable combination of networking hardware and protocols necessary to establish network based communications between clients and provider network . For example a network may generally encompass the various telecommunications networks and service providers that collectively implement the Internet. A network may also include private networks such as local area networks LANs or wide area networks WANs as well as public or private wireless networks. For example both a given client and provider network may be respectively provisioned within enterprises having their own internal networks. In such an embodiment a network may include the hardware e.g. modems routers switches load balancers proxy servers etc. and software e.g. protocol stacks accounting software firewall security software etc. necessary to establish a networking link between given client and the Internet as well as between the Internet and provider network . It is noted that in some embodiments clients may communicate with provider network using a private network rather than the public Internet.

The various storage clients discussed above may be implemented in many ways. is a block diagram illustrating various components of a storage client according to some embodiments. Storage client which may be clients virtual compute instances or internal client discussed above may communicate over network similar to network above with block based service . Block based storage service may be similar to block based storage service in some embodiments. Storage client may mount a storage volume maintained in block based storage system for a file system implemented at storage client .

In various embodiments storage client may implement file system manager which may be configured to direct Input Output I O between various components of storage client . In various embodiments file system manager may be implemented as part of a kernel in an operating system for storage client . File system manager may handle changes to a file system among other I O. File system manager may implement scaling management module to handle various indications of scaling events for storage volume in block based storage service from control plane . For example scaling management module may perform the various techniques discussed below with regard to to update the file system maintained at storage client . Resize operations for instance to update various metadata and information structures for the file system not illustrated . Scaling management module may in some embodiments collect various file system performance metrics e.g. storage capacity access patterns I O performance and send them to control plane . In at least some embodiments control plane may detect scaling events for storage volumes based at least in part on performance metrics collected at the storage client. In various embodiments file system manager may implement backup management module . Backup management module may direct or send snapshots of the file system to backup storage such as may be provided by backup storage service in above.

In various embodiments block based storage service may implement a front end module . Front end module may be configured to receive service requests and forward the requests or initiate the appropriate response from resource management module dynamic volume scaling module or resource monitor . In various embodiments front module may be configured to translate requests for block based storage service according to a programmatic interface API for the service and or receive process indicate requests received via another interface such as user interface implemented via a web site or command line interface at storage client s that utilizes the programmatic interface.

In various embodiments block based storage service may implement resource management module . Resource management module may be configured to provision storage volumes for clients and accept scaling policies for the storage volumes. For example resource manager may store information linking particular accounts and associated storage volumes at block based storage service to particular clients . For example as a result of scaling events different storage volume costs may be determined. The account information linked to storage volumes may allow for metering and billing for storage volumes to be added to the correct account. Resource management module may in some embodiments store manage access credentials or other information for clients to access storage volumes. In some embodiments resource management module may implement various locking or synchronization schemes to allow multiple storage clients to access the same storage volume. Resource management module may be configured to provision storage resources such as portions of volume storage on storage nodes . Resource management module may also provide access credentials and other identification information to clients or instances in order to access the storage volume for a particular client .

In various embodiments block based storage service may implement resource monitor . Resource monitor may receive performance metrics and or perform health checks to storage node s . Resource monitor may analyze aggregate and or provide this data to resource manager to perform various resource management operations and dynamic volume scaling module . For example resource management module may be configured to make placement decisions for provisioning or obtaining new storage removing storage for scaling operations based on the performance metrics and other information collected by resource monitor . In at least some embodiments resource monitor may provide statistically based predictions for which storage nodes can accept more data for storage volumes based on the scaling history for those volumes.

In various embodiments block based storage service may implement dynamic volume scaling module to dynamically scale storage volumes. As discussed in more detail with regard to below dynamic volume scaling module may detect storage scaling events for particular storage volumes modify the storage resources according to the scaling event and provide indications to storage clients of the scaling events. In at least some embodiments dynamic volume scaling module may detect scaling events triggered for various block based storage service performance criteria. For instance certain storage node s may be identified as hotspots receiving a larger proportion of network traffic than other storage nodes. Volume scaling events may be triggered to redistribute some volume storage to other storage nodes in order to reduce network traffic directed to the hotspot. Dynamic volume scaling module may also direct the performance of various storage maintenance operations for storage volumes that are scaled. For example defragmentation operations may be performed to reduce unutilized storage spaces in volume storage at storage node s . Various other compaction reclamation and or reorganization techniques may be direct from dynamic volume scaling module or other component of control plane or I O manager at storage node s .

Block based storage service may implement multiple storage node s to provide persistent storage for storage volumes maintained at the block based storage service . A storage node may be one or more computing systems or devices such as a storage server or other computing system e.g. computing system described below with regard to . Each storage node may maintain respective replicas or portions of storage volumes in volume storage . Storage nodes may also provide multi tenant storage. For example in some embodiments a storage node may maintain storage volumes in volume storage for multiple storage clients . Volume storage may persist their respective data volumes in one or more block based storage devices e.g. hard disk drives solid state drives etc. that may be directly attached to a computing system or device implementing the respective storage node . In various embodiments storage nodes may have different types of configurations of storage devices such that some storage volumes may be implemented on storage nodes with the corresponding storage device to provide a requested performance characteristic e.g. highly provisioned storage volumes on SSDs .

Block based storage service may manage and maintain storage volumes in a variety of different ways. Different durability schemes may be implemented for some storage volumes among two or more storage nodes maintaining a same replica of a data volume establishing a durability state for a storage volume. For example different types of mirroring and or replication techniques may be implemented e.g. RAID 1 to increase the durability of a storage volume such as by eliminating a single point of failure for a storage volume. In order to provide access to a data volume storage nodes may then coordinate I O requests such as write requests among the two or more storage nodes maintaining a replica of a storage volume. For example for a given storage volume one storage node may serve as a master storage node. A master storage node may in various embodiments receive and process requests e.g. I O requests from clients of the storage volume. Thus a master storage node may then coordinate replication of I O requests such as write requests or any other changes or modifications to a storage volume to one or more other storage nodes serving as slave storage nodes. Thus when a write request is received for a storage volume at a storage node the storage node may forward the write request to another storage node and wait until storage node acknowledges the write request as complete before completing the write. Master storage nodes may direct other operations for storage volumes like snapshot operations or other I O operations e.g. serving a read request . Please note that in some embodiments the role of master and slave storage nodes may be assigned per data volume.

Storage nodes may implement respective I O managers such as I O managers . I O managers may handle I O request directed toward data volumes maintained at a particular storage node. Thus I O manager may process and handle a write request to a storage volume at the storage node for example. I O manager may be configured to process I O requests according to block based storage service application programming interface API and or other communication protocols such as such as internet small computer system interface iSCSI . In some embodiments I O managers may implement file system mapping information for storage volumes or portions therefore maintained at the storage node . File system I O may be serviced using the file system mapping information in various embodiments.

Please note that the previous description of is provided for illustrative purposes only and is not intended to be limiting as to the number arrangement or configuration of various components implementing the functionalities described.

Storage client may then initiate file system I O to the storage volume maintained at storage node s in some embodiments. File system I O may be performed according to a network based storage protocol such as iSCSI. Performance metrics as well as other information pertinent to monitoring the storage volume may be reported from the storage node s to storage service control plane . In some embodiments storage client may send performance metrics some of which may not be collectible at the storage service to storage service control plane to be used in detecting scaling events. If a scaling event is detected for the storage volume storage service control plane may modify persistent storage to scale the storage volume . For example various copy move allocate delete or defrag commands may be sent to storage node s . Storage service control plane may also provide an indication of the scaling event for the storage volume to storage client via storage service interface . In at least some embodiments storage client may provide a scaling event response via storage service interface which may be used to coordinate and or perform the modification of the persistent storage to scale the storage volume . Therefore please note that the various messages illustrated in may be sent and or received at different times and thus the previous description is not intended to be limiting. Once the file system is updated storage client may perform updated file system I O to the scaled storage volume. Note that in at least some embodiments the scaling of the storage volume is performed such that the storage volume is online and able to continue accept file system I O.

Note that in various embodiments the network based or programmatic interfaces such as an API calls and responses described in above and below may be performed over a secure proxy connection e.g. one managed by a gateway control plane into the service and or provider network or may be performed over the public network or alternatively over a private channel such as a virtual private network VPN connection. These and other APIs to and or between components of the systems described herein may be implemented according to different technologies including but not limited to Simple Object Access Protocol SOAP technology and Representational state transfer REST technology. For example these APIs may be but are not necessarily implemented as SOAP APIs or RESTful APIs. SOAP is a protocol for exchanging information in the context of network based services. REST is an architectural style for distributed hypermedia systems. A RESTful API which may also be referred to as a RESTful network based service is a network based service API implemented using HTTP and REST technology. The APIs described herein may in some embodiments be wrapped with client libraries in various languages including but not limited to C C Java C and Perl to support integration with a network based data store client device implementing remote durable logging or other system service component or device.

The various embodiments of dynamic scaling of storage volumes for storage client file systems discussed above with regard to above may perform dynamic scaling in different ways. Moreover dynamic scaling of storage volumes for storage client file systems is not limited to such systems. Various other kinds of storage systems in addition to the example block storage service may implement dynamic scaling. Additionally file systems themselves may vary widely in type scheme or implementation. Many different devices may also implement dynamic scaling of storage volumes for storage client file systems including mobile computing devices such as tablet computers laptops mobile phones or personal digital assistants. is a high level flowchart illustrating methods and techniques for implementing dynamic scaling of storage volumes for storage client file systems according to some embodiments. Different combinations of systems and or devices may implement the various techniques discussed below.

As indicated at a storage volume may be provisioned in storage implemented as part of a network based data store in various embodiments. A network based data store may be a block based data store or other data store that a file system implemented at a storage client may utilize. A storage client may be any system program or device which may be configured to mount the storage volume in the network based data store to service as storage for a file system implemented at the storage client. In at least some embodiments a network based storage protocol e.g. internet small computer serial interface iSCSI may be utilized to mount and communicate between the storage client and the storage volume in the network based data store. Multiple storage clients may in some embodiments access the same storage volume and each may thus perform the techniques described below.

In at least some embodiments a scaling policy may be included with a request to provision the storage volume. For example a network based interface such as an API or GUI may be used to submit a provision request and define a scaling policy for the storage volume. A scaling policy may include one or more multiple conditions. For instance the scaling policy may define different thresholds or alarms as well as the resulting scaling actions if met or triggered. For example the amount of available storage capacity at the storage volume may have floor and or ceiling thresholds which if exceeded cause the amount of storage capacity in the storage volume to be increased or reduced accordingly. Similarly in another example the performance characteristics of the storage volume such as the number of input output operations per second IOPs at one or more storage devices that store portions or all of the storage volume. The scaling policy may define the action taken in response to a triggered alarm. For instance the scaling policy may define a rate or amount at which a storage volume can be increased or decreased. In some embodiments the scaling policy may indicate a number of replicas or nodes maintaining a portion or all of the storage volume to indicate whether the volume should be redistributed. In some embodiments the scaling policy may be defined in terms of costs thresholds if the network based data store is a storage service. In some embodiments the scaling policy may be described and provided to a network based data store using an API such as by entering various information into multiple different request fields and or message flags. A scaling policy may be defined using various human readable and or scripting techniques e.g. XML or JSON . In various embodiments the scaling policy may be modified replaced and or deleted. Scaling policies may be modified or removed by clients and or the network based provider in at least some embodiments.

In various embodiments the storage volume or storage volumes if monitoring across the network based data store may be monitored as indicated at . Various performance metrics traffic metrics and or any other information indicating whether a scaling event occurs may be collected and or analyzed. A control plane or other monitoring component may in some embodiments receive reports from various storage nodes or components maintaining the storage volume or interact with a storage volume e.g. a load balancer or other traffic controller . In some embodiments storage clients may also provide various performance metrics. A scaling event may be detected according to the specified scaling policy for the storage volume as indicated by the positive exit from in various embodiments. A scaling event may be triggered by the failure satisfaction of a condition of the scaling policy for the storage volume which may be discerned based on an analysis of the performance metrics. The scaling event triggered may indicate the corresponding responsive action defined in the scaling policy in various embodiments.

In some embodiments network based data store policies placement schemes or other service management operations or constraints may act as default scaling policies specified for storage volumes. For example a scaling event may be detected if the available storage capacity on a particular storage node which may be multi tenant hosting portions of multiple different storage volumes . For one or more of the storage volumes on the particular storage node the scaling event may trigger a redistribution of the storage volumes to one or more new storage locations which may result in file system changes based on the modified storage locations for a storage volume . Similarly heat management traffic controls and or other storage system concerns may trigger scaling events to redistribute or consolidate the workload for handling file system I O requests to the storage volumes.

If no scaling event is detected for a storage volume then as indicated by the negative exit from monitoring of the storage volume may continue. If a scaling event is detected for a storage volume then as indicated by the positive exit from the storage volume may be dynamically scaled. As indicated at in various embodiments the storage maintaining the storage volume may be modified to dynamically scale the storage volume according to the scaling policy. Thus portions of current storage resources and devices or new storage resources or devices e.g. disk drives or storage nodes may be added to or removed from maintaining the storage volume. In at least some embodiments the modification of the persistent storage may be performed in response to information received from the storage client. For example as discussed in more detail below with regard to the file system may determine which storage locations to remove from a storage volume in order to scale the storage volume to a smaller size. As noted above the modification of the persistent storage may be performed in accordance with the scaling policy which may for example limit the rate at which storage capacity and or storage bandwidth e.g. IOPs may be increased or decreased for a storage volume.

As indicated at the scaling event that is detected for the storage volume may be indicated to the storage client in various embodiments. The indication may be provided so that the file system at the storage client is updated to utilize the scaled storage volume. For example in some embodiments the indication may provide information or parameters to perform resize operations at the storage client for the file system such as by providing the amount of storage e.g. number of data blocks pages that is increased or decreased at the storage volume. The indication may provide a script or executable that an operating system or network based data store agent operating at a storage client may perform to update the file system. In some embodiments the indication of the scaling event may provide simple notification to the storage client of the change to the storage volume. The update to the file system may be to simply account for increased or decreased storage as the network based data store may maintain mapping information to link new reconfigured storage locations as result of the scaling event for the storage volume with those storage locations presented to the storage client prior to the scaling event shifting the burden for resize operations such as defragging files to the network based data store instead of the file system at the storage client .

File systems implemented at storage clients may respond to scaled storage volumes in the network based data store in different ways as noted earlier. For example some file systems may implement online resize functionality such that it may be sufficient to provide the storage client with an indication of the size of the scale storage node allowing the file system to be updated according to the indicated size without further assistance or interaction with the network based data store. However some file systems may interact cooperate and or coordinate with a control plane or other network based data store component that directs storage volume rescaling to update the file system at the storage client and or rescale the storage volume at the network based data store. is a high level flowchart illustrating methods and techniques for updating a file system according to a scaling event for a storage volume for the file system according to some embodiments.

Different types of scaling events such as scaling events that grow or shrink a storage volume may be handled differently at a storage client in various embodiments. As indicated at in some embodiments an indication may be received at a storage client of a scaling event that grows a storage volume implemented at a network based data store for a file system implemented at the storage client. The indication may provide the increase amount in various embodiments. For instance the indication may provide the number of additional data blocks or pages of storage space allocated to the scaled storage volume. In some embodiments mapping information such as particular logical blocks assigned to the storage volume may be indicated or such determinations may be left to reserved for the file system at the storage client.

As indicated at the file system may be updated to include additional storage capacity for the storage volume according to the indicated scaling event in various embodiments. For instance the file system may run one or more configuration operations to update file system metadata and or other file system structures to make the additional storage capacity accessible to other programs applications components or devices at the storage client which may make use of the additional storage space. Indexing structures superblocks and or inodes are some of many different file system structures that may be modified when updating the file system to utilize the scaled storage volume. Once the file system is updated to include the additional storage capacity then the updated file system may be utilized to access the scaled storage volume for subsequent file system input output I O as indicated at . For example the programs applications components or devices at the storage client which utilize the file system may now create utilize the additional storage capacity for storing additional files or adding to existing files .

For some types of scaling events the file system may play a greater role in scaling the storage volume at the network based data. For example as indicated at an indication of a scaling event that shrinks a storage volume implemented at a network based data store for a file system implemented at the storage client may be received at the storage client in some embodiments. The indication may identify the reduction in storage capacity of the storage volume e.g. a number of data blocks or pages .

The file system may be updated to reclaim storage space allocated to the storage volume in order to shrink the storage volume according to the scaling event as indicated at in various embodiments. For example one or more resize operations may be performed to update file system metadata and or other file system structures to reduce the storage capacity accessible to other programs applications components or devices at the storage client which may make use of the storage space. Indexing structures superblocks and or inodes are some of many different file system structures that may be modified when updating the file system to utilize the scaled storage volume. In a least some embodiments as part of updating the file system particular storage locations to reclaim may be identified in various embodiments in order to improve the performance of the file system for the shrunk storage volume. For example certain storage locations may be selected for reclamation in order to tightly pack data in remaining storage locations. The file system at the storage client may understand which storage locations are more advantages to reclaim better than the network based data store which may be agnostic as to the implementation of the file system at the storage client . A response may be sent to the control plane for the storage volume that identifies the storage space to reclaim in persistent storage at the network based data store as indicated at in various embodiments. In at least some embodiments the persistent storage of the storage volume may not be modified until the response is received identifying the particular storage space to reclaim e.g. identifying the particular logical data blocks or pages .

Once the file system is updated to remove the reclaimed storage space in the storage volume then the updated file system may be utilized to access the scaled storage volume for subsequent file system input output I O as indicated at . For example the programs applications components or devices at the storage client which utilize the file system may no longer utilize the reclaimed storage space or consider the storage space when storing additional files or adding to existing files .

Although the example described above for shrinking a storage volume with respect to elements through involves coordinating the reclamation of storage spaces between the file system at the storage client and the network based data store in at least some embodiments the network based data store may maintain mapping information for servicing file system I O requests so that the network based data store may select which storage spaces to reclaim i.e. performing defragmentation without performing the selection of storage spaces or defragmentation at the storage client. For example the logical block numbers presented to the file system at the storage client from the network based data store may differ from the corresponding logical block numbers in the persistent storage for the storage volume. The mapping information may allow the control plane or other component of the network based data store to optimally select storage spaces to reclaim i.e. defrag without imposing that workload on the storage client. Instead file system I O requests from the storage client received at the network based data store may be translated according to the mapping information maintained for the storage volume for servicing the request.

The methods described herein may in various embodiments be implemented by any combination of hardware and software. For example in one embodiment the methods may be implemented by a computer system e.g. a computer system as in that includes one or more processors executing program instructions stored on a computer readable storage medium coupled to the processors. The program instructions may be configured to implement the functionality described herein e.g. the functionality of various servers and other components that implement the database services systems and or storage services systems described herein . The various methods as illustrated in the figures and described herein represent example embodiments of methods. The order of any method may be changed and various elements may be added reordered combined omitted modified etc.

Computer system includes one or more processors any of which may include multiple cores which may be single or multi threaded coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface . In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA. The computer system also includes one or more network communication devices e.g. network interface for communicating with other systems and or components over a communications network e.g. Internet LAN etc. . For example a client application executing on system may use network interface to communicate with a server application executing on a single server or on a cluster of servers that implement one or more of the components of the network based services described herein. In another example an instance of a server application executing on computer system may use network interface to communicate with other instances of the server application or another server application that may be implemented on other computer systems e.g. computer systems .

In the illustrated embodiment computer system also includes one or more persistent storage devices and or one or more I O devices . In various embodiments persistent storage devices may correspond to disk drives tape drives solid state memory other mass storage devices or any other persistent storage device. Computer system or a distributed application or operating system operating thereon may store instructions and or data in persistent storage devices as desired and may retrieve the stored instruction and or data as needed. For example in some embodiments computer system may host a storage system server node and persistent storage may include the SSDs attached to that server node.

Computer system includes one or more system memories that are configured to store instructions and data accessible by processor s . In various embodiments system memories may be implemented using any suitable memory technology e.g. one or more of cache static random access memory SRAM DRAM RDRAM EDO RAM DDR 10 RAM synchronous dynamic RAM SDRAM Rambus RAM EEPROM non volatile Flash type memory or any other type of memory . System memory may contain program instructions that are executable by processor s to implement the methods and techniques described herein. In various embodiments program instructions may be encoded in platform native binary any interpreted language such as Java byte code or in any other language such as C C Java etc. or in any combination thereof. For example in the illustrated embodiment program instructions include program instructions executable to implement the functionality of journaling file system manager or one of a plurality of nodes of a network based service in different embodiments. In some embodiments program instructions may implement multiple separate clients server nodes and or other components.

In some embodiments program instructions may include instructions executable to implement an operating system not shown which may be any of various operating systems such as UNIX LINUX Solaris MacOS Windows etc. Any or all of program instructions may be provided as a computer program product or software that may include a non transitory computer readable storage medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to various embodiments. A non transitory computer readable storage medium may include any mechanism for storing information in a form e.g. software processing application readable by a machine e.g. a computer . Generally speaking a non transitory computer accessible medium may include computer readable storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM coupled to computer system via I O interface . A non transitory computer readable storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computer system as system memory or another type of memory. In other embodiments program instructions may be communicated using optical acoustical or other form of propagated signal e.g. carrier waves infrared signals digital signals etc. conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

In some embodiments system memory may include data store which may be configured as described herein. For example the information described herein as being stored by the network based storage system may be stored in data store or in another portion of system memory on one or more nodes in persistent storage and or on one or more remote storage devices at different times and in various embodiments. Similarly the information described herein as being stored may be stored in data store or in another portion of system memory on one or more nodes in persistent storage and or on one or more remote storage devices at different times and in various embodiments. In general system memory e.g. data store within system memory persistent storage and or remote storage may store data blocks replicas of data blocks metadata associated with data blocks and or their state configuration information and or any other information usable in implementing the methods and techniques described herein.

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the system including through network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems which may implement one or more nodes implementing network based services and or clients as described herein for example. In addition network interface may be configured to allow communication between computer system and various I O devices and or remote storage . Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or retrieving data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of a distributed system that includes computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of a distributed system that includes computer system through a wired or wireless connection such as over network interface . Network interface may commonly support one or more wireless networking protocols e.g. Wi Fi IEEE 802.11 or another wireless networking standard . However in various embodiments network interface may support communication via any suitable wired or wireless general data networks such as other types of Ethernet networks for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol. In various embodiments computer system may include more fewer or different components than those illustrated in e.g. displays video cards audio cards peripheral devices other network interfaces such as an ATM interface an Ethernet interface a Frame Relay interface etc. 

It is noted that any of the distributed system embodiments described herein or any of their components may be implemented as one or more network based services. For example a storage node within the storage service may present database services and or other types of data storage services that employ the distributed storage systems described herein to clients as network based services. In some embodiments a network based service may be implemented by a software and or hardware system designed to support interoperable machine to machine interaction over a network. A network based service may have an interface described in a machine processable format such as the Web Services Description Language WSDL . Other systems may interact with the network based service in a manner prescribed by the description of the network based service s interface. For example the network based service may define various operations that other systems may invoke and may define a particular application programming interface API to which other systems may be expected to conform when requesting the various operations though.

In various embodiments a network based service may be requested or invoked through the use of a message that includes parameters and or data associated with the network based services request. Such a message may be formatted according to a particular markup language such as Extensible Markup Language XML and or may be encapsulated using a protocol such as Simple Object Access Protocol SOAP . To perform a network based services request a network based services client may assemble a message including the request and convey the message to an addressable endpoint e.g. a Uniform Resource Locator URL corresponding to the network based service using an Internet based application layer transfer protocol such as Hypertext Transfer Protocol HTTP .

In some embodiments network based services may be implemented using Representational State Transfer RESTful techniques rather than message based techniques. For example a network based service implemented according to a RESTful technique may be invoked through parameters included within an HTTP method such as PUT GET or DELETE rather than encapsulated within a SOAP message.

Although the embodiments above have been described in considerable detail numerous variations and modifications may be made as would become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

