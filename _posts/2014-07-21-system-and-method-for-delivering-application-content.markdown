---

title: System and method for delivering application content
abstract: A system and method for messaging application content that includes providing an application content messaging application programming interface (API); receiving a content delivery request from an account, through the application content messaging API; retrieving device information of a destination endpoint specified in the content delivery request; based on the device information, selecting an application content format from a set of formats and obtaining application content in the application content format; and transmitting the application content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483328&OS=09483328&RS=09483328
owner: Twilio, Inc.
number: 09483328
owner_city: San Francisco
owner_country: US
publication_date: 20140721
---
This application claims the benefit of U.S. Provisional Application Ser. No. 61 856 541 filed on 19 Jul. 2013 which is incorporated in its entirety by this reference.

This invention relates generally to the application content field and more specifically to a new and useful system and method for delivering application content in the application content field.

With more content being application based there are a wider variety of application tools to accomplish similar tasks. Digital passes applications are one such type of application. Pass applications have been developed for various platforms that enable users to store tickets gift cards coupons loyalty cards store payment cards and other forms of cards and passes. These pass applications enable multiple companies and pass providers to leverage a single application in providing their content. However adoption of such digital passes is low because of the poor experience surrounding the passes. Many providers of passes require a user to install an application such that the pass can be delivered to the user. Not only is this a poor experience for the user but also this development of the application is costly for the pass providers. Further complicating matters is that the depending on the device the operating system and the installed applications each user may have different pass requirements. Thus there is a need in the application content field to create a new and useful system and method for delivering digital passes. This invention provides such a new and useful system and method.

The following description of preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

As shown in a system for delivering application content of a preferred embodiment comprises a content messaging API service no a telephony messaging service and a telephony endpoint information resource . The system functions to create a unified delivery mechanism for application content that works across a variety of destination applications. The system preferably uses destination information relating to operating system installed applications preferred application and or other signals to dynamically select and obtain application content targeted for that particular destination. The system additionally functions to manage application formatting challenges such as digital signing programmatic notifications associated with the content and communication with the installed content. The system can be applied to one or more types of application content. The application content could include digital passes home automation modules configurations digital data collections e.g. personal health monitoring systems events and calendars location people business profiles and or any suitable type of application content. In one particular variation the application content includes a cryptographic component wherein the cryptographic component may specify part or all of the content follows a particular security protocol. The application content may additionally be characterized as being installable or accessible through an outside delivery mechanism.

In one preferred embodiment the system functions to create a unified messaging solution for digital passes. Passes preferably include any digital pass that can be collected with a plurality of other digital passes into a single application or operating service. For example passes can include tickets gift cards coupons loyalty cards store payment cards ID badges invitations and other forms of cards and passes that can be used with iOS s Passbook application Android s Pass Wallet or other operating systems and or third party applications. Passes may be used by application developers for communicating a unique ID via a QR code barcode or other machine readable code. Passes may receive updates and or push notifications to be automatically or manually updated. Passes may be triggered based on location time and other suitable events and conditions. Passes may additionally be easily localized to different languages. The system abstracts away technical complexities of working with passes and simplifies the manner in which a pass can be delivered and installed on a device. Herein digital passes may be used as primary examples but any suitable type of application content may be used.

The system is preferably used by application and service providers developers to enable easy transport and management of targeted digital content to mobile devices of end users. The system additionally functions to normalize the interactions taken by a developer such that a single interface can be used to deliver passes to a wide variety of different destinations. While the resulting application content is targeted and formatted according to the destination a normalized and consistent mechanism enables a service to define application content. The system preferably uses MMS as a transport protocol for delivering passes but any suitable communication protocol can be used to deliver the application content resources such as email SMS over the top IP communication proprietary or open or any suitable communication protocol. While the system is described for use with the preferred embodiment of digital passes the system can alternatively be used for delivering other application media. For example calendar events can additionally be sent. In another example application specific content or settings can be delivered appropriately over telephony messaging.

The system is preferably integrated with a communication platform which can be a multitenant platform that allows outside applications and services to programmatically interact over communication protocols. The communication protocols available to the communication platform can include SMS MMS IP messaging PSTN calls SIP calls video calls screen sharing sessions and or other forms of communication. The communication platform preferably includes an API accessible to developer accounts on the communication platform. Accounts of the communication platform use the API to programmatically interact with API resources. The API resources can be used to reference and query data and or initiate or augment actions of the communication platform. The platform API is preferably a RESTful API but may alternatively be any suitable API such as SOAP. The API preferably works according to an HTTP request and response model. HTTP requests or any suitable request communication to the communication platform preferably observe the principles of a RESTful design. RESTful is understood in this document to describe a Representational State Transfer architecture as is known in the art. The communication platform can additionally include a capability to process telephony applications and as such the delivery of digital passes can be initiated and directed through directives of the communication platform. In a preferred implementation the communication platform is substantially similar to the one described in U.S. Pat. No. 8 306 021 issued 6 Nov. 2012 which is hereby incorporated in its entirety by this reference.

The content API service functions to enable programmatic interaction by developer accounts. The developer accounts can deliver passes interact with passes and receive information about the state of the passes. The content messaging API is preferably a subset of the platform API of the communication platform but may alternatively be a distinct interface for application content interactions. An account authentication engine preferably allows accounts sub accounts and or other entities to make requests. The accounts are preferably controlled managed and associated with outside applications and services. The outside application services preferably use the system to facilitate the delivery of application content. The application messaging API can include several resources. An exemplary API call can include an HTTP POST to initiate a new action or modify a resource and an HTTP GET to read data or query information about a resource. The API may alternatively use alternative forms of an interface. In one preferred implementation for digital passes the content messaging API no can include a pass resource that can be used to transmit a pass to at least one destination. A HTTP POST to the pass resource initiates the transmission of a specified pass to a specified destination. Additionally or alternatively multiple destinations may be specified in which case the application content is targeted individually to the specified destinations. An HTTP GET to the pass resource can return a list of the delivered passes. Each transmitted pass is preferably assigned a passID within the communication platform. A transmitted pass has a passID resource that can be used to access specific passes. Since passes are often delivered to a single user. A passID corresponds to a particular instance of a pass transmitted to one user device. The passID resource can be used to query information about a particular pass instance. Pass instance information can include delivery status was the message received installation status was the pass installed by the user the type of pass and other suitable information. For example a developer or application can send a HTTP GET message to a passID resource of pass 1234 and a json response can be returned that specifies if the pass was delivered if the pass was installed and if the pass is an iOS Android or static pass. A developer can update the pass by submitting an HTTP POST message to pass 12434 and in response a push notification is delivered to the device to update the pass. In one variation a message resource can be overloaded and be used for SMS MMS passes and messaging of other media types. The handling of the media can be automatically determined based on the content type specified through a request.

The telephony messaging service functions to transmit the application content media to the destination. The telephony messaging service preferably uses MMS as a transport communication channel. MMS can be used to send application content media in the native file format. In the case of digital passes passbook passes on iOS can be transmitted as data objects of the mime type pkpass. Passes delivered to Android would be transmitted as Android appropriate data objects. Most devices are capable of MMS communication and as such MMS provides a suitably accessible channel of communication. Even devices that are not considered smart phones can have basic MMS capabilities. If MMS isn t available SMS communication may be available. Other forms of communication can include email over the top IP communication or any suitable form of communication. Static application content can be transmitted to non smart devices either as images web pages or in another basic format. Additionally many device operating systems with integrated pass support allow passes to be opened and installed from the messaging application. As shown in a Passbook package is rendered with a media preview. Other types of application content can similarly be communicated opened and directed to a relevant application. Upon receiving user selection e.g. tapping the preview the relevant application is opened and the pass is installed in the application. SMS can alternatively be used. Instead of delivering the pass media a link is delivered which when clicked directs a user to a webpage with pass installation functionality a web app version of a pass and or a static version of the pass. An IP based messaging communication can alternatively or additionally be used. IP based messaging can target particular applications. Social network messaging systems and internet chat applications are examples of applications that use IP based messaging communication.

The telephony endpoint information resource functions to provide information pertaining to the type of device which can direct the mode of pass delivery. Format and functionality of a pass can vary greatly between operating systems and or applications. The telephony endpoint information resource enables the right type of pass to be delivered to a specific device. A repository or a database of the telephony endpoint information resource stores communication endpoint data. A communication endpoint preferably has a record stored in a database or distributed through several database tables. An endpoint record preferably includes information pertaining to the type of pass supported by the device. The endpoint record can include the device type the operating system version and or the installed applications e.g. what supported pass applications are installed . The endpoint record can additionally store information such as a unique identifier of the telephony endpoint the direct inbound address e.g. the phone number or short code carrier origin properties a cleanliness quality score capability properties e.g. SMS MMS Fax etc. status e.g. mobile landline client application type toll free etc. screen resolution and display capabilities language service plan e.g. do they get free SMS MMS messages activity patterns e.g. when is the communication who does the endpoint communicate with what does the endpoint communicate etc. and or other suitable properties of a telephony endpoint. Origin properties can include NPs e.g. area code NXX e.g. three digit vanity digits of a number ISO country codes region properties and or any suitable origin properties. The records may include various sets of information depending on the information that is collected. Some destination endpoints may not have sufficient data in which case a default type of pass may be delivered. In some situations the type of pass may be used to obtain information about the device which can later be used to deliver a more appropriate form of the pass. The endpoint records are preferably populated by retrieving and or collecting information about various endpoints. The endpoint record can use various components and processes when collecting and organizing information as in U.S. patent application Ser. No. 14 309 334 filed 19 Jun. 2014 which hereby incorporated in its entirety by this reference. The information can be populated through use of the communication platform but some or all the information can be populated from outside sources.

The system can additionally include an application content generator which functions to retrieve format or relay targeted application content. The media of the application content is retrieved and may be processed into a proper format. The application content generator preferably operates in cooperation with the content messaging API no to translate requests into application content that is preferably executable actionable on a targeted destination endpoint. The application content generator can be a service running on a server within the communication platform. The application content generator can obtain media from outside resources which can be hosted on an internet server of the developer or any suitable party. The application content generator may alternatively generate media in response to specified directions.

In one implementation a developer specifies a pass by listing a URI at which the pass resource can be obtained. The application content generator can be configured to fetch the resource from the URI and depending on the file content type preferably determined by a mime type generate the appropriate media format. In one variation the application content generator is a headless browser that virtually simulates a client browser. The application content generator can additionally be used for media messaging where the application content generator converts a URI to an image video pass calendar event or other media format depending on the mime type. The application content generator can include a module to transform and package content configuration files into a deliverable application content packages. For example a set of media resources and a JSON file describing a pass can be packaged into a data object with a pass file type. In an alternative implementation a developer or more specifically a service or application of a developer may provide a set of parameters that define intended content of the application content. The parameters used to specify a packaged application content file one that can be transmitted can be described as the application content configuration.

The application content generator preferably translates a normalized and standardized content specification into one or more targeted application content types. For example the targeted application content types may be two similar applications that users commonly use. As another example the targeted content types can include a first application content type recognized by a first operating system and a second application content type recognized by a second operating system. In some variations resource identifiers are included in the application content configuration. The application content generator may replace original resource identifiers with proxy system managed resource identifiers. The proxy resource identifiers preferably monitor access and redirect requests to the original resource identifier. By setting targeted application content to direct communications through the system the system can provide reporting and notifications. For example such proxy resource identifiers can be used to notify a user if application content was installed or when the user took a particular action.

The application content generator may use one or more various signing mechanisms. Signing of application content may be used in some application types to verify the validity of the content. In one variation the outside account systems generate and provide signed application content either beforehand if it s a generic application content for multiple destinations or at the time of making a request. For example when wanting to send a digital pass an application can send a request to the system and the request may include a signed digital pass for a first application and a signed digital pass for a second application. The system decides if the first or second digital pass should be used. The application content generator may include a storage solution for previously signed application content. As an additional or alternative mechanism the application content generator may include a credential manager where cryptographic tokens keys or credentials can be stored such that the system can sign application content on behalf of an account. In another variation the system may use one or more cryptographic credentials controlled within the system. In this variation an account holder may never need to establish credentials with outside channels because the system will sign on behalf of them. In yet another variation the application content generator may use a signing callback to delegate the signing action to a resource of the account s choosing. For example when making a request to deliver a pass the request will include all the normalized parameters as well as a signing callback URI. The system will translate the normalized parameters into a targeted format and then send this object to the specified signing callback URI. The server or system located at the signing callback URI preferably performs the simple process of signing the targeted application content. This variation functions to allow the credentials and signing to remain as a responsibility of the account holder but translation and delivery is managed by the system.

As shown in a method for delivering application content of a preferred embodiment can include providing an application content messaging API S receiving a content delivery request through the application content messaging API S retrieving device information of a destination specified in the content delivery request S selecting the application content format S and transmitting the application content. The method functions to create a unified messaging solution for application content. The method enables the process of delivering application content to be simplified and offered as a convenient service to outside servers. In many cases an individual application may not have sufficient reach or resources to accomplish such a procedure. For example the method may have at least partial dependence on the capability of collecting information for a destination. The method preferably uses social aware heuristics or rules.

The method may have particular application in the delivery of digital passes across a variety of device and or target applications as shown in . The system can alternatively be used for delivering other application media. For example calendar events home automation configuration modules personal data modules and or other inter application content can additionally be sent and customized based on the device. Various calendar applications or event applications may use a format and set of features when representing an event. It can be challenging to provide calendar content in the format that matches the system used by a user. The method can address this issue by dynamically translating the intent of an event communication into an appropriate format. In a similar manner home automation or connected device modules may allow central applications to control various devices and systems. Some applications may function to consolidate the user experience and data in a single application or system. The method can address the similar issues of communicating such application content to a destination that matches the expected format. In another example application specific content or settings can be delivered appropriately over telephony messaging. As shown in the method preferably uses a messaging application such as an SMS MMS app a chat app social networking app email app or other suitable communication app as an intermediary application leveraged in the transport and installation of the application content. Further the application content system can be used for subsequent interactions such as notifications updates information and other suitable interactions. The method is preferably implemented by a system substantially similar to the one described above but any suitable system may alternatively be used.

In the implementation directed at delivering digital passes the method can include providing a pass messaging API e.g. S receiving a pass delivery request through the pass messaging API e.g. S retrieving device information of a destination specified in the pass delivery request e.g. S selecting the pass format according to the device information e.g. S and sending the pass e.g. S . Passes preferably include any digital pass that can be collected with a plurality of different digital passes in a single application or operating service. For example passes can include tickets gift cards coupons loyalty cards store payment cards ID badges invitations and other forms of cards and passes that can be used with iOS s Passbook application Android s Pass Wallet or other operating systems and or third party applications. The method abstracts away technical complexities and simplifies the manner in which a pass can be delivered and installed on a device. The method is preferably used by application and service providers developers to enable easy transport and management of passes of end users. The method uses MMS as a transport protocol for delivering passes but any suitable communication protocol can be used to deliver the pass media resource and in some cases may be dynamically selected based on the conditions of the destination device. The method additionally functions to normalize the interactions taken by a developer such that a single interface can be used to deliver passes to a wide variety of device types. Updates and changes to the underlying targeted formats may not impact the use of the normalized interfaces used by account holders. Further the method can simplify the maintenance process of maintaining multiple applications for different applications.

Block S which includes providing an application content messaging API functions to facilitate programmatic interaction with a service or platform. The application content messaging API is preferably provided by a multitenant communication platform as described above. The communication platform can provide any suitable array of services and functionality including only the content delivery and interaction variations described herein. The application content messaging API may be integrated with a messaging API that enables delivery of text or media. The content delivery features of the API can be automatically invoked through detecting that the media to be delivered is an application content media type. The application content messaging API is preferably a RESTful API but may alternatively be any suitable API such as SOAP. The API preferably works according to an HTTP request and response model. HTTP requests or any suitable request communication to the communication platform preferably observe the principles of a RESTful design. RESTful is understood in this document to describe a Representational State Transfer architecture as is known in the art. The application content messaging API can include several resources. An exemplary API call can include an HTTP POST to initiate a new action or modify a resource and an HTTP GET to read data or query information about a resource. The API may alternatively use alternative forms of an interface. In one preferred implementation the application content messaging API can include a pass API resource that can be used to transmit a pass to at least one destination. An HTTP POST to the pass resource initiates the transmission of a specified pass to a specified destination. An HTTP GET to the pass resource can return a list of the delivered passes. Each transmitted pass is preferably assigned a passID within the communication platform. A transmitted pass has a passID resource that can be used to access specific passes. Since passes are often delivered to a single user. A passID corresponds to a particular instance of a pass transmitted to one user device. The passID resource can be used to query information about a particular pass instance. Pass instance information can include delivery status was the message received installation status was the pass installed by the user the type of pass and other suitable information. For example a developer or application can send a HTTP GET message to a passID resource of pass 1234 and a json response can be returned that specifies if the pass was delivered if the pass was installed and if the pass is an iOS Android or static pass. A developer can update the pass by submitting an HTTP POST message to pass 12434 and in response a push notification is delivered to the device to update the pass. In one variation a message resource can be overloaded and be used for SMS MMS passes and messaging of other media types. The handling of the media can be automatically determined based on the content type specified through a request. The application content messaging API service can include a pass credential database that stores developer credentials of an account that can be used in signing passes. The provided application content messaging API can alternatively use any suitable interface.

Alternatively or additionally the system may include providing a set of application content directives. The application content directives may be programming scripting primitives functions or other programming mechanisms that can be integrated into programmatic actions. For example a set of telephony instructions may be provided that enable the specification and triggering of application content delivery. Alternatively a graphical user interface may allow for manual control of the delivery of application content. For example a user interface may enable an account holder to enter application content parameters enter one or more destination endpoints and then send the request.

Block S which includes receiving a content delivery request through the application content messaging API functions to initialize the delivery of application content to a destination endpoint. The content delivery request can be received as a HTTP API request from an application service of the account. The content delivery request is preferably authenticated through a suitable mechanism as being made on behalf of an account. Multiple accounts make multiple independent content delivery requests. The API request includes at least one destination and an application content configuration. The content delivery request can alternatively be initialized from an application instruction. For example a telephony application being processed in response to a voice call SMS message or MMS message. For example a telephony application instruction called pass could be used to specify a destination and a digital pass configuration for the application content. The method support one or types of application content. In one preferred implementation the application content is a digital pass and will include pass configuration. Other types of application content may additionally or alternatively include event content personal health content home automation content connected device modules or other suitable forms of application content. The destination can be a communication endpoint such as a telephone number a SIP address application account identifier and or any suitable identifier of a destination. The application content configuration can be a parameter that references the content configuration resources to be delivered as shown in the exemplary pass delivery request in .

In the case of a digital pass a pass is generally configured through a data object or collection of data objects defining properties of the pass as well as media resources used in rendering the pass such as images audio files video files business logic application code or other suitable resources. The pass configuration resources can specify a web service parameter that determines the web service used in pushing updates to the pass. The pass configuration is preferably specified by a URI of the pass package files. In a preferred implementation the pass configuration resources are stored on a server of the requesting account holder. Alternatively the pass configuration resources can be uploaded to the communication platform.

Application content configuration can be a normalized configuration or a destination formatted configuration. A normalized configuration is a generic normalized format used within the communication platform for defining configuration of the application content. The standardized syntax can be generalized to apply to a variety of application formats. The normalized configuration could be an agreed upon standard a customized standard within the platform ecosystem or tied to a destination format of an outside ecosystem e.g. one of iOS or Android . An exemplary benefit of a normalized configuration is that all accounts conform to one format and the configuration can be reliably translated to other destination formats. Destination formats are preferably the media formats that can be natively interpreted by a device and or application. The destination format for pass configuration may be a Passbook package or files for iOS a Google Wallet object or configuration files a Samsung Wallet pass object or configuration files or any suitable data object package or configuration file s for an operating system or specific application. As shown in an iOS pass configuration is a package that contains a pass.json file that defines parameters of the pass and the image assets such as the logo and icons. As described below the method can automatically transform passes between destination formats and as a result developers only need to configure a single pass resource. One potential benefit of a destination format is that a destination format can leverage the full functionality of at least one destination. The features of the passes may not be fully supported across different operating systems applications. If one destination format supports a particular feature then using that destination format can leverage that feature. When transforming the pass to other formats that feature may not be supported on other devices but the developer can at least get support in one of the destinations.

The application configuration files referenced provided by an account are preferably kept in a raw format and are not cryptographically compressed into a package format until prior to delivery. The raw format functions to enable the platform to translate between application content formats. The raw format configuration files are preferably packaged using the certificates obtained in block S and as shown in . The platform can additionally or alternatively be configured to support application configurations that were pre packaged. For example a pass configuration could be a signed and packaged application content object. In one variation the method can selectively handle compressed pass packages by only providing delivery to that specific type of destination. Additionally or alternatively pass configurations can be specified for each destination by an account holder. The application content messaging API can provide a mechanism to specify which packaged application content is targeted at which specific destination formats. For example the pass delivery request may specify a URI of a Passbook package for iOS devices a URI of a pass wallet package for Android wallet and a URI of an image resource for non smart phones. Since the requesting account may not know which application content format is required all options can be provided. If application content is not specified for a specific device category then one of the application content configurations can be used as a default and converted into a suitable format for the device category. By specifying a specific application content resource a developer can leverage various features and attributes of a specific pass application. Targeting destination formats can additionally enable developers to cryptographically compress application content into a package.

In some cases the application content format will include a cryptographically signed application content format. A cryptographically signed application content format will preferably require the use of a key token or other credentials to sign the application content. The credentials may be used within the application to authenticate the authenticity of the application content e.g. should it be installed is it trusted but may additionally or alternatively be used to embed private information or to enable other features e.g. push notifications . Prior to receiving a content delivery request the method can include receiving the content credentials of the account S. The content credentials are any of the certificates keys or account identifying information of the account that is used when creating an application content object file. Application content package transformation described below can include cryptographically compressing a set of files into a package. An outside party frequently issues the certificate. The outside party is often the operator of the application such as Apple for iOS devices or Google Samsung for Android devices. The certificate will be used in generating the application content packages. For example a first account will submit the Apple developer certificate and the Google developer certificate to the communication platform. Those certificates are stored and are used to cryptographically compress pass configuration files into a pass package.

Block S which includes retrieving device information of a destination specified in the content delivery request functions to retrieve data on the device environment of the intended application content. The device information is preferably retrieved from a telephony endpoint information resource as described above. The telephony endpoint information resource preferably maintains a database of information about a plurality of endpoints. The information is preferably obtained from outside sources and through characterizing the endpoints within the communication platform. The device information preferably includes operating system information version data and can additionally include installed application information capability listing language and other information. The application information may include what applications are known to be available but may additionally include preference information related to installed applications. For example one user may have a first and second application that use different application content formats but the user more frequently uses the first application. Preferably the method will result in the transmission of application content in a format recognized by the preferred application. At least the information usable in selecting the right type of destination format of a pass is retrieved.

Use of the method can additionally facilitate the population and vetting of destination endpoint information. In the situations where interactions with the application content can be confirmed the destination device may be confirmed to support that application content format through detection of related interactions. For example when proxying a subset of content with a redirection tracking link the communication platform can confirm when an application content item is installed by a particular destination endpoint. Similarly when a push notification update or other requests are sent to the application content a response can indicate that the application content was successfully installed and that the destination endpoint at least supports that application content format.

Block S which includes selecting an application content format according to the device information functions to determine the destination format of application content. The device information is used in selecting the type of application content to be delivered. In a first variation there can be distinct types of destination formats that are mapped to particular device information. For example there may be an iOS type an Android type a default smart phone type and a basic type. In the variation of pass content the iOS type can correspond to a Passbook pass the Android type can correspond to a Pass Wallet type the default smart phone type can correspond to a web application type and the basic type can correspond to a static image version of the pass. In some cases there may be two possible types supported by a device such as when a third party pass application and a pass application of the operating system exist on the same device. In this variation the developer can set preference the preference of the user can be determined based on usage of the applications or the system can default to one of the options. Historical usage of previous delivered passes can additionally be used in selecting between multiple options. For example if a user has never installed a Passbook delivered to a given endpoint then a static pass can be used in subsequent pass transmissions. Additionally the delivery mechanism may be dynamically selected. Preferably MMS is used as a communication channel but if MMS is not supported on the device then an SMS message with a link to a pass installation web page a pass web app or a static image of a pass can be delivered. Similarly if a pass application installed on the device includes an API for communicating the pass directly to the app then that communication channel could be used.

Selecting the application content format can additionally include obtaining application content in the application content format S which can function to transform the application content resources from one format to a second format. The process of obtaining the application content can include requesting and receiving generating translating and or any suitable transformation of the original content request to a data object or package that can be delivered to a destination endpoint.

If a destination application content package one that matches the selected application content format is not provided by a developer one is preferably created appropriately for the destination. The transformation can be from a generic format to a destination format in the situation where a generic format is the specified configuration. The transformation can alternatively be from a first destination format to a second destination format. In the variation of transforming from a generic format to a destination format the information from the generic format is mapped to a template of the destination format. The generic format configuration is preferably a generalized set of parameters and resources that can map to several different types of destination formats. A normalized configuration can include a format version a content type identifier a serial number a user developer team identifier a web service URL authentication tokens location markers a barcode along with caption format encoding and the like company name description text logo text foreground colors background colors content type header text and labels various text fields and values localization of the text fields media resources images video audio etc. and or any suitable parameters and assets. These parameters can be mapped to corresponding parameters of a template of an application content of the destination format. For example a title parameter is mapped to a title parameter of a Passbook the title parameter of a Pass Wallet the title of the webpage in a web app and the header text in an image of a static pass. Two different destination formats may not be aesthetically or functionally identical when rendered in the application but they preferably adhere closely to the specifications of the generic format. When transforming from a first destination to a second destination the parameters of the first original destination format is preferably mapped to parameters of the second destination. The mapping can be stored for each type of supported transformation. Passes will often share common attributes such as titles descriptions logos colors and the like and these shared attributes can be mapped between two formats. This type of format transformation is preferably performed when the account specified the pass in the native format of some device. For example a Passbook pass configuration may be specified by a developer. If the destination device is an Android device then the Passbook can be transformed into a Pass Wallet or other suitable pass format.

In one variation the pass configuration will specify a web service URI push notification parameters or other network communication parameters to enable remote updates of the pass once the pass is installed. During transformation the platform preferably replaces the web service URI of the account holder with a web service URI of the communication platform. Accordingly the method includes proxying at least a subset of content in the application content object wherein the content is proxied by platform controlled resources. The proxied platform controlled resources are then substituted or otherwise used in a generated application content package. In other words obtaining the application content includes generating the application content according to the directions of the application content configuration but wherein the application content configuration is modified to include the substitution of the platform controlled resources e.g. the media and or references to media . This functions to modify the pass to communicate through the communication platform. As will be described below this can enable tracking of application content installation as well as enabling a unified interface for updating application content on multiple devices. The web service URI of the account holder can be saved and used later. Preferably URI references are replaced with tracking URIs that enable the platform to detect when the resource is accessed and what the data and parameters passed in. Functionally the proxy URI reference redirects to the original URI reference so that normal operation can continue. For example the communication platform can act as a web service proxy between the application content and the web service of the account holder as shown in . The variation further comprises monitoring the platform controlled resources and can include notifying an account during access of the platform controlled resource. Notification of an account may include modifying a log file to which the account has access updating a persistent network connection e.g. pushing information over a websocket or the like submitting an application layer communication to a specified callback resource identifier destination of the account and notifying in any suitable manner. The callback resource identifier preferably receives a GET or POST HTTP S communication with data that embeds information relating to the event. The application layer communication can include HTTP SPDY or any suitable application layer protocol. For example the communication platform may contact a notification callback URI of the account when particular events happen. The notifications can be for when the application content is installed when the application content is used and in response to other suitable events.

The method can additionally include detecting the application content configuration format and selectively applying a transformation which functions to enable a content delivery request to specify application content in any allowable format and the application content will automatically be translated into a suitable format. Destination formats can additionally be cached so that previously transformed application content can be reused within the system. The transformation preferably uses the raw application content configuration files provided or referenced by the request. Additionally or alternatively the pass configuration files can be transformed into the appropriate file type depending on the destination. In some cases a certificate provided by the account is used to cryptographically compress the pass file assets into an appropriate package. Various approaches may be used to cryptographically sign the content.

In a first variation content credentials e.g. cryptographic tokens and keys are stored and managed within the communication platform as described in block S and shown in . The appropriate content credentials can be accessed and used in signing the application content with the cryptographic token of the account. Signing can additionally include packaging the application content into a signed package. Different application content types may have varying signing requirements.

In a second variation obtaining signed application content can include receiving and storing a cryptographically signed application content object of an account and transmitting the stored cryptographically signed application content object if the application content format is the cryptographically signed application content format as shown in . In this variation the account managers will be responsible for signing and forming the application content. An account holder will preferably upload or provide multiple application content types. The communication platform will select which one should be delivered. The signed application content packages may be uploaded or referenced through a URI.

In yet another variation the method can include receiving a signature callback of an account and transmitting a signature request to the signature callback when the application format is a cryptographically signed application content format as shown in . This method functions to enable the communication platform to select the correct format perform the base translation of content intent to a raw destination content format but then allow signing of the content package to the account manager. The raw destination content is preferably communicated to a signing callback URI specified by an account. The signature request preferably includes unsigned application content and a cryptographically signed application content object is received in a response to the signing request. The resource at the signing callback URI can complete the signing process and then return a signed application content package. Content credentials do not need to be shared with the communication platform and can be stored within the system.

In yet another variation the method can include generating platform credentials and using those self managed credentials in signing on behalf of an account as shown in . In this variation an account holder may never need to establish credentials with outside channels because the system will sign on behalf of them.

Block S which includes transmitting the application content functions to send the media in a selected format. The application content is preferably communicated as an MMS message with a mime type of the file format of the application content package. The communication channel can alternatively be SMS email IP messaging or an application specific communication channel. At the device the application content is received in a MMS message. The device preferably renders the application content in a media item preview within the messaging application. In the digital pass variation the pass is shown as a thumbnail preview image of the pass as shown in . Upon receiving user selection e.g. tapping the preview the relevant application is opened and the application content is installed in the application as shown in . For example selecting or tapping a pass in a messaging application will redirect to an appropriate pass application and the pass will be added to the application. SMS can alternatively be used. Instead of delivering the application content media a link is delivered which when clicked opens a webpage to the application content installation page or a web app version of the content. Alternatively the link can be to a static image of the application content. For example a pass may be shown as a webpage displaying the barcode of the pass. Alternatively an IP based messaging communication can alternatively or additionally be used. IP based messaging can target particular applications. Social network messaging systems and internet chat applications are examples of applications that use IP based messaging communication. In some instances an application may natively support programmatic pushing or uploading of the pass to the user s application. For example pass applications may integrate with push notifications so that once installed push updates can be communicated to the device. Similarly a pass may be updated to a new state a new version or expired or changed in any suitable manner.

In addition to providing a unified interface to delivering passes and or application content the method can additionally provide further application content interaction and information. As a first additional aspect the method can include tracking of content status S which functions to provide programmatic access to the state of a delivered pass. Information about a delivered pass is preferably accessible through the API. The information can include delivery status was the message received installation status was the pass installed by the user the type of pass what destination format was used usage status was the pass used and or when and other suitable types of information. Delivery status is preferably indicative of the MMS delivery status. The installation status can be tracked by the communication platform when the application content contacts the web service of the communication platform or accesses other resources controlled by the communication platform. Proxy resources and URIs may have been used in the application content. Such proxy resources can be monitored and used to measure and report on activity. The type of application content is a description of the format of application content package delivered to a device. Boolean indicators of feature capabilities can additionally be provided which can be based on the destination format and the manner in which the pass configuration was provided by the account holder. As an additional aspect the content API resources can be used in directing further interaction with the application content. Each application may provide different mechanisms for interacting with application content. In many cases the applications provide a mechanism for a developer to update application content through a web service. During the transformation of the application content configuration the communication platform can reconfigure the application content to communicate with the communication platform in place of the web service of the account.

In a first variation the developer uses an API interface of the communication platform to interact with application content updates. The API interface can allow a developer to specify a push notification to an application update or modify application content delete or invalidate an application content item increment variables of the application content or make any suitable change to the application content supported by the application. These actions are preferably abstracted so that a single interface can enable these actions across different applications. The communication platform translates the content interaction requests made by an account holder into appropriately formatted network communication to the application or application content. If the destination application of a particular content item does not support an update feature an appropriate error message or backup action may be issued. In a second variation the communication platform acts as a content update proxy and relays communications between the application content and a web service of the account holder. The communication platform can be substantially transparent to the web service and the account holder can maintain full control of the application content as if the communication platform was not used. In another variation a content delivery request can specify that the communication platform should not be used as an intermediary web service. The application content can be simply installed on the application and then function as a normal pass.

The use of an API interface can additionally provide group or batch interaction capabilities. Since all passes can have information stored in the scope of an account an account can make group calls to a subset of application content in parallel. For example pass updates can be made to multiple passes by specifying a descriptor that relates to a subset of the passes.

The system and method of the preferred embodiment and variations thereof can be embodied and or implemented at least in part as a machine configured to receive a computer readable medium storing computer readable instructions. The instructions are preferably executed by computer executable components preferably integrated with the pass delivery service of the communication platform. The computer readable medium can be stored on any suitable computer readable media such as RAMs ROMs flash memory EEPROMs optical devices CD or DVD hard drives floppy drives or any suitable device. The computer executable component is preferably a general or application specific processor but any suitable dedicated hardware or hardware firmware combination device can alternatively or additionally execute the instructions.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

