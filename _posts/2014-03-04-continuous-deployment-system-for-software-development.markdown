---

title: Continuous deployment system for software development
abstract: Examples of a continuous deployment system are provided that manage and track releases of software code, where some or all of the steps between check-in and deployment to production can be automated. Such systems can reduce the amount of developer effort needed to deploy a package, as developers may not have to be responsible for scheduling package builds, clicking deployment buttons, or manually running tests. The system can take care of all or some of that work.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454351&OS=09454351&RS=09454351
owner: Amazon Technologies, Inc.
number: 09454351
owner_city: Seattle
owner_country: US
publication_date: 20140304
---
This application is a continuation of U.S. patent application Ser. No. 13 245 539 filed Sep. 26 2011 entitled Continuous Deployment System for Software Development which is hereby incorporated by reference herein in its entirety.

More and more companies are now incorporating computers and software services into many facets of their business. These companies are using software to provide more and more complex services. The complexity of these services has in turn increased the functionality required from the software that provides these services. Thus software projects have become more complex and software development of large applications is typically a lengthy process requiring multiple developers many months to complete development. The increased complexity in the software development process has made the task of administering and managing software challenging.

During software development the developers make many changes to the source code. Typically changes are made to the source code in batches with each batch of changes deployed in a new revision of the code base. Each revision can be separated from the previous revision by several weeks. As a result changes made to fix software bugs that have been found may not be tested in a production environment until weeks later when the problem is no longer fresh on the developer s mind. In addition such changes are usually made with many other changes making diagnosing problems in the production environment more difficult. Increasing complexity of software may make bugs and errors in source code more common and harder to diagnose. Thus an efficient and streamlined process for deployment of changes to source code is needed.

Embodiments of a continuous deployment system CDS are described below. In one embodiment a continuous deployment system is a system that manages and tracks releases of software code where the steps between check in and deployment to production are preferably automated. This can reduce the amount of developer effort needed to deploy a package as developers do not have to be responsible for scheduling package builds clicking deployment buttons or running tests. The automation can take care of all or some of that work.

Allowing code to be deployed in an automated fashion allows latency to be reduced from check in of code to release of the code to production. Changes can go out to production as soon as they are ready. For example delays due to waiting for people to authorize or initiate code release can be reduced or eliminated. As a result customers can get faster releases of software.

Another potential benefit of some continuous deployment systems is that a fast cycle time for getting changes to production allows bug fixes or patches to quickly get into production. Under non continuous deployment systems typically a special patch version would be created to leave out changes that aren t yet ready for production however the continuous deployment system allows bug fixes to be treated like any other code change allowing the bug fix to be checked in and to go into production.

As changes can go out more frequently deployments usually can be smaller containing a small number of changes. Thus debugging can be easier as there are fewer potential causes of bugs. Further since changes can go out more frequently and in smaller batches if bugs are introduced failure of the code will happen faster and bugs can be caught sooner when the code is still fresh in the developers mind. This can make it easier to find and fix bugs.

Further in one embodiment the continuous deployment system allows a release process to be defined and applied to all or selected future code changes. The same tests and process can be applied to each code building consistency in the process. For example a test can be written that checks that a particular bug has been fired and that test can be run for all subsequent code changes. By re running the test on new code changes the continuous deployment system can check that those code changes do not reintroduce the same bug. Further improvements can be added to the process to allow best practices to be implemented allowing the process to continually evolve and improve.

In one embodiment the continuous deployment system allows a user to define a release process that can be visualized and automated. The continuous deployment system can represent the release as a pipeline to the user with the pipeline having multiple stages and promotion configurations defining how promotions occur between stages. The promotion configurations can define requirements or instructions for passing to the next stage e.g. build to an application deploy to a first environment promote from Alpha to Development stage or the like . The continuous deployment system can allow users to set up automated test workflows to verify and approve the changes at each stage. Then the promotion configuration moves the latest approved changes to the next stage in the pipeline.

Various aspects of the disclosure will now be described with regard to certain examples and embodiments which are intended to illustrate but not to limit the disclosure. Nothing in this disclosure is intended to imply that any particular feature or characteristic of the disclosed embodiments is essential. The scope of protection of certain inventions is defined by the claims.

The continuous deployment system can include any system capable of receiving source code changes and deploying those code changes onto deployment environments. The continuous deployment system can include a CDS interface which can include one or more servers e.g. a web server configured to receive and respond to requests from the developer systems . The continuous deployment system can also include storage nodes for storing source code related data e.g. code changes code versions versioning data change history code backups code metadata developer identifications continuous deployment system events or the like . Other services may also be provided by the continuous deployment system . The storage nodes may comprise any type of persistent data storage for example non volatile memory devices such as e.g. hard disk drives optical disk drives etc.

Developers using their computing systems can develop applications and submit source code for those applications to the continuous deployment system which can track and monitor such source code. The developer computing systems can include wireless mobile devices such as smart phones PDAs tablets or the like desktops and laptops to name a few. Changes to the source code can be received by the continuous deployment system which can then generate packages to be applied to an existing code base deployed on deployment environments .

Typically a deployment environment can include one or more computing systems capable of running the software packages built from the source code. In one embodiment the deployment environment can include one or more computing nodes configured to emulate computer hardware of the production environment. For example the continuous deployment system can use one or more computing nodes or testing modules that can execute and test software programs. The computing nodes or testing modules may comprise one or more physical computing systems and or one or more virtual machines instances that are hosted on one or more physical computing systems. For example a host computing system may provide multiple virtual machines instances and include a virtual machine VM manager to manage those virtual machines e.g. a hypervisor or other virtual machine monitor . In one embodiment the testing modules can be internal or external systems capable of running one or more tests on the software packages operating on the deployment environment . In some embodiments the deployment environment may only partially simulate the production environment for example if only limited testing is being conducted or if simulating the production environment is not otherwise needed.

A CDS manager may monitor track and or manage the processes of the continuous deployment system . The CDS manager can be in communication with other components of the continuous deployment system via a network . In the example illustrated in the CDS manager can access the CDS interface storage nodes and deployment environments via the network . The network may include multiple networking devices not shown such as e.g. switches edge routers core routers etc. The network may but need not be a different network than the network shown in .

In some embodiments the continuous deployment system and its components are executed or embodied by one or more physical or virtual computing systems. For example in some embodiments a server computing system that has components including a central processing unit CPU input output I O components storage and memory may be used to execute some or all of the components of the continuous deployment system such as e.g. the CDS manager . The I O components include a display a network connection to the network a computer readable media drive and other I O devices e.g. a keyboard a mouse speakers etc. . An embodiment of the continuous deployment system can be stored as one or more executable program modules in the memory of the server and the continuous deployment system can interact with computing nodes e.g. physical computing systems and or virtual machine instances over the network . In one embodiment the continuous deployment system may have additional components or fewer components than described above. For example the continuous deployment system may be built on top of existing software development or testing systems and designed to coordinate the actions of the existing systems.

At event 1 source code changes are submitted to the continuous deployment system . The continuous deployment system can check in the source code changes to a package and or release branch . The continuous deployment system can receive the source code changes on an interface such as an application interface e.g. a web server an Application Programming Interface API a user interface or other type of interface. The source code changes can be saved onto a storage node for the source code.

At event 2 packages are built into an application. In one embodiment the application is a revision controlled dependency closure that includes all the other software packages depended upon by the modified source code to function. Generally a revision is a set of changes. Software packages having changes are built into an application to create an application revision. For example there could be revisions 1.0 and 1.1 of an application of the same set of source code with the revisions being different from each other because of changes implemented in the source code. An application revision deployed to an environment creates an environment revision in some embodiments.

Specific versions of the other software packages can be included in the application to allow more consistent behavior of the software. For example if modified package A has dependencies for particular versions of package B and package C then those versions of package B and C can be included into the application.

At event 3 the application is deployed to a CDS stage referred to as Alpha in . The CDS stage can include one or more deployment environments such as a testing environment that simulates the operation of a production environment. There may be other packages that were deployed separately to the CDS stage that together with the deployed application constitutes an environment revision in the example shown in . For example the other packages may have been deployed by another developer or by the same developer at a different time. There can be multiple applications of the software project in the Alpha stage for example if a software project includes multiple independently functioning sets of packages or if different revisions of the same application have been deployed. There may also be multiple versions sets corresponding to different versions of the same packages or sets of packages. For example there may be a version 1.0 and a version 1.1 e.g. a different source code fork of a package on the Alpha Stage at the same time.

At event 4 of an approval workflow is used to test the environment revision. Generally the approval workflow includes the set of steps used to verify that a revision is approved. The approval workflow can be run whenever a new revision shows up in a stage.

The approval workflow can include automated tests for the environment revision. For example test programs or test scripts can be run against the environment revision to test the behavior of the environment revision. Multiple tests can be run to test particular functionality or to verify that previous bugs have not been reintroduced. In one embodiment the approval workflow contains separate configurable steps. Each step can correspond to a discrete test. The final step or other steps can request a manual approval or other manual action. For example the approval workflow may require that an administrator developer project leader or other user of the continuous deployment system to approve the promotion to the next stage for example by pressing an approve button.

In one embodiment the approval workflow is applied automatically to the environment revision during its deployment to the CDS stage or during the deployment of packages in the environment revision. In some embodiments the approval workflow may be applied according to a schedule. For example the approval workflow can be run during times of less activity such as at night or on the weekends in order to keep the responsiveness and or performance of the continuous deployment system high during busier times.

At event 5 if the approval workflow is passed and the environment revision is approved automatically or manually the environment revision is promoted to the next CDS stage referred to as Beta in . This stage can include different approval workflows and or different deployment environments. For example the Beta stage may have deployment environments that are configured to more closely match or duplicate the production environment than Alpha. In another example the Beta stage may include all or most of the packages for the final software release thereby allowing a more thorough or complete testing of the packages for example by allowing testing of the interactions between all the different packages.

At event 6 a second approval workflow is applied to the environment revision. In some embodiments the promotion to the destination e.g. the production environment may require manual approval. For example automated tests may be performed and if passed the continuous deployment system can then notify the user in charge of the software release that the release is ready for deployment. The user can then manually approve the deployment. By providing a mechanism for manual approval the continuous deployment system system can allow gradual adoption of automation allowing users to gain confidence in their automated tests and procedures.

At event 7 an approved revision is promoted to the production stage referred to as Production in . The promotion may be initiated by a manual approval a timer a scheduled event a time window or other deployment conditions being satisfied. In some situations there may be multiple revision sets that have been approved on the Beta stage. For example while the continuous deployment system is waiting for deployment approval other revisions may have been promoted to the Beta stage. Thus there can be multiple revisions from the same source e.g. applications or packages qualified for promotion.

In some embodiments the continuous deployment system determines which environment revision to promote such as the latest approved revision. For example the continuous deployment system may examine the source code files of the revisions to determine which files were submitted last and promote the revision with the newest files. In another example the revisions may be tagged or associated with a revision number or identifier and the continuous deployment system promotes the revision with the highest number or a revision specified as a priority revision. In another example the revisions may be promoted based on the number of tests passed during testing or the performance of the revisions during testing. In one embodiment if the destination of a promotion is out of sync with the latest approved revision of its source then that latest revision is promoted to the destination thereby updating the destination stage. In some situations the promotion destination for a revision may have other applications or packages for a different version e.g. older version of the software project than the revision. In those situations the continuous deployment system can promote the application for the same revision as the applications on the destination. For example if the source stage has approved application A revision 1.1 and revision 1.2 and the destination stage has application B revision 1.1 then the continuous deployment system can promote application A revision 1.1 since it corresponds with the application B on the destination stage. This can be beneficial since different revisions may not be compatible for example if certain functionality was implemented in the newer revision that wasn t implemented in the older revision.

In some embodiments promotions between stages are handled by automation agents or software modules or processes. In some such embodiments the agents may operate in the background. For example there may be AutoBuild AutoPromote and AutoDeploy agents. The user can interface with those agents in order to approve promotions. The user can also configure those agents to setup promotion configurations which define which sources promote to which destinations.

In one embodiment the AutoBuild agent watches for new changes in package branches or other source code collections then triggers builds into applications. For example the AutoBuild agent can check the date stamps of files to identify changes or search for files that have been marked as changed. Once built the applications can be treated as normal package builds submitted by a developer. In one embodiment the AutoBuild agent is configured to automatically build an application when a developer checks in a change to a package associated with AutoBuild. In one embodiment the user can determine and select which packages the AutoBuild agent is associated with and disable or enable monitoring by the AutoBuild agent on a per package basis.

In one embodiment the AutoBuild agent can check for changes after an interval of time has passed e.g. every minute or every hour . If the AutoBuild agent detects multiple package changes in the same application the AutoBuild agent can group the package changes into one build request. In one embodiment if a build submitted by the AutoBuild agent fails the agent will retry building when new changes are received.

In one embodiment if the AutoDeploy agent sees a deployment environment is out of sync with a application on the CDS stage associated with the deployment environment the agent triggers a deployment. For example if application revision 1.1 has been promoted to the CDS stage but only revision 1.0 is on the deployment environments the AutoDeploy agent can update the deployment environments with revision 1.1. In one embodiment deployments of an application to the first CDS stage in a pipeline does not require an approval e.g. a new application revision building successfully counts as the approval to deploy but an approval workflow can be added to perform additional verification before deploying.

In one embodiment if the AutoPromote agent sees a deployment environment e.g. in Beta stage out of sync with the latest approved version of its source deployment environment e.g. in Alpha stage from which the deployment environment receives software packages it creates a promotion deployment. Approval for the promotion can be granted automatically based on passing an approval workflow or manually by a human. If no approval workflow is configured the continuous deployment system can wait for manual approval. Once approved the AutoPromote agent causes the latest approved version to deploy into the deployment environment.

Promotions to stages may require approval in some embodiments but not in others. In some embodiments if the promotion configuration is disabled or automation is off nothing will be promoted automatically. Likewise if there is a time window defining times when promotions can take place that is associated with the promotion configuration and that time window is closed automated actions will hold off until the window opens. Time windows can be useful in controlling when promotions take place. For example promotions to production could be scheduled in times of low usage such as after midnight where problems would have limited effect on users.

Promotion configurations can form a graph or associations between all the applications and environments in a pipeline. In one embodiment while applications and environments are grouped into CDS stages for display purposes e.g. on a pipeline model display promotions are still configured on a per application and or per deployment environment basis. In one embodiment each application or deployment environment can only be the destination of one promotion but each application or deployment environment can be the source of multiple promotions. For example the application from MyVS mainline could be deployed to MyEnv Beta but MyEnv Beta could be configured to deploy to multiple deployment environments MyEnv NA Prod MyEnv EU Prod and MyEnv FE Prod. All of the deployment environments could then receive promoted revisions when a new version of MyEnv Beta was approved though deployment of the new version may wait for time windows if they are configured or implemented in the system .

In other embodiments the continuous deployment process may be fully automated. For example once software packages are submitted to the continuous deployment system by a developer the continuous deployment system automatically builds an application deploys the application to an environment revision and promotes the environment revision through the different stages if the approval workflows are satisfied. In cases where multiple revisions of the software packages exist the continuous deployment system can automatically select one of the multiple revisions to promote as described above.

Other embodiments of the continuous deployment system are also possible. For example while illustrates a 3 stage pipeline for a particular software release pipelines could have additional or lesser number of CDS stages. In some embodiments promotions may be handled with finer granularity. For example the continuous deployment system may promote package revisions or application revisions rather than or in addition to promoting by environment revisions.

In one embodiment the user can specify time windows for when the continuous deployment system is allowed to automatically create deployments. These time windows can be added on a per environment basis allowing multiple time windows for each stage. The continuous deployment system will then begin a deployment only when the time window is open for the environment.

The pipeline can include one or more CDS stages. The stages represent destinations that in one embodiment get the same changes at the same time. In the pipeline includes a application stage three testing stages referred to as PIE Devo and Gamma in and one production stage referred to as Prod . Since a CDS stage can be a logical grouping a stage can contain multiple applications and or multiple environments. For example the Prod stage can contain multiple deployment environments. As illustrated in the Gamma stage has 4 possible destination environments CN EU FE and NA . The promotions to each destination can be processed by the continuous deployment system independently. For example the continuous deployment system can request independent approval for deployments to each destination.

In one embodiment CDS stages or deployment environments can be locked in order to prevent new deployments to the CDS stage from starting. This keeps the CDS stage from changing while the lock is held. Typically an approval workflow will begin by locking the stage on which it is running. This helps to ensure that tests are run against a consistent set of software and that any approvals granted by the workflow are valid.

The promotion configurations are represented by the connections arrows between adjacent stages in a pipeline. Promotions describe where changes will go next. Promotions can be set per versions set and or per destination environment. For example separate promotion configurations can be set for each environment in a stage. Thus in one embodiment promotions can be independently determined. By clicking on one of the correction arrows the user can specify the promotions requirements between stages. A user interacting with the pipeline interface screen can add an approval workflow edit promotion configurations and approve promotions to the next stage by interacting with the screen e.g. selecting links or buttons etc. .

Indicators in the pipeline screen can be used by the continuous deployment system to indicate the status of different parts of the system. For example a lock indicator can indicate than an environment is locked. A window indicator can indicate that a time window is open or closed for an environment. Additional or different indicators can also be used.

The CDS interface can include additional screens to display additional information to users. For example the CDS interface shown in includes tabbed pages by which a user can view the progress of changes to the software project by time an audit history of changes to a pipeline s configuration and edits made to the software project . In some implementations the change progress by time interface takes all the in flight changes and orders them from most recently checked in to oldest checked in change. In some such implementations in flight changes represent changes that have not been deployed to a whole pipeline e.g. deployed to every stage in the pipeline or changes that were made within a particular time period e.g. the last 36 hours . In some implementations the audit interface displays who made a change to pipeline the configuration and when the change was made. The audit interface may permit disabling or enabling the pipeline or changing promotion configurations. The audit interface advantageously may be used to determine when something changed and who made the change. Additional or different interface display pages can be used in other embodiments.

Notifications e.g. e mails text messages etc. may be sent to users of the CDS when various events occur. The events can include a new revision of an environment or application that requires manual approval when a pipeline is deleted disabled or re enabled when an automation state of a pipeline s promotions is changed when an approval workflow fails or when an automated deployment fails. Notifications can be set for other events.

In some embodiments of the CDS system compliance management can be implemented by the CDS manager . For example compliance can include auditing due diligence and or compliance with industry best practices or regulations. For example a software compliance policy may be used to implement medical privacy standards under the Health Insurance Portability and Accountability Act HIPAA corporate accounting standards under the Sarbanes Oxley act SOX fraud prevention standards under the Payment Card Industry PCI data security standards information security standards under the Federal Information Security Management Act FISMA and so forth. In some embodiments the CDS system can monitor whether a particular software revision has been approved as complying with a compliance policy applicable to the software. In some such embodiments the CDS system will not promote the revision to the next stage in the pipeline until a compliance approval is received. The compliance approval process may be automated e.g. the revision is passed by a compliance module or may be manual e.g. a human manager has signed off on the revision .

Beginning at block the continuous deployment system receives source code modifications for a software project from a developer. The modifications can be received on the CDS interface of from a developer computing system of . The software project can have many packages and the source code modifications may be only for one or a few of the packages.

At block the continuous deployment system automatically builds a software package having the modifications. The continuous deployment system may also build the package into an application and deploy the software package as part of the application. If the package build is successful the deployment process proceeds to block . In some situations the build may fail and the continuous deployment system may then notify a user that the build failed. The continuous deployment system may then end the deployment process .

At block the continuous deployment system deploys the software package to a testing environment which can be a deployment environment of a CDS stage described in . In some situations there may be multiple deployment environments and the continuous deployment system can deploy the software package to one all or a selection of the deployment environments. In one embodiment the continuous deployment system deploys the software package according to the promotion configuration settings provided by the user.

At block the continuous deployment system automatically initiates one or more software tests of the software package. Typically during software development developers create many software tests for an application. Such tests can check whether functionality provided by the code is working correctly whether known bugs have been reintroduced whether the performance of the application is within the desired parameters and whether the results provided by the application are correct. In one embodiment these software tests are organized by the continuous deployment system into an approval workflow. Such an approval workflow can include the tests as well as other criteria that need to be met before the software package is approved. While running the tests the continuous deployment system can lock the CDS stage to prevent new deployments to the CDS stage from starting thereby keeping the code base consistent during testing.

At block the continuous deployment system determines whether the one or more software tests have been passed e.g. functionality tests bug tests performance tests compliance tests etc. . If the tests were not passed the continuous deployment system can end the deployment process . If the tests were passed the deployment process proceeds to block . In some embodiments the deployment process may proceed to block even if some of the tests were not passed. For example if the software package is functioning correctly but is not yet meeting desired performance criteria the continuous deployment system may proceed with the deployment.

In one embodiment the continuous deployment system can report the results of the tests to the user so that the user can know how the software package performed on the one or more software tests. For example the continuous deployment system may provide interactive feedback to the user including for example indications of when and or for how long software tests will run and provide a real time or near real time status of the tests or other parts of the deployment process . In some embodiments the continuous deployment system can generate a report detailing or summarizing the usage testing results and communicate the report to the user via electronic mail or provide access to the report deployment status or interactive feedback via Web services. For example the continuous deployment system may provide interactive and information screens such as those described in . The continuous deployment system can also include other screens such as a change progress by time audit history or edit screen as described above.

At block the continuous deployment system determines if the software package is approved. Such approval may be provided automatically or manually. Automatic approval may be granted if the one or more software tests are passed. In some cases the continuous deployment system may be configured to delay approving the software package until certain criteria are met such as waiting for a particular time or waiting for a scheduled event to occur. In some embodiments the continuous deployment system may be configured to request manual approval from the user. In those embodiments the continuous deployment system can designate the software package as ready for approval notify the user the packages status and await approval.

If new modifications are received while the continuous deployment system is awaiting approval for the software package the deployment process can proceed back to block and process the new software package. The new software package would then proceed as described above until the deployment process again reaches block . Thus in some situations there can be times when multiple packages are awaiting approval at block . In some situations the new modifications can be received during other times in the process e.g. at other blocks . If one or more software packages are approved the deployment process can proceed to block .

At block the continuous deployment system automatically selects a software package for deployment. If there s only a single package ready for approval then the continuous deployment system selects that package for deployment to the next destination environment. If there are multiple software packages then the continuous deployment system determines which software packages to send to the next destination. For example if there are multiple revisions of the same software package ready for deployment the continuous deployment system can pick the latest revision. The continuous deployment system can pick which software package out of a plurality of packages to deploy based on the revision number what software revisions are found on the destination environment by revision priority by the author of the changes by a pre determined priority list or by other selection criteria.

After selecting the software package or packages to deploy the continuous deployment system then deploys the software package to the destination environment. The destination environment could be a second testing environment or third fourth etc. or a production environment. If the destination is another testing environment the deployment process can proceed back to block and repeat part of the process described above. If the destination is a production environment the process proceeds to block .

At block the continuous deployment system deploys the software package to the production environment which can be a deployment environment of a CDS stage described in . In some situations there may be multiple deployment environments and the continuous deployment system can deploy the software package to one all or a selection of the deployment environments. In one embodiment the continuous deployment system deploys the software package according to the promotion configuration settings provided by the user.

At block the continuous deployment system optionally determines if the deployment was successful and can rollback the deployment if it was not. During the deployment process the continuous deployment system can record rollback data such as the version of the previous software package being replaced with the new software package and or other data for rolling back a deployment. For example in response to a triggering even such as failure or error in the deployment environment the continuous deployment system can rollback to the previously deployed software package or otherwise return the deployment environment to the state it was in before the deployment. The rollback process or the determination whether to rollback may be initiated automatically or manually. After deploying the software package or rolling back the deployment if needed the deployment process can end.

As described above the continuous deployment system can be implemented with one or more physical servers or computing machines such as several computing machines interconnected via a network. Thus each of the components depicted in the continuous deployment system can include hardware and or software for performing various features. In one embodiment the continuous deployment system is a web site or collection of web sites.

Like the continuous deployment system developer computing systems can be implemented in hardware and can include any type of computing device. The developer systems can but need not be operated by entities who are different from one another and who are different from a user of the continuous deployment system . For example the continuous deployment system may be a web service made available to 3rd party developers by a web services provider for a fee or for free.

The continuous deployment system can include one or more servers for receiving and responding to network requests from the developer computing devices . The one or more servers can include web servers application servers database servers combinations of the same or the like. In some embodiments the network is a publicly accessible network of linked networks possibly operated by various distinct parties such as the Internet. In other embodiments the network may be a private network such as for example a corporate or university network that is wholly or partially inaccessible to non privileged users. In still other embodiments the network may include one or more private networks with access to and or from the Internet.

The processing of the various components of the continuous deployment system can be distributed across multiple machines networks and other computing resources. The various components of the continuous deployment system can also be implemented in one or more virtual machines rather than in dedicated servers. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

In some embodiments the continuous deployment system may be configured differently than illustrated in the figures above. For example various functionalities provided by the illustrated modules can be combined rearranged added or deleted. In some embodiments additional or different processors or modules may perform some or all of the functionalities described with reference to the example embodiment illustrated in the figures above. Many implementation variations are possible.

Other types of programmatic interactions additionally or alternatively between the continuous deployment system and the developer computing systems are possible in addition to those described above. For example a CDS submission or command be received directly from a user e.g. via an interactive console or other GUI provided by the continuous deployment system or from an executing program on a developer computing device . In some embodiments users may interact with the continuous deployment system using other types of interfaces and in other ways. For example the continuous deployment system may provide a web services interface e.g. a web page or set of web pages that allows a user to submit a request using a web browser. Other types of interfaces may also be used.

In some embodiments a server computing system that has components including a central processing unit CPU input output I O components storage and memory may be used to execute the continuous deployment system or specific components of the continuous deployment system . The executable code modules of the continuous deployment system can be stored in the memory of the server and or on other types of non transitory computer readable storage media. In some embodiments the continuous deployment system may be configured differently than described above.

Each of the processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code modules executed by one or more computers computer processors or machines configured to execute computer instructions. The code modules may be stored on any type of non transitory computer readable medium or tangible computer storage device such as hard drives solid state memory optical disc and or the like. The systems and modules may also be transmitted as generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission mediums including wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . The processes and algorithms may be implemented partially or wholly in application specific circuitry. The results of the disclosed processes and process steps may be stored persistently or otherwise in any type of non transitory computer storage such as e.g. volatile or non volatile storage.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition certain method event or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described tasks or events may be performed in an order other than that specifically disclosed or multiple may be combined in a single block or state. The example tasks or events may be performed in serial in parallel or in some other manner. Tasks or events may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list. Conjunctive language such as the phrase at least one of X Y and Z unless specifically stated otherwise is otherwise understood with the context as used in general to convey that an item term etc. may be either X Y or Z. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of X at least one of Y and at least one of Z to each be present

While certain example embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions disclosed herein. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein.

