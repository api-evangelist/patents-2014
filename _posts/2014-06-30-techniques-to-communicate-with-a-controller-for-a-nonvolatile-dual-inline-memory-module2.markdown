---

title: Techniques to communicate with a controller for a non-volatile dual in-line memory module
abstract: Examples may include communicating with a controller for a non-volatile dual in-line memory module through a system management bus (SMBus) interface. In some examples, selective assertion of bits maintained in registers accessible through the SMBus interface may enable communication with the controller. The selective assertion may be based on a register map.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09645829&OS=09645829&RS=09645829
owner: INTEL CORPORATION
number: 09645829
owner_city: Santa Clara
owner_country: US
publication_date: 20140630
---
Examples described herein are generally related to a non volatile dual in line memory module NVDIMM .

Memory modules coupled with computing platforms or systems such as those configured as a server may include dual in line memory modules DIMMs . DIMMs may include types of volatile memory such dynamic random access memory DRAM . As DRAM technologies have advanced to include memory cells having higher and higher densities memory capacities for DIMMs have also substantially increased. Since DRAM is a volatile memory power failures or resets may result in loss of most if not all data maintained in DRAM at the time of power failure or reset. Also large memory capacities for DRAMs presents a challenge for an operating system OS or an application e.g. device driver to sense a power failure and attempt to prevent or reduce data loss.

In order to mitigate or reduce data loss in the event of a power failure or reset a type of memory module that includes both volatile and non volatile memory has been developed. This type of memory module is commonly referred to as a non volatile DIMM NVDIMM . Typically NVDIMMs are a combination of DRAM and NAND flash. NVDIMMs may provide persistent storage by backing up DRAM contents in a non volatile memory such as NAND flash in event of a power failure or sudden system reset. A super capacitor package may be coupled with an NVDIMM to maintain power to the NVDIMM for long enough to back up data from the DRAM to the non volatile memory.

An NVDIMM may have a controller resident on or with the NVDIMM to manage or control NVDIMM activities. The NVDIMM controller may manage saving of DRAM contents to non volatile memory at the NVDIMN. The NVDIMM controller may also manage restoration of the DRAM contents from the non volatile memory back to the DRAM once system power has been restored. The NVDIMM controller may be arranged to operate in coordination with an OS device driver application or basic input output system BIOS for a computing platform coupled with the NVDIMM to save or restore DRAM contents.

As contemplated in the present disclosure an NVDIMM may have a NVDIMM controller arranged to operate in coordination with an OS device driver application or BIOS for a computing platform coupled with the NVDIMM. In some examples an application device driver and or BIOS may interface or communicate through one or more communication interfaces with the NVDIMM controller. When interfacing or communicating with the NVDIMM controller the application device driver and or BIOS may issue commands to the NVDIMM controller to save DRAM contents to non volatile memory at the NVDIMM restore non volatile memory content to the DRAM etc. Numerous manufacturers of NVDIMMs may implement their own proprietary interfaces to communicate with computing platform elements such as an application device driver and or BIOS. The use of numerous proprietary interfaces may be an impediment to interoperability and may be problematic to designers of computing platform elements such as an application device driver and or BIOS that are designed to support NVDIMMS. It is with respect to these and other challenges that the examples described herein are needed.

Techniques to communicate with a controller for an NVDIMM may be implemented via one or more example methods. A first example method may include a controller receiving a status request. The controller may be for a non volatile memory capable of preserving data maintained in volatile memory the non volatile and the volatile memory resident on an NVDIMM. A status may be determined by the controller responsive to the status request and the status indicated via selective assertion of a first set of bits maintained in a first set of registers. For this first example method the first set of registers may be accessible to a requestor e.g. application device driver or BIOS of the status request through a system management bus SMBus interface.

A second example may include a device driver arranged to be implemented by circuitry at a host computing device. The device driver may send a status request to a controller for a non volatile memory capable of preserving data maintained in volatile memory the non volatile and the volatile memory may be resident on a an NVDIMM coupled with the host computing platform. For this second example method the device driver may access a first set of bits maintained in a first set of registers through an SMBus interface. The first set of bits may indicate a status provided by the controller responsive to the status request via selective assertion of the first set of bits based on a register map.

In some examples host computing platform may include circuitry capable of executing various functional elements of host computing platform that may include but is not limited to a basic input output system BIOS a device driver or an application s App s . For these examples host computing platform may include but is not limited to a server a server array or server farm a web server a network server an Internet server a work station a mini computer a main frame computer a supercomputer a network appliance a web appliance a distributed computing system multiprocessor systems processor based systems or combination thereof.

According to some examples as shown in host interface at NVDIMM may include a system management bus SMBus interface and a memory interface . SMBus interface may be designed or operated in compliance with one or more standards or specifications including progenies or variants to include the SMBus Specification version 2.0 published in August 2000 SMBus Specification . As described more below elements of host computing platform may communicate with NVDIMM controller through SMBus interface . Also elements of computing platform may have access to volatile memory through memory interface over control channel through control switch and then over control channel . In some examples access to volatile memory may be switched by control switch to NVDIMM controller over control channel to save or restore contents of volatile memory from or to non volatile memory using memory channel coupled between volatile memory and non volatile memory .

According to some examples as shown in NVDIMM controller may include registers and circuitry . Circuitry may be capable of executing components or features to receive a status request from elements of host computing platform . As described more below the status request may pertain to a status of NVDIMM controller or other elements of NVDIMM e.g. non volatile memory . The components or features may also be capable of determining a status responsive to the status request and then indicate that status via selective assertion of bits maintained in registers based on a register map. The requesting element of host computing platform such as device driver requestor may have access to registers through SMBus interface and over communication link to determine which bits have been asserted. The requestor may then use the register map to determine what status was indicated by the components or features implemented by circuitry .

In some examples volatile memory may include volatile memory designed or operated in compliance with one or more standards or specifications including progenies or variants associated with various types of volatile memory such as DRAM. For example types of DRAM such as synchronous double data rate DRAM DDR DRAM may be included in volatile memory and standards or specifications associated with DDR DRAM may include those published by the JEDEC Solid State Technology Association JEDEC for various generations of DDR such as DDR2 DDR3 DDR4 or future DDR generations. Some example standards or specifications may include but are not limited to JESD79 3F DDR3 SDRAM Standard published in July 2012 or JESD79 4 DDR4 SDRAM Standard published in September 2012.

According to some examples non volatile memory may include one or more types of non volatile memory to include but not limited to NAND flash memory NOR flash memory 3 D cross point memory ferroelectric memory silicon oxide nitride oxide silicon SONOS memory polymer memory such as ferroelectric polymer memory ferroelectric transistor random access memory FeTRAM or FeRAM ovonic memory or nanowire. Also in some examples non volatile memory may include enough memory capacity to receive the full contents of volatile memory or possibly multiple copies of contents of volatile memory . For these examples non volatile memory sized for multiple copies may allow for images of time based data maintained in volatile memory to be saved to regions of non volatile memory . As described more below global unique identifiers GUIDs may be assigned or associated with data to be saved or restored from a non volatile memory such as non volatile memory . NVDIMM controller may use these assigned GUIDs to facilitate saving or restoring time based data from or to volatile memory .

In some examples capacitor pack may include one or more capacitors to provide at least temporary power to NVDIMM via power link . The one or more capacitors may be capable of storing enough energy to power NVDIMM for a sufficient time for NVDIMM controller to cause data maintained in volatile memory to be saved to non volatile memory if a sudden power failure or system reset caused the main power supply to NVDIMM to be cut or shut off. The saving of the data contents to non volatile memory due to the sudden power failure or system reset may be referred to as a catastrophic save .

According to some examples register map portion may be associated with a header. The header for example may be used to indicate capabilities and or operating parameters of an NVDIMM and or an NVDIMM controller. The header may also include information to interpret one or more other portions of an entire register map for use to communicate requests or commands to the NVDIMM controller. As shown in various sets of bits may be associated with corresponding field names having specified offsets lengths in bytes and access rights such a read write RW or read only RO from the perspective of elements of the host computing platform requestor . A description is also shown in for each sets of bits that may be selectively asserted either individually e.g. a single bit or in a group e.g. multiple bits .

In some examples as shown in PAGE NUM has an offset value of 0x00 hexadecimal a length of 1 and a RW access. For these examples the bits in the PAGE NUM field are the only bits in register map portion that has RW access to allow a requestor to indicate a page number in BIT 2 0 maximum number of pages in BIT 5 0 and reserves BIT 7 6 for possible future changes.

According to some examples as shown in the fields associated with offsets 0x01 to 0x03 indicate hardware and firmware revision information respectively. The fields associated with offsets 0x04 to 0x19 may be used to indicate operating parameters associated with elements of the NVDIMM such as the NVDIMM controller non volatile memory volatile memory and capacitor package.

In some examples the Number of SAVE regions field may specify the number of SAVE regions in the NVDIMM for saving multiple copies of the volatile memory DRAM contents at various points of time. For these examples the NVDIMM may be capable of supporting at least one region e.g. identified as REGION 0 . In other words the non volatile memory e.g. NAND flash may have a memory capacity large enough to save a copy of all the contents of the DRAM in the at least one region. Also the SAVE Latency and RESTORE Latency indicated at offsets 0x08 and 0x0A may indicate the respective worst case SAVE latency in seconds secs and RESTORE latency in secs for REGION 0. The worst case SAVE and RESTORE latencies may take into consideration write or read latencies primarily associated with the non volatile memory.

According to some examples register portion may be associated with an NVDIMM STATE class of requests received by the NVDIMM controller from elements of the host computing platform requestor to receive a status of the NVDIMM. For these examples as shown in the bits in the GET NVDIMM STATE field are the only bits in register map portion that has RW access to allow a requestor to indicate a request associated with an NVDIMM status or state.

In some examples BIT7 of the GET NVDIMM STATE field may be cleared e.g. de asserts the bit by the requestor while issuing this request. For these examples the NVDIMM controller sets e.g. asserts BIT7 to indicate the request has been accepted and bits associated with the T NvState.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T NvState.SV may indicate a time out in either milliseconds ms or secs for the requestor to wait for the NVDIMM controller to complete the request.

According to some examples BIT6 of the GET NVDIMM STATE field may be cleared while the requestor is issuing this request. For these examples the NVDIMM controller sets BIT6 to indicate this request has been completed and NVDIMM status is indicated by selective assertion of bits associated with the NVDIMM STATUS field based on register map portion . In some examples if BIT0 is set or asserted in the NVDIMM STATUS field this may indicate that the NVDIMM controller is busy executing a previously received command e.g. such as a SAVE ERASE or RESTORE. However the NVDIMM may still receive a new request or command and queue that new request or command for execution after completing the previous request or command.

In some examples the BUSY TIMEOUT T Busy may indicate a time out in either ms or secs for a requestor to wait for the NVDIMM controller to no longer be busy before determining that the NVDIMM controller is locked up or malfunctioning. For these examples the NVDIMM controller may populate or selectively assert the bits associated with this field before setting the corresponding NVDIMM STATUS.BUSY bit e.g. BIT0 of the NVDIMM STATUS field . The NVDIMM controller may update the BUSY TIMEOUT T Busy field each time a GET NVDIMM STATUS request is received from the requestor.

According to some examples register portion may be associated with a SAVE class of commands received by the NVDIMM controller from elements of the host computing platform requestor to cause the NVDIMM controller to save contents stored in the volatile memory to the non volatile memory. For these examples as shown in the bits in the SAVE CMD and ABORT SAVE fields in register map portion both have RW access to allow a requestor to indicate a command either to execute a SAVE operation or ABORT a SAVE operation. Also the SAVE IMAGE GUID field may allow for RW access for a requestor to indicate a global unique identifier GUID for an image or content to save to the non volatile memory.

In some examples BIT7 of the SAVE CMD field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT7 to indicate the command has been accepted and bits associated with the T Save.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T Save.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the SAVE command.

According to some examples BIT6 of the SAVE CMD field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and a SAVE operation status is indicated by selective assertion of bits associated with the SAVE STATUS field based on register map portion .

In some examples BIT5 of the SAVE CMD field may be asserted to indicate whether a valid image GUID has been associated with the content to be saved to the non volatile memory as indicated in bits selectively asserted in the SAVE IMAGE GUID fields. For these examples the requestor may have indicated a GUID in the SAVE IMAGE GUID for the NVDIMM controller to associate with content to be saved to the non volatile memory. If the GUID is valid e.g. doesn t match a previously associated GUID for another image BIT5 may be asserted and the NVDIMM controller may save the image contents to an available region of the non volatile memory. The NVDIMM controller may preserve the association between the GUID and the region saved until an ERASE command is issued to this GUID. If GUID is not valid BIT5 is not asserted and the contents may be saved to a default region of the non volatile memory e.g. REGION 0 .

In some examples BIT7 of the ABORT SAVE field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT 7 to indicate the command has been accepted and bits associated with the T Save.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T Save.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the ABORT SAVE command.

According to some examples BIT6 of the ABORT SAVE field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and an ABORT SAVE operation status is indicated by selective assertion of bits associated with the SAVE STATUS field based on register map portion .

In some examples BIT5 of the ABORT SAVE field may be asserted to indicate whether a valid image GUID has been associated with the content for aborting the SAVE operation to the non volatile memory as indicated in bits selectively asserted in the SAVE IMAGE GUID fields. If the GUID is valid e.g. doesn t match a previously associated GUID for another image BIT5 may be asserted and the NVDIMM controller may abort the SAVE operation for the image contents to an available region of the non volatile memory. If GUID is not valid BIT5 is not asserted and the NVDIMM controller may abort the SAVE operation for contents to be saved to a default region of the non volatile memory e.g. REGION 0 .

According to some examples register portion may be associated with a RESTORE class of commands received by the NVDIMM controller from elements of the host computing platform requestor to cause the NVDIMM controller to RESTORE contents stored in the non volatile memory to the volatile memory. For these examples as shown in the bits in the RESTORE CMD and ABORT RESTORE fields in register map portion both have RW access to allow a requestor to indicate a command either to execute a RESTORE operation or ABORT a RESTORE operation. Also the RESTORE IMAGE GUID field may allow for RW access for a requestor to indicate a GUID for an image or content to restore to the volatile memory. The requestor or caller of a RESTORE CMD or ABORT RESTORE may setup the image GUID before invoking the command.

In some examples BIT7 of the RESTORE CMD field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT7 to indicate the command has been accepted and bits associated with the T Restore.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T Restore.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the RESTORE command.

According to some examples BIT6 of the RESTORE CMD field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and a RESTORE operation status is indicated by selective assertion of bits associated with the RESTORE STATUS field based on register map portion .

In some examples BIT5 of the RESTORE CMD field may be asserted to indicate whether a valid image GUID has been associated with the content to be restored to the volatile memory as indicated in bits selectively asserted in the RESTORE IMAGE GUID fields. For these examples the requestor may have indicated a GUID in the RESTORE IMAGE GUID for the NVDIMM controller to associate with content to be restored to the volatile memory. If the GUID is valid matches a previously associated GUID BIT5 may be asserted and the NVDIMM controller may restore the image contents to the volatile memory. If GUID is not valid BIT5 is not asserted and the contents may be restored from a default region of the non volatile memory e.g. REGION 0 to the volatile memory.

In some examples BIT7 of the ABORT RESTORE field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT7 to indicate the command has been accepted and bits associated with the T RESTORE.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T RESTORE.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the ABORT RESTORE command.

According to some examples BIT6 of the ABORT RESTORE field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and an ABORT RESTORE operation status is indicated by selective assertion of bits associated with the RESTORE STATUS field based on register map portion .

In some examples BIT5 of the ABORT RESTORE field may be asserted to indicate whether a valid image GUID has been associated with the content for aborting the RESTORE operation to the volatile memory as indicated in bits selectively asserted in the RESTORE IMAGE GUID fields. If the GUID is valid matches a previously associated GUID BIT5 may be asserted and the NVDIMM controller may abort the restore operation for the image contents to the volatile memory. If GUID is not valid BIT5 is not asserted and the restore operation for the contents being restored from a default region of the non volatile memory e.g. REGION 0 to the volatile memory is aborted.

According to some examples register portion may be associated with an ERASE class of commands received by the NVDIMM controller from elements of the host computing platform requestor to cause the NVDIMM controller to ERASE contents stored in the non volatile memory. For these examples as shown in the bits in the ERASE CMD and ABORT ERASE fields in register map portion both have RW access to allow a requestor to indicate a command either to execute an ERASE operation or ABORT an ERASE operation. Also the ERASE IMAGE GUID field may allow for RW access for a requestor to indicate a GUID for an image or content to erase from the non volatile memory.

In some examples BIT7 of the ERASE CMD field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT7 to indicate the command has been accepted and bits associated with the T Erase.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T Erase.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the ERASE command.

According to some examples BIT6 of the ERASE CMD field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and an ERASE operation status is indicated by selective assertion of bits associated with the ERASE STATUS field based on register map portion .

In some examples BIT5 of the ERASE CMD field may be asserted to indicate whether a valid image GUID has been associated with the content to be erased from the non volatile memory as indicated in bits selectively asserted in the ERASE IMAGE GUID fields. For these examples the requestor may have indicated a GUID in the ERASE IMAGE GUID for the NVDIMM controller to determine what content and or regions to erase from the non volatile memory. If the GUID is valid e.g. matches a previously associated GUID BIT5 may be asserted and the NVDIMM controller may ERASE the image contents from the region of the non volatile memory associated with the valid GUID. If GUID is not valid BIT5 is not asserted and the contents may be erased from a default region of the non volatile memory e.g. REGION 0 .

In some examples BIT7 of the ABORT ERASE field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT 7 to indicate the command has been accepted and bits associated with the T Erase.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T Erase.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the ABORT ERASE command.

According to some examples BIT6 of the ABORT ERASE field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and an ABORT ERASE operation status is indicated by selective assertion of bits associated with the ERASE STATUS field based on register map portion .

In some examples BIT5 of the ABORT ERASE field may be asserted to indicate whether a valid image GUID has been associated with the content for aborting the ERASE operation to the non volatile memory as indicated in bits selectively asserted in the SAVE IMAGE GUID fields. If the GUID is valid e.g. matches a previously associated GUID BIT5 may be asserted and the NVDIMM controller may abort the ERASE operation for the image contents to the region of the non volatile memory associated with the valid GUID. If GUID is not valid BIT5 is not asserted and the NVDIMM controller may abort the ERASE operation for contents to be erased from a default region of the non volatile memory e.g. REGION 0 .

According to some examples register portion may be associated with ARM DISARM class of commands received by the NVDIMM controller from elements of the host computing platform requestor to cause the NVDIMM controller to enable catastrophic save capabilities of the NVDIMM in order to save contents stored in the volatile memory to the non volatile memory based on a power loss or unexpected system reset. Enabling catastrophic save capabilities may be referred to as an ARM operation as it may cause one or more capacitors coupled to the NVDIMM to start storing energy or arming for a catastrophic save event. For these examples as shown in the bits in the ENABLE CATASTROPHIC SAVE and DISABLE CATASTROPHIC SAVE fields in register map portion both have RW access to allow a requestor to indicate a command either to execute an ARM operation or disable an ARM operation.

In some examples BIT7 of the ENABLE CATASTROPHIC SAVE field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT7 to indicate the command has been accepted and bits associated with the T Arm.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T Arm.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the ENABLE CATASTROPHIC SAVE or ARM command.

According to some examples BIT6 of the ENABLE CATASTROPHIC SAVE field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and an ARM operation status is indicated by selective assertion of bits associated with the CATASTROPHIC SAVE STATUS field based on register map portion .

In some examples BIT7 of the DISABLE CATASTROPHIC SAVE field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT7 to indicate the command has been accepted and bits associated with the T Arm.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T Arm.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the DISABLE CATASTROPHIC SAVE or DISARM command.

According to some examples BIT6 of the DISABLE CATASTROPHIC SAVE field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and a DISARM operation status is indicated by selective assertion of bits associated with the CATASTROPHIC SAVE STATUS field based on register map portion .

According to some examples register portion may be associated with a self refresh save class of commands received by the NVDIMM controller from elements of the host computing platform requestor to cause the NVDIMM controller to save on self refresh e.g. initiate volatile to non volatile copy on the volatile memory going to a self refresh mode . For these examples as shown in the bits in the ENABLE SELFREFRESH SAVE and DISABLE SELFREFRESH SAVE fields in register map portion both have RW access to allow a requestor to indicate a command either to execute a self refresh save operation or disable a self refresh save operation.

In some examples BIT7 of the ENABLE SELFREFRESH SAVE field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT7 to indicate the command has been accepted and bits associated with the T SrSave.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T SrSave.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the ENABLE SELFREFRESH SAVE command.

According to some examples BIT6 of the ENABLE SELFREFRESH SAVE field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and a self refresh save operation status is indicated by selective assertion of bits associated with the SR SAVE STATUS field based on register map portion .

In some examples BIT7 of the DISABLE SELFREFRESH SAVE field may be cleared by the requestor while issuing this command. For these examples the NVDIMM controller sets BIT7 to indicate the command has been accepted and bits associated with the T SrSave.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T SrSave.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the DISABLE SELFREFRESH SAVE command.

According to some examples BIT6 of the DISABLE SELFREFRESH SAVE field may be cleared while the requestor is issuing this command. For these examples the NVDIMM controller sets BIT6 to indicate this command has been completed and a disable self refresh save operation status is indicated by selective assertion of bits associated with the SRSAVE STATUS field based on register map portion .

According to some examples register portion may be associated with a Heath Check class of requests received by the NVDIMM controller from elements of the host computing platform requestor to receive a health status of the NVDIMM and or elements of the NVDIMM. For these examples as shown in the bits in the GET HEALTH STATUS field are the only bits in register map portion that has RW access to allow a requestor to indicate a request associated with a get health status operation.

In some examples BIT7 of the GET HEALTH STATUS field may be cleared or de asserted by the requestor while issuing this request. For these examples the NVDIMM controller sets or asserts BIT7 to indicate the request has been accepted and bits associated with the T Health.SV field shown in have been populated or selectively asserted. The bits selectively asserted for T Health.SV may indicate a time out in either ms or secs for the requestor to wait for the NVDIMM controller to complete the GET HEALTH STATUS request.

According to some examples BIT6 of the GET HEALTH STATUS field may be cleared while the requestor is issuing this request. For these examples the NVDIMM controller sets BIT6 to indicate this request has been completed and health status is indicated by selective assertion of bits associated with the HEALTH STATUS field based on register map portion .

Starting with a SAVE CMD and moving to block Call GET NVDIMM STATE logic and or features at host computing platform such as device driver may first place a request for the status of NVDIMM controller by clearing both BIT7 and BIT6 in the GET NVDIMM STATE field as indicated in register map portion . In some examples sequence as shown in below may be implemented to receive a status from NVDIMM controller .

Proceeding from block to decision block Controller Error device driver based on sequence described more below may either receive the status of NVDIMM controller or may determine that a controller error has occurred. If a controller error was determined the process comes to an end. Otherwise the process moves to decision block .

Moving from decision block to decision block Controller Busy device driver may determine whether BIT0 of the NVDIMM STATUS field of register map portion is asserted. If asserted the process moves to decision block . Otherwise the process moves to block .

Moving from decision block to decision block T Busy Reached device driver may determine whether a time out value indicated in BIT 14 0 of the BUSY TIMOUT T Busy field of register map portion has been exceeded. If the time out value has not been exceeded another SAVE CMD may be initiated by device driver that causes another request for a status of NVDIMM controller . If the time out value has been exceeded a controller error is determined and the process comes to an end.

Moving from decision block to block Send SAVE command w SAVE CMD.CA 0 SAVE CMD.SV 0 SAVE IMAGE GUID x CMD 0x01 device driver may de assert or clear BIT7 and BIT6 of the SAVE CMD field of register map portion to result in SAVE CMD.CA 0 and SAVE CMD.SV 0. Device driver may also selectively assert bits in SAVE IMAGE GUID to provide a GUID for an image or contents of volatile memory to save to non volatile memory . Device driver may also selectively assert bits in BIT 4 0 of the SAVE CMD field to indicate a command to start the SAVE operation.

Proceeding from block to decision block SAVE CMD.CA 1 device driver may check BIT7 of the SAVE CMD field to determine whether NVDIMM controller has accepted the SAVE command. If BIT7 has been asserted the SAVE CMD has been issued and accepted by NVDIMM controller . Device driver may then check BIT6 of the SAVE CMD field at a later time and the process moves to decision block . If BIT7 has not been asserted the process moves to decision block .

Moving from decision block to decision block T CA Reached device driver may determine whether a wait time for receiving a command acceptance indication for the SAVE command has exceeded a time out value indicated in BIT 14 0 of the Command Accepted Latency T CA field of register map portion . If the wait time has exceeded the time out value a controller error is determined and the process comes to an end. If the wait time does not exceed the time out value device driver may check BIT7 repeatedly until either the wait time exceeds the time out value or NVDIMM controller indicates acceptance of the SAVE command by asserting BIT7.

Moving from decision block to decision block SAVE CMD.SV 1 device driver may check BIT6 of the SAVE CMD field to determine whether NVDIMM controller has completed the SAVE command. If BIT6 has not been asserted the process moves to block . Otherwise the process moves to decision block .

Moving from decision block to decision block T Save.SV Elapsed Since SAVE CMD 1 device driver may determine whether a wait time for receiving a command completion indication for the SAVE command has exceeded a time out value indicated in BIT 14 0 of the T Save.SV field of register map portion . If the wait time has exceeded the time out value a controller error is determined and the process comes to an end. If the wait time does not exceed the time out value device driver may check BIT6 repeatedly until either the wait time exceeds the time out value or NVDIMM controller indicates completion of the SAVE command by asserting BIT6.

Moving from decision block to block Save Completed Read SAVE STATUS device driver may read SAVE STATUS indicated by the bits in the SAVE STATUS field of register map portion that may have been selectively asserted by NVDIMM controller to indicate the status of the completed SAVE operation. In some examples as shown in a SAVE STATUS may be returned to device driver or to an operating system or software e.g. App s of host computing platform based on that indicated status. The process then comes to an end.

Starting with block from sequence GET NVDIMM STATE device driver may initiate the process of requesting a status from NVDIMM controller .

Proceeding from bloc to block Send GET NVDIMM STATE Request device driver may send a request for the status of NVDIMM controller by clearing both BIT7 and BIT6 in the GET NVDIMM STATE field as indicated in register map portion .

Proceeding from block to decision block GET NVDIMM STATE.RA 1 device driver may check BIT7 of the GET NVDIMM STATE field of register map portion to determine whether NVDIMM controller has accepted the request for a status from NVDIMM controller . If BIT7 has been asserted the process moves to decision block . Otherwise the process moves to decision block .

Moving from decision block to decision block Timeout T CA Reached device driver may wait a period of time for an indication from NVDIMM controller that the request has been accepted BIT7 in the GET NVDIMM STATE field is asserted . In some examples the period of time device driver may wait may be based on a worst case value indicated in the Command Accepted Latency T CA field of register map portion . If the waiting time period exceeds the worst case value the Timeout T CA has been reached and the process moves to block . If not reached the process moves back to decision block .

Moving from decision block to decision block GET NVDIMM STATE.SV 1 device driver may check BIT6 of the GET NVDIMM STATE field to determine whether NVDIMM controller has completed the request. If BIT6 has not been asserted the process moves to block . Otherwise the process moves to decision block .

Moving from decision block to decision block Timeout T NvState.SV Reached device driver may determine whether a wait time for receiving a request completion indication for the status request has exceeded a time out value indicated in BIT 14 0 of the T NvState.SV field of register map portion . If the wait time has exceeded the time out value the process moves to block . If the wait time does not exceed the time out value the process moves back to decision block .

Moving from either decision blocks or to block Set STATUS Controller Error Not responding device driver may determine that NVDIMM controller is in an error state or is not responding. That error or not responding status may be returned to decision block of sequence and may result in the end of that sequence due to the error or not responding state of NVDIMM controller .

Moving from decision block to block STATUS NVDIMM STATUS device driver may access bits selectively asserted by NVDIMM controller in NVDIMM STATUS field of register map portion to determine the status of the NVDIMM. That status indicated in these bits may be returned to decision block of sequence to continue on with a SAVE command. In other examples the status indicated in these bits may be returned to other sequences associated with other commands or requests such a RESTORE ERASE ARM DISARM Self Refresh Save or Health Check.

Starting with a RESTORE CMD and moving to block Call GET NVDIMM STATE logic and or features at host computing platform such as BIOS may first place a request for the status of NVDIMM controller by clearing both BIT7 and BIT6 in the GET NVDIMM STATE field as indicated in register map portion . In some examples sequence as shown in above may be implemented to receive a status from NVDIMM controller .

Proceeding from block to decision block Controller Error BIOS based on sequence described above for may either receive the status of NVDIMM controller or may determine that a controller error has occurred. If a controller error was determined the process comes to an end. Otherwise the process moves to decision block .

Moving from decision block to decision block Did Catastrophic SAVE Occur during Previous Boot and Successful BIOS may first access BIT7 of the NVDIMM STATUS field for register map portion to determine whether or not a SAVE pin was asserted on a previous boot. If BIT7 was asserted BIOS may then determine whether or not the Catastrophic SAVE operation was successful BIT8 asserted . If both BIT7 and BIT8 were determined to be asserted the process moves to decision block . If at least one of BIT7 or BIT8 were not asserted then BIOS will stop the RESTORE command. An operating system or software e.g. App s for host computing platform may then restore Non Region0 of non volatile memory if present to volatile memory and the RESTORE process may come to an end for BIOS .

Moving from decision block to decision block Controller Busy BIOS may determine whether BIT0 of the NVDIMM STATUS field of register map portion is asserted. If asserted the process moves to decision block . Otherwise the process moves to block .

Moving from decision block to decision block T Busy Reached BIOS may determine whether a time out value indicated in BIT 14 0 of the BUSY TIMOUT T Busy field of register map portion has been exceeded. If the time out value has not been exceeded another RESTORE CMD may be initiated by BIOS that causes another request for a status of NVDIMM controller . If the time out value has been exceeded a controller error is determined and the process comes to an end.

Moving from decision block to block Send RESTORE command w RESTORE CMD.CA 0 RESTORE CMD.SV 0 RESTORE IMAGE GUID x CMD 0x01 BIOS may de assert or clear BIT7 and BIT6 of the RESTORE CMD field of register map portion to result in RESTORE CMD.CA 0 and RESTORE CMD.SV 0. BIOS may also selectively assert bits in RESTORE IMAGE GUID to provide a GUID for an image or contents of volatile memory to RESTORE from non volatile memory to volatile memory . BIOS may also selectively assert bits in BIT 4 0 of the RESTORE CMD field to indicate a command to start the RESTORE operation.

Proceeding from block to decision block RESTORE CMD.CA 1 BIOS may check BIT7 of the RESTORE CMD field to determine whether NVDIMM controller has accepted the RESTORE command. If BIT7 has been asserted the RESTORE CMD has been issued and accepted by NVDIMM controller . BIOS may then check BIT6 of the RESTORE CMD field at a later time and the process moves to decision block . If BIT7 has not been asserted the process moves to decision block .

Moving from decision block to decision block T CA Reached BIOS may determine whether a wait time for receiving a command acceptance indication for the SAVE command has exceeded a time out value indicated in BIT 14 0 of the Command Accepted Latency T CA field of register map portion . If the wait time has exceeded the time out value a controller error is determined and the process comes to an end. If the wait time does not exceed the time out value BIOS may check BIT7 repeatedly until either the wait time exceeds the time out value or NVDIMM controller indicates acceptance of the SAVE command by asserting BIT7.

Moving from decision block to decision block SAVE CMD.SV 1 BIOS may check BIT6 of the RESTORE CMD field to determine whether NVDIMM controller has completed the RESTORE command. If BIT6 has not been asserted the process moves to block . Otherwise the process moves to decision block .

Moving from decision block to decision block T Save.SV Elapsed Since SAVE CMD 1 BIOS may determine whether a wait time for receiving a command completion indication for the SAVE command has exceeded a time out value indicated in BIT 14 0 of the T Restore.SV field of register map portion . If the wait time has exceeded the time out value a controller error is determined and the process comes to an end. If the wait time does not exceed the time out value BIOS may check BIT6 repeatedly until either the wait time exceeds the time out value or NVDIMM controller indicates completion of the RESTORE command by asserting BIT6.

Moving from decision block to block RESTORE Completed Read RESTORE STATUS BIOS may read RESTORE STATUS indicated by the bits in the RESTORE STATUS field of register map portion that may have been selectively asserted by NVDIMM controller to indicate the status of the completed RESTORE operation. In some examples as shown in a RESTORE STATUS may be returned to BIOS or to an operating system or software e.g. App s of host computing platform based on that indicated status. The process then comes to an end.

The apparatus may be supported by circuitry maintained at an NVDIMM controller that may be coupled to a host computing platform. Circuitry may be arranged to execute one or more software or firmware implemented components . It is worthy to note that a and b and c and similar designators as used herein are intended to be variables representing any positive integer. Thus for example if an implementation sets a value for a 7 then a complete set of software or firmware for components may include components or . The examples presented are not limited in this context and the different variables used throughout may represent the same or different integer values.

According to some examples circuitry may include a processor or processor circuitry. The processor or processor circuitry can be any of various commercially available processors including without limitation an AMD Athlon Duron and Opteron processors ARM application embedded and secure processors IBM and Motorola DragonBall and PowerPC processors IBM and Sony Cell processors Intel Atom Celeron Core 2 Duo Core i3 Core i5 Core i7 Itanium Pentium Xeon Xeon Phi and XScale processors and similar processors. According to some examples circuitry may also be an application specific integrated circuit ASIC and at least some components may be implemented as hardware elements of the ASIC.

According to some examples apparatus may include a receive component . Receive component may be executed by circuitry to receive a status request. For these examples the status request may be included in status request and may be received from a requestor at the host computing platform. The requestor may be coupled in communication with the NVDIMM controller through an SMBus interface. The requestor for example may include a BIOS device driver or application implemented by host circuitry for the host computing platform coupled with the NVDIMM.

In some examples apparatus may also include a status component . Status component may be executed by circuitry to determine a status responsive to the status request. The status may be a status of the NVDIMM controller or a health check status for one or more elements of the NVDIMM such as non volatile or volatile memory modules.

In some examples apparatus may also include an indicate component . Indicate component may be executed by circuitry to indicate the status determined by status component via selective assertion of a first set of bits maintained in a first set of registers to indicate status . For these examples the selective assertion may be based on register map e.g. maintained in a data structure such as a lookup table LUT . The first set of registers may be accessible to the requestor of the status request through the SMBus interface. Also in some examples indicate component may be capable of indicating acceptance and completion status for the request or for possible commands e.g. command s received from the requestor. For example acceptance and completion may be indicated based on register map for acceptance of a request or command and subsequent completion of the request or command via assertion of bits for fields of register map associated with request or command. The registers for the asserted bits may be accessible to the requestor through the SMBus interface for the requestor to determine whether the request or command has been accepted and or completed.

In some examples apparatus may also include a save component . Save component may be executed by circuitry to save data in a first region of non volatile memory for the NVDIMM and maintain an association between a first GUID indicated by the requestor issuing a SAVE command and the first region. For these examples the first GUID may be indicated with a command included in command s . Save component may maintain or have access to GUID associations for maintaining the association between the first GUID and the first region e.g. via a LUT .

In some examples apparatus may also include a restore component . Restore component may be executed by circuitry to restore data from a first region of the non volatile memory. For these examples the first region may have been previously associated with a first GUID e.g. by save component . The first GUID may have been indicated by requestor issuing a RESTORE command. Restore component may have access to GUID associations to determine that the first region has been associated with the first GUID and then carry out the RESTORE command.

In some examples apparatus may also include an erase component . Erase component may be executed by circuitry to erase data from a first region of the non volatile memory. For these examples the first region may have been previously associated with a first GUID e.g. by save component . The first GUID may have been indicated by requestor issuing an ERASE command. Erase component may have access to GUID associations to determine that the first region has been associated with the first GUID and then carry out the ERASE command to erase the data in the first region of the non volatile memory.

In some examples apparatus may also include an Arm component . Arm component may be executed by circuitry to cause one or more capacitors coupled with the NVDIMM to charge or ARM. For these examples save component may be capable of implementing a catastrophic save operation using power supplied by the one or more capacitors to preserve data maintained in the volatile memory of the NVDIMM if a direct current power supply loss is sensed or expected by the NVDIMM controller or an element of the host computing platform e.g. BIOS or a device driver .

Included herein is a set of logic flows representative of example methodologies for performing novel aspects of the disclosed architecture. While for purposes of simplicity of explanation the one or more methodologies shown herein are shown and described as a series of acts those skilled in the art will understand and appreciate that the methodologies are not limited by the order of acts. Some acts may in accordance therewith occur in a different order and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all acts illustrated in a methodology may be required for a novel implementation.

A logic flow may be implemented in software firmware and or hardware. In software and firmware embodiments a logic flow may be implemented by computer executable instructions stored on at least one non transitory computer readable medium or machine readable medium such as an optical magnetic or semiconductor storage. The embodiments are not limited in this context.

According to some examples logic flow at block may receive at a controller a status request the controller for a non volatile memory capable of preserving data maintained in volatile memory the non volatile and the volatile memory resident on an NVDIMM. For these examples receive component may receive the status request from a requestor that may include a BIOS an application or device driver implemented by circuitry at a host computing platform coupled to the NVDIMM.

In some examples logic flow at block may determine a status responsive to the status request. For these examples status component may determine the status.

According to some examples logic flow at block may indicate the status via selective assertion of a first set of bits maintained in a first set of registers. The selective assertion may be based on a register map. The first set of registers may be accessible to a requestor of the status request through an SMBus interface. For these examples indicate component may indicate the status.

In some examples logic flow at block may receive a first command from the requestor via assertion of a second set of bits maintained in a second set of registers. The assertion of the second set of bits may be based on the register map. The second set of registers may be accessible to the requestor through the SMBus interface. For these examples receive component may receive the command.

According to some examples logic flow at block may indicate acceptance and completion status of the first command via assertion of a third set of bits maintained in a third set of registers. The assertion of the third set of bits may be based on the register map. The third set of registers may be accessible to the requestor through the SMBus interface. For these examples indicate component may indicate the acceptance and completion status.

In some examples logic flow at block may indicate a first completion status of the first command via assertion of a fourth set of bits maintained in a fourth set of registers. The assertion of the fourth set of bits may be based on the register map. The first completion status may include a successful completion of the first command or a failure to complete the first command. The fourth set of registers may be accessible to the requestor through the SMBus interface. For these examples indicate component may indicate the first completion status of the first command.

The apparatus may be supported by circuitry maintained at a host computing platform. Circuitry may be arranged to execute one or more software or firmware implemented components . It is worthy to note that a and b and c and similar designators as used herein are intended to be variables representing any positive integer. Thus for example if an implementation sets a value for a 4 then a complete set of software or firmware for components may include components or . The examples presented are not limited in this context and the different variables used throughout may represent the same or different integer values.

In some examples as shown in apparatus includes circuitry . Circuitry may be generally arranged to execute one or more software and or firmware components . Circuitry may be part of a host computing platform s circuitry that includes processing cores e.g. used as a central processing unit CPU . Alternatively circuitry may part of the circuitry in a chipset for the host computing platform. In either scenario circuitry may be a part of any of various commercially available processors to include but not limited to those previously mentioned for circuitry for apparatus . Circuitry may also be part of dual microprocessors multi core processors and other multi processor architectures. According to some examples circuitry may also be an ASIC and components may be implemented as hardware elements of the ASIC.

According to some examples apparatus may include a request component . Request component may be executed by circuitry to send a status request to an NVDIMM controller for an NVDIMM coupled with the host computing platform that includes apparatus . For these examples request component may have access to registers at the NVDIMM controller via an SMBus interface and may send status request using one or more portions of a register map included in register map e.g. maintained in a data structure such as a lookup table LUT accessible to request component .

In some examples apparatus may also include a status component . Status component may be executed by circuitry to access a bits maintained in registers at the NVDIMM controller through the SMBus interface. The bits may indicate a status indicated by the NVDIMM controller responsive to the status request via selective assertion of the bits based on the register map included in register map e.g. maintained in a LUT accessible to status component . For these examples the status may be included in status and status component may use one or more portions of the register map to determine the status indicated by the NVDIMM controller.

According to some examples apparatus may also include a command component . Command component may be executed by circuitry to send commands via assertion of bits maintained in the registers at the NVDIMM controller. The assertion of the bits may be according to one or more portions of the register map included in register map e.g. maintained in a LUT accessible to command component . For these examples the portion of the register map used may be based on the command included in command s such as a SAVE RESTORE Self Refresh Save or an ERASE command. Command component may receive an indication that the command was accepted via acceptance and if accepted an indication of completion of the command via completion . The indications may be indicated by the NVDIMM controller selectively asserting bits based on one or more portions of the register map and based on the command sent by command component .

In some examples apparatus may also include a GUID component . GUID component may be executed by circuitry to indicate a GUID in GUID s for an image or content maintained in the volatile memory to save the image in a region of the non volatile memory and to preserve or maintain an association between the indicated GUID and the region of the non volatile memory. For these examples GUID component may also preserve the association for possible future use for ERASE or RESTORE commands in GUIDs e.g. maintained in a LUT . These GUIDs may be provided to command component for inclusion in these types of ERASE or RESTORE commands when sent.

Various components of apparatus and a host computing platform including apparatus may be communicatively coupled to each other by various types of communications media to coordinate operations. The coordination may involve the uni directional or bi directional exchange of information. For instance the components may communicate information in the form of signals communicated over the communications media. The information can be implemented as signals allocated to various signal lines. In such allocations each message is a signal. Further embodiments however may alternatively employ data messages. Such data messages may be sent across various connections. Example connections include parallel interfaces serial interfaces and bus interfaces.

Included herein is a set of logic flows representative of example methodologies for performing novel aspects of the disclosed architecture. While for purposes of simplicity of explanation the one or more methodologies shown herein are shown and described as a series of acts those skilled in the art will understand and appreciate that the methodologies are not limited by the order of acts. Some acts may in accordance therewith occur in a different order and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all acts illustrated in a methodology may be required for a novel implementation.

A logic flow may be implemented in software firmware and or hardware. In software and firmware embodiments a logic flow may be implemented by computer executable instructions stored on at least one non transitory computer readable medium or machine readable medium such as an optical magnetic or semiconductor storage. The embodiments are not limited in this context.

In the illustrated example shown in logic flow at block may send a status request to a controller for a non volatile memory capable of preserving data maintained in volatile memory. The non volatile and the volatile memory may be resident on an NVDIMM coupled with a host computing platform. For these examples request component may cause the status request to be sent.

According to some examples logic flow at block may access a first set of bits maintained in a first set of registers through an SMBus interface. The first set of bits may indicate a status indicated by the controller responsive to the status request via selective assertion of the first set of bits based on a register map. For these examples status component may access the first set of bits through the SMBus interface and may determine the status indicated by the controller based on the register map.

According to some examples logic flow at block may send a first command via assertion of a second set of bits maintained in a second set of registers. The assertion of the second set of bits may be based on the register map. The second set of registers may also be accessible through the SMBus interface. For these examples command component may cause the command to be sent by asserting the second set of bits based on the register map.

In some examples logic flow at block receive an indication of acceptance and completion status of the first command via assertion by the controller of a third set of bits maintained in a third set of registers. The third set of bits may be asserted based on the register map. The third set of registers may also be accessible through the SMBus interface. For these examples command component may be capable of accessing the third set of registers to determine which bits have been asserted and to determine whether acceptance and completion of the command was indicated based on the register map.

According to some examples processing component may execute processing operations or logic for apparatus and or storage medium . Processing component may include various hardware elements software elements or a combination of both. Examples of hardware elements may include devices logic devices components processors microprocessors circuits processor circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA memory units logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software elements may include software components programs applications computer programs application programs device drivers system programs software development programs machine programs operating system software middleware firmware software components routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an example is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints as desired for a given example.

In some examples other platform components may include common computing elements such as one or more processors multi core processors co processors memory units chipsets controllers peripherals interfaces oscillators timing devices video cards audio cards multimedia input output I O components e.g. digital displays power supplies and so forth. Examples of memory units may include without limitation various types of computer readable and machine readable storage media in the form of one or more higher speed memory units such as read only memory ROM random access memory RAM dynamic RAM DRAM Double Data Rate DRAM DDRAM synchronous DRAM SDRAM static RAM SRAM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory polymer memory such as ferroelectric polymer memory ovonic memory phase change or ferroelectric memory silicon oxide nitride oxide silicon SONOS memory magnetic or optical cards an array of devices such as Redundant Array of Independent Disks RAID drives solid state memory devices e.g. USB memory solid state drives SSD and any other type of storage media suitable for storing information.

In some examples communications interface may include logic and or features to support a communication interface. For these examples communications interface may include one or more communication interfaces that operate according to various communication protocols or standards to communicate over direct or network communication links. Direct communications may occur via use of communication protocols or standards described in one or more industry standards including progenies and variants such as those associated with the SMBus specification or the PCI Express specification. Network communications may occur via use of communication protocols or standards such those described in one or more Ethernet standards promulgated by the Institute of Electrical and Electronics Engineers IEEE . For example one such Ethernet standard may include IEEE 802.3 2008 Carrier sense Multiple access with Collision Detection CSMA CD Access Method and Physical Layer Specifications Published in December 2008 hereinafter IEEE 802.3 .

Computing platform may be part of a computing device that may be for example a server a server array or server farm a web server a network server an Internet server a work station a mini computer a main frame computer a supercomputer a network appliance a web appliance a distributed computing system multiprocessor systems processor based systems or combination thereof. Accordingly functions and or specific configurations of computing platform described herein may be included or omitted in various embodiments of computing platform as suitably desired.

The components and features of computing platform may be implemented using any combination of discrete circuitry application specific integrated circuits ASICs logic gates and or single chip architectures. Further the features of computing platform may be implemented using microcontrollers programmable logic arrays and or microprocessors or any combination of the foregoing where suitably appropriate. It is noted that hardware firmware and or software elements may be collectively or individually referred to herein as logic or circuit. 

It should be appreciated that the example computing platform shown in the block diagram of may represent one functionally descriptive example of many potential implementations. Accordingly division omission or inclusion of block functions depicted in the accompanying figures does not infer that the hardware components circuits software and or elements for implementing these functions would necessarily be divided omitted or included in embodiments.

According to some examples processing component may execute processing operations or logic for apparatus and or storage medium . Processing component may include various hardware elements software elements or a combination of both. Examples of hardware elements may include devices logic devices components processors microprocessors circuits processor circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA memory units logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software elements may include software components programs applications computer programs application programs device drivers system programs software development programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an example is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints as desired for a given example.

In some examples other controller components may include common computing elements such as one or more processors multi core processors co processors memory units interfaces oscillators timing devices and so forth. Examples of memory units may include without limitation various types of computer readable and machine readable storage media in the form of one or more higher speed memory units such as ROM RAM DRAM DDRAM SDRAM SRAM PROM EPROM EEPROM flash memory or any other type of storage media suitable for storing information.

In some examples communications interface may include logic and or features to support a communication interface. For these examples communications interface may include one or more communication interfaces that operate according to various communication protocols or standards to communicate over communication links or channels. Communications may occur via use of communication protocols or standards described in one or more industry standards including progenies and variants such as those associated with the PCI Express specification or the SMBus specification.

The components and features of NVDIMM controller may be implemented using any combination of discrete circuitry application specific integrated circuits ASICs logic gates and or single chip architectures. Further the features of NVDIMM controller may be implemented using microcontrollers programmable logic arrays and or microprocessors or any combination of the foregoing where suitably appropriate. It is noted that hardware firmware and or software elements may be collectively or individually referred to herein as logic or circuit. 

It should be appreciated that the example NVDIMM controller shown in the block diagram of may represent one functionally descriptive example of many potential implementations. Accordingly division omission or inclusion of block functions depicted in the accompanying figures does not infer that the hardware components circuits software and or elements for implementing these functions would necessarily be divided omitted or included in embodiments.

One or more aspects of at least one example may be implemented by representative instructions stored on at least one machine readable medium which represents various logic within the processor which when read by a machine computing device or system causes the machine computing device or system to fabricate logic to perform the techniques described herein. Such representations may be stored on a tangible machine readable medium and supplied to various customers or manufacturing facilities to load into the fabrication machines that actually make the logic or processor.

Various examples may be implemented using hardware elements software elements or a combination of both. In some examples hardware elements may include devices components processors microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits ASICs PLDs DSPs FPGAs memory units logic gates registers semiconductor device chips microchips chip sets and so forth. In some examples software elements may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces APIs instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an example is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints as desired for a given implementation.

Some examples may include an article of manufacture or at least one computer readable medium. A computer readable medium may include a non transitory storage medium to store logic. In some examples the non transitory storage medium may include one or more types of computer readable storage media capable of storing electronic data including volatile memory or non volatile memory removable or non removable memory erasable or non erasable memory writeable or re writeable memory and so forth. In some examples the logic may include various software elements such as software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof.

According to some examples a computer readable medium may include a non transitory storage medium to store or maintain instructions that when executed by a machine computing device or system cause the machine computing device or system to perform methods and or operations in accordance with the described examples. The instructions may include any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code and the like. The instructions may be implemented according to a predefined computer language manner or syntax for instructing a machine computing device or system to perform a certain function. The instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language.

Some examples may be described using the expression in one example or an example along with their derivatives. These terms mean that a particular feature structure or characteristic described in connection with the example is included in at least one example. The appearances of the phrase in one example in various places in the specification are not necessarily all referring to the same example.

Some examples may be described using the expression coupled and connected along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example descriptions using the terms connected and or coupled may indicate that two or more elements are in direct physical or electrical contact with each other. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other.

An example apparatus may include circuitry at a controller for a non volatile memory capable of preserving data maintained in volatile memory. The non volatile and the volatile memory may be resident on an NVDIMM. The example apparatus may also include a receive component for execution by the circuitry to receive a status request. The example apparatus may also include a status component for execution by the circuitry to determine a status responsive to the status request. The example apparatus may also include an indicate component for execution by the circuitry to indicate the status via selective assertion of a first set of bits maintained in a first set of registers of the NVDIMM. For this example the selective assertion may be based on a register map.

The example apparatus of example 1 the first set of registers may be accessible to a requestor of the status request through an SMBus interface.

The example apparatus of example 2 the requester may include a basic input output system BIOS an application or a device driver implemented by host circuitry at a host computing platform coupled with the NVDIMM.

The example apparatus of example 1 the status request may include a request for a health status of the NVDIMM.

The example apparatus of example 1 the status request may include a request for a state of the controller or of the NVDIMM.

The example apparatus of example 5 the indicate component may indicate the status as at least one of a busy controller a not busy controller a save in progress an abort save in progress a restore in progress an abort restore in progress an erase in progress an abort erase in progress save pin not asserted on a previous start up or boot of the NVDIMM save pin asserted on a previous start up or boot of the NVDIMM that triggered a catastrophic save catastrophic save successful or catastrophic save not successful.

The example apparatus of example 2 also including the receive component to receive a first command from the requestor via assertion of a second set of bits maintained in a second set of registers of the NVDIMM. For this examples the assertion of the second set of bits may be based on the register map the second set of registers accessible to the requestor through the SMBus interface. The example apparatus of example 2 also including the indicate component to indicate acceptance and completion status of the first command via assertion of a third set of bits maintained in a third set of registers of the NVDIMM the assertion of the third set of bits based on the register map. For this example the third set of registers may be accessible to the requestor through the SMBus interface.

The example apparatus of example 7 the indicate component may indicate a first completion status of the first command via assertion of a fourth set of bits maintained in a fourth set of registers of the NVDIMM. For this example the assertion of the fourth set of bits may be based on the register map. The first completion status may include a successful completion of the first command or a failure to complete the first command. The fourth set of registers may be accessible to the requestor through the SMBus interface.

The example apparatus of example 8 also including the receive component to receive an abort command from the requestor to abort the first command via assertion of a fifth set of bits maintained in a fifth set of registers of the NVDIMM. For this example the assertion of the fifth set of bits may be based on the register map. The fifth set of registers accessible to the requestor through the SMBus interface. The example apparatus of example 8 also including the indicate component to indicate acceptance of the abort command and subsequent completion of the abort command via assertion of a sixth set of bits maintained in a sixth set of registers of the NVDIMM. The assertion of the sixth set of bits may be based on the register map. The sixth set of registers may be accessible to the requestor through the SMBus interface.

The example apparatus of example 8 the first command may include a save command to preserve data maintained in the volatile memory at a given point in time.

The example apparatus of example 8 also including a save component for execution by the circuitry to save the data in a first region of the non volatile memory and maintain an association between a first GUID indicated by the requestor. For this example the GUID may be indicated with the save command.

The example apparatus of example 8 the first command may include a restore command to restore data saved in the non volatile memory to the volatile memory.

The example apparatus of example 12 also including a restore component for execution by the circuitry to restore the data from a first region of the non volatile memory. For this example the first region may have been previously associated with a first GUID indicated by the requestor the GUID indicated with the restore command.

The example apparatus of example 8 the first command may include an erase command to erase data saved in the non volatile memory.

The example apparatus of example 14 also including an erase component for execution by the circuitry to erase the data from a first region of the non volatile memory. For this example the first region may have been previously associated with a first GUID indicated by the requestor. The GUID may be indicated with the erase command.

The example apparatus of example 8 also include the first command received by the receive component is an arm command. The example apparatus of example 8 also including an arm component for execution by the circuitry to cause one or more capacitors coupled with the NVDIMM to charge. The example apparatus of example 8 also including a save component for execution by the circuitry capable of implementing a catastrophic save using power supplied by the one or more capacitors to preserve data maintained in the volatile memory if a direct current power supply loss is sensed or expected.

The example apparatus of example 16 also including the receive component to receive a disarm command from the requestor. For this example the disarm command may be received via assertion of a fifth set of bits maintained in a fifth set of registers of the NVDIMM. The assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to the requestor through the SMBus interface. For this example the arm component may allow the one or more capacitors to discharge responsive to the disarm command. Also for this example the indicate component may indicate acceptance of the disarm command and subsequent completion of the disarm command via assertion of a sixth set of bits maintained in a sixth set of register of the NVDIMM. The assertion of the sixth set of bits may be based on the register map. The sixth set of registers may be accessible to the requestor through the SMBus interface.

The example apparatus of example 1 the non volatile memory may include NAND flash memory and the volatile memory may include DRAM.

An example method may include receiving at a controller a status request the controller for a non volatile memory capable of preserving data maintained in volatile memory. The non volatile and the volatile memory may be resident on an NVDIMM. The example method may also include determining a status responsive to the status request and indicating the status via selective assertion of a first set of bits maintained in a first set of registers of the NVDIMM. The selective assertion may be based on a register map.

The example method of example 19 the first set of registers may be accessible to a requestor of the status request through an SMBus interface.

The example method of example 20 the requester may include BIOS an application or a device driver implemented by circuitry at a host computing platform coupled with the NVDIMM.

The example method of example 19 the status request may include a request for a health status of the NVDIMM.

The example method of example 19 the status request may include a request for a state of the controller or of the NVDIMM.

The example method of example 23 indicating the status may include indicating at least one of a busy controller a not busy controller a save in progress an abort save in progress a restore in progress an abort restore in progress an erase in progress an abort erase in progress save pin not asserted on a previous start up or boot of the NVDIMM save pin asserted on a previous start up or boot of the NVDIMM that triggered a catastrophic save catastrophic save successful or catastrophic save not successful.

The example method of example 20 also including receiving a first command from the requestor via assertion of a second set of bits maintained in a second set of registers of the NVDIMM. For this example the assertion of the second set of bits may be based on the register map. The second set of registers may be accessible to the requestor through the SMBus interface. The example method of example 20 also including indicating acceptance and completion status of the first command via assertion of a third set of bits maintained in a third set of registers of the NVDIMM. The assertion of the third set of bits may be based on the register map. The third set of registers may be accessible to the requestor through the SMBus interface.

The example method of example 25 also including indicating a first completion status of the first command via assertion of a fourth set of bits maintained in a fourth set of registers of the NVDIMM. For this example the assertion of the fourth set of bits may be based on the register map. The first completion status may include a successful completion of the first command or a failure to complete the first command the fourth set of registers accessible to the requestor through the SMBus interface.

The example method of example 25 also including receiving an abort command from the requestor to abort the first command via assertion of a fifth set of bits maintained in a fifth set of registers of the NVDIM. For this example the assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to the requestor through the SMBus interface. Also the example method of example 25 may include indicating acceptance of the abort command and subsequent completion of the abort command via assertion of a sixth set of bits maintained in a sixth set of register of the NVDIMM the assertion of the sixth set of bits based on the register map. The sixth set of registers may be accessible to the requestor through the SMBus interface.

The example method of example 26 the first command may include a save command to preserve data maintained in the volatile memory at a given point in time.

The example method of example 28 the requestor to indicate a first GUID for the controller to save the data in a first region of the non volatile memory and preserve an association between the first GUID and the first region.

The example method of example 26 the first command may include a restore command to restore data saved in the non volatile memory to the volatile memory.

The example method of example 30 the requestor may indicate a first GUID for the controller to restore the data from a first region of the non volatile memory. The first region may have been previously associated with the first GUID by the controller.

The example method of example 26 the first command may include an erase command to erase data saved in the non volatile memory.

The example method of example 32 the request may indicate a first GUID for the controller to erase the data from a first region of the non volatile memory. The first region may have been previously associated with the first GUID by the controller.

The example method of example 26 the first command may include an arm command indicating to the controller to cause one or more capacitors coupled with the NVDIMM to charge and enable the controller to implement a catastrophic save using power supplied by the one or more capacitors to preserve data maintained in the volatile memory if a direct current power supply loss is sensed or expected.

The example method of example 34 also including receiving a disarm command from the requestor indicating to the controller to allow the one or more capacitors to discharge. The disarm command may be received via assertion of a fifth set of bits maintained in a fifth set of register of the NVDIMM. The assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to the requestor through the SMBus interface. The example method of example 34 also including indicating acceptance of the disarm command and subsequent completion of the disarm command via assertion of a sixth set of bits maintained in a sixth set of register of the NVDIMM. The assertion of the sixth set of bits may be based on the register map. The sixth set of registers may be accessible to the requestor through the SMBus interface.

The example method of example 19 the non volatile memory including NAND flash memory and the volatile memory including DRAM.

An example machine readable medium including a plurality of instructions that in response to being executed by a controller for a non volatile memory capable of preserving data maintained in volatile memory. The non volatile and the volatile memory may be resident on an NVDIMM and the instructions may cause the controller to carry out a method according to any one of examples 19 to 35.

An example machine readable medium including a plurality of instructions that in response to being executed by a controller for a non volatile memory capable of preserving data maintained in volatile memory. The non volatile and the volatile memory may be resident on an NVDIMM. The instructions may cause the controller to receive a status request. The instructions may also cause the controller to determine a status responsive to the status request. The instructions may also cause the controller to indicate the status via selective assertion of a first set of bits maintained in a first set of register of the NVDIM. The selective assertion may be based on a register map.

The example at least one machine readable medium of example 39 the first set of registers accessible to a requestor of the status request through an SMBus interface.

The example at least one machine readable medium of example 40 the requester may include a basic input output system BIOS an application or a device driver implemented by circuitry at a host computing platform coupled with the NVDIMM.

The example at least one machine readable medium of example 40 the status request may include a request for a health status of the NVDIMM.

The example at least one machine readable medium of example 40 the status request may include a request for a state of the controller or of the NVDIMM.

The example at least one machine readable medium of example 43 the instructions may cause the controller to indicate the status by indicating at least one of a busy controller a not busy controller a save in progress an abort save in progress a restore in progress an abort restore in progress an erase in progress an abort erase in progress save pin not asserted on a previous start up or boot of the NVDIMM save pin asserted on a previous start up or boot of the NVDIMM that triggered a catastrophic save catastrophic save successful or catastrophic save not successful.

The example at least one machine readable medium of example 40 also including instructions to cause the controller to receive a first command from the requestor via assertion of a second set of bits maintained in a second set of register of the NVDIMM. The assertion of the second set of bits may be based on the register map the second set of registers accessible to the requestor through the SMBus interface. The example at least one machine readable medium of example 40 also including instructions to cause the controller to indicate acceptance and completion status of the first command via assertion of a third set of bits maintained in a third set of registers of the NVDIM. The assertion of the third set of bits based on the register map. The third set of registers may be accessible to the requestor through the SMBus interface.

The example at least one machine readable medium of example 45 also including instructions to cause the controller to indicate a first completion status of the first command via assertion of a fourth set of bits maintained in a fourth set of register of the NVDIMM. The assertion of the fourth set of bits may be based on the register map. The first completion status may include a successful completion of the first command or a failure to complete the first command the fourth set of registers accessible to the requestor through the SMBus interface.

The example at least one machine readable medium of example 44 also including instructions to cause the controller to receive an abort command from the requestor to abort the first command via assertion of a fifth set of bits maintained in a fifth set of register of the NVDIMM. The assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to the requestor through the SMBus interface. The example at least one machine readable medium of example 44 also including instructions to cause the controller to indicate acceptance of the abort command and subsequent completion of the abort command via assertion of a sixth set of bits maintained in a sixth set of register of the NVDIMM. The assertion of the sixth set of bits may be based on the register map. The sixth set of registers may be accessible to the requestor through the SMBus interface.

The example at least one machine readable medium of example 46 the first command may include a save command to preserve data maintained in the volatile memory at a given point in time.

The example at least one machine readable medium of example 46 the requestor may indicate a first GUID for the controller to save the data in a first region of the non volatile memory and preserve an association between the first GUID and the first region.

The example at least one machine readable medium of example 46 the first command may include a restore command to restore data saved in the non volatile memory to the volatile memory.

The example at least one machine readable medium of example 50 the requestor may indicate a first GUID for the controller to restore the data from a first region of the non volatile memory. The first region may have been previously associated with the first GUID by the controller.

The example at least one machine readable medium of example 46 the first command may include an erase command to erase data saved in the non volatile memory.

The example at least one machine readable medium of example 52 the request may indicate a first GUID for the controller to erase the data from a first region of the non volatile memory. The first region may have been previously associated with the first GUID by the controller.

The example at least one machine readable medium of example 46 the first command may include an arm command indicating to the controller to cause one or more capacitors coupled with the NVDIMM to charge and enable the controller to implement a catastrophic save using power supplied by the one or more capacitors to preserve data maintained in the volatile memory if a direct current power supply loss is sensed or expected.

The example at least one machine readable medium of example 54 also including instructions to cause the controller to receive a disarm command from the requestor indicating to the controller to allow the one or more capacitors to discharge. The disarm command may be received via assertion of a fifth set of bits maintained in a fifth set of register of the NVDIMM. The assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to the requestor through the SMBus interface. The example at least one machine readable medium of example 54 also including instructions to cause the controller to indicate acceptance of the disarm command and subsequent completion of the disarm command via assertion of a sixth set of bits maintained in a sixth set of register of the NVDIMM. The assertion of the sixth set of bits may be based on the register map. The sixth set of registers may be accessible to the requestor through the SMBus interface.

The example at least one machine readable medium of example 46 the non volatile memory may include NAND flash memory and the volatile memory including DRAM.

An example method may include sending at a device driver implemented by circuitry at a host computing platform a status request to a controller for a non volatile memory capable of preserving data maintained in volatile memory. For this example the non volatile and the volatile memory may be resident on an NVDIMM coupled with the host computing platform. The example method may also include accessing a first set of bits maintained in a first set of register of the NVDIMM through an SMBus interface. The first set of bits may indicate a status indicated by the controller responsive to the status request via selective asserting of the first set of bits based on a register map.

The method of example 57 the status request may include a request for a state of the controller or of the NVDIMM.

The method of example 59 the indicated status may include at least one of a busy controller a not busy controller a save in progress an abort save in progress a restore in progress an abort restore in progress an erase in progress an abort erase in progress save pin not asserted on a previous start up or boot of the NVDIMM save pin asserted on a previous start up or boot of the NVDIMM that triggered a catastrophic save catastrophic save successful or catastrophic save not successful.

The method of example 57 also including sending a first command via assertion of a second set of bits maintained in a second set of register of the NVDIMM. The assertion of the second set of bits may be based on the register map. The second set of registers may be accessible to the device driver through the SMBus interface. The method of example 57 also including receiving an indication of acceptance and completion status of the first command via assertion by the controller of a third set of bits maintained in a third set of registers of the NVDIMM. The third set of bits may be asserted based on the register map. The third set of registers may be accessible to the device driver through the SMBus interface.

The method of example 61 also including receiving an indication of a first completion status of the first command via assertion by the controller of a fourth set of bits maintained in a fourth set of register of the NVDIMM. The fourth set of bits may be asserted based on the register map. The completion status may include a successful completion of the first command or a failure to complete the first command. The fourth set of registers may be accessible to the device driver through the SMBus interface.

The method of example 62 also including sending an abort command to abort the first command via assertion of a fifth set of bits maintained in a fifth set of register of the NVDIMM. The assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to the device driver through the SMBus interface. The method of example 62 also including receiving an indication of acceptance of the abort command and subsequent completion of the abort command via assertion by the controller of a sixth set of bits maintained in a sixth set of register of the NVDIMM. The assertion of the sixth set of bits may be based on the register map. The sixth set of registers may be accessible to the device driver through the SMBus interface.

The method of example 62 the first command may include a save command to preserve data maintained in the volatile memory at a given point in time.

The method of example 64 also including indicating a first GUID for the controller to save the data in a first region of the non volatile memory and preserve an association between the first GUID and the first region.

The method of example 62 the first command may include a restore command to restore data saved in the non volatile memory to the volatile memory.

The method of example 66 also including indicating a first GUID for the controller to restore the data from a first region of the non volatile memory the first region previously associated with the first GUID by the controller.

The method of example 62 the first command may include an erase command to erase data saved in the non volatile memory.

The method of example 68 also including indicating a first GUID for the controller to erase the data from a first region of the non volatile memory. The first region may have been previously associated with the first GUID by the controller.

The method of example 62 the first command may include an arm command indicating to the controller to cause one or more capacitors coupled with the NVDIMM to charge and enable the controller to implement a catastrophic save using power supplied by the one or more capacitors to preserve data maintained in the volatile memory if a direct current power supply loss is sensed or expected.

The method of example 70 also including sending a disarm command indicating to the controller to allow the one or more capacitors to discharge. For this example the disarm command may be sent via assertion of a fifth set of bits maintained in a fifth set of register of the NVDIMM. The assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to the device driver through the SMBus interface. The method of example 70 also including receiving an indication of acceptance of the disarm command and subsequent completion of the disarm command via assertion by the controller of a sixth set of bits maintained in a sixth set of register of the NVDIMM. The assertion of the sixth set of bits may be based on the register map. The sixth set of registers may be accessible to the device driver through the SMBus interface.

The method of example 57 the non volatile memory may include NAND flash memory and the volatile memory may include DRAM.

At least one machine readable medium including a plurality of instructions that in response to being executed by system at a host computing platform may cause the system to carry out a method according to any one of examples 57 to 72.

At least one machine readable medium may include a plurality of instructions that in response to being executed by system at a host computing platform may cause the system to send a status request to a controller for a non volatile memory capable of preserving data maintained in volatile memory. The non volatile and the volatile memory may be resident on an NVDIMM coupled with the host computing platform. The instructions may also cause the system to access a first set of bits maintained in a first set of register of the NVDIMM through an SMBus interface. The first set of bits may indicate a status indicated by the controller responsive to the status request via selective asserting of the first set of bits based on a register map.

The at least one machine readable medium of example 75 the status request may include a request for a health status of the NVDIMM.

The at least one machine readable medium of example 75 the status request may include a request for a state of the controller or of the NVDIMM.

The at least one machine readable medium of example 77 the indicated status may include at least one of a busy controller a not busy controller a save in progress an abort save in progress a restore in progress an abort restore in progress an erase in progress an abort erase in progress save pin not asserted on a previous start up or boot of the NVDIMM save pin asserted on a previous start up or boot of the NVDIMM that triggered a catastrophic save catastrophic save successful or catastrophic save not successful.

The at least one machine readable medium of example 75 the instructions to also cause the system to send a first command via assertion of a second set of bits maintained in a second set of register of the NVDIMM. The assertion of the second set of bits may be based on the register map. The second set of registers may be accessible through the SMBus interface. The instructions to also cause the system to receive an indication of acceptance and completion status of the first command via assertion by the controller of a third set of bits maintained in a third set of registers of the NVDIMM. The third set of bits may be asserted based on the register map. The third set of registers may be accessible through the SMBus interface.

The at least one machine readable medium of example 79 the instructions to also cause the system to receive an indication of a first completion status of the first command via assertion by the controller of a fourth set of bits maintained in a fourth set of register of the NVDIMM. The fourth set of bits may be asserted based on the register map. The first completion status may include a successful completion of the first command or a failure to complete the first command.

The at least one machine readable medium of example 80 the instructions to also cause the system to send an abort command to abort the first command via assertion of a fifth set of bits maintained in a fifth set of register of the NVDIMM. The assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to through the SMBus interface. The instructions to also cause the system to receive an indication of acceptance of the abort command and subsequent completion of the abort command via assertion by the controller of a sixth set of bits maintained in a sixth set of register of the NVDIMM. The assertion of the sixth set of bits may be based on the register map. The sixth set of registers may be accessible through the SMBus interface.

The at least one machine readable medium of example 80 the first command may include a save command to preserve data maintained in the volatile memory at a given point in time.

The at least one machine readable medium of example 82 the instructions to also cause the system to indicate a first GUID for the controller to save the data in a first region of the non volatile memory and preserve an association between the first GUID and the first region.

The at least one machine readable medium of example 80 the first command may include a restore command to restore data saved in the non volatile memory to the volatile memory.

The at least one machine readable medium of example 84 the instructions to also cause the system to indicate a first GUID for the controller to restore the data from a first region of the non volatile memory the first region previously associated with the first GUID by the controller.

The at least one machine readable medium of example 80 the first command may include an erase command to erase data saved in the non volatile memory.

The at least one machine readable medium of example 86 the instructions to also cause the system to indicate a first GUID for the controller to erase the data from a first region of the non volatile memory. The first region may have been previously associated with the first GUID by the controller.

The at least one machine readable medium of example 80 the first command may include an arm command that indicates to the controller to cause one or more capacitors coupled with the NVDIMM to charge and enable the controller to implement a catastrophic save using power supplied by the one or more capacitors to preserve data maintained in the volatile memory if a direct current power supply loss is sensed or expected.

The at least one machine readable medium of example 88 the instructions to also cause the system to send a disarm command that indicates to the controller to allow the one or more capacitors to discharge. For this example the disarm command may be sent via assertion of a fifth set of bits maintained in a fifth set of register of the NVDIMM. The assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to the device driver through the SMBus interface. The instructions may also cause the system to receive an indication of acceptance of the disarm command and subsequent completion of the disarm command via assertion by the controller of a sixth set of bits maintained in a sixth set of register of the NVDIMM. The assertion of the sixth set of bits may be based on the register map the sixth set of registers accessible through the SMBus interface.

The at least one machine readable medium of example 75 the non volatile memory may include NAND flash memory and the volatile memory may include DRAM.

The at least one machine readable medium of example 75 the system may include a basic input output system BIOS an application or a device driver.

A system may include circuitry for a host computing platform to implement a BIOS an application or a device driver. The system may also include an NVDIMM having resident non volatile memory and volatile memory. The non volatile memory may be capable of preserving data maintained in a volatile memory. The system may also include a controller for the non volatile memory. The controller may be operative to receive a status request from the BIOS the application or the device driver. The status request may include one of a request for a health status of the NVDIMM a state of the controller or a state of the NVDIMM. The controller may also be operative to determine a status responsive to the status request and indicate the status via selective assertion of a first set of bits maintained in a first set of registers of the NVDIMM. The selective assertion may be based on a register map.

The system of example 92 may include the first set of registers being accessible to the BIOS the application or the device driver through a system management bus SMBus interface.

The system of example 93 the controller also operative to receive a command from the BIOS the application or the device driver via assertion of a second set of bits maintained in a second set of registers of the NVDIMM. For this example the assertion of the second set of bits may be based on the register map. The second set of registers may be accessible to the BIOS the application or the device driver through the SMBus interface. The controller may also be operative to indicate acceptance and completion status of the command via assertion of a third set of bits maintained in a third set of registers of the NVDIMM. The assertion of the third set of bits may be based on the register map. The third set of registers may be accessible to the BIOS the application or the device driver through the SMBus interface. The controller may also be operative to indicate a completion status of the command via assertion of a fourth set of bits maintained in a fourth set of registers of the NVDIMM. The assertion of the fourth set of bits may be based on the register map. The completion status may include a successful completion of the command or a failure to complete the command. The fourth set of registers may be accessible to the BIOS the application or the device driver through the SMBus interface.

The system of example 94 the controller also operative to receive an abort command from the BIOS the application or the device driver to abort the command via assertion of a fifth set of bits maintained in a fifth set of registers of the NVDIMM. For this example the assertion of the fifth set of bits may be based on the register map. The fifth set of registers may be accessible to the BIOS the application or the device driver through the SMBus interface. The controller may also be operative to indicate acceptance of the abort command and subsequent completion of the abort command via assertion of a sixth set of bits maintained in a sixth set of registers of the NVDIMM. The assertion of the sixth set of bits may be based on the register map. The sixth set of registers may be accessible to the BIOS the application or the device driver through the SMBus interface.

It is emphasized that the Abstract of the Disclosure is provided to comply with 37 C.F.R. Section 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single example for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed examples require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed example. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate example. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein respectively. Moreover the terms first second third and so forth are used merely as labels and are not intended to impose numerical requirements on their objects.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

