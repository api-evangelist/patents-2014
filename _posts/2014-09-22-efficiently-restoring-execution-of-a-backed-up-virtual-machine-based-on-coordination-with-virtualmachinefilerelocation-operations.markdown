---

title: Efficiently restoring execution of a backed up virtual machine based on coordination with virtual-machine-file-relocation operations
abstract: Systems and methods enable a virtual machine, including applications executing thereon, to quickly start executing and servicing users based on pre-staged data blocks supplied from a backup copy in secondary storage. Substantially concurrently with the ongoing execution of the virtual machine, a virtual-machine-file-relocation operation moves data blocks from backup to a primary storage destination that becomes the virtual machine's primary data store after relocation completes. An enhanced data agent, operating in conjunction with an enhanced media agent in a storage management system, coordinates restoring the virtual machine and launching the relocation operation. The enhanced media agent pre-stages certain backed up data blocks based on predictive analysis pertaining to the virtual machine's operational profile. The enhanced media agent also pre-stages backed up data blocks for the relocation operation, based on the operation's relocation scheme. The media agent tracks read requests and maintains the contents of an associated read cache.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09417968&OS=09417968&RS=09417968
owner: COMMVAULT SYSTEMS, INC.
number: 09417968
owner_city: Tinton Falls
owner_country: US
publication_date: 20140922
---
Any and all applications if any for which a foreign or domestic priority claim is identified in the Application Data Sheet of the present application are hereby incorporated by reference under 37 CFR 1.57.

Businesses worldwide recognize the commercial value of their data and seek reliable cost effective ways to protect the data stored on their computer networks while minimizing impact on productivity. A company might back up critical computing systems such as virtual machines databases file servers web servers and so on. The company may similarly protect computing devices used by each of its employees.

Companies also seek innovative techniques for managing the costs associated with explosive data growth. For instance companies often migrate data to lower cost storage over time and employ data reduction techniques for reducing redundant data and pruning lower priority data etc. For example virtual machines that are backed up but rarely used may reside in lower cost secondary storage at any given time yet may need to be quickly restored to service.

The present inventors devised systems and methods for efficiently and relatively rapidly restoring a virtual machine hereinafter VM from backup into a production environment. This scenario may be referred to herein as instant VM restore. Instant VM restore is based in part on understanding and applying the characteristics of the VM s operational profile. Based on the operational profile one or more components of a storage management system may perform predictive analysis and pre stage certain backed up data blocks to a read cache component which may substantially shorten the time needed to boot the VM and any applications executing thereon.

The disclosed systems and methods enable the VM including any applications executing thereon to begin executing relatively quickly and start servicing users based on pre staged data blocks supplied from a backup copy in secondary storage. Pre staging of data blocks may be further based on user selections of certain VM files via file manager that is integrated with virtualization thus enabling the illustrative system to pre stage data blocks belonging to user selected files over other VM associated files available from backup. Substantially concurrently with the ongoing execution of the VM a virtual machine file relocation hereinafter VMFR or relocation operation may move data blocks originating in the backup copy to a primary storage destination that becomes the virtual machine s primary data store after the relocation operation completes.

An illustrative storage management system comprises an enhanced data agent an enhanced media agent with an associated read cache a VM backup copy in secondary storage and a host computing device that hosts execution of the VM and the relocation operation within the system. The enhanced data agent operating in conjunction with the enhanced media agent coordinates the restoring of the virtual machine and the launch of the relocation operation. The enhanced media agent may pre stage certain backed up data blocks which may be needed to launch VM execution based on predictive analysis pertaining to the VM s operational profile. The enhanced media agent may also pre stage backed up data blocks for the relocation operation based on the operation s relocation scheme. Servicing read requests to the virtual machine may take priority over ongoing pre staging of backed up data. Read requests may be tracked so that the media agent may properly maintain the contents of the associated read cache and periodically purge the read cache after backed up data blocks are relocated to primary storage.

Some embodiments of the illustrative storage management system may lack or may simply not require the relocation operation. This scenario may be referred to herein as live mount. For example a user may wish quick access to a given VM on the host computing device perhaps for purposes of checking settings or other operational characteristics of the VM or of application s executing thereon or to view certain VM associated files in backup. However if the user s objective is not to restore the VM to a production environment therefore backed up data need not be relocated to primary storage. Instead the user may be satisfied to live mount the VM based on relatively efficient access to the backup copy. Accordingly the enhanced media agent may pre stage certain backed up data blocks to the media agent s read cache based on predictive analysis pertaining to the VM s operational profile and or user selections of desired backed up files. Backed up data blocks are not relocated. After the VM expires the media agent may empty the read cache and may de associate the backup media from the VM although the VM backup copy remains safely stored in secondary storage.

Systems and methods are disclosed for efficiently restoring execution of a backed up virtual machine based on coordination with virtual machine file relocation VMFR or relocation operations and for efficiently live mounting a backed up virtual machine in a storage management system according to illustrative embodiments of the present invention. Examples of such systems and methods are described in further detail herein in reference to . The disclosed components and functionality may be configured and or incorporated into information management systems such as those described herein in .

An exemplary storage management system is disclosed which may comprise one or more components and or functionality of an information management system as described in further detail below.

With the increasing importance of protecting and leveraging data organizations simply cannot afford to take the risk of losing critical data. Moreover runaway data growth and other modern realities make protecting and managing data an increasingly difficult task. There is therefore a need for efficient powerful and user friendly solutions for protecting and managing data.

Depending on the size of the organization there are typically many data production sources which are under the purview of tens hundreds or even thousands of employees or other individuals. In the past individual employees were sometimes responsible for managing and protecting their data. A patchwork of hardware and software point solutions has been applied in other cases. These solutions were often provided by different vendors and had limited or no interoperability.

Certain embodiments described herein provide systems and methods capable of addressing these and other shortcomings of prior approaches by implementing unified organization wide information management. shows one such information management system which generally includes combinations of hardware and software configured to protect and manage data and metadata which is generated and used by the various computing devices in information management system . The organization that employs the information management system may be a corporation or other business entity non profit organization educational institution household governmental agency or the like.

Generally the systems and associated components described herein may be compatible with and or provide some or all of the functionality of the systems and corresponding components described in one or more of the following U.S. patents and patent application publications assigned to CommVault Systems Inc. each of which is hereby incorporated in its entirety by reference herein 

The information management system can include a variety of different computing devices. For instance as will be described in greater detail herein the information management system can include one or more client computing devices and secondary storage computing devices .

Computing devices can include without limitation one or more workstations personal computers desktop computers or other types of generally fixed computing systems such as mainframe computers and minicomputers. Other computing devices can include mobile or portable computing devices such as one or more laptops tablet computers personal data assistants mobile phones such as smartphones and other mobile or portable computing devices such as embedded computers set top boxes vehicle mounted devices wearable computers etc. Computing devices can include servers such as mail servers file servers database servers and web servers.

In some cases a computing device includes virtualized and or cloud computing resources. For instance one or more virtual machines may be provided to the organization by a third party cloud service vendor. Or in some embodiments computing devices can include one or more virtual machine s running on a physical host computing device or host machine operated by the organization. As one example the organization may use one virtual machine as a database server and another virtual machine as a mail server both virtual machines operating on the same host machine.

A virtual machine includes an operating system and associated virtual resources and is hosted simultaneously with another operating system on a physical host computer or host machine . A hypervisor typically software and also known in the art as a virtual machine monitor or a virtual machine manager or VMM sits between the virtual machine and the hardware of the physical host machine. One example of hypervisor as virtualization software is ESX Server by VMware Inc. of Palo Alto Calif. other examples include Microsoft Virtual Server and Microsoft Windows Server Hyper V both by Microsoft Corporation of Redmond Wash. and Sun xVM by Oracle America Inc. of Santa Clara Calif. In some embodiments the hypervisor may be firmware or hardware or a combination of software and or firmware and or hardware.

The hypervisor provides to each virtual operating system virtual resources such as a virtual processor virtual memory a virtual network device and a virtual disk. Each virtual machine has one or more virtual disks. The hypervisor typically stores the data of virtual disks in files on the file system of the physical host machine called virtual machine disk files in the case of VMware virtual servers or virtual hard disk image files in the case of Microsoft virtual servers . For example VMware s ESX Server provides the Virtual Machine File System VMFS for the storage of virtual machine disk files. A virtual machine reads data from and writes data to its virtual disk much the same way that an actual physical machine reads data from and writes data to an actual disk.

Examples of techniques for implementing information management techniques in a cloud computing environment are described in U.S. Pat. No. 8 285 681 which is incorporated by reference herein. Examples of techniques for implementing information management techniques in a virtualized computing environment are described in U.S. Pat. No. 8 307 177 also incorporated by reference herein.

The information management system can also include a variety of storage devices including primary storage devices and secondary storage devices for example. Storage devices can generally be of any suitable type including without limitation disk drives hard disk arrays semiconductor memory e.g. solid state storage devices network attached storage NAS devices tape libraries or other magnetic non tape storage devices optical media storage devices DNA RNA based memory technology combinations of the same and the like. In some embodiments storage devices can form part of a distributed file system. In some cases storage devices are provided in a cloud e.g. a private cloud or one operated by a third party vendor . A storage device in some cases comprises a disk array or portion thereof.

The illustrated information management system includes one or more client computing device having at least one application executing thereon and one or more primary storage devices storing primary data . The client computing device s and the primary storage devices may generally be referred to in some cases as a primary storage subsystem . A computing device in an information management system that has a data agent installed and operating on it is generally referred to as a client computing device or in the context of a component of the information management system simply as a client .

Depending on the context the term information management system can refer to generally all of the illustrated hardware and software components. Or in other instances the term may refer to only a subset of the illustrated components.

For instance in some cases the information management system generally refers to a combination of specialized components used to protect move manage manipulate analyze and or process data and metadata generated by the client computing devices . However the information management system in some cases does not include the underlying components that generate and or store the primary data such as the client computing devices themselves the applications and operating system operating on the client computing devices and the primary storage devices . As an example information management system may sometimes refer to one or more of the following components and corresponding data structures storage managers data agents and media agents. These components will be described in further detail below.

There are typically a variety of sources in an organization that produce data to be protected and managed. As just one illustrative example in a corporate environment such data sources can be employee workstations and company servers such as a mail server a web server a database server a transaction server or the like. In the information management system the data generation sources include the one or more client computing devices .

The client computing devices may include any of the types of computing devices described above without limitation and in some cases the client computing devices are associated with one or more users and or corresponding user accounts of employees or other individuals.

The information management system generally addresses and handles the data management and protection needs for the data generated by the client computing devices . However the use of this term does not imply that the client computing devices cannot be servers in other respects. For instance a particular client computing device may act as a server with respect to other devices such as other client computing devices . As just a few examples the client computing devices can include mail servers file servers database servers and web servers.

Each client computing device may have one or more applications e.g. software applications executing thereon which generate and manipulate the data that is to be protected from loss and managed. The applications generally facilitate the operations of an organization or multiple affiliated organizations and can include without limitation mail server applications e.g. Microsoft Exchange Server file server applications mail client applications e.g. Microsoft Exchange Client database applications e.g. SQL Oracle SAP Lotus Notes Database word processing applications e.g. Microsoft Word spreadsheet applications financial applications presentation applications graphics and or video applications browser applications mobile applications entertainment applications and so on.

The client computing devices can have at least one operating system e.g. Microsoft Windows Mac OS X iOS IBM z OS Linux other Unix based operating systems etc. installed thereon which may support or host one or more file systems and other applications .

The client computing devices and other components in information management system can be connected to one another via one or more communication pathways . For example a first communication pathway may connect or communicatively couple client computing device and secondary storage computing device a second communication pathway may connect storage manager and client computing device and a third communication pathway may connect storage manager and secondary storage computing device etc. see e.g. and . The communication pathways can include one or more networks or other connection types including one or more of the following without limitation the Internet a wide area network WAN a local area network LAN a Storage Area Network SAN a Fibre Channel connection a Small Computer System Interface SCSI connection a virtual private network VPN a token ring or TCP IP based network an intranet network a point to point link a cellular network a wireless data transmission system a two way cable system an interactive kiosk network a satellite network a broadband network a baseband network a neural network a mesh network an ad hoc network other appropriate wired wireless or partially wired wireless computer or telecommunications networks combinations of the same or the like. The communication pathways in some cases may also include application programming interfaces APIs including e.g. cloud service provider APIs virtual machine management APIs and hosted service provider APIs. The underlying infrastructure of communication paths may be wired and or wireless analog and or digital or any combination thereof and the facilities used may be private public third party provided or any combination thereof without limitation.

Primary data according to some embodiments is production data or other live data generated by the operating system and or applications operating on a client computing device . The primary data is generally stored on the primary storage device s and is organized via a file system supported by the client computing device . For instance the client computing device s and corresponding applications may create access modify write delete and otherwise use primary data . In some cases some or all of the primary data can be stored in cloud storage resources e.g. primary storage device may be a cloud based resource .

Primary data is generally in the native format of the source application . According to certain aspects primary data is an initial or first e.g. created before any other copies or before at least one other copy stored copy of data generated by the source application . Primary data in some cases is created substantially directly from data generated by the corresponding source applications .

The primary storage devices storing the primary data may be relatively fast and or expensive technology e.g. a disk drive a hard disk array solid state memory etc. . In addition primary data may be highly changeable and or may be intended for relatively short term retention e.g. hours days or weeks .

According to some embodiments the client computing device can access primary data from the primary storage device by making conventional file system calls via the operating system. Primary data may include structured data e.g. database files unstructured data e.g. documents and or semi structured data. Some specific examples are described below with respect to .

It can be useful in performing certain tasks to organize the primary data into units of different granularities. In general primary data can include files directories file system volumes data blocks extents or any other hierarchies or organizations of data objects. As used herein a data object can refer to both 1 any file that is currently addressable by a file system or that was previously addressable by the file system e.g. an archive file and 2 a subset of such a file e.g. a data block .

As will be described in further detail it can also be useful in performing certain functions of the information management system to access and modify metadata within the primary data . Metadata generally includes information about data objects or characteristics associated with the data objects. For simplicity herein it is to be understood that unless expressly stated otherwise any reference to primary data generally also includes its associated metadata but references to the metadata do not include the primary data.

Metadata can include without limitation one or more of the following the data owner e.g. the client or user that generates the data the last modified time e.g. the time of the most recent modification of the data object a data object name e.g. a file name a data object size e.g. a number of bytes of data information about the content e.g. an indication as to the existence of a particular search term user supplied tags to from information for email e.g. an email sender recipient etc. creation date file type e.g. format or application type last accessed time application type e.g. type of application that generated the data object location network e.g. a current past or future location of the data object and network pathways to from the data object geographic location e.g. GPS coordinates frequency of change e.g. a period in which the data object is modified business unit e.g. a group or department that generates manages or is otherwise associated with the data object aging information e.g. a schedule such as a time period in which the data object is migrated to secondary or long term storage boot sectors partition layouts file location within a file folder directory structure user permissions owners groups access control lists ACLs system metadata e.g. registry information combinations of the same or other similar information related to the data object.

In addition to metadata generated by or related to file systems and operating systems some of the applications and or other components of the information management system maintain indices of metadata for data objects e.g. metadata associated with individual email messages. Thus each data object may be associated with corresponding metadata. The use of metadata to perform classification and other functions is described in greater detail below.

Each of the client computing devices are generally associated with and or in communication with one or more of the primary storage devices storing corresponding primary data . A client computing device may be considered to be associated with or in communication with a primary storage device if it is capable of one or more of routing and or storing data e.g. primary data to the particular primary storage device coordinating the routing and or storing of data to the particular primary storage device retrieving data from the particular primary storage device coordinating the retrieval of data from the particular primary storage device and modifying and or deleting data retrieved from the particular primary storage device .

The primary storage devices can include any of the different types of storage devices described above or some other kind of suitable storage device. The primary storage devices may have relatively fast I O times and or are relatively expensive in comparison to the secondary storage devices . For example the information management system may generally regularly access data and metadata stored on primary storage devices whereas data and metadata stored on the secondary storage devices is accessed relatively less frequently.

Primary storage device may be dedicated or shared. In some cases each primary storage device is dedicated to an associated client computing device . For instance a primary storage device in one embodiment is a local disk drive of a corresponding client computing device . In other cases one or more primary storage devices can be shared by multiple client computing devices e.g. via a network such as in a cloud storage implementation. As one example a primary storage device can be a disk array shared by a group of client computing devices such as one of the following types of disk arrays EMC Clariion EMC Symmetrix EMC Celerra Dell EqualLogic IBM XIV NetApp FAS HP EVA and HP 3PAR.

The information management system may also include hosted services not shown which may be hosted in some cases by an entity other than the organization that employs the other components of the information management system . For instance the hosted services may be provided by various online service providers to the organization. Such service providers can provide services including social networking services hosted email services or hosted productivity applications or other hosted applications . Hosted services may include software as a service SaaS platform as a service PaaS application service providers ASPs cloud services or other mechanisms for delivering functionality via a network. As it provides services to users each hosted service may generate additional data and metadata under management of the information management system e.g. as primary data . In some cases the hosted services may be accessed using one of the applications . As an example a hosted mail service may be accessed via browser running on a client computing device . The hosted services may be implemented in a variety of computing environments. In some cases they are implemented in an environment having a similar arrangement to the information management system where various physical and logical components are distributed over a network.

The primary data stored on the primary storage devices may be compromised in some cases such as when an employee deliberately or accidentally deletes or overwrites primary data during their normal course of work. Or the primary storage devices can be damaged lost or otherwise corrupted. For recovery and or regulatory compliance purposes it is therefore useful to generate copies of the primary data . Accordingly the information management system includes one or more secondary storage computing devices and one or more secondary storage devices configured to create and store one or more secondary copies of the primary data and associated metadata. The secondary storage computing devices and the secondary storage devices may sometimes be referred to as a secondary storage subsystem .

Creation of secondary copies can help in search and analysis efforts and meet other information management goals such as restoring data and or metadata if an original version e.g. of primary data is lost e.g. by deletion corruption or disaster allowing point in time recovery complying with regulatory data retention and electronic discovery e discovery requirements reducing utilized storage capacity facilitating organization and search of data improving user access to data files across multiple computing devices and or hosted services and implementing data retention policies.

The client computing devices access or receive primary data and communicate the data e.g. over one or more communication pathways for storage in the secondary storage device s .

A secondary copy can comprise a separate stored copy of application data that is derived from one or more earlier created stored copies e.g. derived from primary data or another secondary copy . Secondary copies can include point in time data and may be intended for relatively long term retention e.g. weeks months or years before some or all of the data is moved to other storage or is discarded.

In some cases a secondary copy is a copy of application data created and stored subsequent to at least one other stored instance e.g. subsequent to corresponding primary data or to another secondary copy in a different storage device than at least one previous stored copy and or remotely from at least one previous stored copy. In some other cases secondary copies can be stored in the same storage device as primary data and or other previously stored copies. For example in one embodiment a disk array capable of performing hardware snapshots stores primary data and creates and stores hardware snapshots of the primary data as secondary copies . Secondary copies may be stored in relatively slow and or low cost storage e.g. magnetic tape . A secondary copy may be stored in a backup or archive format or in some other format different than the native source application format or other primary data format.

In some cases secondary copies are indexed so users can browse and restore at another point in time. After creation of a secondary copy representative of certain primary data a pointer or other location indicia e.g. a stub may be placed in primary data or be otherwise associated with primary data to indicate the current location on the secondary storage device s of secondary copy .

Since an instance of a data object or metadata in primary data may change over time as it is modified by an application or hosted service or the operating system the information management system may create and manage multiple secondary copies of a particular data object or metadata each representing the state of the data object in primary data at a particular point in time. Moreover since an instance of a data object in primary data may eventually be deleted from the primary storage device and the file system the information management system may continue to manage point in time representations of that data object even though the instance in primary data no longer exists.

For virtualized computing devices the operating system and other applications of the client computing device s may execute within or under the management of virtualization software e.g. a VMM and the primary storage device s may comprise a virtual disk created on a physical storage device. The information management system may create secondary copies of the files or other data objects in a virtual disk file and or secondary copies of the entire virtual disk file itself e.g. of an entire .vmdk file .

Secondary copies may be distinguished from corresponding primary data in a variety of ways some of which will now be described. First as discussed secondary copies can be stored in a different format e.g. backup archive or other non native format than primary data . For this or other reasons secondary copies may not be directly useable by the applications of the client computing device e.g. via standard system calls or otherwise without modification processing or other intervention by the information management system .

Secondary copies are also in some embodiments stored on a secondary storage device that is inaccessible to the applications running on the client computing devices and or hosted services . Some secondary copies may be offline copies in that they are not readily available e.g. not mounted to tape or disk . Offline copies can include copies of data that the information management system can access without human intervention e.g. tapes within an automated tape library but not yet mounted in a drive and copies that the information management system can access only with at least some human intervention e.g. tapes located at an offsite storage site .

Creating secondary copies can be a challenging task. For instance there can be hundreds or thousands of client computing devices continually generating large volumes of primary data to be protected. Also there can be significant overhead involved in the creation of secondary copies . Moreover secondary storage devices may be special purpose components and interacting with them can require specialized intelligence.

In some cases the client computing devices interact directly with the secondary storage device to create the secondary copies . However in view of the factors described above this approach can negatively impact the ability of the client computing devices to serve the applications and produce primary data . Further the client computing devices may not be optimized for interaction with the secondary storage devices .

Thus in some embodiments the information management system includes one or more software and or hardware components which generally act as intermediaries between the client computing devices and the secondary storage devices . In addition to off loading certain responsibilities from the client computing devices these intermediate components can provide other benefits. For instance as discussed further below with respect to distributing some of the work involved in creating secondary copies can enhance scalability.

The intermediate components can include one or more secondary storage computing devices as shown in and or one or more media agents which can be software modules operating on corresponding secondary storage computing devices or other appropriate computing devices . Media agents are discussed below e.g. with respect to .

The secondary storage computing device s can comprise any of the computing devices described above without limitation. In some cases the secondary storage computing device s include specialized hardware and or software componentry for interacting with the secondary storage devices .

To create a secondary copy involving the copying of data from the primary storage subsystem to the secondary storage subsystem the client computing device in some embodiments communicates the primary data to be copied or a processed version thereof to the designated secondary storage computing device via the communication pathway . The secondary storage computing device in turn conveys the received data or a processed version thereof to the secondary storage device . In some such configurations the communication pathway between the client computing device and the secondary storage computing device comprises a portion of a LAN WAN or SAN. In other cases at least some client computing devices communicate directly with the secondary storage devices e.g. via Fibre Channel or SCSI connections . In some other cases one or more secondary copies are created from existing secondary copies such as in the case of an auxiliary copy operation described in greater detail below.

Some or all primary data objects are associated with corresponding metadata e.g. Meta1 11 which may include file system metadata and or application specific metadata. Stored on the secondary storage device s are secondary copy data objects A C which may include copies of or otherwise represent corresponding primary data objects and metadata.

As shown the secondary copy data objects A C can individually represent more than one primary data object. For example secondary copy data object A represents three separate primary data objects C and C represented as C and C respectively and accompanied by the corresponding metadata Meta11 Meta3 and Meta8 respectively . Moreover as indicated by the prime mark a secondary copy object may store a representation of a primary data object and or metadata differently than the original format e.g. in a compressed encrypted deduplicated or other modified format. Likewise secondary data object B represents primary data objects B and A as B and A respectively and accompanied by corresponding metadata Meta2 Meta10 and Meta1 respectively. Also secondary data object C represents primary data objects A B and A as A B and A respectively accompanied by corresponding metadata Meta9 Meta5 and Meta6 respectively.

The information management system can incorporate a variety of different hardware and software components which can in turn be organized with respect to one another in many different configurations depending on the embodiment. There are critical design choices involved in specifying the functional responsibilities of the components and the role of each component in the information management system . For instance as will be discussed such design choices can impact performance as well as the adaptability of the information management system to data growth or other changing circumstances.

As noted the number of components in the information management system and the amount of data under management can be quite large. Managing the components and data is therefore a significant task and a task that can grow in an often unpredictable fashion as the quantity of components and data scale to meet the needs of the organization. For these and other reasons according to certain embodiments responsibility for controlling the information management system or at least a significant portion of that responsibility is allocated to the storage manager . By distributing control functionality in this manner the storage manager can be adapted independently according to changing circumstances. Moreover a computing device for hosting the storage manager can be selected to best suit the functions of the storage manager . These and other advantages are described in further detail below with respect to .

The storage manager may be a software module or other application which in some embodiments operates in conjunction with one or more associated data structures e.g. a dedicated database e.g. management database . In some embodiments storage manager is a computing device comprising circuitry for executing computer instructions and performs the functions described herein. The storage manager generally initiates performs coordinates and or controls storage and other information management operations performed by the information management system e.g. to protect and control the primary data and secondary copies of data and metadata. In general storage manager may be said to manage information management system which includes managing the constituent components e.g. data agents and media agents etc.

As shown by the dashed arrowed lines in the storage manager may communicate with and or control some or all elements of the information management system such as the data agents and media agents . Thus in certain embodiments control information originates from the storage manager and status reporting is transmitted to storage manager by the various managed components whereas payload data and payload metadata is generally communicated between the data agents and the media agents or otherwise between the client computing device s and the secondary storage computing device s e.g. at the direction of and under the management of the storage manager . Control information can generally include parameters and instructions for carrying out information management operations such as without limitation instructions to perform a task associated with an operation timing information specifying when to initiate a task associated with an operation data path information specifying what components to communicate with or access in carrying out an operation and the like. Payload data on the other hand can include the actual data involved in the storage operation such as content data written to a secondary storage device in a secondary copy operation. Payload metadata can include any of the types of metadata described herein and may be written to a storage device along with the payload content data e.g. in the form of a header .

In other embodiments some information management operations are controlled by other components in the information management system e.g. the media agent s or data agent s instead of or in combination with the storage manager .

According to certain embodiments the storage manager provides one or more of the following functions 

The storage manager may maintain a database or storage manager database or management database of management related data and information management policies . The database may include a management index or index or other data structure that stores logical associations between components of the system user preferences and or profiles e.g. preferences regarding encryption compression or deduplication of primary or secondary copy data preferences regarding the scheduling type or other aspects of primary or secondary copy or other operations mappings of particular information management users or user accounts to certain computing devices or other components etc. management tasks media containerization or other useful data. For example the storage manager may use the index to track logical associations between media agents and secondary storage devices and or movement of data from primary storage devices to secondary storage devices . For instance the index may store data associating a client computing device with a particular media agent and or secondary storage device as specified in an information management policy e.g. a storage policy which is defined in more detail below .

Administrators and other people may be able to configure and initiate certain information management operations on an individual basis. But while this may be acceptable for some recovery operations or other relatively less frequent tasks it is often not workable for implementing on going organization wide data protection and management. Thus the information management system may utilize information management policies for specifying and executing information management operations e.g. on an automated basis . Generally an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with storage or other information management operations.

The storage manager database may maintain the information management policies and associated data although the information management policies can be stored in any appropriate location. For instance an information management policy such as a storage policy may be stored as metadata in a media agent database or in a secondary storage device e.g. as an archive copy for use in restore operations or other information management operations depending on the embodiment. Information management policies are described further below.

According to certain embodiments the storage manager database comprises a relational database e.g. an SQL database for tracking metadata such as metadata associated with secondary copy operations e.g. what client computing devices and corresponding data were protected . This and other metadata may additionally be stored in other locations such as at the secondary storage computing devices or on the secondary storage devices allowing data recovery without the use of the storage manager in some cases.

As shown the storage manager may include a jobs agent a user interface and a management agent all of which may be implemented as interconnected software modules or application programs.

The jobs agent in some embodiments initiates controls and or monitors the status of some or all storage or other information management operations previously performed currently being performed or scheduled to be performed by the information management system . For instance the jobs agent may access information management policies to determine when and how to initiate and control secondary copy and other information management operations as will be discussed further.

The user interface may include information processing and display software such as a graphical user interface GUI an application program interface API or other interactive interface s through which users and system processes can retrieve information about the status of information management operations e.g. storage operations or issue instructions to the information management system and its constituent components. Via the user interface users may optionally issue instructions to the components in the information management system regarding performance of storage and recovery operations. For example a user may modify a schedule concerning the number of pending secondary copy operations. As another example a user may employ the GUI to view the status of pending storage operations or to monitor the status of certain components in the information management system e.g. the amount of capacity left in a storage device .

An information management cell or storage operation cell or cell may generally include a logical and or physical grouping of a combination of hardware and software components associated with performing information management operations on electronic data typically one storage manager and at least one client computing device comprising data agent s and at least one media agent . For instance the components shown in may together form an information management cell. Multiple cells may be organized hierarchically. With this configuration cells may inherit properties from hierarchically superior cells or be controlled by other cells in the hierarchy automatically or otherwise . Alternatively in some embodiments cells may inherit or otherwise be associated with information management policies preferences information management metrics or other properties or characteristics according to their relative position in a hierarchy of cells. Cells may also be delineated and or organized hierarchically according to function geography architectural considerations or other factors useful or desirable in performing information management operations. A first cell may represent a geographic segment of an enterprise such as a Chicago office and a second cell may represent a different geographic segment such as a New York office. Other cells may represent departments within a particular office. Where delineated by function a first cell may perform one or more first types of information management operations e.g. one or more first types of secondary or other copies and a second cell may perform one or more second types of information management operations e.g. one or more second types of secondary or other copies .

The storage manager may also track information that permits it to select designate or otherwise identify content indices deduplication databases or similar databases or resources or data sets within its information management cell or another cell to be searched in response to certain queries. Such queries may be entered by the user via interaction with the user interface . In general the management agent allows multiple information management cells to communicate with one another. For example the information management system in some cases may be one information management cell of a network of multiple cells adjacent to one another or otherwise logically related in a WAN or LAN. With this arrangement the cells may be connected to one another through respective management agents .

For instance the management agent can provide the storage manager with the ability to communicate with other components within the information management system and or other cells within a larger information management system via network protocols and application programming interfaces APIs including e.g. HTTP HTTPS FTP REST virtualization software APIs cloud service provider APIs and hosted service provider APIs. Inter cell communication and hierarchy is described in greater detail in e.g. U.S. Pat. Nos. 7 747 579 and 7 343 453 which are incorporated by reference herein.

As discussed a variety of different types of applications can operate on a given client computing device including operating systems database applications e mail applications and virtual machines just to name a few. And as part of the process of creating and restoring secondary copies the client computing devices may be tasked with processing and preparing the primary data from these various different applications . Moreover the nature of the processing preparation can differ across clients and application types e.g. due to inherent structural and formatting differences among applications .

The one or more data agent s are therefore advantageously configured in some embodiments to assist in the performance of information management operations based on the type of data that is being protected at a client specific and or application specific level.

The data agent may be a software module or component that is generally responsible for managing initiating or otherwise assisting in the performance of information management operations in information management system generally as directed by storage manager . For instance the data agent may take part in performing data storage operations such as the copying archiving migrating and or replicating of primary data stored in the primary storage device s . The data agent may receive control information from the storage manager such as commands to transfer copies of data objects metadata and other payload data to the media agents .

In some embodiments a data agent may be distributed between the client computing device and storage manager and any other intermediate components or may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent . In addition a data agent may perform some functions provided by a media agent or may perform other functions such as encryption and deduplication.

As indicated each data agent may be specialized for a particular application and the system can employ multiple application specific data agents each of which may perform information management operations e.g. perform backup migration and data recovery associated with a different application . For instance different individual data agents may be designed to handle Microsoft Exchange data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data SQL Server data SharePoint data Oracle database data SAP database data virtual machines and or associated data and other types of data.

A file system data agent for example may handle data files and or other file system information. If a client computing device has two or more types of data a specialized data agent may be used for each data type to copy archive migrate and restore the client computing device data. For example to backup migrate and or restore all of the data on a Microsoft Exchange server the client computing device may use a Microsoft Exchange Mailbox data agent to back up the Exchange mailboxes a Microsoft Exchange Database data agent to back up the Exchange databases a Microsoft Exchange Public Folder data agent to back up the Exchange Public Folders and a Microsoft Windows File System data agent to back up the file system of the client computing device . In such embodiments these specialized data agents may be treated as four separate data agents even though they operate on the same client computing device .

Other embodiments may employ one or more generic data agents that can handle and process data from two or more different applications or that can handle and process multiple data types instead of or in addition to using specialized data agents . For example one generic data agent may be used to back up migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data.

Each data agent may be configured to access data and or metadata stored in the primary storage device s associated with the data agent and process the data as appropriate. For example during a secondary copy operation the data agent may arrange or assemble the data and metadata into one or more files having a certain format e.g. a particular backup or archive format before transferring the file s to a media agent or other component. The file s may include a list of files or other metadata. Each data agent can also assist in restoring data or metadata to primary storage devices from a secondary copy . For instance the data agent may operate in conjunction with the storage manager and one or more of the media agents to restore data from secondary storage device s .

As indicated above with respect to off loading certain responsibilities from the client computing devices to intermediate components such as the media agent s can provide a number of benefits including improved client computing device operation faster secondary copy operation performance and enhanced scalability. In one specific example which will be discussed below in further detail the media agent can act as a local cache of copied data and or metadata that it has stored to the secondary storage device s providing improved restore capabilities.

Generally speaking a media agent may be implemented as a software module that manages coordinates and facilitates the transmission of data as directed by the storage manager between a client computing device and one or more secondary storage devices . Whereas the storage manager controls the operation of the information management system the media agent generally provides a portal to secondary storage devices . For instance other components in the system interact with the media agents to gain access to data stored on the secondary storage devices whether it be for the purposes of reading writing modifying or deleting data. Moreover as will be described further media agents can generate and store information relating to characteristics of the stored data and or metadata or can generate and store other types of information that generally provides insight into the contents of the secondary storage devices .

Media agents can comprise separate nodes in the information management system e.g. nodes that are separate from the client computing devices storage manager and or secondary storage devices . In general a node within the information management system can be a logically and or physically separate component and in some cases is a component that is individually addressable or otherwise identifiable. In addition each media agent may operate on a dedicated secondary storage computing device in some cases while in other embodiments a plurality of media agents operate on the same secondary storage computing device .

A media agent and corresponding media agent database may be considered to be associated with a particular secondary storage device if that media agent is capable of one or more of routing and or storing data to the particular secondary storage device coordinating the routing and or storing of data to the particular secondary storage device retrieving data from the particular secondary storage device coordinating the retrieval of data from a particular secondary storage device and modifying and or deleting data retrieved from the particular secondary storage device .

While media agent s are generally associated with one or more secondary storage devices one or more media agents in certain embodiments are physically separate from the secondary storage devices . For instance the media agents may operate on secondary storage computing devices having different housings or packages than the secondary storage devices . In one example a media agent operates on a first server computer and is in communication with a secondary storage device s operating in a separate rack mounted RAID based system.

Where the information management system includes multiple media agents see e.g. a first media agent may provide failover functionality for a second failed media agent . In addition media agents can be dynamically selected for storage operations to provide load balancing. Failover and load balancing are described in greater detail below.

In operation a media agent associated with a particular secondary storage device may instruct the secondary storage device to perform an information management operation. For instance a media agent may instruct a tape library to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or retrieve data to or from that media e.g. for the purpose of restoring the data to a client computing device . As another example a secondary storage device may include an array of hard disk drives or solid state drives organized in a RAID configuration and the media agent may forward a logical unit number LUN and other appropriate information to the array which uses the received information to execute the desired storage operation. The media agent may communicate with a secondary storage device via a suitable communications link such as a SCSI or Fiber Channel link.

As shown each media agent may maintain an associated media agent database . The media agent database may be stored in a disk or other storage device not shown that is local to the secondary storage computing device on which the media agent operates. In other cases the media agent database is stored remotely from the secondary storage computing device .

The media agent database can include among other things an index see e.g. which comprises information generated during secondary copy operations and other storage or information management operations. The index provides a media agent or other component with a fast and efficient mechanism for locating secondary copies or other data stored in the secondary storage devices . In some cases the index does not form a part of and is instead separate from the media agent database .

A media agent index or other data structure associated with the particular media agent may include information about the stored data. For instance for each secondary copy the index may include metadata such as a list of the data objects e.g. files subdirectories database objects mailbox objects etc. a path to the secondary copy on the corresponding secondary storage device location information indicating where the data objects are stored in the secondary storage device when the data objects were created or modified etc. Thus the index includes metadata associated with the secondary copies that is readily available for use without having to be first retrieved from the secondary storage device . In yet further embodiments some or all of the information in index may instead or additionally be stored along with the secondary copies of data in a secondary storage device . In some embodiments the secondary storage devices can include sufficient information to perform a bare metal restore where the operating system of a failed client computing device or other restore target is automatically rebuilt as part of a restore operation.

Because the index maintained in the media agent database may operate as a cache it can also be referred to as an index cache. In such cases information stored in the index cache typically comprises data that reflects certain particulars about storage operations that have occurred relatively recently. After some triggering event such as after a certain period of time elapses or the index cache reaches a particular size the index cache may be copied or migrated to a secondary storage device s . This information may need to be retrieved and uploaded back into the index cache or otherwise restored to a media agent to facilitate retrieval of data from the secondary storage device s . In some embodiments the cached information may include format or containerization information related to archives or other files stored on the storage device s . In this manner the index cache allows for accelerated restores.

In some alternative embodiments the media agent generally acts as a coordinator or facilitator of storage operations between client computing devices and corresponding secondary storage devices but does not actually write the data to the secondary storage device . For instance the storage manager or the media agent may instruct a client computing device and secondary storage device to communicate with one another directly. In such a case the client computing device transmits the data directly or via one or more intermediary components to the secondary storage device according to the received instructions and vice versa. In some such cases the media agent may still receive process and or maintain metadata related to the storage operations. Moreover in these embodiments the payload data can flow through the media agent for the purposes of populating the index cache maintained in the media agent database but not for writing to the secondary storage device .

The media agent and or other components such as the storage manager may in some cases incorporate additional functionality such as data classification content indexing deduplication encryption compression and the like. Further details regarding these and other functions are described below.

As described certain functions of the information management system can be distributed amongst various physical and or logical components in the system. For instance one or more of the storage manager data agents and media agents may operate on computing devices that are physically separate from one another. This architecture can provide a number of benefits.

For instance hardware and software design choices for each distributed component can be targeted to suit its particular function. The secondary computing devices on which the media agents operate can be tailored for interaction with associated secondary storage devices and provide fast index cache operation among other specific tasks. Similarly the client computing device s can be selected to effectively service the applications thereon in order to efficiently produce and store primary data .

Moreover in some cases one or more of the individual components in the information management system can be distributed to multiple separate computing devices. As one example for large file systems where the amount of data stored in the management database is relatively large the database may be migrated to or otherwise reside on a specialized database server e.g. an SQL server separate from a server that implements the other functions of the storage manager . This distributed configuration can provide added protection because the database can be protected with standard database utilities e.g. SQL log shipping or database replication independent from other functions of the storage manager . The database can be efficiently replicated to a remote site for use in the event of a disaster or other data loss at the primary site. Or the database can be replicated to another computing device within the same site such as to a higher performance machine in the event that a storage manager host device can no longer service the needs of a growing information management system .

The distributed architecture also provides both scalability and efficient component utilization. shows an embodiment of the information management system including a plurality of client computing devices and associated data agents as well as a plurality of secondary storage computing devices and associated media agents .

Additional components can be added or subtracted based on the evolving needs of the information management system . For instance depending on where bottlenecks are identified administrators can add additional client computing devices secondary storage computing devices and corresponding media agents and or secondary storage devices . Moreover where multiple fungible components are available load balancing can be implemented to dynamically address identified bottlenecks. As an example the storage manager may dynamically select which media agents and or secondary storage devices to use for storage operations based on a processing load analysis of the media agents and or secondary storage devices respectively.

Moreover each client computing device in some embodiments can communicate with among other components any of the media agents e.g. as directed by the storage manager . And each media agent may be able to communicate with among other components any of the secondary storage devices e.g. as directed by the storage manager . Thus operations can be routed to the secondary storage devices in a dynamic and highly flexible manner to provide load balancing failover and the like. Further examples of scalable systems capable of dynamic storage operations and of systems capable of performing load balancing and fail over are provided in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

In alternative configurations certain components are not distributed and may instead reside and execute on the same computing device. For example in some embodiments one or more data agents and the storage manager operate on the same client computing device . In another embodiment one or more data agents and one or more media agents operate on a single computing device.

In order to protect and leverage stored data the information management system can be configured to perform a variety of information management operations. As will be described these operations can generally include secondary copy and other data movement operations processing and data manipulation operations analysis reporting and management operations. The operations described herein may be performed on any type of computing device e.g. between two computers connected via a LAN to a mobile client telecommunications device connected to a server via a WLAN to any manner of client computing device coupled to a cloud storage target etc. without limitation.

Data movement operations according to certain embodiments are generally operations that involve the copying or migration of data e.g. payload data between different locations in the information management system in an original native and or one or more different formats. For example data movement operations can include operations in which stored data is copied migrated or otherwise transferred from one or more first storage devices to one or more second storage devices such as from primary storage device s to secondary storage device s from secondary storage device s to different secondary storage device s from secondary storage devices to primary storage devices or from primary storage device s to different primary storage device s .

Data movement operations can include by way of example backup operations archive operations information lifecycle management operations such as hierarchical storage management operations replication operations e.g. continuous data replication operations snapshot operations deduplication or single instancing operations auxiliary copy operations and the like. As will be discussed some of these operations involve the copying migration or other movement of data without actually creating multiple distinct copies. Nonetheless some or all of these operations are referred to as copy operations for simplicity.

A backup operation creates a copy of a version of data e.g. one or more files or other data units in primary data at a particular point in time. Each subsequent backup copy may be maintained independently of the first. Further a backup copy in some embodiments is generally stored in a form that is different than the native format e.g. a backup format. This can be in contrast to the version in primary data from which the backup copy is derived and which may instead be stored in a native format of the source application s . In various cases backup copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original application format. For example a backup copy may be stored in a backup format that facilitates compression and or efficient long term storage.

Backup copies can have relatively long retention periods as compared to primary data and may be stored on media with slower retrieval times than primary data and certain other types of secondary copies . On the other hand backups may have relatively shorter retention periods than some other types of secondary copies such as archive copies described below . Backups may sometimes be stored at an offsite location.

Backup operations can include full backups differential backups incremental backups synthetic full backups and or creating a reference copy. A full backup or standard full backup in some embodiments is generally a complete image of the data to be protected. However because full backup copies can consume a relatively large amount of storage it can be useful to use a full backup copy as a baseline and only store changes relative to the full backup copy for subsequent backup copies.

For instance a differential backup operation or cumulative incremental backup operation tracks and stores changes that have occurred since the last full backup. Differential backups can grow quickly in size but can provide relatively efficient restore times because a restore can be completed in some cases using only the full backup copy and the latest differential copy.

An incremental backup operation generally tracks and stores changes since the most recent backup copy of any type which can greatly reduce storage utilization. In some cases however restore times can be relatively long in comparison to full or differential backups because completing a restore operation may involve accessing a full backup in addition to multiple incremental backups.

Synthetic full backups generally consolidate data without directly backing up data from the client computing device. A synthetic full backup is created from the most recent full backup i.e. standard or synthetic and subsequent incremental and or differential backups. The resulting synthetic full backup is identical to what would have been created had the last backup for the subclient been a standard full backup. Unlike standard full incremental and differential backups a synthetic full backup does not actually transfer data from a client computer to the backup media because it operates as a backup consolidator. A synthetic full backup extracts the index data of each participating subclient. Using this index data and the previously backed up user data images it builds new full backup images one for each subclient. The new backup images consolidate the index and user data stored in the related incremental differential and previous full backups in some embodiments creating an archive file at the subclient level.

Any of the above types of backup operations can be at the volume level file level or block level. Volume level backup operations generally involve the copying of a data volume e.g. a logical disk or partition as a whole. In a file level backup the information management system may generally track changes to individual files and includes copies of files in the backup copy. In the case of a block level backup files are broken into constituent blocks and changes are tracked at the block level. Upon restore the information management system reassembles the blocks into files in a transparent fashion.

Far less data may actually be transferred and copied to the secondary storage devices during a file level copy than a volume level copy. Likewise a block level copy may involve the transfer of less data than a file level copy resulting in faster execution times. However restoring a relatively higher granularity copy can result in longer restore times. For instance when restoring a block level copy the process of locating constituent blocks can sometimes result in longer restore times as compared to file level backups. Similar to backup operations the other types of secondary copy operations described herein can also be implemented at either the volume level file level or block level.

For example in some embodiments a reference copy may comprise copy ies of selected objects from backed up data typically to help organize data by keeping contextual information from multiple sources together and or help retain specific data for a longer period of time such as for legal hold needs. A reference copy generally maintains data integrity and when the data is restored it may be viewed in the same format as the source data. In some embodiments a reference copy is based on a specialized client individual subclient and associated information management policies e.g. storage policy retention policy etc. that are administered within information management system .

Because backup operations generally involve maintaining a version of the copied data in primary data and also maintaining backup copies in secondary storage device s they can consume significant storage capacity. To help reduce storage consumption an archive operation according to certain embodiments creates a secondary copy by both copying and removing source data. Or seen another way archive operations can involve moving some or all of the source data to the archive destination. Thus data satisfying criteria for removal e.g. data of a threshold age or size may be removed from source storage. The source data may be primary data or a secondary copy depending on the situation. As with backup copies archive copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the format of the original application or source copy. In addition archive copies may be retained for relatively long periods of time e.g. years and in some cases are never deleted. Archive copies are generally retained for longer periods of time than backup copies for example. In certain embodiments archive copies may be made and kept for extended periods in order to meet compliance regulations.

Moreover when primary data is archived in some cases the corresponding primary data or a portion thereof is deleted when creating the archive copy. Thus archiving can serve the purpose of freeing up space in the primary storage device s and easing the demand on computational resources on client computing device . Similarly when a secondary copy is archived the secondary copy may be deleted and an archive copy can therefore serve the purpose of freeing up space in secondary storage device s . In contrast source copies often remain intact when creating backup copies. Examples of compatible data archiving operations are provided in U.S. Pat. No. 7 107 298 which is incorporated by reference herein.

Snapshot operations can provide a relatively lightweight efficient mechanism for protecting data. From an end user viewpoint a snapshot may be thought of as an instant image of the primary data at a given point in time and may include state and or status information relative to an application that creates manages the primary data . In one embodiment a snapshot may generally capture the directory structure of an object in primary data such as a file or volume or other data set at a particular moment in time and may also preserve file attributes and contents. A snapshot in some cases is created relatively quickly e.g. substantially instantly using a minimum amount of file space but may still function as a conventional file system backup.

A hardware snapshot or hardware based snapshot operation can be a snapshot operation where a target storage device e.g. a primary storage device or a secondary storage device performs the snapshot operation in a self contained fashion substantially independently using hardware firmware and or software operating on the storage device itself. For instance the storage device may be capable of performing snapshot operations upon request generally without intervention or oversight from any of the other components in the information management system . In this manner hardware snapshots can off load other components of information management system from processing involved in snapshot creation and management.

A software snapshot or software based snapshot operation on the other hand can be a snapshot operation in which one or more other components in information management system e.g. client computing devices data agents etc. implement a software layer that manages the snapshot operation via interaction with the target storage device. For instance the component executing the snapshot management software layer may derive a set of pointers and or data that represents the snapshot. The snapshot management software layer may then transmit the same to the target storage device along with appropriate instructions for writing the snapshot.

Some types of snapshots do not actually create another physical copy of all the data as it existed at the particular point in time but may simply create pointers that are able to map files and directories to specific memory locations e.g. to specific disk blocks where the data resides as it existed at the particular point in time. For example a snapshot copy may include a set of pointers derived from the file system or from an application. In some other cases the snapshot may be created at the block level such that creation of the snapshot occurs without awareness of the file system. Each pointer points to a respective stored data block so that collectively the set of pointers reflect the storage location and state of the data object e.g. file s or volume s or data set s at a particular point in time when the snapshot copy was created.

An initial snapshot may use only a small amount of disk space needed to record a mapping or other data structure representing or otherwise tracking the blocks that correspond to the current state of the file system. Additional disk space is usually required only when files and directories are modified later on. Furthermore when files are modified typically only the pointers which map to blocks are copied not the blocks themselves. In some embodiments for example in the case of copy on write snapshots when a block changes in primary storage the block is copied to secondary storage or cached in primary storage before the block is overwritten in primary storage and the pointer to that block is changed to reflect the new location of that block. The snapshot mapping of file system data may also be updated to reflect the changed block s at that particular point in time. In some other cases a snapshot includes a full physical copy of all or substantially all of the data represented by the snapshot. Further examples of snapshot operations are provided in U.S. Pat. No. 7 529 782 which is incorporated by reference herein.

A snapshot copy in many cases can be made quickly and without significantly impacting primary computing resources because large amounts of data need not be copied or moved. In some embodiments a snapshot may exist as a virtual file system parallel to the actual file system. Users in some cases gain read only access to the record of files and directories of the snapshot. By electing to restore primary data from a snapshot taken at a given point in time users may also return the current file system to the state of the file system that existed when the snapshot was taken.

Another type of secondary copy operation is a replication operation. Some types of secondary copies are used to periodically capture images of primary data at particular points in time e.g. backups archives and snapshots . However it can also be useful for recovery purposes to protect primary data in a more continuous fashion by replicating the primary data substantially as changes occur. In some cases a replication copy can be a mirror copy for instance where changes made to primary data are mirrored or substantially immediately copied to another location e.g. to secondary storage device s . By copying each write operation to the replication copy two storage systems are kept synchronized or substantially synchronized so that they are virtually identical at approximately the same time. Where entire disk volumes are mirrored however mirroring can require significant amount of storage space and utilizes a large amount of processing resources.

According to some embodiments storage operations are performed on replicated data that represents a recoverable state or known good state of a particular application running on the source system. For instance in certain embodiments known good replication copies may be viewed as copies of primary data . This feature allows the system to directly access copy restore backup or otherwise manipulate the replication copies as if the data were the live primary data . This can reduce access time storage utilization and impact on source applications among other benefits. Based on known good state information the information management system can replicate sections of application data that represent a recoverable state rather than rote copying of blocks of data. Examples of compatible replication operations e.g. continuous data replication are provided in U.S. Pat. No. 7 617 262 which is incorporated by reference herein.

Another type of data movement operation is deduplication or single instance storage which is useful to reduce the amount of non primary data. For instance some or all of the above described secondary storage operations can involve deduplication in some fashion. New data is read broken down into portions e.g. sub file level blocks files etc. of a selected granularity compared with blocks that are already in secondary storage and only the new blocks are stored. Blocks that already exist are represented as pointers to the already stored data.

In order to streamline the comparison process the information management system may calculate and or store signatures e.g. hashes or cryptographically unique IDs corresponding to the individual data blocks in a database and compare the signatures instead of comparing entire data blocks. In some cases only a single instance of each element is stored and deduplication operations may therefore be referred to interchangeably as single instancing operations. Depending on the implementation however deduplication or single instancing operations can store more than one instance of certain data blocks but nonetheless significantly reduce data redundancy. Depending on the embodiment deduplication blocks can be of fixed or variable length. Using variable length blocks can provide enhanced deduplication by responding to changes in the data stream but can involve complex processing. In some cases the information management system utilizes a technique for dynamically aligning deduplication blocks e.g. fixed length blocks based on changing content in the data stream as described in U.S. Pat. No. 8 364 652 which is incorporated by reference herein.

The information management system can perform deduplication in a variety of manners at a variety of locations in the information management system . For instance in some embodiments the information management system implements target side deduplication by deduplicating data e.g. secondary copies stored in the secondary storage devices . In some such cases the media agents are generally configured to manage the deduplication process. For instance one or more of the media agents maintain a corresponding deduplication database that stores deduplication information e.g. datablock signatures . Examples of such a configuration are provided in U.S. Pat. Pub. No. 2012 0150826 which is incorporated by reference herein. Instead of or in combination with target side deduplication deduplication can also be performed on the source side or client side e.g. to reduce the amount of traffic between the media agents and the client computing device s and or reduce redundant data stored in the primary storage devices . According to various implementations one or more of the storage devices of the target side and or source side of an operation can be cloud based storage devices. Thus the target side and or source side deduplication can be cloud based deduplication. In particular as discussed previously the storage manager may communicate with other components within the information management system via network protocols and cloud service provider APIs to facilitate cloud based deduplication single instancing. Examples of such deduplication techniques are provided in U.S. Pat. Pub. No. 2012 0150818 which is incorporated by reference herein. Some other compatible deduplication single instancing techniques are described in U.S. Pat. Pub. Nos. 2006 0224846 and 2009 0319534 which are incorporated by reference herein.

In some embodiments files and other data over their lifetime move from more expensive quick access storage to less expensive slower access storage. Operations associated with moving data through various tiers of storage are sometimes referred to as information lifecycle management ILM operations.

One type of ILM operation is a hierarchical storage management HSM operation. A HSM operation is generally an operation for automatically moving data between classes of storage devices such as between high cost and low cost storage devices. For instance an HSM operation may involve movement of data from primary storage devices to secondary storage devices or between tiers of secondary storage devices . With each tier the storage devices may be progressively relatively cheaper have relatively slower access restore times etc. For example movement of data between tiers may occur as data becomes less important over time.

In some embodiments an HSM operation is similar to an archive operation in that creating an HSM copy may though not always involve deleting some of the source data e.g. according to one or more criteria related to the source data. For example an HSM copy may include data from primary data or a secondary copy that is larger than a given size threshold or older than a given age threshold and that is stored in a backup format.

Often and unlike some types of archive copies HSM data that is removed or aged from the source is replaced by a logical reference pointer or stub. The reference pointer or stub can be stored in the primary storage device or other source storage device such as a secondary storage device to replace the deleted source data and to point to or otherwise indicate the new location in a secondary storage device .

According to one example files are generally moved between higher and lower cost storage depending on how often the files are accessed. When a user requests access to the HSM data that has been removed or migrated the information management system uses the stub to locate the data and may make recovery of the data appear transparent even though the HSM data may be stored at a location different from other source data. In this manner the data appears to the user e.g. in file system browsing windows and the like as if it still resides in the source location e.g. in a primary storage device . The stub may also include some metadata associated with the corresponding data so that a file system and or application can provide some information about the data object and or a limited functionality version e.g. a preview of the data object.

An HSM copy may be stored in a format other than the native application format e.g. where the data is compressed encrypted deduplicated and or otherwise modified from the original native application format . In some cases copies which involve the removal of data from source storage and the maintenance of stub or other logical reference information on source storage may be referred to generally as on line archive copies . On the other hand copies which involve the removal of data from source storage without the maintenance of stub or other logical reference information on source storage may be referred to as off line archive copies . Examples of HSM and ILM techniques are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

An auxiliary copy is generally a copy operation in which a copy is created of an existing secondary copy . For instance an initial secondary copy may be generated using or otherwise be derived from primary data or other data residing in the secondary storage subsystem whereas an auxiliary copy is generated from the initial secondary copy . Auxiliary copies can be used to create additional standby copies of data and may reside on different secondary storage devices than the initial secondary copies . Thus auxiliary copies can be used for recovery purposes if initial secondary copies become unavailable. Exemplary compatible auxiliary copy techniques are described in further detail in U.S. Pat. No. 8 230 195 which is incorporated by reference herein.

The information management system may also perform disaster recovery operations that make or retain disaster recovery copies often as secondary high availability disk copies. The information management system may create secondary disk copies and store the copies at disaster recovery locations using auxiliary copy or replication operations such as continuous data replication technologies. Depending on the particular data protection goals disaster recovery locations can be remote from the client computing devices and primary storage devices remote from some or all of the secondary storage devices or both.

Data analysis reporting and management operations can be different than data movement operations in that they do not necessarily involve the copying migration or other transfer of data e.g. primary data or secondary copies between different locations in the system. For instance data analysis operations may involve processing e.g. offline processing or modification of already stored primary data and or secondary copies . However in some embodiments data analysis operations are performed in conjunction with data movement operations. Some data analysis operations include content indexing operations and classification operations which can be useful in leveraging the data under management to provide enhanced search and other features. Other data analysis operations such as compression and encryption can provide data reduction and security benefits respectively.

In some embodiments the information management system analyzes and indexes characteristics content and metadata associated with the primary data and or secondary copies . The content indexing can be used to identify files or other data objects having pre defined content e.g. user defined keywords or phrases other keywords phrases that are not defined by a user etc. and or metadata e.g. email metadata such as to from cc bcc attachment name received time etc. .

The information management system generally organizes and catalogues the results in a content index which may be stored within the media agent database for example. The content index can also include the storage locations of or pointer references to the indexed data in the primary data or secondary copies as appropriate. The results may also be stored in the form of a content index database or otherwise elsewhere in the information management system e.g. in the primary storage devices or in the secondary storage device . Such index data provides the storage manager or another component with an efficient mechanism for locating primary data and or secondary copies of data objects that match particular criteria.

For instance search criteria can be specified by a user through user interface of the storage manager . In some cases the information management system analyzes data and or metadata in secondary copies to create an off line content index without significantly impacting the performance of the client computing devices . Depending on the embodiment the system can also implement on line content indexing e.g. of primary data . Examples of compatible content indexing techniques are provided in U.S. Pat. No. 8 170 995 which is incorporated by reference herein.

One or more components can be configured to scan data and or associated metadata for classification purposes to populate a database or other data structure of information which can be referred to as a data classification database or a metabase . Depending on the embodiment the data classification database s can be organized in a variety of different ways including centralization logical sub divisions and or physical sub divisions. For instance one or more centralized data classification databases may be associated with different subsystems or tiers within the information management system . As an example there may be a first centralized metabase associated with the primary storage subsystem and a second centralized metabase associated with the secondary storage subsystem . In other cases there may be one or more metabases associated with individual components e.g. client computing devices and or media agents . In some embodiments a data classification database metabase may reside as one or more data structures within management database or may be otherwise associated with storage manager .

In some cases the metabase s may be included in separate database s and or on separate storage device s from primary data and or secondary copies such that operations related to the metabase do not significantly impact performance on other components in the information management system . In other cases the metabase s may be stored along with primary data and or secondary copies . Files or other data objects can be associated with identifiers e.g. tag entries etc. in the media agent or other indices to facilitate searches of stored data objects. Among a number of other benefits the metabase can also allow efficient automatic identification of files or other data objects to associate with secondary copy or other information management operations e.g. in lieu of scanning an entire file system . Examples of compatible metabases and data classification operations are provided in U.S. Pat. Nos. 8 229 954 and 7 747 579 which are incorporated by reference herein.

The information management system in some cases is configured to process data e.g. files or other data objects secondary copies etc. according to an appropriate encryption algorithm e.g. Blowfish Advanced Encryption Standard AES Triple Data Encryption Standard 3 DES etc. to limit access and provide data security in the information management system . The information management system in some cases encrypts the data at the client level such that the client computing devices e.g. the data agents encrypt the data prior to forwarding the data to other components e.g. before sending the data to media agents during a secondary copy operation. In such cases the client computing device may maintain or have access to an encryption key or passphrase for decrypting the data upon restore. Encryption can also occur when creating copies of secondary copies e.g. when creating auxiliary copies or archive copies. In yet further embodiments the secondary storage devices can implement built in high performance hardware encryption.

Certain embodiments leverage the integrated ubiquitous nature of the information management system to provide useful system wide management and reporting functions. Examples of some compatible management and reporting techniques are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

Operations management can generally include monitoring and managing the health and performance of information management system by without limitation performing error tracking generating granular storage performance metrics e.g. job success failure information deduplication efficiency etc. generating storage modeling and costing information and the like. As an example a storage manager or other component in the information management system may analyze traffic patterns and suggest and or automatically route data via a particular route to minimize congestion. In some embodiments the system can generate predictions relating to storage operations or storage operation information. Such predictions which may be based on a trending analysis may predict various network operations or resource usage such as network traffic levels storage media use use of bandwidth of communication links use of media agent components etc. Further examples of traffic analysis trend analysis prediction generation and the like are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some configurations a master storage manager may track the status of storage operation cells in a hierarchy such as the status of jobs system components system resources and other items by communicating with storage managers or other components in the respective storage operation cells. Moreover the master storage manager may track the status of its associated storage operation cells and information management operations by receiving periodic status updates from the storage managers or other components in the respective cells regarding jobs system components system resources and other items. In some embodiments a master storage manager may store status information and other information regarding its associated storage operation cells and other system information in its index or other location .

The master storage manager or other component may also determine whether certain storage related criteria or other criteria are satisfied and perform an action or trigger event e.g. data migration in response to the criteria being satisfied such as where a storage threshold is met for a particular volume or where inadequate protection exists for certain data. For instance in some embodiments data from one or more storage operation cells is used to dynamically and automatically mitigate recognized risks and or to advise users of risks or suggest actions to mitigate these risks. For example an information management policy may specify certain requirements e.g. that a storage device should maintain a certain amount of free space that secondary copies should occur at a particular interval that data should be aged and migrated to other storage after a particular period that data on a secondary volume should always have a certain level of availability and be restorable within a given time period that data on a secondary volume may be mirrored or otherwise migrated to a specified number of other volumes etc. . If a risk condition or other criterion is triggered the system may notify the user of these conditions and may suggest or automatically implement an action to mitigate or otherwise address the risk. For example the system may indicate that data from a primary copy should be migrated to a secondary storage device to free space on the primary storage device . Examples of the use of risk factors and other triggering criteria are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments the system may also determine whether a metric or other indication satisfies particular storage criteria and if so perform an action. For example as previously described a storage policy or other definition might indicate that a storage manager should initiate a particular action if a storage metric or other indication drops below or otherwise fails to satisfy specified criteria such as a threshold of data protection. Examples of such metrics are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments risk factors may be quantified into certain measurable service or risk levels for ease of comprehension. For example certain applications and associated data may be considered to be more important by an enterprise than other data and services. Financial compliance data for example may be of greater importance than marketing materials etc. Network administrators may assign priority values or weights to certain data and or applications corresponding to the relative importance. The level of compliance of storage operations specified for these applications may also be assigned a certain value. Thus the health impact and overall importance of a service may be determined such as by measuring the compliance value and calculating the product of the priority value and the compliance value to determine the service level and comparing it to certain operational thresholds to determine whether it is acceptable. Further examples of the service level determination are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The system may additionally calculate data costing and data availability associated with information management operation cells according to an embodiment of the invention. For instance data received from the cell may be used in conjunction with hardware related information and other information about system elements to determine the cost of storage and or the availability of particular data in the system. Exemplary information generated could include how fast a particular department is using up available storage space how long data would take to recover over a particular system pathway from a particular secondary storage device costs over time etc. Moreover in some embodiments such information may be used to determine or predict the overall cost associated with the storage of certain information. The cost associated with hosting a certain application may be based at least in part on the type of media on which the data resides for example. Storage devices may be assigned to a particular cost categories for example. Further examples of costing techniques are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

Any of the above types of information e.g. information related to trending predictions job cell or component status risk service level costing etc. can generally be provided to users via the user interface in a single integrated view or console not shown . The console may support a reporting capability that allows for the generation of a variety of reports which may be tailored to a particular aspect of information management. Report types may include scheduling event management media management and data aging. Available reports may also include backup history data aging history auxiliary copy history job history library and drive media in library restore history and storage policy etc. without limitation. Such reports may be specified and created at a certain point in time as a system analysis forecasting or provisioning tool. Integrated reports may also be generated that illustrate storage and performance metrics risks and storage costing information. Moreover users may create their own reports based on specific needs.

The integrated user interface can include an option to show a virtual view of the system that graphically depicts the various components in the system using appropriate icons. As one example the user interface may provide a graphical depiction of one or more primary storage devices the secondary storage devices data agents and or media agents and their relationship to one another in the information management system . The operations management functionality can facilitate planning and decision making. For example in some embodiments a user may view the status of some or all jobs as well as the status of each component of the information management system . Users may then plan and make decisions based on this data. For instance a user may view high level information regarding storage operations for the information management system such as job status component status resource status e.g. communication pathways etc. and other information. The user may also drill down or use other means to obtain more detailed information regarding a particular component job or the like. Further examples of some reporting techniques and associated interfaces providing an integrated view of an information management system are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The information management system can also be configured to perform system wide e discovery operations in some embodiments. In general e discovery operations provide a unified collection and search capability for data in the system such as data stored in the secondary storage devices e.g. backups archives or other secondary copies . For example the information management system may construct and maintain a virtual repository for data stored in the information management system that is integrated across source applications different storage device types etc. According to some embodiments e discovery utilizes other techniques described herein such as data classification and or content indexing.

As indicated previously an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with secondary copy and or other information management operations.

One type of information management policy is a storage policy. According to certain embodiments a storage policy generally comprises a data structure or other information source that defines or includes information sufficient to determine a set of preferences or other criteria for performing information management operations. Storage policies can include one or more of the following items 1 what data will be associated with the storage policy 2 a destination to which the data will be stored 3 datapath information specifying how the data will be communicated to the destination 4 the type of storage operation to be performed and 5 retention information specifying how long the data will be retained at the destination see e.g. .

As an illustrative example data associated with a storage policy can be logically organized into groups. In some cases these logical groupings can be referred to as sub clients . A sub client may represent static or dynamic associations of portions of a data volume. Sub clients may represent mutually exclusive portions. Thus in certain embodiments a portion of data may be given a label and the association is stored as a static entity in an index database or other storage location. Sub clients may also be used as an effective administrative scheme of organizing data according to data type department within the enterprise storage preferences or the like. Depending on the configuration sub clients can correspond to files folders virtual machines databases etc. In one exemplary scenario an administrator may find it preferable to separate e mail data from financial data using two different sub clients.

A storage policy can define where data is stored by specifying a target or destination storage device or group of storage devices . For instance where the secondary storage device includes a group of disk libraries the storage policy may specify a particular disk library for storing the sub clients associated with the policy. As another example where the secondary storage devices include one or more tape libraries the storage policy may specify a particular tape library for storing the sub clients associated with the storage policy and may also specify a drive pool and a tape pool defining a group of tape drives and a group of tapes respectively for use in storing the sub client data. While information in the storage policy can be statically assigned in some cases some or all of the information in the storage policy can also be dynamically determined based on criteria which can be set forth in the storage policy. For instance based on such criteria a particular destination storage device s or other parameter of the storage policy may be determined based on characteristics associated with the data involved in a particular storage operation device availability e.g. availability of a secondary storage device or a media agent network status and conditions e.g. identified bottlenecks user credentials and the like .

Datapath information can also be included in the storage policy. For instance the storage policy may specify network pathways and components to utilize when moving the data to the destination storage device s . In some embodiments the storage policy specifies one or more media agents for conveying data associated with the storage policy between the source e.g. one or more host client computing devices and destination e.g. a particular target secondary storage device .

A storage policy can also specify the type s of operations associated with the storage policy such as a backup archive snapshot auxiliary copy or the like. Retention information can specify how long the data will be kept depending on organizational needs e.g. a number of days months years etc. 

Another type of information management policy is a scheduling policy which specifies when and how often to perform operations. Scheduling parameters may specify with what frequency e.g. hourly weekly daily event based etc. or under what triggering conditions secondary copy or other information management operations will take place. Scheduling policies in some cases are associated with particular components such as particular logical groupings of data associated with a storage policy e.g. a sub client client computing device and the like. In one configuration a separate scheduling policy is maintained for particular logical groupings of data on a client computing device . The scheduling policy specifies that those logical groupings are to be moved to secondary storage devices every hour according to storage policies associated with the respective sub clients.

When adding a new client computing device administrators can manually configure information management policies and or other settings e.g. via the user interface . However this can be an involved process resulting in delays and it may be desirable to begin data protection operations quickly without awaiting human intervention. Thus in some embodiments the information management system automatically applies a default configuration to client computing device . As one example when one or more data agent s are installed on one or more client computing devices the installation script may register the client computing device with the storage manager which in turn applies the default configuration to the new client computing device . In this manner data protection operations can begin substantially immediately. The default configuration can include a default storage policy for example and can specify any appropriate information sufficient to begin data protection operations. This can include a type of data protection operation scheduling information a target secondary storage device data path information e.g. a particular media agent and the like.

Other types of information management policies are possible including one or more audit or security policies. An audit policy is a set of preferences rules and or criteria that protect sensitive data in the information management system . For example an audit policy may define sensitive objects as files or objects that contain particular keywords e.g. confidential or privileged and or are associated with particular keywords e.g. in metadata or particular flags e.g. in metadata identifying a document or email as personal confidential etc. . An audit policy may further specify rules for handling sensitive objects. As an example an audit policy may require that a reviewer approve the transfer of any sensitive objects to a cloud storage site and that if approval is denied for a particular sensitive object the sensitive object should be transferred to a local primary storage device instead. To facilitate this approval the audit policy may further specify how a secondary storage computing device or other system component should notify a reviewer that a sensitive object is slated for transfer.

Another type of information management policy is a provisioning policy. A provisioning policy can include a set of preferences priorities rules and or criteria that specify how client computing devices or groups thereof may utilize system resources such as available storage on cloud storage and or network bandwidth. A provisioning policy specifies for example data quotas for particular client computing devices e.g. a number of gigabytes that can be stored monthly quarterly or annually . The storage manager or other components may enforce the provisioning policy. For instance the media agents may enforce the policy when transferring data to secondary storage devices . If a client computing device exceeds a quota a budget for the client computing device or associated department is adjusted accordingly or an alert may trigger.

While the above types of information management policies have been described as separate policies one or more of these can be generally combined into a single information management policy . For instance a storage policy may also include or otherwise be associated with one or more scheduling audit or provisioning policies or operational parameters thereof. Moreover while storage policies are typically associated with moving and storing data other policies may be associated with other types of information management operations. The following is a non exhaustive list of items the information management policies may specify 

Policies can additionally specify or depend on a variety of historical or current criteria that may be used to determine which rules to apply to a particular data object system component or information management operation such as 

As indicated by the dashed box the second media agent B and the tape library B are off site and may therefore be remotely located from the other components in the information management system e.g. in a different city office building etc. . Indeed off site may refer to a magnetic tape located in storage which must be manually retrieved and loaded into a tape drive to be read. In this manner information stored on the tape library B may provide protection in the event of a disaster or other failure.

The file system sub client and its associated primary data A in certain embodiments generally comprise information generated by the file system and or operating system of the client computing device and can include for example file system data e.g. regular files file tables mount points etc. operating system data e.g. registries event logs etc. and the like. The e mail sub client on the other hand and its associated primary data B include data generated by an e mail application operating on the client computing device and can include mailbox information folder information emails attachments associated database information and the like. As described above the sub clients can be logical containers and the data included in the corresponding primary data A B may or may not be stored contiguously.

The exemplary storage policy A includes backup copy preferences or rule set disaster recovery copy preferences rule set and compliance copy preferences or rule set . The backup copy rule set specifies that it is associated with a file system sub client and an email sub client . Each of these sub clients are associated with the particular client computing device . The backup copy rule set further specifies that the backup operation will be written to the disk library A and designates a particular media agent A to convey the data to the disk library A. Finally the backup copy rule set specifies that backup copies created according to the rule set are scheduled to be generated on an hourly basis and to be retained for 30 days. In some other embodiments scheduling information is not included in the storage policy A and is instead specified by a separate scheduling policy.

The disaster recovery copy rule set is associated with the same two sub clients . However the disaster recovery copy rule set is associated with the tape library B unlike the backup copy rule set . Moreover the disaster recovery copy rule set specifies that a different media agent namely B will be used to convey the data to the tape library B. As indicated disaster recovery copies created according to the rule set will be retained for 60 days and will be generated on a daily basis. Disaster recovery copies generated according to the disaster recovery copy rule set can provide protection in the event of a disaster or other catastrophic data loss that would affect the backup copy A maintained on the disk library A.

The compliance copy rule set is only associated with the email sub client and not the file system sub client . Compliance copies generated according to the compliance copy rule set will therefore not include primary data A from the file system sub client . For instance the organization may be under an obligation to store and maintain copies of email data for a particular period of time e.g. 10 years to comply with state or federal regulations while similar regulations do not apply to the file system data. The compliance copy rule set is associated with the same tape library B and media agent B as the disaster recovery copy rule set although a different storage device or media agent could be used in other embodiments. Finally the compliance copy rule set specifies that copies generated under the compliance copy rule set will be retained for 10 years and will be generated on a quarterly basis.

At step 1 the storage manager initiates a backup operation according to the backup copy rule set . For instance a scheduling service running on the storage manager accesses scheduling information from the backup copy rule set or a separate scheduling policy associated with the client computing device and initiates a backup copy operation on an hourly basis. Thus at the scheduled time slot the storage manager sends instructions to the client computing device i.e. to both data agent A and data agent B to begin the backup operation.

At step 2 the file system data agent A and the email data agent B operating on the client computing device respond to the instructions received from the storage manager by accessing and processing the primary data A B involved in the copy operation which can be found in primary storage device . Because the operation is a backup copy operation the data agent s A B may format the data into a backup format or otherwise process the data.

At step 3 the client computing device communicates the retrieved processed data to the first media agent A as directed by the storage manager according to the backup copy rule set . In some other embodiments the information management system may implement a load balancing availability based or other appropriate algorithm to select from the available set of media agents A B. Regardless of the manner the media agent A is selected the storage manager may further keep a record in the storage manager database of the association between the selected media agent A and the client computing device and or between the selected media agent A and the backup copy A.

The target media agent A receives the data from the client computing device and at step 4 conveys the data to the disk library A to create the backup copy A again at the direction of the storage manager and according to the backup copy rule set . The secondary storage device A can be selected in other ways. For instance the media agent A may have a dedicated association with a particular secondary storage device s or the storage manager or media agent A may select from a plurality of secondary storage devices e.g. according to availability using one of the techniques described in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

The media agent A can also update its index to include data and or metadata related to the backup copy A such as information indicating where the backup copy A resides on the disk library A data and metadata for cache retrieval etc. The storage manager may similarly update its index to include information relating to the storage operation such as information relating to the type of storage operation a physical location associated with one or more copies created by the storage operation the time the storage operation was performed status information relating to the storage operation the components involved in the storage operation and the like. In some cases the storage manager may update its index to include some or all of the information stored in the index of the media agent A. After the 30 day retention period expires the storage manager instructs the media agent A to delete the backup copy A from the disk library A. Indexes and or are updated accordingly.

At step 5 the storage manager initiates the creation of a disaster recovery copy B according to the disaster recovery copy rule set .

At step 6 illustratively based on the instructions received from the storage manager at step 5 the specified media agent B retrieves the most recent backup copy A from the disk library A.

At step 7 again at the direction of the storage manager and as specified in the disaster recovery copy rule set the media agent B uses the retrieved data to create a disaster recovery copy B on the tape library B. In some cases the disaster recovery copy B is a direct mirror copy of the backup copy A and remains in the backup format. In other embodiments the disaster recovery copy B may be generated in some other manner such as by using the primary data A B from the primary storage device as source data. The disaster recovery copy operation is initiated once a day and the disaster recovery copies B are deleted after 60 days indexes are updated accordingly when after each information management operation is executed completed.

At step 8 the storage manager initiates the creation of a compliance copy C according to the compliance copy rule set . For instance the storage manager instructs the media agent B to create the compliance copy C on the tape library B at step 9 as specified in the compliance copy rule set . In the example the compliance copy C is generated using the disaster recovery copy B. In other embodiments the compliance copy C is instead generated using either the primary data B corresponding to the email sub client or using the backup copy A from the disk library A as source data. As specified in the illustrated example compliance copies C are created quarterly and are deleted after ten years and indexes are kept up to date accordingly.

While not shown in at some later point in time a restore operation can be initiated involving one or more of the secondary copies A B C. As one example a user may manually initiate a restore of the backup copy A by interacting with the user interface of the storage manager . The storage manager then accesses data in its index and or the respective storage policy A associated with the selected backup copy A to identify the appropriate media agent A and or secondary storage device A.

In other cases a media agent may be selected for use in the restore operation based on a load balancing algorithm an availability based algorithm or other criteria. The selected media agent A retrieves the data from the disk library A. For instance the media agent A may access its index to identify a location of the backup copy A on the disk library A or may access location information residing on the disk A itself.

When the backup copy A was recently created or accessed the media agent A accesses a cached version of the backup copy A residing in the index without having to access the disk library A for some or all of the data. Once it has retrieved the backup copy A the media agent A communicates the data to the source client computing device . Upon receipt the file system data agent A and the email data agent B may unpackage e.g. restore from a backup format to the native application format the data in the backup copy A and restore the unpackaged data to the primary storage device .

The storage manager may permit a user to specify aspects of the storage policy A. For example the storage policy can be modified to include information governance policies to define how data should be managed in order to comply with a certain regulation or business objective. The various policies may be stored for example in the management database . An information governance policy may comprise a classification policy which is described herein. An information governance policy may align with one or more compliance tasks that are imposed by regulations or business requirements. Examples of information governance policies might include a Sarbanes Oxley policy a HIPAA policy an electronic discovery E Discovery policy and so on.

Information governance policies allow administrators to obtain different perspectives on all of an organization s online and offline data without the need for a dedicated data silo created solely for each different viewpoint. As described previously the data storage systems herein build a centralized index that reflects the contents of a distributed data set that spans numerous clients and storage devices including both primary and secondary copies and online and offline copies. An organization may apply multiple information governance policies in a top down manner over that unified data set and indexing schema in order to permit an organization to view and manipulate the single data set through different lenses each of which is adapted to a particular compliance or business goal. Thus for example by applying an E discovery policy and a Sarbanes Oxley policy two different groups of users in an organization can conduct two very different analyses of the same underlying physical set of data copies which may be distributed throughout the organization and information management system.

A classification policy defines a taxonomy of classification terms or tags relevant to a compliance task and or business objective. A classification policy may also associate a defined tag with a classification rule. A classification rule defines a particular combination of criteria such as users who have created accessed or modified a document or data object file or application types content or metadata keywords clients or storage locations dates of data creation and or access review status or other status within a workflow e.g. reviewed or un reviewed modification times or types of modifications and or any other data attributes in any combination without limitation. A classification rule may also be defined using other classification tags in the taxonomy. The various criteria used to define a classification rule may be combined in any suitable fashion for example via Boolean operators to define a complex classification rule. As an example an E discovery classification policy might define a classification tag privileged that is associated with documents or data objects that 1 were created or modified by legal department staff or 2 were sent to or received from outside counsel via email or 3 contain one of the following keywords privileged or attorney or counsel or other like terms.

One specific type of classification tag which may be added to an index at the time of indexing is an entity tag. An entity tag may be for example any content that matches a defined data mask format. Examples of entity tags might include e.g. social security numbers e.g. any numerical content matching the formatting mask XXX XX XXXX credit card numbers e.g. content having a 13 16 digit string of numbers SKU numbers product numbers etc.

A user may define a classification policy by indicating criteria parameters or descriptors of the policy via a graphical user interface such as a form or page with fields to be filled in pull down menus or entries allowing one or more of several options to be selected buttons sliders hypertext links or other known user interface tools for receiving user input etc. For example a user may define certain entity tags such as a particular product number or project ID code that is relevant in the organization. In some implementations the classification policy can be implemented using cloud based techniques. For example the storage devices may be cloud storage devices and the storage manager may execute cloud service provider API over a network to classify data stored on cloud storage devices.

The formatting and structure of secondary copies can vary depending on the embodiment. In some cases secondary copies are formatted as a series of logical data units or chunks e.g. 512 MB 1 GB 2 GB 4 GB or 8 GB chunks . This can facilitate efficient communication and writing to secondary storage devices e.g. according to resource availability. For example a single secondary copy may be written on a chunk by chunk basis to a single secondary storage device or across multiple secondary storage devices . In some cases users can select different chunk sizes e.g. to improve throughput to tape storage devices.

Generally each chunk can include a header and a payload. The payload can include files or other data units or subsets thereof included in the chunk whereas the chunk header generally includes metadata relating to the chunk some or all of which may be derived from the payload. For example during a secondary copy operation the media agent storage manager or other component may divide the associated files into chunks and generate headers for each chunk by processing the constituent files. The headers can include a variety of information such as file identifier s volume s offset s or other information associated with the payload data items a chunk sequence number etc. Importantly in addition to being stored with the secondary copy on the secondary storage device the chunk headers can also be stored to the index of the associated media agent s and or the index . This is useful in some cases for providing faster processing of secondary copies during restores or other operations. In some cases once a chunk is successfully transferred to a secondary storage device the secondary storage device returns an indication of receipt e.g. to the media agent and or storage manager which may update their respective indexes accordingly. During restore chunks may be processed e.g. by the media agent according to the information in the chunk header to reassemble the files.

Data can also be communicated within the information management system in data channels that connect the client computing devices to the secondary storage devices . These data channels can be referred to as data streams and multiple data streams can be employed to parallelize an information management operation improving data transfer rate among providing other advantages. Example data formatting techniques including techniques involving data streaming chunking and the use of other data structures in creating copies e.g. secondary copies are described in U.S. Pat. Nos. 7 315 923 and 8 156 086 and 8 578 120 each of which is incorporated by reference herein.

Referring to the data stream has the stream header and stream payload aligned into multiple data blocks. In this example the data blocks are of size 64 KB. The first two stream header and stream payload pairs comprise a first data block of size 64 KB. The first stream header indicates that the length of the succeeding stream payload is 63 KB and that it is the start of a data block. The next stream header indicates that the succeeding stream payload has a length of 1 KB and that it is not the start of a new data block. Immediately following stream payload is a pair comprising an identifier header and identifier data . The identifier header includes an indication that the succeeding identifier data includes the identifier for the immediately previous data block. The identifier data includes the identifier that the data agent generated for the data block. The data stream also includes other stream header and stream payload pairs which may be for SI data and or for non SI data.

As an example the data structures illustrated in may have been created as a result of two storage operations involving two client computing devices . For example a first storage operation on a first client computing device could result in the creation of the first chunk folder and a second storage operation on a second client computing device could result in the creation of the second chunk folder . The container files in the first chunk folder would contain the blocks of SI data of the first client computing device . If the two client computing devices have substantially similar data the second storage operation on the data of the second client computing device would result in the media agent storing primarily links to the data blocks of the first client computing device that are already stored in the container files . Accordingly while a first storage operation may result in storing nearly all of the data subject to the storage operation subsequent storage operations involving similar data may result in substantial data storage space savings because links to already stored data blocks can be stored instead of additional instances of data blocks.

If the operating system of the secondary storage computing device on which the media agent operates supports sparse files then when the media agent creates container files it can create them as sparse files. A sparse file is type of file that may include empty space e.g. a sparse file may have real data within it such as at the beginning of the file and or at the end of the file but may also have empty space in it that is not storing actual data such as a contiguous range of bytes all having a value of zero . Having the container files be sparse files allows the media agent to free up space in the container files when blocks of data in the container files no longer need to be stored on the storage devices. In some examples the media agent creates a new container file when a container file either includes 100 blocks of data or when the size of the container file exceeds 50 MB. In other examples the media agent creates a new container file when a container file satisfies other criteria e.g. it contains from approximately 100 to approximately 1000 blocks or when its size exceeds approximately 50 MB to 1 GB .

In some cases a file on which a storage operation is performed may comprise a large number of data blocks. For example a 100 MB file may comprise 400 data blocks of size 256 KB. If such a file is to be stored its data blocks may span more than one container file or even more than one chunk folder. As another example a database file of 20 GB may comprise over 40 000 data blocks of size 512 KB. If such a database file is to be stored its data blocks will likely span multiple container files multiple chunk folders and potentially multiple volume folders. Restoring such files may require accessing multiple container files chunk folders and or volume folders to obtain the requisite data blocks.

Efficiently Restoring Execution of a Backed Up Virtual Machine Based on Coordination with Virtual Machine File Relocation Operations

The components may be logically interconnected as shown including illustratively via communications network . The physical communications infrastructure required to support these logical connections is well known in the art and may be any suitable electronic communications infrastructure such as described in regard to communication pathways above.

Virtual machine hereinafter VM is well known in the art and is hosted by a computing device which is described below. VM may be configured with and may host one or more applications described above . VM may be viewed and or controlled by a user e.g. using a file manager to restart activate power on and or restore from secondary storage etc. as described in further detail in U.S. patent application Ser. No. 14 307 366 entitled File Manager Integration with Virtualization in an Information Management System Including User Control and Storage Management of Virtual Machines which is hereby incorporated by reference in its entirety herein. The user may view information about the VM and its backed up files and may select a given VM may select an associated drive e.g. drive C backed up and associated with VM and may also perform certain operations that control the selected VM.

Virtual machine host server computing device hereinafter VM host or host computing device is analogous to client computing device and additionally may host both VM and a virtual machine file relocation application both of which may at times execute substantially concurrently on VM host .

Write cache is well known storage technology and stores data blocks that are written by VM and or by an application that executes thereon. Write cache is associated with VM host . Write cache may reside on VM host on a distinct storage device e.g. or on primary storage device .

Primary storage device is analogous to primary storage device described in more detail above and further comprises additional components required for operation in system e.g. destination shown in .

Secondary storage computing device is analogous to secondary storage computing device described in more detail above and further comprises additional components required for operation in system such as read cache media agent and shared file system .

Secondary storage device comprises media used for storing backup data such as tape and is analogous to secondary storage device described in further detail above. Secondary storage device or backup media additionally comprises components for operating in system such as a backup copy of data associated with VM e.g. backup copy shown in .

Virtualization client computing device is analogous to client computing device described in more detail above and additionally comprises a virtual server data agent component e.g. required for operating in system . Virtualization client computing device when executing virtual server data agent thus is largely responsible for coordinating a number of operations between VM and a virtual machine file relocation operation as described in more detail below.

Virtual server data agent or data agent is analogous to data agent described in more detail above and additionally comprises enhanced functionality for operating in system . Illustratively data agent may comprise a functional module for coordinating operations in system e.g. module VM.

Functional module VM is a functional component of data agent and may be implemented as executable software and or firmware which executes on the underlying virtualization client computing device . When it executes according to the illustrative embodiment module VM is largely responsible for coordinating a number of operations between VM and a virtual machine file relocation operation as described in more detail below. For example module VM may perform one or more of the following operations transmit a profile of VM to media agent instruct media agent to analyze said profile and determine certain key blocks of data in a backup copy of VM instruct media agent to pre stage said key blocks of data to a read cache to speed up booting of VM instruct media agent to pre stage certain sets of data blocks to the read cache to speed up the relocation operation etc. More details are given in and in regard to methods and herein.

Functional module VM is shown here as a distinct component to ease understanding of the present disclosure however alternative embodiments are also possible within the scope of the present invention. Module VM may be embodied as a unified module within data agent layered on existing data agent code or may be a logical construct whose functionality is distributed through one or more other functional modules of data agent and or any combination thereof.

Media agent is analogous to media agent and additionally comprises enhanced functionality for operating in system . Illustratively media agent may comprise a functional module operating within system e.g. module VM.

Functional module VM is a functional component of media agent and may be implemented as executable software and or firmware which executes on the underlying secondary storage computing device . When it executes according to the illustrative embodiment module VM is largely responsible for coordinating a number of operations in conjunction with data agents between VM and the relocation operation. Module VM may operate as instructed by data agent as described in more detail below. For example module VM may perform one or more of the following operations receive a profile of VM from data agent analyze said profile by performing a predictive analysis and determine certain key blocks of data in a backup copy of VM pre stage said key data blocks to a read cache to speed up booting of VM pre stage certain sets of data blocks to the read cache to speed up the relocation operation copy other data blocks from the backup copy of VM to the read cache manage the serving of read requests based on the read cache received from host computing device track the data blocks requested in read requests and determine whether a series of data blocks consistent with the relocation sequence of the VMFR operation has been requested and if so delete said series of data blocks from the read cache after the data blocks have been served etc. More details are given in and in regard to methods and herein.

Functional module VM is shown here as a distinct component to ease understanding of the present disclosure however alternative embodiments are also possible within the scope of the present invention. Module VM may be embodied as a unified module within media agent layered on existing media agent code or may be a logical construct whose functionality is distributed through one or more other functional modules of media agent and or any combination thereof.

Read cache or media agent read cache is associated with media agent and preferably resides on the same secondary storage computing device as media agent . Read cache stores data that media agent copies from backup media e.g. from backup copy . Read cache is used by media agent to serve read requests received from host computing device e.g. as initiated by VM application s and or VMFR application . Read cache may be implemented in main memory or in other local storage readily accessible to media agent .

Shared file system is associated with media agent and preferably resides on the same secondary storage computing device as media agent . Preferably shared file system is an NFS file system as is well known in the art. Additionally in order to operate according to the illustrative embodiment shared file system is mounted to host computing device and is configured as a restore point for VM and is also configured as the logical source of data from which the VMFR operation relocates data to a destination on primary storage device .

Virtual machine file relocation VMFR application may execute on host computing device which also hosts VM . VMFR application is well known in the art and the resultant VMFR operation may be used for relocating e.g. moving transferring copying etc. a virtual machine s configuration file s and virtual disk s while the virtual machine is powered on. As an abbreviation these configuration file s and virtual disk s which are associated with the virtual machine may be collectively referred to herein as VM files. An example of VMFR application includes Storage vMotion from VMWare Inc. According to the illustrative embodiment data agent cooperates with media agent within system to coordinate between restoring VM and the VMFR operation both of which require backed up data blocks that reside in backup copy in secondary storage.

Communications network provides the physical infrastructure required to support electronic communications among the depicted components and is well known in the art. Network may be any suitable electronic communications infrastructure such as described in regard to communication pathways above.

Destination may be a volume configured on primary storage device to receive data that is relocated thereto by the illustrative virtual machine file relocation operation. After the relocation is complete VM shall use destination as a primary data store for its continued execution on host computing device . Preferably destination is configured with a Virtual Machine Disk VMDK file format though any file format suitable to the virtual machine file relocation operation may be used.

Backup copy is a secondary copy of VM files e.g. configuration file s and virtual disk s that are associated with VM . Thus backup copy may be a copy of VM . Preferably backup copy is configured with a Virtual Machine Disk VMDK file format such that this format is compatible with the configuration of logical source and destination though any file format suitable to the virtual machine file relocation operation may be used.

Logical source may be a volume configured in shared file system which logically acts as the source of data that is relocated by the VMFR operation to destination . Logical source also may be configured as a restore point for VM . As will be shown below logical source logically supplies data which actually originates from the backup copy and reaches logical source via read cache .

A number of operations may occur in system not necessarily in the order in which they are described below.

 Mount Shared File System. Shared file system comprising logical source may be mounted to host computing device . Mounting a shared file system is well known in the art.

 Set Up VMFR Data Flow. VMFR application is configured to use logical source as the source of data to be relocated and to use destination as the destination of the relocated data. Thus the data flow of the VMFR operation may be established accordingly. The source and destination may be selected and or configured by a user e.g. via a user interface provided by host computing device .

 Indicate VM Profile. Data agent illustratively knows e.g. receives and stores updates from host computing device from storage manager etc. an operational status of VM and VMFR application on host computing device . Accordingly prior to the launch of VM and also prior to the VMFR operation data agent may indicate to media agent an operational profile of VM VM profile . This indication may take any number of forms whether in one unified message or via a plurality of messages indications e.g. a transmission of a VM profile identifier and or application profile identifier s which may be known to media agent and which may trigger a predictive analysis at media agent a transmission of a VM profile and or application profile identifier s that may indicate which data blocks in backup copy are needed by VM to boot and execute for an initial period of time which may include booting one or more applications a transmission of an instruction to media agent to begin pre staging data blocks from backup copy to read cache based on one or more of the VM profile application profile s identification s of data blocks to be pre staged etc. and or any combination thereof.

This operation may also comprise an indication of particular VM associated files e.g. drive C on VM that are available from backup and which may have been selected by a user via an integrated file manager application that provides visibility into and control over backed up virtual machines e.g. as described in U.S. patent application Ser. No. 14 307 366 entitled File Manager Integration with Virtualization in an Information Management System Including User Control and Storage Management of Virtual Machines. . To understand this operation one must consider the indexing that occurs during VM backup. As a result of indexing the illustrative file manager that is integrated with virtualization may present to users not only the identity of certain backed up VMs but also additional details such as files and virtual drives associated therewith. A user may then decide to select a certain backed up drive or file via the file manager s user interface. As a result agent may receive an indication from the storage manager identifying the user s selection via the file manager application . The user selection s may be included in the VM profile that is transmitted to media agent to enable pre staging of such data blocks as may be associated with the user selected file s . Media agent may use its index e.g. to identify which backed up data blocks are associated with the user s selection s . Thus rather than requiring the restoration of all backup data associated with the given VM before the user request may be satisfied e.g. browsing a certain file pre staging enables the illustrative system to pick out certain data blocks that are likely to be needed in initially serving the VM s user s . See also blocks and in herein.

Thus indicate VM profile may comprise one or more instructions triggers and information in anticipation of launching execution of VM in response media agent may begin performing its respective role.

The VM profile may be an operational profile that indicates and or identifies operational characteristics of the VM which may comprise a set of data blocks or a sector in a volume etc. needed by VM to boot and or operate initially after booting and likewise in regard to application profile s . Alternatively a booting scheme may be provided by or associated with the VM profile such as a starting block for the boot sequence. Additionally as described above the VM profile may also comprise information pertaining to user selections of certain backed up entities such as backed up virtual drives and or files.

Data agent may further indicate whether in one unified message or via a plurality of messages indications to media agent a relocation sequence which may be provided e.g. as a scheme or formula for the relocation operation to be performed by VMFR application . This aspect is discussed in further detail in a subsequent figure.

 Pre Stage BU Data Blocks to Read Cache Anticipating VM Launch based on VM Profile and or Application Profile and or User Selected File s . Based on the indication s received from data agent media agent may pre stage backup data blocks. In some embodiments the pre staging operation may be based on and or may comprise a predictive analysis performed by media agent which results in determining by media agent based on the VM profile and or application profile s and or user selected file s received from data agent which data blocks to pre stage to read cache . For example media agent may comprise pre programmed mappings between a given VM profile received from and or identified by data agent and corresponding set s of data blocks stored in backup copy . Media agent may perform a predictive analysis based on the VM profile and or the application profile s to determine the proper set of data blocks to pre stage. See also . In some alternative embodiments data agent may identify the appropriate data blocks to media agent so that the determination is effectively performed by data agent .

 Copy Pre Staged Data Blocks. Media agent may copy data blocks from backup copy to read cache . This may be an ongoing operation as different sets of data blocks may be pre staged over time from backup copy .

 Execute VM. VM may launch execution on host computing device . For example a file manager application may enable a user to select VM and power up or activate the VM depending on the implementation and or user interface terminology etc. Thus instant VM restore may occur with respect to VM based at least in part on the pre staged data blocks described in . One or more applications may also execute on VM after VM has powered up. Read operations e.g. read requests for one or more data blocks initiated by VM and or application s executing thereon may be directed by host computing device to the shared file system e.g. logical source that is configured as the restore point for VM . Media agent may serve these read requests based on the read cache as described in further detail below.

 Serve Reads. Media agent may serve reads for data blocks to the host computing device based on read cache and via logical source in shared file system . Media agent may serve the read requests to host computing device and or to the originator of the read request e.g. VM application s as appropriate to the implementation.

 Serve Reads from Read Cache. Media agent may attempt to serve all received read requests from read cache . However if the requested data block s are not available from read cache media agent may copy those data blocks to the read cache from backup copy before serving the read request. See also .

 Serve Reads from Backup Media if Needed . As noted some read requests cannot be initially satisfied from read cache . In some embodiments the requested data blocks may be copied from the backup copy to the read cache before serving the read request from read cache . See also . In some other embodiments the data blocks may be read by media agent from the backup copy and served directly from the backup media.

 Write. Any write operations initiated by VM and or applications executing thereon may be captured in a distinct cache that is associated with host computing device e.g. write cache .

 Indicate Pre VMFR Mode. While VM is executing and prior to the VMFR operation data agent may indicate to media agent a so called pre VMFR mode which anticipates the VMFR operation in system . This indication may take any number of forms whether in one unified message or via a plurality of messages indications instructions e.g. a transmission of a VMFR operational profile identifier which may be known to media agent and which may trigger a predictive analysis at media agent a transmission of a VMFR operational profile and or relocation sequence that may identify which data blocks in backup copy are needed by the anticipated VMFR operation to begin relocating data to destination a transmission of an instruction to media agent to begin pre staging data blocks from backup copy to read cache based on one or more of the VMFR operational profile and or relocation sequence identification s of data blocks to be pre staged etc. and or any combination thereof.

 Pre Stage BU Data Blocks To Read Cache Anticipating VMFR Operation . Based on the indication s received from data agent media agent may continue to pre stage backup data blocks but in this case it may pre stage data blocks for the relocation operation. In some embodiments the pre staging operation may be based on and or comprise a predictive analysis performed by media agent which results in determining by media agent based on the VMFR operational profile and or relocation sequence received from data agent which data blocks to pre stage to read cache . For example media agent may comprise pre programmed mappings between a given VMFR operational profile and or relocation sequence received from and or identified by data agent and corresponding set s of data blocks stored in backup copy . Media agent may perform a predictive analysis based on the VMFR profile and or relocation sequence scheme to determine the proper set of data blocks to pre stage. See also . In some alternative embodiments data agent may identify the appropriate data blocks to media agent so that the determination is effectively performed by data agent .

 Execute VMFR. The anticipated VMFR operation may begin based on launching execution of VMFR application on host computing device . The VMFR operation begins based at least in part on the pre staged data blocks described in for example data blocks that were pre staged based on the relocation sequence scheme of the VMFR operation.

 Cause Relocation and Relocate. VMFR application may then perform the relocation of data from logical source to destination . Accordingly the VMFR operation relocates e.g. moves transfers copies etc. data blocks from logical source where they are supplied by media agent from read cache to destination .

 Serve Reads from Restored Data if Available . Read operations e.g. read requests for one or more data blocks initiated by VM and or application s may be directed by host computing device to destination in the case of data blocks that have been relocated by the VMFR operation. Host computing device may track the progress of the relocation operation and may serve such reads from destination .

Read requests initiated by VM and or application s for data blocks that are not as yet relocated to destination may be directed by host computing device to the shared file system e.g. logical source . Media agent may then serve these read requests based on read cache as described above see e.g. . Read requests initiated by the VMFR operation i.e. to continue relocating data from backup to destination may also be directed by host computing device to the shared file system e.g. logical source . Media agent may then serve these read requests based on read cache as described in .

 Indicate VMFR in Progress. While VM and the VMFR operation execute substantially concurrently data agent may indicate to media agent that the VMFR operation is in progress. This indication may take any number of forms whether in one unified message or via a plurality of messages indications e.g. a transmission indicating that pre staging of blocks begun in should continue according to the relocation sequence a transmission indicating which data blocks in backup copy should be pre staged to read cache for the ongoing VMFR operation etc. and or any combination thereof. The present indication may also instruct media agent to track read requests and identify sequences of data blocks that may be consistent with the VMFR relocation sequence.

 Track Sequential Reads. Media agent may track read requests e.g. as received from host computing device for the occurrence of sequences of data blocks that may be consistent with the relocation sequence of the VMFR operation. Media agent may track based on the above mentioned indication and or instruction received from data agent .

 Purge Read Cache based on Sequential Reads. Media agent may identify one or more sequences of data blocks that correspond to the VMFR relocation sequence in which case media agent may purge these data blocks from read cache after serving the respective read requests. This operation advantageously keeps read cache to a smaller more manageable size than copying the entire backup copy to the read cache without purging. Read cache may enable faster responsiveness to read requests as a result.

 Apply Writes. Host computing device may apply all writes collected in write cache to destination thus updating destination .

 Unmount Shared File System. Shared file system may be unmounted from host computing device . At this point VM and application s may use destination as the primary data store since all backed up data blocks have been relocated to destination and destination has been updated by applying writes.

 Indicate VMFR Completed. Data agent may indicate to media agent that the VMFR operation has been completed. This indication s may comprise an instruction to empty read cache and or to stop pre staging data blocks based on the relocation sequence and or to de associate the backup media. In some alternative embodiments this may be implemented as a trigger for media agent to perform these operations.

 Empty Read Cache. Media agent may empty the read cache based at least in part on the VMFR completed indication instruction trigger and may likewise stop pre staging any more data blocks from backup copy .

 De Associate Backup Media. Media agent may de associate backup media e.g. secondary storage device from the VM based at least in part on the VMFR completed indication instruction trigger received from data agent .

Notably the operations described in may be executed in a different sequence and or in a different order of priority than described in these figures. These operations are presented here without limitation and the illustrative embodiment and or other embodiments may comprise additional operations and or operational parameters that are not shown or described in these particular figures. Conversely some alternative embodiments may not comprise one or more of the depicted operations in .

At block system prepares for launch of VM which may include pre staging backed up data blocks to read cache based at least in part on operational profile s of VM and associated application s . More details are given in a subsequent figure. See also .

At block VM may launch e.g. begins executing on host computing device based at least in part on pre staged data blocks in read cache which are served by media agent . See also .

At block VM executes on host computing device which may also include one or more application s executing on VM . Notably this block may operate substantially concurrently with one or more of blocks . More details about block are given in a subsequent figure.

At block substantially concurrently with executing VM system may prepare for the VMFR operation which may include pre staging backed up data blocks to read cache associated with media agent . More details are given in a subsequent figure. See also .

At block substantially concurrently with executing VM the VMFR operation may also execute relocating backed up data blocks to destination . The start of the VMFR operation may be scheduled in advance and or may be triggered by an operational parameter. More details are given in a subsequent figure. See also .

At block after the VMFR operation has completed writes are applied from write cache to destination at which point updated destination may be used at the primary data store by VM and any application s executing thereon. Some details were described in further detail in . Notably execution of VM and or application s thereon may continue substantially concurrently. Control may pass to block and or block .

At block one or more post VMFR operations may occur in system . Shared file system may be unmounted e.g. by host computing device and or by media agent from host computing device backup media e.g. secondary storage device may be de associated from VM e.g. by media agent media agent may stop pre staging data blocks from backup copy to read cache and may empty read cache . See also . Control may pass to block .

At block which may occur after block or after block VM may continue to execute including application s on host computing device using updated destination exclusively as a primary data store. In other words read requests are no longer directed at logical source and or media agent and are served instead from updated destination . Method may end after the present block.

At block virtual server data agent may export shared file system to host computing device that comprises a virtual machine e.g. VM . This operation is well known in the art.

At block shared file system may be mounted to host computing device . Shared file system and or logical source therein may be configured as the restore point for VM and may be further configured as the source of data for the relocation to be performed by the VMFR operation.

At block virtual server data agent may transmit to media agent a VM profile indication e.g. including an operational profile for VM and or for application s if such profile s are available and or user selected virtual drives or file s that are associated with the selected VM . User selected entities such as a VM virtual drive folder and or file may be identified by a user via an integrated file manager application that provides visibility into and control over backed up virtual machines e.g. as described in U.S. patent application Ser. No. 14 307 366 entitled File Manager Integration with Virtualization in an Information Management System Including User Control and Storage Management of Virtual Machines. . As noted in the user s selection may be a basis for which particular blocks to pre stage from the backup copy.

At block media agent may perform a predictive analysis based on the VM and application operational profile s received in block to determine a first set of data blocks to pre stage to read cache . As noted this first set may comprise the data blocks determined to be most likely needed to boot initially serve VM application s executing thereon. The first set of data blocks may also comprise data blocks that are associated with a user selection via the file manager application discussed above. In some other embodiments the first set of blocks may be determined by data agent rather than determined by media agent and may be identified to media agent by data agent .

At block media agent may pre stage e.g. copy the first set of data blocks from backup copy e.g. comprising VM files stored on secondary storage device to read cache . In some embodiments pre staging may comprise the predictive analysis of block .

At block data agent may schedule a start time for a VMFR operation to begin relocating data based on the backup copy from logical source to destination . The start time may immediately follow launch of execution of VM or may be deferred to a time of day when network traffic is lower and the VMFR operation may relocate data more speedily. For example VM may be launched at any time but the relocation operation may start after close of business when the production system has a lighter load.

At block host computing device based on a write operation issued by VM and or application s executing thereon may write one or more data blocks to an associated write cache . See also .

At block which is a decision block host computing device based on a first read request issued by VM and or application s executing thereon may determine whether a second set of data blocks is located in destination i.e. whether the requested data blocks have been relocated as yet . If not control passes to block if yes control passes to block .

At block host computing device may serve the second set of data blocks which have been relocated from destination . Control may pass back to block for another round of write operations etc.

At block host computing device may transmit to media agent via shared file system the first read request for the second set of data blocks which have not as yet been relocated .

At block which is a decision block media agent may determine whether the second set of data blocks may be found in read cache e.g. the data blocks have been pre staged or whether the data blocks are on secondary storage device in backup copy . If the second set of data blocks may be found in read cache control passes to block otherwise control passes to block .

At block media agent may copy the second set of data blocks from backup copy stored on secondary storage device to read cache .

At block media agent may serve the requested second set of data blocks from read cache to host computing device via the shared file system in response to the first read request.

At block media agent may copy one or more data blocks from backup copy to read cache such that the copying occurs in a sequence consistent with operational characteristics of the anticipated VMFR operation such as according to the relocation sequence employed by the VMFR operation. For example if the VMFR operation is configured to sequentially relocate data blocks from the first data block of the backup copy then pre staging copy operations for the VMFR likewise will start at the first data block and proceed according to the relocation sequence.

Notably the present pre staging for VMFR preferably occurs at a lower priority than serving read requests which may be initiated by VM and or application s executing thereon. The relative difference in priority correlates with a stage of system in which VM executes prior to the VMFR operation. The priority setting may be communicated by data agent to media agent and or may be pre programmed as an operational characteristic of media agent . The reason for the difference in priority may be to favor read requests by VM application s which may be servicing users over the relocation operation which has not as yet begun.

At block host computing device may launch the VMFR operation e.g. by executing VMFR application at the scheduled time see e.g. block . This operation is well known in the art.

At block host computing device may transmit a second read request to media agent via the shared file system requesting a third set of data blocks e.g. based on a read request issued by the VMFR operation.

At block which is a decision block media agent may determine whether the third set of data blocks may be found in read cache e.g. having been pre staged at block or whether it may be found on secondary storage device in backup copy . If the third set of data blocks may be found in the read cache control passes to block otherwise control passes to block .

At block media agent may copy the third set of blocks from the backup copy stored on secondary storage device to read cache .

At block media agent may serve the requested third set of data blocks from read cache to host computing device via the shared file system in response to the second read request. Serving the present read request preferably occurs at substantially the same priority as serving other read requests e.g. read requests initiated by VM and or application s executing thereon see e.g. block . The relative equality in priority correlates with a stage of system when both VM and the VMFR operation are executing substantially concurrently . The priority setting may be communicated by data agent to media agent and or may be pre programmed as an operational characteristic of media agent .

At block the VMFR operation relocates the third set of data blocks from the shared file system e.g. logical source to destination .

At block media agent may identify a plurality of read requests corresponding to sequential data blocks based at least in part on tracking read requests and analyzing them against the relocation sequence of the VMFR operation media agent may then infer that these read requests are VMFR initiated reads according to the relocation sequence media agent may then purge read cache of said sequential data blocks after having served the read requests . See also . The present block may be triggered to occur occasionally or periodically or may be triggered by a certain number of sequential data blocks or by another triggering scheme and or any combination thereof. The trigger may be implemented in media agent and or data agent .

At block a copy of VM files e.g. comprising a configuration file and or virtual disk s and of associated application s files may be identified as residing in secondary storage e.g. stored in backup copy . The identification may be performed by a file manager for display and control of backed up VMs in system such as the file manager described in U.S. patent application Ser. No. 14 307 366 entitled File Manager Integration with Virtualization in an Information Management System Including User Control and Storage Management of Virtual Machines. As a result the backup copy may be displayed in connection with VM to a user of the file manager application. This may include virtual drives directories folder files etc.

At block based on user selection of VM via the illustrative file manager system may prepare for launch of VM which may include pre staging of backed up data blocks to read cache based on operational profile s of the selected VM and its associated application s . Illustratively this block may operate according to according to blocks described above. See also .

At block VM launches execution on host computing device based at least in part on the pre staged blocks in cache . See also and block described above.

At block VM executes on host computing device which may include one or more application executing on VM and or browsing of backed up folders and or files. The execution is based at least in part on data blocks served by media agent from read cache e.g. according to blocks described above.

At block a warning of VM expiration may be issued to a user e.g. based on a VM lifecycle policy managed by a storage manager such as storage manager .

At block which may occur at VM s expiration time VM is de activated e.g. powered down which operation may include emptying read cache unmounting the shared file system from host computing device de associating backup media from VM and or any combination thereof. Method may end after the present block.

In regard to the components blocks operations and or sub operations described in reference to other embodiments are possible within the scope of the present invention such that the above recited components phases steps blocks operations and or messages requests queries instructions are differently arranged sequenced sub divided organized and or combined. In some embodiments a different component of system may initiate or execute a given operation.

An illustrative system for restoring a virtual machine to be executed on a host computing device based on coordination with a virtual machine file relocation operation the system comprising a host computing device configured to execute the virtual machine and further configured to execute the virtual machine file relocation operation substantially concurrently with the virtual machine wherein the virtual machine file relocation operation comprises a logical transfer based on a relocation sequence of a backup copy of data associated with the virtual machine to a destination on a primary storage device in communication with the host computing device and wherein the backup copy comprises at least one of a configuration file and a virtual disk associated with the virtual machine a secondary storage computing device in communication with the host computing device wherein the secondary storage computing device comprises a media agent a read cache and a shared file system mounted to the host computing device wherein the shared file system is configured as a recovery point for the virtual machine and as a source of data for the virtual machine file relocation operation a virtualization client computing device in communication with the secondary storage computing device wherein the virtualization client computing device comprises a data agent a secondary storage device in communication with the secondary storage computing device wherein the secondary storage device comprises the backup copy of data associated with the virtual machine wherein the media agent is configured to copy a first set of data blocks from the backup copy to the read cache wherein the first set of data blocks is based on a profile of the virtual machine copy a second set of data blocks from the backup copy to the read cache wherein the second set of data blocks is based on the relocation sequence of the virtual machine file relocation operation and serve a read request for a data block by i copying the requested data block from the backup copy to the read cache if the requested data block is not found in the read cache and ii transmitting the requested data block from the read cache in response to the read request.

The above recited illustrative system wherein the profile of the virtual machine pertains to launch of execution of the virtual machine on the host computing device. The above recited illustrative system wherein the read request is received from the host computing device. The above recited illustrative system wherein the profile of the virtual machine is received by the media agent from the data agent. The above recited illustrative system wherein the media agent is further configured to when the virtual machine and the virtual machine file relocation operation execute substantially concurrently on the host computing device copy a third set of data blocks from the backup copy to the read cache at substantially the same priority as the serve of the read request wherein the third set of data blocks is based on the relocation sequence of the virtual machine file relocation operation.

The above recited illustrative system wherein the media agent is further configured to determine whether a plurality of read requests comprises a sequence of data blocks according to the relocation sequence of the virtual machine file relocation operation and if the plurality of read requests comprises the sequence of data blocks according to the relocation sequence of the virtual machine file relocation operation purge the sequence of data blocks from the read cache after the plurality of read requests have been served. The above recited illustrative system wherein the media agent is further configured to receive from the data agent an indication that a plurality of read requests comprises a sequence of data blocks according to the relocation sequence of the virtual machine file relocation operation and purge the sequence of data blocks from the read cache after the plurality of read requests have been served. The above recited illustrative system wherein the media agent is further configured to after launch of execution of the virtual machine and prior to launch of the virtual machine file relocation operation copy the second set of data blocks from the backup copy to the read cache at a lower priority than the serve of the read request. The above recited illustrative system wherein the media agent is further configured to after the virtual machine file relocation operation has completed and substantially concurrently with execution of the virtual machine on the host computing device de associate the secondary storage device from the virtual machine.

The above recited illustrative system wherein the media agent is further configured to after the virtual machine file relocation operation has completed and substantially concurrently with execution of the virtual machine on the host computing device a de associate the secondary storage device from the virtual machine and b instruct the virtual machine to use the destination on the primary storage device as a primary data store. The above recited illustrative system wherein coordination with the virtual machine file relocation operation comprises the media agent being configured to after launch of execution of the virtual machine and prior to the launch of the virtual machine file relocation operation copy the second set of data blocks from the backup copy to the read cache at a lower priority than the serve of the read request. The above recited illustrative system wherein coordination with the virtual machine file relocation operation comprises the media agent being configured to if a plurality of read requests comprises a sequence of data blocks according to the relocation sequence of the virtual machine file relocation operation purge the sequence of data blocks from the read cache after the plurality of read requests have been served. The above recited illustrative system wherein coordination with the virtual machine file relocation operation comprises the media agent being configured to after the virtual machine file relocation operation has completed and substantially concurrently with execution of the virtual machine on the host computing device a de associate the secondary storage device from the virtual machine and b instruct the virtual machine to use the destination on the primary storage device as a primary data store.

An illustrative method for restoring execution of a virtual machine on a host computing device in a storage management system based on coordination with a virtual machine file relocation operation the method comprising prior to execution of the virtual machine determining by a media agent component of the storage management system based on a profile of the virtual machine a first set of data blocks to be copied from a backup copy of data associated with the virtual machine wherein the backup copy is stored on a secondary storage device in communication with the media agent and wherein the backup copy comprises at least one of a configuration file and a virtual disk associated with the virtual machine copying the first set of data blocks by the media agent from the backup copy to a read cache associated with the media agent on a secondary storage computing device launching execution of the virtual machine on the host computing device based on the first set of data blocks which set of blocks is served by the media agent from the read cache copying a second set of data blocks by the media agent from the backup copy to the read cache wherein the second set of data blocks is based on a relocation sequence of the virtual machine file relocation operation and wherein the virtual machine file relocation operation comprises a logical transfer according to the relocation sequence of the backup copy to a destination on a primary storage device in communication with the host computing device serving a read request for a data block by the media agent wherein the serving the read request comprises i if the requested data block is not found in the read cache copying by the media agent the requested data block from the backup copy to the read cache and ii transmitting by the media agent the requested data block from the read cache and wherein while the virtual machine executes on the host computing device prior to the virtual machine file relocation operation the media agent serves the read request at a higher priority than copying the second set of data blocks from the backup copy to the read cache.

The above recited illustrative method further comprising while the virtual machine and the virtual machine file relocation operation execute substantially concurrently on the host computing device copying a third set of data blocks by the media agent from the backup copy to the read cache wherein the third set of data blocks is based on the relocation sequence of the virtual machine file relocation operation and wherein the media agent serves the read request at substantially the same priority as copying the third set of data blocks.

The above recited illustrative method further comprising after the virtual machine file relocation operation has completed and substantially concurrently with execution of the virtual machine on the host computing device de associating by the media agent the secondary storage device from the virtual machine. The above recited illustrative method further comprising after the virtual machine file relocation operation has completed using the destination on the primary storage device by the virtual machine as a primary data store for the virtual machine.

Another illustrative method for restoring execution of a virtual machine on a host computing device based on coordination with a virtual machine file relocation operation the method comprising copying by a media agent a first set of data blocks from a backup copy of data associated with the virtual machine to a read cache associated with the media agent wherein the backup copy is stored on a secondary storage device and comprises at least one of a configuration file and a virtual disk associated with the virtual machine and wherein the first set of data blocks is based on a profile of the virtual machine copying by the media agent a second set of data blocks from the backup copy to the read cache wherein the virtual machine file relocation operation comprises a logical transfer according to a relocation sequence of the backup copy of data to a destination on a primary storage device and wherein the second set of data blocks is based on the relocation sequence serving by the media agent a read request for a data block wherein serving the read request comprises i if the requested data block is not found in the read cache copying by the media agent the requested data block from the backup copy to the read cache and ii transmitting by the media agent the requested data block from the read cache and wherein copying the second set of data blocks from the backup copy to the read cache occurs at a lower priority than serving the read request while the virtual machine executes on the host computing device prior to the virtual machine file relocation operation.

The above recited illustrative method further comprising while the virtual machine and the virtual machine file relocation operation execute substantially concurrently on the host computing device copying by the media agent a third set of data blocks from the backup copy to the read cache at substantially the same priority as serving the read request wherein the third set of data blocks is based on the relocation sequence of the virtual machine file relocation operation. The above recited illustrative method further comprising after the virtual machine file relocation operation has completed and substantially concurrently with execution of the virtual machine on the host computing device a de associating by the media agent the secondary storage device from the virtual machine and b using the destination on the primary storage device by the virtual machine as a primary data store. The above recited illustrative method wherein the read request is directed at a shared file system which is configured as a recovery point for the virtual machine and as a source of data for the virtual machine file relocation operation.

The above recited illustrative method wherein the profile of the virtual machine is received by the media agent from the data agent. The above recited illustrative method wherein launching execution of the virtual machine on the host computing device is based at least in part on the first set of data blocks. The above recited illustrative method further comprising if a plurality of read requests comprises a sequence of data blocks according to the relocation sequence of the virtual machine file relocation operation purging by the media agent the sequence of data blocks from the read cache after the plurality of read requests have been served.

Another illustrative method for coordinating in a storage management system between a restoration of a virtual machine and a virtual machine file relocation operation the method comprising copying by a media agent a first set of data blocks from a backup copy of data associated with the virtual machine to a read cache associated with the media agent wherein the backup copy is stored on a secondary storage device and comprises one or more configuration files and one or more virtual disks and wherein the first set of data blocks is based on a profile of the virtual machine launching execution of the virtual machine on the host computing device based at least in part on the first set of data blocks copying by the media agent a second set of data blocks from the backup copy to the read cache wherein the virtual machine file relocation operation comprises a logical transfer according to a relocation sequence of the backup copy of data associated with the virtual machine to a destination on a primary storage device that is in communication with the host computing device and wherein the second set of data blocks is based on the relocation sequence while the virtual machine executes on the host computing device prior to the virtual machine file relocation operation serving by the media agent a read request for a data block wherein serving the read request comprises i if the requested data block is not found in the read cache copying by the media agent the requested data block from the backup copy to the read cache and ii transmitting by the media agent the requested data block from the read cache wherein the read request is served at a higher priority than copying the second set of data from the backup copy to the read cache and while the virtual machine and the virtual machine file relocation operation execute substantially concurrently on the host computing device A serving by the media agent a read request for a data block wherein serving the read request comprises i if the requested data block is not found in the read cache copying by the media agent the requested data block from the backup copy to the read cache and ii transmitting by the media agent the requested data block from the read cache and B copying by the media agent a third set of data blocks from the backup copy to the read cache wherein the third set of data blocks is based on the relocation sequence of the virtual machine file relocation operation and wherein the read request is served at substantially the same priority as copying of the third set of data blocks.

The above recited illustrative method further comprising after the virtual machine file relocation operation has completed and substantially concurrently with the execution of the virtual machine on the host computing device a de associating by the media agent the secondary storage device from the virtual machine and b using the destination on the primary storage device by the virtual machine as a primary data store.

Another illustrative method according to an illustrative embodiment the method comprising coordinating in a storage management system between a restoration of a virtual machine and a virtual machine file relocation operation wherein the coordinating comprises copying by a media agent component of the storage management system a first set of data blocks from a backup copy of data associated with the virtual machine to a read cache associated with the media agent wherein the backup copy is stored on a secondary storage device and comprises at least one of a configuration file and a virtual disk and wherein the first set of data blocks is based on a profile of the virtual machine relative to launching execution of the virtual machine on a host computing device copying by the media agent a second set of data blocks from the backup copy to the read cache wherein the virtual machine file relocation operation comprises a logical transfer according to a relocation sequence of the backup copy of data associated with the virtual machine to a destination on a primary storage device and wherein the second set of data blocks is based on the relocation sequence serving by the media agent a read request for a data block wherein serving the read request comprises i if the requested data block is not found in the read cache copying by the media agent the requested data block from the backup copy to the read cache and ii transmitting by the media agent the requested data block from the read cache and wherein while the virtual machine executes on the host computing device prior to the virtual machine file relocation operation the media agent copies the second set of data blocks from the backup copy to the read cache at a lower priority than serving the read request.

The above recited illustrative method wherein the coordinating further comprises while the virtual machine and the virtual machine file relocation operation execute substantially concurrently on the host computing device copying by the media agent at substantially the same priority as serving the read request a third set of data blocks from the backup copy to the read cache wherein the third set of data blocks is based on the relocation sequence of the virtual machine file relocation operation. The above recited illustrative method further comprising after the virtual machine file relocation operation has completed and substantially concurrently with execution of the virtual machine on the host computing device de associating by the media agent the secondary storage device from the virtual machine. The above recited illustrative method wherein the media agent determines the first set of data blocks to be copied from the backup copy to the read cache based on the profile of the virtual machine received from a data agent component of the storage management system. The above recited illustrative method wherein the media agent determines the second set of data blocks to be copied from the backup copy to the read cache.

Other methods systems and computer readable media will also fall within the scope of the present invention comprising and or based on one or more of the above recited illustrative methods systems and or computer readable media and or in any combination thereof.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling or connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any one of the items in the list all of the items in the list and any combination of the items in the list. Likewise the term and or in reference to a list of two or more items covers all of the following interpretations of the word any one of the items in the list all of the items in the list and any combination of the items in the list.

Depending on the embodiment certain operations acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all are necessary for the practice of the algorithms . Moreover in certain embodiments operations acts functions or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside and execute on servers workstations personal computers computerized tablets PDAs and other computing devices suitable for the purposes described herein. Software and other modules may be accessible via local memory via a network via a browser or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces interactive voice response command line interfaces and other suitable interfaces.

Further the processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. In addition two or more components of a system can be combined into fewer components. Various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems and or computing devices. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Embodiments are also described above with reference to flow chart illustrations and or block diagrams of methods apparatus systems and computer program products. Each block of the flow chart illustrations and or block diagrams and combinations of blocks in the flow chart illustrations and or block diagrams may be implemented by computer program instructions. Such instructions may be provided to a processor of a general purpose computer special purpose computer specially equipped computer e.g. comprising a high performance database server a graphics subsystem etc. or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor s of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flow chart and or block diagram block or blocks.

These computer program instructions may also be stored in a non transitory computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified in the flow chart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computing device or other programmable data processing apparatus to cause a series of operations to be performed on the computing device or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the acts specified in the flow chart and or block diagram block or blocks.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention.

These and other changes can be made to the invention in light of the above Detailed Description. While the above description describes certain examples of the invention and describes the best mode contemplated no matter how detailed the above appears in text the invention can be practiced in many ways. Details of the system may vary considerably in its specific implementation while still being encompassed by the invention disclosed herein. As noted above particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the invention with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the invention to the specific examples disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the invention encompasses not only the disclosed examples but also all equivalent ways of practicing or implementing the invention under the claims.

To reduce the number of claims certain aspects of the invention are presented below in certain claim forms but the applicant contemplates the various aspects of the invention in any number of claim forms. For example while only one aspect of the invention is recited as a means plus function claim under 35 U.S.C sec. 112 f AIA other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 f will begin with the words means for but use of the term for in any other context is not intended to invoke treatment under 35 U.S.C. 112 f . Accordingly the applicant reserves the right to pursue additional claims after filing this application in either this application or in a continuing application.

