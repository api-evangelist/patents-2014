---

title: System and method for providing a protocol for message data
abstract: Described herein are systems and methods for enabling access to messages on a message service system via user interfaces of receiving client devices. The message service system comprises a message storage system and a message access system. The message storage system receives messages from sending client devices and stores message data. The message access system comprises a message server and UI server. A receiving client device is connected with the UI server through a first HTTP connection for receiving UI data for building webpages of the user interface and is connected with the message server through a second non-HTTP connection for receiving message data for populating the webpages. The UI data does not comprise any message data. A client protocol engine on the receiving client device and a server protocol engine on the message server define and provide the non-HTTP protocol for receiving and transmitting message data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09055014&OS=09055014&RS=09055014
owner: Advanced Messaging Technologies, Inc.
number: 09055014
owner_city: Los Angeles
owner_country: US
publication_date: 20140127
---
This patent application is a continuation of U.S. application Ser. No. 13 623 770 filed Sep. 20 2012 entitled SYSTEM AND METHOD FOR PROVIDING A PROTOCOL FOR MESSAGE DATA which issued on Jan. 28 2014 as U.S. Pat. No. 8 639 754 which is expressly incorporated herein by reference and which claims the benefit of priority under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 541 998 filed Sep. 30 2011 which is also expressly incorporated herein by reference.

Figures included in this patent document contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to all software data and user interfaces described below and in the drawings that form a part of this document Copyright 2011 RingCentral Inc. All Rights Reserved.

The present invention relates to message systems and more specifically to systems methods and techniques for providing a protocol for message data.

Message systems of the type with which the invention may find particular utility may be maintained by a business or other organization for use by its own personnel or by a communications services provider that provides its services on behalf of its customers and their personnel. The message system may receive store and provide access to messages through a network such as the Internet. Messages may be sent from a sending client device e.g. fax machine cell phone etc. through the Internet and or a Public Switched Telephone Network PSTN and eventually routed to the message system. The messages may then be converted to a digital message file in a particular format if not already in that format and stored by the message system. For example a facsimile message may be converted to portable document format pdf and stored as a .pdf file on the message system and a voice message may be converted to MP3 format and stored as an .mp3 file on the message system.

To provide access to the messages the message system may provide a website that provides remotely located and often geographically dispersed recipients access to a list of their messages and may include a server to furnish the message list as well as those messages stored in the message system that are selected by the intended recipients. The messages are typically furnished in a well known format such as in hyper text mark up language HTML .

The intended recipient of the messages may use a receiving client device to access his her messages stored on and assessable from the message system. The receiving client device may have a browser to provide a user interface UI that permits access to the messages through the Internet. Typically a UI formatted in hyper text mark up language HTML may be used to access facsimile or voice messages on the message system. For example the UI may display the list of messages described above and in response to selection by the recipient of a particular facsimile message may display the facsimile message through a separate document viewer program in a popup window or playback a voice message through a separate audio player program in a popup window.

However as different types of messages and formats increase the complexity of providing access to the messages also increases. In particular conventional UIs are limited in their capability of presenting messages and formats of widely varying types. Further conventional UIs are not able to meet user demand for a more seamless and easier way to access messages from the message system.

Described herein are systems and methods for enabling access by intended recipients to messages on a message service system via user interfaces of client devices. The message service system comprises a message storage system and a message access system e.g. both located at a datacenter. The message storage system receives messages from sending client devices and stores messages in varying types and formats. The message access system provides access to the messages stored on the message storage system by intended recipients of the messages.

The message access system comprises different types of servers with different functions namely a program server message server and UI server. The program server stores a message data communicator file in a suitable format and transfers or serves the message data communicator file to one or more client devices. Preferably the message data communicator file comprises only Adobe Flash programming instructions as specified by Adobe Systems Incorporated which lack any markup language. As such the message data communicator file comprises an interpretable file or files having only interpretable and executable program instructions compatible with a Flash Player. Preferably the message data communicator file is in the Small Web Format SWF format as an .swf file.

A client device may download the message data communicator file over a network such as the Internet. Once downloaded and installed the client device may comprise a message data communicator engine having computer hardware configured by the message data communicator file. The message data communicator engine comprises a client protocol engine that interacts with a server protocol engine on the message server. Preferably the server protocol engine is also configured by only Flash programming instructions. As such the message data communicator engine client protocol engine and server protocol engine may be compatible with a Flash Player. The client and server protocol engines define and provide a non HTTP protocol for receiving and transmitting message data. More specifically in response to requests from the message data communicator engine the message server retrieves message information and message files and uses the server protocol engine to transmit the message information and files to the client protocol engine of the client device using the non HTTP protocol.

To access the messages the client device also includes a web browser comprising an HTML UI capable of rendering and displaying HTML documents to interact with the message access system through a network such as the Internet. The HTML UI may comprise a JavaScript plug in program that submits requests for and receives message data from the message server using the non HTTP protocol and submits requests for and receives UI data from the UI server using an HTTP protocol . The UI data comprises data used to build the webpages of the HTML UI. For example the UI data may comprise HTML formatted text graphics tables and or selectable icons for producing various webpages for accessing messages of the message service system. The UI data does not comprise any message data.

As such different connection paths and network protocols are used for UI data and message data. In these embodiments an HTTP protocol may be used on a first connection between the client device and the UI server to provide UI data for producing webpages for an HTML UI and a non HTTP protocol may be used on a second connection between the client device and the message server to provide message data for providing message information and message files to the HTML UI. In some embodiments the UI and message servers are simultaneously connected with the client device and the UI server transmits UI data through the first HTTP connection while the message server transmits message data through the second non HTTP connection. As such the receiving client device may simultaneously in parallel receive and process UI data through the first HTTP connection and receive and process message data through the second non HTTP connection. In this manner webpages of the HTML UI and message data that populates the webpages may be received and displayed on the client device faster than when using only a single server for providing both UI data and message data. In other embodiments the UI and UI server may communicate through multiple simultaneous HTTP connections and the UI and message server may communicate through multiple simultaneous non HTTP connections. This further facilitates the parallel transfer of data and allows the system to use different non HTTP protocols simultaneously where certain non HTTP protocols may be more suited for some functions than others. For example the UI may download message data that does not include audio data associated with a voicemail through a custom protocol. At the same time the UI may download the audio data associated with a voicemail e.g. pulse code modulation audio data formatted as a .WAV data stream for streaming through a player that supports FTP based streaming.

The message storage system may store messages of various message types including facsimile text voice audio video picture messages or any combination thereof depending on the implementation. A message file may have associated metadata describing the message file such as a size of the message identifier for the sending client device a user identifier for the intended recipient the message type the date and time the message was received etc. The associated metadata may be referred to herein as message information. The message information may be stored along with the associated message file in the message storage system and transmitted to various components. The message information may be stored and transmitted in a non markup language format such as a comma delimited format JavaScript Object Notation JSON or any other type of non markup language format. A message list comprising message information of current message may be transmitted to the client device at the start of a message session with the client device.

In some embodiments the non HTTP protocol is configured to allow the message server to push message data to client devices whereby message data is sent to a client device without receiving any request for message data from the client device. The message service system may push send message data comprising immediate notifications of new messages and calls to the client device automatically when any new message or call is received. An immediate notification relates to a new message or new call for the user that is received and processed by the message service system and the new message and the message or call information is stored to the message storage system during a message session time period when the user is currently reviewing and accessing his her current messages using the HTML UI.

The message session time period begins from a first event and ends at a second event. The first event may comprise the approximate point in time when the client device requests a message list of current messages for the user and the message server sends the message list to the client device. The second event may comprise the approximate point in time that the message server receives a session end request from the client device. For example the session end request may comprise a user logout request or a user request to close the HTML UI. As such immediate notifications relate to only those new messages or calls received by the message service system during the message session with the client device and are not represented or included in the message list of current messages that is sent to the client device at the beginning of the message session.

The disclosure of U.S. Provisional Application No. 61 541 998 filed Sep. 30 2011 entitled SYSTEM AND METHOD FOR PROVIDING A PROTOCOL FOR MESSAGE DATA is expressly incorporated herein by reference.

In the following description numerous details are set forth for purpose of explanation. However one of ordinary skill in the art will realize that the embodiments described herein may be practiced without the use of these specific details. In other instances well known structures and devices are shown in block diagram form in order to not obscure the description with unnecessary detail.

The description that follows is divided into five sections. Section I contains terms used herein. Section II describes a message environment in which some embodiments operate. Section III describes a message service system and a Flash UI engine for accessing messages. Section IV describes screen shots and functions of the Flash UI engine. Section V describes a system and method for providing a protocol for message data.

Flash UI The Flash UI comprises a Flash UI engine having computer hardware configured by an interpretable Flash media UI file comprising programming instructions without markup language to perform embodiments herein. The Flash UI engine comprises a message UI engine a settings UI engine and one or more embedded application engines each such engine comprising computer hardware configured by the Flash media UI file to perform embodiments herein. The Flash UI engine is compatible with a Flash Player. As used herein the terms message UI and message UI engine may be used interchangeably and the terms settings UI and settings UI engine may be used interchangeably.

Flash media UI file The Flash media UI file comprises an interpretable file a file able to be interpreted having only program instructions that are interpretable and executable by a computer processor. An interpretable file may comprise a file that is indirectly executed i.e. interpreted by an interpreter program. The Flash UI engine may include a computer processor that executes the Flash media UI file to perform embodiments herein. The Flash media UI file may comprise programming instructions for a message UI a settings UI and one or more embedded applications for performing various functions described herein. Preferably the Flash media UI file is in the Small Web Format SWF format as a .swf file. The Flash media UI file does not comprise any markup language whereby the Flash media UI file comprises a file format other than markup language format. Preferably the Flash media UI file comprises only Flash programming instructions.

Message message file As used herein a message is received from a sending client device and converted and stored as a digital message file. Message files may comprise a plurality of different message types e.g. fax text audio video picture etc. or any combination thereof depending on the implementation converted to a plurality of different format types e.g. MP3 TIFF pdf etc. . Message files are presented e.g. displayed or played back to the user using an appropriate embedded application within the message UI. The embodiments below are described in relation to a file. In other embodiments any other type of storage object other than a file may be used. As used herein a storage object comprises any logically definable storage element stored or contained within a storage system such as a file logical unit volume aggregate storage device etc. . In these embodiments a storage object comprises any type of container for storing and or transferring data.

Message information A message file may have associated metadata describing the message file such as a size of the message e.g. time length of the message number of pages of the message identifier for the sending client device e.g. sender name and or phone number a user identifier for the intended recipient e.g. username and or phone number the message type the date and time the message was received etc. The associated metadata may be referred to herein as message information. The message information may be formatted in a non markup language such as comma delimited format.

Message list A message list for a user may present message information about all or a subset of the messages associated with a user.

Message data The message files and associated message information may be referred to collectively as message data. 

Sending client device As used herein a sending client device is used by a sender of a message for producing and transmitting messages. Examples of a sending client device include a fax machine a cellular phone smartphone Voice Over IP VoIP phone a computer configured to run communications software applications a telephone etc.

Receiving client device As used herein a receiving client device is used by an intended recipient of messages referred to herein as a user to access messages on the message service system. The intended recipient is a current user subscriber of the message service system. Examples of a receiving client device include a computer desktop laptop cellular phone smartphone etc.

Message service system As used herein a message service system comprises a message storage system and a message access system. The message storage system may receive messages from sending client devices and store messages of varying types and formats. The message access system may provide access to the stored messages to receiving client devices. The message access system may comprise a program server for storing and transferring a message UI a message server for providing access to messages and message information and an account database for storing message information regarding the messages .

The hosted communications provider is connected to the Internet . Transmissions to and from the hosted communications provider between the Internet and the PSTN pass through the PSTN VoIP gateway . The PSTN is also in communication with the cellular network .

The hosted communications provider provides messaging services to its users via its connection to the Internet . A user of the hosted communications provider can initiate or receive communications from any of the communication devices A F shown in . The VoIP phone A and the computer B can communicate using internet protocols they communicate with the hosted communications provider through the Internet . The fax machine C and the telephone D are connected to the PSTN their communications with the hosted communications provider pass through the PSTN VoIP gateway . The PSTN VoIP gateway converts packets it receives from the Internet into a format compatible for transmission across the PSTN such as time division multiplexing TDM . The PSTN VoIP gateway also converts signals received from the PSTN into IP packets for transmission over the Internet .

The cellular phone E is connected to the cellular network it communicates with the hosted communications provider via the cellular network to the PSTN to the PSTN VoIP gateway . The multi mode phone F can communicate with the hosted communications provider via either the cellular network or through its own connection to the Internet . The number and types of communication devices shown in are not exhaustive and other configurations are possible. For example a traditional analog telephone can be connected to the Internet e.g. in place of the PSTN by using an Analog Telephone Adapter ATA .

The hosted communications provider provides VoIP and other media services through its Internet connection. There are various protocols used to send real time multimedia including voice and video communications over the Internet . Session Initiation Protocol SIP is one protocol used to establish transfer and end sessions between communication devices and the hosted communications provider across the Internet . The SIP signaling protocol is described further in Request For Comments RFC 3261 entitled SIP Session Initiation Protocol by J. Rosenberg et al. June 2002 published by the Internet Engineering Task Force IETF . Real time Transport Protocol RTP is another protocol used to transport multimedia data packets across the Internet. The RTP protocol is described further in RFC 3550 entitled RTP A Transport Protocol for Real Time Applications by H. Schu18rinne et al. July 2003 published by the IETF. SIP and RTP are used herein as examples of protocols for illustrative purposes only but there are many other protocols that can be used in IP telephony including but not limited to the protocols defined by the International Telecommunication Union Telecommunication Standardization Sector ITU T H.323 standard and proprietary protocols such as those used by Skype VoIP Services of Silver Lake Partners.

A caller can use any of the communication devices shown in to leave a voice fax or text message with a user of the hosted communications provider . For example a caller can use the VoIP phone A to leave a voicemail message for the user. The caller may or may not be another user of the hosted communications provider . The caller initiates the call from the VoIP phone A dialing a number associated with the user. The call is received by the hosted communications provider which recognizes that the number belongs to one of its users. The caller leaves a voice message which is received and stored by the hosted communications provider for later access by the user. Similarly a caller can use the fax C to send a fax message to the user or cellular phone E to send a text message to the user. The voice fax or text message can all be received and stored by the hosted communications provider .

The message can reach the user in various ways. For example the hosted communications provider can email the message to the user as soon as it is received by attaching the message to the email e.g. as an audio file in the case of voicemail or as an image file in the case of a facsimile. The user can also use a local client computer to login to the user s account at the hosted communications provider to check for the availability of any messages and to download messages as desired to the user s local client computer. This latter method is discussed in further detail below.

The sending client devices may be coupled to the message service system through a connection system . Likewise the receiving client devices may be coupled to the message service system through a connection system . Each sending client device may send messages to intended recipients through the connection system . The messages may be routed through the connection system to the message service system .

The sending client device may comprise any variety of devices capable of sending a message. For example a sending client device may comprise any communication device shown in such as VoIP phone A a computer B configured to run communications software applications e.g. VoIP voice audio video facsimile or data applications a fax machine C a telephone D a cellular phone E and a multimode phone F. It should be noted that although computer B are shown in as a notebook computer it is not limited to being a notebook computer any computing device such as a desktop computer server computing tablet computing personal accessory etc. can be considered to be a computer B for the purposes of the description herein.

As shown in a sending client device may comprise various input devices for producing various types of messages. An input device may be of any type that allows the sender to provide input into the sending client device for producing a message. For example the input devices may include a fax scanner device for producing fax messages a keyboard and or mouse for producing text messages a voice audio capture device for producing voice audio messages a video capture device for producing video messages and a picture capture device camera for producing picture messages. An input device may also comprise a device for inputting user selections and text such as a mouse trackball keyboard etc.

Each sending client device may further comprise various computer hardware components configured for implementing embodiments described herein. For example a sending client device may comprise a computing device or a mobile computing device shown in . The sending client device may include the various computer hardware components e.g. processor memory storage device of the computing devices or that are configured for implementing embodiments described herein. These computer hardware components are described in relation to and are not discussed in detail here.

Each sending client device may send messages that sent through the connection system to the message service system . The connection system may comprise various computer networks telephone networks cellular networks and communication devices for connecting a sending client device to the message service system . For example the connection system may comprise the packet switched network such as the Internet the public switched telephone network PSTN the PSTN VoIP gateway and the cellular network shown in . These connection system components are described in relation to and are not discussed in detail here. For the purposes of illustrating the connection system between the sending client device and the message service system the sending client device may comprise any communication device shown in and the message service system may comprise the hosted communications provider shown in .

The messages from the sending client devices are received by the message service system and stored to the message storage system . Each received message may be stored as a digital message file in a particular format type. The message files may comprise a plurality of different message types converted to a plurality of different format types. In the example shown in the message storage system may store fax message files text message files voice audio message files video message files picture message files or any combination thereof.

Examples of different format types for fax message files include Portable Document Format PDF Flexible Image Transport System FITS Tagged Image File Format TIFF etc. Examples of different format types for text message files include Plain Text PDF .doc etc. Examples of different format types for voice audio message files include WAV MP3 MP4 AIFF IFF file format Extensible Music Format XMF etc. Examples of different format types for video message files include 3GP AVI Flash Video FLV F4V QuickTime File Format MP4 RealMedia RM etc. Examples of different format types for picture message files include Joint Photographic Experts Group JPEG TIFF Portable Network Graphics PNG etc.

With each message file the message service system may also produce and store message information describing the message file such as a size of the message e.g. time length of the message number of pages of the message identifier for the sending client device e.g. phone number and or sender name the message type fax text audio etc. the date and time the message was received etc. The message information may be stored along with the associated message file in the message storage system and transmitted to various components along with the associated message file or may be separately transmitted to various components. The message information may be formatted in a non markup language such as comma delimited format.

As shown in the exemplary message environment also includes a plurality of receiving client devices coupled to the message service system through the connection system . A receiving client device is used by an intended recipient user of a message. A receiving client device may comprise any variety of devices capable of accessing messages. For example a receiving client device may comprise a computer or mobile device e.g. cellular phone E multimode phone F smartphone etc. .

The message access system of the message service system interacts with the receiving client devices to provide access to messages and associated message information stored on the message storage system . A receiving client device provides a Flash UI that interacts with the message access system to access messages and associated message information as described below in Section III.

A receiving client device may be connected to the program server load balancer device message server and message synchronization server through the connection system . The various components of the message access system and the message storage system may be interconnected through a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet.

In some embodiments the message access system comprises two different servers a program server and a message server having different functions. In other embodiments the functions of the program server and message server are combined into a single server. Each server may comprise a computer system having hardware and software in a network that is shared by multiple users. The program server may store a Flash media UI file shown as Flash media UI file that is transmitted to a receiving client device . Each receiving client device may download receive and install the Flash media UI file from the program server . Once installed the Flash media UI file may provide a Flash UI engine on the receiving client device .

Preferably the Flash media UI file comprises only Flash programming instructions. The Flash media UI file may comprise Flash programming instructions for configuring a message UI and a settings UI and also comprises a one or more embedded applications for performing various functions when executed as described herein. Preferably the Flash media UI file is in the Small Web Format SWF format as a .swf file. The Flash UI engine executes the Flash media UI file to perform embodiments herein.

The Flash UI engine comprises a message UI engine and a settings UI engine. The message UI engine may be used by a user to access his her messages through the message service system . The settings UI engine may be used by an administrator to access messages of other users of the message service system and to perform various administrative functions such as changing configuration settings etc.

As shown in the Flash UI engine may comprise a plurality of different embedded application engines within the Flash UI for presenting e.g. displaying or playing back a plurality of different message file types in a plurality of different format types. Each embedded application may be configured for decoding and presenting one or more particular message file types in one or more different formats. In the example of the embedded applications include and thus the Flash UI Engine includes a fax viewer for viewing fax messages a text viewer for viewing text messages an audio player for playing back voice audio messages a video player for playing back video messages and a picture viewer for viewing picture messages. The embedded applications may also include converters such as converters for converting an audio file encoded in an .MP3 format to a WAV format or for embedding an audio file into a SWF file. This allows data to transmitted to the Flash UI engine in one format that is for example more suitable for bandwidth sensitive communication e.g. MP3 which comprises compressed audio data and converted in a different format that is more suitable for playback or display e.g. WAV which comprises uncompressed audio data .

In some embodiments each embedded application may be configured for decoding and presenting one or more particular message file types in a plurality of different formats. For example the audio player may be configured for playing back voice audio messages in a plurality of different formats e.g. MP3 AIFF WAV etc. . In other embodiments the Flash UI may include different embedded applications for different format types of the same message type. For example the Flash UI may include a first embedded application for audio messages in a first format and a second embedded application for audio messages in a second format. As such the Flash UI leverages the multimedia capabilities of Flash programs.

As shown in the receiving client device also comprises a local storage device such as a disk device solid state device etc. . In some embodiments message files and associated message information may be downloaded and stored to the local storage . In the example shown in the local storage device may store fax message files text message files voice audio message files video message files and picture message files and the message information associated with each message file. As known in the art Flash programs also provide strong support and capabilities for local storing and caching of data. In some embodiments the Flash UI leverages this local caching support by downloading and storing all current messages for an intended recipient user to the local storage device on the receiving client device . A local storing method is discussed below in relation to .

As shown in the receiving client device also comprises input device for providing user input and output devices for presenting the messages. The input devices may be of any type that allows an end user to provide input into a computer system. The input devices such as a keyboard mouse trackball touch sensitive screen etc. allow a user to provide user input and selections and interact with the Flash UI . The output devices may be of any type generally used by a computer system to provide information to an end user. The output devices may include for example a display e.g. television monitor etc. and audio devices e.g. headphone jack speakers etc. .

Each receiving client device may further comprise various computer hardware components configured for implementing embodiments described herein. For example a receiving client device may comprise a computing device or a mobile computing device shown in . The receiving client device may include the various computer hardware components e.g. processor memory storage device of the computing devices or that are configured for implementing embodiments described herein. These computer hardware components are described in relation to and are not discussed in detail here.

After the Flash media UI file is installed the receiving client device connects with a message server of the message access system . This may be performed for example by the receiving client device sending a connection request to the message access system by using the web browser to submit a web address associated with the message access system . The connection request may be received by a load balancer of the message access system . The load balancer may be configured to receive and distribute connection requests from receiving client devices to the message servers for processing. For example the load balancer may be configured to receive and route connection requests in rotating sequence to the message servers to evenly distribute connection requests among the plurality of message servers . Using the load balancer and the plurality of message servers in this manner also provides message server redundancy to avoid a single point of failure in the message access system . After a message server receives the connection request the receiving client device may be directly connected with the message server through the connection system .

The message server then processes the connection request by sending a login page to the receiving client device for requesting login information. Login information may comprise for example a user identifier e.g. username and or phone number and password. The receiving client device sends the login information and the message server may verify the login information. The login information for a plurality of users may be stored to the account database . After the message server verifies the login information on the account database the message server may send the receiving client device a homepage UI which is displayed on a display e.g. monitor or screen of the receiving client device .

The homepage UI may be formatted using a markup language e.g. HTML XML or a non markup language. The homepage UI does not display any message information. The homepage UI may display a plurality of selectable icons each icon for selecting and executing a particular UI having particular functions. The homepage UI comprises a message icon for selecting and executing the message UI and or a settings icon for selecting and executing the settings UI.

The homepage UI may receive a user selection through an input device such as a mouse trackball keyboard etc. of the message icon on the homepage UI. If so the receiving client device executes the message UI Flash UI . In some embodiments the receiving client device displays the message UI as a separate pop up window that overlays the homepage UI. In other embodiments the receiving client device displays the message UI as a separate pop up window from the window that displays the homepage UI. If a pop up window is used closing the message UI closes the pop up window so the homepage UI is visible again. In other embodiments the receiving client device replaces the homepage UI with the message UI. The may return to the homepage UI by for example clicking on navigation links at the top of the window.

Upon the message icon being selected the message UI automatically requests and displays a message list comprising a list of all or selected subset of current messages of the user. The message list may comprise message information for all current messages of the user as identified by the user identifier in the login information . Current messages may comprise new messages not yet displayed to the user as well as messages previously displayed but not yet deleted by the user. The message UI may send a request for the message list to the message server . In turn the message server may retrieve the message list for the user from the account database . The message server may comprise application programming interfaces APIs configured for interacting with the account database for retrieving message information from the account database .

The account database stores message information for all current messages for a plurality of users. shows a conceptual diagram of an exemplary account database . As shown in the example of the account database may comprise a plurality of entries each entry having a plurality of data fields . The account database may comprise an entry for each current user subscriber of the message service system . The data fields may include a user identifier e.g. username and or phone number password message information and message filepath . The field for message information may comprise message information for each current message corresponding to the user identifier. The field for message filepath may comprise a filepath for each current message the filepath being used to retrieve the current message that is stored on the message storage system .

As described above the message storage system stores message files and message information associated with each message file. The account database may periodically synchronize with the message storage system to update the data in the account database . In this manner the account database may contain up to date message information and filepaths for current messages for each user. Note that message information for each stored message comprises various information including a user identifier for the intended recipient e.g. username and or phone number . The user identifier in the message information may be used to determine which entry in the account database to store the message information by matching the user identifier in the message information with the user identifier in the entry .

After the message server retrieves the message list comprising message information for all or a subset of current message for the user from the account database the message server sends the message list to the receiving client device via the connection system . The message UI on the receiving client device then displays the message list on an inbox page. The message UI may display the message information for all current messages by displaying for each current message for example an identifier for the sending client device e.g. the phone number of a caller who left a voicemail the message type the date and time the message was received etc. The message UI may also display a selectable presentation icon corresponding to each current message that may be selected for presenting e.g. viewing or playing back the current message.

The message UI may then receive from the user a selection of a presentation icon for a particular message. This requires the message UI to receive the message file itself e.g. an MP3 file for a voicemail or data derived from the message file through a conversion process that is suitable for transmission to and presentation in the message UI e.g. an MP3 file that was generated from a WAV file containing the voicemail through a WAV to MP3 converter or a SWF file in which the audio data is embedded . In response the message UI sends the message server a request for the message file corresponding to the selected message. The message server may retrieve the filepath for the selected message from the account database and use the filepath to retrieve the selected message file from the message storage system . The message server may comprise application programming interfaces APIs configured for interacting with the message storage system for retrieving message files from the message storage system .

As known in the art a filepath may represent a route to a file on a storage device that may be mapped to a physical address location on the storage device where the file is stored. In some embodiments the message server maps the filepath to the physical address location of the message file. In other embodiments the message storage system maps the filepath to the physical address location of the message file. Filepath mapping and alternative embodiments for the message storage system are discussed below in relation to .

In some embodiments the message server may convert the requested message file into a different format suitable for transmission to and presentation in the message UI. In some embodiments the message server may convert a requested message file that is encoded in WAV format to MP3 format to reduce the amount of network resources required to transmit the file. In other embodiments the message server may convert a requested message file that is encoded in MP3 format to WAV format to reduce the computing resources required for playback in the receiving client device . In other embodiments the message server may convert a requested message file that is encoded in MP3 format into a SWF file that contains the audio data in MP3 format for easier playback on the client device . For the sake of simplicity the following discussion will refer only to the transmission of the message file itself. Those skilled in the art will recognize however that some embodiments may instead transmit data generated as part of a conversion process.

After retrieving the requested message file the message server sends the requested message file to the receiving client device which then presents the requested message file. To present the message file the message UI may select and execute an embedded application appropriate for the message and format type of the message file. For example if the message file is an audio message file in a first format the message UI may select and execute an embedded application that is configured for playing audio files in the first format. In some embodiments after receiving the requested message file the receiving client device stores the requested message file to its local storage and then presents the message file from the local storage . In other embodiments after receiving the requested message file the receiving client device may convert the message file into a different format suitable for presentation by a particular embedded application. For example the message UI may convert a received message file encoded in MP3 into WAV format and pass this converted data to an embedded application appropriate for playing WAV files. Such a design would require only a small number of embedded applications capable of presenting messages in a user friendly manner e.g. allowing forward reverse rewind and volume control and providing an intuitive embedded application UI any file formats could be presented through this small set of embedded applications so long as an appropriate converter is available.

To present the selected message file the message UI may provide and display an embedded application UI for the embedded application. In some embodiments the message UI may provide a different embedded application UI for each embedded application. Each embedded application UI may comprise different features and selectable icons depending on the embedded application. For example the message UI may provide an audio UI for an audio player the audio UI having a selectable playback button playback control buttons e.g. fast forward and rewind and a volume control. In some embodiments an embedded application UI may be integrated in the same window as the message UI where the message information for one or more messages is also displayed . Integrated embedded application UIs may be provided for commonly used embedded applications. A non integrated embedded application UIs may be provided for not commonly used embedded applications.

In addition to presenting messages the message UI may also provide other selectable icons for other message functions such as message forwarding message deleting marking the message as read or unread blocking the sender calling the sender sending a fax to the sender etc. Upon receiving a user selection of a message function the message UI executes the message function in response. These additional message functions may also be provided by embedded applications configured for performing the message functions. For example an embedded application may comprise a softphone application for calling back a sender. These additional message functions are discussed below in Section IV.

The user may interact with the message UI by selecting the various message functions and then select to close the message UI. Upon receiving a selection to close the message UI the separate pop up window of the message UI closes and the underlying homepage UI is displayed. The homepage UI may receive a user selection of the settings icon on the homepage UI. If so the receiving client device executes the settings UI. In some embodiments the receiving client device displays the settings UI as a separate pop up window that overlays the homepage UI.

The settings UI may be used by an administrator to access messages of other users through the message access system and to perform various administrative functions such as changing configuration settings etc. The settings UI may provide message lists and message files of other users utilizing the devices and methods described herein. The settings UI is described further below in Section IV. An administrator user may interact with the settings UI to perform various administrative functions and then select to close the settings UI. Upon receiving a selection to close the settings UI the separate pop up window of the settings UI closes and the underlying homepage UI is displayed.

In some embodiments the message access system further comprises a message synchronization server for synchronizing messages and message information between the receiving client device and the message service system . Message synchronization may be needed for example when a user of a receiving client device receives deletes or reads messages and the message service system needs to be updated to reflect these message changes. The receiving client device may interact with the message synchronization server which may interact with a message server to synchronize messages and message information for the user of the receiving client device . In some embodiments a message synchronization method described in U.S. Pat. No. 7 702 669 issued on Apr. 20 2010 entitled Synchronization in Unified Messaging Systems is used. In other embodiments other message synchronization methods known in the art may be used.

The Flash media UI file comprises an interpretable file a file able to be interpreted having only interpretable program instructions instructions able to be interpreted preferably Flash program instructions. The Flash UI engine may include a computer processor that executes the Flash media UI file to perform embodiments herein wherein the Flash UI engine is compatible with a Flash Player from Adobe Systems Incorporated . The Flash media UI file may comprise programming instructions for a message UI a settings UI and a plurality of embedded applications for performing various functions described herein. Preferably the Flash media UI file is in the Small Web Format SWF format as a .swf file. The receiving client device provides a web browser having the Adobe Flash Player and the Flash media UI file as a Flash plug in program. The Flash media UI file does not comprise any markup language that is the Flash media UI file comprises a file format other than markup language format. Preferably the Flash media UI file comprises only Flash programming instructions.

The message information may also be formatted in a non markup language when stored in the message storage system the account database and the receiving client device . The message information may also be transmitted in a non markup language between the various components in accordance with embodiments herein. For example the message information may be transmitted in a non markup language between the message storage system account database message server and the receiving client device . In some embodiments the message information is stored and transmitted in comma delimited format or in another type of non markup language format.

As known in the art a markup language is a text encoding system that uses a set of markup tags to annotate text within a text document. Examples of markup languages include hyper text mark up language HTML and extensible markup language XML . As known in the art comma delimited format is an example of a non markup language format and may also be referred to as comma separated values CSV . Comma delimited format may comprise a data format whereby each piece of information is separated by a comma. For example message information for a message file may be formatted as a size of the message sender phone number sender name message type date and time message received. As known in the art comma delimited format is widely used and supported as most database systems and other data intensive applications such as spreadsheet applications are able to import and export comma delimited information.

Preferably message data is transmitted between the various components using a non HyperText Transfer Protocol non HTTP . For example the message data may be transmitted in a non HTTP protocol between the message storage system account database message server and the receiving client device . In these embodiments the message data may be transmitted using a custom protocol i.e. a protocol proprietary to this system or standard protocol e.g. File Transfer Protocol FTP or WebSocket that is a non HTTP protocol. In further embodiments the Flash media UI file stored on the program server is transmitted to the receiving client device using a non HTTP protocol such as a custom protocol or standard protocol e.g. FTP or WebSocket that is a non HTTP protocol.

As known in the art FTP comprises a network protocol for transferring files from one computer device to another computer device over a TCP IP based network such as the Internet. FTP may be used to transfer any variety of file types. As known in the art WebSocket comprises a network protocol for providing bi directional full duplex communications channels over a single Transmission Control Protocol TCP socket. WebSocket may be implemented in any client or server application including web browsers and web servers.

The method begins by the message service system receiving at messages from sending client devices through the connection system and storing the messages and message information for each message to the message storage system . The stored messages may comprise message files of a plurality of different message types in a plurality of different format types. The message information for a message may also be stored with the message.

The receiving client device downloads at the Flash media UI file from the program server and installs the Flash media UI file to provide a Flash UI engine on the receiving client device . The Flash UI engine may comprise a message UI engine and a settings UI engine and comprise a plurality of embedded application engines for presenting a plurality of different message and format types.

The receiving client device then sends at a connection request to the message access system . The load balancer of the message access system receives at the connection request and sends the request to one of the message servers . The message server receives and processes at the connection request by performing a login procedure with the receiving client device by receiving login information from the receiving client device. The message server may verify the login information using the account database that stores login information for current users subscribers of the message service system .

After the login procedure the message server may send at the receiving client device a homepage UI which is displayed on the receiving client device . The homepage UI may display a message icon for selecting and executing the message UI and a settings icon for selecting and executing the settings UI.

On the receiving client device the homepage UI may receive at a user selection of the message icon. In response the receiving client device may execute and display at the message UI and receive and process a series of user inputs through the message UI for accessing messages of the user. A method for providing a message UI for accessing messages is described below in relation to . An alternative method for providing a message UI for accessing messages by using local caching is described below in relation to . The receiving client device may receive at a user selection to close the message UI and then closes the message UI and displays the underlying homepage UI.

On the receiving client device the homepage UI may receive at a user selection of the settings icon. In response the receiving client device may execute and display at the settings UI and receive and process a series of user inputs through the settings UI for allowing an administrator user to access messages of other users and perform various administrative functions. The settings UI is described further below in Section IV. The receiving client device may receive at a user selection to close the settings UI and then closes the settings UI and displays the underlying homepage UI.

The method begins by the receiving client device executing and displaying at the message UI. Upon opening the message UI automatically sends at to the message server a request for a message list. The message list may comprise message information for all current messages of the user as identified by the user identifier in the login information .

The message server receives at the message list request and retrieves the message list for the user as identified by the user identifier from the account database . The message server then sends at the message list to the message UI on the receiving client device . The message UI then displays at the message list on an inbox page. The message UI may display the message information for all current messages as well as a selectable presentation icon for each current message for presenting viewing or playing back the current message.

The message UI then receives at a user selection of a presentation icon for a particular message. In response the message UI sends at the message server a request for the message file of the selected message. The message server may receive at the message request and retrieves the filepath for the selected message from the account database . The message server then retrieves at the selected message from the message storage system using the filepath and sends e.g. streams the selected message to the receiving client device . Optionally the message server may convert the selected message to a different format prior to sending the selected message to the receiving client device .

The receiving client device receives at the selected message and presents at the selected message by selecting and executing an embedded application appropriate for the message and format type of the message file. Optionally the receiving client device may also convert the selected message to a different format suitable for presentation. To present the selected message file the message UI may provide and display an embedded application UI for the embedded application. In some embodiments an embedded application UI may be integrated in the same window as the message UI or be displayed in a separate window e.g. pop up window as the message UI.

In some embodiments e.g. for media messages the message server may stream at the selected message to the receiving client device . As known in the art Flash programs provide strong support and capabilities for media streaming. Streaming media may comprise a media message e.g. audio or video message that is constantly received and presented by the receiving client device in steps and while constantly being delivered by the message server in step until the message stream completes. As used herein streaming a message indicates receiving of message data that is presented upon being received by the receiving client device while the transmission of the message data by the message server is still continuing. In these embodiments the message may not be stored to the local storage of the receiving client device .

The user may continually select messages for presentation and steps to of the method may be repeated for every message the user selects for presentation. The message UI may also receive at and process user selections of other message functions such as message forwarding message delete blocking sender calling sender etc.

The method begins by the receiving client device executing and displaying at the message UI. Upon opening the message UI automatically sends at to the message server a request for a message list and message files for all current messages of the user. In some embodiments the message UI automatically sends the request for all current messages of the user without human initiation interaction or intervention. In these embodiments the message UI sends the request for all current messages of the user without receiving a selection of a current message from the user.

The message server receives at the request for the message list and all current message files. In response to the request for the message list the message server retrieves at the message list for the user from the account database . The message server then sends at the message list to the message UI on the receiving client device . The message UI then displays at the message list on an inbox page. The message UI may display the message information for all current messages as well as a selectable presentation icon for each current message for presenting the current message.

In response to the request for all current messages the message server retrieves at the filepaths for all current message from the account database . The message server then retrieves at all current messages from the message storage system using the respective filepaths and sends all current message to the receiving client device . Note that steps and may be performed concurrently with steps and and a different order of steps may be used. The receiving client device receives at all the current message files and stores all the current message files to its local storage .

The message UI then receives at a user selection of a presentation icon for a particular message. The message UI presents at the selected message file by selecting and executing an embedded application appropriate for the message and format type of the message file. The selected embedded application may present the selected message file that is already stored to the local storage .

The user may continually select messages for presentation and steps to of the method may be repeated for every message the user selects for presentation. The message UI may also receive at and process user selections of other message functions.

As shown in the local storage may store all the current message files for the user the current message files comprising a plurality of messages of one or more different message types in one or more different format types. The local storage may store at least one current message file without receiving a user selection for presenting the current message. A message file may be stored to the local storage prior to receiving a user selection for presenting the message file. In some embodiments upon receiving a user selection for presenting a message file the message UI does not send to the message server a request for the message file and does not receive the message file from the message server . In these embodiments the response of the message UI to the user selection is performed without sending to the message server a request for the message file and without receiving the message file from the message server .

Since all current messages are already stored in the local storage any current message selected for presentation may be retrieved directly from the local storage without requiring separate retrieval from the message service system . As such the message UI may receive and store all current message files at one time while the receiving client device is connected to the message server and then present selected messages from local storage with the receiving client device no longer connected to the message server . This may be advantageous if the receiving client device will not have continual access to the Internet to access the message server for example if the user is boarding a plane or is in a location without Internet access. As such the message UI may operate independent of whether the client device is able to access the Internet.

As discussed above the message storage system received messages and message information for each message. is a conceptual diagram showing an exemplary message storage system in which some embodiments operate. In some embodiments the message storage system comprises at least one load balancer device at least one retrieval server and at least one file storage server that are interconnected by a computer network .

The file storage server may store message files of a plurality of different messages and message information for each message file. The file storage server may comprise a storage system adapted to store and retrieve information data on a plurality of storage devices such as disk devices solid state devices etc. . The file storage server may comprise a storage operating system that implements a file system to organize logically the information as a hierarchical structure of directories and files on the storage devices.

The load balancer may receive requests for the retrieval of message files from the message servers . The load balancer may be configured to receive and distribute message requests to the retrieval servers for processing. For example the load balancer may be configured to receive and route message requests in rotating sequence to the retrieval servers to evenly distribute message requests among the plurality of retrieval servers . Using the load balancer and the plurality of retrieval servers in this manner also provides retrieval server redundancy to avoid a single point of failure in the message storage system .

The message request from a message server comprises the filepath of the requested message file. The retrieval server receives the message request and retrieves the requested message file from the file storage server using the filepath. The retrieval server may do so by mapping the filepath to a physical address location on a storage device of the file storage server where the message file is stored. After retrieving the requested message file the retrieval server may send the message file to the message server .

In other embodiments however the message storage system comprises only the file storage server . In these embodiments the message server retrieves requested message files directly from the file storage server . In these embodiments the message server may map the filepath to the physical address location on a storage device of the file storage server where the message file is stored.

In the embodiments described herein a receiving client device may comprise any variety of devices capable of accessing messages. For example a receiving client device may comprise a computing device e.g. notebook computer desktop computer server computing tablet computing personal accessory etc. or a mobile computing device e.g. cellular phone E multimode phone F smartphone etc. shown in . The receiving client device may include the various computer hardware components illustrated in e.g. processor memory storage device of the computing devices or that are configured for implementing embodiments described herein. A receiving client device comprising a computing device or a mobile computing device may execute the web browser application and the Flash UI for accessing messages on the message service system through the connection system as described herein.

In addition a mobile computing device may access messages on the message service system using an appropriate native application e.g. an iOS application running on an iPad or iPhone from Apple Inc. an Android application running on an Android based smartphone an application running on a Blackberry etc. . In some situations a native application may be needed if the receiving client device does not support Flash programming instructions such as devices using Apple s iOS operating system e.g. the iPhone iPad and iPod Touch . As known in the art such native applications as well as softphone applications do not typically use any markup language to define their user interfaces and may be interpreted into binaries in a native format for the applicable device whereby the binaries define the user interface.

Also for a receiving client device comprising a mobile computing device the message service system will push send notifications of new messages to the receiving client device automatically when any new message is received. As such notifications of new messages are typically sent immediately to the receiving client device as soon as a new message is received without requiring the user to login or request notifications from the message service system .

The mobile device environment also includes a receiving client device connected with the message synchronization server and the Apple infrastructure through the connection system . In some embodiments the receiving client device comprises a mobile computing device . In other embodiments however the receiving client device may comprise a computer device executing a softphone application. As known in the art a softphone application may be used for making telephone calls over the Internet using a general purpose computer such as a Windows desktop computer rather than using special purpose hardware.

In some embodiments the receiving client device receives messages and message information through the message synchronization server which retrieves messages and message information from the message server . In these embodiments the receiving client device connects and interacts directly with the message synchronization server . The APnP iPhone N Push server may send new message notifications for the receiving client device to the Apple infrastructure which sends the new message notifications to the receiving client device .

In some embodiments the receiving client device receives message information and message notifications from the message synchronization server in a non markup language such as comma delimited format. In some embodiments messages message information and message notifications are transmitted from the message synchronization server to the receiving client device using a non HyperText Transfer Protocol non HTTP such as a custom protocol.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device is a computer readable medium. In various different implementations the storage device may be a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of duties is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can process instructions for execution within the computing device including instructions stored in the memory . The processor may also include separate analog and digital processors. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT LCD display or an OLED display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provide in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication e.g. via a docking procedure or for wireless communication e.g. via Bluetooth or other such technologies .

The memory stores information within the computing device . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provide as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or MRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS receiver module may provide additional wireless data to device which may be used as appropriate by applications running on device .

Device may also communication audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codex may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smartphone personal digital assistant or other similar mobile device.

As described above the message server may send the receiving client device a homepage UI which is displayed on the receiving client device . shows an exemplary screen page of a homepage UI in accordance with some embodiments. The homepage UI may be formatted using a markup language e.g. HTML XML or a non markup language. The homepage UI does not display any message information. The homepage UI may display a plurality of selectable icons each icon for selecting and executing a particular UI having particular functions. In some embodiments the homepage UI comprises a message icon for selecting and executing the message UI and a settings icon for selecting and executing the settings UI.

If the homepage UI receives a user selection of the message icon on the homepage UI the receiving client device executes the message UI. show exemplary screen pages of a message UI in accordance with some embodiments. As shown in in some embodiments the receiving client device may display the message UI as a separate pop up window that overlays the homepage UI .

As shown in the message UI may display message information for all current messages in list form on an inbox page. For each current message the message information may include for example a size of the message e.g. time length of the message number of pages of the message identifier for the sending client device e.g. sender name and or phone number the message type etc. The message UI may also display a selectable presentation icon corresponding to each current message that may be selected for presenting e.g. viewing or playing back the current message.

The message UI may provide one or more embedded application UIs for one or more embedded applications. In some embodiments the message UI may provide a different embedded application UI for each embedded application. Each embedded application UI may comprise different features and selectable icons depending on the embedded application. In the example of the message UI provides an audio UI for an audio player the audio UI having for example a selectable playback and pause button forward and rewind controls mute and volume controls. In other embodiments however the message UI may provide fax text UI for a fax text viewer a video UI for a video player or a picture UI for a picture viewer.

In some embodiments an embedded application UI may be integrated in the same window as the message UI as shown in the example of . In these embodiments an embedded application UI is displayed in a same window that also displays the message information of one or more current messages. Within the window of the message UI the integrated embedded application UI may have a first appearance e.g. darker color when it is inactive not presenting a message file and have a second appearance e.g. lighter color when it is active and presenting a message file wherein the first and second appearances are different. Integrated embedded application UIs may be provided for commonly used embedded applications. For example since voice messages are commonly received an audio UI for an audio player may be always displayed in the same window as the message UI. In other embodiments the integrated embedded application UI is another type of UI other than an audio UI. By configuring an embedded application UI in this manner the message UI may present messages in a seamless and integrated manner.

In other embodiments an embedded application UI may be displayed in a separate window e.g. pop up window as the message UI when selected. A non integrated embedded application UIs may be provided for non commonly used embedded applications. For example since video messages are less commonly received a video UI for a video player may be displayed in a pop up window when a video message is selected for presentation. In other embodiments however the video UI for the video player may be integrated similar to the audio UI as described above and displayed in the same window as the message UI.

In addition to presenting messages the message UI may also provide other selectable icons for additional message functions. As shown in the example of the additional message functions may include message forwarding message delete marking a message as read or unread blocking sender downloading and saving message to local storage calling sender sending a fax adding a new contact etc. Upon receiving a user selection of a message function the message UI executes the message function in response. These additional message functions may also be provided by embedded applications configured for performing the additional message functions.

The homepage UI may receive a user selection of the settings icon. If so the receiving client device executes the settings UI. show exemplary screen pages of a settings UI in accordance with some embodiments. In some embodiments the receiving client device may display the settings UI as a separate pop up window that overlays the homepage UI .

The settings UI may be used by an administrator to access messages of other users through the message access system and to perform various administrative functions. The settings UI may provide message lists and message files of other users utilizing the devices and methods described herein. The administrator may select for presentation viewing or playback any message of any user if the administrator enters the password for the user.

In an alternative embodiment different connection paths and network protocols are used for UI data and message data. In these embodiments an HTTP protocol may be used on a first connection between a receiving client device and a UI server to provide UI data for producing webpages for an HTML UI and a non HTTP protocol may be used on a second connection between the receiving client device and a message server to provide message data for providing message information and message files to the HTML UI. is a block diagram of an exemplary message environment in which the alternative embodiment may operate. Components of the exemplary message environment are described above in relation to and are not discussed in detail here.

A receiving client device may be connected to the program server UI load balancer UI server message load balancer and message server through the connection system . The various components of the message access system and the message storage system may be interconnected through a computer network .

In some embodiments the message access system comprises three different servers a program server a UI server and a message server having different functions. Each server may comprise a computer system having hardware and software in a network that is shared by multiple users. The program server may store a message data communicator file shown as message data communicator file that is transmitted to a receiving client device using a non HTTP protocol. Each receiving client device may download receive and install the message data communicator file from the program server . Once installed the message data communicator file may provide a message data communicator engine on the receiving client device .

Preferably the message data communicator file comprises only Flash programming instructions. The message data communicator file may comprise Flash programming instructions for providing a non HTTP protocol for receiving and transmitting message data message information and message files and for performing various functions when executed as described herein. Preferably the message data communicator file is in the Small Web Format SWF format as a .swf file. The message data communicator engine executes the message data communicator file to perform embodiments herein.

As shown in the receiving client device comprises a web browser comprising an HTML UI and the message data communicator engine . The HTML UI may be used by a user to access his her messages through the message service system . For illustrative purposes only the UI is described below as an HTML UI. However other markup languages may be used other than HTML such as XML Standard Generalized Markup Language SGML etc. The message data communicator engine may be used to request and receive message data from the message service system .

Through a first HTTP connection between the receiving client device and a UI server the HTML UI receives UI data from the UI server . The UI data may comprise data for producing webpages of the HTML UI. For example the UI data may comprise HTML formatted text graphics and or selectable icons for producing various webpages for accessing messages of the message service system. The UI data is received and processed by the HTML UI and the resulting webpages are presented on the receiving client device . As such the UI data is formatted is transmitted using HTTP protocol and may be formatted in a markup language such as HTML .

Through a second non HTTP connection between the receiving client device and a message server the message data communicator engine receives message data from the message server . The message data may comprise message information or message files intended for the user of the receiving client device . The message data is received by the message data communicator engine which sends the message data to the HTML UI which presents the message data on the receiving client device . As such the message data is transmitted using a non HTTP protocol.

As shown in the HTML UI comprises a document object model DOM module and a JavaScript plug in module . The HTML UI and its components may be downloaded from the UI server and installed onto the receiving client device . Upon being installed on the receiving client device the JavaScript plug in executes to produce webpages of the HTML UI through the DOM . As known in the art the DOM is a cross platform and language independent convention for representing and interacting with objects in HTML XHTML and XML documents. The JavaScript plug in may use the DOM to produce and modify webpages dynamically.

The JavaScript plug in receives UI data e.g. HTML formatted text graphics and or selectable icons from the UI server and produces the webpages of the HTML UI through the DOM . The UI server may transmit the UI data through the HTTP connection . In some embodiments the UI data only contains data for producing the webpages of the HTML UI and does not include any message data message information or message files .

In the preferred embodiment the JavaScript plug in executes JavaScript code that requests message data from the message data communicator engine . In this way the logic for producing the web page is encapsulated in the UI data obtained from the UI server . The message data communicator engine receives and performs requests from the JavaScript plug in and serves as a component responsible for obtaining message data through for example the most efficient means. The logic embedded in the UI data e.g. the JavaScript and HTML can query the message data communicator engine for message data as needed without concerning itself as to how the data is transmitted to the receiving client device . In this way the UI data concerns itself solely with among other things how message data is presented to the user.

When message data is to be presented on the webpages of the HTML UI the JavaScript plug in may request and receive the message data through the message data communicator engine . Upon receiving the message data the JavaScript plug in builds and presents the message data on the webpages using the DOM . Note that the message data communicator engine does not interact with the DOM but only sends the message data to the JavaScript plug in which then interacts with the DOM to generate the webpages that presents this information to the user. In these embodiments the JavaScript plug in receives message data only through the message data communicator engine and does not receive message data directly from a server. The message server may transmit the message data through the non HTTP connection . In some embodiments the message data is only transmitted to the receiving client device using the non HTTP connection .

As shown in on the receiving client device the message data communicator engine comprises a client protocol engine and the message server comprises a server protocol engine . As discussed above the message data communicator file may be installed on the receiving client device to produce the message data communicator engine . Preferably the message data communicator file comprises only Flash programming instructions. As such the message data communicator engine including the client protocol engine also comprises only Flash programming instructions. In some embodiments the server protocol engine also comprises only Flash programming instructions. As known in the art Flash programming instructions is compatible with many different types of web browsers such as Microsoft Internet Explorer Mozilla Firefox Google Chrome etc. . In other embodiments however the message data communicator engine including the client protocol engine and the server protocol engine comprises other types of programming instructions for example Active X or C programming instructions. In these embodiments the message data communicator engine may comprise a plug in program to the web browser .

In some embodiments while the receiving client device is accessing message from the message service system the receiving client device may be simultaneously connected to the message service system through two different connections of different connection types for transmitting different data types. A first HTTP connection transmits UI data between the UI server of the message service system the UI data not comprising any message data . A second non HTTP connection transmits message data between the message server of the message service system the message data not comprising any UI data . In these embodiments the receiving client device may simultaneously in parallel receive UI data to produce webpages through the first HTTP connection and message data to populate the webpages through the second non HTTP connection. In another the receiving client device may simultaneously in parallel receive UI data over the non HTTP connection . As used herein simultaneous indicates a same or overlapping timeframes.

The non HTTP connection between the receiving client device and the message server may be implemented using a non HTTP protocol defined and provided by the client protocol engine on the receiving client device side and the server protocol engine on the message server side . The client and server protocol engines provide a communication layer that uses non HTTP protocol. Preferably message data is transmitted and received between the various components using only a non HyperText Transfer Protocol non HTTP . For example the message data may be transmitted and received in only a non HTTP protocol between the message storage system account database message server message load balancer and the receiving client device . In further embodiments the message data communicator file stored on the program server is transmitted to the receiving client device using a non HTTP protocol.

In these embodiments the message data may be transmitted using a custom protocol i.e. a protocol proprietary to this system or standard protocol e.g. File Transfer Protocol FTP or jWebSocket that is a non HTTP protocol. In some embodiments the non HTTP protocol comprises a protocol layer on top of a TCP protocol connection that provides the non HTTP connection .

As known in the art jWebSocket comprises a non HTTP network protocol comprising Flash programming instructions and is compatible with JavaScript language. As known in the art jWebSocket provides persistent connections between a server and client device. A jWebSocket connection does not disconnect with the client device after each request from the client device is completed by the server. The jWebSocket connection typically disconnects only after the session between the server and client device is completed e.g. after receiving a user logout from the client device . As known in the art the HTTP protocol disconnects with the client device after each request from the client device is completed and a new connection needs to be established for the next request. As such overall the jWebSocket connection will provide faster response times during the course of a message session between the receiving client device and the message service system.

Further jWebSocket allows servers to push data to client devices whereby data is sent to a client device without requiring the client device to request the data. As known in the art the HTTP protocol only allows for the pulling of data whereby a server sends data to a client device only upon receiving a request for the data from the client device. In some embodiments the message service system will push send message data comprising notifications of new messages and calls to the receiving client device automatically when any new message or call is received. As such message data comprising immediate notifications of new messages and calls are sent immediately to the receiving client device as soon as a new message or call is received for the user of the receiving client device without requiring the receiving client device to request such message data from the message service system .

In some embodiments an immediate notification relates to a new message or new call for the user that is received and processed by the message service system during a message session time period when the user is currently reviewing and accessing his her current messages using the HTML UI . The message session time period begins from a first event and ends at a second event. In these embodiments the first event comprises the approximate point in time when the receiving client device requests a message list of current messages for the user and the message service system sends the message list to the receiving client device . The second event may comprise the approximate point in time that the message server receives a session end request from the client device. For example the session end request may comprise a user logout request or a user request to close the HTML UI used for accessing messages on the message service system .

As described above immediate notifications relate to only those new messages or calls received by the message service system during the message session. As such immediate notifications give real time notifications of new messages or calls that have just been received during the message session and are not included in the message list of current messages that was previously sent to the receiving client device at the beginning of the message session. In some embodiments the HTML UI provides a softphone application for calling back a selected sender number. As such the user can receive notifications in real time and respond in real time by calling the sender back upon receiving an immediate notification.

Message data comprising message information may be formatted in a non markup language when stored e.g. in the message storage system the account database and the receiving client device and transmitted between the components of the message service system e.g. between the message storage system account database message server and the receiving client device .

In some embodiments the message information is stored and transmitted in comma delimited format JavaScript Object Notation JSON or in another type of non markup language format. As known in the art the JSON format is a subset of JavaScript language but is language independent and compatible with most all programming languages. The JSON format provides a text based data interchange format for use between various programming languages and may comprise key value pairs and arrays which are common structures in many programming languages.

The method begins by the message service system receiving at messages from sending client devices through the connection system and storing the messages and message information for each message to the message storage system . The stored messages may comprise message files of a plurality of different message types in a plurality of different format types. The message information for a message may also be stored with the message.

The receiving client device downloads at the message data communicator file from the program server and installs the message data communicator file to provide a message data communicator engine on the receiving client device . The message data communicator engine may comprise a client protocol engine configured to communicate with a server protocol engine on a message server using a non HTTP protocol the client and server protocol engines defining and providing the non HTTP protocol.

The receiving client device then sends at a connection request to the message access system e.g. by using the web browser to submit a web address associated with the message access system . A UI load balancer of the message access system receives at the connection request and sends the request to one of the UI servers . The UI load balancer may be configured to receive and distribute connection requests from receiving client devices to the UI servers for processing e.g. route connection requests in rotating sequence to the UI servers to evenly distribute connection requests .

In the preferred embodiment the receiving client device always communicates with the UI server through the UI load balancer . In other embodiments after a UI server receives the connection request the receiving client device may be directly connected with the UI server through the connection system . In some embodiments the UI server is connected with the receiving client device through an HTTP connection during a message session for transmitting UI data to the receiving client device .

The UI server receives and processes at the connection request by performing a login procedure with the receiving client device by receiving login information e.g. user identifier such as username and or phone number and password from the receiving client device. The UI server may verify the login information using the account database that stores login information for current users subscribers of the message service system .

Through the HTTP connection the UI server sends at to the receiving client device e.g. through the UI load balancer initial UI data comprising the HTML UI DOM and JavaScript plug in . The receiving client device receives at the initial UI data and installs the HTML UI DOM and JavaScript plug in onto its web browser .

Through the HTTP connection the UI server also sends at to the receiving client device e.g. through the UI load balancer UI data comprising a homepage for the HTML UI that is received and displayed by the receiving client device . shows a conceptual diagram of an exemplary homepage of the HTML UI in accordance with some embodiments. As shown in the UI data comprising the homepage is transmitted by the UI server through the HTTP connection and received by the JavaScript plug in which produces and presents the homepage in the HTML UI . The homepage may display a plurality of selectable icons each icon for selecting and requesting a particular webpage and function such as a message icon for selecting a webpage and function for accessing messages and message information for the user. In some embodiments the homepage does not present any message data.

On the receiving client device the displayed homepage may receive at a user selection of the message icon. In response the JavaScript plug in on the receiving client device may send at a first request for a message webpage to the UI server and a second request for a message list for the user to the message server . The first request may be sent through the HTTP connection and the second request may be sent through the non HTTP connection . In some embodiments the two requests are sent simultaneously.

The UI server receives at the first request and sends e.g. through the UI load balancer UI data comprising the message webpage which is received and displayed on the receiving client device . shows a conceptual diagram of an exemplary message webpage of the HTML UI in accordance with some embodiments. As shown in the UI data comprising the message webpage is transmitted by the UI server through the first HTTP connection and received by the JavaScript plug in which produces and presents the message webpage in the browser . The UI data for the message webpage may comprise for example text graphics and selectable icons for selecting particular message functions. For example the selectable icons may include a presentation icon for each current message for presenting the current message and selectable icons for other message functions such as message forwarding message deleting calling the sender back sending a fax to the sender etc. Upon receiving a user selection of a message function the message webpage executes the message function in response.

The second request may be received at by a message load balancer of the message access system which sends the second request to a message server . The message load balancer may be configured to receive and distribute requests from receiving client devices to the plurality of message servers for processing. In the preferred embodiment the receiving client device always communicates with the message server through the message load balancer . In other embodiments after a message server receives and processes an initial request from a receiving client device the receiving client device may be directly connected with the message server through the connection system .

The message server receives at the second request for the message list and retrieves the message list or a subset thereof for the user as identified by the user identifier from the account database . The message server then sends at the message list to the receiving client device e.g. through the message load balancer which displays the message list. As shown in message data comprising the message list is transmitted by the message server using the server protocol engine through the second non HTTP connection and received by the message data communicator using the client protocol engine which passes the message list to the JavaScript plug in . The JavaScript plug in then presents the message list in the HTML UI through the DOM module . As shown in the example of the message list may comprise message information for current messages of the user.

In some embodiments a message session between the receiving client device and the message service system begins at a time approximate to when the message server receives at the request for the message list retrieves the message list and sends at the message list to the receiving client device . The message session may be considered to begin at any point in time during the performance of these steps. The message session may continue until the user logs off or closes the message webpage.

During the message session the message service system receives at a new message or call from a sending client device and stores the new message and associated message information for a new message or call information for a new call to the message storage system which pushes sends the message information or call information to the message server . The message server then pushes sends at an immediate notification of the new message or call to the receiving client device e.g. through the message load balancer without receiving any request from the receiving client device for any new data and the immediate notification is displayed on the receiving client device .

On the receiving client device the message webpage receives at a user selection of a call back icon for calling a selected sender number. In response the HTML UI may execute at a softphone application that calls back the selected sender number. As such the user can receive immediate notifications in real time and respond in real time by calling the sender back upon receiving an immediate notification.

On the receiving client device the message webpage receives at a user selection of a presentation icon for a particular message. In response the JavaScript plug in sends at to the message server a request for the message file of the selected message through the non HTTP connection . The message server receives at the message request e.g. through the message load balancer and retrieves the filepath for the selected message from the account database then retrieves the selected message from the message storage system using the filepath.

The message server then sends at the selected message to the receiving client device e.g. through the message load balancer which presents the selected message. shows a conceptual diagram of a message being selected for presentation on a message webpage of the HTML UI in accordance with some embodiments. As shown in a message from M Roe is selected for presentation. Message data comprising the selected message is transmitted by the message server using the server protocol engine through the second non HTTP connection and received by the message data communicator using the client protocol engine which passes the selected message to the JavaScript plug in . The JavaScript plug in then presents the selected message in the HTML UI .

The user may continually select messages for presentation and select other various message functions such as message forwarding message delete blocking sender calling sender etc. The HTML UI of the receiving client device may then receive at a session end request from the user and in response sends the session end request to the message server . For example the session end request may comprise a user logout request or a user request to close the message webpage. The message server receives at the session end request which indicates that the message session with the receiving client device has ended. In response the message server no longer pushes sends immediate notifications of new message or calls to the receiving client device .

Some embodiments may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings herein as will be apparent to those skilled in the computer art. Some embodiments may be implemented by a general purpose computer programmed to perform method or process steps described herein. Such programming may produce a new machine or special purpose computer for performing particular method or process steps and functions described herein pursuant to instructions from program software. Appropriate software coding may be prepared by programmers based on the teachings herein as will be apparent to those skilled in the software art. Some embodiments may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the art. Those of skill in the art would understand that information may be represented using any of a variety of different technologies and techniques.

Some embodiments include a computer program product comprising a computer readable medium media having instructions stored thereon in and when executed e.g. by a processor perform methods techniques or embodiments described herein the computer readable medium comprising instructions for performing various steps of the methods techniques or embodiments described herein. The computer readable medium may comprise a non transitory computer readable medium. The computer readable medium may comprise a storage medium having instructions stored thereon in which may be used to control or cause a computer to perform any of the processes of an embodiment. The storage medium may include without limitation any type of disk including floppy disks mini disks MDs optical disks DVDs CD ROMs micro drives and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices including flash cards magnetic or optical cards nanosystems including molecular memory ICs RAID devices remote data storage archive warehousing or any other type of media or device suitable for storing instructions and or data thereon in.

Stored on any one of the computer readable medium media some embodiments include software instructions for controlling both the hardware of the general purpose or specialized computer or microprocessor and for enabling the computer or microprocessor to interact with a human user and or other mechanism using the results of an embodiment. Such software may include without limitation device drivers operating systems and user applications. Ultimately such computer readable media further includes software instructions for performing embodiments described herein. Included in the programming software of the general purpose specialized computer or microprocessor are software modules for implementing some embodiments.

Those of skill would further appreciate that the various illustrative logical blocks circuits modules algorithms techniques processes or method steps of embodiments described herein may be implemented as computer electronic hardware computer software or combinations of both. To illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described herein generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the embodiments described herein.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The modules algorithm techniques processes or methods described in connection with embodiments disclosed herein may be embodied directly in computer hardware configured to perform the embodiments disclosed herein in software executed by a processor or in a combination of the two. In some embodiments any software application program tool module or layer described herein may comprise an engine comprising hardware software or a combination of the two configured to perform embodiments described herein. In general functions of a software application program tool module or layer described herein may be embodied directly in hardware or embodied as software executed by a processor or embodied as a combination of the two.

A software application layer or module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read data from and write data to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user device. In the alternative the processor and the storage medium may reside as discrete components in a user device.

While the embodiments described herein have been described with reference to numerous specific details one of ordinary skill in the art will recognize that the embodiments can be embodied in other specific forms without departing from the spirit of the embodiments. Thus one of ordinary skill in the art would understand that the embodiments described herein are not to be limited by the foregoing illustrative details but rather are to be defined by the appended claims.

