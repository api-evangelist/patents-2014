---

title: Configuring applications at runtime
abstract: The present invention is generally directed to methods, systems, and computer program products for configuring applications at runtime. Embodiments of the invention decouple code and configuration. Application configuration is externalized, allowing configuration to be composed at runtime based on client context. A client context for an application is sent to a configuration manager. One or more pluggable configuration providers at the configuration manager deduce values for use in configuring the application at runtime. Deduced values are composed into a configuration and the configuration returned to the application. Using the values in the composed configuration, the application can be configured to operate in the client context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336021&OS=09336021&RS=09336021
owner: Wal-Mart Stores, Inc.
number: 09336021
owner_city: Bentonville
owner_country: US
publication_date: 20140331
---
This invention relates generally to the field of configuring applications and more particularly to methods systems and computer program products for configuring applications at runtime based on context.

Applications are often developed to operate in specified computing environments. For many applications code and configuration are internally coupled within the application. As such for these applications to operate in new computing environments a developer may have to recode various portions of the application for compatibility with the new computing environment. That is configuration for an application is fixed at development time.

Some compilers permit configuration changes at compile time through compiler commands. However once an application is compiled e.g. into an executable program configured is essentially fixed. Further an end user of an application may not have access to source code and or a complier to facilitate compile time configuration changes.

The inability to use an application across diverse computing environments with requiring recoding and or recompilation can be frustrating to end users. An end user can buy an application for use in a particular computing environment. However over time as technology advances other systems are upgraded new systems come online etc. the end user s computing environment s can change. The end user may desire but be unable to use the application in the changed computing environments. Even if the application is functional the application may not operate in an optimal fashion.

Some mechanisms have been developed to let users experiment by assigning alternate values to parameters depending on domain and layers. These mechanisms use parameter partitioning and associate subsets with layers of experiments. Other mechanisms use A B testing to determine how different versions of an application perform. However these are experimentation mechanisms and are typically used by developers and analysts.

The present invention extends to methods systems and computer program products for configuring applications at runtime.

In the following description of the present invention reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific embodiments in which the invention is may be practiced. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.

Embodiments of the present invention may comprise or utilize a special purpose or general purpose computer including computer hardware such as for example one or more processors and system memory as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions are computer storage media devices . Computer readable media that carry computer executable instructions are transmission media. Thus by way of example and not limitation embodiments of the invention can comprise at least two distinctly different kinds of computer readable media computer storage media devices and transmission media.

Computer storage media devices includes RAM ROM EEPROM CD ROM solid state drives SSDs e.g. based on RAM Flash memory phase change memory PCM other types of memory other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.

A network is defined as one or more data links that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a transmission medium. Transmissions media can include a network and or data links which can be used to carry desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code means in the form of computer executable instructions or data structures can be transferred automatically from transmission media to computer storage media devices or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a NIC and then eventually transferred to computer system RAM and or to less volatile computer storage media devices at a computer system. RAM can also include solid state drives SSDs or PCIx based real time memory tiered Storage such as FusionIO . Thus it should be understood that computer storage media devices can be included in computer system components that also or even primarily utilize transmission media.

Computer executable instructions comprise for example instructions and data which when executed at a processor cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs tablets pagers routers switches kiosks Point Of Sale POS terminals various storage devices and the like. The invention may also be practiced in distributed system environments where local and remote computer systems which are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network both perform tasks. In a distributed system environment program modules may be located in both local and remote memory storage devices.

Embodiments of the invention can also be implemented in cloud computing environments. In this description and the following claims cloud computing is defined as a model for enabling ubiquitous convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be rapidly provisioned via virtualization and released with minimal management effort or service provider interaction and then scaled accordingly. A cloud model can be composed of various characteristics e.g. on demand self service broad network access resource pooling rapid elasticity measured service etc. service models e.g. Software as a Service SaaS Platform as a Service PaaS Infrastructure as a Service IaaS and deployment models e.g. private cloud community cloud public cloud hybrid cloud etc. . Databases and servers described with respect to the present invention can be included in a cloud model.

Further where appropriate functions described herein can be performed in one or more of hardware software firmware digital components or analog components. For example one or more application specific integrated circuits ASICs can be programmed to carry out one or more of the systems and procedures described herein. Certain terms are used throughout the following description and Claims to refer to particular system components. As one skilled in the art will appreciate components may be referred to by different names. This document does not intend to distinguish between components that differ in name but not function.

The present invention is generally directed to configuring applications at runtime. Embodiments of the invention decouple code and configuration. Application configuration is externalized allowing configuration to be composed at runtime based on client context. A client context for an application is sent to a configuration manager. One or more pluggable configuration providers at the configuration manager deduce values for use in configuring the application at runtime. Deduced values are composed into a configuration and the configuration returned to the application. Using the values in the composed configuration the application can be configured to operate in the client context.

Computing device includes one or more processor s one or more memory device s one or more interface s one or more mass storage device s one or more Input Output I O device s and a display device all of which are coupled to a bus . Processor s include one or more processors or controllers that execute instructions stored in memory device s and or mass storage device s . Processor s may also include various types of computer storage media such as cache memory.

Memory device s include various computer storage media such as volatile memory e.g. random access memory RAM and or nonvolatile memory e.g. read only memory ROM . Memory device s may also include rewritable ROM such as Flash memory.

Mass storage device s include various computer storage media such as magnetic tapes magnetic disks optical disks solid state memory e.g. Flash memory and so forth. As depicted in a particular mass storage device is a hard disk drive . Various drives may also be included in mass storage device s to enable reading from and or writing to the various computer readable media. Mass storage device s include removable media and or non removable media.

I O device s include various devices that allow data and or other information to be input to or retrieved from computing device . Example I O device s include cursor control devices keyboards keypads barcode scanners microphones monitors or other display devices speakers printers network interface cards modems cameras lenses CCDs or other image capture devices and the like.

Display device includes any type of device capable of displaying information to one or more users of computing device . Examples of display device include a monitor display terminal video projection device and the like.

Interface s include various interfaces that allow computing device to interact with other systems devices or computing environments as well as humans. Example interface s can include any number of different network interfaces such as interfaces to personal area networks PANs local area networks LANs wide area networks WANs wireless networks e.g. near field communication NFC Bluetooth Wi Fi etc. networks and the Internet. Other interfaces include user interface and peripheral device interface .

Bus allows processor s memory device s interface s mass storage device s and I O device s to communicate with one another as well as other devices or components coupled to bus . Bus represents one or more of several types of bus structures such as a system bus PCI bus IEEE 1394 bus USB bus and so forth.

As depicted application e.g. a cloud based electronic commerce application is executing in or after appropriate configuration is going to execute in operating environment . Operating environment can be defined by various different portions of context information including a default context a hardware context a software context a network connection context a user identity context a personalization context etc. Application can determine a context for operating environment . In some embodiments context providers are used to assist application when determining a context for operating environment . Application send the determined context for operating environment to configuration manager .

Different configurations for application may be more or less optimal relative to one another depending on the context defining operating environment . As depicted application includes code and annotations . Code is executable code that when executed causes application to perform various designed functionality. Annotations represent one or more variables in metadata. The one or more variables can be assigned values to configure application at runtime e.g. for mobile vs Web . The metadata and thus the one or more variables is discoverable to other software modules with appropriate functionality.

Metadata processor is configured to process application annotations such as for example annotations to identify metadata and corresponding configuration variables. Metadata processor can indicate identified metadata and corresponding configuration variables to configuration manager . Metadata processor can also determine a data types for each configuration variable.

Configuration manager includes routing module value selection module and configuration providers . Routing module can receive a context from an application. Routing module can determine from a received context which configuration providers to application for a specific code invocation. Routing module can then route a received context to one or more determined configuration providers . Thus different configuration providers can be selectively invoked to optimize and or add additional control to code execution.

Each of the one or more configuration providers e.g. providers A B and C can refer to application metadata to identify variables that are to be assigned values. Based on the received context each of the one or more configuration providers can deduce values for one or more of the identified variables. Each of the one or more configuration providers can include algorithms that deduce values based on a received context. Configurations can be inherited and specialized based on contextual parameters such as for example data center availability zone geographic location etc. Providers e.g. providers A B and C can represent participation by any number of data sources including user preferences personalization systems experimentation locale time zone business rules etc.

Generally configuration providers are pluggable into and out of configuration manager . Configuration manager can include a service provider interface that configuration providers use to hook into the other modules of configuration manager . As such a developer can develop virtually any kind of configuration provider with virtually any type of rules and or algorithms and can use the service provider interface to connect the configuration provider to configuration manager . If a configuration provider is to be removed for some reason the configuration provider can be taken down without impacting the functionality of other configuration providers or the functionality of configuration manager .

Each of the one or more configuration providers e.g. providers A B and C can send proposed values to value selection module . Value selection module can apply e.g. priority rules to proposed values to select an appropriate value for each identified variable. For example a priority system can be used to resolve conflicts between configuration providers. Values from higher priority configuration providers can be selected over values from lower priority configuration providers. Value selection module can compose a configuration that includes each of the one or more variables along with corresponding selected values e.g. name value pairs . Value selection module can return the composed configuration back to an application.

Metadata processor can access annotations . Metadata processor can identify metadata including variables A B etc. from annotations . Metadata processor can also determine the data type of each of variables A etc. Metadata processor can send metadata to configuration manager . Configuration manager can receive metadata from metadata processor . Configuration manager can store metadata .

In some embodiments metadata processor also creates default configuration . Default configuration or a portion thereof can be returned to application when configuration providers are unable to generate values for one or more variables.

Application can obtain potentially with the help of one or more context providers context in response to a request to execute application . Context can include various different portions of context information that define operating environment . Application can send context to configuration manager .

Method includes receiving context for the application at application runtime the context defining an operating environment where the application is to run . For example routing module can receive context from application . As described context defines operating environment where application is to run .

In some embodiments context can include user identity information identifying an entity e.g. a person . The identity information can be used to access a separate user preference database used to store previous configuration settings for the entity. Further even non user preference settings e.g. A B can be enhanced into a user preference without modification to code by adding data elements to the user preference system. Adding data elements allows application to be enhanced with new user preferences without modification.

Various different types of information such as for example a network address e.g. an IP address can be embedded and or included within context . Embedded and or included data can be used to provide locale time zone geographic language or cultural preferences.

Method includes accessing previously stored metadata for the application the previous stored metadata identifying a plurality of variables that are to be used to configure the application at runtime . For example configuration providers can access metadata . From metadata configuration providers can identify variables A B etc. and their corresponding data types that are to be used to configure application at runtime.

Method includes routing the context to one or more pluggable configuration providers each of the one or more pluggable configuration providers configured to provide a value for one or more of the plurality of variables . For example routing module can route context to one or more of configuration providers including providers A B and C.

Each of providers A B C etc. can deduce a value for one or more of variables A B etc. based on context . For example providers A and B can deduce values and respectively for variable A. Similarly providers B and C can deduce values and respectively for variable B. The deduced values can be formatted to appropriate data types defined in metadata . For example values and can be formatted to match the data type of variable A. Similarly values and can be formatted to match the data type of variable B. Configuration providers can send the deduced values to value selection module .

Method includes for each variable in the plurality of variables receiving one or more potential values for the variable from at least one of the one or more pluggable configuration providers . For example value selection module can receive values and for variable A from providers A and B respectively. Similarly value selection module can receive values and for variable B from providers B and C respectively.

Method includes for each variable in the plurality of variables selecting a value to assign to the variable based on priorities associated with the one or more pluggable configuration providers the value selected from among the one or more potential values received for the variable . For example value selection module can select value for variable A and can selection value for variable B. Value selection module can select value for variable A from among values and based on provider B having a higher priority than provider A. Similarly value selection module can select value for variable B from among values and based on provider C having a higher priority than provider B.

Method includes returning a configuration to the application the configuration based on the selected value for each of the plurality of variables the configuration for configuring the application to execute in the operating environment . For example configuration module can return configuration to application . Configuration includes value for variable A e.g. a name value pair and includes value for variable B e.g. another name value pair . Configuration manager can compose configuration from the values etc. selected by value selection module .

Application can receive configuration from configuration manager . During runtime application can assign value to variable A and can assign value to variable B to configure application to execute in operating environment .

As such embodiments of the invention can facilitate internationalization and localization of applications. Applications can be configured for use with different languages regional differences and technical requirements of a target market. Applications can be configured without engineering changes.

As depicted computer architecture includes cloud configuration manager CCM . CCM further includes routing aggregate override metadata service database rest API metadata registration API service provider interface SPI logging audit and data collection . Configuration providers including experimentation personalization identity default etc. can plugin into CCM through SPI .

Other examples of configuration providers include Emergency Operations Network Operations Center NOC Command Center Override service provider. A Command Center Override service provider can facilitate modification to configuration by an operator for the purpose of managing an operational incident. In cases where the code has a failure mode a Command Center Override service provider can insert configuration values that are considered of the highest precedence by value selection module and support the recovery in operations of the application . Supporting application recovery improves the business continuity protecting revenue providing safety enhancements etc. Thus one of more configuration providers can be used to implement values with those values based on any portion of context which can directly or indirectly be used to infer desirable behavior for application .

Consumer includes CCM client e.g. a Java client . CCM client can register metadata for consumer e.g. variables and data types with metadata service through metadata registration API . Metadata service can store metadata for consumer in database . CCM client can sent a context to CCM through rest API to request a configuration for consumer .

Rest API can receive requests for configurations from CCM client . Routing can route configuration requests to one or more of configuration providers selected from among experimentation personalization identity default etc. The one or more of configuration providers can return values formatted in appropriate data types to aggregate override . Aggregate override can apply various rules and or algorithms potentially based on provider priorities to select appropriate vales for consumer . CCM can compose the application values into a configuration e.g. name value pairs . Rest API can return the composed configuration to CCM client .

CCM client can receive the composed configuration from rest API . CCM client can use the composed configuration to configure consumer to operate in the context.

Logging Audit can track values returned to consumer in composed configurations. Data collection can collect operational data as consumer operates using different configurations. Logging audit can send tracked values to analytics . Similarly data collection can send tracked data to analytics . In some embodiments consumer can also sent operational data directly to analytics .

Analytics can analyze tracked values and operational data to determine if composed configurations are resulting in acceptable operational outcomes for consumer . Analytics can provide automated feedback to experimentation plugin . Analytics can also provide operational outcomes to business optimization service . One or more analysts at business optimization service can review operational outcomes. Business optimization service can provide manual feedback to experimentation plugin .

Experimentation plugin can use both automatic feedback and manual feedback to tune and or experiment with configurations for consumer . A B testing and or multivariate testing can be conducted without having to re code and re deploy consumer .

Default provider can present a user interface permitting an administrator to enter a default configuration for consumer . If there is a service failure among one or more other providers default provider can return the default configuration for consumer .

As such a value set for a variable can vary between a default value a user preference value an experimentally determined value or a personalized value and back without having to rebuild and release code .

Providers can cache values for specified contexts. Thus if a specified context is subsequently received again the provider can access the values from cache.

Configuration providers can be implemented to integrate code with legacy systems and or via remote service call via various different protocols such as for example REST Simple Object Access Protocol SOAP or other remote API Remote Method Invocation RMI COBRA etc. invocation approaches.

SPI can be a published API. As such developers can develop additional configuration providers to plugin to SPI . Additional configuration providers allow configurations to be extended without interaction with the developer of consumer .

As described context providers can be used to assist an application obtain a context for an operating environment. illustrates a sequence diagram of an example for obtaining context for an application. User causes application to send get new context to CCM client . In turn CCM client sends context request to context factory .

In response to context request context factory can request context from one or more client context providers. For example context factory sends requests and to client context providers A and N respectively. Client context providers A and N return context and respectively to context factory . In turn context factory returns context response containing both context and to CCM client . In turn CCM client returns context representing both context and to application . Application or CCM client can then send context to a CCM e.g. CCM to request a configuration for application .

Scatter can send context or an appropriate portion thereof to one or more configuration providers. For example scatter can send context to configuration providers A and N. Configuration providers A and N can return values and values respectively to gather . Aggregate and override can aggregate and or override one or more of values and values .

Aggregate and override can send response containing aggregated and or remaining i.e. non overridden values to CCM service . CCM service can compose configuration from the aggregated and or remaining values. CCM service can send REST response containing configuration to CCM client . CCM client can use configuration to configure application to operate in the environment of context .

In general embodiments of the invention can be used to configure applications at runtime in a context sensitive manner. Different configurations can be applied for different contexts including but not limited to stability contexts tuning contexts and isolation contexts. Stability can be facilitated through rapid rollout of runtime configuration changes parameter profile known to have robust stability properties. Ongoing and potentially automated tuning can be facilitated through parameter changes based on closed loop feedback from a private cloud. Troublesome areas of an application cloud can be isolated through rapid runtime configuration changes.

Although the components and modules illustrated herein are shown and described in a particular arrangement the arrangement of components and modules may be altered to process data in a different manner. In other embodiments one or more additional components or modules may be added to the described systems and one or more components or modules may be removed from the described systems. Alternate embodiments may combine two or more of the described components or modules into a single component or module.

The foregoing description has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. Further it should be noted that any or all of the aforementioned alternate embodiments may be used in any combination desired to form additional hybrid embodiments of the invention.

Further although specific embodiments of the invention have been described and illustrated the invention is not to be limited to the specific forms or arrangements of parts so described and illustrated. The scope of the invention is to be defined by the claims appended hereto any future claims submitted here and in different applications and their equivalents.

