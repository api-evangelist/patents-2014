---

title: Determining real-world effects from games
abstract: A game system in which virtual representations of real-world, physical objects may be designed or modified by game players within a virtual game universe. Real-world physical interactions of the virtual objects may be simulated by a game engine during game play within the game universe. Performance data may be collected for the virtual objects that simulates real-world performance data for corresponding physical objects. The performance data for the virtual objects may, for example, be used in evaluating performance of modifications to a physical object, or for comparing performance of two or more physical objects. Production or manufacturing decisions for respective physical objects may be made at least in part based on the performance data collected for the virtual representations of the objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09597584&OS=09597584&RS=09597584
owner: Amazon Technologies, Inc.
number: 09597584
owner_city: Reno
owner_country: US
publication_date: 20140627
---
Computer based games have evolved from single player game programs installed and executed on personal computers or other consumer devices to include technologies that allow multiplayer gaming in which two or more players may simultaneously participate in a game session. For example game consoles may host console based games that allow one two or more players to simultaneously participate in a game session via controllers connected to the console. As another example network based games which may be referred to as online games may allow one two or more players in some cases even thousands of players to simultaneously participate in a game from consumer devices coupled to a network. Evolution of the Internet Web based computing and mobile computing including the increasingly widespread availability of broadband connections and the availability and capabilities of consumer computing devices including but not limited to mobile computing devices such as pad tablet devices and smartphones has led to continuing evolution and growth of online gaming. Online games may include everything from relatively simple two dimensional 2D casual games to more complex 2D or three dimensional 3D action or strategy games that may involve one or more players in a game session to world building multiplayer games to complex 3D massively multiplayer online games MMOGs such as massively multiplayer online role playing games MMORPGs that may simultaneously support hundreds or thousands of players in a persistent online world .

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various embodiments of methods and apparatus for designing modifying and evaluating real world objects using computer based games including but not limited to online multiplayer games are described. Embodiments of a game system are described that may be used to design or modify designs for physical objects instantiate virtual representations of the objects as virtual objects within a game universe simulate real world interactions of the virtual objects within the game universe according to a realistic physics model and generate and output performance data for the virtual objects that simulates real world performance data for the physical objects. Embodiments of the game system may for example be used in product design and production environments for evaluating performance of new or modified designs for physical object or for comparing performance of two or more physical objects. In such environments production or manufacturing decisions for respective physical object designs may be based at least in part on evaluations of performance data generated for virtual objects during game play within a virtual game universe of the game system.

Embodiments of a game system may include a design component that allows players to create select and or modify virtual representations of real world physical objects referred to herein as virtual objects via object design input . The design component may provide one or more graphical and or textual interfaces via which players or other entities may design and modify virtual objects for use within the game universe. In some embodiments object model s from which virtual objects may be generated may be obtained from one or more sources external to the game system . For example an object provider e.g. a product producer such as a manufacturer a vendor research lab distributor etc. may provide an object model from which a virtual object may be generated by the game system . In some embodiments instead of or in addition to obtaining object models from object provider s a player or team of players may access design component to create and define an object model for a new virtual object within the game system via an interface to the design component.

In at least some embodiments once an object model is obtained or created a virtual object may be instantiated within the game universe according to the object model and a player or team of players may make one or more modifications to the virtual object via an interface to the design component. In some embodiments modifications to a virtual object within the game universe may cause the corresponding object model to be modified or updated within the game system . In some embodiments the modifications to a virtual object made by a player via design component may be provided to one or more external entities e.g. object providers . As an example modifications to a virtual object may be provided to an object provider e.g. a product producer e.g. a manufacturer vendor research lab distributor etc. that provided the respective object model from which the modified virtual object was generated. As another example a design specification or object model for a new physical object created and tested by a player or team as a virtual object within the game universe may be provided to one or more object providers for evaluation along with performance data for the virtual object .

Embodiments of a game system may include or leverage a game engine that may simulate real world physical interactions of the virtual objects within a virtual game environment referred to herein as a game universe at least in part in response to game input from players . To simulate interactions within the game universe the game engine may apply a physics model that incorporates one or more of but is not limited to global generally static physical factors e.g. gravity player game input e.g. input controlling the virtual objects in a game session characteristics of the virtual objects as defined by object models and environmental factors within the game universe including generally static e.g. topography and potentially dynamic e.g. weather earthquakes etc. environmental factors.

Embodiments of a game system may include a data collection component that collects performance data for the virtual objects during game play. The collected performance data may be provided to one or more entities for analysis for example to object providers external to the game system. The performance data may be provided or distributed to an object provider in any of various ways and via a variety of communications channels including but not limited to as a real time stream of data during game play or as periodic or aperiodic uploads or downloads of collections of performance data to the object provider . Note that performance data collected for a virtual object may be distributed to two or more different object providers and performance data collected for two or more different virtual objects may be distributed to respective ones of two or more different object providers . Note that in some embodiments instead of or in addition to providing the performance data to object providers at least part of the performance data may be provided to one or more of the players or to teams of players .

The performance data for the virtual objects may be evaluated for example by an object provider such as a product producer e.g. a manufacturer vendor research lab distributor etc. and may be used for example in making decisions regarding real world production or marketing of various products. In some cases at least one instance of a physical object corresponding to a virtual object may be generated manufactured constructed or assembled by an object provider at least in part based on the evaluation of the performance data for the virtual object .

In at least some embodiments the game system may provide one or more user interfaces e.g. via web pages or client applications and or one or more application programming interfaces APIs via which object providers may access the game system to perform various functions. For example an API may be provided via which an object provider may provide object models and other object information such as performance aspects that are to be monitored for the object models to the game system receive object modifications from the game system and obtain virtual object performance data from the game system .

In some embodiments in addition to collecting and providing performance data that simulates real world performance data for physical objects the game system may also collect and provide information on various preferences of the players that may for example be used alone or in combination with the performance data in making production or marketing decisions. The preference information may for example indicate which particular virtual objects are used most which modifications to virtual objects are popular which combinations of virtual objects are popular and so on.

Generating updating and rendering a complex game universe that provides an accurate simulation of real world physics and that may include tens or thousands of virtual objects and that may support game play by tens or thousands of players can be expensive in terms of resources and computation. Thus at least some embodiments of game system may leverage network based computation resources services and protocols including but not limited to a streaming service and protocol to implement design component game engine data collection component and other components including but not limited to rendering components and input output interfaces to the players and object providers . The computational power available through the network based computation resources as well as the data streaming capabilities provided through a streaming protocol allows the game system to provide low latency responses to the players interactions with the game universe as viewed on respective client devices thus providing a responsive and interactive game experience to the players. illustrates an example game system implemented on a provider network in which network based computation resources are leveraged to provide real time game play with low latency rendering and streaming of game content according to at least some embodiments. illustrate example network based environments in which a streaming service is used to stream data to clients according to at least some embodiments.

A client device may be any of a variety of consumer devices including but not limited to desktop computer systems laptop notebook computer systems pad tablet devices smartphone devices game consoles handheld gaming devices and wearable gaming devices. Wearable gaming devices may include but are not limited to gaming glasses or goggles and gaming watches or the like that are wearable on the wrist arm or elsewhere. Thus client devices may range from powerful desktop computers configured as gaming systems down to thin mobile devices such as smartphones pad tablet devices and wearable devices. Each client device may implement an operating system OS platform that is compatible with the device . A client device may include but is not limited to input and output components and client software game client for the game system via which respective players can participate in game sessions currently being executed by the game system . The game client on a particular client device may be tailored to support the configuration and capabilities of the particular device type and the OS platform of the device . An example computing device that may be used as a client device is illustrated in .

In at least some embodiments the game system may implement an online multiplayer game and the game system may be or may include one or more devices on a network of a game provider that implement the online multiplayer game logic and that serve as or provide an execution environment for the online multiplayer game. In these online multiplayer game environments game clients are typically remotely located from the game system and access the game system via wired and or wireless connections over an intermediate network or networks such as the Internet. Further client devices may typically each have both input and output capabilities for playing the online multiplayer game. illustrates an example network based multiplayer gaming environment that includes a game system hosted on a provider network that may for example serve as an execution environment for a multiplayer online game.

However in some embodiments a game system may at least in part be implemented as or on one or more devices that locally implement game logic and locally provide at least some execution of a multiplayer game for example a gaming console that serves as an execution environment for a console based multiplayer game installed on the console or executed from media inserted into the console . In these game environments game clients are typically local to the system and access the system via local wired or wireless connections. Further in these local multiplayer game environments the device s that hosts the multiplayer game e.g. a gaming console may generally include or couple to a display device such as a television or monitor for displaying game graphics and client devices may typically provide only control input capabilities for playing the multiplayer game hosted by the device e.g. the client devices may be game controllers coupled to a console .

Note however that a multiplayer game system such as a gaming console may connect via wired and or wireless connections to one or more remote network sites services or devices for example to one or more object provider sites for downloading object models and for uploading object modifications and virtual object performance data to a network based storage service for storing and retrieving game data to a server or servers of the game provider for updates game downloads and other information or to one or more other instances of the game system that host the multiplayer game if the game environment allows players to participate in a game session from multiple different multiplayer game system instances via a network.

In some embodiments instead of a game system implemented according to a client server model or variation thereof in which one or more devices such as servers host most or all of the functionality of the game system a game system may be implemented according to a distributed or peer to peer architecture for example as shown in . For example in a peer to peer game system architecture at least some of the game functionality and components of a game system as shown in may be distributed among one two or more client devices that collectively participate in a peer to peer relationship to create and or modify virtual objects within a game universe execute game sessions including the virtual objects within the game universe and collect performance data for the virtual objects within the game universe .

Games that may be implemented by a game system as described herein may vary from tightly scripted games to games that introduce varying amounts of randomness to the game play and may include any game type including but not limited to action games such as racing games or sports games role playing world building games and so on. A game may for example be a game in which one or more players attempt to achieve some goal or overcome some obstacle and may include multiple levels that the players have to overcome. A multiplayer game may for example be a game in which the players cooperate to achieve goals or overcome obstacles or a game in which one or more of the players compete against one or more other players either as teams or as individuals. Alternatively a game may be a game in which one or more players may more passively explore and make discoveries within a complex game universe without any particular goals in mind or a world building multiplayer game in which the players may actively modify their environments within the game universe . The games may include everything from relatively simple two dimensional 2D casual games to more complex 2D or three dimensional 3D action or strategy games to complex 3D massively multiplayer online games MMOGs such as massively multiplayer online role playing games MMORPGs that may simultaneously support hundreds or thousands of players in a persistent online world .

As illustrated in one or more players may interact with game system via respective client devices to design or modify virtual objects to initiate game sessions within a game universe and to control the players respective virtual objects within the game universe. shows as a non limiting example three players A C that interact with game system via game clients A C on respective client devices A C. In at least some embodiments game system may store information for each player . Player information may include but is not limited to account information profile information game play statistics game resource information group or team membership information and so on. A player s game resource information may for example include information on virtual object s associated with this player for example indications of which object models the player has been granted access to as an individual or as a member of a group or team.

For a particular game session game logic execution of the game system may generate a game universe that includes the game session s context characters virtual objects and environment. The players may view a perspective of the game universe and manipulate their virtual objects within this universe via the game clients on respective client devices . Embodiments of a game system may include or leverage a game engine may simulate interactions of the virtual objects within the universe according to a real world physics model during game play within the game universe at least in part in response to game input from the players . To simulate interactions within the game universe the game engine may apply a physics model that incorporates one or more of but is not limited to global generally static physical factors e.g. gravity player game input e.g. input controlling the virtual objects in a game session characteristics of the virtual objects as defined by respective object models and environmental factors within the game universe including generally static e.g. topography and potentially dynamic e.g. weather environmental factors.

The following is a broad description of an example method for game execution within a game universe and is not intended to be limiting. Typically game logic execution of the game system is implemented according to an event driven architecture in which a game event loop monitors for and reacts to players inputs to and interactions within the game universe as controlled by game clients on client devices for example input controlling or manipulating virtual objects within the game universe . Based upon the players inputs and interactions within the universe and on other game factors e.g. scripted events and or a randomness component at iterations of the game event loop the game session progresses along a game session timeline with the game universe being modified and updated by game engine accordingly.

In some embodiments concurrent with the game event loop execution game system renders a 2D or 3D representation of the universe based on the current state of the universe generates video and sound according to a video frame rate based upon the rendering and sends or streams the video and sound output to the client devices for display. Note that video and sound may be generated for and sent or streamed to each client device according to the respective player s current perspective or view of the universe . These game clients may be referred to as thin game clients as the game clients may not implement a 2D or 3D rendering component. illustrates an example network based gaming environment in which rendered game video and sound is streamed to thin game clients on client devices. However in some embodiments at least a portion of the actual rendering may be performed by thick game clients on the client devices that do implement a 2D or 3D rendering component. In these implementations instead of the game system performing the full rendering of the game universe into video and sound and sending the video and sound to thin game clients on client devices for display as shown in the game system may instead send universe data to the client devices from which thick game clients can render and display video and sound. illustrates an example network based gaming environment that uses thick game clients on client devices.

Embodiments of a game system may include a design component that allows players to create select and or modify virtual objects via object design input to game clients . The design component may provide one or more graphical and or textual interfaces via which players or other entities may design and modify virtual objects for use within the game universe . In some embodiments object model s from which virtual objects may be generated may be obtained from one or more sources external to the game system . For example an object provider e.g. a product producer vendor research lab distributor etc. may provide an object model from which a virtual object may be generated by the game system . In some embodiments instead of or in addition to obtaining object models from object provider s a player or team of players may access design component to create a new object model for a new virtual object within the game system using object design input to game client s .

In at least some embodiments once an object model is obtained or created a virtual object may be instantiated within the game universe according to the object model and a player or team of players may make one or more modifications to the virtual object via an interface to the design component. In some embodiments a player s modifications to a virtual object within the game universe may cause a corresponding object model to be modified or updated within the game system . In some embodiments new object models created by a player or team via design component and or modifications to a virtual object made by a player or team via design component may be provided to one or more external entities. As an example modifications to a virtual object may be provided to an object provider e.g. a product producer that provided the respective object model from which the modified virtual object was generated. As another example a design specification or object model for a new physical object created and tested by a player or team of players as a virtual object within the game universe may be provided to one or more object providers for evaluation along with performance data for the virtual object .

Embodiments of a game system may include a data collection component that collects performance data for the virtual objects during game play. The collected performance data may be provided to one or more entities for analysis for example to one or more object providers external to the game system. The performance data may be provided or distributed to an object provider in any of various ways and via a variety of communications channels including but not limited to as a real time stream of data during game play or as periodic or aperiodic uploads or downloads of collections of performance data to the object provider . Performance data collected for a virtual object may be distributed to two or more different object providers and performance data collected for two or more different virtual objects may be distributed to respective ones of two or more different object providers . Note that in some embodiments instead of or in addition to providing the performance data to object providers at least part of the performance data may be provided to one or more of the players or to teams of players .

The performance data for the virtual objects may be evaluated for example by an object provider such as a product producer vendor research lab distributor etc. and may be used for example in making decisions regarding real world production or marketing of various products. In some cases at least one instance of a physical object corresponding to a virtual object may be generated manufactured constructed or assembled by an object provider at least in part based on the evaluation of the performance data for the virtual object .

In some embodiments in addition to providing performance data that simulates real world performance data for physical objects data collection component may also collect and provide information on various preferences of the players within the game that may be used alone or in combination with the performance data in making production or marketing decisions. The preference information may for example indicate which particular virtual objects are used most which modifications to virtual objects are popular which combinations of virtual objects are popular and so on.

In at least some embodiments the game system may provide one or more user interfaces e.g. via web pages or client applications and or one or more application programming interfaces APIs via which object providers may access the game system . For example an API may be provided via which an object provider may provide object models and other object information such as performance aspects that are to be monitored for the object models to the game system receive object modifications from the game system and obtain virtual object performance data from the game system .

As indicated at one or more virtual objects may be generated within a game universe according to the object models. For example a game engine of the game system may obtain physical characteristics of an object from an object model and generate a virtual representation of the object within the game universe according to the physical characteristics.

As indicated at at least one object may be modified within the game universe according to design input from one or more players. In at least some embodiments once an object model is obtained or created and virtual object is generated within the game universe according to the object model a player or team of players may make one or more modifications to the virtual object via an interface to a design component. Modifications to a virtual object within the game universe may update the corresponding object model within the game system and the modifications may also be provided to one or more external entities e.g. object providers . As an example in some embodiments the game system may provide an interface e.g. an API via which the object providers may receive the modifications from the game system.

As indicated at interactions of the virtual objects within the game universe may be simulated according to a physics model. For example a game engine of the game system may simulate real world physical interactions of the virtual objects within the game universe by applying a physics model that incorporates one or more of but is not limited to global generally static physical factors e.g. gravity player game input e.g. input controlling the virtual objects in a game session characteristics of the virtual objects as defined by object models and environmental factors within the game universe including generally static e.g. topography and potentially dynamic e.g. weather environmental factors.

As indicated at performance data for at least one virtual object within the game universe may be collected during game play. For example a data collection component of the game system may monitor one or more performance aspects of virtual objects within the game universe during game play may collect data for the monitored aspects and may store the performance data e.g. as game data as shown in and or stream or otherwise provide the performance data to one or more object providers e.g. product designers producers vendors research labs distributors etc. . As an example in some embodiments the game system may provide an interface e.g. an API via which object providers may obtain the performance data from the game system. Note that in some embodiments instead of or in addition to providing the performance data to object providers at least part of the performance data may be provided to one or more of the players or to teams of players.

In some embodiments an object model may include specifications of various performance aspects or metrics of the respective virtual object that are to be monitored. Alternatively other methods of specifying the performance aspects or metrics may be used. For example in some embodiments the game system may provide a user interface via which players can specify the performance aspects to be monitored for a virtual object. As another example in some embodiments the game system may provide an interface e.g. an API via which external entities e.g. object providers such as product producers designers etc. may specify the performance aspects to be monitored for object models that are used within the game system.

As indicated at expected real world performance of at least one object may be evaluated based at least in part on the performance data for the virtual object s within the game universe. The performance data for the virtual objects as created or modified within the game universe may simulate real world performance data for similar real world physical objects. Thus the performance data for a virtual object may be used in predicting real world performance of a corresponding physical object. The performance data for virtual objects may be evaluated for example by an object provider such as a product producer vendor research lab distributor etc. and may be used for example in making decisions regarding real world production or marketing of various products based on the virtual objects.

As indicated at at least one object may be selected for production based at least in part on the analysis of the performance data. In some cases at least one instance of a physical object corresponding to a virtual object may be generated manufactured constructed or assembled by an object provider at least in part based on the evaluation of the performance data for the virtual object.

Embodiments of the game system as described herein may allow object providers e.g. product designers producers vendors research labs distributors etc. to test and evaluate new designs for or modifications to real world physical objects in virtual environments. Using embodiments object providers may obtain performance data for object designs or modifications from hundreds thousands or even tens of thousands of game players who use virtual representations of the objects in game universes that realistically simulate real world physical interactions of the objects. As just one example a virtual object may be a virtual representation of an automobile or other vehicle for use during game play of a racing game. A vehicle manufacturer may provide an object model for the vehicle that may be used to create the virtual vehicle within the racing game universe. The object model may also specify physical characteristics of the vehicle e.g. weight weight distribution power dimensions wheelbase ground clearance tire type etc. . The players or teams of players may use that virtual vehicle in many races. A game engine for the racing game may realistically simulate the physics and performance of the vehicle during races within the game universe. Performance data for the virtual vehicle during the races may be collected and provided to the vehicle manufacturer. Using the racing game the vehicle manufacturer may receive performance data for the virtual vehicle from thousands or tens of thousands of races and from tens hundreds or thousands of different players or teams.

In addition in at least some embodiment a player or team of players may be allowed to modify a virtual representation of a physical object within the game universe. Using the racing game as an example a player or team may be allowed to tune an engine by replacing or reprogramming electronics e.g. an engine management system EMS adjust the suspension change tires change fuel type reconfigure body panels to modify aerodynamics add or remove accessories and so on. The modified vehicle may be used by the player or team in races and may be further modified between races. Multiple players or teams may make various modifications to their own game versions of the virtual vehicle and compete against each other in the races. Two or more different base vehicles may be modified and used in the races by different players or teams. A game engine for the racing game may realistically simulate the physics and performance of the vehicles as modified during the races within the game universe. Performance data for the modified virtual vehicles during the races may be collected and provided to the vehicle manufacturer s .

In some embodiments two or more virtual objects may be used in combination and performance data for the combined virtual objects may be analyzed in combination or separately. Using the racing game as an example a vehicle and the tires on the vehicle may be two different virtual objects based on different object models and the object models for the tires may be provided by a different object provider than the base object model for the vehicle. A virtual object in a combination may be replaced with a different virtual object. For example the tires from one tire producer on a vehicle may be replaced with different tires from the same tire producer or tires from a different tire producer. A game engine for the may realistically simulate the physics and performance of the different combinations of virtual objects e.g. vehicles and tires within the game universe and performance data for the combinations may be collected and provided to object providers for example tire and vehicle producers.

In at least some embodiments an object provider may provide an object model for an object from which a virtual object may be generated within the game universe. The object model may specify various physical characteristics and parameters of the object e.g. weight dimensions materials etc. in enough detail so that the object model may be used by the game engine to realistically simulate the physics and performance of the object within the game universe. A player or team of players may modify the virtual representation of the physical object within the game universe either during or between game sessions. Modifying the virtual representation may result in modifications being made to the object model or to a copy of the object model specific to the player or team . For example adding an accessory to a virtual object may result in incorporating physical characteristics of the accessory into the object model for the virtual object or in modifying characteristics of the virtual object as recorded in the object model. Performance data for the virtual object s may be collected and provided to an object provider. Thus using the game system an object provider may receive performance data for many variations of a virtual object based on an object model provided by the object provider from thousands or tens of thousands of game sessions and from tens hundreds or thousands of different players or teams of players.

In some embodiments instead of or in addition to obtaining object models from object providers for possible modification and performance evaluation in a game system players or teams of players may be allowed to create new object models within the game universe and to create and use virtual objects within the game universe based on the new object models. A new object model and virtual object may be created from scratch or may be constructed or assembled as a combination of existing virtual objects and their corresponding object models. Note that creating a virtual object from scratch may in some cases involve determining complex physical properties of the virtual object. Existing virtual objects that are assembled to create a new virtual object and new object model may be referred to as parts of the new virtual object. The object model for a new virtual object whether created from scratch or by assembling parts may specify various physical characteristics and parameters of the respective object in enough detail so that an object model for the new object may be created and used by the game engine to realistically simulate the physics and performance of the new object within the game universe.

A non limiting example use case for embodiments of a game system in which players may create new virtual objects would be a competition that pits two or more teams in designing virtual representations of physical objects for testing within a game universe. As an example the teams may be tasked with designing a solar powered car. Virtual representations of the designs may be generated as virtual objects virtual solar powered cars in this example and the virtual objects may be subjected to one or more events within the game universe e.g. races across a virtual land course as rendered in the game universe to determine their relative performance under different environmental conditions within the game universe. Results of the competition may be provided to one or more entities for example research firms universities government agencies product producers such as manufacturers and so on for evaluation and production decisions may be made at least in part based on the performance data obtained from the game system.

In some embodiments in addition to providing performance data that simulates real world performance data for physical objects a game system may also collect and provide information on various preferences of the players within the game community that may be used alone or in combination with the performance data in making production or marketing decisions for physical objects. The preference information may for example indicate which particular virtual objects are used most which modifications to virtual objects are popular which combinations of virtual objects are popular and so on. The preference information may include information on characteristics modifications or accessories that affect the performance of objects. For example in the racing game example the preference information may indicate that the players prefer a particular type of tire with a particular type of vehicle. However the preference information may also include information on characteristics or modifications that do not directly affect performance such as color.

While objects such as vehicles and tires are generally used as examples physical objects for which virtual objects may be generated within a game universe as described herein may be any physical object that can be generated as a virtual object from an object model within the game universe and to which a real world physics model can be applied by the game engine. As non limiting examples in addition to land sea and air vehicles cars trucks motorcycles ATVs aircraft boats ships spacecraft etc. and vehicle accessories the objects may include construction equipment construction materials and supplies industrial equipment consumer electronic devices entertainment devices toys sports equipment recreational equipment appliances tools apparel furniture various structures houses buildings towers bridges etc. safety equipment or in general any real world physical object that can be simulated and manipulated as a virtual object within a game universe as described herein. Note that a virtual object does not necessarily represent an object that is actually instantiated as a real world object but may instead represent an object design or modification to an object design that may potentially be instantiated as a real world object.

As previously mentioned physical objects for which virtual objects may be generated within a game universe as described herein may be any physical object that can be generated as a virtual object from an object model within the game universe and to which a real world physics model can be applied by the game engine. Thus the data that is included within an object model for a particular object depends on the particular object which is being modeled. The object model for a car for example will be different than the object model for a bicycle and both of those object models will be different than the object model for a building. However two object models for similar types of items may generally include substantially similar characteristics. For example object models for two different automobile tires may typically list the same general physical characteristics that are common to automobile tires.

Similarly the performance aspects or metrics that are monitored for a given virtual object may depend on the particular object or on the type of object being monitored. For example the performance metrics that are monitored for a car will be different than the performance metrics that are monitored for a building. However the performance metrics that are monitored for similar objects such as two types of cars may generally be similar or may even be the same.

A game system may provide one or more graphical and or textual design interfaces to a design component via which players or other entities may design and modify virtual objects for use within the game universe. For example in a game system as illustrated in game system may provide graphical and or textual design interfaces to design component via game clients . Via the design interfaces players may select access design and or modify one or more aspects or characteristics of virtual objects within the game system using design input . Design input may include one or more of but is not limited to input to a graphical user interface GUI or graphical interface element to graphically manipulate or modify a displayed virtual object or alphanumeric input to a textual interface or textual interface element to modify one or more characteristics of a virtual object.

As previously noted many different types of virtual objects may be designed and modified within a game universe. Physical objects for which virtual objects may be generated within a game universe as described herein may be any physical object that can be generated as a virtual object from an object model within the game universe and to which a real world physics model can be applied by the game engine. Thus in at least some respects the particular design interface for a particular virtual object may depend on the particular object or on the type of object being designed or modified. For example a design interface for a car will be different than the design interface for a building. However the design interface for similar objects such as two types of cars may generally be similar or may even be the same.

In some embodiments designing and modifying virtual objects may be performed via a design interface offline that is outside the game universe and outside game play. For example a game system may provide a design interface for a virtual object such as a car via which players can design and modify virtual cars for later use in actual game play. In some embodiments instead of or in addition to performing design and modification of virtual objects offline designing and modifying virtual objects may be performed within the game universe and in some cases during game play. The in game universe design interfaces may vary from relatively simple textual interfaces such as pop up menus or text boxes via which players can make modifications to virtual objects to complex object specific graphical design interfaces that are rendered in the game universe and that fit into the game play to combinations of one or more different types of interfaces. As a non limiting example of a complex in game design interface in a racing game a garage may be rendered in which players manipulating respective game characters via their game clients and using tools equipment and parts as rendered in the garage can modify a virtual car that is currently in the garage for example by replacing or reprogramming electronics e.g. an engine management system EMS adjusting the suspension changing tires reconfiguring body panels to modify aerodynamics adding or removing accessories changing oil or other fluids or in general performing any of various modifications to a car that are enabled within the game universe. As another example of an in game interface a virtual pit may be rendered on a race track within the game universe during a race a player may pull their virtual race car into the pit and a pit crew may make modifications on the car for example changing tires adjusting suspension adding fuel and so on.

In at least some embodiments instead of or in addition to being used to test new designs for or modifications to physical objects by monitoring and collecting performance data for virtual renderings of the objects during game play within a game universe a game system as described herein may be used to monitor and collect data regarding the effects of real world external or environmental factors on object designs for example structural designs under various conditions. As a non limiting example a game system as described herein for example a world building multiplayer game system may allow players or teams of players to design and construct various structures houses office buildings bridges etc. out of various construction materials and using various construction techniques within a game universe and or may allow object providers to provide object models for rendering such structures within the game universe. The game system may allow the structures to be constructed at virtual world renderings of real world locations within the game universe for example in virtual cities such as Tokyo San Francisco or Miami that may simulate geographical geological and other characteristics of the locations. Various environmental events for example weather events such as typhoons or hurricanes and geological events such as earthquakes may be randomly or intentionally introduced during the game play. The game engine may simulate various conditions of the environmental events e.g. wind speed and direction during a hurricane or ground motion and duration during an earthquake that are applied to the virtual structures within the game universe according to a physics model that incorporates physical characteristics and conditions of the locations the structures and the environmental events. Various aspects of the structures that may indicate effects of the environmental events on the structures may be monitored and collected within the game universe. The collected data may be provided to one or more object providers and or to one or more players as performance data for the respective structures in their particular locations and under the environmental conditions of the respective events.

Embodiments of game systems that implement the methods and apparatus as described herein in reference to for example game system as illustrated in may be implemented in the context of a service provider that provides virtualized resources e.g. virtualized computing resources virtualized storage resources virtualized database DB resources etc. on a provider network to clients of the service provider as illustrated in . Virtualized resource instances may be provisioned via one or more provider network services and may be rented or leased to the clients of the service provider for example to a game provider client. At least some of the resource instances on the provider network e.g. computing resources may be implemented according to hardware virtualization technology that enables multiple operating systems to run concurrently on a host computer i.e. as virtual machines VMs on the host.

The provider network via the services may enable the provisioning of logically isolated sections of the provider network to particular clients as client private networks on the provider network . At least some of a client s resources instances on the provider network may be provisioned in the client s private network. For example in game system may be implemented as or in a private network of game provider that is provisioned on provider network via one or more of the services .

The provider network via the services may provide flexible provisioning of resource instances to clients in which virtualized resource instances can be automatically added to or removed from a client s configuration on the provider network in response to changes in demand or usage thus enabling a client s implementation on the provider network to automatically scale to handle computation and or storage needs. For example one or more additional computing resources may be automatically added to game system in response to an increase in game client participation in the game implemented by game system if and when participation drops below a threshold the computing resources can be removed. As another example one or more additional computing resources may be automatically added to game system in response to an increase in the complexity or number of game universes being generated and rendered by the game system if and when usage drops below a threshold the computing resources can be removed.

In at least some embodiments game provider may access one or more of services of the provider network via application programming interfaces APIs to the services to configure a game system on the provider network the game system including multiple virtualized resource instances e.g. computing resources storage resources DB resources etc. .

Virtualization services may include one or more of but are not limited to one or more hardware virtualization services for provisioning computing resource one or more storage virtualization services for provisioning storage resources and one or more database DB services for provisioning DB resources . In some implementations game provider may access one or more of these virtualization services via respective APIs to provision and manage respective resource instances in game system . However in some implementations game provider may instead access another service e.g. a game system service or streaming service via an API to the service the other service may then interact with one or more of the virtualization services on behalf of the game provider to provision resource instances in the game system .

The service provider may provide game system service s to clients of provider network . Game system service s may include one or more services that game provider may leverage to implement a network based game as a game system on provider network . As noted above game system service s may leverage virtualization services to provision various resources in game system .

In some embodiments game system service s may include a game backend service for creating deploying and managing backend or server side game components on provider network . In at least some embodiments the game backend service may manage for the client the deployment scaling load balancing monitoring version management and fault detection and recovery of the server side game logic. In at least some embodiments the game backend service may provide fully managed backend containers for server side game components.

In some embodiments game system service s may include a game engine service for creating deploying and running network based games including but not limited to game logic execution components and game client components. The game engine service may include but is not limited to 2D and or 3D game engines and an integrated development environment IDE for developing code for the 2D and or 3D game engines. The game engine service may also include or may leverage the game backend service for provisioning and managing the backend server side components. Game provider may leverage one or more of game system services to implement an online game and to provision the game system on provider network for hosting the game. In at least some embodiments the game engine service may also be leveraged by the game provider to develop and build game clients for various operating system OS platforms on various types of client devices e.g. tablets smartphones desktop notebook computers etc. .

The service provider may also provide a streaming service to clients of provider network . Many consumer devices such as personal computers tables and mobile phones have hardware and or software limitations that limit the devices capabilities as game clients to process and render data in real time. In at least some embodiments a streaming service may allow output of a resource intensive game implemented by game system on provider network to be rendered on the provider network and streamed from the provider network to thin game clients implemented on consumer devices such as personal computers tablets and mobile phones. In at least some embodiments each thin game client may implement a streaming service client interface as shown in for receiving and processing data received according to the streaming service on the client device . Using the streaming service the game system can be scaled to handle computational and storage needs regardless of the types of devices that the game clients are implemented on. illustrates an example network based gaming environment in which a streaming service is used to provide rendered game video and sound to thin game clients according to at least some embodiments.

As shown in in some embodiments the service provider may also provide a stream management service to clients of provider network . Game developers may leverage the stream management service in implementing a game system . is a high level illustration of a gaming environment that leverages a stream management service according to at least some embodiments. Referring to the stream management service may provide tools and interfaces including an application programming interface API via which a game developer may implement a game system that leverages one or more features of the stream management service via the API . In at least some embodiments the stream management service is a fully managed service for real time processing of streaming data at large scales. The game developer can leverage the stream management service via API to collect and process high volumes of data per hour from multiple data sources in real time thus allowing the game developer to easily build and implement a game system according to the stream management service API that processes information in real time from multiple data sources when executing a game session according to a game logic execution engine. The data sources may include sources on the provider network and or sources external to the provider network. Provider network sources may for example include DB resources storage resources and or other data sources such as computation resources. The stream management service API may also enable sending data e.g. data streams to one or more destinations such as DB resources and or storage resources on the provider network as well as to game client s on client device s and object providers on the provider network or on external networks.

Referring again to game provider may develop and deploy an online game as game system leveraging one or more of services to configure and provision game system . One or more computing resources may be provisioned and configured to implement game logic execution . In some embodiments as shown in two or more computing resources may be configured to implement game logic execution . However in some embodiments an instance of game logic execution e.g. a 2D or 3D game engine may be implemented as or on each of one or more computing resource instances. For example in some implementations each computing resource instance may be a virtual machine instance that is spun up from a machine image of the game provider s game engine stored on storage resource s .

Storage resources and or DB resources may be configured and provisioned for storing accessing and managing game data. Game system interface s may be configured to provide gaming I O interfaces and protocols to the game clients as well as interfaces and protocols to one or more object providers for uploading object models to the game system and for receiving modifications and performance data for virtual objects from the game system . In at least some embodiments the game system interface s may include or may leverage a streaming service interface as described above. Game clients may be developed and built for various operating system OS platforms on various types of client devices e.g. tablets smartphones desktop notebook computers etc. . Game clients may include thick game clients as illustrated in and or thin game clients as illustrated in .

Once game system is established players can obtain game clients from game provider via one or more channels e.g. downloading a game client from a game provider website or from a third party website such as an online site for acquiring and downloading various applications including but not limited to games for various types of consumer devices including but not limited to mobile devices. Players or teams of players may then design and or modify virtual objects and participate in game sessions with the virtual objects as illustrated in by interacting with game system via game system interface s . Game logic execution builds maintains and updates the game universe for a game session including virtual objects generated according to object models created by players or provided by object providers the players act in the game universe to create or modify virtual objects and to control respective characters or virtual objects during game play using game clients on their client devices and the game system collects performance data for virtual objects within the game universe and provides the performance data to the object providers .

A client device may implement a thick game client . Thick game client may implement a 2D or 3D rendering component. Rather than game logic execution performing full rendering of the 2D or 3D game universe as the universe progresses along the timeline game universe data may be periodically aperiodically or continuously sent to the thick game client via game system interface s . On the client device the rendering component may render display and update a 2D or 3D representation or view of the game universe according to the received game universe data.

Instead of implementing a thick game client as illustrated in client device may implement a thin game client . Thin game client may implement a streaming service client interface . Rather than performing rendering of the 2D or 3D game universe on the client device rendering component of game system may render a 2D or 3D representation or view of the game universe as the universe progresses along the timeline. Streaming service interface may generate video from the rendering of the game universe and stream the video and accompanying sound to the thin game client according to a streaming service protocol. At the client device the streaming service client interface receives the stream from streaming service interface and the thin game client displays the video to the client device .

Embodiments of a game system as described herein may be implemented according to a client server model in which one or more devices e.g. server devices host most or all of the functionality of the game system and one or more client devices hosting game clients the clients access the game system the server for example via an intermediate network such as the Internet to play game sessions. However embodiments of the game system may be implemented according to other models for example according to a peer to peer model.

In some embodiments different game peers may implement different parts of the game functionality and components of the game system as illustrated in . For example in some embodiments one of the game peers may implement a design component while another game peer may implement a data collection component. In some embodiments one or more of the devices that are participating in the peer to peer model may serve as a store and or source for game data . Alternatively in some embodiments at least a portion of game data may be stored to and sourced from one or more remote game data stores for example using a storage virtualization service of a service provider network as illustrated in .

In at least some embodiments a computing device that implements a portion or all of the for designing modifying and evaluating real world objects using computer based games as described herein may include a general purpose computer system that includes or is configured to access one or more computer accessible media such as computer system illustrated in . In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface .

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above for designing modifying and evaluating real world objects using computer based games are shown stored within system memory as code and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network or networks such as other computer systems or devices as illustrated in for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet network for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for for implementing embodiments of methods and apparatus for designing modifying and evaluating real world objects using computer based games. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computer system via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of computer system as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc as well as transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent exemplary embodiments of methods. The methods may be implemented in software hardware or a combination thereof. The order of method may be changed and various elements may be added reordered combined omitted modified etc.

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

