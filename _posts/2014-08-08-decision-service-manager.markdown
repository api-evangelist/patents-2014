---

title: Decision service manager
abstract: The disclosure generally describes computer-implemented methods, software, and systems for modeling and deploying decision services. One computer-implemented method includes creating a connection between a decision service manager and a managed system, establishing a signature of a decision service, developing, using at least one computer, the decision service based upon the established signature of the decision service, performing a deployment readiness check, transferring generated code implementing the decision service to the managed system upon a determination that the deployment readiness check was successful, inserting the generated code into the managed system, and retrieving a deployment status from the managed system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09256400&OS=09256400&RS=09256400
owner: SAP SE
number: 09256400
owner_city: Walldorf
owner_country: DE
publication_date: 20140808
---
This application claims priority under 35 USC 119 e to U.S. patent application Ser. No. 13 477 526 filed on May 22 2012 the entire contents of which are hereby incorporated by reference.

The present disclosure relates to computer implemented methods software and systems for modeling and deploying decision services.

Updates to decision services e.g. business logic are typically resisted by organizations due to complexity high cost and lack of agility to perform even minor updates to the decision services. These factors are normally affected by the use of a three system landscape for decision service updating 1 development 2 quality assurance and production coupled with the use of a change and transport system CTS to migrate decision service changes between each system. The CTS normally requires specialized technical personnel to perform the migration of decision service changes between the development quality assurance and production systems therefore excluding business experts. The use of the three system landscape and need for specialized technical personnel for the CTS increases complexity and cost for the organizations. The CTS also requires a period of downtime during decision service migration where the system is unavailable until the updates are complete. The CTS also normally introduces rigid timeframes that are established between CTS migration events. These downtime periods and fixed timeframes affect the organizations ability to quickly make changes to a production system and an overall agility to adapt to changing business or other conditions. As a result the organizations often seek alternative solutions to perform decision service updates.

The present disclosure relates to computer implemented methods software and systems for modeling and deploying decision services. One computer implemented method includes creating a connection between a decision service manager and a managed system establishing a signature of a decision service developing using at least one computer the decision service based upon the established signature of the decision service performing a deployment readiness check transferring generated code implementing the decision service to the managed system upon a determination that the deployment readiness check was successful inserting the generated code into the managed system and retrieving a deployment status from the managed system.

Other implementations of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of software firmware or hardware installed on the system that in operation causes or causes the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other implementations can each optionally include one or more of the following features alone or in combination. In particular one implementation can include all the following features 

A second aspect combinable with the general implementation further comprising installing a business rule service package on the managed system.

In a third aspect combinable with any of the previous aspects the deployment readiness check is based upon criteria associated with the managed system and the developed decision service.

In a fourth aspect combinable with any of the previous aspects the criteria associated with the managed system and the developed decision service include at least one of that the definition and implementation of the decision service is free of any error messages that defined limitations are not used within the decision service the availability of the managed system or that the managed system responds with an acknowledgement prior to performing the deployment.

A fifth aspect combinable with any of the previous aspects further comprising locking objects associated with the decision service to be deployed and locking the managed system.

In a sixth aspect combinable with any of the previous aspects the inserting takes place while another decision service is in use.

In a seventh aspect combinable with any of the previous aspects the inserted generated code has an as of date indicating when the inserted generated code is permitted to execute on the managed system.

An eighth aspect combinable with any of the previous aspects further comprising generating a deployment log.

A ninth aspect combinable with any of the previous aspects further comprising releasing the locks from objects associated with the decision service to be deployed and the managed system.

The subject matter described in this specification can be implemented in particular implementations so as to realize one or more of the following advantages. First a decision services manager DSM server application can interface with a managed system to allow modeling with a business rules management BRM application of a decision service with all relevant data and development artifacts applicable to a business application on the managed system. This interfacing permits a local feel to the modeling of the decision service. Second the modeled decision service is deployed to the managed system where the decision service is inserted into the managed system. The inserted decision service application programming interface may be configured to permit execution of the inserted decision service on the managed system according to an as of date time parameter. For example the as of date time parameter may indicate that the inserted decision service may execute immediately or that the inserted decision service may not execute until a future date time. This local execution ensures higher performance for the decision service execution and protection of critical data by avoiding the introduction of delays and data exposure using a network. Third computer systems do not need to be tightly coupled which increases overall system landscape robustness in case of a computer system failure. Fourth a plug in to interface the DSM application with the managed system consumes very little resources on the managed system and is not disruptive to the operations of the managed system. The plug in may also be provided for multiple platforms increasing flexibility of the DSM application. Fifth once a modeled decision service is deployed to a managed system the DSM application is no longer needed to execute the deployed decision service. This increases robustness of the overall system. Sixth the DSM application may be used with managed test systems to provide manual or automated test functionality. Seventh the managed system contains a complete description of the deployed decision service allowing multiple DSM applications interfaced with the managed system to load and maintain the deployed decision service. Eighth the decision service may be executed on a DSM server for testing purposes. Further a modeled decision service may be deployed to multiple managed systems at the same time deployed decision services may have an as of date indicating when the deployed decision service is permitted to execute and decision services executing on a managed system can generate execution traces that may be imported into the DSM application for trace visualization or analytics. Other advantages will be apparent to those skilled in the art.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

The disclosure generally describes computer implemented methods software and systems for modeling and deploying decision services.

Generally through a graphical user interface GUI a DSM server user for example a client is provided with an efficient and user friendly presentation of data provided by or communicated within the system. The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Turning now to is a block diagram illustrating a decision service manager DSM server . At a high level the DSM server comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the example distributed computing system . In general the DSM server is a server that stores a DSM application and a business rule management BRM application where at least a portion of the DSM application and or the BRM application is executed using requests and responses sent to a client within and communicably coupled to the illustrated example distributed computing system using network . The DSM application and or BRM application are used to identify and communicate with one or more managed systems and to build modify and deploy decision services to the one or more managed systems in the organization s managed system landscape. In some implementations the DSM server may store a plurality of various DSM applications and or BRM applications . In other implementations the DSM server may be a dedicated server meant to store and execute only a single DSM application and or a BRM application . In some implementations the DSM server may comprise a web server where the DSM application and or the BRM application represents one or more web based applications accessed and executed by the client using the network or directly at the DSM server to perform the programmed tasks or operations of the DSM application and or the BRM application .

Specifically the DSM server is responsible for receiving application requests for example decision service modification requests from one or more client applications associated with the client of the example distributed computing system and responding to the received requests by processing said requests in the associated DSM application and or BRM application and sending an appropriate response from the DSM application and or BRM application back to the requesting client application. In addition to requests from the client requests associated with the DSM application and or BRM application may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers. According to one implementation DSM server may also include or be communicably coupled with an e mail server a web server a caching server a streaming data server and or other suitable server. In other implementations the DSM server and related functionality may be provided in a cloud computing environment.

The DSM server also includes an interface a processor and a memory . The interface is used by the DSM server for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the client and the managed system as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system .

As illustrated in the DSM server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the DSM server . Specifically the processor executes the functionality required to receive and respond to requests from the client and or model and deploy decision services.

The DSM server also includes a memory or multiple memories . The memory may include any type of memory or database module and may take the form of volatile and or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the DSM server . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others. While memory is illustrated as an integral component of the DSM server in alternative implementations memory can be external to the DSM server and or the example distributed computing system .

The memory holds data for the DSM server . In some implementations the memory includes a decision service a decision service catalog and a managed system identifier . Although illustrated as single instances there may be more than one instance of the decision service the decision service catalog and the managed system identifier .

The decision service is one or more of a programmatic task function algorithm instruction macro rule set etc. i.e. rule to be executed using a defined set of inputs the context for the decision service and outputs the result of the decision service . The set of inputs are used by the decision service rule s to derive or calculate the values of one or several other attributes. Decision services are often related to validations derivations defaulting classification calculation mapping and Boolean decisions. Often a decision service represents a micro decision those that occur very frequently and can impact the efficiency of an organization s operations. For example a decision service may process a received financial data set as inputs perform a tax calculation for a purchase order associated with a particular country and then output the result. A decision service is often associated with a particular business process step to perform one or more tasks at the particular business process step. The signature of the decision service may include a description of the decision service including the definition of the inputs and outputs of the decision service. In some implementations the decision service can be stored within a decision service catalog a collection of decision services . In some implementations the description of a particular decision service is in the form of individual text modules that may be assembled to form a complete description of the particular decision service . In some implementations the decision service catalog can be subdivided into different decision service service types for example tax calculators loan interest calculators etc.

The BRM application is a decision service development engine providing a comprehensive API and GUI for defining editing testing maintaining and processing decision services and associated decision services rules. The BRM application allows decision services to be modeled in an intuitive manner fosters reuse and supports simulation tracing transport and Extensible Markup Language XML export and import of decision services . In some implementations the BRM application is capable of modeling decision service rules that are capable of for example using decision tables and trees reading data during the modeled rule execution performing database calls functions calling services or interfaces in multiple computing languages and or protocols and other suitable rule based functions. For example a modeled decision service executing on a managed system may perform database updates on a legacy database system using a customer supplied custom software adaptor to interface the legacy database system with the managed system to transfer the legacy database information to a modern database system. In some implementations the BRM application is web based and runs in a client browser window. In some implementations the BRM application may be partially or completely provided in a cloud computing environment.

The DSM application provides functionality that is additive to that of the BRM application . For example the DSM application provides a set of capabilities for the administration of managed systems including 1 decision service deployment into one or multiple managed systems 2 as of deployment of decision services i.e. the decision services become active as of a specified time 3 recovery of system information from managed systems 4 retention and production of information concerning prior and planned deployments of decision services 5 importation of saved traces from local execution of decision services on managed systems 6 importation of XML describing local decision services on managed systems 7 importation of XML describing business applications available on managed systems 8 importation and download of generated decision service classes as a file from managed systems 9 deletion of deployments prior and planned in managed systems 10 deletion of historic decision services including XML generated classes and traces from managed systems and 11 performance of deployment tests on managed systems. As will be apparent to those skilled in the art other appropriate capabilities consistent with these examples may also be provided. In some implementations the BRM application is modified to tightly integrate with the DSM application in order to provide DSM server users a seamless development environment for decision services and applicable administration of managed systems with respect to the decision services .

Remote function call RFC is a protocol for remote communication between computers. An RFC destination defines all communication attributes to connect to a remote computer such as unique computer name the physical address of the computer encryption protocols passwords etc. In some implementations the identification of each managed system by the DSM application is provided by an RFC destination i.e. a managed system identifier . For example a managed system identifier for a particular managed system may be described as Name FI EMEA Description Financials in Europe RFC Destination UIX 080. Of course as will be appreciated by those skilled in the art other data fields values etc. may be used as long as the managed system can be uniquely identified by the DSM server . Turning now to illustrates an example GUI screenshot from the DSM Application . Available managed systems to the DSM Application are shown at . At the example system described by the example managed system identifier above i.e. Name FI EMEA is listed as a selected available managed system to the DSM Application . Additional technical information is available to the DSM application user for the selected available managed system on a Technical Information tab . In some implementations of the DSM application attributes of each listed managed system in may be maintained. In other implementations of the DSM application grouping of available managed system such as in a hierarchical structure sub menus etc. is available. In other implementations other suitable protocols apart from RFC may be used without departing from the scope of the disclosure.

Turning now to illustrates an example graphical user interface screenshot from a DSM application showing information regarding business applications available on a selected managed system . At a list of business applications described below available on example selected managed system is shown. While the illustrated example screenshot only shows Name and Description attributes associated with the listed example applications at other appropriate attributes such as business application permissions status execution time etc. may also be presented or made available to the DSM application user. In some implementations of the DSM application the manual assignment of some or all business applications available on a managed system is possible.

Turning now to illustrates an example graphical user interface screenshot from a DSM application showing information regarding deployment information of various decision services on a selected managed system . At a list of decision services associated with selected managed system are shown. For example at for decision service SERV B various columns of information are available relating to the decision service . Here a DSM application user can obtain historical or planned deployment information such as deployment timestamp source system information valid from valid to information available trace information and decision service generation status. At additional commands are available such as deploy and deployment readiness check. In some implementations of the DSM application the grouping selection of multiple decision services for deployment to one or more managed systems is possible. It should be appreciated that are only representative examples of the GUI interface available through the DSM application and are not meant to limit in any way appropriate functionality or information that may be made available to a DSM application user.

The DSM server further includes an application programming interface API . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. In some implementations the API can be used to interface between the DSM application and or one or more components of the DSM server or other components of the example distributed computing system both hardware and software. For example in one implementation the DSM application can utilize API to communicate with a managed system .

Turning now to is a block diagram illustrating a managed system . The managed system may be any computing device operable to connect to or communicate with the DSM server using the network . In general the managed system comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the example distributed computing system .

Specifically the managed system acts as a client to a DSM server and receives calls from the DSM server . For example a received call may be for the deployment of a new decision service on the managed system . In some implementations the received call may be a remote function call RFC but communication using any suitable interface protocol or communication method is envisioned as appropriate between the DSM server and the managed system without departing from the scope of this disclosure. Example managed systems may include but are not limited to enterprise resource planning ERP systems and customer relationship management CRM systems.

The illustrated managed system includes an interface a processor an API a function module and a memory . The interface is used by the managed system for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the DSM server as well as other systems communicably coupled to the network not illustrated . The interface may be consistent with the above described interface of the DSM server or other interfaces within the example distributed computing system . The processor may be consistent with the above described processor of the DSM server or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the managed system including the functionality required to receive requests from the DSM server process responses to the DSM server execute the business application and or logic associated with the plug in.

The business application is any type of application that allows the client to request and view content on the client . In some implementations the business application can be and or include a web browser. In some implementations the business application can use decision services parameters metadata and other information received prior to launch to perform tasks associated with the managed system or other components communicably coupled with managed system . Once a particular business application is launched a client may interactively process a task event or other information associated with the managed system . The business application can also be any application program module process or other software that may execute change delete generate or otherwise manage information associated with a particular managed system and in some cases a business process performing and executing business process related events. In particular business processes communicate with other clients applications systems and components to send and receive events. Additionally a particular business application may operate in response to and in connection with at least one request received from other business applications including a business application associated with another managed system . In some implementations each business application can represent a Web based application accessed and executed by remote clients using the network e.g. through the Internet or using at least one cloud based service associated with the business application . For example a portion of a particular business application may be a Web service associated with the business application that is remotely called while another portion of the business application may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular business application may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular business application may be executed or accessed by a user working directly at the managed system as well as remotely at a corresponding client . In some implementations the DSM server can execute the business application . Further although illustrated as a single business application the business application may be implemented as multiple business applications in the managed system .

The managed system further includes an application programming interface API . The API may be consistent with the above described API of the DSM server or other API s within the example distributed computing system . Specifically API provides an interface for the remote trigger of an execution of a decision service on the managed system by the DSM server client .

The illustrated managed system also includes a memory or multiple memories that may be consistent with the above described memory of the DSM server or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the managed system . The memory holds data for the managed system . In some implementations the memory includes business application data a data dictionary a decision service a decision service catalog and business rule service package components . Although illustrated as single instances there may be more than one instance of the business application data the data dictionary the decision service the decision service catalog and the business rule service package components . The decision service and the decision service catalog associated with memory may be consistent with the above mentioned descriptions of the decision service and or the decision service catalog associated with the memory of the DSM server . Specifically the decision service provides decision service functionality to the managed system . On the managed system the decision service catalog provides a list of decision services deployed from the DSM server to the managed system .

The business application data is any type of data associated with a data object used by a business application. For example for a business application that processes sales invoices business application data for a specific sales invoice data object may include data pertaining to a particular sales invoice number buyer seller date address product s quantity price tax rate etc.

The data dictionary is a central non redundant logical description definition of all data objects used within the managed system . Example data objects stored within the data dictionary includes database tables views types domains search helps and lock objects. For example the data dictionary shows how the data objects are mapped to an underlying relational database in tables or views which store business application data . New or modified data objects within the data dictionary are available to all components associated with the managed system . The data dictionary also provides standard editing functions for editing data objects within the data dictionary .

The business rule service package components are created by the installation of a business rule service package not illustrated providing necessary support components to allow a system to act as a managed system . In some implementations an installed business rule service package adds components to the managed system including a function group and a function module for communication with the DSM server database tables for persistence to save for example generated class names traces and Extensible Markup Language XML descriptions of decision services the API described above for decision service invocation by the DSM server and helper classes for use by the function module and the API .

The function module interfaces with the business application and or memory and permits communication between the managed system and the DSM server . In some implementations communication between the managed system and the DSM server occurs only from the DSM to the managed system . In other implementations communication between the managed system and the DSM server may be bi directional. Through the function module the DSM server has visibility to business applications and business artifacts stored on memory e.g. business application data data dictionary etc. . The BRM application may then be used in conjunction with the DSM application to develop and or maintain decision services associated with the managed system using the actual business artifacts from the managed system . For example a function module may be called by the DSM application to deploy a decision service to the managed system. The function module would receive the decision service description to deploy from the DSM server and insert the decision service code into the managed system . In another example the DSM application uses a function module on the managed system to retrieve data values from the managed system at design time of a decision service. In this example the value of an Employee data field may be requested by the DSM application from the function module for use in the BRM application The function module would then return the requested Employee data from the managed system . In some implementations the DSM application can retrieve data from multiple managed systems .

The helper classes verify and report whether a transferred decision service can be executed on the managed system . The helper classes also optimize the transferred decision service when inserted into the managed system as a local decision service and update the decision service catalog to reflect the insertion of the decision service .

While the API and the function module are illustrated as separate modules the above described function group database tables XML and helper classes are collectively shown within memory as the business rule service package components . However these components could be implemented and or illustrated as stand alone modules without departing from the scope of this disclosure. In some implementations it is possible to install both a DSM application and a business rule service package onto a managed system. In this implementation the managed system will act as both a server and a client for remote decision service code generation and or deployment. If a business rule service package and a DSM application are installed on a managed system those skilled in the art will appreciate that various components illustrated in may also be incorporated into the managed system to support DSM application functionality for example the decision service catalog or the managed system identifier . In some implementations the DSM application will verify the availability of the components installed by the business rule service package. In some implementations this verification can be performed by verifying the actual components installed by the business rule service package and or through a flag empty file registry entry or other suitable installation indicator.

There may be any number of managed systems associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one managed system alternative implementations of the example distributed computing system may include multiple managed systems communicably coupled to the DSM server and or the network or any other number suitable to the purposes of the example distributed computing system . Additionally there may also be one or more additional managed systems external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network .

Turning now to is a block diagram illustrating a client . The client may be any computing device operable to connect to or communicate with at least the DSM server using the network . In general the client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the example distributed computing system .

The illustrated client further includes a client application . The client application is any type of application that allows the client to request and view content on the client . In some implementations the client application can be and or include a web browser. In some implementations the client application can use parameters metadata and other information received at launch to access a particular set of data from the server . Once a particular client application is launched a user may interactively process a task event or other information associated with the business suite server . Further although illustrated as a single client application the client application may be implemented as multiple client applications in the client .

The illustrated client further includes an interface a processor and a memory . The interface is used by the client for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the DSM server and or managed system as well as other systems communicably coupled to the network not illustrated . The interface may also be consistent with the above described interface of the DSM server the interface of the managed system or other interfaces within the example distributed computing system . The processor may be consistent with the above described processor of the DSM server the processor of the managed system or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the client including the functionality required to send requests to the DSM server and or managed system and to receive and process responses from the DSM server and or the managed system . The memory may be consistent with the above described memory of the DSM server the memory of managed system or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the client .

Further the illustrated client includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation of a web browser. In particular the GUI may be used to view and navigate various web pages located both internally and externally to the DSM server and or the managed system .

There may be any number of clients associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client alternative implementations of the example distributed computing system may include multiple clients communicably coupled to the DSM server managed system and or the network or any other number suitable to the purposes of the example distributed computing system . Additionally there may also be one or more additional clients external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The illustrated client is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example the client may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the DSM server managed system or the client itself including digital data visual information or a GUI as shown with respect to the client .

Turning now to is a flow chart for modeling a decision service and preparation for deployment to a managed system. For clarity of presentation the description that follows generally describes method in the context of and . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the business suite server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the business suite server or the other computing device not illustrated .

At a business rule service package is installed on a system to convert the system to a managed system. From method proceeds to

At a connection is created between the decision service manager DSM application and the managed system. In some implementations a DSM application user will enter unique identification information into the DSM application GUI and select the entered managed system to establish the connection. From method proceeds to .

At a signature for a decision service is established in the BRM application. The BRM application user may either retrieve the signature of an existing decision service on the DSM server or the managed system. If the decision service signature is retrieved from the managed system in some implementations the managed system returns XML defining the signature to the DSM application for use by the BRM application. The BRM application user may also define a new signature for a decision service using the BRM application. From method proceeds to .

At a decision service is generated with the BRM application using the established decision service interface. The BRM application user may also use actual data from the managed system in order to develop edit and or test the newly generated decision service. From method proceeds to .

At a deployment readiness check is performed. Note a deployment may be performed either online or offline. An online deployment refers to user interaction where the user starts the deployment and waits for a returned status message result. An offline deployment refers to the user starting the deployment and revisiting the DSM application at a later time to determine the status of the deployment. A decision service can be deployed into a managed system when at least 1 the definition and implementation of the decision service is free of any error messages and 2 concepts defined as limitations are not used within the decision service. For example a defined limitation may include that action types or custom expression types are not supported in a decision service to be deployed to a managed system. Additional checks performed may include availability of the managed system e.g. using RFC Ping that all relevant packages have been generated by the BRM application and that the managed system response with an acknowledgment that a deployment is OK. From method proceeds to .

At a determination is made whether the performed readiness check returned a successful result. If at it is determined that the performed readiness check did not return a successful result method proceeds to where an error is generated. In some implementations the error can be displayed on a GUI. In other implementations the error can also be transmitted using email or some other messaging method to a designated user and or system to be further processed. If at however it is determined that that the performed readiness check did return a successful result method proceeds to .

At the generated decision service is deployed on the managed system using the DSM application further illustrated in . From method proceeds to .

At the deployment status is retrieved by the DSM application from the managed system. From method proceeds to .

Although illustrates the interaction between a single decision service manager DSM server and or DSM application and a single managed system it is possible for a DSM server and or application to interface with multiple managed systems to for example request data from the multiple managed systems during a design time modeling of a decision service. A single DSM application may also for example deploy as further described in below a developed decision service to multiple managed systems. Similarly multiple DSM applications may interface with a single managed system. Each DSM application import the XML descriptions of all deployed managed system specific decision services and may assist in the maintenance of the imported decision services on the managed system.

Further in some implementations a decision service may be in use by a managed system while an updated version of the decision service in use is deployed to the same managed system s . In these implementations the deployed updated decision service can have an as of date time parameter established. After the established as of date time has passed any request to use the decision service will result in the use of the updated decision service. In other implementations the newly deployed decision service may begin to be used immediately following successful deployment. The ability to deploy a new updated decision service concurrently while another is in use avoids system downtime to perform decision service deployments and or updates.

Turning now to is a flow chart for deploying a modeled decision service to a managed system. For clarity of presentation the description that follows generally describes method in the context of and . However it will be understood that method may be performed for example by any other suitable system environment software and hardware or a combination of systems environments software and hardware as appropriate. For example one or more of the business suite server the client or other computing device not illustrated can be used to execute method and obtain any data from the memory of the client the business suite server or the other computing device not illustrated .

At objects associated with the decision service on the BRM application are locked to prevent conflicts modifications during deployment. In some implementations all objects associated with the decision service are locked. In other implementations a subset of the related objects is locked. From method proceeds to .

At code is generated implementing the decision service. The generated code may be fully or partially written or described in any appropriate computer language including C C Objective C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. From method proceeds to .

At an XML definition implementation of the generated decision service is extracted from the generated code. From method proceeds to .

At the managed system is locked to prevent conflicts modifications during deployment. From method proceeds to .

At the generated code and extracted XML are transferred to the locked managed system. From method proceeds to .

At the transferred generated code and extracted XML is inserted into the managed system as a decision service and the decision service catalog is updated to reflect the inserted decision service. From method proceeds to .

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single DSM server client and managed system example distributed computing system can be implemented using two or more DSM servers clients and managed systems . The example distributed computing system can also be implemented with computers other than servers. For example although illustrates DSM server as a server the DSM server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further computers in example distributed computing system may be adapted to execute any operating system including Linux UNIX Windows Mac OS Java Android iOS or any other suitable operating system.

Regardless of the particular implementation software may include computer readable instructions firmware wired and or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component within or interfacing with the example distributed computing system may be fully or partially written or described in any appropriate computer language including C C Objective C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But example distributed computing system or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually in parallel and or in combination. In addition many of the steps in these processes may take place simultaneously concurrently in parallel and or in different orders than as shown. Moreover the example distributed computing system may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate. Process steps may also be executed and described software services may also execute on various components of the example distributed computing system so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain implementations and generally associated methods alterations and permutations of these implementations and methods will be apparent to those skilled in the art. Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

