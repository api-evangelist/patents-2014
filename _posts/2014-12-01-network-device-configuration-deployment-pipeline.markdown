---

title: Network device configuration deployment pipeline
abstract: The following description is directed to configuring network devices. In one example, a deployed configuration for a network device can be collected. The deployed configuration can be representative of a state of the network device at the time of collection. A difference can be detected between the deployed configuration and an authoritative configuration for the network device. In response to detecting the difference, an update of the network device according to the authoritative configuration for the network device can be scheduled.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09419856&OS=09419856&RS=09419856
owner: Amazon Technologies, Inc.
number: 09419856
owner_city: Seattle
owner_country: US
publication_date: 20141201
---
Cloud computing is the use of computing resources hardware and software which are available in a remote location and accessible over a network such as the Internet. Users are able to buy these computing resources including storage and computing power as a utility on demand. Cloud computing entrusts remote services with a user s data software and computation. Use of virtual computing resources can provide a number of advantages including cost advantages and or ability to adapt rapidly to changing computing resource needs.

Cloud computing facilities can include many compute resources connected by an internal communications network of the cloud service provider. The network can include many network components or devices that may need to be upgraded or reconfigured during the operational lifetime of the cloud computing facility. Further as resources are added to the cloud computing facility new network components may be added to the network increasing the size and complexity of the network. The cloud service provider may desire to provide high availability and throughput through the network even during an upgrade or reconfiguration of the network.

The configuration information of a network device is a set of state that describes how the network device operates. For example the configuration information can include addressing information routing information access control lists access credentials address translations quality of service parameters statistical gathering capabilities protocol support timer values encryption parameters device specific tuning parameters and or any other information suitable for controlling and or monitoring how the network device operates. When the network device is updated or configured with the configuration information the network device will operate according to the network device configuration. The configuration information of networking devices can change during the lifetime of the networking devices as users are added other networking devices are deployed and new security threats are discovered. Conventional methods for updating the configuration information of a networking device include remotely logging into the network device and making changes to the configuration state of the networking device. The changes may be made in response to specific issues or upgrades of the network. Over time the network device may have been updated many times and by many different network engineers such that the full configuration state of the network device can only be determined by reading the configuration state off of the network device. If the network device is misconfigured such as through an operator mistake the network may experience degraded performance or a network event such as a severe disruption in service.

As the network grows in size it is not scalable for a network engineer to log into each network device and manually make changes to the configuration state of the network device. Ad hoc automated scripts can be written to perform updates of multiple devices. However these scripts can cause degraded performance and or network events if there are dependencies when updating network devices and or if the script author is unaware of the full configuration state of the network devices. For example a network event may occur if the script allows one network device to read intermediate configuration state from another network device during its configuration. As another example the script may overwrite essential configuration state of which the script author was unaware with incompatible configuration state. As yet another example multiple scripts may be running concurrently and the different scripts may be incompatible with each other.

As described herein network configuration management and deployment tools can potentially provide a more available secure scalable and maintainable network than manual updates or ad hoc scripting. Fully automated router provisioning configuration and deployments can potentially reduce availability and security risks to customers while improving change agility. An automated lifecycle management system for network devices can reduce or eliminate the need for humans e.g. network engineers to manually login into network devices and make network changes. Potentially all devices can be provisioned including programmatic configuration generation application of the configuration validation of connections and safely turning up the device and managed throughout their lifecycle by automated tools with little or no human intervention.

An automated continuous deployment pipeline for network devices e.g. routers can potentially provide several benefits. An authoritative configuration can be provided potentially any time and on every device. For example the deployment pipeline can include an authoritative configuration repository with versioned configurations for every network device. By driving all configuration changes through the repository the repository can be kept in sync with the actual configuration state of the network devices. The deployment system can potentially be simple for a user and extensible. For example the deployment system can provide the ability to push out full configurations or incremental diff based configurations for the network devices. New and existing tools can potentially be integrated into an extensible framework. Customer impact can be reduced or eliminated by using comprehensive safety checks and fast rollback. For example a configuration can be deployed with comprehensive pre checks and post checks of the system. The system can integrate with monitoring systems and a metrics dashboard. The system can support automated rollback to a last known good configuration. The deployment system can potentially reduce the risks of concurrency by including device locking. For example the deployment framework can provide a scheduler to push configuration changes to devices and allow tools to integrate with the locking service to handle the challenges of concurrency in a multi tool eco system. The deployment system can potentially raise visibility through an operationally efficient user interface. For example the deployment system can potentially provide visibility of all configuration deployments being made to the network at any time and can potentially allow network engineers to effectively troubleshoot network events and make configuration changes during a high severity event.

The automated continuous deployment pipeline can be used in conjunction with a workflow that includes several stages 1 new configurations for the network devices can be programmatically generated and stored in an authoritative configuration repository 2 the different configurations of the devices can be tracked throughout the lifecycle of the device with corresponding versions of configurations in the repository 3 configuration changes can be reviewed through a code review style approval model 4 configurations can be validated through basic sanity checks and lab testing and 5 deployments of new configurations to the devices can include pre checks post checks and rollbacks to a known good state for multiple classes of configuration changes.

Web services are commonly used in cloud computing. A web service is a software function provided at a network address over the web or the cloud. Clients or other web services initiate web service requests to servers and servers process the requests and return appropriate responses. The web service requests are typically initiated using for example an application programming interface API request. For purposes of simplicity web service requests can be generally described below as API requests but it is understood that other web service requests can be made. An API request is a programmatic interface to a defined request response message system typically expressed in JSON or XML which is exposed via the web most commonly by means of an HTTP based web server. Thus in certain implementations an API can be defined as a set of Hypertext Transfer Protocol HTTP request messages along with a definition of the structure of response messages which can be in an Extensible Markup Language XML or JavaScript Object Notation JSON format. The API can specify a set of functions or routines that perform an action which includes accomplishing a specific task or allowing interaction with a software component. When a web service receives the API request the web service can generate a response to the request and send the response to the endpoint identified in the request.

The configuration store can receive and store a configuration for one or more of the network devices . For example the configuration store can receive a generated configuration from one or more generation tools not shown . The generated configuration can include a complete or a partial configuration for one or more of the network devices . Each of the network devices can have the same or different generated configurations. The generated configuration can be stored as the released configuration . Alternatively the generated configuration can be stored in the configuration store and reviewed by one or more network engineers and or software tools prior to being stored as the released configuration . For example one or more network engineers may perform a visual inspection e.g. code review and or perform experiments with the generated configuration prior to releasing the generated configuration. As another example software tools may perform checks on the generated configuration to determine whether the generated configuration complies with one or more policies or rules. If the generated configuration is approved as having passed the automated and or manual checks the generated configuration can be released. The configuration data can be stored in association with metadata about the configuration such as a status a version number one or more time stamps a latest author an approving manager and or a description of the configuration data for example.

The released configuration can be an authoritative next provisioned state of the network devices . In particular the released configuration is a configuration that is ready to apply to the networking devices such as after the configuration has been approved but may not have been applied yet. Thus the released configuration can represent a trusted and accurate representation of what the configuration state of the network devices should be after the network devices have been updated with the released configuration . Thus the released configuration can differ from the current configuration state of the network devices in the time between when a new released configuration is stored and before the network devices are updated. Each of the network devices can have the same or a different released configuration .

The configuration state of the network devices can be collected from the network devices and stored as the collected configuration . The collected configuration can represent the configuration state of the network devices at the time of collection. At the time of collection the collected configuration can represent the current provisioned state of the network devices . The collected configuration can include separate stored state for each of the network devices .

The configuration state of the network devices can be monitored and collected at different times and stored in multiple locations or with multiple labels. The most recently collected configuration state of the network devices can be stored as the collected configuration . When the network devices are being updated the configuration state of the network devices can be collected and stored as the deployed configuration and the collected configuration . Thus the deployed configuration can represent the configuration state of the network devices when they are updated. When the network devices are updated the deployed configuration and the collected configuration can be the same. However over time the deployed configuration and the collected configuration may diverge such as when manual changes are made to the configuration state of the network devices . The collected configuration and the deployed configuration can include separate stored state for each of the network devices . As an alternative to collecting the deployed configuration the released configuration can be copied to the deployed configuration .

The configuration service can detect a difference between the released configuration and the deployed configuration for one or more of the network devices . When a difference is detected the configuration service can cause one or more of the network devices to be updated such as by triggering an update to be scheduled via the deployment service . In one embodiment the configuration service can include the deployment service . The deployment service can include a scheduler and one or more locks . In one embodiment the scheduler can include the one or more locks .

The scheduler can schedule an update for one or more of the network devices . The network devices to be updated can be communicated to the scheduler . For example the scheduler can receive a list of the network devices to be updated. The scheduler can schedule the updates based on one more policies rules events or other suitable criteria. For example the network devices can be updated at a given time or based on an event trigger. For example an update for a particular one of the network devices can be scheduled for a specific time when the network is typically not busy. As another example an update for a particular one of the network devices can be scheduled based on measured performance criteria being satisfied such as when the average bandwidth through a network device is less than a threshold. As yet another example an update for a particular one of the network devices can be scheduled to follow an update for a different one of the network devices . As yet another example an update for a particular one of the network devices can be scheduled to occur when additional network devices are deployed or when other network devices are taken off line.

At the scheduled event or time the deployment service can initiate the update of one or more of the network devices so that each device can be configured according to the released configuration for the network devices . The deployment service can manage multiple concurrent updates to the network devices using the one or more locks . By utilizing the locks the deployment service can reduce the likelihood of introducing a race condition during the deployment of the network device configurations that could potentially cause degraded performance of the network. The locks can also reduce the likelihood of configuration changes made by one tool or a human from being overwritten by another tool or human. The locks can be associated with one or more of the network devices and or one or more of the configuration tools . For example updating a first network device using a first tool may be conditioned on obtaining a lock associated with the first network device and another lock associated with the first tool. In one embodiment initiating an update of one or more of the network devices can be conditional on obtaining one or more of the locks . In an alternative embodiment an update of one or more of the network devices can be initiated without obtaining one or more of the locks but one or more steps of the update can be conditional on obtaining one or more of the locks . In other words some parts of the update can occur without the lock and other parts of the update may need a lock to be performed.

One or more of the configuration tools can be used to update the network devices according to the released configuration . The configuration tools can be used to update all of the state associated with the released configuration or a portion of the state associated with the released configuration . For example the configuration tools can include different tools for updating credentials updating access control lists ACLs and updating routing tables. The configuration tools can include pre checks post checks and roll backs. For example pre checks can include obtaining one or more of the locks reading or collecting the current configuration state of the network devices to be updated comparing the current configuration state to the deployed configuration state checking the released configuration against a set of rules or policies quiescing traffic and or processes on the network devices and aborting the update if any of the pre checks fail. The pre checks can be performed before the released configuration state is pushed to the network devices . The post checks can be performed after the released configuration state is pushed to the network devices . The post checks can include reading or collecting the current configuration state of the network devices that were updated comparing the collected configuration state to the released configuration state enabling traffic and or processes on the network devices releasing one or more of the locks and initiating a roll back if any of the post checks fail. The roll back can be used to push the last known good configuration to the network devices if the post checks fail.

The generated configuration can be communicated from the builders to the configuration store where the generated configuration can be stored. As described above the configuration store can include multiple versioned configurations for the network devices including a released configuration a collected configuration a deployed configuration a generated configuration and a last known good configuration. The generated configuration can be stored as the released configuration when it is received or the generated configuration can undergo an approval process prior to being stored as the released configuration . The collector service can be used to collect configuration state from the network devices . The collector service can be called by other services of the deployment pipeline via an application programming interface API . For example the collector service can be called by the configuration tools to collect the deployed configuration of one or more network devices as one step of the update process. The collector service can be part of the configuration service the deployment service or a separate service for example.

The auditor service can monitor the configuration store and determine if there is a difference between the released configuration and the collected configuration or the deployed configuration . The deployed configuration can be collected by the collector service when the network devices are updated or the deployed configuration can be copied from the released configuration when the network devices are updated. The auditor service can be part of the configuration service the deployment service or a separate service for example. If the auditor service detects a difference the auditor service can cause the difference to be remediated by causing an update of the network device to be scheduled via the scheduler service . As described above the scheduler service can schedule the update based on a variety of criteria. The scheduler service can monitor the scheduling criteria and can initiate an update of the network devices when the scheduling criteria is met. The scheduler service can initiate an update of the network devices by executing one or more of the configuration tools and or a task of a deployment fleet . The deployment service can include the tasks of the deployment fleet . Thus an update of the network devices can be performed by one or more configuration tools that are separate from the deployment service . Alternatively an update of the network devices can be performed by one or more tasks of the deployment fleet .

The configuration tools and deployment fleet can request one or more locks from the scheduler prior to or during updating the network devices . The configuration tools and deployment fleet can install or deploy the released configuration to the network devices . For example the released configuration can be transmitted to one or more of the network devices and then installed. After installation the configuration tools and deployment fleet can call the collector service to collect the deployed configuration . Alternatively a different service not shown can download or read the current configuration state from the network devices when the network devices are updated. The configuration tools and deployment fleet can perform pre checks post checks and roll back as described above. The configuration tools and deployment fleet can record a log of activity on a deployments events database and release the one or more locks after the deployed configuration has been collected and the deployment log has been recorded on the deployments events database .

The deployments events database can be used to store various information about activities and events occurring within the deployment pipeline . For example the deployments events database can be used to store the version of configuration information pushed to the network devices and the time when the network devices are updated. Thus an audit trail can be created to provide network engineers with data to effectively troubleshoot network events and make configuration changes during a high severity event. For example a portal can provide a user interface for accessing the deployments events database data sources and configuration store . The portal can provide access to raw data recorded on the databases. The portal can present notifications and alerts of events occurring in the network and or the deployment pipeline . For example the scheduler can record when an update is initiated and the portal can show an alert that the update has started.

The deployments events database data sources and configuration store can include magnetic disks direct attached storage network attached storage NAS storage area networks SAN redundant arrays of independent disks RAID magnetic tapes or cassettes DVDs or any other medium which can be used to store information in a non transitory way and which can be accessed by one or more services of the deployment pipeline .

At the released configuration for the network device can be received. For example a generated configuration can be communicated to the configuration service by the builders . As another example the released configuration can be received when the configuration is accepted as the authoritative configuration such as when a status of the configuration is changed to released. The configuration service can store the configuration in the configuration store as the released configuration .

At a deployed configuration can be received from the configuration store . For example the deployed configuration can be copied from the released configuration . As another example the configuration state of a newly updated network device can be collected by the collector service and stored in the configuration store as the deployed configuration . For example the collector service can remotely login to the network device execute a show run on the network device and capture the output of the command such as by piping the output to a log file . The collected configuration can be stored in the configuration store as the deployed configuration as a backend step of the network device update. Additionally configuration state from the network devices can be stored as a collected configuration when the configuration state is collected at times other than during an update of the network devices . As described further with reference to below the deployed configuration can be canonicalized prior to storing to or after it is read from the configuration store .

At a difference between the released configuration and the deployed configuration can be detected. For example the auditor service can perform a comparison between the released configuration and the deployed configuration to determine if there is a difference between them. When doing the comparison between the released configuration and the deployed configuration some parts of the configuration can be filtered or masked. In particular a portion of the configuration can be excluded from the comparison between the released configuration and the deployed configuration . For example when a portion of the configuration includes data that does not affect the operation of the network device it may be desirable to exclude this information from the comparison. As a specific example the deployed configuration may include data that is hardware or topology specific but does not affect the operation of the network device. However configuration data that affects the operation of the network device can be included in the comparison.

At an update of the network device can be scheduled. For example the update can be scheduled by the scheduler service based on detecting a difference between the released configuration and the deployed configuration . The update can be scheduled based on one more policies rules events or other suitable criteria. For example the update for a particular network device can be scheduled for a specific time based on a measured performance criteria being satisfied based on another network device being updated or based on an event within the network occurring.

At the update of the network device can be initiated upon the scheduled event occurring. For example the scheduler service or another service can monitor the criteria of scheduled events and when the criteria for the scheduled event is satisfied the scheduler service can initiate the update of the network device. The update can be initiated by calling or executing one or more of the configuration tools and or the tasks of the deployment fleet . As a result of the update the released configuration can be loaded or installed on one or more of the network devices and the post installation configuration state can be collected from the network device and stored at the configuration store . The update is described in further detail with reference to .

At one or more locks such as the locks can be obtained. The lock s to be obtained can correspond to a lock for the network device to be updated and or a lock for one or more of the configuration tools or the tasks of the deployment fleet . It can be desirable to obtain a lock for the network device and or configuration tools to reduce the likelihood of operational network state being inadvertently overwritten or intermediate network state being inadvertently captured. The method can block e.g. wait or stall until the lock is obtained. If the lock is not obtained within a threshold amount of time the service managing the locks such as the deployment service can indicate a time out or lock unavailable condition and can abort the update of the network device. By indicating that the lock is not available within a threshold period of time the potential for deadlock within the deployment pipeline can be reduced. A time out event can be logged in the deployments events database and or an alert can be displayed at the portal when a lock is not obtained within the threshold amount of time.

At the network device can be configured according to the released configuration of the network device. Configuration of the network device can include one or more front end steps. For example the network device can be configured after satisfying one or more pre checks or preconditions such as obtaining one or more locks as described at . Another example of a precondition is determining whether the current configured state of the network device matches the deployed state of the network device. Specifically the collector service can collect the present or current state of the network device and if the current configuration does not match the deployed configuration e.g. the precondition fails then the update to the network device can be aborted and the event can be logged in the deployments events database and or an alert can be displayed at the portal . It can be desirable for the present state of the network to match the deployed configuration to reduce the likelihood of operational network state being inadvertently overwritten.

Configuration of the network device can include installing the released configuration onto the network device using one or more of the configuration tools or the tasks of the deployment fleet . For example the configuration tools can be used to update all of the configuration state of the network device associated with the released configuration a full configuration . As another example the configuration tools can be used to update a portion of the configuration state associated with the released configuration an incremental configuration . The choice between performing a full or an incremental configuration can be determined by analyzing the differences between the released configuration and the deployed configuration . For minor differences performing an incremental configuration may potentially reduce the time risk and or resources for performing the incremental configuration. The partial configuration can update the configuration state of the network device that corresponds to differences between the released configuration and the deployed configuration . Thus after a partial configuration is complete the released configuration and the deployed configuration can be the same just as if a full configuration were performed.

Configuration of the network device can include one or more back end steps such as 440 and 450 performed after the released configuration state is pushed to the network devices. For example the back end steps can include verifying whether the configuration of the network device was successful e.g. post checks and supporting automated rollback to a last known good configuration. At the updated configuration state from the network device can be read after the network device is updated. For example the collector service or another service can be called to read or capture the configuration state from the network device. As described below with reference to the captured configuration state can be canonicalized to aid with the comparison between the captured configuration state and the released configuration state. As an alternative to capturing the configuration state the configuration state can be copied from the released configuration .

At the captured or copied configuration state can be stored as the deployed configuration state . In other words the deployed configuration can be updated or synchronized so that the deployed configuration reflects the current configuration state of the recently updated at network device. If the deployed configuration matches the released configuration the configuration update is successful. Otherwise a rollback to the last known good configuration can be initiated and or an event can be logged in the deployments events database and or an alert can be displayed at the portal . At the lock for the network device can be released. Freeing the lock can potentially allow another tool to access the network device.

When a network device is programmed the fixed state and the default state of the network device does not need to be programmed since this state is resident in the registers of the network device. Thus tools such as builders that generate a network device configuration may omit the fixed state and the default state from the network device configurations they generate because this state does not need to be separately programmed. Alternatively the builders can be designed to output a network device configuration in canonical form. The network device configuration deployment pipeline may use a set of heterogeneous tools for builders and so different generators e.g. builders may produce the network device configurations in different formats.

When configuration state is read or collected from a network device some of the configuration state can be omitted or censored in the collected state the collected state can include some or all of the default states and the configuration state can be returned in a different order and or with a different format than when the configuration state is programmed. The collected configuration state can be censored because the network device configuration can include state that is only accessible by a user or service that has authorization to read that state. For example credentials and private keys can be stored on the network device and can affect how the network device operates but this configuration information cannot be read e.g. it is censored or masked by a typical user or service since they do not have authorization to read this information. The collected configuration can include duplicative information and or configuration information that is device specific or non critical to the overall operation of the network.

Comparing generated configurations to unprocessed or raw collected configurations can be challenging because of the differences outlined above. Comparisons can potentially be simplified or be more accurate if the configurations to be compared are transformed into canonical configurations prior to the comparison. A complete canonical configuration is a representation of all of the configuration state of the network device presented in a uniform way without duplicative state. The uniform presentation can include a single ordering of configuration state a single format for representing configuration state and or a structure for organizing the configuration state. A partial canonical configuration is a representation of all of the configuration state corresponding to a portion of the configuration state of the network device presented in a uniform way without duplicative state. For example a partial canonical configuration can exclude configuration state that is censored or masked when the configuration state is read by the collector from the network devices . As another example a partial canonical configuration can exclude configuration state that is non critical to the overall operation of the network.

Returning to at a network device configuration can be received. The network device configuration can be a generated stored or a collected configuration. For example the collector service can collect the network device configuration state from one or more of the network devices . As another example a generated network device configuration can be received from the builders . As yet another example a stored network device configuration can be retrieved from the configuration store . Mask information associated with the network device configuration can also be received. For example the mask information can correspond to one or more sections of the network device configuration that are censored or non critical.

At the network device configuration can be transformed into a configuration tree. For example the network device configuration can be syntactically analyzed based on a grammar of the network device. The syntactic analysis can include lexical analysis e.g. breaking the network device configuration into tokens and parsing the tokens to create the configuration tree. The configuration tree is a data structure that represents the configuration state of the network device. A structure of the configuration tree can correspond to the configuration state of the network device. For example a node of the configuration tree can correspond to access control and children of the node can correspond to the values of the access control list. As another example a different node of the configuration tree can correspond to routing and children of the node can correspond to the values of the routing tables of the network device. In one embodiment the configuration tree can include restricted and or non critical configuration state such as credentials . In an alternate embodiment the configuration tree can exclude restricted and or non critical configuration state.

At a canonical network device configuration can be output based on the configuration tree. For example the canonical network device configuration can be generated as the configuration tree is walked. If mask information is received at the mask information can be used to exclude one or more sections from the canonical network device configuration. Thus a complete or partial canonical configuration can be generated.

The particular illustrated compute service provider includes a plurality of server computers A D. While only four server computers are shown any number can be used and large centers can include thousands of server computers. The server computers A D can provide computing resources for executing software instances A D. In one embodiment the instances A D are virtual machines. As known in the art a virtual machine is an instance of a software implementation of a machine i.e. a computer that executes applications like a physical machine. In the example of virtual machine each of the servers A D can be configured to execute a hypervisor or another type of program configured to enable the execution of multiple instances on a single server. Additionally each of the instances can be configured to execute one or more applications.

It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machines other types of instances can be utilized with the concepts and technologies disclosed herein. For instance the technologies disclosed herein can be utilized with storage resources data communications resources and with other types of computing resources. The embodiments disclosed herein might also execute all or a portion of an application directly on a computer system without utilizing virtual machine instances.

One or more server computers can be reserved for executing software components for managing the operation of the server computers and the instances . For example the server computer can execute a management component . A customer can access the management component to configure various aspects of the operation of the instances purchased by the customer. For example the customer can purchase rent or lease instances and make changes to the configuration of the instances. The customer can also specify settings regarding how the purchased instances are to be scaled in response to demand. The management component can further include a policy document to implement customer policies. An auto scaling component can scale the instances based upon rules defined by the customer. In one embodiment the auto scaling component allows a customer to specify scale up rules for use in determining when new instances should be instantiated and scale down rules for use in determining when existing instances should be terminated. The auto scaling component can consist of a number of subcomponents executing on different server computers or other computing devices. The auto scaling component can monitor available computing resources over an internal management network and modify resources available based on need.

A deployment component can be used to assist customers in the deployment of new instances of computing resources. It should be noted that the deployment component is different from the network device configuration deployment pipelines and . The deployment component can have access to account information associated with the instances such as who is the owner of the account credit card information country of the owner etc. The deployment component can receive a configuration from a customer that includes data describing how new instances should be configured. For example the configuration can specify one or more applications to be installed in new instances provide scripts and or other types of code to be executed for configuring new instances provide cache logic specifying how an application cache should be prepared and other types of information. The deployment component can utilize the customer provided configuration and cache logic to configure prime and launch new instances . The configuration cache logic and other information may be specified by a customer using the management component or by providing this information directly to the deployment component . The instance manager can be considered part of the deployment component.

Customer account information can include any desired information associated with a customer of the multi tenant environment. For example the customer account information can include a unique identifier for a customer a customer address billing information licensing information customization parameters for launching instances scheduling information auto scaling parameters previous IP addresses used to access the account etc.

A network can be utilized to interconnect the server computers A D and the server computer . The network can include the network devices . The network can be a local area network LAN and can be connected to a Wide Area Network WAN so that end users can access the compute service provider . It should be appreciated that the network topology illustrated in has been simplified and that many more networks and networking devices can be utilized to interconnect the various computing systems disclosed herein.

A network device configuration deployment pipeline can be used to deploy and or update one or more of the network devices of the network . The network device configuration deployment pipeline can include the configuration service and the configuration tools . The configuration service can include a configuration store for storing multiple versions of device configurations such as a released configuration and a deployed configuration . When a difference between the released configuration and the deployed configuration is detected the configuration service can schedule and initiate an update of the network . For example the configuration service can execute or call one or more of the configuration tools to update one or more of the network devices of the network according to the released configurations for the network devices . The network device configurations can be collected from the network to confirm whether the network devices were configured properly.

With reference to the computing environment includes one or more processing units and memory . In this basic configuration is included within a dashed line. The processing units execute computer executable instructions. A processing unit can be a general purpose central processing unit CPU processor in an application specific integrated circuit ASIC or any other type of processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power. For example shows a central processing unit as well as a graphics processing unit or co processing unit . The tangible memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory etc. or some combination of the two accessible by the processing unit s . The memory stores software implementing one or more innovations described herein in the form of computer executable instructions suitable for execution by the processing unit s .

A computing system may have additional features. For example the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus controller or network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The tangible storage may be removable or non removable and includes magnetic disks magnetic tapes or cassettes CD ROMs DVDs or any other medium which can be used to store information in a non transitory way and which can be accessed within the computing environment . The storage stores instructions for the software implementing one or more innovations described herein.

The input device s may be a touch input device such as a keyboard mouse pen or trackball a voice input device a scanning device or another device that provides input to the computing environment . The output device s may be a display printer speaker CD writer or another device that provides output from the computing environment .

The communication connection s enable communication over a communication medium to another computing entity. The communication medium conveys information such as computer executable instructions audio or video input or output or other data in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media can use an electrical optical RF or other carrier.

Although the operations of some of the disclosed methods are described in a particular sequential order for convenient presentation it should be understood that this manner of description encompasses rearrangement unless a particular ordering is required by specific language set forth below. For example operations described sequentially may in some cases be rearranged or performed concurrently. Moreover for the sake of simplicity the attached figures may not show the various ways in which the disclosed methods can be used in conjunction with other methods.

Any of the disclosed methods can be implemented as computer executable instructions stored on one or more computer readable storage media e.g. one or more optical media discs volatile memory components such as DRAM or SRAM or non volatile memory components such as flash memory or hard drives and executed on a computer e.g. any commercially available computer including smart phones or other mobile devices that include computing hardware . The term computer readable storage media does not include communication connections such as signals and carrier waves. Any of the computer executable instructions for implementing the disclosed techniques as well as any data created and used during implementation of the disclosed embodiments can be stored on one or more computer readable storage media. The computer executable instructions can be part of for example a dedicated software application or a software application that is accessed or downloaded via a web browser or other software application such as a remote computing application . Such software can be executed for example on a single local computer e.g. any suitable commercially available computer or in a network environment e.g. via the Internet a wide area network a local area network a client server network such as a cloud computing network or other such network using one or more network computers.

For clarity only certain selected aspects of the software based implementations are described. Other details that are well known in the art are omitted. For example it should be understood that the disclosed technology is not limited to any specific computer language or program. For instance the disclosed technology can be implemented by software written in C Java Perl JavaScript Adobe Flash or any other suitable programming language. Likewise the disclosed technology is not limited to any particular computer or type of hardware. Certain details of suitable computers and hardware are well known and need not be set forth in detail in this disclosure.

It should also be well understood that any functionality described herein can be performed at least in part by one or more hardware logic components instead of software. For example and without limitation illustrative types of hardware logic components that can be used include Field Programmable Gate Arrays FPGAs Application Specific Integrated Circuits ASICs Application Specific Standard Products ASSPs System On a Chip systems SOCs Complex Programmable Logic Devices CPLDs etc.

Furthermore any of the software based embodiments comprising for example computer executable instructions for causing a computer to perform any of the disclosed methods can be uploaded downloaded or remotely accessed through a suitable communication means. Such suitable communication means include for example the Internet the World Wide Web an intranet software applications cable including fiber optic cable magnetic communications electromagnetic communications including RF microwave and infrared communications electronic communications or other such communication means.

The disclosed methods apparatus and systems should not be construed as limiting in any way. Instead the present disclosure is directed toward all novel and nonobvious features and aspects of the various disclosed embodiments alone and in various combinations and subcombinations with one another. The disclosed methods apparatus and systems are not limited to any specific aspect or feature or combination thereof nor do the disclosed embodiments require that any one or more specific advantages be present or problems be solved.

In view of the many possible embodiments to which the principles of the disclosed invention may be applied it should be recognized that the illustrated embodiments are only preferred examples of the invention and should not be taken as limiting the scope of the invention. Rather the scope of the invention is defined by the following claims. We therefore claim as our invention all that comes within the scope of these claims.

