---

title: Applying actions to item sets within a constraint
abstract: Items of an item set may be stored by an item server (e.g., mail messages comprising a mailbox stored by a mail server) that supports the application of actions, but only within a constraint (e.g., a maximum duration or computational resources consumed by the action). The application of complex actions to large item sets may exceed the constraint if performed in one request. Moreover, the request may be made by a user interface of a user device, but the user interface may stall while interoperating with the item server to perform the action. Instead, a background process may issue a sequence of requests applying the action to respective batches of items within the constraint. This architecture may enable the user interface to remain responsive to the user while the action is performed, and even to be terminated without jeopardizing the completion of the action upon the item set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09647973&OS=09647973&RS=09647973
owner: Microsoft Technology Licensing, LLC
number: 09647973
owner_city: Redmond
owner_country: US
publication_date: 20140918
---
The present application is a continuation of and claims priority to U.S. patent application Ser. No. 13 095 110 filed Apr. 27 2011 and also entitled Applying Actions to Item Sets Within a Constraint the entirety of which is incorporated by reference as if fully rewritten herein.

Within the field of computing many scenarios involve an item set comprising a set of items managed by an item server such as a mailbox comprising a set of mail messages stored by a mail server a file system comprising a set of files stored by a file server and a database comprising a set of records stored by a database server. Within such item sets an action requested by a user or process may be applied that may take a considerable amount of time and or processing power to complete particularly if the action is complex and or the item set is large. However the item server may be configured to service many processes and or users and it may be undesirable to apply the entire operation to the item set as an uninterruptible transaction because this application may deprive the other processes and or users of computing resources e.g. the item set may have to be exclusively locked in order to perform the action or the bandwidth memory or computational capacity of the server may be exhausted while performing the operation . Therefore many item servers may execute the action under a constraint such as a maximum amount of time computational capacity memory and or bandwidth that may be consumed by the action. Actions that exceed this constraint may be suspended or terminated by the item server or if the action appears likely to exceed the constraint the item server may simply refuse to perform the action.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In scenarios involving the application of an action to an item set stored by an item server having a constraint several techniques may be available. As a first example the item server or a device interfacing directly with the server e.g. a server side interface layer such as a webserver configured to interface with the item server and render web pages presenting the results thereof may be configured in a stateful manner e.g. the action may be executed periodically on behalf of the user until all of the items of the item set have been processed. However the application of stateful configurations within a server including a webserver interfacing with the item server may be resource intensive unduly complex or an unacceptable design choice. As a second example a user interface executing on a user device through which the user requested the action may issue a series of requests to perform the action on subsets of items within the item set wherein the request may be applied to any particular subset of items within the constraint of the item server. However this example may overly tax the user interface e.g. by suspending the operation and or responsiveness of the user interface until the action has been applied to all items of the item set. Moreover the user may choose to terminate the user interface e.g. if the user is frustrated by the lack of responsiveness of the user interface while issuing the requests to perform the action thereby terminating the application of the action before application to the item set is complete thereby leaving only some of the items processed and the item set in a potentially inconsistent state.

Presented herein are techniques for applying a potentially long running action to the items of an item set stored by a stateless item server having a constraint. In accordance with these techniques the user may initiate an action to be applied to the item set through a request provided on a device through a user interface e.g. clicking a button or other control requesting the application of the action . However instead of configuring the user interface to interoperate with the item server potentially suspending the operation and or responsiveness of the user interface the device may initiate a process such as a background thread or service. The process selects batches of items within the item set to which the action may be applied within the constraint of the item server and sends to the item server a sequence of requests to the server to apply the action to respective batches of the item set. For example the process monitors the progress of the item server while applying the action to the items of a first batch and upon the item server completing the application of the action to the first batch initiates a second request to apply the action to the items of a second batch. The process may also monitor the progress of the server in applying the action to respective batches and may adjust the batch size accordingly for future batches. The separation of the application of the batching and requests for actions from the user interface may enable the application of a long running process to a constrained stateless server while also permitting the device to render the user interface in a consistent uninterrupted and responsive manner. Moreover the process may provide information about the progress of the action upon the item set to the user interface which may e.g. present a progress bar indicating the continuation and or completion of the application of the action to the item set.

These techniques may be advantageous e.g. for enabling the process to operate independently of the operation of the user interface which may remain responsive and consistent and which the user may interact with and or terminate without jeopardizing the completion of the action to the items of the item set. Additionally the process may manage the progress of the application of the action e.g. by adjusting the batch size in view of the success or failure in applying the action to batches and or managing failures in the application of the action e.g. an instance wherein the application of the action to a batch violates the constraint of the item server . Concurrently the user interface on the device of the user may continue to operate and respond to the requests of the user and may even be terminated without jeopardizing the application of the action to the items of the item set.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Within the field of computing many scenarios involve an item set comprising a set of items stored by an item system. As a first example a mail server may store a mailbox comprising a set of mail messages to be delivered to various users. As a second example a file server may store a file system comprising a set of files organized and accessed by various users. As a third example a database server may store a database comprising a set of records organized in one or more tables to be queried by various users.

In these and other scenarios an item server may be accessed by one or more users in various ways such as through various architectures of devices and processes. In particular many scenarios involve an item server that is not directly utilized by a user e.g. the applications and processes that consume the data are not accessed on the item server but rather execute on various other devices. For example a user may operate a user device such as a workstation a portable computer of a computer notebook tablet or palm form factor or a handheld device such as a smartphone. The user may execute data driven applications on the user device that interact with the item server. One or more additional layers may also exist between the item server and the user device. As a first example for an item set that is accessible via a web browser a webserver may be provided that interacts with the item server on behalf of the user and presents to the user an interface to the item set through a set of rendered web pages. As a second example the item server may be reserved for providing high performance storage of primitive data operations while complex processes e.g. evaluating mail messages for spam content encrypting network traffic for a file server and applying a complex business logic that defines the rules of the data stored in a database may be implemented by one or more intermediate servers. Many such architectures and combinations thereof may be devised to satisfy various scenarios.

Additionally in these and other scenarios an action may be applied to the items of the item set. The action may be applied to all items of the item set or may comprise one or more criteria specifying a subset of items matching the criteria to which the action is to be applied. As a first example messages in a mail system may be downloaded archived e.g. relocated to a different folder or storage system deleted searched for keywords or scanned for viruses or other malicious content. As a second example files in a file system may be downloaded altered moved compressed or scanned for a particular subset of data. As a third example records in a database system may be created read updated or deleted using a query specified in a database markup language.

In these scenarios the user may request an action to be applied to one or more items of the item set stored by the item server. However the exemplary scenario of illustrates some problems that may arise in such scenarios. As a first example complications may arise in choosing the architecture of the systems that perform the action. For example it may be undesirable to permit an item server to execute the action because the item server may be reserved for primitive data operations. Alternatively an intermediate server that interfaces with the item server e.g. a business logic server or a webserver may perform actions on behalf of respective users . However such execution may divert resources from the performance of servers within the specified role e.g. executing the action on a webserver may diminish the capacity of the webserver to provide web pages for other users . Additionally the execution of a long running action on a server provided by a service e.g. a mail service may exhibit scalability problems e.g. the number of requests to perform such long running actions may scale up proportionally with the number of users of the service thereby significantly increasing the costs of providing the service and the number of devices involved therein.

Instead it may be desirable to execute a significant portion of the action on the computer or other device of the user . For example while applying an action involving a complex evaluation of items e.g. a cleanup of a mailbox that involves evaluating the messages provided therein in order to identify and generate rules therefrom it may be desirable to utilize the computer of the user to perform the evaluation rather than the item server or an intermediate server provided by the service. However this solution may also be undesirable e.g. the performance of the computer of the user may be reduced and or overly utilized resulting in apparently diminished performance of the service to the user .

As a second exemplary problem with such scenarios many such actions may consume a significant amount of computing resources of the item server such as computational capacity memory or storage capacity or network capacity and or may simply take a long time to perform. Moreover some actions may involve exclusively locking a resource and while the resource is locked during a long running action the item server may be unable to perform other operations involving the locked resource. While it may be desirable to permit the user to request these actions the item server may exhibit reduced performance for other users and processes while performing the resource intensive action on behalf of the user . For example in the exemplary scenario of while the mail server is performing a mail archive action for the user the mail server may exhibit reduced performance for mail from other users such as slow response times or the failure of some actions to complete within a designate time frame. Additionally users may maliciously or unintentionally cause a protracted and perhaps unending consumption of such resources e.g. a denial of service attack thereby reducing or eliminating the services provided by the item server to other users and processes for an extended period of time. This problem is exacerbated by the unpredictability in many instances of how long an action may take to complete or how many computing resources may be consumed during the application of the action e.g. according to the halting problem many operations may not be amenable to evaluation as to the amount of time involved in completing the operation including a determination of whether or not the operation may terminate or may be interminable .

In order to reduce the problems associated with long running operations many item servers are implemented with a constraint that limits the amount of computational resources a particular action may consume. As a first example the constraint may comprise a computational capacity constraint e.g. an action may be permitted to utilize only a particular amount of processing power of the item server such as a small time slice in a preemptive multitasking environment. As a second example the constraint may limit the maximum amount of memory capacity storage capacity and or network capacity an action may utilize and may restrict suspend or simply terminate an action that exceeds this amount. As a third example the constraint may comprise a time limit e.g. a maximum amount of time that an action is permitted to execute before being terminated by the item server. Through the implementation of one or more constraints on requested actions an item server may permit users to request actions without exposing the vulnerability for misuse or failure caused by unconstrained actions.

As further depicted in at a first time point the user selects an action to be performed. The action is executed by the presentation e.g. as code within a web page presented by a web browser executed by the computer that issue a series of requests to the mail server . However while the code is executing the web browser presents a modal dialog within the presentation thereby interfering with the continued operation of the web browser and or the presentation . For example at a second time point the presentation may include a modal window indicating the in progress status of the action and at a third time point the presentation may continue to present a modal window indicating the in progress status of the action . The interference with the operation of the computer by the user e.g. locking up the computer the web browser or the presentation may frustrated the user and may eventually prompt the user to terminate the presentation e.g. terminating the web browser or navigating away from the web page . However terminating the presentation may cause the action to be applied to only some messages of the mailbox thereby leaving the mailbox in an inconsistent state.

Presented herein are techniques for achieving the application of a long running action to the items of an item set stored by an item server without violating the constraint of the item server and without overly taxing the item server e.g. reducing the amount of computation performed on the item server that is involved in the action . According to these techniques a computer or other device operated by a user may receive a request to perform an action on the items of an item set stored by an item server. However the architecture of the computer or other device separates the process performing the action from a user interface presented to the user through which the action is requested. The process may perform the action by issuing to the item server a sequence of batches of requests where each batch applies the action to a subset of items that may be processed within the constraint of the item server. As a first example the item server may specify a batch size comprising a maximum number of items to which an action may be applied within the constraint and the process implementing these techniques may apportion the item set into batches of items of the batch size and may issue to the item server a sequence of requests that respectively request the application of the action to a batch of items. As a second example the embodiment may estimate a batch size of the number of items to which the action may be applied within the constraint of the item server and or may monitor the application of the action by the item server in order to adjust the batch size for future batches e.g. incrementally increasing the batch size if the action is applied faster than anticipated or decreasing the batch size if the action is applied more slowly than anticipated . Moreover the process may communicate with the user interface providing the presentation of the item set e.g. to report the progress of the application of the action to the items of the item set and the user interface may indicate the performance of the action while also continuing to serve the requests of the user . In this manner the techniques presented herein may facilitate the application of the action to the item set while conserving the resources and respecting the constraint of the item server and while also freeing the user interface on the device of the user from the performance of the action .

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to apply the techniques presented herein. Such computer readable media may include e.g. computer readable storage media involving a tangible device such as a memory semiconductor e.g. a semiconductor utilizing static random access memory SRAM dynamic random access memory DRAM and or synchronous dynamic random access memory SDRAM technologies a platter of a hard disk drive a flash memory device or a magnetic or optical disc such as a CD R DVD R or floppy disc encoding a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein. Such computer readable media may also include as a class of technologies that are distinct from computer readable storage media various types of communications media such as a signal that may be propagated through various physical phenomena e.g. an electromagnetic signal a sound wave signal or an optical signal and in various wired scenarios e.g. via an Ethernet or fiber optic cable and or wireless scenarios e.g. a wireless local area network WLAN such as WiFi a personal area network PAN such as Bluetooth or a cellular or radio network and which encodes a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein.

An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. In one such embodiment the processor executable instructions may be configured to implement a system for applying an action to items of an item set stored by a server having a constraint such as the exemplary system of . In another such embodiment the processor executable instructions may be configured to perform a method of applying an action to items of an item set stored by a server having a constraint such as the exemplary method of . Some embodiments of this computer readable medium may comprise a nontransitory computer readable storage medium e.g. a hard disk drive an optical disc or a flash memory device that is configured to store processor executable instructions configured in this manner. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary system of and the exemplary method of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be applied. As a first example these techniques may be applied to many types of items of many types of item sets stored by many types of item servers including messages stored in a mailbox on a mail server files stored in a file system on a file server and records stored in a database on a database system. As a second example of this first aspect these techniques may involve many types of actions that may be applied to such items and item sets . For example the actions may be selected from an action set including an item tagging action specifying at least one tag to be applied to at least one item of the item set an item selecting action configured to select at least one item of the item set e.g. for application of a second action an item sending action configured to send at least one item of the item set to the item server an item receiving action configured to receive at least one item of the item set from the item server an item updating action configured to update at least one item of the item set stored on the item server an item deleting action configured to delete at least one item of the item set from the item server and an item locating action configured to set a location of at least one item within the item set .

As a third example of this first aspect the techniques may be implemented on many types of devices within the range of architectures exhibited in the scenarios presented herein. As a first such example an embodiment of these techniques may be implemented on a user device such as a computer configured to execute a user interface process presenting a user interface to a user . In this example the action may comprise a request initiated by the user within the user interface and the embodiment may be configured to receive the request from the user interface process and optionally to communicate updates about the progress of the application of the action to the items of the item set to the user interface process for presentation within the user interface . As a second such example the embodiment may be implemented on a front end server that is configured to communicate with the item server e.g. a mail webserver configured to interoperate with a mail server to provide a web based interface to a mailbox of a user . In this example the action may comprise request initiated by a user upon a user device e.g. a computer including a smartphone and the device may be configured to receive the request from the user device. Those of ordinary skill in the art may devise many scenarios wherein the techniques presented herein may be advantageously implemented.

A second aspect that may vary among embodiments of these techniques relates to the selection of a batch size for selecting the batches of items . As a first example the batch size may be specified or suggested by the item server or may be specified by the user . As a second example the batch size may be estimated based on the item set the action and the constraint . For example if the constraint specifies a time e.g. ten milliseconds and the action specifies a command that the item server may apply to approximately one hundred items per millisecond an embodiment of these techniques may utilize a batch size of one thousand items per batch or a reduced number e.g. eight hundred in order to provide leeway in case an unexpected delay occurs. As a third example an embodiment of these techniques may specify the batch size in a flexible manner e.g. by detecting at least one performance factor from applications of the action to the items of respective batches by the item server e.g. an amount of time involved in executing a batch of a particular batch size and updating the batch size based on the at least one performance factor. Those of ordinary skill in the art may devise many ways of configuring an embodiment to select a batch size while implementing the techniques presented herein.

A third aspect that may vary among embodiments of these techniques relates to the order in which the items of the item set are organized into batches for application of the action . In some scenarios the order of the items may be fixed and an embodiment may be unable to order the items in any particular manner. For example the item server may permit the application of the action to the items only in batches of the predesignated order or the item server may retain control of the order in which the action is applied. In one such scenario the item server may only permit the embodiment to specify the ordinal number of the item of the item set from which application of the action is to commence. However in other scenarios an embodiment of these techniques may be able to reorder the items of the item set in a particular item order for the grouping of items into batches or may submit each request to process a batch arbitrarily specifying the items comprising the batch . In the latter scenarios an embodiment may be configured to request the items to fit into batches in several ways. For example the action may be applied to the items of an item set during a presentation of the item set to the user . The embodiment may therefore select items for batches in view of the items being presented to the user in the view of the presentation . As a first such example the items currently being presented in the presentation may be grouped into an earlier batch in order to demonstrate responsiveness of the application of the action to the item set . As a second such example the items currently being presented in the presentation may be grouped into a later batch in order to reduce the odds of disrupting the presentation by applying the action to currently viewed items e.g. by the time that the process applies the action to the batch of items the presentation may have been closed or may be presenting other items to which the action has already been applied . As a third such example the presentation may present the items in a particular view order such as a sort order requested by the user e.g. sorting the mailbox according to the senders dates or subjects of respective messages and the embodiment may request the batching of items according to the view order of the presentation . As a fourth example an embodiment may select batches of items on a just in time basis as the presentation changes e.g. upon receiving a request to present a particular subset of items the embodiment may prioritize the application of the action to a batch comprising the as yet unprocessed items of the subset and may endeavor to complete the action upon the batch before generating the presentation thereof. Those of ordinary skill in the art may devise many ways of selecting items for batches while implementing the techniques presented herein.

A fourth aspect that may vary among embodiments of these techniques relates to the application of the action to the batches of items of the item set . An action having one or more criteria e.g. a set of parameters that are to be matched against the items to which the action is to be applied may be applied to the items of the item set in many ways. A first set of examples of this fourth aspect relate to the manner of performing the identification of matching items and or processing of the action thereto in a batched manner. A few such examples are illustrated in each of .

As a second example of this fourth aspect an embodiment of these techniques may be configured to handle a failure reported by the item server in applying an action to one or more items of a batch . This failure may comprise e.g. an incorrect formulation or specification of the action an inability to process a particular item e.g. a request to apply an operation to an item that is exclusively locked by another process or a violation of a constraint while processing the batch . Upon receiving a failure response from the item server an embodiment of these techniques may respond in many ways. For example the embodiment may simply reissue the request to apply the action to the batch thereby requesting the item server to retry the batch . For example a time based constraint may have been violated due to a delay in the item server that may not recur during a second attempt. Alternatively the embodiment may remove the items prompting the failure report from the batch may retry the batch at a later time e.g. when an exclusive lock upon an item that prompted the failure report may have been released or may simply report the failure message to the user .

As a third example of this fourth aspect an embodiment of these techniques may detect a completion of the application of the action to the items of the item set in various ways. As one such example the item server may permit the embodiment to specify the ordinal number of the item of the item set from which application of the action is to commence e.g. indicating where in the item set the application of the action is to begin for a particular iteration and may respond with an applied item count that indicates the number of items of the item set to which the action was applied. Ordinarily the applied item count may represent the number of items in the batch e.g. the batch size but if the number of items in the batch beginning with the specified starting point is fewer than the batch size the applied item count reported by the item server may be smaller. Accordingly an embodiment of these techniques may upon receiving from the item server an item applied count indicating a number of items of the item set to which the item server has applied the action detect a completion of the application of the action to the item set upon receiving from the item server an applied item count that is less than the batch size .

As a fourth example of this fourth aspect an embodiment of these techniques may upon completing the application of an action to an item set create a rule applying the action to subsequently received items . For example upon completing the application of an action to a mailbox specifying that messages from a particular sender are to be moved to a particular folder the embodiment may request the item server to create a rule indicating that any messages subsequently received from the specified sender are to be moved to the specified folder. Those of ordinary skill in the art may identify many ways of performing the batched application of the action to the item set in accordance with the techniques presented herein.

A fifth aspect that may vary among embodiments of these techniques relates to the interaction of an embodiment with a user interface presented on display of a user device by a user interface process . As a first example where at least one item of the item set is presented to the user within the user interface an embodiment may upon applying an action to an item presented to the user within the user interface request the user interface process to update the user interface thereby reflecting the action applied to the item . As a second example of this fifth aspect an embodiment of these techniques may communicate the progress of the application of the action to the item set and the user interface may include a progress indicator of the progress in applying the action to the items of the item set as illustrated e.g. in the user interface presented in the exemplary scenario of . Alternatively or additionally upon detecting a completion of the application of the action to the item set an embodiment of these techniques may request the user interface process to update the user interface to indicate the completion of the action e.g. the archiving complete message in the user interface presented in the exemplary scenario of . Those of ordinary skill in the art may devise many ways of configuring an embodiment of these techniques to interact with a user interface process while implementing the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device Z accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device Z and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device Z.

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

