---

title: Virtual network interface objects
abstract: Methods and apparatus for interfaces to manage virtual network interface objects. A system may include resource instances and a network interface virtualization coordinator. Responsive to a record creation request, the coordinator creates an interface records that may include an IP address, subnet information and security properties. The coordinator may, in response to a request to attach the record to a resource instance, enable traffic directed to the IP address to flow to the resource instance. In response to a subsequent detach request, the traffic to the IP address may be disabled at the resource instance. The same interface record may be attached to another resource instance in response to another attach request, enabling traffic directed to the IP address to flow to the second resource instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09369403&OS=09369403&RS=09369403
owner: Amazon Technologies, Inc.
number: 09369403
owner_city: Reno
owner_country: US
publication_date: 20141017
---
This application is a continuation of U.S. patent application Ser. No. 13 339 985 filed Dec. 29 2011 now U.S. Pat. No. 8 868 710 which claims benefit of priority of U.S. Provisional Application Ser. No. 61 561 675 entitled VIRTUAL NETWORK INTERFACE OBJECTS filed Nov. 18 2011 the content of which is incorporated by reference herein in their entirety.

Many companies and other organizations operate computer networks that interconnect numerous computing systems to support their operations such as with the computing systems being co located e.g. as part of a local network or instead located in multiple distinct geographical locations e.g. connected via one or more private or public intermediate networks . For example data centers housing significant numbers of interconnected computing systems have become commonplace such as private data centers that are operated by and on behalf of a single organization and public data centers that are operated by entities as businesses to provide computing resources to customers. Some public data center operators provide network access power and secure installation facilities for hardware owned by various customers while other public data center operators provide full service facilities that also include hardware resources made available for use by their customers. However as the scale and scope of typical data centers has increased the tasks of provisioning administering and managing the physical computing resources have become increasingly complicated.

The advent of virtualization technologies for commodity hardware has provided benefits with respect to managing large scale computing resources for many customers with diverse needs allowing various computing resources to be efficiently and securely shared by multiple customers. For example virtualization technologies may allow a single physical computing machine to be shared among multiple users by providing each user with one or more virtual machines hosted by the single physical computing machine with each such virtual machine being a software simulation acting as a distinct logical computing system that provides users with the illusion that they are the sole operators and administrators of a given hardware computing resource while also providing application isolation and security among the various virtual machines. Furthermore some virtualization technologies are capable of providing virtual resources that span two or more physical resources such as a single virtual machine with multiple virtual processors that spans multiple distinct physical computing systems. As another example virtualization technologies may allow data storage hardware to be shared among multiple users by providing each user with a virtualized data store which may be distributed across multiple data storage devices with each such virtualized data store acting as a distinct logical data store that provides users with the illusion that they are the sole operators and administrators of the data storage resource.

Operators of data centers that provide different types of virtualized computing storage and or other services usually rely on standard networking protocols to receive customer requests and transmit responses to such requests using commodity network hardware such as various types of network interface cards NICs . Despite recent advances in virtualization technology many networking related properties of virtual servers are still typically managed at the level of individual physical network interface cards. As the complexity of the different types of dynamic networking configuration changes demanded by the customers of virtualized services grows network management at the physical NIC level may become more and more cumbersome.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various embodiments of methods and apparatus for managing virtual network interface objects are described. Networks set up by an entity such as a company or a public sector organization to provide one or more services accessible via the Internet such as various types of cloud based computing or storage to a distributed set of clients may be termed provider networks in this document. Such a provider network may include numerous data centers hosting various resource pools such as collections of physical and virtualized computer servers storage devices networking equipment and the like needed to implement and distribute the services offered by the provider.

For a number of different reasons for example to greatly enhance the flexibility with which different sets of resources may be accessed without having to resort to cumbersome security setting modifications reconfiguring and or physically moving network interface cards in some embodiments an operator of a provider network may set up a set of virtualization services for network interfaces. Such services may be enabled by a network interface virtualization coordinator which may also be referred to using the abbreviation NIVC in this document responsible for maintaining and implementing various operations on a set of interface records to manage networking operations required to access various resources of the provider network. In some embodiments different parts of the functionality of the NIVC may be incorporated within several different co operating software components and or devices such as modules of hypervisor or operating system software running on various hardware platforms of the provider network router software on edge devices and the like.

In one implementation the provider network may provide customers with numerous instances of virtualized compute resources and or storage resources each of which may require network addressability to allow the customers to interact with it. The NIVC in such an implementation may allow a customer to request that a modifiable and transferable interface record be created which includes various elements of networking configuration information such as for example security policies addressing and routing information that the customer wishes to set up and then associate and disassociate as desired with various resource instances over time. An interface record may in some embodiments include one or more Internet Protocol IP addresses and a subnet identifier for a subnet to which the IP address or addresses belong. In addition various security related settings may be included in the interface records identifying for example which entities or users are allowed to perform the attach and detach operations described in further detail below. The NIVC may create the requested interface record and in one embodiment store it in a persistent repository or database of interface records.

The customer may in some embodiments request that the NIVC attach the interface record to a resource instance such as a virtualized compute server or storage server thereby enabling the resource instance to receive incoming traffic directed at an IP address of the interface record and enabling outbound traffic from the resource instance to indicate that it originated at that IP address. The network traffic may flow over one or more physical network interface cards NICs that happen to be installed at a physical platform on which the virtualized resource instance may currently be instantiated but the properties of the interface record may be considered to be independent of any particular NIC or NICs and also independent of any particular resource instance. At a given point in time for example an interface record may or may not be associated with i.e. attached to a resource instance. During a period when it is not associated with any resource instance the interface record may exist in an inactive or quiescent mode within the NIVC s repository of interface records retaining its properties.

In response to a request to detach an interface record from a resource instance to which it currently is attached the NIVC may ensure that traffic directed to the IP address or addresses of the interface record no longer reaches the resource instance in some embodiments. The customer may also request that the NIVC now attach the interface record to a different resource instance such as a different virtualized compute server than the instance to which it was previously attached. This new attachment operation may then result in IP traffic targeted at the IP address es included within the interface record reaching the newly attached resource instance using whichever set of physical NICs is appropriate thus allowing the customer to easily transfer network configuration settings and associated security settings across resource instances without dealing with physical NICs directly. Various other operations such as modifications of IP addresses associated with a given interface record modifications of security settings billing related operations and the like may be supported by the virtual network interface coordinator in various embodiments.

In some embodiments resource instances may be transferable from one platform to another for example a virtual computing system may initially be brought up on one physical server and later moved to another physical server as desired. Furthermore multiple resource instances may be resident on one service platform for example resource instances B and C are shown resident on service platform B. The physical resources e.g. CPUs and network cards of a service platform B with multiple resident resource instances may be distributed using a variety of schemes in different embodiments. In one embodiment some of the resources may be allocated exclusively to the resource instances e.g. if the service platform B has four CPUs two CPUs may be allocated to resource instance B while the other two may be allocated to resource instance C. In another embodiment the physical resources may be shared using time slices for example all four CPUs may be usable by either resource instance with a scheduling mechanism set up to decide how CPU cycles within a given time slice are to be distributed among the instances depending on their computing demands. In the embodiment illustrated in each service platform has one or more physical network interface cards NICs service platform A has NIC A service platform B has NIC B and service platform C has NICs C and D. The network traffic flowing to and from a resource instance that happens to be resident on a given service platform flows through one or more of the NICs of the service platform. In some implementations a single resource instance may span multiple hardware service platforms in which case any of the NICs available on any of the multiple service platforms may be used. In one embodiment a resource instance may comprise a non virtualized server i.e. a resource instance may be implemented using a conventional operating system running on a bare hardware service platform instead of using hypervisor software.

System may include a network interface virtualization coordinator NIVC operable to provide a set of virtualization services for network interfaces in the illustrated embodiment. Clients may submit various types of requests including requests to create interface records to attach them to resource instances detach them modify them query them and so on each of these types of operations is described in further detail below. In response to a given request the NIVC may perform various operations that may affect interface records and resource instances on service platforms as indicated by the arrows labeled A B C and D. For example the NIVC may in response to create requests from clients generate interface records such as A and B that may each contain a set of networking related properties that can be associated and disassociated on demand with various resource instances . The interface records may be generated in a set of in memory data structures and may be stored in a repository in some implementations such as a database on persistent storage. An interface record for a network that used the TCP IP protocols may include for example one or more IP addresses one or more subnet identifiers of the subnets that contain the IP address or addresses and a set of security properties described in further detail below. In some implementations the interface record may also include one or more other fields such as various status fields source and destination address check settings billing related information an identification of a currently associated resource instance the Media Access Control MAC address of a physical network interface card currently associated with the interface record and the like. Interface records for networks employing network protocols other than TCP IP may include network address related information appropriate for the protocol used.

In some embodiments the NIVC may be configured to perform attach operations to dynamically associate interface records with resource instances and to thereby enable traffic to flow to and from the resource instances in accordance with the networking and security properties specified in the interface records . In response to an attachment request received from a client for example in one implementation the NIVC may perform some or all of the following operations a validate based on the security information stored in the specified interface record and or elsewhere that the client is authorized to request the attachment of the interface record with the specified resource instance b verify that the networking information IP address or addresses subnet identifier etc. of the interface record is appropriate for activation of network traffic to and from the specified resource instance e.g. the NIVC may check whether an IP address is already in use for another instance and therefore is unavailable c ensure that a physical NIC is operational and available for use by the resource instance at the service platform where the resource instance is currently resident d initiate or make the necessary configuration changes e.g. in hypervisor or operating system software running at the service platform and at the appropriate routers gateways and other network devices of the provider network to allow the specific resource instance to begin to send traffic from and receive traffic at the IP address or addresses specified in the interface record and e make changes to the interface record and or repository to reflect the attach operation performed. As part of the configuration changes new or modified routing information such as routing table entries may be propagated to a set of routers gateways and the like in some implementations. In one embodiment the NIVC may ensure that each resource instance has at least one interface record attached to it whenever the resource instance is activated or brought up.

The NIVC may also be operable to detach or disassociate an interface record from a resource instance to which it is currently attached in some embodiments. In response to a detachment request from a client the NIVC in such embodiments may prohibit further traffic directed to or from the IP address or addresses specified in the interface record from flowing to or from the resource instance. In order to do so the NIVC may perform some or all of the following operations a validate based on the security information stored in the specified interface record and or elsewhere that the client is authorized to request the detachment of the interface record from the specified resource instance b initiate or make the necessary configuration changes e.g. within hypervisor or operating system software running at the service platform and at the appropriate routers gateways and other network devices to prevent network traffic associated with the IP address es of the interface record from flowing to or from the specified resource instance and c make changes to the interface record and or repository to reflect the detach operation performed.

An interface record that was previously attached to a particular resource instance and then detached from that resource instance may later be attached to any desired resource instance either a different resource instance or the same resource instance to which it was previously attached by the NIVC at the request of a client in some embodiments. In such embodiments the same IP address may be used first during one attachment period to send and receive traffic at one resource instance A through a particular NIC A and then during a subsequent attachment period to send and receive traffic at a different resource instance B potentially through a different NIC B and or at a different service platform . In addition to allowing clients to map a given IP address to different resource instances at different times the NIVC may also allow the client to re use some or all of the security settings associated with an interface record thus substantially reducing the effort and complexity required for making networking configuration changes. In many embodiments multiple interface records may be attached to a single resource instance thus allowing multiple IP addresses to be used for the same resource instance. In some implementations a single interface record may be attached to multiple resource instances at the same time for example NIVC may be capable of distributing or load balancing traffic directed at a single IP address specified in an interface record across two or more resource instances . Using these capabilities of NIVCs a highly flexible mapping of IP addresses subnets and network security settings to resource instances may be implemented in various embodiments.

Any of several types of network addressing related fields may be included within an interface record in different embodiments. One or more private IP addresses may be specified for the interface record in some embodiments these IP addresses may be used internally for routing within the provider network and may not be directly accessible from outside the provider network. One or more public IP addresses may also be included in some embodiments these IP addresses may be visible outside the provider network e.g. to various routers of the public Internet or peer networks of the provider network. Various devices or components including for example components of NIVC may implement any desired network address translation technique or techniques to translate between public IP addresses and private IP addresses in various embodiments as needed. One or more subnet identifiers may be included within an interface record.

The term subnet as broadly used herein is a logically visible subdivision of a network. In the case of IP networks the set of logical or physical devices that belong to a subnet may be addressed with a common identical most significant bit group in their IP address. This results in the logical division of an IP address into two fields a network or routing prefix and the rest field. The rest field may serve as a specific identifier for the logical or physical device. The routing prefix may be expressed in Classless Inter Domain Routing CIDR notation which may be written as the first address of a network followed by the bit length of the prefix separated by a slash character. For example 10.1.1.0 24 is the prefix of an Internet Protocol Version 4 network starting at the address 10.1.1.0 having 24 bits allocated for the network prefix and the remaining 8 bits reserved for device identification. In IPv4 the routing prefix may also specified in the form of the subnet mask which is expressed in quad dotted decimal representation like an address. For example 255.255.255.0 is the network mask for the 10.1.1.0 24 prefix. Slightly different notation may be used for IP Version 6 networks and for networks that use protocols other than the TCP IP suite. Subnets may be used in general for a variety of reasons for example to provide logical isolation between different sets of network addressable devices to arrange the resources of a logical partition such as a virtual private cloud into hierarchies for easier administration and so on. A subnet identifier included within an interface record may comprise in some implementations a string that may in turn include or encode the CIDR representation for the subnet e.g. subnet df543fda 10.1.1.0 24 . In one embodiment an identification of a Domain Name Server DNS may be included in the interface record as well.

In some embodiments the interface record may include security related properties . Some provider networks may allow users to specify rules including for example firewall related rules for the types of incoming and or outgoing traffic allowed at resource instances to which an interface record may be attached such rules may be termed security groups and identified via security group s fields . Various port and protocol restrictions may be enforced using such rules and multiple rules may be associated with each interface record. For example a user may use security groups to ensure that only HTTP and HTTPs outgoing or incoming traffic is allowed to limit the set of TCP or UDP User Datagram Protocol ports to which traffic is permitted to filter incoming and outgoing traffic according to various policies and so on. In some implementations an attacher list may be specified indicating which users or entities are allowed to request attachments of the interface record to resource instances . In some cases a separate detacher list may be used to specify which entities can detach the interface record while in other cases a single list such as attacher list may be used to identify authorized attachers and detachers. The set of users or entities that are allowed to set or modify IP addresses e.g. public IP addresses and or private IP addresses of the interface record may be provided in IP address setter list and the set of users or entities that own or can modify various other fields of the interface record may be specified in owner modifier field in some embodiments. For example an owner modifier identified in field may be permitted to change the attacher list or the IP address setter list in some implementations thus changing the set of entities permitted to attach or detach the interface record or modify its IP address es . While the term list has been used for fields and logical data structures other than lists such as arrays hash tables sets and the like may be used to represent the groups of entities given various security privileges roles and or capabilities in various embodiments.

In some embodiments users may be allowed to terminate resource instances . For example a client may set up virtual compute server resource instances attach interface records to the instances run a desired set of computations on the instances and then issue a request to terminate the instances when the desired computations are complete thus indicating that the resource instances are no longer required . In such embodiments a DeleteOnTerminate setting may be used to specify what happens to attached interface records when a resource instance is terminated. If DeleteOnTerminate is set to true for an interface record attached to the resource instance being terminated the NIVC may delete the interface record e.g. the record may be removed from repository . If DeleteOnTerminate is set to false the NIVC may retain the interface record so that for example it may be attached again to some other resource instance. In one embodiment when an interface record is attached to a resource instance an attachment record separate from the interface record may be created to represent that relationship and the DeleteOnTerminate property may be associated with the attachment record instead of or in addition to being associated with the interface record. In such an embodiment the interface record may include a reference or pointer to the attachment record or records for each of the attachments in which the interface record is currently involved and different values of DeleteOnTerminate may be set for each attachment record. In such an environment an instance record that happens to be unattached to any resource instances may not have a DeleteOnTerminate property associated with it as long as it remains unattached. By persisting interface records independently of resource instances in this way the overhead of setting up various security related and other properties each time a new instance is activated may be reduced for clients .

In one embodiment the interface record may contain routing related information such as an indication of whether a source and or destination check is to be performed for network packets transmitted to a resource instance to which the interface record is attached. If the source destination check setting is set to false or off routing decisions may be made based on a packet s source and destination IP addresses e.g. the packet may be forwarded from one subnet to another and if the setting is true or on the resource instance may not perform routing in some embodiments. Thus the source destination field may be used in some embodiments to control whether a resource instance to which the interface record is attached performs routing or gateway functions on packets for which it is not the final destination or whether it ignores such packets. Other types of routing related information such as routing table entries may also or instead be included in interface records in other embodiments. Billing related information may be included in some implementations identifying for example the entity or user to be billed for network traffic associated with the interface record . In some implementations customers may be billed at least partially based on the number of instance records they create independently of how many of the instance records are attached to resource instances in other implementations billing may include both recurring charges e.g. based on the number of instance records and or the number of instance records attached and non recurring charges e.g. based on traffic flow measurements .

The interface status field may be used to indicate a current state of the interface record e.g. whether the interface record is available disabled or in repair . Similarly the attachment status field may be used to indicate whether the interface record is currently attached detached or in the process of being attached or detached in some embodiments. In one implementation as described above a record of an attachment separate from interface record may be created at the time the corresponding attachment operation is performed and an identifier or identifiers of the current attachments of the interface record may be stored in attachment id field . Identifiers of the resource instance or instances to which the interface record is currently attached may be stored in attached to instance field and the user or entity that requested the attachment may be identified via attachment owner field in some embodiments. In one embodiment a list of identifiers of the NIC or NICs currently usable for traffic directed to from the IP addresses of interface record may be maintained e.g. in the form of a MAC address es field . In some implementations monitoring information such as statistics about the amount of traffic flowing to or from the IP addresses of the interface record may also be retained with the interface record. Other fields not shown in may be included in interface records in various embodiments. In some embodiments clients may associate tags such as a virtual local area network VLAN tag formatted in accordance with a VLAN standard such as the 802.1Q standard with interface records to implement network isolation. In such embodiments such a tag may also be stored in or referenced from the interface record .

In one embodiment some of the fields shown in may be replaced by references or pointers to other objects. For example security information for an interface record may be stored in a separate security object and the interface record may store a reference to the security object. Similarly each attachment of a resource instance to an interface record may be represented by an attachment object and the interface record may point or refer to the appropriate attachment object in some implementations.

Interface records may be attached to resource instances at many different stages of a resource instance s lifecycle in one embodiment. For example a resource instance may be in a running state subsequent to booting and may already be servicing requests received at an IP address of another interface record to which it is already attached when a particular interface record is attached to it. In some embodiments NIVC may permit interface records to be attached to a resource instance even if the resource instance is not currently up or running for example when the resource instance is stopped or suspended or is in the process of being activated. In such a case for example a network interface record may be attached to the resource instance before the resource instance is activated or booted and even before the service platform on which it is to be brought up is selected. If insufficient information is available at the time the attachment operation is requested for example if the MAC address of the NIC or NICs to be used are not yet known NIVC may leave some of the fields of the interface record A blank or null until the values do become available. In some embodiments NIVC may generate and or store records or data structures for each attachment e.g. an object with an associated attachment identifier may be stored in repository or some other database identifying the resource instance A the interface record A and other information pertaining to the attachment such as the time at which the attachment operation was initiated or completed. In some embodiments a given client may have a set or pool of interface records available for use for the client s resource instances and the client may simply request that NIVC choose an available interface record from the pool of interface records to attach to a specified resource instance .

The IP addresses used for the resource instance attached to the interface record may be modifiable in some embodiments after the attachment operation is completed. For example if a user or entity identified as being authorized to change an IP address such as a public IP address or a private IP address sends an IP address modification request to NIVC the NIVC may make the necessary configuration changes needed to make the requested change effective. For example on receiving the IP address modification request for an interface record the NIVC may first determine which resource instances if any are currently attached to the interface record and then enable traffic directed at the changed IP address to reach those resource instance s and make the needed changes in the interface record itself. In one embodiment one or more of the IP addresses associated with the interface record such as either a public IP address or a private IP address may be selected by NIVC on behalf of the client from a set of IP addresses allocated for the client.

In some embodiments a detachment request may not explicitly identify the interface record A that is to be detached instead the requesting client may simply indicate that any attached interface records A should be detached from the specified resource instance . In such a case NIVC may be operable to first discover e.g. by looking up the information in repository which interface records should be detached from the resource instance specified and then initiate the detachment operations. Such a request to detach all attached interface records may for example be generated when a resource instance is being shut down disabled terminated or discarded. In some implementations if the DeleteOnTerminate field is set to true for an interface record and an attached resource instance is being terminated the interface record itself may be deleted from repository otherwise if DeleteOnTerminate is set to false the interface record may be retained in the repository together with its properties for possible reuse later. As noted above in some embodiments the DeleteOnTerminate property may be associated with attachment records to which the interface record may refer instead of being associated with the interface records themselves. In some implementations a detachment request may not necessarily indicate a resource instance A and may only indicate that the specified interface record A should be detached from whichever resource instance if any to which it happens to be attached.

In some embodiments NIVC may allow multiple interface records to be attached to the same resource instance . is an illustration of one such embodiment where a second interface record B is attached to a resource instance C that already has an interface record A attached to it. In response to attachment request NIVC may perform operations analogous to those described for the attachment request of such that network traffic to and from resource instance C eventually flows in accordance with the properties of both interface records A and B. The operations performed by NIVC in response to the attachment request are indicated in by the arrow labeled and the additional attachment indicator . In the example illustrated in a single NIC B is used to handle the traffic for both attached interface records A and B. In some embodiments the mapping between interface records and physical NICs may be flexible that is traffic flowing through a given NIC may correspond to any number of interface records and traffic for a given interface record may flow through multiple physical NICs .

In some implementations resource instances may be transferable across service platforms while retaining their attached interface records and at least some of the corresponding networking related properties. illustrates an operation in which a resource instance A with an attached interface record A as shown previously in is moved from one service platform A to resource instance C according to at least some embodiments. In a client sends a move instance request to an instance manager of system indicating that the resource instance A that was so far resident on service platform A should now be made resident on service platform C. The notation as in A C for request indicates that the request is a move request. On receiving the request instance manager together with NIVC may perform the tasks needed to implement the requested move. For example the move request may be validated to ensure that the requester has the right permissions the resource instance A may then be suspended or brought into a state in which incoming requests are temporarily queued. The resource instance A may then be brought up or enabled on the service platform C and configuration changes needed to make traffic directed at the IP address es of the attached interface A flow through an appropriate NIC or NICs at the service platform C may then be initiated. In the example shown in traffic to and from the resource instance A is routed through NIC C after the instance has moved the MAC address field of the interface record A may be modified to reflect this in some embodiments . In this way the networking properties of a resource instance i.e. the networking properties of its attached interface records may be made substantially independent of the actual networking hardware used. Although a separate instance manager is shown in the functions of moving resource instances may be managed together with the interface virtualization functions in some embodiments i.e. the same software and or hardware entities may support resource instance administration operations and interface record management operations as well.

The ability to dynamically attach and detach one or more interface records with specified IP addresses and subnets to resource instances enabled by the functionality described above allows customers to easily set up several different useful types of network configurations. provide illustrations of a number of such example network configurations achievable according to some embodiments.

The networking configurations illustrated in show three different organizational or hierarchical levels for a provider network that may contain resource instances the logical partition level the subnet level and the interface record level. The operator of such a provider network may allow a given customer such as a business or organization that wishes to utilize virtual computing and or virtual storage services supported by the provider network to set up one or more logical partitions dedicated for use by that customer. A logical partition may for example comprise a relatively large set of service platforms and a relatively large number of IP addresses that may be usable for various resource instances that may be brought up on those service platforms as needed by the customer and the customer may be provided network administration capabilities for that set of resources. In some embodiments for example the set of IP addresses of a logical partition may be specified in CIDR notation as a 16 block such as 10.1.0.0 16 which indicates that up to 65 536 IP addresses may be usable for that logical partition. Logical partitions may be termed virtual private clouds in some embodiments. A logical partition may have one or more gateways set up for it in some implementations such as Internet gateways or virtual private network VPN gateways. In addition in some implementations a default DNS server may be set up for each logical partition and one or more subnets and routing table entries may also be set up when the logical partition is set up. For example in one implementation when a customer requests that a logical partition with a 16 block be set up the customer may be required to specify the CIDR specification for at least one 24 subnet that is to be set up within the logical partition as well. A 24 subnet e.g. 10.1.1.0 24 includes 256 IP addresses. The customer on whose behalf the logical partition is set up may be allowed to perform a wide variety of network administration tasks as desired in some embodiments such as setting up subnets of various sizes and creating attaching and detaching interface records as needed. Different logical partitions and subnets may be set up to achieve various levels of logical isolation for example a customer may wish to isolate software development build related network traffic from corporate e mail network traffic and may set up an appropriate hierarchy of logical partitions and subnets to do so. In one embodiment the CIDR specifications may refer to private IP addresses for interface records stored for example in fields shown in while public IP addresses stored in fields may be selected in accordance with other policies. Identifiers for subnets field of and logical partitions field may be stored within the interface records in some embodiments. In some embodiments some or all of the addressing information logical partition identifier subnet identifier private and or public IP addresses of an interface record may be dynamically modifiable after the creation of the interface record .

Configurations similar to that shown in may also be used to dynamically and efficiently move a resource instance from one subnet to another in some embodiments. For example a customer may have set up an application server instance on a resource instance A attached to interface record A within a subnet A dedicated to a software development environment and deployed an updated version of an application on the application server instance. If the customer desires to start quality assurance QA testing on the updated version and the QA test environment is in a subnet B isolated from the development subnet A the following steps may be taken. First a second interface record C from subnet B may be attached to the resource instance A. Then the interface record A may be detached from the resource instance A thus enabling the testing to be done in the desired QA subnet alone without having to deploy the updated version of the application on a different resource instance. Similarly applications may be moved easily through other development lifecycle stage transitions such as from a QA environment to a production environment and so on.

In one environment a customer may wish to isolate a set of front end web servers or other resources accessible from external networks i.e. devices outside the provider network containing resource instances from a set of back end servers such as database servers that may store sensitive data such that direct network access to the back end servers from external networks is to be prevented. In such a case the resource instance A of may use subnet A for front end traffic and subnet B for back end traffic in some embodiments. Thus requests for web services may be received via subnet A at a web server running on resource instance A and the corresponding back end requests needed to fulfill those requests may be sent to the back end servers in subnet B. Responses from the back end servers may be received from subnet B and transmitted back to the requesters via subnet A.

In some implementations an instance that is attached to multiple interface records in different subnets may also be used as a router. For example if a packet received at the resource instance has a source IP address reachable from the resource instance through one subnet and a destination IP address reachable through another subnet and the appropriate configuration settings needed are set e.g. if routing table entries are set up appropriately the instance may route the packet to the destination address via the second subnet.

Of course some of the other capabilities supported by NIVC discussed in use cases 1 and 2 above may also be extended across logical partition boundaries using the type of configuration illustrated in . For example multiple IP addresses may be provided for a given resource instance in two different CIDR 16 address ranges resource instances may be moved across logical partitions and so on in various embodiments. A resource instance A may also provide proxy services across logical partitions or be used to implement a management network that is in a separate logical partition from a data network in some embodiments.

NIVC may be able to provide a number of bridging services across logical partitions set up for different customers in some embodiments. illustrates a configuration in which two interface records A and E from different logical partitions A and B set up for respective customers partition A for Customer A and partition B for Customer B are associated with a single resource instance A according to one embodiment.

The functionality illustrated in may enable a number of different collaborative scenarios. In one example Customer A and Customer B may be collaborating on a project. Customer A may have deployed a content server application on a resource instance A in their logical partition A. Customer B may wish to access that content server application but neither company may want to expose this server to the public Internet. Instead Customer B may create an interface record E in their own logical partition B and set permissions on that interface record E allowing Customer A to attach to it. Customer A may attach interface record E to the resource instance A running the content server in Customer A s logical partition A. Thus both customers may securely access the content server without having to make extensive changes. In addition Customer A may using the security properties of interface record E ensure that only HTTP and HTTPS ports are available to Customer B in some implementations or may limit access from Customer B s logical partition in other ways as desired.

In a second scenario where peering between customers may be enabled Customers A and B may be collaborating on a number of projects and may like to have private access to each other s logical partitions. Customer A may launch a gateway application such as a firewall or router on resource instance A and Customer B may create an interface record E in one such embodiment. The gateway application owner Customer A may attach the interface record E to the resource instance A so that both logical partitions are connected via the dual homed resource instance A running the gateway application. This scenario may place some constraints on the IP address ranges of the two customers logical partitions e.g. if they have overlapping IP addresses some form of network address translation may be required in some implementations. In some environments the resource instance A may be hosted on a dedicated networking appliance e.g. a router appliance or a firewall appliance .

Cross partition attachment capabilities may also be used for providing technical support capabilities in some embodiments. In one such scenario Customer A may be using an application from Vendor X at resource instance A where Vendor X is also a customer of the operator of system . Customer A may have encountered a problem with the application and may like to receive hands on support from Vendor X. Customer A may contact Vendor X and Vendor X may create an interface record E in their own logical partition and give Customer A permission to attach. Customer A may attach their resource instance A to Vendor X s interface record E so that for example Vendor X may use a secure shell SSH or the remote desktop protocol RDP to access the troubled application and perform troubleshooting as needed. Such support may be supported without using an Internet gateway or virtual private network gateway to access Customer A s logical partition. Furthermore Customer A may in some embodiments modify the egress policy e.g. using security properties of interface record E to prevent any traffic from being transmitted from the resource instance A to Vendor X s logical partition B. This may prevents Vendor X from inadvertently or maliciously accessing other resources in Customer A s logical partition A.

Managed service providers MSPs may also be able to take advantage of the cross partition attach capabilities in some embodiments. An MSP Customer A may host applications in its own logical partition e.g. A and attach to interface records in their customers logical partitions e.g. partition B of MSP Customer B thus providing the MSP customers with endpoints in their own partitions to access the MSP application. The MSP may maintain control of the resource instances e.g. A where their applications run while the MSP customers may be able to access the MSP applications via IP addresses in the MSP customers network space. MSP applications may include any of a variety of different types of services such as customer relationship management CRM content management collaboration databases and the like.

In addition to the examples illustrated in the capabilities of NIVC may also enable other types of services in various embodiments. For example when and if a first resource instance attached to an interface record fails or has an outage a form of high availability HA may be implemented by attaching the interface record to a second resource instance capable of providing similar services as the first resource instance. In embodiments where system supports a variety of services such as a relational database service map reduce or other distributed or parallel computing services deployment services or load balancing services a resource instance that attaches to multiple customer logical partitions may be used to implement administration and control services for the various services. Such administration services may be referred to as control plane capabilities as distinguished from data planes capabilities used for transmitting non administrative application data or user data.

In some embodiments NIVC may be operable to implement one or more interfaces that define and support some or all of the interface record related services described above. For example one or more application programming interfaces APIs may be implemented or various types of graphical user interfaces GUIs or command line interfaces may be provided in various implementations. is an illustration of a portion of an exemplary web based interface that may be provided by NIVC according to at least some embodiments.

Web page of includes several form fields that a client may fill out to provide details of an interface record creation request. In area of web page a friendly greeting and overview message may be provided. Form field may allow the client to specify a name and a description for the interface record. In embodiments where logical partitions are implemented a form field may be provided to allow the client to specify a logical partition for the requested interface record . In some implementations a set of identifiers of the logical partitions from which the client is authorized to select one may be made available automatically e.g. via a drop down menu and or field may be pre populated with a default logical partition identifier that the client may modify. Form field may be used to specify a subnet identifier for the interface record. One or more IP addresses including private and or public IP addresses may be specified using form field . Form field may be available for specifying various security properties such as security groups lists of entities allowed to attach the interface record and the like. Field may be optionally used to identify a resource instance to which the interface record is to be attached. As in the case of field several of the other fields on web page may also be pre populated with default values in some implementations and or a selection of allowed choices may be provided via a drop down menu or a similar mechanism. Submit button may be used to submit the interface record creation request.

NIVC may in one implementation generate values for some or all fields that may be left unfilled by the requesting client . In some implementations employing a web based interface several different web pages may be employed during the process of creating an interface record. As the client fills out one form entry the NIVC may be able to customize or narrow the set of options available for subsequent form entries. In some implementations the submission of form data via an interface like web page may result in an invocation of one or more API calls that may be supported by NIVC .

Interfaces similar to that illustrated in for creating an interface record may also be provided for the other types of operations supported by NIVC in various embodiments such as attachment operations detachment operations delete operations IP address change operations and the like. In some embodiments clients may be allowed to submit queries to for example determine the status of interface records identify the interface records attached to a given resource instance list all the interface records set up by the client in a given subnet or logical partition and so on.

Depending on the specific type of request received the appropriate set of actions may be taken in response. For example if a request to create a new interface record is received element of such a record may be instantiated and optionally stored in a repository element . If a request to attach an existing interface record is received element traffic flow directed to or from the IP address or addresses specified for the interface record may be enabled at the resource instance to which the attachment is requested element . If a detach request is received element traffic to and from the IP address es of the interface record may be disabled element at the resource instance to which the interface record was attached. If a request to delete an interface record is received element the record may be deleted e.g. from repository element .

On receiving a request to modify an interface record e.g. to change an IP address element the record may be modified as requested and any needed configuration changes may be initiated element . On receiving an interface record query e.g. to determine the status of an interface record or records element the response to the query may be generated and provided element . In each case the appropriate authorization and security checks may be performed prior to performing the requested action or actions. In some implementations some types of interface record operations may be implemented as idempotent operations e.g. if a first request to change an IP address to A.B.C.D is received followed by a second request that requests the same change the second request may have no effect. If an unexpected unsupported unauthorized or otherwise invalid request is received an error message may be generated in some implementations. After responding to a given request the service may then wait for the next interface virtualization request. In some implementations portions of the functionality shown in may be implemented in parallel e.g. more than one request may be handled at one time. In some implementations several requests may be combined e.g. a single request to both create and attach an instance record may be supported.

In at least some embodiments a server that implements a portion or all of one or more of the technologies described herein including the techniques to provide various services and operations related to interface records may include a general purpose computer system that includes or is configured to access one or more computer accessible media such as computer system illustrated in . In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface .

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above are shown stored within system memory as code and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network or networks such as other computer systems or devices as illustrated in for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet network for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for for implementing embodiments of methods and apparatus for virtual network interface records. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computer system via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of computer system as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface . Portions or all of multiple computer systems such as that illustrated in may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality.

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc as well as transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent exemplary embodiments of methods. The methods may be implemented in software hardware or a combination thereof. The order of method may be changed and various elements may be added reordered combined omitted modified etc.

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

