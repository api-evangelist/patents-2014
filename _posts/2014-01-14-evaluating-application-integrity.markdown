---

title: Evaluating application integrity
abstract: Methods, systems, computer-readable media, and apparatuses for evaluating application integrity are presented. In one or more embodiments, an application store, which may be provided by one or more computing devices, may analyze one or more aspects of an application. Subsequently, the application store may determine, based on the one or more analyzed aspects of the application, an integrity score for the application. Based on the integrity score, the application store may determine whether to publish the application in the application store. In response to determining to publish the application in the application store, the application store then may publish the application in the application store. Alternatively, in response to determining not to publish the application in the application store, the application store may generate a notification indicating that the application has an insufficient integrity score.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223970&OS=09223970&RS=09223970
owner: Citrix Systems, Inc.
number: 09223970
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20140114
---
Aspects of the disclosure relate to computer hardware and software. In particular one or more aspects of the disclosure generally relate to computer hardware and software for evaluating application integrity.

Increasingly corporations and other organizations are providing their employees and other associates with and or otherwise enabling their employees and other associates to use mobile devices such as smart phones tablet computers and other mobile computing devices. As these devices continue to grow in popularity and provide an increasing number of functions many organizations may wish to ensure that the software applications that can be downloaded to and or executed on such devices are safe and secure both for the protection of the device users and for the protection of the organization itself and its own computer systems and networks.

Various aspects of the disclosure provide efficient effective functional and convenient ways of ensuring the safety and or security of software applications that may be downloaded to and or executed on mobile computing devices.

For example in one or more embodiments discussed in greater detail below the integrity of one or more applications that may be submitted to included in provided via and or otherwise associated with an application store may be evaluated and or used in a number of different ways to provide one or more of these and or other advantages. In some instances the application store may be an enterprise application store that is provided by an organization to enable its employees and other affiliates to access obtain download and or run applications on their mobile devices and the application store may be configured to determine an integrity score for each application associated with the application store and subsequently use the integrity score in determining whether each application should be published in the application store.

In particular in some embodiments an application store which may be provided by one or more computing devices may analyze one or more aspects of an application. Subsequently the application store may determine based on the one or more analyzed aspects of the application an integrity score for the application. Based on the integrity score the application store may determine whether to publish the application in the application store. In response to determining to publish the application in the application store the application store then may publish the application in the application store. Alternatively in response to determining not to publish the application in the application store the application store may generate a notification indicating that the application has an insufficient integrity score.

In the following description of the various embodiments reference is made to the accompanying drawings identified above which form a part hereof and in which is shown by way of illustration various embodiments in which various aspects of the disclosure may be practiced. Other embodiments may be utilized and structural and functional modifications may be made without departing from the scope discussed herein. Various aspects are capable of other embodiments and of being practiced or being carried out in various different ways. In addition the phraseology and terminology used herein are for the purpose of description and should not be regarded as limiting. Rather the phrases and terms used herein are to be given their broadest interpretation and meaning. The use of including and comprising and variations thereof is meant to encompass the items listed thereafter and equivalents thereof as well as additional items and equivalents thereof.

As noted above certain embodiments are discussed herein that relate to evaluating application integrity. Before discussing these concepts in greater detail however several examples of computing architecture and enterprise mobility management architecture that may be used in implementing and or otherwise providing various aspects of the disclosure will first be discussed with respect to .

Computer software hardware and networks may be utilized in a variety of different system environments including standalone networked remote access aka remote desktop virtualized and or cloud based environments among others. illustrates one example of a system architecture and data processing device that may be used to implement one or more illustrative aspects described herein in a standalone and or networked environment. Various network nodes and may be interconnected via a wide area network WAN such as the Internet. Other networks may also or alternatively be used including private intranets corporate networks local area networks LANs metropolitan area networks MAN wireless networks personal networks PAN and the like. Network is for illustration purposes and may be replaced with fewer or additional computer networks. A LAN may have one or more of any known LAN topology and may use one or more of a variety of different protocols such as Ethernet. Devices and other devices not shown may be connected to one or more of the networks via twisted pair wires coaxial cable fiber optics radio waves or other communication media.

The term network as used herein and depicted in the drawings refers not only to systems in which remote storage devices are coupled together via one or more communication paths but also to stand alone devices that may be coupled from time to time to such systems that have storage capability. Consequently the term network includes not only a physical network but also a content network which is comprised of the data attributable to a single entity which resides across all physical networks.

The components may include data server web server and client computers . Data server provides overall access control and administration of databases and control software for performing one or more illustrative aspects describe herein. Data server may be connected to web server through which users interact with and obtain data as requested. Alternatively data server may act as a web server itself and be directly connected to the Internet. Data server may be connected to web server through the network e.g. the Internet via direct or indirect connection or via some other network. Users may interact with the data server using remote computers e.g. using a web browser to connect to the data server via one or more externally exposed web sites hosted by web server . Client computers may be used in concert with data server to access data stored therein or may be used for other purposes. For example from client device a user may access web server using an Internet browser as is known in the art or by executing a software application that communicates with web server and or data server over a computer network such as the Internet .

Servers and applications may be combined on the same physical machines and retain separate virtual or logical addresses or may reside on separate physical machines. illustrates just one example of a network architecture that may be used and those of skill in the art will appreciate that the specific network architecture and data processing devices used may vary and are secondary to the functionality that they provide as further described herein. For example services provided by web server and data server may be combined on a single server.

Each component may be any type of known computer server or data processing device. Data server e.g. may include a processor controlling overall operation of the rate server . Data server may further include RAM ROM network interface input output interfaces e.g. keyboard mouse display printer etc. and memory . I O may include a variety of interface units and drives for reading writing displaying and or printing data or files. Memory may further store operating system software for controlling overall operation of the data processing device control logic for instructing data server to perform aspects described herein and other application software providing secondary support and or other functionality which may or may not be used in conjunction with aspects described herein. The control logic may also be referred to herein as the data server software . Functionality of the data server software may refer to operations or decisions made automatically based on rules coded into the control logic made manually by a user providing input into the system and or a combination of automatic processing based on user input e.g. queries data updates etc. .

Memory may also store data used in performance of one or more aspects described herein including a first database and a second database . In some embodiments the first database may include the second database e.g. as a separate table report etc. . That is the information can be stored in a single database or separated into different logical virtual or physical databases depending on system design. Devices may have similar or different architecture as described with respect to device . Those of skill in the art will appreciate that the functionality of data processing device or device as described herein may be spread across multiple data processing devices for example to distribute processing load across multiple computers to segregate transactions based on geographic location user access level quality of service QoS etc.

One or more aspects may be embodied in computer usable or readable data and or computer executable instructions such as in one or more program modules executed by one or more computers or other devices as described herein. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types when executed by a processor in a computer or other device. The modules may be written in a source code programming language that is subsequently compiled for execution or may be written in a scripting language such as but not limited to Javascript or ActionScript. The computer executable instructions may be stored on a computer readable medium such as a nonvolatile storage device. Any suitable computer readable storage media may be utilized including hard disks CD ROMs optical storage devices magnetic storage devices and or any combination thereof. In addition various transmission non storage media representing data or events as described herein may be transferred between a source and a destination in the form of electromagnetic waves traveling through signal conducting media such as metal wires optical fibers and or wireless transmission media e.g. air and or space . Various aspects described herein may be embodied as a method a data processing system or a computer program product. Therefore various functionalities may be embodied in whole or in part in software firmware and or hardware or hardware equivalents such as integrated circuits field programmable gate arrays FPGA and the like. Particular data structures may be used to more effectively implement one or more aspects described herein and such data structures are contemplated within the scope of computer executable instructions and computer usable data described herein.

With further reference to one or more aspects described herein may be implemented in a remote access environment. depicts an example system architecture including a generic computing device in an illustrative computing environment that may be used according to one or more illustrative aspects described herein. Generic computing device may be used as a server in a single server or multi server desktop virtualization system e.g. a remote access or cloud system configured to provide virtual machines for client access devices. The generic computing device may have a processor for controlling overall operation of the server and its associated components including random access memory RAM read only memory ROM input output I O module and memory .

I O module may include a mouse keypad touch screen scanner optical reader and or stylus or other input device s through which a user of generic computing device may provide input and may also include one or more of a speaker for providing audio output and a video display device for providing textual audiovisual and or graphical output. Software may be stored within memory and or other storage to provide instructions to processor for configuring generic computing device into a special purpose computing device in order to perform various functions as described herein. For example memory may store software used by the computing device such as an operating system application programs and an associated database .

Computing device may operate in a networked environment supporting connections to one or more remote computers such as terminals also referred to as client devices . The terminals may be personal computers mobile devices laptop computers tablets or servers that include many or all of the elements described above with respect to the generic computing device or . The network connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. When used in a LAN networking environment computing device may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment computing device may include a modem or other wide area network interface for establishing communications over the WAN such as computer network e.g. the Internet . It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers may be used. Computing device and or terminals may also be mobile terminals e.g. mobile phones smartphones PDAs notebooks etc. including various other components such as a battery speaker and antennas not shown .

Aspects described herein may also be operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of other computing systems environments and or configurations that may be suitable for use with aspects described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

As shown in one or more client devices may be in communication with one or more servers generally referred to herein as server s . In one embodiment the computing environment may include a network appliance installed between the server s and client machine s . The network appliance may manage client server connections and in some cases can load balance client connections amongst a plurality of backend servers .

The client machine s may in some embodiments be referred to as a single client machine or a single group of client machines while server s may be referred to as a single server or a single group of servers . In one embodiment a single client machine communicates with more than one server while in another embodiment a single server communicates with more than one client machine . In yet another embodiment a single client machine communicates with a single server .

A client machine can in some embodiments be referenced by any one of the following non exhaustive terms client machine s client s client computer s client device s client computing device s local machine remote machine client node s endpoint s or endpoint node s . The server in some embodiments may be referenced by any one of the following non exhaustive terms server s local machine remote machine server farm s or host computing device s .

In one embodiment the client machine may be a virtual machine. The virtual machine may be any virtual machine while in some embodiments the virtual machine may be any virtual machine managed by a Type 1 or Type 2 hypervisor for example a hypervisor developed by Citrix Systems IBM VMware or any other hypervisor. In some aspects the virtual machine may be managed by a hypervisor while in aspects the virtual machine may be managed by a hypervisor executing on a server or a hypervisor executing on a client .

Some embodiments include a client device that displays application output generated by an application remotely executing on a server or other remotely located machine. In these embodiments the client device may execute a virtual machine client agent program or application to display the output in an application window a browser or other output window. In one example the application is a desktop while in other examples the application is an application that generates or presents a desktop. A desktop may include a graphical shell providing a user interface for an instance of an operating system in which local and or remote applications can be integrated. Applications as used herein are programs that execute after an instance of an operating system and optionally also the desktop has been loaded.

The server in some embodiments uses a remote presentation protocol or other program to send data to a thin client or remote display application executing on the client to present display output generated by an application executing on the server . The thin client or remote display protocol can be any one of the following non exhaustive list of protocols the Independent Computing Architecture ICA protocol developed by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash.

A remote computing environment may include more than one server such that the servers are logically grouped together into a server farm for example in a cloud computing environment. The server farm may include servers that are geographically dispersed while and logically grouped together or servers that are located proximate to each other while logically grouped together. Geographically dispersed servers within a server farm can in some embodiments communicate using a WAN wide MAN metropolitan or LAN local where different geographic regions can be characterized as different continents different regions of a continent different countries different states different cities different campuses different rooms or any combination of the preceding geographical locations. In some embodiments the server farm may be administered as a single entity while in other embodiments the server farm can include multiple server farms.

In some embodiments a server farm may include servers that execute a substantially similar type of operating system platform e.g. WINDOWS UNIX LINUX iOS ANDROID SYMBIAN etc. In other embodiments server farm may include a first group of one or more servers that execute a first type of operating system platform and a second group of one or more servers that execute a second type of operating system platform.

Server may be configured as any type of server as needed e.g. a file server an application server a web server a proxy server an appliance a network appliance a gateway an application gateway a gateway server a virtualization server a deployment server a SSL VPN server a firewall a web server an application server or as a master application server a server executing an active directory or a server executing an application acceleration program that provides firewall functionality application functionality or load balancing functionality. Other server types may also be used.

Some embodiments include a first server that receives requests from a client machine forwards the request to a second server and responds to the request generated by the client machine with a response from the second server . First server may acquire an enumeration of applications available to the client machine and well as address information associated with an application server hosting an application identified within the enumeration of applications. First server can then present a response to the client s request using a web interface and communicate directly with the client to provide the client with access to an identified application. One or more clients and or one or more servers may transmit data over network e.g. network .

With further reference to a computer device may be configured as a virtualization server in a virtualization environment for example a single server multi server or cloud computing environment. Virtualization server illustrated in can be deployed as and or implemented by one or more embodiments of the server illustrated in or by other known computing devices. Included in virtualization server is a hardware layer that can include one or more physical disks one or more physical devices one or more physical processors and one or more physical memories . In some embodiments firmware can be stored within a memory element in the physical memory and can be executed by one or more of the physical processors . Virtualization server may further include an operating system that may be stored in a memory element in the physical memory and executed by one or more of the physical processors . Still further a hypervisor may be stored in a memory element in the physical memory and can be executed by one or more of the physical processors .

Executing on one or more of the physical processors may be one or more virtual machines A C generally . Each virtual machine may have a virtual disk A C and a virtual processor A C. In some embodiments a first virtual machine A may execute using a virtual processor A a control program that includes a tools stack . Control program may be referred to as a control virtual machine Dom0 Domain 0 or other virtual machine used for system administration and or control. In some embodiments one or more virtual machines B C can execute using a virtual processor B C a guest operating system A B.

Virtualization server may include a hardware layer with one or more pieces of hardware that communicate with the virtualization server . In some embodiments the hardware layer can include one or more physical disks one or more physical devices one or more physical processors and one or more memory . Physical components and may include for example any of the components described above. Physical devices may include for example a network interface card a video card a keyboard a mouse an input device a monitor a display device speakers an optical drive a storage device a universal serial bus connection a printer a scanner a network element e.g. router firewall network address translator load balancer virtual private network VPN gateway Dynamic Host Configuration Protocol DHCP router etc. or any device connected to or communicating with virtualization server . Physical memory in the hardware layer may include any type of memory. Physical memory may store data and in some embodiments may store one or more programs or set of executable instructions. illustrates an embodiment where firmware is stored within the physical memory of virtualization server . Programs or executable instructions stored in the physical memory can be executed by the one or more processors of virtualization server .

Virtualization server may also include a hypervisor . In some embodiments hypervisor may be a program executed by processors on virtualization server to create and manage any number of virtual machines . Hypervisor may be referred to as a virtual machine monitor or platform virtualization software. In some embodiments hypervisor can be any combination of executable instructions and hardware that monitors virtual machines executing on a computing machine. Hypervisor may be Type 2 hypervisor where the hypervisor that executes within an operating system executing on the virtualization server . Virtual machines then execute at a level above the hypervisor. In some embodiments the Type 2 hypervisor executes within the context of a user s operating system such that the Type 2 hypervisor interacts with the user s operating system. In other embodiments one or more virtualization servers in a virtualization environment may instead include a Type 1 hypervisor Not Shown . A Type 1 hypervisor may execute on the virtualization server by directly accessing the hardware and resources within the hardware layer . That is while a Type 2 hypervisor accesses system resources through a host operating system as shown a Type 1 hypervisor may directly access all system resources without the host operating system . A Type 1 hypervisor may execute directly on one or more physical processors of virtualization server and may include program data stored in the physical memory .

Hypervisor in some embodiments can provide virtual resources to operating systems or control programs executing on virtual machines in any manner that simulates the operating systems or control programs having direct access to system resources. System resources can include but are not limited to physical devices physical disks physical processors physical memory and any other component included in virtualization server hardware layer . Hypervisor may be used to emulate virtual hardware partition physical hardware virtualize physical hardware and or execute virtual machines that provide access to computing environments. In still other embodiments hypervisor controls processor scheduling and memory partitioning for a virtual machine executing on virtualization server . Hypervisor may include those manufactured by VMWare Inc. of Palo Alto Calif. the XEN hypervisor an open source product whose development is overseen by the open source Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft or others. In some embodiments virtualization server executes a hypervisor that creates a virtual machine platform on which guest operating systems may execute. In these embodiments the virtualization server may be referred to as a host server. An example of such a virtualization server is the XEN SERVER provided by Citrix Systems Inc. of Fort Lauderdale Fla.

Hypervisor may create one or more virtual machines B C generally in which guest operating systems execute. In some embodiments hypervisor may load a virtual machine image to create a virtual machine . In other embodiments the hypervisor may executes a guest operating system within virtual machine . In still other embodiments virtual machine may execute guest operating system .

In addition to creating virtual machines hypervisor may control the execution of at least one virtual machine . In other embodiments hypervisor may presents at least one virtual machine with an abstraction of at least one hardware resource provided by the virtualization server e.g. any hardware resource available within the hardware layer . In other embodiments hypervisor may control the manner in which virtual machines access physical processors available in virtualization server . Controlling access to physical processors may include determining whether a virtual machine should have access to a processor and how physical processor capabilities are presented to the virtual machine .

As shown in virtualization server may host or execute one or more virtual machines . A virtual machine is a set of executable instructions that when executed by a processor imitate the operation of a physical computer such that the virtual machine can execute programs and processes much like a physical computing device. While illustrates an embodiment where a virtualization server hosts three virtual machines in other embodiments virtualization server can host any number of virtual machines . Hypervisor in some embodiments provides each virtual machine with a unique virtual view of the physical hardware memory processor and other system resources available to that virtual machine . In some embodiments the unique virtual view can be based on one or more of virtual machine permissions application of a policy engine to one or more virtual machine identifiers a user accessing a virtual machine the applications executing on a virtual machine networks accessed by a virtual machine or any other desired criteria. For instance hypervisor may create one or more unsecure virtual machines and one or more secure virtual machines . Unsecure virtual machines may be prevented from accessing resources hardware memory locations and programs that secure virtual machines may be permitted to access. In other embodiments hypervisor may provide each virtual machine with a substantially similar virtual view of the physical hardware memory processor and other system resources available to the virtual machines .

Each virtual machine may include a virtual disk A C generally and a virtual processor A C generally . The virtual disk in some embodiments is a virtualized view of one or more physical disks of the virtualization server or a portion of one or more physical disks of the virtualization server . The virtualized view of the physical disks can be generated provided and managed by the hypervisor . In some embodiments hypervisor provides each virtual machine with a unique view of the physical disks . Thus in these embodiments the particular virtual disk included in each virtual machine can be unique when compared with the other virtual disks .

A virtual processor can be a virtualized view of one or more physical processors of the virtualization server . In some embodiments the virtualized view of the physical processors can be generated provided and managed by hypervisor . In some embodiments virtual processor has substantially all of the same characteristics of at least one physical processor . In other embodiments virtual processor provides a modified view of physical processors such that at least some of the characteristics of the virtual processor are different than the characteristics of the corresponding physical processor .

With further reference to some aspects described herein may be implemented in a cloud based environment. illustrates an example of a cloud computing environment or cloud system . As seen in client computers may communicate with a cloud management server to access the computing resources e.g. host servers storage resources and network resources of the cloud system.

Management server may be implemented on one or more physical servers. The management server may run for example CLOUDSTACK by Citrix Systems Inc. of Ft. Lauderdale Fla. or OPENSTACK among others. Management server may manage various computing resources including cloud hardware and software resources for example host computers data storage devices and networking devices . The cloud hardware and software resources may include private and or public components. For example a cloud may be configured as a private cloud to be used by one or more particular customers or client computers and or over a private network. In other embodiments public clouds or hybrid public private clouds may be used by other customers over an open or hybrid networks.

Management server may be configured to provide user interfaces through which cloud operators and cloud customers may interact with the cloud system. For example the management server may provide a set of APIs and or one or more cloud operator console applications e.g. web based or standalone applications with user interfaces to allow cloud operators to manage the cloud resources configure the virtualization layer manage customer accounts and perform other cloud administration tasks. The management server also may include a set of APIs and or one or more customer console applications with user interfaces configured to receive cloud computing requests from end users via client computers for example requests to create modify or destroy virtual machines within the cloud. Client computers may connect to management server via the Internet or other communication network and may request access to one or more of the computing resources managed by management server . In response to client requests the management server may include a resource manager configured to select and provision physical resources in the hardware layer of the cloud system based on the client requests. For example the management server and additional components of the cloud system may be configured to provision create and manage virtual machines and their operating environments e.g. hypervisors storage resources services offered by the network elements etc. for customers at client computers over a network e.g. the Internet providing customers with computational resources data storage services networking capabilities and computer platform and application support. Cloud systems also may be configured to provide various specific services including security systems development environments user interfaces and the like.

Certain clients may be related for example different client computers creating virtual machines on behalf of the same end user or different users affiliated with the same company or organization. In other examples certain clients may be unrelated such as users affiliated with different companies or organizations. For unrelated clients information on the virtual machines or storage of any one user may be hidden from other users.

Referring now to the physical hardware layer of a cloud computing environment availability zones or zones may refer to a collocated set of physical computing resources. Zones may be geographically separated from other zones in the overall cloud of computing resources. For example zone may be a first cloud datacenter located in California and zone may be a second cloud datacenter located in Florida. Management sever may be located at one of the availability zones or at a separate location. Each zone may include an internal network that interfaces with devices that are outside of the zone such as the management server through a gateway. End users of the cloud e.g. clients might or might not be aware of the distinctions between zones. For example an end user may request the creation of a virtual machine having a specified amount of memory processing power and network capabilities. The management server may respond to the user s request and may allocate the resources to create the virtual machine without the user knowing whether the virtual machine was created using resources from zone or zone . In other examples the cloud system may allow end users to request that virtual machines or other cloud resources are allocated in a specific zone or on specific resources within a zone.

In this example each zone may include an arrangement of various physical hardware components or computing resources for example physical hosting resources or processing resources physical network resources physical storage resources switches and additional hardware resources that may be used to provide cloud computing services to customers. The physical hosting resources in a cloud zone may include one or more computer servers such as the virtualization servers described above which may be configured to create and host virtual machine instances. The physical network resources in a cloud zone or may include one or more network elements e.g. network service providers comprising hardware and or software configured to provide a network service to cloud customers such as firewalls network address translators load balancers virtual private network VPN gateways Dynamic Host Configuration Protocol DHCP routers and the like. The storage resources in the cloud zone may include storage disks e.g. solid state drives SSDs magnetic hard disks etc. and other storage devices.

The example cloud computing environment shown in also may include a virtualization layer e.g. as shown in with additional hardware and or software resources configured to create and manage virtual machines and provide other services to customers using the physical resources in the cloud. The virtualization layer may include hypervisors as described above in along with other components to provide network virtualizations storage virtualizations etc. The virtualization layer may be as a separate layer from the physical resource layer or may share some or all of the same hardware and or software resources with the physical resource layer. For example the virtualization layer may include a hypervisor installed in each of the virtualization servers with the physical computing resources. Known cloud systems may alternatively be used e.g. WINDOWS AZURE Microsoft Corporation of Redmond Wash. AMAZON EC2 Amazon.com Inc. of Seattle Wash. IBM BLUE CLOUD IBM Corporation of Armonk N.Y. or others.

In some embodiments the operating system of the mobile device may be separated into a managed partition and an unmanaged partition . The managed partition may have policies applied to it to secure the applications running on and data stored in the managed partition. In other embodiments all applications may execute in accordance with a set of one or more policy files received separate from the application and which define one or more security parameters features resource restrictions and or other access controls that are enforced by the mobile device management system when that application is executing on the device. By operating in accordance with their respective policy file s each application may be allowed or restricted from communications with one or more other applications and or resources thereby creating a virtual partition. Thus as used herein a partition may refer to a physically partitioned portion of memory physical partition a logically partitioned portion of memory logical partition and or a virtual partition created as a result of enforcement of one or more policies and or policy files across multiple apps as described herein virtual partition . Stated differently by enforcing policies on managed apps those apps may be restricted to only be able to communicate with other managed apps and trusted enterprise resources thereby creating a virtual partition that is impenetrable by unmanaged apps and devices.

The applications running on the managed partition may be secure applications. The secure applications may be email applications web browsing applications software as a service SaaS access applications Windows Application access applications and the like. The secure applications may be secure native applications secure remote applications executed by a secure application launcher virtualization applications executed by a secure application launcher and the like. The secure native applications may be wrapped by a secure application wrapper . The secure application wrapper may include integrated policies that are executed on the mobile device when the secure native application is executed on the device. The secure application wrapper may include meta data that points the secure native application running on the mobile device to the resources hosted at the enterprise that the secure native application may require to complete the task requested upon execution of the secure native application . The secure remote applications executed by a secure application launcher may be executed within the secure application launcher application . The virtualization applications executed by a secure application launcher may utilize resources on the mobile device at the enterprise resources and the like. The resources used on the mobile device by the virtualization applications executed by a secure application launcher may include user interaction resources processing resources and the like. The user interaction resources may be used to collect and transmit keyboard input mouse input camera input tactile input audio input visual input gesture input and the like. The processing resources may be used to present a user interface process data received from the enterprise resources and the like. The resources used at the enterprise resources by the virtualization applications executed by a secure application launcher may include user interface generation resources processing resources and the like. The user interface generation resources may be used to assemble a user interface modify a user interface refresh a user interface and the like. The processing resources may be used to create information read information update information delete information and the like. For example the virtualization application may record user interactions associated with a GUI and communicate them to a server application where the server application will use the user interaction data as an input to the application operating on the server. In this arrangement an enterprise may elect to maintain the application on the server side as well as data files etc. associated with the application. While an enterprise may elect to mobilize some applications in accordance with the principles herein by securing them for deployment on the mobile device this arrangement may also be elected for certain applications. For example while some applications may be secured for use on the mobile device others may not be prepared or appropriate for deployment on the mobile device so the enterprise may elect to provide the mobile user access to the unprepared applications through virtualization techniques. As another example the enterprise may have large complex applications with large and complex data sets e.g. material resource planning applications where it would be very difficult or otherwise undesirable to customize the application for the mobile device so the enterprise may elect to provide access to the application through virtualization techniques. As yet another example the enterprise may have an application that maintains highly secured data e.g. human resources data customer data engineering data that may be deemed by the enterprise as too sensitive for even the secured mobile environment so the enterprise may elect to use virtualization techniques to permit mobile access to such applications and data. An enterprise may elect to provide both fully secured and fully functional applications on the mobile device as well as a virtualization application to allow access to applications that are deemed more properly operated on the server side. In an embodiment the virtualization application may store some data files etc. on the mobile phone in one of the secure storage locations. An enterprise for example may elect to allow certain information to be stored on the phone while not permitting other information.

In connection with the virtualization application as described herein the mobile device may have a virtualization application that is designed to present GUI s and then record user interactions with the GUI. The application may communicate the user interactions to the server side to be used by the server side application as user interactions with the application. In response the application on the server side may transmit back to the mobile device a new GUI. For example the new GUI may be a static page a dynamic page an animation or the like.

The secure applications may access data stored in a secure data container in the managed partition of the mobile device. The data secured in the secure data container may be accessed by the secure wrapped applications applications executed by a secure application launcher virtualization applications executed by a secure application launcher and the like. The data stored in the secure data container may include files databases and the like. The data stored in the secure data container may include data restricted to a specific secure application shared among secure applications and the like. Data restricted to a secure application may include secure general data and highly secure data . Secure general data may use a strong form of encryption such as AES 128 bit encryption or the like while highly secure data may use a very strong form of encryption such as AES 256 bit encryption. Data stored in the secure data container may be deleted from the device upon receipt of a command from the device manager . The secure applications may have a dual mode option . The dual mode option may present the user with an option to operate the secured application in an unsecured mode. In an unsecured mode the secure applications may access data stored in an unsecured data container on the unmanaged partition of the mobile device . The data stored in an unsecured data container may be personal data . The data stored in an unsecured data container may also be accessed by unsecured applications that are running on the unmanaged partition of the mobile device . The data stored in an unsecured data container may remain on the mobile device when the data stored in the secure data container is deleted from the mobile device . An enterprise may want to delete from the mobile device selected or all data files and or applications owned licensed or controlled by the enterprise enterprise data while leaving or otherwise preserving personal data files and or applications owned licensed or controlled by the user personal data . This operation may be referred to as a selective wipe. With the enterprise and personal data arranged in accordance to the aspects described herein an enterprise may perform a selective wipe.

The mobile device may connect to enterprise resources and enterprise services at an enterprise to the public Internet and the like. The mobile device may connect to enterprise resources and enterprise services through virtual private network connections. The virtual private network connections also referred to at microVPN or application specific VPN may be specific to particular applications particular devices particular secured areas on the mobile device and the like e.g. . For example each of the wrapped applications in the secured area of the phone may access enterprise resources through an application specific VPN such that access to the VPN would be granted based on attributes associated with the application possibly in conjunction with user or device attribute information. The virtual private network connections may carry Microsoft Exchange traffic Microsoft Active Directory traffic HTTP traffic HTTPS traffic application management traffic and the like. The virtual private network connections may support and enable single sign on authentication processes . The single sign on processes may allow a user to provide a single set of authentication credentials which are then verified by an authentication service . The authentication service may then grant to the user access to multiple enterprise resources without requiring the user to provide authentication credentials to each individual enterprise resource .

The virtual private network connections may be established and managed by an access gateway . The access gateway may include performance enhancement features that manage accelerate and improve the delivery of enterprise resources to the mobile device . The access gateway may also re route traffic from the mobile device to the public Internet enabling the mobile device to access publicly available and unsecured applications that run on the public Internet . The mobile device may connect to the access gateway via a transport network . The transport network may be a wired network wireless network cloud network local area network metropolitan area network wide area network public network private network and the like.

The enterprise resources may include email servers file sharing servers SaaS applications Web application servers Windows application servers and the like. Email servers may include Exchange servers Lotus Notes servers and the like. File sharing servers may include ShareFile servers and the like. SaaS applications may include Salesforce and the like. Windows application servers may include any application server that is built to provide applications that are intended to run on a local Windows operating system and the like. The enterprise resources may be premise based resources cloud based resources and the like. The enterprise resources may be accessed by the mobile device directly or through the access gateway . The enterprise resources may be accessed by the mobile device via a transport network . The transport network may be a wired network wireless network cloud network local area network metropolitan area network wide area network public network private network and the like.

The enterprise services may include authentication services threat detection services device manager services file sharing services policy manager services social integration services application controller services and the like. Authentication services may include user authentication services device authentication services application authentication services data authentication services and the like. Authentication services may use certificates. The certificates may be stored on the mobile device by the enterprise resources and the like. The certificates stored on the mobile device may be stored in an encrypted location on the mobile device the certificate may be temporarily stored on the mobile device for use at the time of authentication and the like. Threat detection services may include intrusion detection services unauthorized access attempt detection services and the like. Unauthorized access attempt detection services may include unauthorized attempts to access devices applications data and the like. Device management services may include configuration provisioning security support monitoring reporting and decommissioning services. File sharing services may include file management services file storage services file collaboration services and the like. Policy manager services may include device policy manager services application policy manager services data policy manager services and the like. Social integration services may include contact integration services collaboration services integration with social networks such as Facebook Twitter and LinkedIn and the like. Application controller services may include management services provisioning services deployment services assignment services revocation services wrapping services and the like.

The enterprise mobility technical architecture may include an application store . The application store may include unwrapped applications pre wrapped applications and the like. Applications may be populated in the application store from the application controller . The application store may be accessed by the mobile device through the access gateway through the public Internet or the like. The application store may be provided with an intuitive and easy to use user interface. The application store may provide access to a software development kit . The software development kit may provide a user the capability to secure applications selected by the user by wrapping the application as described previously in this description. An application that has been wrapped using the software development kit may then be made available to the mobile device by populating it in the application store using the application controller .

The enterprise mobility technical architecture may include a management and analytics capability. The management and analytics capability may provide information related to how resources are used how often resources are used and the like. Resources may include devices applications data and the like. How resources are used may include which devices download which applications which applications access which data and the like. How often resources are used may include how often an application has been downloaded how many times a specific set of data has been accessed by an application and the like.

In this case the left hand side represents an enrolled managed mobile device with a client agent which interacts with gateway server which includes access gateway and application controller functionality to access various enterprise resources and services such as Exchange Sharepoint PKI Resources Kerberos Resources and Certificate Issuance Service as shown on the right hand side above. Although not specifically shown the mobile device may also interact with an application store for the selection and downloading of applications.

The client agent acts as the UI user interface intermediary for Windows apps desktops hosted in an Enterprise data center which are accessed using a display remoting protocol such as but not limited to the ICA protocol. The client agent also supports the installation and management of native applications on the mobile device such as native iOS or Android applications. For example the managed applications mail browser wrapped application shown in the figure above are all native applications that execute locally on the device. Client agent and the application management framework AMF of this architecture act to provide policy driven management capabilities and features such as connectivity and SSO single sign on to enterprise resources services . The client agent handles primary user authentication to the enterprise normally to the access gateway AG with SSO to other gateway server components. The client agent obtains policies from gateway server to control the behavior of the AMF managed applications on the mobile device . In some alternative embodiments one or more of the native applications which may e.g. be included in the managed applications may provide installation and or management functionalities with receiving commands from and or otherwise interacting with the client agent .

In some embodiments client agent might function solely as a policy agent on the mobile device and a separate client agent may provide receiver and or virtualization functions e.g. using the display remoting protocol discussed above . In such a split functionality implementation the client agent may for example support installation and or management of native applications but might not provide receiver and or virtualization functions which may instead be performed and or provided by a different client agent running on the mobile device.

The secure IPC links between the native applications and client agent represent a management channel which allows client agent to supply policies to be enforced by the application management framework wrapping each application. The IPC channel also allows client agent to supply credential and authentication information that enables connectivity and SSO to enterprise resources . Finally the IPC channel allows the application management framework to invoke user interface functions implemented by client agent such as online and offline authentication.

Communications between the client agent and gateway server are essentially an extension of the management channel from the application management framework wrapping each native managed application . The application management framework requests policy information from client agent which in turn requests it from gateway server . The application management framework requests authentication and client agent logs into the gateway services part of gateway server . Client agent may also call supporting services on gateway server which may produce input material to derive encryption keys for the local data vaults or provide client certificates which may enable direct authentication to PKI protected resources as more fully explained below.

In more detail the application management framework wraps each managed application . This may be incorporated via an explicit build step or via a post build processing step. The application management framework may pair with client agent on first launch of an application to initialize the secure IPC channel and obtain the policy for that application. The application management framework may enforce relevant portions of the policy that apply locally such as the client agent login dependencies and some of the containment policies that restrict how local OS services may be used or how they may interact with the application .

The application management framework may use services provided by client agent over the secure IPC channel to facilitate authentication and internal network access. Key management for the private and shared data vaults containers may be also managed by appropriate interactions between the managed applications and client agent . Vaults may be available only after online authentication or may be made available after offline authentication if allowed by policy. First use of vaults may require online authentication and offline access may be limited to at most the policy refresh period before online authentication is again required.

Network access to internal resources may occur directly from individual managed applications through gateway server . The application management framework is responsible for orchestrating the network access on behalf of each application . Client agent may facilitate these network connections by providing suitable time limited secondary credentials obtained following online authentication. Multiple modes of network connection may be used such as reverse web proxy connections and end to end VPN style tunnels .

The mail and browser managed applications have special status and may make use of facilities that might not be generally available to arbitrary wrapped applications. For example the mail application may use a special background network access mechanism that allows it to access Exchange over an extended period of time without requiring a full AD logon. The browser application may use multiple private data vaults to segregate different kinds of data.

This architecture supports the incorporation of various other security features. For example gateway server including its gateway services in some cases will not need to validate AD passwords. It can be left to the discretion of an enterprise whether an AD password is used as an authentication factor for some users in some situations. Different authentication methods may be used if a user is online or offline i.e. connected or not connected to a network .

Step up authentication is a feature wherein gateway server may identify managed native applications that are allowed to have access to highly classified data requiring strong authentication and ensure that access to these applications is only permitted after performing appropriate authentication even if this means a re authentication is required by the user after a prior weaker level of login.

Another security feature of this solution is the encryption of the data vaults containers on the mobile device . The vaults may be encrypted so that all on device data including files databases and configurations are protected. For on line vaults the keys may be stored on the server gateway server and for off line vaults a local copy of the keys may be protected by a user password. When data is stored locally on the device in the secure container it is preferred that a minimum of AES 256 bit encryption algorithm be utilized.

Other secure container features may also be implemented. For example a logging feature may be included wherein all security events happening inside an application are logged and reported to the backend. Data wiping may be supported such as if the application detects tampering associated encryption keys may be written over with random data leaving no hint on the file system that user data was destroyed. Screenshot protection is another feature where an application may prevent any data from being stored in screenshots. For example the key window s hidden property may be set to YES. This may cause whatever content is currently displayed on the screen to be hidden resulting in a blank screenshot where any content would normally reside.

Local data transfer may be prevented such as by preventing any data from being locally transferred outside the application container e.g. by copying it or sending it to an external application. A keyboard cache feature may operate to disable the autocorrect functionality for sensitive text fields. SSL certificate validation may be operable so the application specifically validates the server SSL certificate instead of it being stored in the keychain. An encryption key generation feature may be used such that the key used to encrypt data on the device is generated using a passphrase supplied by the user if offline access is required . It may be XORed with another key randomly generated and stored on the server side if offline access is not required. Key derivation functions may operate such that keys generated from the user password use KDFs key derivation functions notably PBKDF2 rather than creating a cryptographic hash of it. The latter makes a key susceptible to brute force or dictionary attacks.

Further one or more initialization vectors may be used in encryption methods. An initialization vector will cause multiple copies of the same encrypted data to yield different cipher text output preventing both replay and cryptanalytic attacks. This will also prevent an attacker from decrypting any data even with a stolen encryption key if the specific initialization vector used to encrypt the data is not known. Further authentication then decryption may be used wherein application data is decrypted only after the user has authenticated within the application. Another feature may relate to sensitive data in memory which may be kept in memory and not in disk only when it s needed. For example login credentials may be wiped from memory after login and encryption keys and other data inside objective C instance variables are not stored as they may be easily referenced. Instead memory may be manually allocated for these.

An inactivity timeout may be implemented wherein after a policy defined period of inactivity a user session is terminated.

Data leakage from the application management framework may be prevented in other ways. For example when an application is put in the background the memory may be cleared after a predetermined configurable time period. When backgrounded a snapshot may be taken of the last displayed screen of the application to fasten the foregrounding process. The screenshot may contain confidential data and hence should be cleared.

Another security feature relates to the use of an OTP one time password without the use of an AD active directory password for access to one or more applications. In some cases some users do not know or are not permitted to know their AD password so these users may authenticate using an OTP such as by using a hardware OTP system like SecurID OTPs may be provided by different vendors also such as Entrust or Gemalto . In some cases after a user authenticates with a user ID a text is sent to the user with an OTP . In some cases this may be implemented only for online use with a prompt being a single field.

An offline password may be implemented for offline authentication for those applications for which offline use is permitted via enterprise policy. For example an enterprise may want the enterprise application store to be accessed in this manner. In this case the client agent may require the user to set a custom offline password and the AD password is not used. Gateway server may provide policies to control and enforce password standards with respect to the minimum length character class composition and age of passwords such as described by the standard Windows Server password complexity requirements although these requirements may be modified.

Another feature relates to the enablement of a client side certificate for certain applications as secondary credentials for the purpose of accessing PKI protected web resources via a micro VPN feature . For example an email application may utilize such a certificate. In this case certificate based authentication using ActiveSync protocol may be supported wherein a certificate from the client agent may be retrieved by gateway server and used in a keychain. Each managed application may have one associated client certificate identified by a label that is defined in gateway server .

Gateway server may interact with an enterprise special purpose web service to support the issuance of client certificates to allow relevant managed applications to authenticate to internal PKI protected resources.

The client agent and the application management framework may be enhanced to support obtaining and using client certificates for authentication to internal PKI protected network resources. More than one certificate may be supported such as to match various levels of security and or separation requirements. The certificates may be used by the mail and browser managed applications and ultimately by arbitrary wrapped applications provided those applications use web service style communication patterns where it is reasonable for the application management framework to mediate HTTPS requests .

Client certificate support on iOS may rely on importing a PKCS 12 BLOB Binary Large Object into the iOS keychain in each managed application for each period of use. Client certificate support may use a HTTPS implementation with private in memory key storage. The client certificate will never be present in the iOS keychain and will not be persisted except potentially in online only data value that is strongly protected.

Mutual SSL may also be implemented to provide additional security by requiring that a mobile device is authenticated to the enterprise and vice versa. Virtual smart cards for authentication to gateway server may also be implemented.

Both limited and full Kerberos support may be additional features. The full support feature relates to an ability to do full Kerberos login to AD using an AD password or trusted client certificate and obtain Kerberos service tickets to respond to HTTP negotiate authentication challenges. The limited support feature relates to constrained delegation in AGEE where AFEE supports invoking Kerberos protocol transition so it can obtain and use Kerberos service tickets subject to constrained delegation in response to HTTP negotiate authentication challenges. This mechanism works in reverse web proxy a.k.a. CVPN mode and when HTTP but not HTTPS connections are proxied in VPN and MicroVPN mode.

Another feature relates to application container locking and wiping which may automatically occur upon jail break or rooting detections and occur as a pushed command from administration console and may include a remote wipe functionality even when an application is not running.

A multi site architecture or configuration of the enterprise application store and application controller may be supported that allows users to be service from one of several different locations in case of failure.

In some cases managed applications may be allowed to access a certificate and private key via an API example OpenSSL . Trusted managed applications of an enterprise may be allowed to perform specific Public Key operations with an application s client certificate and private key. Various use cases may be identified and treated accordingly such as when an application behaves like a browser and no certificate access is required when an application reads a certificate for who am I when an application uses the certificate to build a secure session token and when an application uses private keys for digital signing of important data e.g. transaction log or for temporary data encryption.

Having discussed several examples of the computing architecture and the enterprise mobility management architecture that may be used in providing and or implementing various aspects of the disclosure a number of embodiments will now be discussed in greater detail. In particular and as introduced above some aspects of the disclosure generally relate to evaluating application integrity. In the description below various examples illustrating how application integrity may be evaluated in accordance with one or more embodiments will be discussed.

As seen in the method may begin in step in which one or more aspects of an application may be analyzed by an application store. For example in step an application store and or one or more computing devices that may be executing and or otherwise providing the application store may analyze various aspects of an application. In one or more arrangements the application store performing the method illustrated in and or the other methods and or method steps discussed herein may embody and or implement one or more aspects of application store and or may be provided by enterprise mobility technical architecture as discussed above with respect to . In at least one arrangement the application store may for instance be a software application that is running on and or provided by one or more computing devices which may e.g. include one or more servers and or server computing devices . In addition the application store may in some instances be an enterprise application store that is provided by an organization to enable its employees and other affiliates to access obtain download and or run various applications on their mobile devices and or other computing devices. Such an application store may for instance include one or more cloud based components which may e.g. be provided by and or executed on one or more server computers and one or more device based components which may e.g. be provided by and or executed on one or more end user devices such as an end user device on which an application may be installed and run by a user of the application store .

Although many of the examples discussed herein involve an application store analyzing various aspects of an application e.g. in accordance with the method illustrated in an application store is just one type of computer system that may perform such an analysis. For example in additional and or alternative embodiments the application analysis functionalities discussed herein may be included in and or otherwise provided by an integrated development environment IDE that may for instance provide various and or comprehensive software development functionalities including source code editing functionalities build automation tools debugging functionalities and or additional functionalities thereby allowing a software developer to evaluate the integrity of an application within the IDE and or before submitting the application to an application store. In addition in instances in which the integrity of an application is evaluated by such an IDE prior to submission to an application store the application store may simply accept an integrity score determined by the IDE e.g. instead of analyzing the application and determining an integrity score to determine whether to publish the application as discussed below . In other instances the application store may still analyze the application and determine an integrity score for the application even though the application may have already been evaluated and an integrity score determined by the IDE. In still other embodiments the application analysis functionalities discussed herein may be performed and or otherwise provided by an enterprise computer system that is not associated with an application store or a non enterprise computer system that is not associated with an application store. For example such a system may simply be configured to rate an application e.g. by analyzing the application and determining an integrity score for the application as discussed below and take one or more other actions such as submitting the rating application to one or more application stores for approval and or publication. Such an arrangement may be ideal for ecosystems that include multiple application stores.

Continuing to refer to the application that may be analyzed by the application store in step may be a new application that has been submitted to the application store for the first time a new version of a previously submitted and or previously evaluated application or an existing application that is already available via and or otherwise included in the application store. The aspects of the application that may be analyzed by the application store in step may include the function calls made by the application the data objects and or resources that are used by and or provided as inputs to the application the data objects and or resources that are used by and or provided as outputs of the application and or other interactions that the application may have with other data objects and or resources which may e.g. include both local interactions with data objects and or resources on the same device that may execute the application as well as remote interactions with data objects and or resources on other devices that may different from the device executing the application .

In some instances the application store may for example periodically evaluate any and or all of the applications that are available via and or otherwise included in the application store even if they have been previously evaluated by performing the method illustrated in . Thus the application being analyzed by the application store in step may in some instances be an existing application that is already available via and or otherwise included in the application store.

In some embodiments analyzing the one or more aspects of the application may include performing a static analysis of the application. For example in analyzing the one or more aspects of the application the application store and or one or more computing devices providing the application store may perform a static analysis of the application as discussed in greater detail below with respect to .

In some embodiments analyzing the one or more aspects of the application may include performing a dynamic analysis of the application. For example in analyzing the one or more aspects of the application the application store and or one or more computing devices providing the application store may perform a dynamic analysis of the application as discussed in greater detail below with respect to .

In some embodiments analyzing the one or more aspects of the application may include performing a combined analysis of the application. For example in analyzing the one or more aspects of the application the application store and or one or more computing devices providing the application store may perform a combined analysis of the application as discussed in greater detail below with respect to .

Continuing to refer to in step the application store may determine based on the one or more analyzed aspects of the application an integrity score for the application. In some instances the integrity score determined in step may be a result of the analysis performed in step . For example the static analysis the dynamic analysis and or the combined analysis discussed above may produce and or return an integrity score for the application which may be received by the application store and determined to be the integrity score for the application in step .

In one or more arrangements the integrity score may be a numerical value representing the extent to which the application may be considered safe and or secure. In particular the numerical value that may be calculated by the application store as being the integrity score for a particular application may represent the degree to which a particular application performs in the way s in which it is expected to perform e.g. based on historical usage and or testing of the application based on advertising and or marketing of the application based on the terms of use and or license agreement of the application etc. . For example an application with a relatively high integrity score may objectively perform in the way s that it is expected to perform e.g. by making function calls and or interacting with specific data objects and or resources in an expected manner while another application with a relatively low integrity score may objectively perform in way s that it is not expected to perform e.g. by making function calls and or interacting with specific data objects and or resources in an unexpected manner . As illustrated further in the examples discussed below the integrity score determined in step may be used in making various decisions with respect to the application including determining whether or not to publish the application to any and or all users of the application store.

In step the application store may determine based on the integrity score whether to publish the application in the application store. For example in step the application store may evaluate whether the integrity score for the application meets or exceeds one or more predetermined threshold values and based on this evaluation may determine whether to publish the application in the application store by making the application available to one or more users of the application store. For instance if the integrity score determined in step is at or above a predetermined threshold value the application store may determine in step to publish the application. Alternatively if for instance the integrity score determined in step is below the predetermined threshold value the application store may determine in step not to publish the application.

In one or more arrangements the threshold values that may be used in determining whether to publish an application in step may vary for different applications and or types of applications. For example applications dealing with finance and or the management of sensitive or confidential information may be subject to more stringent integrity requirements and accordingly may require higher threshold values for their integrity score for publication in the application store than entertainment applications such as video games and media playback applications. In addition different users and or groups of users also may be able to access download and or use applications in the application store that have different integrity scores and or meet different threshold values for integrity scores. For example information technology personnel within an organization may have greater access to the application store and accordingly may be able to access download and or use an application with an integrity score that meets only a relatively low integrity score threshold e.g. for testing purposes while other types of users within an organization who may e.g. have different roles within the organization which may be implementing the application store might not be able access download and or use such an application.

In step in response to determining to publish the application in the application store the application store may publish the application in the application store. For example in publishing the application in the application store in step the application store may make the application available for access download and or installation by one or more users via one or more pages of the application store. This may for instance include generating a page for the application in the application store generating one or more banners and or advertisements for the application and or sending one or more notifications to users who may be able to access download and or install the application e.g. indicating that the application is now available in the application store . In some instances in publishing the application in the application store the application store may provide information about the application s integrity score to one or more users of the application store e.g. by causing such information to be included in one or more pages of the application store . This information may for instance include a numerical value which may e.g. be the actual numerical value determined in step to be the integrity score for the application a range indicator which may e.g. be a color coded indicator indicating the range in which the integrity score for the application falls such as green yellow orange red etc. and or specific information about unexpected functions and or other unexpected types of actions invoked by and or otherwise found in the application.

Alternatively in step in response to determining not to publish the application in the application store the application store may generate a notification indicating that the application has an insufficient integrity score. For example such a notification may be generated and or sent to the one or more users who submitted the application for evaluation and or to one or more administrative users who may maintain and or administer the application store who may e.g. be information technology personnel within the organization that is implementing the application store . The notification that is generated and or sent in step may for example include information indicating why the integrity score was determined to be insufficient and or otherwise low. For instance the notification may include information indicating that the application is making certain function calls that it should not be making information indicating that the application is accessing and or modifying data objects and or resources that it should not be accessing and or modifying and or information indicating that the application is having other interactions that it should not be having e.g. because it is not advertised as having such interactions because such interactions were not disclosed to the application store when the application was submitted to the application store for evaluation etc. .

In some embodiments publishing the application in the application store may include making the application available to a first group of users of the application store based on the integrity score exceeding a first threshold. For example a threshold e.g. a predetermined threshold value may be used by the application store in determining whether to publish the application at all as illustrated in several of the examples discussed above. If for instance the integrity score determined in step is below or equal to the first threshold then the application store may prevent the application from being accessed downloaded installed and or used by the first group of users and or may otherwise make the application unavailable to the first group of users. On the other hand if for instance the integrity score determined in step exceeds the first threshold then the application store may allow the application to be accessed downloaded installed and or used by the first group of users and or may otherwise make the application available to the first group of users. In some instances the first group of users may encompass all users of the application store while in other instances the first group of users might include only a subset of the users of the application store. For instance the first group of users might only include users who are members of certain departments e.g. engineering sales accounting legal etc. or specific teams within the organization e.g. an executive team a risk management team a recruitment team etc. .

In some embodiments in which the application may be made available to a first group of users of the application store based on the integrity score exceeding a first threshold publishing the application in the application store may further include making the application available to a second group of users of the application store based on the integrity score exceeding a second threshold where the second group of users is different from the first group of users and the second threshold is greater than the first threshold. For example if the integrity score for a certain application exceeds the first threshold but not the second threshold the application store may make the application available only to a first group of users which may e.g. include information technology support staff and or approved beta testers within an organization without making the application available to the second group of users which may e.g. encompass all users of the application store all employees and or affiliates of the organization etc. . Alternatively if the integrity score for the application exceeds both the first threshold and the higher second threshold the application store may make the application available to the second group of users which may e.g. include authorized and or intended users of the application within the organization all users of the application store all employees and or affiliates of the organization etc. and thus may in some instances even include the first group of users .

In some embodiments publishing the application in the application store may include wrapping the application using an application management framework. For example in publishing the application in the application store in step the application store may wrap the application using an application management framework such as the application management framework discussed above. In this way the application store might only wrap a given application after determining an integrity score for the application e.g. in step and subsequently determining e.g. in step that the integrity score is sufficient for the application to be wrapped and or otherwise published. For example if the integrity score for a particular application falls below a predetermined threshold the application might not be wrapped or otherwise published by the application store. In addition by wrapping the application using the application management framework the application store may apply and or otherwise subject the application to one or more policies which may e.g. control and or restrict various aspects of the application and or various aspects of the device on which the application may be installed and or executed as discussed above .

As seen in the method may begin in step in which the application may be decompiled into decompiled code. For example in step the application store may decompile the application to be analyzed into decompiled code. In some instances to decompile the application the application store may utilize and or invoke one or more functions that may be provided via an application management framework and or via one or more application programming interfaces APIs to decompile an application. Additionally or alternatively the application store software may include a decompiler and or may access an external decompiler that may be used in step in translating program code associated with the application into the decompiled code which may e.g. include human readable source code or substantially human readable source code . In one or more arrangements in decompiling the application the application store may generate source code for the application that may be expressed in one or more programming languages that the application store is able to parse e.g. Java C etc. .

In step one or more function calls to be made by the application during execution may be identified based on the decompiled code. For example in step the application store may identify based on the decompiled code one or more function calls to be made by the application during execution. In particular the decompiled code may reveal indicate and or otherwise include one or more function calls and in identifying the function calls to be made by the application during execution the application store may parse the decompiled code to classify and or recognize the function calls. In parsing the decompiled code to classify and or recognize the function calls the application store may for example determine the type s of function calls to be made by the application during execution and or the name s of and or other specific attributes of the function calls to be made during execution. For instance in determining the type s of function calls to be made by the application during execution the application store may classify each function call based on whether the particular function call involves reading writing and or otherwise modifying local data whether the particular function call involves reading writing and or otherwise modifying remote data whether the particular function call involves determining and or using current device location whether the particular function call involves accessing input received via one or more hardware components such as a GPS receiver compass microphone camera etc. whether the particular function call involves providing output via one or more hardware components such as a speaker a display etc. and or other factors.

In step the one or more identified function calls may be compared with one or more expected function calls. For example in step the application store may compare the one or more identified function calls with one or more expected function calls. In one or more arrangements expected function calls for various applications may be stored in a database that can be accessed by the application store. The expected function calls for each application may for instance be previously determined and or defined by an administrative user of the application store. Additionally or alternatively the expected function calls for each application may be determined and or predicted during a combined analysis as discussed below and or during another automated analysis process. In some instances the expected function calls included in the database may be defined for specific applications while in other instances the expected function calls included in the database may be defined for specific types of applications which may e.g. enable the application store to evaluate new previously unexamined applications simply based on their type . For instance expected function calls may be defined for word processing applications communications applications entertainment applications and or other types of applications.

In some embodiments one or more of the expected function calls which may e.g. be used in the comparing discussed above with respect to step and or in other instances discussed herein may be identified by the developer of the application and or otherwise submitted to the application store by the developer. For example the developer of an application may provide information to the application store indicating that the application uses location services camera functionalities remote access functionalities and or the like and this information may be used by the application store as the basis for the expected function calls. Subsequently the application store may use the identified function calls and or other information provided by the application developer in evaluating the function calls made by the application.

In comparing the one or more identified function calls with one or more expected function calls for the application the application store may determine an integrity score for the application by calculating a value that reflects the extent to which the identified function calls match up with and or otherwise correspond to the expected function calls. For example the value calculated by the application store which may e.g. be determined to be the integrity score for the application and or may be subsequently used as the integrity score for the application may be a percentage that reflects the percent of the identified function calls that are included in the expected function calls. For instance the expected function calls for a note taking application may include function calls for loading saving and or modifying locally stored data and or interacting with remote network resources but might not include determining current device location or accessing audio input received via a device microphone. If these location determining or microphone accessing function calls are included in the identified function calls for a note taking application their presence may reduce the integrity score for the application which accordingly may bring the application s integrity score below a predetermined threshold and thus prevent the application from being published in the application store as illustrated in the examples discussed above.

As seen in the method may begin in step in which the application may be executed in a managed environment. For example in step the application store may execute the application to be analyzed in a managed environment. The managed environment may for instance be part of the application store and or may be provided by one or more of the computing devices that are also executing and or otherwise providing the application store. In addition the managed environment may for instance provide one or more functions and or other tools for recording and or simulating user input and or other events for applying stimuli to the application. Additionally or alternatively the managed environment may provide one or more functions and or other tools for observing interactions between the application and other data objects and or resources.

In some embodiments executing the application in the managed environment may include recording one or more manually applied application stimuli during a training mode in which the application is executed for a first time and may further include automatically applying the one or more recorded application stimuli during an automated testing mode in which the application is executed at least one additional time. For example in executing the application in the managed environment the application store may record one or more manually applied application stimuli during a training mode in which the application is executed for a first time. Subsequently during an automated testing mode in which the application is executed at least one additional time the application store may automatically apply the one or more recorded application stimuli to the application to observe and or evaluate how the application responds and or otherwise interacts with other data objects and or resources. In observing and or evaluating how the application responds during the automated testing mode the application store may for instance compare the interactions that occur during the training mode with the interactions that occur during the automated testing mode to determine if any differences exist between these interactions. If for instance differences do exist between these interactions then the application store may determine that the application behaves differently during different instances of execution and such a determination may negatively affect the integrity score for the application e.g. by a predetermined amount by a scaled amount etc. .

In step one or more interactions associated with execution of the application may be observed based on the executing. For example in step the application store may observe based on the executing of the application in the managed environment e.g. performed in step one or more interactions associated with execution of the application. The interactions observed by the application store may for instance include function calls made by the application during execution in the managed environment results and or other data received by the application from other resources during execution changes and or other modifications made by the application to other local resources and or data during execution changes and or other modifications made by the application to remote resources and or data during execution and or other actions performed by on and or because of the application during execution.

In step the one or more observed interactions may be compared with one or more expected interactions. For example in step the application store may compare the one or more observed interactions with one or more expected interactions. In one or more arrangements expected interactions for various applications may be stored in a database that can be accessed by the application store. The expected interactions for each application may for instance be previously determined and or defined by an administrative user of the application store. Additionally or alternatively the expected interactions for each application may be determined and or predicted during a combined analysis as discussed below and or during another automated analysis process. In some instances the expected interactions included in the database may be defined for specific applications while in other instances the expected interactions included in the database may be defined for specific types of applications which may e.g. enable the application store to evaluate new previously unexamined applications simply based on their type . For instance expected interactions may be defined for word processing applications communications applications entertainment applications and or other types of applications.

In comparing the one or more observed interactions with one or more expected interactions for the application the application store may determine an integrity score for the application by calculating a value that reflects the extent to which the observed interactions match up with and or otherwise correspond to the expected interactions. For example the value calculated by the application store which may e.g. be determined to be the integrity score for the application and or may be subsequently used as the integrity score for the application may be a percentage that reflects the percent of the observed interactions that are included in the expected interactions. For instance the expected interactions for a note taking application may include function calls for and or other operations involved in loading saving and or modifying locally stored data and or interacting with remote network resources but might not include determining current device location or accessing audio input received via a device microphone. If these location determining or microphone accessing interactions are included in the observed interactions for a note taking application their presence may reduce the integrity score for the application which accordingly may bring the application s integrity score below a predetermined threshold and thus prevent the application from being published in the application store as illustrated in the examples discussed above.

As seen in the method may begin in step in which the application may be decompiled into decompiled code. For example in step the application store may decompile the application to be analyzed into decompiled code as in step discussed above.

In step one or more function calls to be made by the application during execution may be identified based on the decompiled code. For example in step the application store may identify based on the decompiled code one or more function calls to be made by the application during execution as in step discussed above.

In step one or more interactions may be predicted based on the one or more identified function calls. For example in step the application store may predict based on the one or more identified function calls one or more interactions for the application. The interactions may for instance be predicted based on the function calls to be made by the application during execution including the type s of function calls being made the input parameters of the function calls the output type s of the function calls expected output value s of the function calls and or potential and or expected effects of the application and or its function calls on other data objects and or resources. For example in predicting one or more interactions for the application the application store may access resources and or other information indicating the expected results and or interactions associated with various function calls to determine the potential results and or expected interactions of the identified function calls. Additionally or alternatively in predicting one or more interactions for the application the application store may simulate specific function calls to determine the expected results and or expected interactions of specific function calls. Additionally or alternatively in predicting one or more interactions for the application store the application store may access information about other applications that include similar function calls to determine the expected results and or expected interactions for the application being analyzed. In particular the application store may for example predict that the function calls in the application being analyzed may produce the same results and or interactions as the function calls produce in the other applications as may be indicated in the information about the other applications.

In step the application may be executed in a managed environment. For example in step the application store may execute the application being analyzed in a managed environment as in step discussed above.

In step one or more interactions associated with execution of the application may be observed based on the executing. For example in step the application store may observe based on the executing of the application in the managed environment e.g. performed in step one or more interactions associated with execution of the application as in step discussed above.

In step the one or more predicted interactions may be compared with the one or more observed interactions. For example in step the application store may compare the predicted interactions which may e.g. be determined in step with the observed interactions which may e.g. be determined in step to calculate an integrity score for the application. In particular in step the predicted interactions and the observed interactions may be compared to calculate an integrity score similar to how observed interactions and expected interactions may be compared in step to determine an integrity score.

For example in comparing the one or more predicted interactions with the one or more observed interactions the application store may determine an integrity score for the application by calculating a value that reflects the extent to which the observed interactions match up with and or otherwise correspond to the predicted interactions. For example the value calculated by the application store which may e.g. be determined to be the integrity score for the application and or may be subsequently used as the integrity score for the application may be a percentage that reflects the percent of the observed interactions that are included in the predicted interactions. For instance the predicted interactions for a note taking application may include function calls for and or other operations involved in loading saving and or modifying locally stored data and or interacting with remote network resources but might not include determining current device location or accessing audio input received via a device microphone. If these location determining or microphone accessing interactions are included in the observed interactions for a note taking application their presence may reduce the integrity score for the application which accordingly may bring the application s integrity score below a predetermined threshold and thus prevent the application from being published in the application store as illustrated in the examples discussed above.

In some instances in comparing function calls and or interactions to calculate an integrity score additional and or alternative values and or calculations may be similarly taken into account e.g. in addition to and or instead of calculating a percentage as in several of the examples discussed above . For example when comparing function calls and or interactions to calculate and or otherwise determine an integrity score for an application the number of expected or predicted function calls and or interactions may be compared with the number of identified or observed function calls and or interactions. As another example when comparing function calls and or interactions to calculate and or otherwise determine an integrity score for an application the order of expected or predicted function calls and or interactions may be compared with the order of identified or observed function calls and or interactions. As another example when comparing function calls and or interactions to calculate and or otherwise determine an integrity score for an application an expected or predicted amount of memory usage processor usage and or network bandwidth usage may be compared with an identified or observed amount of memory usage processor usage and or network bandwidth usage. While these factors are listed here as examples of the types of factors that may be taken into account when calculating an integrity score in some instances additional and or alternative factors may be similarly taken into account when calculating an integrity score in other instances.

As illustrated above various aspects of the disclosure relate to evaluating application integrity particularly for software applications that may be downloaded to installed on and or executed by mobile devices such as smart phones tablet computers laptop computers and or other types of mobile computing devices. In other embodiments however the concepts discussed herein can be implemented in any other type of computing device e.g. a desktop computer a server a console a set top box etc. . Thus although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are described as some example implementations of the following claims.

