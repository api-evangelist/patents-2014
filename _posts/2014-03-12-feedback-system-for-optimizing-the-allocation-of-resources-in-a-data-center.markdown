---

title: Feedback system for optimizing the allocation of resources in a data center
abstract: To improve resource utilization and reduce the virtual machine sprawl in a data center, resource utilization is predicted based on previously measured utilizations, and then, using the predicted utilizations, optimizing the allocation of the computing resources among the virtual machines in the data center. In operation, measurements related to resource utilization by different virtual machines executing in a data center are collected at regular intervals. At each interval, an optimization system predicts virtual machine resource utilizations based on previously collected measurements and previously-generated virtual machine modelers. Based on the utilization predictions as well as the physical topology of the data center, the optimization system identifies different optimizations to the virtual machine topology for the next interval.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471394&OS=09471394&RS=09471394
owner: Cloubrain, Inc.
number: 09471394
owner_city: Fremont
owner_country: US
publication_date: 20140312
---
This application claims the benefit of U.S. Provisional Application No. 61 779 656 filed Mar. 13 2013 which is incorporated by reference in its entirety.

A data center is a centralized facility that stores manages and serves data and applications pertaining to one or more businesses. To support this function a data center houses many physical components including large scale computers. A computer system typically runs multiple virtual machines to maximize the use of the processing power of a computer system. Each virtual machine on a computer system operates independently from other virtual machines but utilizes the same underlying hardware of the computer system as the other virtual machines.

Data center administrators face many challenges when configuring the physical resources in the data center for optimal and cost effective use. Specifically physical resources need to be allocated in an optimized manner to increase the overall resource utilization. Optimizing the allocation of resources however is complex as the load on the resources is constantly changing. Similarly virtual machines are often spawned on demand as the load increases but are not properly killed or migrated when the load decreases. This creates a virtual machine sprawl resulting in an uneven distribution of server utilization and server underuse.

To improve resource utilization of computer resources and reduce the virtual machine sprawl in a data center the behaviors of virtual machines executing in the data center collected in the past may be modeled to predict future behaviors. The virtual machine topology of a data center is then preemptively reconfigured based on the predicted behaviors. Preemptively reconfiguring the virtual machine topology reduces the over or under utilization of physical resources in the data center. More specifically the data center at any given time interval is optimally configured for the subsequent time interval and is therefore better equipped for the future behaviors of the virtual machines.

Embodiments of the invention predict resource utilization within the data center based on previously measured utilizations. The allocation of computing resources among the virtual machines in the data center is then optimized based on the predictions. In operation measurements related to resource utilization by different virtual machines executing in a data center are collected at regular intervals. At each interval an optimization system attempts to predict virtual machine resource utilizations based on previously collected measurements and previously generated virtual machine modelers. Based on the utilization predictions as well as the physical topology of the data center the optimization system identifies different optimizations to the virtual machine topology for the next interval. The optimization system instructs the data center to update the virtual machine topology based on the identified optimizations.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

To improve resource utilization of computer resources and reduce the virtual machine sprawl in a data center embodiments of the invention predict resource utilization based on previously measured utilizations and then using the predicted utilizations optimizing the allocation of the computing resources among the virtual machines in the data center. In operation measurements related to resource utilization by different virtual machines executing in a data center are collected at regular intervals. At each interval an optimization system attempts to predict virtual machine resource utilizations based on previously collected measurements and previously generated virtual machine modelers. Based on the utilization predictions as well as the physical topology of the data center the optimization system identifies different optimizations to the virtual machine topology for the next interval. The optimization system instructs the data center to update the VM topology based on the identified optimizations.

The data center is a facility that houses multiple physical machines such as physical machine and other associated components not shown including telecommunications and storage systems power distribution and management systems environmental controls e.g. air conditioning fire suppression and security devices. Each physical machine in the data center executes one or more virtual machines VMs such as VM executing in physical machine . The VMs execute applications that the data center services. To execute the applications the VMs consume resources such as processing power and memory provided by the physical machines in the data center .

The data center is associated with a physical topology and a VM topology. The physical topology specifies the physical location of each of the physical machines within the data center . The physical machines may be housed in racks such that multiple physical machines may be housed in the same rack. The physical machine topology associated with the data center is largely fixed and is modified only when the physical layout of the data center changes. The VM topology specifies at a given point in time the different VM executing on each physical machine of the data center . VMs are spawned and killed as necessary and may be migrated from one physical machine to another based on various factors. Therefore the VM topology associated with the data center is not fixed and changes as VMs are spawned killed or migrated.

The data center regularly collects various measurements related to the operation of the data center as a whole and the operation of each physical machine and each VM executing within the physical machines. For the data center as a whole such measurements include but are not limited to power utilization and temperature. For a physical machine such measurements include but are not limited to power usage temperature processor usage and network usage. For a specific VM such measurements include but are not limited to processor usage network usage and input output device usage.

The data center optimization system operates in conjunction with the data center to optimize the VM topology for efficient utilization of the resources provided by the data center and a reduction of VM sprawl within the data center . The data center optimization system includes a communications engine a predictions engine and an optimization engine . The communications engine co ordinates the transmission of data between the data center and the data center optimization system . In operation the communications engine accesses at regular intervals the measurements collected by the data center via an application programming interface API exposed by the data center . The communications engine transmits the measurements to the predictions engine for further processing.

The predictions engine processes the measurements to generate a different set of tuples for every VM executing in the data center . Each tuple in the set of tuples for a particular VM includes a series of measurements associated with a given resource used by that VM. The series of measurements include one or more previous measurements and the most recent measurement captured by the data center . The number of measurements reflected in a given tuple i.e. the length of the tuple is configurable based on processing power available to the predictions engine and the number of measurements needed for accurate future predictions.

As an example assume the predictions engine receives at regular intervals measurements related to memory and processor usage related to two VMs VM A and VM B. At a given time interval T the predictions engine has the following measurements for VM A and VM B where measurements for T 3 T 2 and T 1 were received previously 

Based on the above measurements the predictions engine generates a set of tuples for VM A and a set of tuples for VM B where each tuple represents measurements of a different resource usage. The set of tuples for VM A may be of the form 35 33 30 22 55 57 48 45 and the set of tuples for VM B may of the form 10 16 40 40 25 25 55 50 .

In one embodiment the predictions engine generates the tuples to indicate the change in measurements over time instead of the absolute magnitude. In such an embodiment the earliest measurement of a particular resource usage is specified in a tuple as an absolute magnitude and the subsequent measurements are specified as a series of deltas. Continuing the example above the set of tuples for VM A in such an embodiment would take the form 35 2 3 8 55 2 9 3 and the set of tuples for VM B would take the form 10 6 24 0 25 0 30 5 .

The predictions engine feeds the generated sets of tuples to the virtual machine modelers for generating predictions of future resource utilizations. For a given set of tuples associated with a VM the predictions engine causes a VM modeler to process the tuples to generate a prediction for the VM s usage of a particular resource at the next time interval. For example the predictions engine may input the set of tuples for VM A i.e. 35 2 3 8 55 2 9 3 into VM modeler to generate a prediction for a memory resource usage at the next time interval. The predictions engine may cause different VM modelers to process the same set of tuples to predict the associated VM s usage of different resources at the next time interval. The manner in which a VM modeler processes a set of tuples to generate a prediction regarding a particular resource is described in greater detail below in conjunction with .

In response to measurements received at a given time interval the predictions engine transmits per VM predictions to the communications engine . Per VM predictions for a particular VM specify predictions for the VM s utilization of different resources at the next time interval. The communications engine transmits the per VM predictions the current virtual machine topology the physical topology and the data center measurements received from the data center to the optimization engine . The optimization engine analyzes the per VM predictions to identify any optimizations that need to be made to the VM topology for efficient use of data center resources.

In operation the optimization engine analyzes the per VM predictions to identify a VM topology that most efficiently uses the physical machines available in the data center . Specifically the optimization engine attempts to assign each physical machine one or more VMs according to two policy constraints 1 the maximal use of the resources e.g. memory network and processing power provided by the physical machine and 2 the overall reduction of the VM sprawl across the different physical machines. In one embodiment the optimization engine utilizes a greedy sort algorithm to assign the VMs to the different physical machines. In an alternate embodiment the optimization engine utilizes a next fit algorithm that analyzes the predictions for each VM and identifies the best physical machine that should execute that VM based upon the resource available on the physical machine.

The optimization engine may also optimize the VM topology by proximally locating VMs that are likely to communicate in subsequent time intervals. Proximally locating two VMs may result in the VMs being executed by the same physical machine or by physical machines in the same rack in the data center . In one embodiment determining which VMs are likely to communicate with one another and when such communications will occur is predictable. In such an embodiment proximally locating the VMs speeds up the communications between the VMs. In another embodiment determining which VMs are to communicate is predictable but determining the frequency or the time of such communications is not predictable. In such an embodiment the optimization engine may cause the VMs to be proximally located in the next time interval to speed up any communications between the VMs that may occur. Depending upon the urgency of the migration from the prediction the optimization engine may instead stall on proximally locating the VMs to reduce the number of VM migrations in the next time interval and delay such migrations to future time intervals.

The optimization engine may further optimize the VM topology based on heat and power usage measurements received from the data center . For example the optimization engine may reassign VMs from physical machines that are located in a high heat density area in the data center to physical machines a lower heat density area. Power density optimization can be combined with resource optimization. In one embodiment the power optimization can be combined with communication density usage or prediction e.g. by shutting down a greater proportion of physical machines in a high heat density area of the data center and placing VMs with high network requirements on the remaining physical machines machines that have not been shut down in that region of the data center .

The optimization engine transmits the optimized VM topology to the communications engine . The communications engine analyzes the optimized VM topology to identify the differences between the current VM topology and the optimized VM topology. For each change in the topology the communications engine issues at least one command via the API provided by the data center for effectuating that change in the data center . Commands include migrating a VM executing on one physical machine to a different physical machine or shutting down unused physical machines. In one embodiment no commands are issued if VM migrations are not needed for example when the resource benefit of the migration does not exceed the resource cost to migrate.

In certain embodiments the data center optimization system includes multiple instances of predictions engine and optimization engine . The various instances take advantage of multi core multi processor and or multi machine processing infrastructures. In such embodiments a predictions engine executes as an independent process and runs in parallel with other instances predictions engine . The VM modelers included in the predictions engine run in series or in parallel.

In operation training tuples with results of their next time intervals associated with a VM is input into the first stage of the VM modeler . The VM modeler traverses the tree by training these tuples into and classifications in SVM . From this the tuples follow their classifications to train the next level and so on. At runtime the current tuple is taken into the SVM and classified to or . It then follows that branch down and reclassifies accordingly until its final classification is obtained. The VM modeler will return the prediction for the current tuple using the previously generated model rapidly and then in the background accept new training data to retain an updated model for later iterations.

The ranges configured in an SVM may be modified based on the actual measurements received from the data center as well as the predictions made by the VM modelers . The number of stages in the binary tree of a VM modeler is also configurable based on the accuracy of the predictions made. Further the lengths of the tuples being input into the VM modelers are configurable based on the accuracy of the predictions. In one embodiment the VM modelers experiment with different lengths of the tuples until the length that yields the most accurate predictions with a computing cost below a pre determined threshold is identified.

In alternative embodiments instead of SVMs the VM modeler may use hidden Markov models HMMs na ve Bayes classifiers or ensemble methods to generate predictions regarding a particular resource.

At step the predictions engine processes the measurements collected by the communications engine to generate a different set of tuples for every VM executing in the data center . Each tuple in the set of tuples for a particular VM includes a series of measurements related to a given resource used by that VM. At step the predictions engine feeds each of the sets of tuples to the VM modelers for generating predictions of future resource utilizations for each VM. As discussed above the VM modelers may employ SVMs HMMs na ve Bayes models or ensemble methods to predict resource utilizations. The predictions are transmitted to the optimization engine for further processing. In addition the predictions are analyzed within the predictions engine to modify the SVMs within the various VM modelers to make more accurate predictions in the future.

At step the optimization engine analyzes the predictions to identify any optimizations that need to be made to the VM topology for efficient use of data center resources. Once the optimizations are identified by the optimization engine the communications engine transmits commands to the data center to effectuate the VM topology changes reflective of the optimizations.

In an alternate embodiment the optimization engine operates on new measurements received from the data center to generate VM topology optimizations without relying on future utilization levels predicted by the prediction engine .

In another alternate embodiment the VM modeler will return the prediction for the current tuple using the previously generated model rapidly and then in the background accept new training data to retain an updated model for later iterations.

In another alternate embodiment the predictions engine predicts resource utilization by VMs in the data center for time intervals other than the directly next time interval. The predictions engine using the VM modelers may predict resource utilization several time intervals from the current time.

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising a computer readable medium containing computer program code which can be executed by a computer processor for performing any or all of the steps operations or processes described.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a tangible computer readable storage medium or any type of media suitable for storing electronic instructions and coupled to a computer system bus. Furthermore any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

Embodiments of the invention may also relate to a computer data signal embodied in a carrier wave where the computer data signal includes any embodiment of a computer program product or other data combination described herein. The computer data signal is a product that is presented in a tangible medium or carrier wave and modulated or otherwise encoded in the carrier wave which is tangible and transmitted according to any suitable transmission method.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon.

