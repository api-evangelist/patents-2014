---

title: Data replication network traffic compression
abstract: An apparatus and method improving effective system throughput for replication of data over a network in a storage computing environment by using software components to perform data compression is disclosed. Software compression support is determined between applications in a data storage computing environment. If supported, compression parameters are negotiated for a communication session between storage systems over a network. Effective system throughput is improved since the size of a compressed lost data packet is less than the size of an uncompressed data packet when a lost packet needs to be retransmitted in a transmission window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09112888&OS=09112888&RS=09112888
owner: NetApp, Inc.
number: 09112888
owner_city: Sunnyvale
owner_country: US
publication_date: 20140527
---
This application is a continuation of U.S. patent application Ser. No. 11 740 032 entitled DATA REPLICATION NETWORK TRAFFIC COMPRESSION and filed on Apr. 25 2007 which is expressly incorporated by reference herein.

The present invention relates to an apparatus and method for negotiating and performing data compression between applications in a data storage computing environment.

A storage system which also may be known as a filer or a file server is a computer that provides file services relating to the organization of information on storage media such as disks. The storage system includes a storage operating system that implements a file system to logically organize the information as a hierarchical structure of directories and files on the disks. Each on disk file may be implemented as a set of disk blocks configured to store information whereas the directory may be implemented as a specially formatted file in that information about other files and directories are stored.

Storage systems may issue packets using file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively storage systems may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

A common type of file system for a storage system is a write in place file system in which the locations of the data structures such as inodes and data blocks on disk are typically fixed. An inode may be a data structure used to store information such as metadata about a file whereas the data blocks are structures used to store the actual data for the file. The information contained in an inode may include information relating to ownership of the file access permissions for the file the size of the file the file type and references to locations on disk of the data blocks for the file. The references to the locations of the file data are provided by pointers which may further reference indirect blocks that in turn reference the data blocks depending upon the quantity of data in the file. Changes to the inodes and data blocks are made in place in accordance with the write in place file system. If an update to a file extends the quantity of data for the file an additional data block is allocated and the appropriate inode is updated to reference that data block.

Another type of file system is a write anywhere file system that does not overwrite data on disks. If a data block on disk is read from disk into memory and dirtied with new data the data block is written to a new location on the disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on the disks. The optimal disk layout results in efficient access operations particularly for sequential read operations. A particular example of a write anywhere file system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. The WAFL file system may be implemented within a microkernel as part of the overall protocol stack of the storage system and associated disk storage. This microkernel may be supplied as part of the storage operating system.

A storage operating system generally refers to the computer executable code operable on a storage system that manages data access. The storage operating system may in case of a filer implement file system semantics such as the Data ONTAP storage operating system provided by Network Appliance Inc. of Sunnyvale Calif. The storage operating system may also be implemented as an application program operating on a general purpose operating system such as UNIX or Windows or as a general purpose operating system with configurable functionality which is configured for storage applications.

Disk storage may be implemented as one or more storage volumes that comprise physical storage disks defining an overall logical arrangement of storage space. Currently available storage system implementations can serve a large number of discrete volumes. Each volume may be associated with its own file system.

The disks within a volume may be organized as a Redundant Array of Independent or Inexpensive Disks RAID . RAID implementations enhance the reliability and integrity of data storage through the writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. In the example of the WAFL file system a RAID 4 implementation is advantageously employed which entails striping data across a group of disks and storing parity a data protection value on a separate disk in the RAID group. A volume typically comprises at least one data disk and one associated parity disk or possibly data parity partitions in a single disk arranged according to a RAID 4 or equivalent high reliability implementation. A person of ordinary skill in the art would understand that other RAID implementations can be used such as RAID 5 RAID DP as desired.

A storage system may mirror i.e. replicate distribute or exchange large amounts of data to another storage system across a network. A network may be a local area network LAN a wide area network WAN the Internet a wired network a wireless network or a computer bus as desired. The replication of data may be needed for disaster recovery or data distribution as desired. Since storage systems may each be in different remote geographical locations high latency i.e. delay occurs and some data packets may be lost when data is communicated across a network. An undesirable effect of the high latency and lost packets is a decrease in effective system throughput or data rate over a network when moving data between storage systems. Effective system throughput decreases since lost packets in a time or transmission window are typically retransmitted by a storage system until they are successfully received by a second storage system across a network. A transmission window may be a maximum amount of data a storage system may receive within a predetermined time frame.

To improve system throughput and overall link utilization storage systems may use data compression. Conventional storage systems require additional hardware adapters for data compression. The additional hardware results in various incompatible hardware configurations for supporting compression between storage systems.

Therefore a need exists for exchanging large amounts of data between storage systems across a network while maintaining a high data rate without the undesirable need for additional hardware.

An apparatus and method improving effective system throughput for replication of data over a network in a storage computing environment by using software components to perform data compression is disclosed. Software compression support is determined between applications in a data storage computing environment. If supported compression parameters are negotiated for a communication session between storage systems over a network. Effective system throughput is improved since the size of a compressed lost data packet is less than the size of an uncompressed data packet when a lost packet needs to be retransmitted in a transmission window.

The present invention will be described with reference to the drawing figures wherein like numerals represent like elements throughout.

Each of the devices attached to network may include an appropriate conventional network interface coupling for communicating over network using a communication protocol such as Transport Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP Hyper Text Transport Protocol HTTP Simple Network Management Protocol SNMP or Virtual Interface VI connections.

Buffer cache or buffer memory may be used by storage operating system to temporarily store data for processing. In the case of data compression data is copied from any one of storage media to and stored in source buffer by the storage operating system by invoking a read operation. The data is then compressed by storage operating system using processors and stored in target buffer . The compressed data in target buffer may then be transmitted in packets using network adapter to another storage system over network .

Storage adapter interoperates with the storage operating system and storage media to to access information requested by computer . Storage adapter includes input output I O interface circuitry that couples to storage media to over an I O interconnect arrangement such as a Fibre Channel link. The information is retrieved by storage adapter and may be processed by processors prior to being forwarded over the system bus to the network adapter where the information is formatted into data packets and communicated to computer or another storage system.

An application layer provides multi protocol data access and includes support for the Network File System NFS protocol the Common Internet File System CIFS protocol or Hyper Text Transfer Protocol HTTP . In addition a disk storage layer implements a disk storage protocol such as a redundant array of independent disks RAID protocol and a disk driver layer implements a disk access protocol such as e.g. a Small Computer System Interface SCSI protocol for disk based storage media to .

Bridging the disk driver layer and disk storage layer with layers is a file system layer . A file system may provide multiple directories in a single storage volume each directory containing zero or more filenames. A file system provides a logical virtual representation of how data files are organized on a volume where data files are represented as filenames that are organized in one or more directories. As used herein the term file indicates a container an object or any other storage entity that contains a group of related data.

File system layer may implement a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate file system may be enhanced for use in accordance with the inventive principles described herein to facilitate access to disks. As such where the term WAFL is employed it should be taken broadly to refer to any file system that is otherwise adaptable to the teachings of this invention. As used herein the term storage operating system generally refers to the computer executable code operable on a computer that manages data access. A storage access data request path is provided between network and storage media link through the various layers of the storage operating system . In response to a transaction request file system layer generates an operation to retrieve requested data from storage media to if the data is not resident in the storage system s memory .

If the data is not in the memory file system layer indexes an inode file not shown in the Figures using the inode number to access an appropriate entry and retrieves a logical volume block number. File system layer then passes the logical volume block number to the disk storage layer . Disk storage layer maps the logical number to a disk block number and sends the disk block number to an appropriate driver for example an encapsulation of SCSI implemented on a Fibre Channel disk interconnection in the disk driver layer . The disk driver accesses the disk block number on storage media to and loads the requested data in memory for processing by storage system . Upon completing the request storage system and storage operating system returns a reply e.g. an acknowledgement packet defined by the CIFS specification to computer over network .

It is noted that the storage access request data path through the storage operating system layers described above may be implemented in hardware software or a combination of hardware and software. For example the storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or in an application specific integrated circuit ASIC . This type of hardware implementation may increase the performance of the file services provided by storage system in response to a file system request issued by computer . Moreover in addition to the layers shown in other layers or sublayers may exist in the architecture to provide other services by a storage operating system.

Application layer performs common application services for application processes to ensure that effective communication with another application program in a network is possible. Examples of application layer services may include authentication error recovery or determining protocol and data syntax rules with another application. In a storage computing environment application layer may include a data replication module Hyper Text Transfer Protocol HTTP file transfer protocol FTP or any program to for storing backing up or accessing data in a storage system.

Transport layer responds to service requests from the application layer and issues service requests to the network layer . Transport layer provides transparent transfer of data between hosts such as between storage systems to and may provide an end to end connection error recovery flow control or other quality of service QoS functions. As given above examples of transport layer protocols include transmission control protocol TCP UDP Datagram Congestion Control Protocol DCCP and Stream Control Transmission Protocol SCTP . TCP is a virtual circuit protocol where applications on networked computers can create connections to one another to exchange streams of data using stream sockets. Moreover TCP is a transport protocol that guarantees reliable and in order delivery of data from source to destination. TCP also distinguishes data for multiple connections by concurrent applications running on the same computer. As a result of TCP QoS functions any lost packets due to latency or bit errors in a network results in a noticeable drop in throughput especially in storage systems transporting large blocks of data.

Network layer receives data from transport layer and is responsible for end to end packet delivery between a source and destination host. As used herein a source host may be a primary storage system and a destination host may be a secondary storage system . To provide end to end packet delivery network layer may contain network addresses select routes to send packets and may provide certain QoS services. A well known network layer protocol is Internet Protocol IP .

Data link layer manages node to node or hop to hop packet delivery. Data link layer ensures that an initial connection has been set up divides data to be transmitted over a network into data frames and handles the acknowledgements from a destination host that indicate that transmitted data arrived successfully. Physical layer translates packets from data link layer into a signal for transmission over network . Physical layer ensures that bits are properly modulated for transmission and that received information is properly demodulated. The aforementioned layers may be a software function or module existing in operating system and may include sub layers for performing specific services within a layer as desired.

Various compression and decompression services may be provided by compression modules and provided within storage systems and respectively. Compression and decompression services are provided by compression modules and to transport layers and via application programming interfaces APIs and . Exemplary compression algorithms used by compression modules and may include those provided by Ziv Lempel Lempel Ziv Renau LZR WinZip Phil Katz ZIP PKZIP or any other program used to perform data compression. APIs and provide mechanisms for the compression modules to able to communicate and exchange compression related information. In one of embodiment of the invention compression modules and may be executed and managed by one of processors thereby providing dedicated hardware resources for compression and decompression.

For data replication software modules and multiple transport layer communication sessions between data storage systems and to replicate update or move data may be established. SnapMirror is an example of a data replication software module commercially available by Network Appliance Inc. of Sunnyvale Calif. that may be implemented in exemplary embodiments of the present invention. In a communication session for data replication data in a primary storage media such as storage media associated with storage system shown in may be replicated and communicated to storage system that stores the replicated data in secondary storage media such as storage media . In the event that data in a primary storage media cannot be accessed by storage system in response to a request by computer the data may be retrieved from a secondary storage media associated with storage system .

Compression modules and may establish a different compression algorithm for each transport layer communication session. Effective system throughput is increased if a compressed data packet unlike a decompressed data packet is lost since the compressed data packet is smaller than the size of an uncompressed packet in a given transmission window. This becomes advantageous when a lost data packet needs to be retransmitted in a transmission window. A transmission window may be a maximum amount of data transport layers and can receive within a predetermined time frame.

If compression is supported step compression software modules and determine compatible transport layer compression parameters step by checking a list of supported compression parameters that may be stored at modules and such as compression types and compression ratios respectively. Different compression parameters may be chosen individually for each transport layer communication session established by applications to and to respectively. The compression parameters may also be determined by the type and size of each data packet to be transmitted in a communication session or a predetermined user defined compression profile. A user defined compression profile may comprise predetermined compression types and compression ratios. Based on the agreed upon compression parameters available system resources are checked in storage system and and any adjustments to the compression type and ratio are made to optimize performance step . System resources include available buffer memory space and recent utilization of processors . Based on the negotiated compression parameters and available system resources a data compression algorithm is chosen for the session step .

The following example will be given for data replication module requesting compression services. However it is understood to one of ordinary skill in the art that any application layer program may use the aforementioned compression negotiation. For a data replication module requesting compression data is read from a primary storage media and stored in source buffer by the storage operating system in storage system using a read operation step .

If compression was successfully negotiated step the data is compressed by compression module using processors formatted for transmission by transport layer and stored in target buffer step . The compressed data in target buffer may then be transmitted using network adapter to storage system that manages a secondary storage media over network via layers and . Layers and add header information as known in the art. In addition these layers provide services to the compressed data for successful transmission such as routing framing and modulation step . Correspondingly layers and process each header related to the layer until the compressed data reaches transport layer where the data is decompressed by compression module using the negotiated compression algorithm. The decompressed data may be provided to data replication module where it may be stored in storage media attached to storage system .

If any compressed data packets are lost during transmission the transport layers may retransmit the packet. The read compress and transmit steps repeat for as long as data in a primary storage system changes or a communication session is terminated by a user. As a result effective system throughput is improved since the size of a compressed lost data packet is less than the size of an uncompressed data packet when a lost packet needs to be retransmitted in a transmission window.

In process since the compression negotiation is performed via transport layers and it is transparent to and performed without applications to and to that reside in application layers and respectively. Applications to simply request data to be transmitted to corresponding applications to to transport layers and that provide any of the mechanisms necessary for successful data transport or compression via modules and . In the exemplary embodiment applications to and to are also not involved in determining compression support between storage systems and . Therefore applications running on storage systems and may be compatible with any negotiated compression parameters and algorithm determined by compression modules and .

The present invention can be implemented in a computer program tangibly embodied in a computer readable storage medium containing a set of instructions and code segments for execution by a processor or a general purpose computer and method steps of the invention can be performed by a processor executing a program of instructions to perform functions of the invention by operating on input data and generating output data. Suitable processors include by way of example both general and special purpose processors. Typically a processor will receive instructions and data from a read only memory ROM a random access memory RAM and or a storage device. Storage devices suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices magnetic media such as internal hard disks and removable disks magneto optical media and optical media such as CD ROM disks and digital versatile disks DVDs . In addition while the illustrative embodiments may be implemented in computer software the functions within the illustrative embodiments may alternatively be embodied in part or in whole using hardware components such as Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs or other hardware or some combination of hardware components and software components.

While specific embodiments of the present invention have been shown and described many modifications and variations could be made by one skilled in the art without departing from the scope of the invention. The above description serves to illustrate and not limit the particular invention in any way.

