---

title: Supportability framework for mobile software applications
abstract: A system and a method for providing software supportability involve a server receiving a first electronic record from a client application on a mobile computing device. The first electronic record describes activity that occurred at the mobile computing device during a request sent from the client application to the server. The server creates a second electronic record that describes activity that occurred at the server while processing the request. The first electronic record and the second electronic record are stored in association with each other and can be analyzed to determine issues with performance or security. A diagnostic application, based on the stored first electronic record and the second electronic record, identifies at least one faulty component at the server or the mobile computing device to correct the identified at least one faulty component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09645880&OS=09645880&RS=09645880
owner: SAP SE
number: 09645880
owner_city: Walldorf
owner_country: DE
publication_date: 20141028
---
This application claims priority of IN Patent Application No. 4454 CHE 2014 filed on Sep. 11 2014 which is herein incorporated by reference in its entirety.

The present invention relates to providing supportability for mobile software applications through logging tracing diagnostics and other activities that facilitate technical support in connection with the development installation or monitoring of applications and or devices involved in executing those applications.

Supportability has been implemented in varying degrees in the context of mobile computing. For example some mobile operating systems include a logging feature which is accessible to a developer or administrator. However support functionality has not been uniformly adopted and is typically platform application or device specific so there is no way to access the same functions across different platforms devices or applications. For this reason support functions have traditionally been focused on the device itself rather than the system as a whole. Additionally support functionality has not been integrated with analysis tools application program interfaces and user interfaces that enable administrators developers and other entities interested in recorded data to precisely control the manner in which the data is recorded and analyzed for a plurality of applications or software components in a complex system landscape.

In an example embodiment a system and a method for providing software supportability involve a server receiving a first electronic record from a client application on a mobile computing device wherein the first electronic record describes activity that occurred at the mobile computing device during a request sent from the client application to the server. The server creates a second electronic record that describes activity that occurred at the server while processing the request. The server stores the first electronic record and the second electronic record in association with each other. A diagnostic application based on the stored first electronic record and the second electronic record identifies at least one faulty component at the server or the mobile computing device to correct the identified at least one faulty component.

In an example embodiment the server transmits at least one of the first electronic record and the second electronic record to the diagnostic application which performs an analysis to determine based on the least one of the first electronic record and the second electronic record at least one of a performance of the mobile computing device or the server security issues that occurred during the request and errors that occurred at the mobile computing device or the server during the request. The analysis may identify a component located in the mobile computing device or the server and associated with a security issue or error as being a faulty component that is a component to be fixed.

In an example embodiment electronic records are associated with each other using an identifier of the client application.

In an example embodiment electronic records are created using a shared format that is platform independent.

Example embodiments of the present invention relate to a system and methods for providing supportability for mobile applications. In an example embodiment supportability may include but is not limited to logging tracing root cause analysis monitoring reporting alerts automated fixing of errors landscape management crash reporting and visualization of recorded data.

In an example embodiment a system and a method involve end to end E2E tracing of activities at a device in the system to create records concerning an application executed on the device device status information and system components used to process requests from the application. Although logging and tracing both involve recording they are different in that logging involves recording data that is typically of interest to an end user of the mobile device or a system administrator whereas data recorded by tracing is primarily of interest to software developers when writing or testing the application e.g. application specific data or server component specific data. Examples of logged data parameters and traced data parameters will be described.

In an example embodiment logging and tracing meet the supportability requirements specified by SAP Active Global Support AGS . To that end an example system according to the present invention provides for root cause analysis which is based on four categories of analysis E2E change analysis E2E workload analysis E2E exception analysis and E2E trace analysis. Trace analysis involves data recorded during tracing. Exception analysis involves statistical analysis of application exception data to for example determine exception trends or review exception situations after a system change has occurred. Exceptions may be grouped for analysis or display e.g. a specified number of exceptions occurring within a specified time period. Workload analysis may involve using key performance indicators KPIs to assess the workload of specific components. Change analysis may provide statistical data on system changes e.g. version updates. Root cause analysis may be implemented using SAP Solution Manager in combination with additional diagnostic tools such as Introscope available from CA Wily Technology.

In an example embodiment a system according to the present invention integrates support functionality into the system landscape directory SLD component of SAP NetWeaver . SLD compatible software products are mapped to provide a comprehensive overview of the system landscape which landscape may include for example a collection of related products used by a business customer or other entity. The landscape information is especially useful for product life cycle management. An example system is configured to register itself with SLD so that the landscape view of the system components is automatically updated whenever the system changes e.g. when a new client application is installed or a configuration change is made at the server. Landscape information may identify a host server server nodes version numbers of installed software components and other information about the system.

In an example embodiment logs are created for both client side and server side activity. The client logs are stored in association with server side logs by uploading the client logs to the server. A correlation identifier Correlation ID may be generated by a client application to be unique to that application. The Correlation ID is used to tag requests from the client application and follows the request as it travels from the client side to the server side and back i.e. from end to end. A client log may be created whenever a call is initiated on the client side e.g. a request for data on a backend data service such as a database an Open Data Protocol OData service or a Web service. The call is tagged using the Correlation ID which is parsed by each component as the call flows from end to end. The Correlation ID may be injected into the Hypertext Transfer Protocol HTTP header of each client request and forwarded by the application server to all servers or components involved in the workflow of the client request. Although the client and server logs are stored in association with each other the system may differentiate between the client server logs e.g. based on the information contained therein to enable pinpointing of the precise location in the system that is causing an issue.

In an example embodiment end to end tracing records information contained in what is known as an SAP Passport. This information may include for example a Transaction ID that is unique for each request made by the client to the server. It may also include a Root Context ID that is unique for each session established between the client and the server. Similar to the Correlation ID the Passport may be injected into the HTTP header of each client request.

The combination of client and server side logging helps pinpoint the exact system component that may be causing an issue. The logs capture the flow in which a particular mobile scenario was executed including the order of execution thereby assisting the end user developer or other interested entity to understand the processes executed by each system component and to identify technical or security issues if any.

In an example embodiment logs recorded by third party legacy or other components that provide native logging functionality are tagged using the Correlation ID. The native logging is performed under the hood in that these components generally perform the logging without the knowledge of the end user or administrator. Logs created in this manner may be stored in association with data recorded by a logging and tracing service according to an example embodiment of the present invention.

In an example embodiment the system is configured to perform smart diagnostics in which performance or security issues are detected and or predicted based on recorded data and automatically fixed. For example the system may monitor the number of threads used by an application and increase the thread count upon reaching a threshold number of threads. Trigger events may cause alerts to be output to an end user developer or administrator via a user interface UI . Thus alerts can be set based on counter values exceeding a predefined threshold to trigger actions such as sending a message to the end user the administrator or another entity executing a diagnostic program or initiating recording.

In an example embodiment recorded data are uploaded to an SAP HANA database to provide access to enhanced data processing and analytics.

In an example embodiment the system communicates with third party diagnostic tools by sending crash logs to the diagnostic tools which analyze the information contained in the crash logs to determine why an application crashed and how the problem can be fixed. The system may automatically send the crash logs to a third party diagnostic tool following a crash using a third party crash reporting application that is integrated with the system. The third party crash reporting application generates a crash log after a crash has occurred but before the application dies. The crash log may then be used for fixing the issue s that led to the crash. Thus the system can be integrated with third party tools to proactively send crash data.

On the server side a runtime component may include a support service that implements support functionality including logging and tracing. The runtime component may be a mobile computing specific software application e.g. running on SAP Mobile Platform . The support service may include a logging and tracing service a Solution Manager integration component an SLD data supplier and a Change and Transport System CTS integration component . Components installed on the server may include for example an OData proxy component an Agentry component a Mobilizer component a Mobilink component and a CSI component CSI is a security software suite for auditing system data .

The logging and tracing service is configured to receive client side logs generated by a client side logging component in addition to generating server side logs based on data captured at the server e.g. data from any of the components . The client logs and server logs may share the same file format may be synchronized with the aid of the Correlation ID and transmitted by the Solution Manager Integration component to an instance of SAP Solution Manager via an Solution Manager Diagnostics SMD agent . The SMD agent may also transmit the logs to the diagnostic agent for further analysis. Additionally or alternatively the client server logs may be stored in a log trace storage database and transmitted for analysis by the third party agent .

The SLD data supplier periodically captures a snapshot of the system landscape. The snapshot may be timestamped and captured at predetermined time intervals and or whenever a system component changes thereby delivering up to date landscape information. The landscape information may be delivered in an Extensible Markup Language XML format or another standard format.

The CTS integration component is used to transport changes made in the client and or the server to another system in the landscape e.g. a development or testing system.

An administration portal provides remote access to the support service by an administrator UI which is a user interface by which a developer or administrator can configure logging and tracing e.g. by setting a severity level required for activity to be recorded. The administrator UI may access logs in the storage receive results of an analysis performed by the Solution Manager and or by the diagnostic agent and may display the results in table graph list spreadsheet or other formats. The severity level may be set for each component individually or to a default level without requiring restarting of the server . Severity levels can range from recording all activity to only recording critical errors e.g. errors that prevent the application from executing properly or errors that compromise the security of the application . Logging may also be disabled entirely.

The administrator UI may include at least one of the following features displaying server logs and client logs simultaneously and or concurrently to provide information about the cause of problematic system or application behavior displaying different log types switching display of records between human and computer readable formats management of log levels for individual client and server components at runtime identifying logs from client and server machines in the E2E pathway manual filtering and searching of logs merging logs across multiple servers purging logs viewing archived logs enabling disabling E2E tracing for the entire system setting trace level viewing and managing application trace records separately from client or server logs view and managing security logs configuring the Solution Manager enabling disabling or otherwise configuring the diagnostic agent and controlling log or trace settings for individual client applications.

The E2E trace component captures trace records in accordance with tracing requirements specified in the application .

The client logging framework captures log data according to a logging severity level specified by the application . The severity level of the client logs may automatically be adjusted based on responses from the server . For example a default severity level may not capture uniform resource locator URL errors. If a client requests access to a URL address that returns a URL error such as a error the severity level may be raised to capture subsequent URL errors. The code that implements the client logging framework may be added to the client application at any time during development. Since the client logging framework can be separate from the code for the application itself logging can be added or removed without affecting the operation of the application .

The log trace storage stores log data from the client logging framework and trace data from the E2E trace component and is analogous to the log trace storage in the server . The log data and the trace data are tagged with the Correlation ID to enable synchronizing with server side logs trace records.

A client log upload service is configured to transmit client logs trace records to the runtime component at the server . Logs and trace records may be automatically uploaded at predefined intervals or based on predefined trigger events such as when an application switches to foreground execution from background execution. The log upload service may also upload the details of the request as a business transaction BTX to the runtime component . Additionally the client logs may be uploaded automatically following a trigger event such as when the application crashes or each time the application is launched. The logs may also be manually uploaded e.g. following a crash. The log upload service may with the aid of the Correlation ID automatically synchronize client logs and trace records uploaded to the server with existing logs trace records stored at the server . In addition to uploading the client logs the client log upload service may interface with a crash reporting application that generates a crash log containing crash relevant information after a crash has occurred but before the application dies.

The client may include a native log framework that creates logs independently of the client logging framework . The developer UI may access the logs created by the native log framework through a console provided for example by a publisher of the client device s operating system.

In an example embodiment log formats are based on a standard format but tailored to mobile computing environments. Table 1 below is a list of example of server log parameters. Table 2 is a list of example of client log parameters.

At step the SAP Passport is created at the client application with the aid of an E2E trace library which may be packaged with the application or subsequently installed e.g. as a plug in.

At step the application starts tracing and then sends a request to the server step . The request may include the Passport in addition to the Correlation ID both of which can be added to an HTTP header of the request.

At step the Passport is reported to the diagnostic agent to enable the agent to analyze the corresponding trace records.

At step the server logs the Passport by storing it together with trace data in the log trace storage while processing the request.

At step the server updates the outbound Passport e.g. in response to a request from an OData proxy component. If updated the Passport is reported again to the diagnostic agent step .

At step the server or a relay server transmits the request to a backend service together with the Passport in an HTTP header. If the backend is an Advanced Business Application Programming ABAP server the Passport may be passed using a Java Connector JCo function call.

At the application stops tracing after receiving the response. The application then creates a BTX based on the request and or the response with the aid of definitions in the E2E trace library step . The BTX may be formatted in XML or another standard format.

At step the client may upload the BTX to the Solution Manager for analysis. When the BTX is received at the server it may trigger an upload to the Solution Manager e.g. in synchronization with uploading of corresponding logs and the server may notify the client when the upload occurs.

Table 3 below is a list of example trace record parameters for an application that consumes OData. The system may implement similar trace parameters for other types of applications such as Agentry or CSI.

In an example embodiment the logging and tracing service records audit logs which are separate from the client and server logs. Audit logs contain information describing security relevant events i.e. any event that may affect the confidentiality integrity and or availability of the system . Examples of security relevant events include server start stop failed logins failed authorization checks start of critical transactions and changes to critical system parameters. Similar to tracing audit logging may be turned off by default. Access to audit logs may be restricted to authorized entities such as the administrator.

Table 4 below is a list of example audit log parameters. As with the example parameters in Tables 1 to 3 not all of the parameters listed need to be included in every log. However the audit logs may include at least a timestamp of when the event occurred a user ID associated with the event and in cases where the client requests access to an external source the source s IP address. The audit logs may be designed to comply with security regulations such as Public Interest Litigation PIL security standards in India and similar regulations of other government entities. Various types of audit logs may be recorded to meet regulatory requirements. For example a data read access log may capture attempts to access sensitive personal data in compliance with Section 254 of the Telecommunications Act of 1996 a configuration change log may capture changes to configuration data in compliance with Section 257 of the Communications Act of 1934 and a security event log may capture security relevant events in compliance with Section 215 of the Uniting and Strengthening America by Providing Appropriate Tools Required to Intercept and Obstruct Terrorism USA PATRIOT Act.

At step the server creates an additional record based on processing of a request from the client application .

At step the server stores the additional record in association with any records associated with the same request based on the Correlation ID. This may include the record from step .

At step the server transmits stored records for analysis by the Solution Manager the diagnostic agent and or the third party agent . The server may transmit the records in real time periodically in batches of a predefined number of records at predefined intervals after each request is fully processed based on trigger events or on demand. The analysis results may be reported directly to the Admin UI . Alternatively or additionally the results can be transmitted to the server for storage and subsequent access by the Admin UI .

At step the server transmits selected records that share the same category for output to the administration portal . As mentioned earlier records may be categorized by application or by component e.g. OData Agentry CSI etc. . The server may transmit these selected records in response to a request from the Admin UI .

In an example embodiment the system may perform smart diagnostics by detecting and automatically fixing predefined error conditions and other issues based on analysis results from one or more of the Solution Manager the diagnostic agent the third party agent or another diagnostic tool. Automated fixing may include for example load balancing distributing work load from the client application across different servers or other processing components resource management e.g. increasing or reducing the number of threads or the amount of memory allocated to the client application security management e.g. locking sensitive data from being accessed or blocking requests from unauthorized applications or client devices and other measures that the developer or the administrator can specify.

Independent of whether the system attempts to fix detected issues analysis results may be monitored and reported to the developer or administrator e.g. via the Admin UI . Reporting may involve for example statistical or other information on resource usage software component usage execution flows cluster activity where requests from the client application are processed by one or more servers in a cluster and database activity e.g. access to a backend database .

In an example embodiment the system may perform under the hood logging in addition to providing a standard logging format for all the components in the system including third party open source or legacy components. The third party open source or legacy components may include their own native logging tracing methods and different recording formats. The system may include a tool with an application program interface to native logging tracing processes so that native logs traces can be analyzed and or reported together with the logs traces created through the methods described above. To standardize the different recording formats the system may convert the native logs traces into the same format as the earlier described client and server logs or trace records for example by adding the Correlation ID and using a shared file format such as an XML format to store all the logs traces in the system. Thus the native logs traces can be incorporated into an E2E scenario description.

An example embodiment of the present invention is directed to one or more processors which can be implemented using any conventional processing circuit and device or combination thereof e.g. a CPU of a Personal Computer PC or a mobile computer or other workstation processor to execute code provided e.g. on a hardware computer readable medium including any conventional memory device to perform any of the methods described herein alone or in combination. The one or more processors can be embodied in a server or user terminal or combination thereof. The user terminal can be embodied for example as a desktop laptop hand held device Personal Digital Assistant PDA television set top Internet appliance mobile telephone smart phone etc. or as a combination of one or more thereof. The memory device can include any conventional permanent and or temporary memory circuits or combination thereof a non exhaustive list of which includes Random Access Memory RAM Read Only Memory ROM Compact Disks CD Digital Versatile Disk DVD and magnetic tape.

An example embodiment of the present invention is directed to a non transitory hardware computer readable medium e.g. as described above on which are stored instructions executable by a processor to perform any one or more of the methods described herein.

An example embodiment of the present invention is directed to a method e.g. of a hardware component or machine of transmitting instructions executable by a processor to perform any one or more of the methods described herein.

The above description is intended to be illustrative and not restrictive. Those skilled in the art can appreciate from the foregoing description that the present invention may be implemented in a variety of forms and that the various embodiments can be implemented alone or in combination. Therefore while the embodiments of the present invention have been described in connection with particular examples thereof the true scope of the embodiments and or methods of the present invention should not be so limited since other modifications will become apparent to the skilled practitioner upon a study of the drawings and specification. Further steps illustrated in the flowcharts may be omitted and or certain step sequences may be altered and in certain instances multiple illustrated steps may be simultaneously performed.

