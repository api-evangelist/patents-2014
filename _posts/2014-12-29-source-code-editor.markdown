---

title: Source code editor
abstract: Disclosed herein are technologies for facilitating source code editing. In accordance with one aspect, a request for an editing feature is received in response to an editing operation associated with a library. In response to the request, metadata may be extracted from the source code file of the library and used to present the editing feature.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448770&OS=09448770&RS=09448770
owner: SAP SE
number: 09448770
owner_city: Walldorf
owner_country: DE
publication_date: 20141229
---
Source code editors are text editors that enable a user e.g. software developer programmer coder designer etc. to edit source code. It may be a standalone software application or built into an integrated development environment IDE . Some source code editors are made available to users on demand via the Internet from cloud computing provider s servers i.e. cloud based .

Common editing features provided by source code editors include syntax checking while the user types providing warning of syntax problems autocomplete or code assistance syntax highlighting and so forth. For example autocomplete or code assistance is a convenient feature that involves the source code editor predicting a word or phrase that the user wants to type without the user typing it completely and providing suggestions for the user to select. Such editing features typically support native language elements e.g. JavaScript and some common third party open source libraries e.g. node.js express etc. . Such editing features rely on metadata to obtain information on the structure of the programming elements such as the signature of the object parameter type of the application programming interface API etc. Such metadata is typically manually generated based on the relevant language standard specification e.g. ECMAScript specification which formalizes JavaScript .

One problem with conventional source code editors however is that they do not readily support the introduction of new third party libraries. The user may desire to use third party libraries e.g. SAP UI5 Apache Cordova jQuery etc. developed by another entity other than the current user to improve the efficiency and quality of developing software applications. Such libraries often change frequently and there is no stable language specification to refer to for manual generation of the metadata. The user typically needs to wait for the provider to release an upgraded version of the source code editor in order to use editing features that support new third party libraries.

Another problem with conventional source code editors particularly cloud based source code editors is that they require high bandwidth or resources to download or generate the metadata used by the editing features. To support third party libraries a large amount of metadata may need to be downloaded. Large volumes of source code in user defined objects may need to be parsed to generate such metadata.

A computer implemented technology for facilitating source code editing is described herein. In accordance with one aspect a request for an editing feature is received in response to an editing operation associated with a library. In response to the request metadata may be extracted from the source code file of the library and used to present the editing feature.

With these and other advantages and features that will become hereinafter apparent further information may be obtained by reference to the following detailed description and appended claims and to the figures attached hereto.

In the following description for purposes of explanation specific numbers materials and configurations are set forth in order to provide a thorough understanding of the present frameworks and methods and in order to meet statutory written description enablement and best mode requirements. However it will be apparent to one skilled in the art that the present frameworks and methods may be practiced without the specific exemplary details. In other instances well known features are omitted or simplified to clarify the description of the exemplary implementations of the present framework and methods and to thereby better explain the present framework and methods. Furthermore for ease of understanding certain method steps are delineated as separate steps however these separately delineated steps should not be construed as necessarily order dependent in their performance.

The framework described herein may be implemented as a method computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer usable medium.

One aspect of the present framework provides a source code editor that dynamically supports the importation of new or updated libraries. Such new or updated libraries include one or more reusable software components that have not been previously supported by the source code editor. The framework dynamically generates metadata based on these new or updated libraries. The metadata may be used by the source code editor to provide editing features when the user e.g. software developer employs software components of these libraries into the current project source code. Such metadata may be packaged into compressed files to advantageously reduce the number of downloading requests. These and various other features and advantages will be apparent from the following description.

For illustration purposes the present framework may be described in the context of providing an autocomplete editing feature. It should be appreciated however that the present framework may also be applied to provide other types of editing features such as auto hint go to or view definition for a library defined object other language reflection feature and so forth.

Computer system includes a processor device or central processing unit CPU an input output I O unit and a memory module . Other support circuits such as a cache power supply clock circuits and a communications bus may also be included in computer system . In addition any of the foregoing may be supplemented by or incorporated in application specific integrated circuits. Examples of computer system include a handheld device a mobile device a personal digital assistance PDA a workstation a server a portable laptop computer another portable device a mini computer a mainframe computer a storage system a dedicated digital appliance a device a component other equipment or some combination of these capable of responding to and executing instructions in a defined manner.

Memory module may be any form of non transitory computer readable media including but not limited to dynamic random access memory DRAM static random access memory SRAM Erasable Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory devices magnetic disks internal hard disks removable disks magneto optical disks Compact Disc Read Only Memory CD ROM any other volatile or non volatile memory or a combination thereof.

Memory module serves to store machine executable instructions data and various programs such as an operating system a code editor a metadata generator and a metadata packager for implementing the techniques described herein all of which may be processed by processor device . As such the computer system is a general purpose computer system that becomes a specific purpose computer system when executing the machine executable instructions. Alternatively the various techniques described herein may be implemented as part of a software product which is executed via the operating system . Each computer program may be implemented in a high level procedural or object oriented programming language e.g. C C Java etc. or in assembly or machine language if desired. The language may be a compiled or interpreted language. The machine executable instructions are not intended to be limited to any particular programming language and implementation thereof. It will be appreciated that a variety of programming languages and coding thereof may be used to implement the teachings of the disclosure contained herein.

In some implementations code editor provides source code editing services resources and or features that may be assessed via a user interface e.g. internet browser implemented at client computer . Code editor may be implemented as part of a cloud or web based integrated development environment IDE that includes additional components such as a compiler a debugger and a graphical user interface builder. Alternatively code editor may operate outside the IDE. The IDE may be used to create for example cloud and or native software applications or apps . Metadata generator serves to dynamically generate metadata in response to the importation of new libraries e.g. third party libraries . Metadata packager serves to package the metadata to improve the performance of editing features. As shown code editor and metadata packager may reside in the same system . Alternatively they may reside in different systems. For example metadata packager may provide a remote service to the code editor via a web service.

Computer system may serve to provide one or more third party libraries . The one or more third party libraries may be imported by the user e.g. software developer programmer etc. at client computer into a current project. The third party library may be downloaded or retrieved from the computer system into computer system .

It should be appreciated that the different components of the computer system may be located on different machines. For example code editor metadata generator and metadata packager may reside in different physical machines. It should further be appreciated that the different components of the client computer may also be located in the computer system . All or portions of system may be implemented as a plug in or add on.

At code editor requests candidate proposals for auto completion. It should be appreciated that other types of editing features may also be requested. The auto completion editing feature may include an auto completion list function help text auto completion hint etc. In some implementations the request is made in response to an editing operation performed within a user interface of the code editor . The auto completion editing feature may be implicitly or explicitly invoked by for example typing or entering one or more characters. For example the editing operation may include entering source code characters during source code editing by the user. The editing operation may be associated with a new or updated library that has not been previously supported by the code editor . For example a user may use the user interface that accesses services of the code editor to enter project source code that employs one or more software components provided by a new or updated third party library . Alternatively the auto completion editing feature may be explicitly invoked by one or more pre defined characters e.g. ctrl and space user defined key etc. or a menu command.

Returning to at in response to the request for auto completion metadata packager invokes metadata generator to generate metadata. Metadata generator parses third party library to generate static metadata associated with the third party library . A user interface may be provided to facilitate the generation of static metadata.

In some implementations static metadata is generated by parsing a syntax tree or abstract syntax tree of the library source code. The syntax tree represents the abstract syntactic structure of the library source code with each node denoting a construct occurring in the source code. Other types of metadata representations or data structures are also useful.

If the comments in the source code file is incorrect or incomplete e.g. missing tags unclosed comments section etc. a second metadata generator may be invoked. The second metadata generator is capable of handling missing or incorrect comments by for example comparing what is being documented in the comments with the actual function parameters. In some implementations second metadata generator is a JavaScript parser e.g. Esprima that retrieves every comment including incomplete or incorrect comment in the source code and links the comment to a related syntax node to generate a syntax tree. It should be appreciated that in some scenarios or implementations only one metadata generator is used.

A patching mechanism may also be provided to correct the comments by including a patch file outside the library source code that overrides the incorrect or incomplete information in the comments embedded in the source code file . Alternatively the metadata may be generated from scratch based on the actual source code. For example the metadata may be generated based on actual function parameters or any other source code portions of the library source code file .

To improve the performance of the code editing IDE an asynchronous model may be used to generate metadata. The asynchronous model allows threads to continue to execute without waiting for an operation to complete. A thread of execution refers to the smallest sequence of programmed instructions that can be managed independently by a scheduler e.g. operating system . In some implementations the thread that generates metadata executes asynchronously without blocking the user interface UI thread of the IDE. The UI thread that generates the user interface and allows the user to perform other operations e.g. source code editing while the metadata is generated.

In addition parsing may be performed incrementally to advantageously avoid unnecessary full content parsing. More particularly existing previously generated metadata may be cached and incrementally updated with extracted metadata associated with changed or added portions of the library source code. For example if the third party library source code is updated in a new version of the library the existing syntax tree associated with the old version is retrieved from the system s cache and updated with new metadata associated with the updated portions. User defined object metadata may be cached to advantageously avoid repeated parsing and metadata generation.

Further metadata packager may invoke a file compression component e.g. jzip to package the metadata into a compressed metadata package . The compressed metadata package has a reduced file size that advantageously reduces the number of downloading requests.

Returning to at the metadata packager returns the compressed metadata package. At code editor receives the metadata package and generates context based candidate proposals for auto completion based on the metadata. The candidate proposals may be presented to a user as the user edits program source code in the code editor via user interface . The candidate proposals may be in the form of for example function help hints or list of suggestions for completing a word or phrase that the user desires to input without actually entering the word or phrase completely and so forth.

Although the one or more above described implementations have been described in language specific to structural features and or methodological steps it is to be understood that other implementations may be practiced without the specific features or steps described. Rather the specific features and steps are disclosed as preferred forms of one or more implementations.

