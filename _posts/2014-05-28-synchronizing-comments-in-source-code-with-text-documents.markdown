---

title: Synchronizing comments in source code with text documents
abstract: Various embodiments synchronize comments in a source code file with text of a source code document. In one embodiment, a source code document is compared to a corresponding source code file. The source code document comprises a set of text corresponding to a set of source code comment text in the corresponding source code file. The source code document is configured to display the set of text in a stylized format when presented to a user. The set of text in the source code document is determined to be different than the set of source code comment text in the source code file based on the comparison. At least the set of source code comment text in the source code file is automatically changed based on the set of text from the source code document and in response to the determination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09372689&OS=09372689&RS=09372689
owner: International Business Machines Corporation
number: 09372689
owner_city: Armonk
owner_country: US
publication_date: 20140528
---
The present disclosure generally relates to source code and more particularly relates to synchronizing comments in source code with text documents.

Publishing product quality documentation on application programming interfaces typically requires the collaboration of programmers and professional technical writers. Programmers generally add text to comment areas in the source code while professional technical writers edit and format the source code comments so that they are suitable for presentation to customers. Generally a manual and thus cumbersome and error prone process is required to keep the comments in the source code synchronized with improvements to the documentation made by technical writers. Likewise changes in the source code and associated comments implemented by programmers usually need to be manually merged with the documentation.

In one embodiment a method for synchronizing comments in a source code file with text of a source code document is disclosed. The method comprises comparing a source code document to a corresponding source code file. The source code document comprises a set of text corresponding to a set of source code comment text in the corresponding source code file. The source code document is configured to display the set of text in a stylized format when presented to a user. The set of text in the source code document is determined to be different than the set of source code comment text in the source code file based on the comparison. At least the set of source code comment text in the source code file is automatically changed based on the set of text from the source code document and in response to the source code document being different than the set of source code comment text in the source code file.

In another embodiment an information processing system for synchronizing comments in a source code file with text of a source code document is disclosed. The information processing system comprises memory and at least one processor communicatively coupled to the memory. A source code comment synchronizer is communicatively coupled to the memory and the processor. The source code comment synchronizer is configured to perform a method. The method comprises comparing a source code document to a corresponding source code file. The source code document comprises a set of text corresponding to a set of source code comment text in the corresponding source code file. The source code document is configured to display the set of text in a stylized format when presented to a user. The set of text in the source code document is determined to be different than the set of source code comment text in the source code file based on the comparison. At least the set of source code comment text in the source code file is automatically changed based on the set of text from the source code document and in response to the source code document being different than the set of source code comment text in the source code file.

In a further embodiment a computer program product for synchronizing comments in a source code file with text of a source code document is disclosed. The computer program product comprises a storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method. The method comprises comparing a source code document to a corresponding source code file. The source code document comprises a set of text corresponding to a set of source code comment text in the corresponding source code file. The source code document is configured to display the set of text in a stylized format when presented to a user. The set of text in the source code document is determined to be different than the set of source code comment text in the source code file based on the comparison. At least the set of source code comment text in the source code file is automatically changed based on the set of text from the source code document and in response to the source code document being different than the set of source code comment text in the source code file.

The server system s comprises a source code document generator SCDG and a source code comment synchronizer SCCS . It should be noted that one or more of these components can also be situated on at least one of the user systems . It should also be noted that the SCDG and or the SCCS can be part of the source code editor and vice versa. Also the SCCS can be part of the SCDG and vice versa. The SCDG in one embodiment comprises a source code parser a digest generator and a formatter . The SCDG takes as input source code files and generates one or more source code documents comprising at least the source code comments from the inputted source code file . In some embodiments the source code documents also comprise at least a portion of the source code from the source code file as well. In some embodiments the source code documents may be stored on the user system s comprising the document editor .

In one embodiment the generated source code document is a markup document such as but not limited to a HyperText Markup Language HTML document a Darwin Information Typing Architecture DITA document and or the like. The source code document comprises the source code comments and optionally at least a portion of the source code from the corresponding source code file formatted according one or more formatting rules . The SCDG and each of its components are discussed in greater detail below.

The SCCS comprises a change identifier and a merger . The SCCS synchronizes changes made to the source comment material within a source code document with the comments in the source code file . The SCCS also synchronizes changes made to source comments within a source code file with a source code document previously generated for the source code file . The SCCS and its components are discussed in greater detail below.

At least a second of the user systems comprises a document editor . The document editor enables a user such as a technical writer to view and edit source code documents . For example the document editor displays the text of a source code document to a user based on the format defined by the source code document . The user then reviews and or edits the text formatting of the source code document via the document editor . As will be discussed in greater detail below the changes made to the text of the source code document can then be merged into the corresponding source code file . It should be noted that the document editor can be part of the source code editor and or the SCDG .

The following is a more detailed discussion on synchronizing source code comments with text documents. In one embodiment a user such as a programmer developer generates source code via the source code editor and stores the source code in a source code file . shows one example of a portion of source code created by the user. In particular shows a window of a source code editor presenting a portion of source code for a source code file entitled Vwap.spl . The portion of source code in this example comprises comments lines to and a source code artifact such as a composite operator Vwap starting on line associated with the comments . The comments in this example provide an overview description of the source code artifact with respect to a given input and also identify other operators functions utilized or associated with the source code artifact .

In one embodiment the comments are created utilizing various syntax and rules defined in the specification for the programming language being used to create the source code . For example programming languages generally adhere to a defined specification that defines the syntax and semantics of the language. These specifications often define how comments are to be entered in the source code and can also specify define characters or group of characters that are to be used when entering comments. For example shows that the character group has be utilized to designate the beginning of a descriptive block of comments and the character group has been utilized to designate the end of the descriptive block of comments .

In addition a user can enter the source code comments according to formatting specifications rules associated with the SCDG . These specifications rules identify characters or group of characters that a user can enter before and or after text in the comments to have formatting tags applied thereto. For example shows that the user has entered a symbol before the text Overview and Example in lines and respectively. In this example the symbol instructs the SCDG to style the text Overview and Example in a bold font. also shows that the user has entered the characters before and after source code artifact names such as out and data in line Aggregate in line FileSink in line BargainIndex in line and vwap and index in line . In this example the character group instructs the SCDG to apply an italicized style to the text between the beginning and ending character groups.

Once the user programmer has finished adding source code and or comments the source code file is saved and stored. The programmer technical writer and or any other user are then able to submit the source code file to the SCDG . The SCDG receives the source code file as input and generates a source code document for the source code file . In one embodiment when the SCDG receives the source code file the source code parser parsers the file to identify source code and comments in the file . For example the parser is configured with various programming language rules specifications for one or more programming languages that allow the parser to determine what text in the source code file is source code and what text is a comment. In one embodiment the parser is configured to identify comments by detecting one or more characters indicating the start and or end of a comment or comment block. For example the parser looks for characters or character groups such as and or the like when identifying comments. The parser in one embodiment identifies text within the file that is not associated with a comment character as source code.

Once the source code comments are identified by the parser the SCDG extracts the comments . The formatter then applies one or more markup tags to the extracted comments . In one embodiment the formatter applies the markup tags based on or more formatting rules specifications . These formatting rules specifications instruct the formatter on how to stylize format the comment text based on a current state of the text. For example the formatting rules specifications configure the formatter to format one or more lines of comment text as a paragraph when these one or more lines are immediately preceded and followed by one or more lines of white space blank lines . These one or more lines of comment text are formatted as a paragraph for example by applying one or more markup tags for paragraphs e.g. and to the identified lines of comment text.

The formatting rules specifications also configure the formatter to identify special formatting characters or a group of characters associated with comment text. For example the formatter is configured to detect formatting characters such as but not limited to and or the like. When formatting characters are detected the formatter applies markup tags to the comment text associated with the formatting characters based on the style defined for these formatting characters by the formatting rules specifications . For example if the formatting rules specifications state that comment text associated with the symbol is to be stylized with a bold font the formatter applies a markup tag such as but not limited to which stylizes the text with a bold font.

In addition to extracting and formatting the source code comments from the source code file the SCDG also creates an entry for the source code document comprising metadata associated with the source code file . In this embodiment the SCDG creates an entry for the source code document comprising the file name of the source code file a digest for the source code file and a timestamp of the most recent update for the source code file . The digest for the source code file in one embodiment is generated by the digest generator . The digest generator applies one or more hashing operations on a source code file to obtain a hash value or digest that uniquely represents the source code file . In other embodiments the digest generator applies one or more hashing operations on at least one portion of the source code file to obtain a hash value or digest that uniquely represents the at least one portion of the source code file . It should be noted that in one embodiment prior to executing the hashing operation the formatter first translates the markup tags as discussed above.

The SCDG also creates an entry for each source code artifact in the source code file associated with at least one line of comments. In one embodiment this metadata entry comprises an identifier of the source code artifact a location e.g. line number s of the artifact within the source code and a digest for the comments associated with the source code artifact. It should be noted that the digest generator in one embodiment is configured to calculate a separate digest for each line of comments associated with source code artifact. However in another embodiment the digest generator calculates a single digest for a block of comments i.e. two or more lines of comments grouped together . The formatter of the SCDG in one embodiment applies one or more markup tags to the metadata entries to hide the metadata when the generated source code documents are presented to the user in the document editor .

The output of the SCDG is a source code document comprising the comments extracted from the source code file the markup tags applied to the comments and the hidden metadata. shows one example of a source code document generated for the source code file shown in . It should be noted that only shows a portion of the source code document for ease of readability. In the example shown in the source code document comprises a first hidden entry and a second hidden entry . The first hidden entry comprises a markup tag that hides the entry when the source code document is displayed to the user via the document editor processor . This entry further comprises the name of the source code file associated with the source code document line number information a digest generated for the source code file and a time stamp of the last update to the source code file . It should be noted that the line number information for the source code file and or the digest for the source code file are not required.

The second hidden entry also comprises a markup tag that hides the entry when the source code document is displayed to the user via the document editor processor . This entry further comprises the name of the source code artifact associated with comments in the source code file a location e.g. line numbers of the source code artifact in the source code file and the digest generated for the comments associated with the source code artifact . The source code document further comprises the comments extracted copied from the source code file for the source code artifact identified in the second hidden entry along with the markup tags applied by the formatter .

The source code documents generated by the SCDG are utilized in one embodiment by users such as technical writers to generate documentation for the source code artifacts within the source code. In this embodiment a user loads a source code document into the document editor . The document editor the presents the content of the source code document to the user via one or more windows. The document editor utilizes the markup tags within the source code document to format and present the source code document content to the user.

The user edits the documents by changing the formatting adding removing text and or the like. For example shows that the user has added a line of text . Once the user has completed reviewing editing the source code document the user saves the source code document . A user such as the author of the source code file is then able to merge the changes made in the source code document into the corresponding source code file . For example a user loads both the source code file and its corresponding source code document into the SCCS . The change identifier of the SCCS analyzes the source code document to identify any changes that have occurred since the document was created or since the document was last analyzed.

In one embodiment changes are detected by calculating the digest of each comment line or block. The change identifier then compares this digest to the corresponding digest in the hidden entry of the document for the source artifact associated with the comments. If the digests do not match then the change identifier determines that a change was made to the corresponding comment text in the source code document . If the digests do match the change identifier determines that no changes were made to the corresponding comment text in the source code document . The change identifier performs this process for each set of comments within the source code document . If no changes are detected in the source code document the SCCS notifies the user that no changes were found.

However if a change is detected in the source code document the merger replaces the comment text in the source code file with the corresponding comment text from the source code document . For example when a change is detected in a section of comment text from the source code document the merger extracts comment text from this section of the document . The merger then replaces the corresponding comment text in the source code file with the extracted comment text. Also as part of replacing the text in the source code file with updated text from the source code document the formatter can map the markup in the comments of the source code document if any to the equivalent markup used in the source code file . The formatting rules define the mappings between the two markups.

In one embodiment the merger identifies the comment text to be replaced in the source code file based on the line number information provided in the hidden entries of the source code document . For example the second entry shown in shows that the source code artifact associated with the comments begins on line . Therefore the merger determines that the corresponding comments start on line and end on line . It should be noted that the entries within the source code document can also explicitly identify the lines of the source code comprising the comments as well. In the current example when the merger extracts the comment text from the source code document it replaces the corresponding comment text in the source code file on lines to with the updated comment text from the source code document .

Once the source code file has been updated the SCCS saves the file . The user is then able to view the updated source code file in the source code editor . For example shows a portion of the updated source code file as presented to the user in the source code editor . As can be seen lines to of the source code file now comprise the new comment text as entered by the technical writer in source code document . In one embodiment the source code editor visually alters the new updated text so that the user can easily identify any differences between the previous version of the source code file and the updated version.

It should be noted that in one embodiment the document editor can automatically send the source code document to the SCCS after a user updates the document . In this embodiment the SCCS automatically detects the changes differences between the source code document and corresponding source code file without a user such as a programmer initiating the synchronization process discussed above. Once the SCCS detects the changes differences between the source code document and the corresponding source code file the SCCS automatically updates the source code file as discussed above. In one embodiment the SCCS identifies the source code file to update based on the metadata entry within the source code document associated with the file . The SCCS can then automatically retrieve the source code file for updating. Once updated the SCCS saves the updated source code file . The SCCS can then notify a user that the source code file has been updated.

The SCCS not only synchronizes comments in a source code file with changes made in a corresponding source code document but also synchronizes text in a source code document with changes made to comments in a source code file . In this embodiment after a source code document has been generated for a source code file the SCCS detects when changes have been made to the corresponding source code file and automatically updates the source code document . This allows for a bi directional mapping between the source code file and the source code document . The formatter support this bi directional mapping based on the formatting rules . In one embodiment each direction of mapping utilizes separate instances of the formatter however this is not required. If the source code document was updated without any concurrent updates to the source code document a new source code document is generated with the changes detected in the corresponding source code file . The previous source code document is replace with this new source code document.

In one embodiment the SCCS also detects and rectifies the situation where the source code file and the source code document are concurrently updated by the developer and technical writer respectively. In this situation the SCCS alerts the user that concurrent update has occurred to the same comment lines. In one embodiment the user manually resolves conflicting updates to the comments if any. The merged comment text is written to both the source code file and source code document . In one embodiment both the source code file and source code document can be updated by updating the source code file and then invoking the SCDG to generate the source code document . The case of a concurrent update may be detected if the timestamp associated with the source code file is greater than timestamp of the document meta data tag and the timestamp associated with source code document is greater than then the timestamp in document meta data tag . In one embodiment the timestamps associated with the source code file and source code document can be maintained by the computer s operating system which timestamps the last time the file was saved. If a concurrent update has not occurred then a replacement operation is performed instead of a merger operation.

Referring to the SCCS enters at step the operational sequence and then proceeds at step analyze a source code document corresponding to a source code file . The source code document at least comprises a set of text corresponding to a set of source code comments in the source code file a plurality of formatting stylizing tags associated with the set of text and a set of metadata and a unique representation for one or more of the source code file and the set of source code comments. The unique representations in one embodiment are digests generated by applying one or more hashing operations on the source code file and the set of source code comments respectively.

The SCCS at step identifies the set of text within the source code document . The SCCS at step generates a unique representation for the set of text. In one embodiment generating the unique representation includes mapping the markup in the source code file to a canonical or normal format. For example text in the source code file and the source code document may include markups using different schema e.g. a designates italics in the source code file and is used to italicize text in the source code document. When generating the unique representation the SCCS can map the markup tags to a canonical representation and then apply the hashing operation. In one embodiment DITA may provide this canonical markup.

The SCCS at step compares the unique representation generated for the set of text with the unique representation of the set of source code comments in the source code document. The SCCS at step determines if the unique representations match. If so the SCCS at step notifies a user that no changes to the source code comments were found in the source code document. However if the unique representations fail to match the SCCS at step merges changes the changed text and formatting markup if any in the source code document with the source code comment in the source code file . If the source code document was changed without any concurrent changes to the source code file the SCCS updates the source code comments in the source code file with the set of text from the source code document . If concurrent updates occurred the merging process discussed above is performed. The control flow exits at step .

Referring now to this figure is a block diagram illustrating an information processing system such as any of the systems shown in which can be utilized in various embodiments of the present disclosure. The information processing system is based upon a suitably configured processing system configured to implement one or more embodiments of the present invention. Any suitably configured processing system can be used as the information processing system in embodiments of the present invention. The components of the information processing system can include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including the system memory to the processor .

Although not shown in the components the user systems and or the server system of can reside within the main memory and or the processor . These components can also be a separate hardware component as well.

The bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

The system memory can also include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . The information processing system can further include other removable non removable volatile non volatile computer system storage media. By way of example only a storage system can be provided for reading from and writing to a non removable or removable non volatile media such as one or more solid state disks and or magnetic media typically called a hard drive . A magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to the bus by one or more data media interfaces. The memory can include at least one program product having a set of program modules that are configured to carry out the functions of an embodiment of the present invention.

Program utility having a set of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the present invention.

The information processing system can also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with the information processing system and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via I O interfaces . Still yet the information processing system can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted the network adapter communicates with the other components of information processing system via the bus . Other hardware and or software components can also be used in conjunction with the information processing system . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. 

The present disclosure may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present disclosure.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present disclosure may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present disclosure.

Aspects of the present disclosure are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

