---

title: Natural language access to application programming interfaces
abstract: Users of online services may avoid having to gain knowledge of the intricacies of specific Application Programming Interface (API) syntaxes and elements by using natural language requests which are processed to extract components of the request. The components are then used to find one or more matches of known APIs, and then at least one structured API call is constructed by mapping the request's components to the structured API call's elements. The system can then invoke the online service on behalf of the client, and return the results to the client, or it can return the constructed structured API call to the client. The known API details can be initialized and updated by ingesting the description documents for the structured APIs, and then using natural language processing to extract components from the descriptions, which can then be utilized in the matching process to further enhance the results of the tool.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092276&OS=09092276&RS=09092276
owner: International Business Machines Corporation
number: 09092276
owner_city: Armonk
owner_country: US
publication_date: 20141230
---
This is a continuation of U.S. application Ser. No. 14 109 527 filed on Dec. 17 2013 by Corville O. Allen et al. and currently under Notice of Allowance.

The related U.S. application Ser. No. 14 109 527 filed on Dec. 17 2013 by Corville O. Allen et al. is incorporated by reference in its entirety including drawings.

This is a continuation of U.S. application Ser. No. 14 109 527 filed on Dec. 17 2013 by Corville O. Allen et al. and currently under Notice of Allowance. This invention relates generally to methods and processes for programming computers and designing program code and particularly to systems and methods which allow for such work to be performed in a natural language format.

An Application Programming Interface API singular APIs plural refers the method or procedure by which one computer program can use the functionality of another program or by which a user and request invoke execution of a service according to his or her wishes. For example a spreadsheet application program running on a personal computer may need to access a database program in order to retrieve certain data from it. In order to do so the spreadsheet program must be programmed in a manner which allows it to invoke or call the database program which would include a variety of control parameters e.g. arguments which indicate to the database program what information is requested by the spreadsheet program. These control parameters may include the database file name if known and search or filter parameters for example a range of customer names transaction dates transaction amounts etc. In another context a user may wish to update his or her status statement on a social networking web account so the user may have to operate a sequence of functions such as logging in authenticating selecting status then selecting edit then typing in the status text and then clicking post .

API often are published or made known to other programmers using a syntax which includes mandatory or required arguments and optional arguments. Some APIs are exposed to other programs so that other programs may discover their existence and make use of their offered functionality. Most API are also dependent on operating system OS details so an API for a database program running on a first OS may be different than the API for the same database program running on a second OS. Similarly different revisions of the same program product may have different APIs because new features may require the addition of mandatory or optional arguments in order to exercise those features.

Some APIs conform to open or consortium developed standards . Such APIs allow programs developed by different suppliers to interoperate with a high degree of certainty that the interface will be successful. However historically such standardized API only encompass a least common denominator of features and functions and often do not include any feature or functions which are unique or specific to just one vendor s product. It is in these different functions that the vendors provide competitive product features so many products offer both standardized and extended APIs where the unique functions are requested via the extensions to the standardized API. As a result if programmers of a new product which their program to be independent and compatible with all suppliers of a particular program type such as databases they will restrict themselves from using any non standard API extensions but this has a cost in that they are unable to use any of the sometimes very effective proprietary functions of some of the available products.

Still other API are entirely proprietary and sometimes are confidential or secret in nature. For example in order to write programs which will interface to certain high value target programs such as stock trading systems the programmer must first obtain permission from the API owner to get the details of the proprietary API which usually involves some degree of certification of the API user as a non threat and a non disclosure agreement to maintain the confidence of the API.

For programmers the result is a landscape of proprietary standardized and extended API for software developers to use which will accelerate their time to market by leveraging existing program functionality from other programs and remote services. As the API are constantly updated revised and created programmers face a considerable challenge to remain aware of the most recent versions of each API.

For users the problem is similar to that of the programmers in which a user may become frustrated trying to figure out how to accomplish similar simple tasks e.g. status update balance inquiry etc. on multiple online services each of which has a different user interface sequence to accomplish the same operation. Even after learning these sequences the user may be frustrated by the smallest of changes or updates to the user interfaces. Thus tools to integrate or provide a dashboard into multiple online services of the same type such as a social networking dashboard or a financial management tools dashboard are becoming popular which abstract the user from needing to know all the specifics of each online account to accomplish the same actions.

Users of online services may avoid having to gain knowledge of the intricacies of specific Application Programming Interface API syntaxes and elements by instead using natural language NL requests which are processed to extract NL components of the request. The NL components are then used to find one or more matches of known APIs and then at least one structured API call is constructed by mapping the request s NL components to the structured API call s elements e.g. arguments parameters etc. . The system can then invoke the online service on behalf of the client and return the results to the client or it can return the constructed structured API call to the client. The known API elements can be initialized and updated by ingesting the description documents for the structured APIs and then using natural language processing NLP to extract optional and required API elements from the descriptions which can then be utilized in the matching process to further enhance the results of the system.

The present inventors have recognized a problem in the art which they believe is as of yet unrecognized by those skilled in the art and unsolved. Web based Application Programming Interfaces APIs allow the transfer of remote resources across the web. Web based APIs have evolved significantly over time. In the early days of the Internet APIs based on Simple Object Access Protocol SOAP and Web Services Description Language WSDL became a popular ways to exchange structured data between networked resources such as between programs servers and services especially in the enterprise computing space. These APIs were very verbose and highly structured which burdens clients with rigid compliance requirements and processing power to work with SOAP and WSDL APIs.

A significant advancement in web based APIs occurred more recently called REpresentational State Transfer REST . REST APIs favor simplicity via stateless transactions allowing clients to perform stateless Hyper Text Transfer Protocol HTTP operations against simple Uniform Resource Locator URL endpoints to access remote networked computing resources. The data payload provided via the API is usually eXtensible Markup Language XML or JavaScript Object Notation JSON . REST APIs quickly became and currently remain one of the most popular choices for transferring remote resources across the web.

For example IBM Lotus Connections may expose e.g. publish to other programs and systems the following REST based endpoints to access activities profile information and friends 

These resources may be retrieved created updated or deleted via standard HTTP GET POST PUT or DELETE operations respectively.

While web based APIs have improved in usability the present inventors recognize that they still have an inherent complexity wherein the developers must understand the API usually by way of its documentation in order to interact with it. URL endpoints are hard coded into consumer code to be compliant with the documentation. This presents a problem recognized by the inventors because application programs become locked in to a specific structured API such that their developed code is married to the hard coded APIs of the web resources it needs to use. To interact with the Connections API above for example a programmer would need to understand the syntax of each URL endpoint the expected headers and parameters and the payload format and custom build compliant code.

As previously mentioned standardized APIs allowing greater portability of applications but standards can take years to develop and a lot of industry cooperation and they typically leave out unique functionality available only from one source. As a result service providers often just develop their own custom API even if other service providers have substantially similar concepts e.g. both Google and Facebook have news feeds but their APIs are very different .

As such the present inventors recognized that even the most advanced web APIs remain difficult and challenging for programmers to use effectively and to keep their products up to date with the evolving APIs of the web resources on which their products rely or with which their products interact.

Therefore at least one object of the present invention is to provide a highly unstructured API via natural language to programmers which would then be translated to one or more structured APIs without requiring the program designers to familiarize or become experts with each of the targeted structured APIs.

For the purposes of the present disclosure we will refer to service endpoints as the service which is invoked by execution of an API call. And we will refer to the required and optional parameters arguments pointers etc. of the API collectively as elements of the API. For example one particular type of API call is a Hyper Text Transfer Protocol HTTP signature. An HTTP signature includes one or more elements such as URL headers body etc. Specific examples will be provided in the following paragraphs.

In a search for available technologies to address this continuing challenge for software developers the present inventors found several existing technologies which fell short of the need in one or more ways. The following review of the existing art reflects the inventors best understanding of it and should not be considered an exhaustive consideration of all technologies.

U.S. Pat. No. 7 849 048 to Justin Langseth et al entitled System and Method of Making Unstructured Data available to Structured data Analysis Tools provides the opposite transformation as sought by the present inventors.

U.S. Pat. No. 7 962 470 to Marko Degenkolb et al entitled System and Method for Searching Web Services discloses an invention for searching remote services by analyzing universal descriptors of such services. It does not appear however to describe exposing or interacting with these services via natural language queries. In other words searching for available web resources does not alleviate the complexities and the required expertise thereof of the APIs of the located services.

United States pre grant published patent application 2007 0299127 A1 to Matthias Kaiser et al entitled Systems and Methods for Processing Natural Language Queries described in an general sense systems for understanding and acting on natural language queries NLQ but it does not suggest or disclose how to relate those NLQs to structured API usages.

United States pre grant published patent application 2007 0203893 to Anthony Seth Krinsky et al entitled Apparatus and Method for Federated Querying of Unstructured Data discloses how a request may be mapped to unstructured data wherein the unstructured results are used to formulate a structured query to a data store. Krinsky however employs a considerably different approach than the present invention as will become evident in the following paragraphs.

And United States pre grant published patent application 2006 0053133 to David J. Parkinson entitled System and Method for Parsing Unstructured Data into Structured Data also employs a significantly different approach and method than the present invention.

The present inventors sought to define a new method and process that would allow use of natural language queries NLQs as a highly unstructured interface to access highly structured APIs. In order to understand a user s intent expressed in a natural language query NLQ Natural Language analysis or processing or parsing NLP can be employed.

According to at least one aspect of the present invention a new NLQ may be compared to other previously processed NLQ s to find and infer similarities between them. For example a newly received NLQ of find current household income census data for persons living in Texas may be found to have a high degree of similarity with a previously handled natural language request 2010 census database with data by state and by household . If the latter phrase has previously been converted to a structured API call then there is a high degree of confidence in converting the former phrase into the same structured API call.

A useful publicly available document regarding realization of a general purpose automatic Natural Language processor is described in Deep Semantic Analysis of Text by James F. Allen et al. of the University of Rochester and the Institute for Human and Machine Cognition document W08 0227 from the ACL . One approach to advancing beyond keyword searching is intent centric processing as proposed by Scott Brave et al. in WIPO patent application WO 2009 021198 A1. The present inventors do not believe this approach however solves the presently addressed problem as will be evident by the following paragraphs.

The present invention is set forth in at least one exemplary embodiment as an application of or manner of using a Natural Language analyzer platform sometimes also referred to as NLP parsing. This platform may be a system such as the IBM Watson system such as is described in Building Watson An Overview of the DeepQA Project Stanford University online and AI Magazine Fall 2010 issue . Another useful publicly available teaching regarding the availability of NLP analyzers which may be suitable for adapting and improving to the present invention may include those described by Konstantin Zuev in United States Pre Grant Published Patent Application 2011 0270607 A1 Nov. 3 2011 the Thompson s Motif Index Literature system of Thiery Declerk et al. as published in Research and Advanced Technology for Digital Libraries Lecture Notes in Computer Science vol. 6966 2011 pp. 151 158 and such as that described by Sala Ait Mokhtar et al. in U.S. Pat. No. 7 058 567 Jun. 6 2006 .

Graphical logical forms for representation of text can be created using one of several known methods such as that proposed by James F. Allen Mary Swift and Will de Beaumont of the University of Rochester and the Institute for Human and Machine Cognition Association for Computer Linguistics ACL anthology document W08 2227 .

For the purposes of this disclosure we will refer to the key words and phrases in a natural language request which are identified by natural language processing as components of the request. Further when deep semantic analysis reveals relationships between components such relationships will also be components. For example the NL request give me all my new messages would be parsed by NLP into three components give me and all new messages . And relationships of give to me and give all new messages would also be resulting components determined by NLP.

In one available embodiment a client device e.g. a consumer s cellphone tablet computer desktop computer needs to access one or more resources e.g. social media activities unread messages news postings friend requests etc. from one or more endpoint service providers. Rather than complying with multiple structured APIs to request the resource s the user of the client device formulates a request for the resource in an unstructured natural language expression. The client device then sends the unstructured NL query to the service provider s central API endpoint. The service provider system using an embodiment of the present invention parses the unstructured query according to natural language processing to extract the query s components maps the components to its own structured API elements executes the API call with the populated elements finally returning an appropriate response often structured data to the requesting client. If the results of the NLP parsing is inconclusive or ambiguous such that more than one API call perhaps would meet the inferred desire of the NL query then one or more additional clarification processes may be performed including using one or more interrogatory interfaces e.g. pop up menus text messages check lists radio buttons etc. to a user brokering for an API using other criteria explained in following paragraphs or using additional transactions transparently to the user.

Here is a more detailed example of operation of this embodiment. Presume that a particular product or platform such as the IBM Lotus Connections social software platform may expose the following REST operations pertaining to a user s activities in which each operation requires a well formed inflexible and structured HTTP signature to use e.g. REST HTTP signatures are the selected structured API targeted in this example 

These REST API calls will get all activities get a specific activity by identification ID create a new activity update an activity and delete an activity respectively. Without benefit of an embodiment of the present invention programmers are expected to learn and hardcode logic for each of these REST operations. With benefit of an embodiment of the invention programmers are free to work with Lotus Connections Activities with flexibility and consistency in a natural language format wherein phrases will be mapped such as the following examples 

From this example one can see some distinct advantages of using embodiments of this invention over anything that exists today 

Here is another detailed example of operation of this embodiment. A user s cellphone needs to retrieve the latest activities in a news feed from multiple social media platforms such as Facebook Google and Twitter on the user s behalf. Presuming that the client device is previously identified and previously authenticated the user s cellphone issues a query in natural language to each of these remote services such as Give me the latest activities using an unstructured request to an NLQ API service according to the present invention such as 

These potential synonyms for the NL components of the NL request are then used to search for known APIs which include these operations and or elements.

Each social media service receives the unstructured query and maps it to its own proprietary REST API as previously described. Subsequently each service responds by transmitting or downloading the user s most recent activities to the cell phone following which the user s phone may consolidate and render them in a central notification center or on another user interface. Contrasting this with how such functionality must be performed today in which the cellphone s Operating System is hardcoded to interact specifically with the three structured social media platform APIs and in which the operating system must be maintained to stay up to date with changes to each service provider s API one can readily see the advantage of the embodiments of the present invention.

In another embodiment a human user may directly issue queries to a remote endpoint server in natural language. When the endpoint returns the requested resource the user s device may render it in some appropriate way.

In yet another embodiment service platforms can be slightly modified to receive unstructured natural language requests and queries and upon detection of such could forward the requests and queries to a third party NLQ API resolution service which would then convert it to a structured API compliant with that of the service platform on behalf of the service platform. In this manner open or standardized APIs could be easily supported by centralized implementation as well as proprietary APIs could be kept more secure whereas only the third party resolution service would be required to know the proprietary APIs.

As previously mentioned one step or process within some embodiments of the present invention is to map the NL components of the unstructured request to elements of a known structured API call where the NL components are extracted from the unstructured request and their relationships to the each other and the request have been detected by natural language processing.

Maps of NL components to structured APIs can be created manually for the purposes of some embodiments of the invention. Indeed some service providers are likely to map unstructured request components to elements of conventional structured APIs. This will facilitate backwards compatibility with existing structured APIs leverage years of experience in building APIs and provide clients with two alternative choices for interacting with the service provider. While this approach may be useful for the limited scenario of initial deployment it is not anticipated to be optimal for on going incorporation of new APIs and revisions to existing APIs.

Therefore an optional aspect of some embodiments of the present invention is a method of mapping unstructured requests to structured API endpoints by correlating natural language descriptions of each API operation with its API elements e.g. arguments parameters options etc. such as an HTTP signature with elements of URL headers parameters message body encoding etc. In essence a natural language processing system such as IBM s Watson system can be employed to learn each new or revised structured API via the natural language documentation which is intended for human programmers to read and reference. This automatic learning of API functionality and elements will facilitate automatic creation of structured API calls when unstructured requests are received while avoiding or reducing manual effort to create the NL component to API element maps. This aspect of the present invention will enable unstructured requests to be mapped to a structured API calls automatically meaning less code to build and maintain and affording flexibility for the structured API to change. With an embodiment equipped to learn structured APIs from API documentation the documentation can be automatically ingested by a natural language deep semantic analysis system to find structured API functionality definitions and to associate their API elements e.g. arguments parameters options etc. with their functional descriptions expressed in natural language text. Then when a new unstructured request is received the NL components in the unstructured request can be correlated to the NL descriptions of the API elements as found in the API documentation. Highly correlated API elements would be declared as probable matches to the components of the NL components of the unstructured request and then that particular structured API would be selected or offered and constructed with the elements to be returned to the client.

In such an embodiment according to this aspect of the present invention the NLQ API resolving system learns the service provider s API documentation such that each API endpoint is documented in natural language and has a defined set of required and optional API elements such as an HTTP signature. The system then receives unstructured requests from clients. The system maps client s unstructured requests to natural language descriptions of API operations in the API s documentation. The system then optionally constructs and executes an appropriate structured API call such as an HTTP request with corresponding elements which complies with the API s documentation requirements on behalf of the client or it returns the constructed structured API to the requesting client for its own use or storage. In the former arrangement results from executing the request on behalf of the requesting client are returned to the client. For example turning to 

The present inventors envision at least one embodiment that primarily uses or places higher priority on REST API operations above other types of APIs proprietary SOAP WSDL etc. .

While the embodiment features and aspects set forth in the previous paragraphs provide very useful improvements over the prior art there are further advanced optional embodiment features which we now describe in detail. These will be especially useful for integrator social tools such as tools which attempt to provide a user with a single view and control of multiple social accounts such as Google FaceBook Lotus Connections Twitter Instagram Pinterest LinkedIn Plaxo Focus Netparty Ryze Talkbiznow and Xing . However embodiments and methods of usage of embodiments of the invention are not limited to social networking platforms but may also be useful for providing users with meta agents that integrate other types of accounts such as online banking accounts online financial trading accounts online news accounts and feeds online class and training accounts etc In each of these types or classes of online services there are similar user desires which can be expressed in natural language the same way for each species of the class but in which each species requires a specific structured API which may not be compatible with other species in the class.

So a further object of these advanced embodiments according to the present invention is to use natural language as much as possible to interact with any service group of services or set of service features available to a user. The advanced features aim to provide a smarter API broker which selects one of multiple available structured APIs according to the user s context and user s profile to be more intelligent and intuitive when brokering a natural language unstructured API service request.

The advancement utilizes the user s profile the context of the request and a record of historical actions to choose an API e.g. broker an API in response to an otherwise ambiguous natural language request to an underlying API service providing the right service calls based on the user s data.

The Unstructured API broker receives a user s profile information context of the request and a log of historical actions when being prompted to broker an API resolving request. The broker analyzes the question and finds the goal and key terms in natural language text and finds similar goals and terms within the users profile and historical actions. The broker then queries to find services that match that goal and terms and subsequently it finds the appropriate service that matches the specific user s interests corresponding to the user s profile or historical data or context of the request or a combination of profile history and context. A structured API call is then constructed for the selected service according to the processes described in the previous paragraphs and optionally the constructed API call is invoked by the NLQ API system on behalf of the requesting client or the constructed API call is returned to the requesting client.

Turning to responsive to a requesting client e.g. a user or another computer executed process an endpoint service in natural language 

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the

The preceding paragraphs have set forth example logical processes according to the present invention which when coupled with processing hardware embody systems according to the present invention and which when coupled with tangible computer readable memory devices embody computer program products according to the related invention.

Regarding computers for executing the logical processes set forth herein it will be readily recognized by those skilled in the art that a variety of computers are suitable and will become suitable as memory processing and communications capacities of computers and portable devices increases. In such embodiments the operative invention includes the combination of the programmable computing platform and the programs together. In other embodiments some or all of the logical processes may be committed to dedicated or specialized electronic circuitry such as Application Specific Integrated Circuits or programmable logic devices.

The present invention may be realized for many different processors used in many different computing platforms. illustrates a generalized computing platform such as common and well known computing platforms such as Personal Computers web servers such as an IBM iSeries server and portable devices such as personal digital assistants and smart phones running a popular operating systems such as Microsoft Windows or IBM AIX UNIX LINUX Google Android Apple iOS and others may be employed to execute one or more application programs to accomplish the computerized methods described herein. Whereas these computing platforms and operating systems are well known an openly described in any number of textbooks websites and public open specifications and recommendations diagrams and further details of these computing systems in general without the customized logical processes of the present invention are readily available to those ordinarily skilled in the art.

Many such computing platforms but not all allow for the addition of or installation of application programs which provide specific logical functionality and which allow the computing platform to be specialized in certain manners to perform certain jobs thus rendering the computing platform into a specialized machine. In some closed architectures this functionality is provided by the manufacturer and may not be modifiable by the end user.

The hardware portion of a computing platform typically includes one or more processors accompanied by sometimes specialized co processors or accelerators such as graphics accelerators and by suitable computer readable memory devices RAM ROM disk drives removable memory cards etc. . Depending on the computing platform one or more network interfaces may be provided as well as specialty interfaces for specific applications. If the computing platform is intended to interact with human users it is provided with one or more user interface devices such as display s keyboards pointing devices speakers etc. And each computing platform requires one or more power supplies battery AC mains solar etc. .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features steps operations elements and or components but do not preclude the presence or addition of one or more other features steps operations elements components and or groups thereof unless specifically stated otherwise.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

It should also be recognized by those skilled in the art that certain embodiments utilizing a microprocessor executing a logical process may also be realized through customized electronic circuitry performing the same logical process es .

It will be readily recognized by those skilled in the art that the foregoing example embodiments do not define the extent or scope of the present invention but instead are provided as illustrations of how to make and use at least one embodiment of the invention. The following claims define the extent and scope of at least one invention disclosed herein.

