---

title: Client device connectivity with integrated business rules and multiple network types
abstract: Applications executing on mobile client devices may access remote resources via network connections. Operational capabilities and financial costs of these connections may differ. Developers, network administrators, and other parties may wish to moderate usage of various available conditions to conform to business rules. Connectivity information including one or more network grants are integrated into an application received from a developer at ingestion by an application management server, which accesses those business rules. The client devices may coordinate with a proxy server to provide additional controls. Networking public interfaces provide the developer with a simplified pathway for development of applications which use network connections, particularly on mobile devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09426158&OS=09426158&RS=09426158
owner: Amazon Technologies, Inc.
number: 09426158
owner_city: Seattle
owner_country: US
publication_date: 20140707
---
This application is a divisional of U.S. patent application Ser. No. 12 969 260 filed on Dec. 15 2010 the disclosure of which is incorporated by reference herein.

Client devices such as eBook readers cellular telephones portable media players tablet computers netbooks and the like may execute applications to provide various functionalities desired by a user. The applications may be designed to connect the client device to remote devices such as servers via one or more networks. While it may be desirable to have these applications conform to one or more business rules designing and deploying such applications has proven to be difficult and prone to error. As a result improperly designated applications may be prone to failure or may place unexpected or undesired demands on networks.

The use of applications on client devices both mobile and stationary continues to proliferate in terms of the volume of applications created the numbers of devices that present these applications and the numbers of users who are accessing these applications. Frequently these applications will communicate with remote devices such as a server during operation. These communications may take place via network connections such as wireless wide area networks WWAN wireless local area networks WLANs wireless regional area networks WRAN and so forth. Operational capabilities and financial costs of these connections may differ. For example a WWAN may have broader geographic coverage but provide lower bandwidth than the WLAN. Additionally costs associated with these different networks may vary significantly. For example the WWAN connection may charge by the amount of data transferred while the WLAN might not. As a result developers network administrators and other parties may wish to moderate usage of various available conditions to conform to business rules. For example business rules may specify that a bandwidth intensive application operate on the WLAN rather than the WWAN.

This disclosure describes techniques and system that integrate business rules into connectivity between client devices and remote devices such as servers. These integrated business rules in the form of configured connectivity information which is incorporated into the deployed application at ingestion such that circumvention or modification of those business rules becomes impractical or impossible. The business rules may be updated or modified or additionally enforced with the use of a proxy server.

A set of networking public interfaces aid development of robust and reliable applications by providing straightforward and easy to use interfaces and application programming interfaces APIs . The developer may use these tools to have the active content module in the application call various communication related functions. The network public interfaces streamline development while also ensuring that business rules are integrated tightly into the resultant deployed application.

A developer provides a submitted application to an application management server. The application management server processes the submitted application to incorporate connectivity information which provides for one or more network grants and signatures. The network grants set forth the permissions which allow a deployed application to utilize communication functions available on the device while the signatures provide for authentication encryption and so forth. The process of taking the submitted application and preparing it for deployment is known as ingestion. 

Once the ingestion process is complete a resulting deployed application is available to end users. During use the deployed application may attempt to communicate with remote devices such as third party servers. For example an application may be configured to download and present current scores from sporting events. The deployed application on the client device may use the network grants available within the connectivity information to request communication with the third party server. The request for communication may be sent from the client device to a proxy server which determines if communication is permitted. When communication is permitted the proxy allows the client device to connect.

The proxy server may exchange business rule information with the application management server or other servers as well as the client device. These business rules provide details about privileges or restrictions associated with an application user device and so forth. For example due to business rules such as terms of a licensing agreement service level agreements and so forth the deployed application providing scores may be unavailable while the device is outside of a specified national boundary such as the United States. As a result the client side connectivity module using the connectivity information proxy server or both in combination may prevent communication when the client device is in another country. The deployed application may or may not remain available to operate in a standalone or non network mode until returning to the United States. The client device coordinates with a proxy server to enforce business rules.

The developer may transmit the created application as a submitted application via a network storage media and so forth to application management servers . . . G . The network may be implemented as one or more various networks such as the Internet a cable television network wireless network wired network wireless wide area network and so forth. The application management servers G may comprise a single server cluster of servers data center virtualized instances and so forth.

The application management servers G are configured to accept submitted applications and handle ingestion of those submitted applications . Ingestion includes the assessment approval and modification of a submitted application to form a deployed application . For example the submitted application may be assessed to confirm compatibility with a particular model of client device such as an eBook reader device to provide compliance with the business rules. These business rules may be specific to a particular application particular to a developer global across all applications and developers or combinations thereof.

Modifying the submitted application includes integrating connectivity information with the submitted application . The connectivity information contains one or more network grants for use of particular transport mechanisms on the client device signatures and so forth that provide for enforcement and maintenance of the business rules by the client side connectivity module. The connectivity information and its interaction with network public interfaces such as a connectivity application programming interface API is discussed in more detail below with regards to . Briefly the connectivity information provides access grants which are assessed by a client side connectivity module to determine what communication resources the deployed application is permitted to use on the client device. The deployed application interacts with the client side connectivity module via a set of networking public interface also known as the connectivity API. The various networking components necessary for communication using the network interfaces available on the device but the permissions to use them are provided within the connectivity information . For example the submitted application may be permitted by business rules to use only a WLAN connection and thus the connectivity information may provide network grants necessary for WLAN connectivity and not WWAN connectivity.

In some implementations the application management servers G may also be configured to provide for ongoing management provisioning administration and other functions associated with the deployed applications . For example the application management servers G may provide for provisioning and distribution of deployed application to the client device D for use by a user . The user may then use the deployed application .

During operation the deployed application may attempt to communicate with a remote device such as a server another type of remote device and so forth. Subject to the constraints of the business rules and the network grants incorporated into the connectivity information the deployed application executing at least in part upon the client device may thus generate data traffic . The data traffic may first be sent to proxy servers . . . S . The proxy servers S may then determine whether to allow the communication. The data traffic may also comprise traffic from the proxy server to the client device . The proxy servers S are discussed in more detail below with regards to . Briefly the proxy servers S may work alone or in conjunction with the application management servers G client devices or combinations thereof to enforce usage privileges associated with the deployed application users devices and so forth.

When the proxy servers S permit communication such as shown with data traffic communication may be established with a third party service provider . . . P . These third party service providers P may be associated with the same or separate entities which own manage or administer the application management servers the proxy servers or both. The third party service providers provide services that support the deployed application . These may be services that are specific to the deployed application such as a particular data stream of sports scores or general services such as serving a web page.

When the proxy servers deny communication such as shown with data traffic communication with the third party service provider via the proxy server is not permitted. In some implementations the client device may be configured to communicate directly with the third party service provider . In such an implementation the connectivity information on the client device and client side connectivity module may still enforce the business rules and may also be configured to check with the application management servers or the proxy servers to receive updated business rules.

As described below the proxy servers may provide information to the deployed application installed on the device regarding a change in business rules with rule updates . For example the proxy server may notify the client side connectivity module coupled with the deployed application on the client device of a rule update that specifies communication is disallowed until a specific date and time. Thus the connectivity information may restrict communication attempts and prevent consumption of network resources until that specific date and time has been reached reducing useless traffic on the network . This also reduces the load on the proxy server . Rule updates may be exchanged between any of the devices within the architecture. For example the application management servers may exchange rule updates with the proxy servers rule updates with the third party service providers and so forth.

The memory may include computer readable storage media CRSM . The CRSM may be any available physical media accessible by a computing device to implement the instructions stored thereon. CRSM may include but is not limited to random access memory RAM read only memory ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology compact disk read only memory CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computing device.

The memory may store or otherwise have access to an application processing module . The application processing module is configured to handle ingestion tasks which include receiving a submitted application analyzing the requirements of the submitted application determining communication requirements of the submitted application determining business rules associated with the submitted application and providing a connectivity module configured to support the business rules. Ingestion may be automated manual or include some automatic and manual operations. For example a human administrator may interpret particular contractual business rules to which the application provided by the developer is subject to.

The application processing module interacts with an application database . The application database stores applications and data relating to those applications. As shown here the application database may include the submitted application the deployed application and the connectivity information which is associated with the deployed application .

A business rules database is also coupled to the application processing module . The business rules database may contain business rules ranging from those which are global across the entire architecture to specific rules associated with a particular user account when using a particular client device . These business rules may also codify contractual requirements for service service guarantees limitations and so forth.

Within the application management server is a network interface also coupled to the processor . This network interface allows the application management server to couple to other servers or devices.

Also shown in this illustration is a block diagram of the client device . The client device may include eBook readers cellular telephones portable media players tablet computers netbooks desktops virtual sessions and so forth. The client device may include a processor coupled to a memory . The memory may store the deployed application or a portion thereof as well as an associated connectivity information . Coupled to the deployed application is a client side networking module . The client side networking module is configured to provide at least low level data transfer functionality associated with a particular network interface. Also coupled to the processor is the network interface which provides connectivity to other devices servers and so forth.

In some implementations the application processing module of the application management server may execute the process . At a submitted application is received. For example the developer may upload the submitted application via the network from the client device or another device to the application management server .

At one or more business rules associated with the submitted application are determined. This determination may be automated manual or a combination thereof and may comprise analyzing communication requirements and comparing those communication requirements with actions permitted by the business rules. For example it may be determined that the submitted application is a video chat application requiring bandwidth which is within the capabilities of a WLAN connection but exceeds the capabilities of a WLAN connection. Business rules associated with this video chat submitted application may thus configured to allow only WLAN connectivity.

At the connectivity information is configured to comply with the determined one or more business rules is generated. For example the connectivity information may provide permissive grants allowing a WLAN connection but have no permissive grants for or alternately may include a blocking grant explicitly prohibiting a WWAN connection given that the WWAN is prohibited by the business rules.

In some implementations the configuration of the connectivity information may also be determined at least in part due to the hardware configuration of a destination client device . For example the submitted application may be permitted under business rules to use a WLAN connection. WLAN connections may include those complying with the IEEE 802.11g and 802.11n standards. However a particular model of device may only have hardware supporting 802.11g. As a result the connectivity information configured for that particular model of device may provide for support of 802.11g but omit 802.11n as unnecessary given the lack of hardware on the client device .

At the submitted application is combined with the connectivity information . The combination may be tested for quality assurance including stability compliance with business rules and so forth. The connectivity information may be encapsulated within the application .

In some implementations additional operations may be performed on the submitted application to prepare it for deployment. For example digital rights management DRM or other features may be added.

At a deployable application is generated from at least in part the submitted application and the connectivity information . This deployed application may contain or be packaged with the connectivity information . Once deployed the deployed application may use one or more of the networks according to available privileges by using the network grants within the connectivity information to access the client side connectivity module via the connectivity API as described below in more detail with regards to .

Network grants may include grants which are specific to user supplied networks. For example a user supplied grant may allow the application to connect using any network which is supplied by the user. In contrast a sponsored grant may allow the application to connect using a network which is supplied by a network sponsor such as XYZ Company.

Other grants may be provided as well. For example a developer or network testing grant may allow the application to use any network anywhere.

The network grants define the constraints determined by the business rules within which the active content module may communicate. The active content module may be limited in communication by amount of data duration of connection frequency of connections destination of connection geographic limitation user client device identifier time of day date network sponsor and so forth. For example continuing the example of the deployed application providing sports scores on the display the network grants may limit access to the third party service provider so long as the client device is within the United States to comply with contractual business rules. In another example the network grants may define a preference to use WLAN access but still provide for WWAN access with WLAN access is unavailable.

The connectivity information may also include signatures . The signatures may comprise data associated with encryption authentication identification and so forth.

The deployed application utilizes networking public interfaces to establish communication pathways. The networking public interfaces provide a simplified programmatic interface allowing the developer to easily develop applications that are operable in the dynamic environment of the client device particularly in mobile devices. The networking public interfaces also provide callback mechanisms that enforce business rules while simplifying integration with the active content module . Specific networking public interfaces are described below with regards to .

The use of callbacks allows the various network components to complete their tasks such as setup of connection while the active content module performs another task. The networking component will then call back the active content module indicating the connection is ready.

The networking public interfaces may also be updated or modified such as via the network . These updates may be used to incorporate new features. For example the networking public interfaces may be updated to reflect the addition of a Bluetooth wireless communication interface to the client device and extend the user supplied grant to include use of this communication interface. As a result the mappings between grants and network interfaces may be readily adapted.

The networking public interfaces couple to the client side connectivity module . The client side connectivity module handles high level requests from the active content module for communication with remote devices such as the third party service providers subject to the constraints of the connectivity information .

The client side connectivity module may comprise multiple different components including cached business rules one or more network component s and so forth. The cached business rules provide a mechanism to locally store business rules and associated rule updates on the client device . Such local storage may improve response time minimize network traffic and so forth.

The network components are associated with a particular physical network interface and provide the low level functions which establish a communication pathway suitable for the active content module to use. The network components may include a WLAN component a WWAN component other components such as satellite component infrared link component and so forth.

The active content module may thus initiate a communication request. When the connectivity information permits the communication the networking public interfaces work in conjunction with the client side networking module and networking components within to establish a communication pathway using the network interface . Establishment of the communication pathway may include interactions with the user. The user interaction may be regulated by various factors alone or in combination. These factors may include current device connectivity state networks supported by the device application request preferences the network grants and signature the cached business rules obtained from the proxy servers or the application management servers and so forth. A mapping to an actual physical interface may be based upon the active content module s network access grants even before the user interaction is started. In some implementations a remote device may initiate the request for communication and the process operates in the reverse direction.

A connectivity interface is configured to provide information about current network connectivity on the client device via a task submission mechanism. In some implementations applications may be restricted to using hypertext transport protocol HTTP and HTTP secured HTTPS to connect to remote devices such as the third party service providers . In other implementations other protocols may be used. For various reasons including simplification of development and to improve security socket connections or other protocols may not be supported within the architecture . The developers may use standard URLConnection HttpURLConnection and javax.net.ssl.HttpsURLConnection classes. The connectivity interface provides the active content module with knowledge of the availability of the actual network to make such connections. The connectivity interface also aids user interaction in establishing the network pathway that will make the network available. For example the connectivity interface allows for user interactions and prompting such as please turn on the wireless networking switch and so forth.

Many client devices particularly those which are mobile are battery powered and thus it is desirable to minimize power consumption to improve operating time. To save battery and deal with changing networking conditions the actual connectivity of the client device may vary. For example the user may turn off a radio in a network interface the networking interface within the client device may be powered down without user intervention the client device may be taken out of range of a wireless access point and so forth.

A typical pattern for working with the network on the client device is to make a request to use the network and then when that request is successful proceed with the network request. If exceptions are thrown during the processing of the request they may indicate problems with the connection or they may indicate a change in the state of the connection. One way to handle these exceptions is to inform the user . Then if the user performs another operation that requires network access a new connectivity request can be made.

Requests for connectivity may execute in a separate set of threads from other events. This permits applications to do work as needed directly in the handler without blocking the user interface. However modifications to the user interface need to be dispatched such as via EventQueue.invokeLater Runnable which causes runnable to have its run method called in the dispatch thread of the EventQueue. This will happen after all pending events are processed. Modification to the user interface may also be dispatched via EventQueue.invokeAndWait Runnable which causes runnable to have its run method called in the dispatch thread of the EventQueue. This will happen after each pending event is processed and the call blocks until this processing completes.

In some implementations the number of threads used to callback handlers is limited in some cases it might only be one so other handlers might not be called back while one is running. The active content module active content is recommended to execute high latency operations such as network I O or actions waiting on user input on a separate thread when it is desirable to quickly unblock the thread so that other handlers can be called back.

A connectivity handler interface is configured to receive a notification when the network has become available or is determined to be unavailable. Specific methods associated with this interface are described below with respect to .

A network disabled details interface is configured to provide details about why network access is disabled for the active content module. Specific methods associated with this interface are described below with respect to .

A network disabled reason class is configured to provide information as to why network access is disabled. As used herein disabled is differentiated from not working or unstable. For example disabled may indicate the user has turned off the radio not working may indicate a hardware or software fault preventing proper operation and unstable may indicate the signal strength is too variable to provide a reliable connection.

When the active content module determines that the network is disabled it is unlikely that the network will become available again during the life of the application. Once disabled developers in most implementation should only attempt to initiate a new network connection when explicitly requested by the user . Specific methods and associated fields are described below with respect to .

Other networking public interfaces may also be provided within the networking public interfaces . Such other interfaces may be used to add additional functions at a later date.

The connectivity interface may also include a submitSingleAttemptConnectivityRequest method. The method may be expressed as void submitSingleAttemptConnectivityRequest ConnectivityHandler notification boolean promptUser . As described previously the ability to prompt the user for specific actions aids in the esatablishment of a network pathway. For example the user may be prompted to turn on a physical switch providing power to the networking interface. This method submits a request to connect to an available network in an asynchronous manner. If the device fails to establish a network connection the handler s ConnectivityHandler.disabled NetworkDisabledDetails application programming interface API will be called. This allows the active content module to give timely feedback to the user in the cases where the network is currently unavailable.

This request may be silently cancelled when the deployed application is stopped. It is advised that active content modules cancel any outstanding network connectivity requests when stopped for example using the cancelAllConnectivityRequests method and submit new requests when started again if needed.

Registering for a notification implies that the active content module is interested in making a network connection and may cause the user to be prompted if network connectivity has been deactivated by the user or some user configuration needs to be done before use. This is controlled by the promptUser argument. Note that even after receiving the callback an error may still occur resulting in the network disconnecting before an actual connection can be made.

Although it is possible to register several handlers for notification each handler will only be called once in most implementations. A handler can re register itself during the notification callback.

Parameters for the method include notification and promptUser. The notification parameter sets the handler to be notified when the network is available. Nulls are ignored as are duplicates. The promptUser parameter sets a flag indicating whether the user can be prompted if needed to enable or configure the network connection .

This method may throw at least two exceptions an IllegalStateException and a SecurityException. The IllegalStateException occurs when a request is received before the active content module has been started or after it has been stopped. The SecurityException occurs when the active content module is not authorized to access the network .

A requestConnectivity method is also provided. The method may be expressed as void requestConnectivity boolean promptUser . The requestConnectivity method synchronously requests connectivity. If the call completes it means that the request succeeded and the active content module can proceed to use the network . If the connectivity request fails for any reason then a link NetworkDisabledException will be thrown and can be used to obtain further details on the error such as a recommended error message to display to the user . This allows the active content to give timely feedback to the end user in the cases where the network is currently unavailable.

This request is carried out synchronously and may take a relatively long time to complete. As a result of this relatively long time to complete invocation from the Event Dispatch Thread is not recommended in some instances. Requesting connectivity implies that the active control module is interested in making a network connection such as to the third party service provider and may cause the user to be prompted if the network connection on the device has been deactivated by the user or any configuration needs to be done. This may be controlled by the promptUser argument. Note that even after successful completion of this method an error might still occur resulting in the network disconnecting before an actual connection can be made.

The method provides for a promptUser parameter. The promptUser parameter comprises a flag indicating whether the user can be prompted if needed to enable or configure the network connection on the client device .

The method may throw several exceptions. A NetworkDisabledException occurs when an attempt to access to the network has failed. If the network access attempt was a result of a user initiated action or the user is waiting on the results of the network connection in any way it is advised that the application uses NetworkDisabledException.getNetworkDisabledDetails to get the network disabled details and then invoke NetworkDisabledDetails.getLocalizedMessage to get an appropriate error message to display to the user in some instances.

An IllegalStateException occurs if a request is received before the active content module has been started or after it has been stopped. This exception will also be thrown if invoked from the Event Dispatch Thread.

A CancelledConnectivityRequestException occurs in the event that the active content module has been stopped. As above a SecurityException is thrown when this active content module is not authorized to access the network . An InterruptedException is thrown when this thread is interrupted.

A cancelConnectivityRequest method is also provided. The method may be expressed as void cancelConnectivityRequest ConnectivityHandler notification . This method cancels a specific connectivity request submitted to either the submitConnectivityRequest ConnectivityHandler or submitSingleAttemptConnectivityRequest ConnectivityHandler APIs. The method uses a notification parameter indicating the callback to cancel. It is still possible for this callback to be called until this function returns. Nulls or missing callbacks are ignored. A SecurityException is thrown if the active content module is not authorized to access the network .

A cancelAllConnectivityRequests method provides a public interface for cancelling pending connectivity requests. The method may be expressed as void cancelAllConnectivityRequests . In some implementations this method may be configured to cancel all pending connectivity requests submitted to either the submitConnectivityRequest ConnectivityHandler or submitSingleAttemptConnectivityRequest ConnectivityHandler APIs. This method may also throw a SecurityException if this active content module is not authorized to access the network .

The connectivity handler may include a connected method. This method may be expressed as void connected . This method is called once per submission when the network is available. Note that it is possible that the network becomes unavailable again before this method is actually executed. This will commonly show up as an IOException during the network connection process. Applications should respond to such errors by issuing a new connectivity request. Connectivity callbacks execute in a separate set of threads than other events. This permits applications to do work as needed directly in the handler without blocking the user interface. However it does mean that any modifications to the user interface need to be dispatched via EventQueue. invokeLater Runnable or EventQueue. invokeAndWait Runnable . Also in some implementations the number of threads used to callback handlers is limited in some cases it might only be one so other handlers might not be called back while one is running. It is therefore advised that applications executing high latency operations such as network I O or actions waiting on user input on a separate thread if the thread is to be quickly unblocked so that other handlers can be called back.

The connected method may throw an InterruptedException. Implementers of this interface should not absorb InterruptedExceptions thrown from within this method . Doing so may cause an application to exit abnormally under some circumstances. If the active content module needs to handle these exceptions in some manner the current thread should be re marked as Interrupted. One implementation of re marking is shown below.

The ConnectivityHandler interface may include a disabled method. The disabled method may be expressed as void disabled NetworkDisabledDetails details . This method may be called when network access is disabled. This can occur in response to situations including but not limited to a network switch was off on the client device the client device is in a roaming service area and not authorized to access the network the client device is not registered and so forth. This is described in more detail below with regards to .

If the network access attempt was caused by a user initiated action or the user is waiting on the results of the network connection in any way it is advised that the application uses NetworkDisabledDetails.getLocalizedMessage to get an appropriate error message to display to the user in some instances. This may also be done when the connectivity request s promptUser flag passed was true.

The disabled method may throw an InterruptedException. As above implementers of this interface should not absorb InterruptedExceptions thrown from within this method . Doing so may cause an application to exit abnormally under some circumstances. If the active content module needs to handle these exceptions in some manner the current thread should be re marked as Interrupted such as shown in Code Example 2 above. This method may have a parameter of details which provides details on why network access is disabled.

The getReason method may be expressed as NetworkDisabledReasongetReason . This method returns a value indicating why access to the network is disabled. These details are described in more detail below with regards to .

The getLocalizedMessage method may be expressed as String getLocalizedMessage and provides a human readable description of the network disabled reason and details that can be used to inform the user of the situation. While localized messages may not be present in some circumstances developers are encouraged to use this method to ensure that such localization is used when available. The method returns a human readable description of the reason the network connectivity is disabled intended to inform the user of the situation.

This class may be implemented as a type safe set of constants. New reasons may be introduced in the future so active content modules should handle the case where none of these reasons match. The following fields may be included in this class.

A user disabled field may have the form public static final NetworkDisabledReason USER DISABLED and indicates the network is disabled at the user s request. For example the user may have manually disabled wireless networking.

A device unregistered field may have the form public static final NetworkDisabledReason DEVICE UNREGISTERED . This field indicates the client device is not registered with the proxy server application management server third party service or a combination thereof.

A device roaming field may have the form public static final NetworkDisabledReason DEVICE ROAMING . This field indicates the device is currently roaming outside of a pre determined coverage area and network connectivity is not available for this application in this location.

A device block field may have the form public static final NetworkDisabledReason DEVICE BLOCKED . This indicates the client device has currently been blocked from accessing the network . For example the particular client device may have recorded as lost or stolen and may be blocked.

An application blocked field may have the form public static final NetworkDisabledReason APPLICATION BLOCKED . This field indicates the current active content module has been blocked from accessing the network . For example the application may have been withdrawn or superseded and further access is prohibited.

A quota exceeded field may have the form public static final NetworkDisabledReason QUOTA EXCEEDED. This field indicates that the active content module on this particular client device has exceeded its network usage quota. In some implementations this data transfer quota may be for a pre determined period such a day month week quarter and so forth. In other implementations the quota may be set for the life of the application device user and so forth.

A service unavailable field may have the form public static final NetworkDisabledReason SERVICE UNAVAILABLE . This indicates the network to which a connection is desired is inaccessible. For example this field may be presented during a temporary service interruption resulting from a failure at a radio tower of the service provider.

An unsupported network field may have the form public static final NetworkDisabledReason UNSUPPORTED NETWORK . This field provides feedback that the active content module requires a network type not supported on this device. For example the application may seek to use a Bluetooth wireless module to connect to another client device which is physically close by but the client device lacks the Bluetooth wireless module.

An unknown error having the form public static final NetworkDisabledReason UNKNOWN ERROR indicates an unknown network error has occurred and has resulted in the network connectivity on the client device being disabled.

Other network disable reasons may also be incorporated to account for different operational situations. For example a network disable reason may indicate that the particular combination of device and user currently logged into the device is blocked.

Also installed on the client device is deployed application B . This deployed application may be configured to present the user with current scores from sporting events. Because the lower bandwidth of WWAN connectivity will support this application and because the business rules at ingestion permit the connectivity information contains both the user supplied grant and the sponsored grant as shown at . As a result the deployed application B may use either network . The deployed application the client side connectivity module or a combination of the two may be configured to preferentially use one network over another for example connecting to a WLAN when available and the WWAN only when the WLAN is unavailable.

In another implementation different functions may be presented to the depending upon availability of a particular network. For example the deployed application B may allow a multiplayer game mode with others via the WLAN but not via the WWAN which is dedicated per the business rules and associated connectivity information for transfer of lower bandwidth sports scores only.

Deployed application C is shown for an application which is configured such that WWAN connectivity is required . For example the application may handle secured information for which it is undesirable to pass traffic on networks such as a public WLAN connection. As a result the connectivity information of the deployed application C contains only the sponsored grant allowing access to the WWAN for connectivity. Even where a WLAN is available to the client device the deployed application C does not have the user supplied grant permitting use of the WLAN.

At a request for communication via the network from an the active content module within the deployed application which is executing on the client device via a network is received. At a determination is made as to whether the client device is registered. The client device may be registered with the proxy server the application management server the third party service provider or another server or entity. When registered the client device may store information about registration such as a registration status flag registration code and so forth. This information about registration may then be retrieved from the client device and used for determination . Likewise the proxy server or other server may store identification and other information about the client device .

When at the client device is unregistered the process proceeds to where communication is denied. After denying communication at an error message may be generated. In some implementations this error message may be presented to the user .

When at the client device is registered the process proceeds to determine at when one or more business rules associated with the client device are present. As described above the business rules may be distributed to the client device with the deployed application upon deployment via rule updates subsequent to deployment or a combination thereof.

When at no business rules are is present the process proceeds to and denies communication. When at the business rule is present the process proceeds to determine when communication is permitted by the available network grant at . In another implementation the logic may be inverted such that when no business rules are present communication is permitted.

When at the network grants do not permit communication based on the business rules the process proceeds to deny communication at . When at the network grants in conjunction with the business rules allow the communication the process proceeds to and attempts to communicate. The process of attempting to communicate is described next with regards to .

At when the network interface is inactive the process proceeds to and prompts the user to activate the network interface. When at the network interface is determined to be active at a network unavailable error message is generated which indicates the network is unavailable. As described above this may also provide the opportunity for additional user interaction. This user interaction may be regulated by various factors alone or in combination. These factors may include current device connectivity state networks supported by the device application request preferences the network grants and signature the cached business rules obtained from the proxy servers or the application management servers and so forth.

When at the network is available the process proceeds to determine at when data transfer is operational. When at the data transfer is inoperable the process proceeds to to determine when the data transfer is restricted at the proxy server . When at the data transfer is unrestricted at the proxy server at a data transfer error message is generated which indicates a problem with data transfer. When at the data transfer is restricted at the proxy server at a data transfer disallowed error message is generated which indicates the data transfer is not permitted which may result from one or more of the business rules.

Returning to when the data transfer is operable the process proceeds to to determine when a remote server is responsive. When the remote server is unresponsive at a remote server is unresponsive error message is generated which indicates the remote server is not responding. When at the remote server is responsive at communication with the remote server is established.

The error message presented indicates no WLAN network is available which is required by the connectivity information and the one or more business rules. A user prompt is presented asking the user if they wish to use the application in a standalone mode such as to replay a previously stored video chat. User controls may be selected by the user in response to the prompt .

In some implementations the user may be supplied with specific prompts or options based upon the current state of the device network application preferences network grants and so forth. For example where the WLAN is unavailable because the network interface switch is OFF the user may be prompted to turn the network interface switch on.

Within the memory a proxy traffic control module is stored and may be executed on a processor such as the processor . The proxy traffic control module is configured to provide various levels of connectivity between the client device and third party service providers corresponding to restrictions or privileges imposed by the one or more business rules. Unlimited access privileges impose no restrictions on the deployed application . Limited access privileges allow some communication subject to various privileges and restrictions as set out by the one or more business rules. No access privileges prevent all communication via the proxy server to third party service providers also in accord with the one or more business rules. In some implementations no access privileges may result in the proxy server not responding to communication attempts from the client device which are restricted by the one or more business rules.

Stored within the memory and interacting with the proxy traffic control module is a business rules database . In other implementations the business rules database may be at least partially stored on memory within another device synchronized with the business rules database and so forth. The business rules database stores the various restrictions and privileges which relate to the architecture described herein. Device restrictions may be stored which place limitations on data transfer for a particular client device . Application restrictions may be stored which limit data transfer for a particular application. Bandwidth restrictions limit the amount of data transferred in a given period. Geographic restrictions limit data transfer at least partly in response to the geographic location or geolocation of the device user third party server and so forth.

Other restrictions may also be stored within the business rules database . For example business rules may limit communication by time of day such that communication is only permitted during school hours.

In some implementations various restrictions and privileges may be combined. For example the deployed application may be restricted on a particular client device from transferring data while outside of a pre determined geographic region.

A monitoring module is also shown coupled to the proxy traffic control module . The monitoring module collects usage information about the client devices and their associated usage of the proxy server . For example the monitoring module may collect information about bandwidth used duration of connection latency application used device identifier and so forth. The monitoring module may store this data in a usage database .

A billing module may couple to the monitoring module and use at least in part the usage information for billing purposes. For example the billing module may be configured to assess differing fees for the usage of the deployed application based at least in part upon the geographic location of the device .

A licensing module may also be present in the proxy server . The licensing module is configured to maintain the licensing rights of participants in the environment. For example the licensing module may analyze application identifiers and traffic to determine whether a particular deployed application is out of compliance with the licensing rights of that application.

Within the proxy server is a network interface also coupled to the processor . This network interface allows the proxy server to couple to other servers or devices and establish communication.

At a request for communication is received at the proxy server from the client device . At a determination is made as to whether the client device is registered with the proxy server .

When at the client device is unregistered the process proceeds to where communication is denied. After denying communication at updated restriction information or other business rules are provided to the client device .

When at the client device is registered with the proxy server the process proceeds to determine at when one or more business rules associated with the client device are present. This determination may comprise interrogating the business rules database . The one or more business rules may have been distributed from a remote device such as the application management server third party service provider and so forth. In another implementation the logic of this determination may be inverted such that when no business rules are present communication is permitted.

When at no business rules are present the process proceeds to and denies communication. When at business rules are present the process proceeds to determine when the available network grant permit communication based on the business rules at .

When at the available network grant do not communication based on business rules the process proceeds to deny communication at . When at the network grant in conjunction with the business rules allows the communication the process proceeds to and allows communication.

Although specific details of illustrative methods are described with regard to the figures and other flow diagrams presented herein it should be understood that certain acts shown in the figures need not be performed in the order described and may be modified and or may be omitted entirely depending on the circumstances. As described in this application modules and engines may be implemented using software hardware firmware or a combination of these. Moreover the acts and methods described may be implemented by a computer processor or other computing device based on instructions stored on one or more computer readable storage media.

