---

title: Automatic application discovery, download, integration and launch
abstract: A mechanism is provided for integrated functionality across separate software applications to provide a response. First and second software applications are determined both of which are independently designed to perform actions to provide the response. The first software application has a first functionality software component and a first data source software component. The second software application has a second functionality software component and a second data source software component. According to a user profile, the OS selects between the first and second functionality software components a selected functionality software component, and selects between the first and second data source software components a selected data source software component from which to provide the data corresponding to the user request. The response is presented as the integration of the selected functionality and data source software components. The selected functionality and data source software components are not from the same software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09635129&OS=09635129&RS=09635129
owner: AT&T INTELLECTUAL PROPERTY I, L.P.
number: 09635129
owner_city: Atlanta
owner_country: US
publication_date: 20140910
---
The present disclosure relates generally to software applications on a communications device and more particularly to automatic software application discovery download integration and or launch for execution on the communications device.

A mobile application also referred to as app is a computer program designed to run on smartphones tablet computers and other mobile devices. Apps are usually available through application distribution platforms which began appearing in 2008 and are typically operated by the owner of the mobile operating system such as the Apple App Store Google Play Windows Phone Store and BlackBerry App World. Some apps are free while others must be bought. Usually they are downloaded from the platform to a target device such as an iPhone BlackBerry Android phone or Windows Phone but sometimes they can be downloaded to laptops or desktop computers. For apps with a price generally a percentage 20 30 goes to the distribution provider such as iTunes and the rest goes to the producer of the app. The same app can therefore cost the average smartphone user a different price depending on whether they use iPhone Android or BlackBerry devices.

The term app is a shortening of the term application software . It has become very popular. It was noted that newer smartphones could be nicknamed app phones to distinguish them from earlier less sophisticated smartphones.

Mobile apps were originally offered for general productivity and information retrieval including email calendar contacts and stock market and weather information. However public demand and the availability of developer tools drove rapid expansion into other categories such as mobile games factory automation GPS and location based services banking order tracking ticket purchases and recently mobile medical apps. The explosion in number and variety of apps made discovery a challenge which in turn led to the creation of a wide range of review recommendation and curation sources including blogs magazines and dedicated online app discovery services.

The popularity of mobile apps has continued to rise as their usage has become increasingly prevalent across mobile phone users. Researchers found that usage of mobile apps strongly correlates with user context and depends on user s location and time of the day.

Developing apps for mobile devices requires considering the constraints and features of these devices. Mobile devices run on battery and have less powerful than personal computers and also have more features such as location detection and cameras. Developers also have to consider a lengthy array of screen sizes hardware specifications and configurations because of intense competition in mobile software and changes within each of the platforms.

Mobile application development may require use of specialized integrated development environments. Mobile apps are first tested within the development environment using emulators and later subjected to field testing. Emulators provide an inexpensive way to test applications on mobile phones to which developers may not have physical access.

As part of the development process mobile user interface UI design is also an essential in the creation of mobile apps. Mobile UI considers constraints contexts screen input and mobility as outlines for design. The user is often the focus of interaction with their device and the interface entails components of both hardware and software. User input allows for the users to manipulate a system and device s output allows the system to indicate the effects of the users manipulation. Mobile UI design constraints include limited attention and form factors such as a mobile device s screen size for a user s hand s . Mobile UI contexts signal cues from user activity such as location and scheduling that can be shown from user interactions within a mobile application. Overall mobile UI design s goal is primarily for an understandable user friendly interface. The UI of mobile apps should consider users limited attention minimize keystrokes and be task oriented with a minimum set of functions.

Exemplary embodiments include a method for integrated functionality across separate software applications. The method includes receiving input of a user request from a user in order to provide a response and determining by a platform operating system executed by a processor a first software application and a second software application both of which are independently designed to perform actions for the user request in order to provide the response. The platform operating system provides for integration of the first software application and the second software application. The first software application comprises a first functionality software component to perform the user request and comprises a first data source software component to provide data corresponding to the user request. The second software application comprises a second functionality software component to perform the user request and comprises a second data source software component to provide the data corresponding to the user request. According to a user profile the platform operating system selects between the first functionality software component and the second functionality software component a selected functionality software component to perform the user request. According to the user profile the platform operating system selects between the first data source software component and the second data source software component a selected data source software component from which to provide the data corresponding to the user request. Presenting a response to the user request as the integration of the selected functionality software component and the selected data source software component. The platform operating system does not select both the selected functionality software component and the selected data source software component from a same software application.

Other exemplary embodiments include an apparatus for integrated functionality across separate software applications. The apparatus includes a processor and memory comprising computer executable instructions that when executed by the processor cause the processor to perform operations. The operations includes receiving input of a user request from a user in order to provide a response and determining by the processor a first software application and a second software application both of which are independently designed to perform actions for the user request in order to provide the response. Integration of the first software application and the second software application is provided. The first software application comprises a first functionality software component to perform the user request and comprises a first data source software component to provide data corresponding to the user request. The second software application comprises a second functionality software component to perform the user request and comprises a second data source software component to provide the data corresponding to the user request. According to a user profile between the first functionality software component and the second functionality software component a selected functionality software component is selected to perform the user request. According to the user profile between the first data source software component and the second data source software component a selected data source software component is selected from which to provide the data corresponding to the user request. The response to the user request is presented as the integration of the selected functionality software component and the selected data source software component. The processor does not select both the selected functionality software component and the selected data source software component from a same software application.

Other exemplary embodiments include a computer program product tangibly embodied on a computer readable medium for integrated functionality across separate software applications. The computer program product including instructions that when executed by a processor cause the processor to perform operations. The operations includes receiving input of a user request from a user in order to provide a response and determining by the processor a first software application and a second software application both of which are independently designed to perform actions for the user request in order to provide the response. Integration of the first software application and the second software application is provided. The first software application comprises a first functionality software component to perform the user request and comprises a first data source software component to provide data corresponding to the user request. The second software application comprises a second functionality software component to perform the user request and comprises a second data source software component to provide the data corresponding to the user request. According to a user profile between the first functionality software component and the second functionality software component a selected functionality software component is selected to perform the user request. According to the user profile between the first data source software component and the second data source software component a selected data source software component is selected from which to provide the data corresponding to the user request. The response to the user request is presented as the integration of the selected functionality software component and the selected data source software component. The processor does not select both the selected functionality software component and the selected data source software component from a same software application.

Other systems methods and or computer program products according to embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional systems methods and or computer program products be included within this description be within the scope of the exemplary embodiments and be protected by the accompanying claims.

The detailed description explains the exemplary embodiments together with advantages and features by way of example with reference to the drawings.

One issue with new technology especially technologies implemented in software applications e.g. applications or apps is the slow adoption of better algorithms better user experience UX better access to data etc. This is due primarily to the way that these better applications are discovered. This discovery process often uses word of mouth written articles and occasionally television. These communication methods even accounting for viral situations do not accomplish the task effectively for most potential users. As developing technology platforms such as connected car devices and connected home devices become more main stream an individual may find her ability to stay on top of the newest and or best applications insufficient. This could lead to slower acceptance of new and or better applications. illustrates a state of the art application relationship for a traditional application. The traditional application has a user experience functionality and access to data sources software all individually packaged in a single software application e.g. mobile app . In the traditional application relationship each of the various apps e.g. App through App are designed to be separate from one another and designed not to communicate with one another at the user experience functionality and access to data sources software component level when the apps are designed to fulfill the same purpose e.g. such as a map application . That is App cannot share it functionality component with App and App cannot share its access to data sources component with App . Similarly App cannot share its user experience UX component with Apps and . It is assumed that each of Apps through is individually developed by separate companies to complete the same desired task requested by a user but the Apps through cannot access each other s software components i.e. cannot access each other s user experience functionality and access to data sources software components .

The intersection of a growing focus on data centric decision making ubiquitous connectivity and intelligent systems devices presents an opportunity to change the paradigm for software implemented technology. The foreseeable evolution from traditional input methods e.g. typing tapping sliding etc. as well as touchscreen based all in one mobile devices towards ubiquitous computing wearable devices and new input methods e.g. gesture speech etc. lends further support to a paradigm shift in software implemented technology. This evolution reduces the importance or eliminates entirely the graphical user interface which is such an important aspect of modern smartphone applications. Incorporating speech and gesture input methods into developing technology spaces like the connected car devices and the connected home devices may accelerate the evolution in other areas. According to embodiments this shifting focus from user experience UX to functionality and performance across multiple technologies may be the first step toward breaking the current application model into its distinct components which are user experience UX functionality and data sources access databases . This separation of user experience UX functionality and data sources may enable each component to be developed sold and utilized independent of the others according to embodiments. This enables greater integration of functions as well as increased access to data sources. This also opens up development opportunities for outsiders to improve the algorithms functionality usually limited to employees of the company that developed the application. This creates new potential revenue and cost models for each component of an application as well as accelerates the optimization of application functionality. By separating the primary components of traditional applications into user experience UX functionality and data sources in embodiments application developers can focus on what they do best rather than providing a complete application with great functionality and a mediocre user experience.

The communications device may be a phone such as a smartphone a connected car device e.g. installed in a vehicle a connected home device e.g. a home appliance set top box media player television a tablet a laptop computer a desktop computer a gaming device etc. The communications device includes processors for executing instructions user interfaces such as keyboards touch screens mouse microphone camera etc. for interfacing with the communications device network interfaces for connecting to wired connections and wireless connections with a transceiver such as network and display for displaying information to the user.

The communications device includes memory . The memory may include a platform operating system and software applications. The memory includes integrated user experience software components which are each configured to work together because of their own standardized design and or because of the platform operating system being configured to translate between the different formats of the user experience components A through N. The memory includes integrated functionality software components which are each configured to work together because of their own standardized design and or because of the platform operating system being configured to translate between the different formats of the functionality software components A through N. Note that the translation between different formats may be by an intermediate functionality e.g. in place of the platform operating system performing translation which is a software component in downloaded from a software application store such as the software application store . When a new software component is downloaded from the software application store the store may have the executable process for translating between formats.

The memory includes access to data sources software components which are each configured to work together because of their own standardized design and or because of the platform operating system being configured to translate between the different formats of the access to data sources software components A through N.

More regarding the integrated relationship of the integrated user experience software components the integrated functionality software components and the integrated access to data sources software components is discussed below. Unlike the traditional application relationship in illustrates the integrated application relationship of the software applications in the communication device according to an embodiment. As can be seen in any one or more of the user experience components A through N can be selected by the platform operating system when there is a user request to perform a task input by the user via the user interface . Next any one or more of the functionality software components A through N can be selected by the platform operating system to process the task and perform processes needed to provide a response to the user e.g. two different functionality software components A and B may be selected to simultaneously and or individually execute processes according to the task requested . Any one or more of the access to data sources A through N may be selected by the platform operating system to retrieve data necessary to process and perform the requested task and the selected functionality software components A and or B utilize and process the retrieved data to provide the response to the task back to the user. The first through last data sources A through N are memory storage devices each having data databases in respective servers A through N and the servers A through N may connect to the communications device though the network . The user experience software component includes the protocols and expected input data structures as well as the capable input methods user experience structures etc. The user experience software component may also include data gathering capabilities as well as user preference customization capabilities. The functionality software component includes any analysis and modification of user inputs data and or data obtained from other sources including those of the access to data sources software component. The functionality software component may also include expected input data structures as well as output data structures. The access to data sources software component includes the protocols structures and access privileges to obtain data from a remote location or collection of remote locations including sensors sensor networks such as data sources .

User preferences for each task user requests are pre stored in a user profile in order for the platform operating system to determine and select which user experience software component A N of the integrated user experience software components to utilize determine and select which functionality software component A N of the integrated functionality software components to utilize and determine and select which access to data sources software component A N of the integrated access to source software components .

In one case there may be various different software applications A through N where each software application A through N is individually independently developed by different software development companies and designed to completely perform the same task user request without the assistance from another one of the software applications A through N. For example if the task is related to mapping such as e.g. to find a destination and navigate to the destination from the current location then each of the software applications A through N is designed to independently perform this task by providing a response . Although mapping and navigating is the example task given the concept is that the different software applications A through N may be related to the same particular task such as playing music playing movies shows social media news etc. and that the platform operating system is configured to integrate aspects of the different software applications A though N to fulfill user preferences in user profile . Although the platform operating system may be able to integrate the respective user experience software components the functionality software components and the access to data sources software components in order to accomplish a task the different software applications A through N may each have their own user experience software component functionality software component and access to data sources software component. For example the software application A may have and be designed with its own user experience software component A functionality software component A and access to data sources software component A which were each designed to work together to perform accomplish the same task e.g. mapping and navigation . Similarly other software applications B through N each have their own user experience software component functionality software component and access to data sources software component and are each designed to work together to perform accomplish the same task e.g. mapping and navigation . For example the software application B may have and be designed with its own user experience software component B functionality software component B and access to data sources software component B which were each designed to work together to perform accomplish the same task e.g. mapping navigation likewise the software application C may have and be designed with its own user experience software component C functionality software component C and access to data sources software component C which were each designed to work together to perform accomplish the same task e.g. mapping navigation . The same may apply to the other software applications . When a task user request is requested by the user the platform operating system is configured to utilize user preferences in the user profile to select e.g. two or more desired software applications having the required functionalities and capabilities to complete the task such as mapping and navigating capabilities of the software applications A through N to accomplish this task but the user preferences in the user profile can specify to the platform operating system which user experience software component which functionality software component and which access to data sources software component to utilize from two or more different software applications e.g. software applications A and B . Accordingly the platform operating system is configured to utilize the selected specified user experience software component functionality software component and access to data sources software component designated by the user profile . In one case note that any one or more of the user experience software components A through N the functionality software components A through N and the access to data sources software components A through N may be a stand alone software component. For example although software applications A through N are shown as having a user experience software component a functionality software component and an access to data sources software component any of the components may be separate and not part of software applications A through N.

At block the platform operating system obtains a task user request to do something e.g. find map a destination and navigate to the destination from the current location via user interface and the platform operating system may receive the user s input of the task through user experience software UX component A. Via the user interface the task may be received from the user by a voice command by input on a keyboard by input on a touch screen by input of a gesture obtained by a camera etc. Assume that the user spoke a voice command into the microphone of the user interface and asked to find a destination and then navigate to the destination from the user s current location found using a global positioning system GPS device . As set in user preferences in the user profile the platform operating system may select and utilize user experience software component UX A of e.g. software application A because the UX A can receive input of voice commands for mapping and navigation and because the user profile identifies that the user prefers the output display of the user experience software component A over the other user experience software components UX B through N for the requested task of mapping and navigating .

At block the platform operating system is configured to identify the capabilities functionalities required and the access to data sources required to accomplish the requested task and then platform operating system is configured to select the individual functionalities software components from the integrated functionality software components according to the user profile and to select the required individual data sources from the integrated access to data sources software components . For example the platform operating system compares the needed capabilities functionalities which are mapping and navigation capabilities in this example but could be music television shows movies etc. in other cases to the available and existing capabilities functionalities e.g. in functionality software components of software applications in order to select the individual functionalities software components from the integrated functionality software components . Also the platform operating system compares the needed access to data sources which are for mapping and navigation data sources in this example but could be music television shows movies etc. in other cases in order to select the required individual data sources from the integrated access to data sources software components . Note that the integrated access to data sources software components stored in memory are not the data sources databases themselves but contain the required permission and authentication including user names and passwords account numbers access codes etc. to access the respective data sources A through N on respective servers A through N.

In one case to meet the capabilities functionalities requirement the platform operating system selects functionality software component A and functionality software component B from the integrated functionality software components according to user preferences in the user profile to accomplish the task requested by the user which are both previously and independently designed to provide the response for the task input by the user. Note that there were other functionality software components that could perform the task but the platform operating system did not select them because the user preferences in the user profile preferred functionality software components A and B. In one implementation the functionality software component A may perform a first part of the processing required for the task user request . The platform operating system takes the output of the functionality software component A and provides the output as input to the functionality software component B in which the functionality software component B performs the second part of the processing required for the task. To meet the data sources requirement e.g. for mapping and navigating from a current location to a destination location the platform operating system selects access to data sources software component B from the integrated access to data sources software components according to user preferences in the user profile to accomplish the task requested by the user instead of selecting the access to data source software component A which could have been utilized but is not preferred in the user profile . Note that both access to data source software components A and B are previously and independently designed to provide data for the response for the task input by the user.

The access to data source software component is designed to communicate and make connection via network to a desired data source e.g. a particular first through last data sources on one of first through last servers . By checking the user preferences in the user profile the platform operating system is designed to recognize identify and select the access to data source software component B instead of the candidate access to data source software A to fulfill the task requested by the user.

At block the platform operating system is configured to determine cross functionality components required between two or more of the integrated functionality software components . Cross functionality requires two or more functionality software components e.g. functionality software components A and B in the integrated functionality software components to work together in order to provide the response to the user. Cross functionality allows one functionality software component A to perform part of the processing and hand its output via platform operating system over to another functionality software component B to perform the other part of the processing. Output from the functionality software component B can be returned to the software component A as needed. In one case being designed by two different competing software development companies to accomplish the same task e.g. mapping and navigation the software application A having software components A A A may not be compatible with the software application B having software components B B B . To account for incompatibility the platform operating system is configured to identify the input output I O data structure and syntax i.e. format may be C C Unix based Java etc. of the selected functionality software components A and B more than two functionality software components may be selected in one case for software applications A and B respectively at block . At block the platform operating system is configured to determine the input and output compatibility of the selected functionality software components A and B along with selected access to data sources software component B and the platform operating system is configured to modify the respective input output data structure syntax etc. so that the data is compatible when transferred back and forth between the selected functionality software components A and B of software applications A and B respectively along with selected access to data sources software component B . Note that the platform operating system may parse the code of each of the integrated functionality software components along with integrated user experience software components and integrated access to data sources software components in advance to determine their respective input output I O data structure and syntax as understood by one skilled in the art.

In one implementation the two integrated functionality software components e.g. selected functionality software components A and B may utilize a standardized i.e. the same input output I O data structure syntax etc. to perform their respective parts of the processing and no compatibility processing by the platform operating system is required. In this case the platform operating system is configured to move input data and output data back and forth between the selected functionality software components A and B of software applications A and B respectively as needed to accomplish the task and then present the response to the task using the preferred output display for the selected user experience which is e.g. the user experience software component A .

Additionally there may be a case in which the two integrated functionality software components e.g. selected functionality software components A and B may not utilize a standardized input output I O data structure syntax etc. to perform their respective parts of the processing and therefore compatibility processing by the platform operating system is required. In this case the platform operating system is configured change the input output I O data structure syntax etc. into the input output I O data structure syntax necessary to move input data and output data back and forth between the selected functionality software components A and B of software applications A and B respectively as needed to accomplish the task and then to present the response to the task using the preferred output display for the selected user experience which is e.g. the user experience A . In one case to translate convert between two formats e.g. the input output I O data structure syntax etc. the platform operating system may incorporate machine learn to recognize format structures etc. and convert as necessary. In another case with regard to translation converting between two formats e.g. the input output I O data structure syntax etc. an intermediate functionality component may be utilized. In this case the platform operating system would not need to convert anything. In another case the software application store or other remote system might provide the platform operating system with the rules required to convert between two formats structures etc.

To accomplish the requested task the platform operating system is configured to map the sequence and store in mapping sequence for which of the selected functionality software components is to perform its functionality job process first second third etc. and or simultaneously along with the associated details which includes the I O data structure syntax e.g. computer language for each of the selected functionality software components at block . In one case the platform operating system can do the full mapping. In another case the mapping can be changed according to the context of what software components are being utilized. In other words the mapping is not fixed and may change according to contextual awareness information as monitored provided by contextual awareness software . The contextual awareness software may work alone and or in conjunction with the platform operating system to perform mapping. The contextual awareness software may receive various contextual information related to the user such as emotional state e.g. from a wearable device of the user calendar information including schedules GPS data e.g. from the GPS device to determine if the user is moving e.g. driving messaging information telephone calling information etc. The platform operating system is configured to utilize contextual information from both the user profile and the contextual awareness software when performing mapping. Suppose that the platform operating system usually maps to a particular access to data sources software component for Google in order to access a Google maps data source but the contextual awareness software provides information that the user is in a large building such as the mall. In this case the platform operating software is configured to map to an access to data sources software component for an internal building e.g. malls of America that corresponds to a data source database for the internal layout and floor plans of buildings such as the mall .

Additionally the platform operating system is configured to identify and map stored the necessary conversions for the I O data structure and syntax the selected access to data sources software component B in the integrated access to data sources software components that are associated with each selected functionality software component A and B at block . The platform operating system is configured to map when e.g. multiple times input is to be provided to the selected access to data source software component B such that data e.g. mapping and navigation data can be requested and retrieved from the data source B of server B. As noted earlier each access to data sources software component A though N is designed to access its own data source A through N respectively. For example access to data source software component J would access data source J in server J. Using the I O data structure and the syntax previously determined along with any necessary compatibility modifications and stored in the mapping sequence the platform operating system is configured to access the selected access to data source software component A when needed.

At block the platform operating system is configured to provide the response to the task using the selected user experience e.g. UX A by executing according to the mapping sequence the selected functionality software components A and B and the selected access to data sources software component B in order to develop the mapping and navigating response for the user. The response to the requested task user request may be displayed on the display and heard through speakers of the user interfaces using the selected user experience software component A of software application A . The selected user experience software component A has the desired layout and features for mapping and navigating as preferred by the user in the user profile . However the platform operating system and or the user may recognize and store in user profile that the access to data sources software component B connects to the most up to date comprehensive database e.g. data source B and therefore the platform operating system is configured to perform integration in order to access the data source B through data sources software component B of software application B . The user may give the platform operating system permission to parse the rating and categorization database to find and download the best user experience software components functionality software components access to database sources software components in any particular software application in the software application store . This allows the platform operating system the ability to integrate improved functionality and data sources in the user profile when performing the user request for the user.

Various examples are provided that take advantage of the features discussed above. As can be seen herein this disclosure separates the three primary components of traditional applications and enables the integration of functionality and access to data sources within the platform communications device e.g. smartphone mobile device connected car device connected home device etc. . Software applications A through N on these platforms such as e.g. communications device are integrated rather than functioning as independent units which may occasionally communicate with one another. Integration is with respect to how different software components are allowed to work together as a whole according to embodiments. Unlike different smartphone apps that perform the same function task the platform communications device which may be e.g. a smartphone mobile device connected car device connected home device may have a user experience UX e.g. user experience software component A that appears the same or similar regardless of the functionality being utilized e.g. functionally software component A B C and or which developer contributed developed it. User inputs are converted by the platform operating system into the corresponding input for different software applications e.g. converted to be utilized by functionality software components A and B when the input is not compatible in its original form if existing application functionality is replaced by a better one that may have different inputs i.e. different I O data structure and syntax . A gesture to turn something on i.e. initialize utilizing process A in functionality software component A of software application A might involve waving an open hand in front of the camera of user interface . When the process A in functionality software component A of software application A is replaced by better a better process B in functionality software component B of software application B the input for process B in functionality software component B to turn something on might be a clap received via the microphone of the user interface . The user of communications device can still wave an open hand to turn something on i.e. initiate the function as set in the user preferences of the user profile even if process B in functionality software component B is utilized because the platform operating system that downloaded from server and installed the process B of functionality software component B in communication device knows the old input wave open hand and the new input clap and can convert between the two. The platform operating system is designed to recognize the input of the hand wave e.g. via functionality software component A and translate the hand wave into the necessary input for the hand clap so that the input I O data structure syntax is now compatible with process B in functionality software component B.

The user experience software component UX becomes another level of development just like functionality of the functionality software component. Different user experience capabilities created by different developers can be integrated into a single user experience e.g. integrated user experience software components that is used for most or all interaction between the user and the platform communications device . These different UX capabilities can include speech input gesture input speech and gesture recognition context capturing and analysis display intelligent digital assistants etc. As shown in the platform operating system serves as an interpreter between the integrated user experience UX software components and the integrated functionality software components ensuring that inputs are correctly converted if necessary into the appropriate format for use in the integrated functionality software component . Note that any one or more of the user experience software components A through N the functionality software components A through N and the access to data sources software components A through N may include application programming interfaces APIs .

Now turning to the integrated access to data sources software component this data source software component can be aggregated and organized as well. Access to different data sources A though N may be catalogued and associated with different functionality software components A through N by the platform operating system . Again in this case the platform operating system is responsible for ensuring proper association between the functionality of the functionality software components A through N and the access to data sources of the access to data sources software components A through N . This ensures that a user s interest in news articles does not result in streaming music.

This disclosure further provides enabling objective rating and categorization of application functionality I O performance etc. stored in rating and categorization database in the software application store server . This enables an intelligent system in the platform operating system to select on the server the most appropriate functionality software component purchase the functionality software component if required and permitted in the user profile download the purchased functionality software component and integrate purchased functionality software component into the integrated functionality software components without the user s knowledge e.g. without having to ask the user for permission . This objective analysis and categorization in database which may optionally be stored in whole or part in communications device enables rapid adoption of improved methods by mechanizing part or all of the discovery process. The intelligent system in the platform operating system may identify needs of a user and or connected system and search for the best software application that matches the needs requirements. These requirements could include the desired functionality compatibility with existing and planned future integrated applications performance requirements size cost relative improvement in these categories cost benefit analysis etc. The analysis and categorization of software applications in database further enables the intelligent system in the platform operating system to recommend new software applications stored on server based on what software applications A through N that have currently been downloaded and integrated and based on what new software applications may better match the intelligent system s requirements in platform operating system than ones currently being used.

According to the discovery and download process above using this solution the platform operating system of the communications device can use its pre stored knowledge of its user user s e.g. stored in the user profile to determine what functionality user interface characteristics in the user experience UX and data sources that are useful beneficial to the user. This intelligent system of the platform operating system then identifies the possible new software application e.g. a new software application having new a new user experience software component functionality software component new access to data sources software component that fit the user s preferences in the user profile and possibly other requirements. The intelligent system of the platform operating system can compare all candidate software applications including their respective user experience functionality and access to data sources components across one or more metrics stored in analysis rate and categorization database and select the one that best fits the identified needs and requirements. The intelligent system in the platform operating system can purchase the software application based on the best metrics if required when permitted by the user according to a user setting in the user profile and or could request authorization from the user download the software application and integrate the user experience functionality and access to data sources software components in the purchased software application with any other software components in the same component level user experience UX functionality access to data sources software components . Note that although user experience software components functionality software components and access to data sources software components are the three types mentioned in this disclosure it is contemplated that other breakdowns classifications are possible. When new user experience functionality and access to data sources software components or updates are introduced into the application component market represented by the software application store the new user experience functionality and access to data sources software components are analyzed measured and catalogued in the database to enable simple searching and comparison by the intelligent system of the platform operating system . A compatibility comparison may also be performed by the platform operating system and the results documented in the user profile to ensure proper functioning when integrated with other components i.e. the integrated user experience software components functionality software components access to data source software components in the communication device .

When the intelligent system of the platform operating system compares all candidate user experience components functionality software components and access to data sources software components across the metrics may include objective metrics and or subject metrics. The objective metrics of each of the user experience components functionality software components and access to data sources software components may include and be ranked according to the following 

1 Required computing resources such as required processing clock cycles memory requirements etc. A software component requiring the fewest computing resources is ranked higher than a software component requiring more computing resources when both can complete the task.

2 How many intermediate components are required and how large are they what computing resources are required etc. for the new software component relative to existing old software component if any already on the communications device for completing the task. For example the new software component may require more intermediate components than the old software component and the platform OS may not download the new software component or vice versa .

3 Number and quality of integrated uses for the new software component relative to existing old software component. The new software component to be downloaded from store may connect to more software components to the existing old software component already on the communications device . As such the platform operating system is configured to download the new software component.

4 Data source quality more recently updated data source scale larger size and data source scope larger selection of and or related to the new software component is greater in amount than the exiting old software component. The platform operating system is configured to download the new software component.

5 User experience metrics for successful input recognition and false positive input recognition of the new software application are ranked higher than the existing old software component. In this case the platform operating system is configured to download the new software component for use.

The goal of the platform operating system is to use and download the best component for the situation context. Accordingly there are subject metrics utilized by the platform operating system in this decision. Part of this is specific to the user of the communications device such as which existing old components are being used which components might be used with the new component and how frequently will various combinations be used and in what situations. There are two levels being viewed which are the individual component level and the user specific integrated level. The platform operating system is configured to recognize that the software components the user likes to use based on user profile are not directly compatible with the highest ranked new software component and lots of translation converting of formatting is required. In this case the platform operating system is configured to pick and download a lesser ranked new software component from the store that is completely and or more compatible with the exiting old software components regularly used by the user.

Further the intelligent system of the platform operating system may generate a request to have functionality created on demand and send the request to on call developers at server . For example the intelligent system of the platform operating system is configured to identify a need for some functionality which the platform operating system communicates the request to the application component market on server the intelligent system may search and or cause the server to search the application component market and or database in an attempt to meet the request. If the request is met by the application component market in server the intelligent system can purchase download and integrate the purchased functionality software component into the communications device . Alternatively e.g. if the request cannot be met by server and or additionally this request need is sent to the on call developers on the on call developers server to rapidly create this functionality software component. Upon completion of the request for the functionality software component by the on call software developers operating the server the server notifies the intelligent system of the platform operating system that the requested functionality software component is completed the intelligent system of the platform operating system is configured to purchase download from the server to communications device and integrate the purchased functionality software component into the communications device .

Now turning to a flow chart of a method executed by the communications device for integrated functionality across separate software applications is provided according to an embodiment. As discussed herein the platform operating system including the intelligent system may comprise instructions that are executed by the processors of the communications device .

At block the communications device e.g. the platform operating system having instructions executed by one or more processors receives input of a user request from a user in order to provide a response. As an example the user request may be for mapping and navigating to a destination from a current location.

At block the communications device determines a first software application A and a second software application B and any other needed software applications both each of which are independently designed e.g. by different software developers to perform actions which may be the same type of actions for the user request in order to provide the desired response back to the user. Although two example software applications are determined to have qualities ability to provide the response to the user request e.g. for mapping and navigating to a destination from a current location it is understood that the communications device e.g. the platform operating system having instructions executed by one or more processors may determine that multiple software applications to have qualities ability to provide the response to the user request.

At block the communications device e.g. platform operating system is designed to provide an integration of the first software application A and the second software application B. The first software application A comprises a first functionality software component A to perform the user request comprises a first data source software component A to provide data corresponding to the user request by accessing the first data source A in server A and comprises a first user experience software component A designed to both receive the user request and present the response to the user request. The second software application B comprises a second functionality software component B to perform the user request comprises a second data source software component B to provide the data corresponding to the user request by accessing the second data source B in sever B and comprises a second user experience software component B designed to both receive the user request and present the response to the user request.

At block according to user preferences pre stored the user profile the communications device selects between the first functionality software component A and the second functionality software component B a selected functionality software component to perform the user request. Although two example functionality software components are illustrated it is contemplated that the selection may be among multiple functionality software components in the integrated functionality software components .

At block according to user preferences pre stored the user profile the communications device selects between the first data source software component A designed to request and retrieve data from data source A and the second data source software component B designed to request and retrieve data from data source B a selected data source from which to provide the data corresponding to the user request.

At block the communications device presents the response to the user request as an integration of the selected functionality software component which may be functionality software component A B and or both in this example and the selected data source software component which may be data source software component A B and or both although data from a single data source may be utilized to generate the response to the user request .

At block the communications devices is configured not to select both the selected functionality software component and the selected data source software component from the same software application thereby not excluding either of the first software application A and the second software application B and thus allowing integration of the first software application A and the second software application B. That is the selected functionality software component and the selected data source software component would not both be selected from the first software application A such that the functionality software component A and the access to data source software component A are utilized to the exclusion of selecting any software components from the second software application B. Similarly the selected functionality software component and the selected data source software component would not both be selected from the second software application B such that the functionality software component B and the access to data source software component B are utilized to the exclusion of any components from the first software application A.

However there may be case where the selected functionality software component is both the functionality software components A and B to be executed and the selected data source software component is both the access to data source software component A and B.

The first software application A and the second software application B and their respective components are both designed to perform the same action e.g. both can perform mapping and navigating independent from one another in which the same action independently results in the response but only a single response is provided to the user . The user profile comprises user preferences indicating what part of the first software application A such as the user experience software component A the functionality software component A the access to data sources software component A that the user prefers over the second software application such as the user experience software component B the functionality software component B the access to data sources software component B designed to perform the same action. Similarly the user profile comprises the user preferences indicating what part of the second software application B that the user prefers over the first software application A designed to perform the same action.

The user preferences in the user profile indicate that the user prefers the first functionality software component A of the first software application A to perform the user request such that the platform operating system selects the first functionality software component of the first software application A as the selected functionality software component. The user preference of the user profile indicates that the user prefers the second data source software component B associated with the second software application A to provide the data corresponding to the user request such that the platform operating system selects the second data source software component B of the second software application B as the selected data source.

In one case the communications device determines that the first functionality software component A and the second functionality software component B are both needed to perform the user request and determines whether input and output back and forth between the first functionality software component A and the second software component B are in a compatible format. When the input and the output between the first functionality software component and the second software component are not in the compatible format the communications device translates the input and the output into the compatible format as needed such that the input and the output can flow i.e. be passed back and forth between the first functionality software component A and the second software component B. Also translating the input and the output into compatible formats as needed allows data to be passed in any direction back and forth among the first functionality software component A the second software component B the first access to data sources A and the second access to data sources B. When the input and the output are in the compatible format at the onset the communications device passes flows the input and the output back and forth between the first functionality software component and the second software component without requiring translating the input and the output.

The first software application and the second software application are competitors and are separately developed e.g. by competing businesses entities to accomplish the user request. For example the first software application and the second software application can be competitor in the same business market such as Google maps versus MapQuest Google Play versus iTunes etc.

In one case the first software application and the second software application have a compatible format designed according to a standardized format although the first and second software applications are competitors such that the communications device can share pass input and output between the first software application and the second software application as needed to fulfill the user request.

The communications device determines that additional functionality is required to accomplish the user request and automatically determines a new software application to provide the additional functionality by parsing a software application market on the server . Assume that the new software application is the software application C. The new software application C comprises a new functionality software component C a new user experience software component C and a new data source software component C all of which is parsed by the platform operating system in determining that the additional functionality can be met with new software application C. The communications device automatically purchases and downloads the new software application C from the software application market without requesting approval from the user according to the user profile .

As different options the user request task comprises may be related to a mapping and navigation request a retrieving and playing audio request a retrieving and playing movies request a retrieving and playing video request a controlling an appliance request and a video telephone call request.

Given the teachings of the present disclosure consider an example where the user request received by the platform operating system is for mapping and navigating to a destination location from a current location and the user profile prefers as determined by the platform operating system the user experience software component A and functionality software component A both are part of the software application A . Additionally with regard to the user request the user profile prefers as determined by the platform operating system the access to data sources software component B of the software application B because the access to data sources software component B requests and retrieves mapping and navigation data from the more complete data source B. Assume that the first software application A is Google maps software application and that assume that the second software application B is MapQuest software application both of which are competitors using proprietary software. Google maps software application A owns and retrieves mapping and navigating data from data sources A on server A where access is restricted to only Google maps. Likewise MapQuest maps software application B owns and retrieves mapping and navigating data from data sources B on server B where access is restricted to only MapQuest maps.

The user experience A and functionality software component A of the Google maps software application A can process the user request task by receiving data from Google data source A on server A but the Google maps user experience software component A and functionality software component A and Google access to data sources A cannot access the MapQuest data sources B. After determining the restricted access to the data sources and in order to adhere to the user preferences in the user profile the platform operating system is configured to cause the user request to be executed by both Google maps software application A and MapQuest maps software application B. After the access to data sources software component B has retrieved the mapping and navigation data and passed the data to the functionality software component B and when the functionality software component B is passing the mapping and navigation data to the user experience B the platform operating system is configured to take the mapping and navigation data output from the MapQuest maps functionality software component B and input this MapQuest mapping and navigation data to the Google maps functionality and user experience software components A and A. Using the MapQuest mapping and navigation data retrieved from the MapQuest data source B in place of the Google mapping navigation data retrieved from the Google data source A the Google functionality and user experience software components A and A provide the response back to the user as preferred in the user profile . The platform operating system may have to modify the format of the MapQuest mapping and navigating data feed coming from the MapQuest software application B in order for the I O data structure and syntax to be compatible with the input needed for Google user experience A that is supported by the Google functionality software component A. When the format of the MapQuest mapping and navigating data is different from the usual format of the Google mapping and navigating data the platform operating system may have to convert between waypoints data latitude and longitude data street address data etc. in order to display desired navigation from the current location to the destination location as required by the user request. This allows the user of communications device to have the user experience and functionality of Google maps while utilizing the mapping and navigation data of MapQuest or vice versa according to the scenario. Note that the platform operating system may parse the Google software application A and the MapQuest software application B in advance such the platform operating system can purchase and download any conversion software application from the software application store to ensure compatibility when mapping data is passed between the two Google software application A and the MapQuest software application B. Note that various conversions for formatting occurs behind the scene without the user s knowledge i.e. without the user s prompting . In one implementation the platform operating system may inform display the user that a conversion process may take a predetermined amount of time and ask the user whether he wants to proceed. If yes the platform operating system proceeds with the conversion according to the scenario. If no the user selects not to proceed with the conversion the platform operating system can solely utilize the MapQuest software application B from which the MapQuest mapping and navigation data was retrieved. As well if the user selects not to proceed with the conversion the platform operating system can solely utilize the Google maps software application A from which Google mapping and navigation data was retrieved.

By analogy the above example scenario can also apply to two competitor music movie providers such as Google play and iTunes . Assume that software application A is for Google play and the software application B is for iTunes or vice versa .

Note that the user profile may include user preferences that the user explicitly selected e.g. by right mouse clicking before and or when a software application is running and then choosing prefer. Also when there are two or more competitor software applications used by the user and the competitor software application can independently accomplish the user request task the platform operating system is designed to ask questions regarding the user experience functionality and data sources related to each software application in order to generate user preferences in the user profile according to embodiments. Whenever the platform operating system determines the sequence of operations needed between software applications the necessary conversions for input and output and the necessary conversion software applications this information is stored in the mapping sequences for subsequent use.

Although the platform operating system may perform the integration and generate the mapping sequence for determining which software component to perform first second third etc. the software application store on server may map what is necessary for integrated functionality e.g. such as for a new functionality software component J prior to download integration and use of the new functionality software component J on the communications device . This mapping of the mapping application stored in the software application store and received by the communication device is performed in advance and placed in the store when the new functionality software component J is made available. This mapping may be performed by the individual group and or company that created the new functionality software component J. This mapping could be a point of comparison with that of similar components. Also the software application store may provide in advance global mapping for the new functionality software component J and the global mapping can be downloaded and integrated by the communications device to provide the mapping sequence for the new functionality software component J. The global mapping for the new functionality software component J provides the necessary sequence of operations to integrate the new functionality software component J with all software applications in the software application and or all the software applications on the communications device . For example the global mapping for the new functionality software component J provides the necessary conversions for input and output between the new functionality software component J and all of the software applications in the store along with the necessary conversions for input and output between the new functionality software component J and the software applications on the communications device . The global mapping for the new functionality software component J may be stored in the mapping sequence . The global mapping for the new functionality software component J may be updated to add or remove some of the mapping.

Note that various examples have been discussed with regard to the processing performed by the communications device but embodiments are not meant to be limited to processing by the communication devices . A server may be in the cloud and the server may store the same and or nearly the same elements in memory such that the server can perform the integrated processes discussed herein. The server can then send the result to the communications device e.g. such as a smart phone 

Generally in terms of hardware architecture the computer may include one or more processors computer readable storage memory and one or more input and or output I O devices that are communicatively coupled via a local interface not shown . The local interface can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface may have additional elements such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software that can be stored in the memory . The processor can be virtually any custom made or commercially available processor a central processing unit CPU a data signal processor DSP or an auxiliary processor among several processors associated with the computer and the processor may be a semiconductor based microprocessor in the form of a microchip or a microprocessor.

The computer readable memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as dynamic random access memory DRAM static random access memory SRAM etc. and nonvolatile memory elements e.g. ROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM programmable read only memory PROM tape compact disc read only memory CD ROM disk diskette cartridge cassette or the like etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

The software in the computer readable memory may include one or more separate programs each of which comprises an ordered listing of executable instructions for implementing logical functions. The software in the memory includes a suitable operating system O S compiler source code and one or more applications of the exemplary embodiments. As illustrated the application comprises numerous functional components for implementing the features processes methods functions and operations of the exemplary embodiments. The application of the computer may represent numerous applications agents software components modules interfaces controllers etc. as discussed herein but the application is not meant to be a limitation.

The operating system may control the execution of other computer programs and provides scheduling input output control file and data management memory management and communication control and related services.

The application may be a source program executable program object code script or any other entity comprising a set of instructions to be performed. When a source program then the program is usually translated via a compiler such as the compiler assembler interpreter or the like which may or may not be included within the memory so as to operate properly in connection with the O S . Furthermore the application can be written as a an object oriented programming language which has classes of data and methods or b a procedure programming language which has routines subroutines and or functions.

The I O devices may include input devices or peripherals such as for example but not limited to a mouse keyboard scanner microphone camera etc. Furthermore the I O devices may also include output devices or peripherals for example but not limited to a printer display etc. Finally the I O devices may further include devices that communicate both inputs and outputs for instance but not limited to a NIC or modulator demodulator for accessing remote devices other files devices systems or a network a radio frequency RF or other transceiver a telephonic interface a bridge a router etc. The I O devices also include components for communicating over various networks such as the Internet or an intranet. The I O devices may be connected to and or communicate with the processor utilizing Bluetooth connections and cables via e.g. Universal Serial Bus USB ports serial ports parallel ports FireWire HDMI High Definition Multimedia Interface etc. .

When the computer is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the computer pursuant to the software. The application and the O S are read in whole or in part by the processor perhaps buffered within the processor and then executed.

When the application is implemented in software it should be noted that the application can be stored on virtually any computer readable storage medium for use by or in connection with any computer related system or method. The application can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus server or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions.

In exemplary embodiments where the application is implemented in hardware the application can be implemented with any one or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

As described above the exemplary embodiments can be in the form of processor implemented processes and devices for practicing those processes such as processor. The exemplary embodiments can also be in the form of computer program code containing instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other computer readable storage medium wherein when the computer program code is loaded into and executed by a computer the computer becomes a device for practicing the exemplary embodiments. The exemplary embodiments can also be in the form of computer program code for example whether stored in a storage medium loaded into and or executed by a computer or transmitted over some transmission medium loaded into and or executed by a computer or transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via electromagnetic radiation wherein when the computer program code is loaded into an executed by a computer the computer becomes an device for practicing the exemplary embodiments. When implemented on a general purpose microprocessor the computer program code segments configure the microprocessor to create specific logic circuits.

While the invention has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention but that the invention will include all embodiments falling within the scope of the claims. Moreover the use of the terms first second etc. do not denote any order or importance but rather the terms first second etc. are used to distinguish one element from another. Furthermore the use of the terms a an etc. do not denote a limitation of quantity but rather denote the presence of at least one of the referenced item.

