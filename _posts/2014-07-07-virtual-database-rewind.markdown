---

title: Virtual database rewind
abstract: A database storage system allows users to modify the state of a virtual database. The database storage system provides a respective virtual database (VDB) at a respective destination, the respective VDB having a first timeflow stored in a respective container. A user can send a request to rewind a VDB. The request identifies timeflow of the VDB and a state of the VDB associated with a timeflow. The database storage system modifies the virtual database to refer to database blocks associated with a snapshot of the VDB associated with the identified timeflow. The database storage system maintains a new timeflow for the modified VDB. The database storage system also allows the virtual database to be refreshed to a state of a source database. The source database can be a database stored in an external system or a virtual database stored within the database storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396074&OS=09396074&RS=09396074
owner: Delphix Corp.
number: 09396074
owner_city: Menlo Park
owner_country: US
publication_date: 20140707
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 844 376 filed Jul. 9 2013 which is incorporated by reference in its entirety. This application is also a continuation of PCT Application No. PCT US14 44176 filed on Jun. 25 2014 which claims the benefit of U.S. Provisional Patent Application No. 61 844 376 filed Jul. 9 2013 each of which is incorporated by reference in its entirety.

This invention relates generally to databases and in particular to storage efficient systems for managing databases.

Databases store the data that is critical to an organization and thus form an important part of an organization s information technology infrastructure. Database software is often complex and requires experts for example database administrators for maintaining the database software. Furthermore databases store large amount of information. As a result conventional techniques for performing several database operations are very slow. For example for purposes of development and testing developers and or testers need a copy of a database as it existed at a particular point in time. Providing such database may only be possible if an appropriate backup of the database was taken at that point in time. Assuming the appropriate backup was taken a database administrator is often required to take appropriate steps to restore the database to the required state. Furthermore the restore operation can take a long time. The overall delay in interacting with the database administrator and getting the database restored can be significant. As a result developers and or testers have to wait for the appropriate test development database to be available. These delays can be costly for the enterprise as various personnel wait for the appropriate environment to become available. Furthermore delays in the development and testing process cause further delay in fixing of the problem resulting in loss of productivity. As a result conventional techniques for providing a copy of a database corresponding to a particular state are often inadequate.

Embodiments perform a rewind operation on a virtual database VDB by modifying the state of the VDB to another state of the VDB. A database storage system stores snapshots of a source database representing a point in time copies of database blocks of the source database such that one or more database blocks are shared across the snapshots. The database storage system provisions a virtual database based on database blocks of a snapshot of the source database. The database storage system maintains timeflows for the virtual database such that a timeflow comprises representations of changes to the virtual database starting from an initial state. The representations of changes to the virtual database comprise snapshots of the virtual database taken at different points in time such that one or more database blocks are shared across snapshots of the virtual database. The database storage system receives a request to rewind the virtual database to a previous state of the virtual database. The request identifies a timeflow of the virtual database and a target point in time associated with the identified timeflow. The database storage system rewinds the virtual database by modifying the virtual database to refer to database blocks of a snapshot of the virtual database associated with the timeflow. The database storage system maintain a new timeflow for the rewound virtual database the new timeflow representing changes caused by subsequent updates to the rewound virtual database

Embodiments perform refresh operation on a VDB to modify the state of the VDB to a state of a source database associated with the VDB. The database storage system maintains timeflows for a source database each timeflow comprising representations of changes to the source database starting from an initial state of the source database. The representations of changes comprise snapshots of the source database taken at different points in time. The database storage system provisions a virtual database based on database blocks of a snapshot of the source database. The database storage system maintains timeflows for the virtual database. The database storage system receives a request to refresh the virtual database to a state of the source database identified by a timeflow of the source database and a target point in time of the timeflow. The database storage system refreshes the virtual database by modifying the virtual database to refer to database blocks of a snapshot of the source database associated with the identified timeflow. The database storage system maintains a new timeflow for the refreshed virtual database representing changes caused by subsequent updates to the refreshed virtual database.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Furthermore the above mentioned approach to remote provisioning allows historical changes updates or modifications to source database blocks e.g. database blocks in a production database to be saved across time in a storage and performance efficient manner as VDB snapshots captured at various time points. These historical changes to the source database saved as snapshots of the VDB are optionally replicated across the one or more remote target e.g. development environments allowing a user to revert to or retrieve a copy of the VDB from a previous point in time at the target. This process of reverting to a copy of a VDB at a prior time point is referred to as rolling back or rewinding of the VDB.

Some approaches to rewinding a VDB include creating a new virtual database from the user specified prior time point e.g. by accessing the snapshots of the VDB stored in the database storage system and allowing the user to access and make changes to the new VDB. A problem encountered with this approach to rewinding a VDB is that the creation of a new VDB with a new logical identity e.g. a new name new identifier and new copy of all VDB files and associated configuration files distinct from the logical identity of the original VDB results in storage and performance inefficiency.

Accordingly some embodiments provide a method of rewinding or rolling back a database that does not require creation of a new VDB at the user specified prior time point but rather a creation of a new timeflow associated with the original VDB in the same container or database storage system as the previous VDB timeflow . This approach results in a faster and more storage efficient VDB rewind operation as compared to the approach involving the creation of a new VDB from the rewind point.

In certain embodiments of the invention one or more virtual databases are created based on the state of a production database or a virtual database at a particular point in time. The virtual databases can then be individually accessed and modified as desired. A database comprises data stored in a computer for use by computer implemented applications. A database server is a computer program that can interact with the database and provides database services for example access to the data stored in the database. Embodiments create a virtual database using storage level snapshots of production databases or clones of production databases instead of a live production database. Virtual database systems are described in U.S. patent application Ser. No. 12 603 541 filed on Oct. 21 2009 now issued as U.S. Pat. No. 8 150 808 which is incorporated by reference herein in its entirety.

In one embodiment information from the production database is copied to a storage system at various times such as periodically. This enables reconstruction of the database files associated with the production database for these different points in time. The information may be managed in the storage system in an efficient manner so that copies of information are made only if necessary. For example if a portion of the database is unchanged from a version that was previously copied that unchanged portion need not be copied. A virtual database created for a point in time is stored as a set of files that contain the information of the database as available at that point in time. Each file includes a set of data blocks and the data structures for referring to the data blocks.

A virtual database may be created on a database server by creating the database files for the production database corresponding to the state of the production database at a previous point in time as required for the database server. The files corresponding to the virtual database are made available to the database server using a file sharing mechanism which links the virtual database to the appropriate data blocks stored on the storage system. The process of making the virtual database available to a database server is called provisioning the virtual database. Multiple VDBs can be provisioned based on the state of the production database at the same point in time. On the other hand different VDBs can be based on different point in time state of the same production database or different production databases. VDBs may also be based on other VDBs.

The database server on which a virtual database has been provisioned can read from and write to the files stored on the storage system. A database block may be shared between different files each file associated with a different VDB. In particular a database block is shared if the corresponding virtual database systems are only reading the information in the database block and not writing to the database block. In one embodiment the virtual database manager makes copies of the database blocks only if necessary. For example a particular database block may be shared by multiple VDBs that read from the same database block. But if one of virtual database systems attempts to write to the database block a separate copy of the database block is made because the writing operation causes that database block to be different for the VDB corresponding to that virtual database systems than it is for the other VDBs.

In response to a request from the administrator system or based on a predefined schedule the database storage system may send a request for data to a production database system . The production database system responds by sending information stored in the production database as a stream of data . The database storage system receives the data sent by the production database system and stores the data. The database storage system stores the information efficiently for example by keeping versions of database blocks that have changed and reusing database blocks that have not changed.

To create a virtual database the database storage system creates files that represent the information corresponding to the production database system at a given point in time. The database storage system exposes the corresponding files to a virtual database system using a file sharing system . The virtual database system runs a database server that can operate with the files exposed by the database storage system . Hence a virtual copy of the production database is created for the virtual database system for a given point in time in a storage efficient manner.

VDBs can be used in various workflow scenarios. illustrates an example workflow scenario showing remote provisioning of virtual databases according to an embodiment. There are two sites that store database storage systems. The local site comprises the source database storage system and the remote site comprises the target database storage system . There may be one or more source database systems that include data stores . The source database system includes data store and the source database system includes the data store . The changes to the data stores of the source database systems are periodically received by the source storage database system and stored in the source data store . A database system may create virtual databases in the source database storage system and read write to the VDB.

Information describing changes to data in the source database storage system is transmitted to the target storage database system . These comprise the changed data blocks since the last time the data was transmitted from the source database storage system is transmitted to the target storage database system . The changes to the data in the source database storage system may be transmitted periodically or based on a predetermined schedule. A database system creates virtual databases in the target database storage system . The database system is allowed to read write to the VDB.

The database storage system retrieves information available in the production database systems and stores it. The information retrieved includes database blocks comprising data stored in the database transaction log information metadata information related to the database information related to users of the database and the like. The information retrieved may also include configuration files associated with the databases. For example databases may use vendor specific configuration files to specify various configuration parameters including initialization parameters associated with the databases.

The data stored in the storage system data store can be exposed to a virtual database system allowing the virtual database system to treat the data as a copy of the production database stored in the production database system . The database storage system includes a point in time copy manager a transaction log manager a interface manager a storage allocation manager a file sharing manager a virtual database manager a VDB timeflow manager a VDB rollback manager and a storage system data store . In alternative configurations different and or additional modules can be included in the database storage system .

The point in time copy manager interacts with the production database system by sending a request to the vendor interface module to retrieve information representing a point in time copy also referred to as a PIT copy of a database stored in the production DB data store . The point in time copy manager stores the data obtained from the production database system in the storage system data store . The data retrieved by the point in time copy manager corresponds to database blocks or pages of the database being copied from the production DB data store . After a first PIT copy request to retrieve information production DB data store a subsequent PIT copy request may need to retrieve only the data that changed in the database since the previous request. The data collected in the first request can be combined with the data collected in a second request to reconstruct a copy of the database corresponding to a point in time at which the data was retrieved from the production DB data store for the second request.

The transaction log manager sends request to the production database system for retrieving portions of the transaction logs stored in the production database system . In some embodiments the request from the transaction log manager is sent to the vendor interface module . The data obtained by the transaction log manager from the vendor interface module is stored in the storage system data store . In one embodiment a request for transaction logs retrieves only the changes in the transaction logs in the production database system since a previous request for the transaction logs was processed. The database blocks retrieved by a point in time copy manager combined with the transaction logs retrieved by the transaction log manager can be used to reconstruct a copy of a database in the production system corresponding to times in the past in between the times as which point in time copies are made.

The storage allocation manager provides the functionality of saving data retrieved from the production database system . For example the point in time copy manager may call APIs of storage allocation manager to save blocks of data retrieved from the production database system . The storage allocation manager keeps track of the various versions of each block of data that may be obtained from the production database system . For a given time point the storage allocation manager can be requested to provide the latest version of a block of data obtained before the given time point. The storage allocation manager can also be used for making copies of blocks of data. If a block of data is copied for read only purposes the storage allocation manager allocates only sufficient storage to keep a pointer of reference to the exiting block of data. However if an attempt to write to the copied block of data is made the storage allocation manager allocates sufficient storage to make an actual copy of the block of data to avoid updating the original block of data.

The file sharing manager allows files stored in the storage system data store to be shared across computers that may be connected with the database storage system over the network. The file sharing manager uses the file sharing system for sharing files. An example of a system for sharing files is a network file system NFS . A system for sharing files may utilize fiber channel Storage area networks FC SAN or network attached storage NAS or combinations and variations thereof. The system for sharing files may be based on small computer system interface SCSI protocol internet small computer system interface iSCSI protocol fiber channel protocols or other similar and related protocols. In some embodiments the database storage system may utilize a logical volume manager. Sharing a file stored in the storage system data store using the file sharing manager allows a remote computer for example the virtual database systems to access the data in the shared file. A remote system may be able to read and write from to the file shared by the storage system data store . In an embodiment files are organized in a format emulating a given file system disk layout such as the file system of WINDOWS operating system called NTFS or the UNIX file system UFS .

The virtual database manager receives requests for creation of a virtual database for a virtual database system . The request for creation of a virtual database may be sent by a database administrator using the administration system and identifies a production database system a virtual database system and includes a past point in time corresponding to which a virtual database needs to be created. The virtual database manager creates the necessary files corresponding to the virtual database being created and shares the files with the virtual database system . The database administrator for a virtual database system may be different from a database administrator for the production database system .

A VDB timeflow manager maintains storage update and retrieval of information associated with one or more timeflows corresponding to the virtual database. The VDB timeflow manager stores information describing one or more time points along the timeflows sequence change numbers and transaction logs associated with updates or modifications to the VDB files snapshots of the files at a subset of the time points along the timeflows and the like. According to an embodiment a representation of a timeflow stores information describing changes performed on a source database or a VDB. In an embodiment the changes are stored in a storage efficient manner. For example at various point in time copies or snapshots of the data of the source database or VDB is stored such that one or more database blocks are shared across the point in time copies. In particular database blocks that do not change are shared across two consecutive point in time copies and database blocks that are updated are copied before the updates are made. In an embodiment the information describing the changes also comprises transaction logs representing changes made in the time duration between capturing of two point in time copies.

A VDB rollback manager receives user requests to rewind or rollback a VDB to a user specified point along a timeflow. The VDB rollback manager interfaces with the VDB timeflow manager to access timeflow information corresponding to the virtual database so as to retrieve a representation of the virtual database at the user specified point in time.

A virtual database system includes a database server and a VDB system library . The database server is similar in functionality to the database server and is a computer program that provides database services and application programming interfaces APIs for managing data stored on a data store . The data managed by the database server may be stored on the storage system data store that is shared by the database storage system using a file sharing system . The VDB system library contains program code for processing requests sent by the database storage system . In alternative configurations different and or additional modules can be included in a virtual database system .

Assuming the PIT copy is the last PIT copy made for the configuration shown in the VDB file structures are created for time point T2. When the structure are created the blocks V11 V12 . . . V25 may be implemented as pointers to the actual database block that stores the data. For example V11 represents the information in block F1 and since the block F1 was never updated during copies made at time T1 and T2 V11 points at F11. V12 represents the information in block F2 and since F2 was updated at time T1 V12 points at the block F22. Similarly V13 corresponds to block F3 that was updated at time T2 and points at the block F33.

Since the structure illustrated in is a read write structures the virtual database system is allowed to read from these structures as well as write to them. When the virtual database system writes to a block Vij space is allocated for the database block and the data of the corresponding database block copied to the space allocated. For example if the virtual database system writes to the block V11 space is allocated and block F11 copied to the allocated block. Hence the original copy of the block F11 is maintained as a read only copy and the virtual database system is allowed to write to a copy of the appropriate database block created specifically for the virtual database system . This can be considered a lazy mechanism for creating copies of the database blocks that copies a database blocks only if the corresponding virtual database system writes to the database block. Since the number of blocks that a virtual database system writes to may be a small fraction of the total number of blocks associated with the VDB the above structure stores the data associated with the VDB in a highly storage efficient manner. A database block that is not written to by virtual database systems may be shared by several virtual database systems without being copied for specific virtual database systems .

As another illustration of creation of point in time copies or snapshots of a virtual database illustrates a process of capturing snapshots of a virtual database at various time points along a time line or timeflow corresponding to changes in the source database according to some embodiments.

Shown in is a time progression along a time line showing changes in database blocks based on a source database e.g. production database as explained with reference to and corresponding changes in the snapshots captured at one or more time points along the timeflow. As explained above with reference to changes or updates in specific blocks of the source database result in changes in the corresponding database blocks stored in the database storage system . Conversely database blocks stored in the database storage system corresponding to database blocks of the source database that are not updated or modified are themselves not modified or updated.

Accordingly as shown in the timeflow in a snapshot e.g. snapshot 1 is captured at time T. At time Tor prior to time T e.g. subsequent to the capture of the immediately prior snapshot the highlighted source database blocks e.g. in the illustration of source database blocks are updated or modified. Consequently the database storage system receives the modified source database blocks and stores them as shown in snapshot 1 captured at time Ttherefore reflects the changes corresponding to source database changes that occurred after capture of a snapshot immediately prior to snapshot 1.

Subsequently as shown in the timeflow in snapshot 2 is captured at time T. Source database blocks that are updated or modified between time Tand time Tare as highlighted e.g. in the illustration of source database blocks the database storage system receives and stores database blocks corresponding to the modified source database blocks as reflected in snapshot 2 captured at time T.

The modifications to the VDB that occur between time Tand time Tare reflected in the transaction logs between time Tand time T. As explained above with reference to the transaction logs can be used to reconstruct a copy of the source database corresponding to time points between the times at which snapshots are captured e.g. in this example between time Tand time T .

Furthermore along the timeflow shown in snapshot 2 is captured at time T. Source database blocks that are updated or modified between time Tand time Tare as highlighted e.g. in the illustration of source database blocks VDB files corresponding to the modified source database blocks are updated or modified and reflected in VDB snapshot 3 captured at time T. The modifications to the VDB that occur between time Tand time Tare reflected in the transaction logs between time Tand time T which can be used to reconstruct a copy of the source database corresponding to time points between time Tand time T.

As a result historical changes updates or modifications to source database blocks e.g. database blocks in a production database can be monitored and saved across time in a storage and performance efficient manner and these changes replicated across remote target e.g. development environments. The timeflow is also used to represent changes made to a virtual database.

In some embodiments a container stores a representation of a database in the database storage system for example a VDB or a dSource representing a source database. A container may include one or more timeflows associated with the VDB or dSource. Accordingly the container represents snapshots transaction logs and metadata associated with a VDB or dSource. In some embodiments a timeflow represents changes to a data source e.g. a source database stored in an external system or another VDB over a period of time e.g. by storing snapshots and changes in between snapshots using transaction logs . In some embodiments since a VDB can go back in time e.g. rewind the VDB to change its state to a previous state of the VDB or move forward in time e.g. modify the state of the VDB to a more recent state along a timeflow compared to the state used for rewinding the VDB alternatively refresh so as to update the VDB state to a more recent state corresponding to a source database multiple timeflows are stored in the container. Each timeflow is associated with an initial state of the VDB and representations of changes made to the VDB after the VDB state was updated to the initial state.

Illustrated in is a first approach to rewinding a VDB according to some embodiments. Responsive to a user request to rollback or rewind the virtual database to a point in time e.g. to rollback point Tshown in prior to a current time point according to the first approach the database storage system simulates a VDB rollback by creating a new VDB e.g. VDB 2 distinct from the original VDB e.g. distinct from VDB 1 based on the original VDB at the desired rollback point. In other words in the example shown in rollback of the virtual database is simulated by creating VDB 2 distinct from VDB 1 at rollback point Tbased on VDB 1 at T. In the event that a snapshot of VDB 1 exists at the rollback point VDB 2 is created based on the snapshot of VDB 1 at T. On the other if a snapshot of VDB 1 does not exist at rollback point T e.g. as shown in VDB 2 is created based on a snapshot of VDB 1 immediately prior to the rollback point e.g. VDB 1 snapshot 2 at T by applying interim transaction logs e.g. between Tand T to recreate VDB 1 at the rollback point.

Toward this end in some embodiments the first approach of rolling back the virtual database includes creating a new VDB container e.g. container 2 creating a new VDB based on the previous VDB at a nearest prior snapshot e.g. creating VDB 2 based on VDB 1 at snapshot 2 and creating a new timeflow e.g. timeflow 2 originating at the rollback point e.g. starting at T . In such embodiments the new VDB e.g. VDB 2 has a new logical identity e.g. a new name new identifier and new copy of all VDB files and associated configuration files distinct from the logical identity of the original VDB e.g. VDB 1 .

In some embodiments as shown in a virtual database e.g. VDB 1 undergoes modifications or updates based on updates to its source database at points in time along a timeflow e.g. timeflow 1 associated with the virtual database. Snapshots of the virtual database and changes to the virtual database corresponding to changes in the associated source database are captured and stored at a subset of time points e.g. T T and T along timeflow 1. In some embodiments snapshots associated with the virtual database corresponding to changes in the source database and information corresponding to the timeflow are stored in a virtual database container e.g. VDB container shown in .

Responsive to a user request to rollback or rewind the VDB to a prior time point as shown in in the second approach the database storage system retains the same VDB with the same name and identifier within the same container creates a new timeflow e.g. timeflow 2 alternatively referred to herein as a current timeflow also within the same container and provisions the same VDB e.g. VBD 1 from the new timeflow.

Toward this end in some embodiments the database storage system temporarily shuts down VDB 1 e.g. suspends user access to VDB 1 creates a new timeflow within the same container e.g. timeflow 2 within Container 1 points the destination storage to the new timeflow and brings up the same original VDB e.g. VDB 1 provisioned from the new timeflow e.g. from timeflow 2 .

In other words the database storage system mounts the same VDB files e.g. files corresponding to VDB 1 at the same destination as prior to rollback but pointed to a set of database blocks corresponding to the identified point in time. The container of the VDB includes a new timeflow i.e. timeflow 2 rather than timeflow 1 which is made the current timeflow and tracks changes to the VDB e.g. by capturing and maintaining VDB snapshots such as snapshot 4 at time Tand snapshot 5 at time T and transaction log files between snapshots along the new timeflow timeflow 2 .

On the other hand the new timeflow e.g. timeflow 2 as shown in is designated as the current timeflow. Modifications and updates to the VDB e.g. on account of changes to database blocks of the source database occurring after the rollback point are saved in the same container e.g. Container 1 along the new or current timeflow e.g. snapshot 4 captured at time T snapshot 5 captured at time T and transaction log files describing changes between the snapshots .

Shared ancestor changes on the parent timeflow e.g. changes or updates on the parent timeflow prior to the rollback point are visible to the user and optionally appear to be part of the current timeflow. For example changes or updates made to the VDB along the parent timeflow prior to the rollback point captured as VDB snapshots and transaction log files prior to the rollback point e.g. snapshot 1 at time Tand snapshot 2 at time T are visible to the user.

Accordingly to enable the user to efficiently move back and forward along the VDB to any time point along a current or prior timeflow the database storage system stores and saves all timeflows current and prior as well as all snapshots and transaction log files of VDB updates and modifications between snapshots associated with the VDB e.g. in the same container . Consequently the database storage system permits the user to rollback or move forward the VDB to any time point along any of the saved timeflows e.g. by accessing snapshots and optionally transaction log files stored in the container as described with reference to and .

For example as illustrated in timeflow 1 records a history of continuous changes and updates to VDB 1 over time. Snapshot 1 snapshot 2 and snapshot 3 are captured at time points e.g. time T time T and time T along timeflow 1.

At a point in time after time Talong timeflow 1 responsive to a user request to rollback VDB 1 to rollback point 1 along timeflow 1 the database storage system obtains a representation of VDB 1 at rollback point 1 e.g. as described with reference to and creates a new timeflow timeflow 2 originating at rollback point 1. Database storage system tracks changes and updates to VDB 1 subsequent to rollback point 1 along timeflow 2. Accordingly snapshot 4 and snapshot 5 are captured at time points e.g. time Tand time T along timeflow 2. Container 1 stores and saves the previous timeflow e.g. timeflow 1 and associated snapshots e.g. snapshot 1 snapshot 2 and snapshot 3 are captured along timeflow 1 and transaction logs.

Similarly responsive to a user request to rollback to rollback point 2 database storage system creates a new timeflow timeflow 3 and stores and saves changes and updates to VDB 1 along with snapshots and transaction logs along timeflow 3 originating at rollback point 2 . Database storage system stores the current and prior timeflows snapshots transaction logs in container 1.

Further along similar lines responsive to a user request to rollback VDB 1 to rollback point 3 database storage system creates a new timeflow timeflow 4 and stores further changes and updates to VDB 1 along with snapshots and transaction logs along timeflow 4 originating at rollback point 3 . Database storage system stores the current and prior timeflows timeflow 1 timeflow 2 timeflow 3 and timeflow 4 snapshots and transaction logs in container 1.

Although illustrates rollback of a VDB to rollback points along timeflow 1 in practice database storage system is configured to rollback the VDB to one or more rollback points along any previous or current timeflows e.g. timeflow 1 timeflow 2 timeflow 3 and timeflow 4 stored in the container.

At the point of VDB rollback database storage system creates a new timeflow that originates at the rollback point database storage system resets e.g. decrements relative to a current value or the value immediately prior to the rollback the system change number SCN to a value marginally greater than its value at the rollback point e.g. to the next higher integer value . In some embodiments the SCN value and the real time values corresponding to time of changes or updates to the VDB are continually incremented and do not reset at the point of VDB rollback.

For example in the illustration shown in referring to timeflow 1 or the parent timeflow the SCN has a value of 300 prior to rollback at real time 3 00 PM. Shortly after rollback of the VDB to rollback point T upon creation of the current timeflow e.g. timeflow 2 the SCN value is decremented to a value of 201 the next higher integer to 200 the SCN value at T but real time continually increases e.g. increases to 4 00 PM and is not reset back. In some embodiments transaction logs with the same system change numbers are distinguished by opening reset logs e.g. thereby creating a new incarnation of the VDB .

Database storage system obtains from a user a request to retrieve a representation of the respective VDB at a user specified time value along the first timeflow e.g. a representation of VDB 1 at Rollback time Talong timeflow 1 as shown in .

Responsive to the user request in some embodiments database storage system temporarily suspends user access to the respective VDB. Database storage system makes a determination as to whether the user specified time value corresponds to a respective snapshot time value i.e. a point in time at which a point in time copy was made along the first timeflow.

Responsive to a determination that the user specified time value corresponds to a respective snapshot time value along the first timeflow database storage system clones a snapshot of the respective VDB at the respective snapshot time value e.g. VDB 1 snapshot 2 at time T as shown in to obtain the representation of the VDB at the user specified time value. Responsive to a determination that the user specified time value does not correspond to a respective snapshot time value along the first timeflow database storage system clones a snapshot of the respective VDB at a respective snapshot time value immediately prior to the user specified time value e.g. VDB 1 snapshot 2 at time T1 immediately prior to Rollback point T as shown in . The database storage system then applies 950 transaction logs to the snapshot clone from the respective snapshot time value to the user specified time value to obtain the representation of the data blocks for the VDB at the user specified time value e.g. transaction logs between time T1 to Rollback point T as shown in . This allows the database storage system to obtain the representation of the VDB at the user specified time value e.g. at rollback point Tshown in .

Database storage system creates 960 a second timeflow within the respective container e.g. timeflow 2 within Container 1 as shown in the second timeflow starting at the user specified time value e.g. at time value Tas illustrated in . Database storage system associates the second timeflow with the respective VDB. Database storage system points the respective destination to the second timeflow. Database storage system mounts and brings up the respective VDB at the respective destination along the second timeflow.

User interfaces similar to those shown in are shown allowing user to refresh a VDB based on a state of a source database. The source database itself can be a production database system or another VDB. Accordingly timeflows of the source database are displayed allowing the VDB to be refreshed to a more recent point in time of the source database.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. As used herein hardware implemented module refers to a hardware module. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented hardware modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. application program interfaces APIs . 

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to these signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example some embodiments may be described using the term connected to indicate that two or more elements are in direct physical or electrical contact with each other. In another example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still cooperate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for creating virtual databases from point in time copies of production databases stored in a storage manager. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

