---

title: Interactive application programming interface documentation
abstract: Documentation for an application programming interface may include a source code portion. Input may be received from a user of the documentation indicating a request to see a simulated result of executing the source code portion. A set of instructions corresponding to the source code portion may be loaded. State dependencies of the set of instructions may be resolved to form an execution environment for the instructions. Simulated results for executing the source code portion may be obtained by executing the instructions based on the execution environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195457&OS=09195457&RS=09195457
owner: Amazon Technologies, Inc.
number: 09195457
owner_city: Reno
owner_country: US
publication_date: 20140611
---
Documentation for application programming interfaces APIs may contain written descriptions of the various functions included in the interface. The descriptions may include function signatures and listings of the various parameters that might be supplied to a function. The description might also include various samples that show developers how the API might be used. The samples may be segments of source code that are not connected to any particular application program. In order to utilize the segment of source code a developer may copy the segment of source code into the source code of another program adjust various parameters and then compile and run the program. Documentation may also include complete programs however in order to use these a developer may ordinarily download the program file or files to a hard drive and then compile and run the program.

Various embodiments are presented herein for providing interactive documentation for APIs. Interactive documentation for application programming interfaces may include mechanisms allowing a developer to interactively explore the features and behavior of API functions. This may for example include allowing a developer experiment with parameter values that may be supplied to an API function and see the results of executing the API function with those parameters through the user interface of the documentation. This approach allows exploration and experimentation of an API function without needing to copy sample code to a source code editor or needing to write application framework code in order to allow the sample to be run.

Embodiments may form a series of executable instructions that when executed simulate the effect of executing the partial segments of source code displayed in documentation for API. The simulation may correspond to executing an invocation of an API as described in the documentation were that invocation to be included in actual source code supported by appropriate preparatory and follow on instructions compiled to executable instructions and run. The results of the simulation may then be displayed to the developer. Accordingly embodiments may allow the developer to execute and view the results of executing a source code segment included in API document without having to write compile and execute a throw away program whose primary if not only purpose is to support execution of the source code segment.

Simulating execution of a documented source code segment may involve forming or locating a set of computer executable instructions corresponding to the source code segment and construction of an execution environment. These categories of actions may be separate actions or may be combined. Examples of various approaches are provided herein.

A set of computer executable instructions may be formed by compiling the source code segment included in the API documentation. In various embodiments API documentation may include demarcations or other forms of metadata to indicate which portions of the documentation contain source code segments. A set of computer executable instructions may also be retrieved from a repository associated with the documentation. Metadata in the documentation may be used to indicate the location of a set of instructions corresponding to a source code segment in the documentation.

Embodiments may construct an execution environment in which the computer executable instructions may be run. An execution environment may be formed to include memory locations initialized to values compatible with execution of the instructions corresponding to the source code segment. The memory locations may be those that are referenced directly or indirectly by the executable instructions corresponding to the source code segment of the documentation. The memory locations may for example correspond to global variables or parameters referenced explicitly or implicitly by the source code segment.

Documentation presented to the user by interactive viewer may comprise a documentation page provided by a documentation server . A documentation page may comprise a hypertext markup language HTML page extensible markup language XML data or other format for providing documentation information. A documentation server may include a code module or executable process for providing documentation information to interactive viewer . In some embodiments documentation server may be integrated into interactive viewer . In other cases and embodiments an interactive viewer and documentation server may be separate. For example an interactive viewer might comprise a web browser while documentation server comprises a web server that serves HTML pages.

A documentation page may comprise various elements including a description and a source code segment . A description might comprise text graphics or other information explaining the purpose and use of an API function. It might further comprise a source code segment . A source code segment may include one or more lines of source code but does not necessarily include all of the lines of source code or other elements such as makefiles resource files and so forth that make up the source code for an executable program. In some cases and embodiments source code segment may not be source code per se but may be related to source code. For example a function name and a description of parameters that might be supplied to the function could still be considered as a source code segment .

An interactive viewer may provide a mechanism allowing a user to initiate a simulation of a source code segment . For example a button or hyperlink for initiating simulation might be displayed adjacent to a description of a function and associated parameters or adjacent to a code sample.

A simulator may perform operations involving forming or obtaining executable instructions corresponding to source code segment and may perform operations involving forming an execution environment usable in conjunction with executing the instructions. Although simulator is depicted as a single element in the operations it is depicted as performing may be combined with other elements in various ways. For example documentation server might perform operations for locating executable instructions corresponding to source code segment and an execution environment might be constructed by interactive viewer . In other embodiments operations of this type might be performed on a web server associated with documentation server . Numerous other combinations and permutations are possible.

A documentation repository may comprise of a storage device bearing one or more files or other mechanisms for storing information. The files may contain documentation information including documentation page . The information may be retrieved by documentation server and by simulator . The documentation repository may in some cases and embodiments contain executable instructions corresponding to source code referred to in the documentation such as source code segment . Simulator may retrieve the executable instructions corresponding to source code segment in response to a request to simulate the behavior of source code segment .

A simulator may form an execution environment for executing the instructions corresponding to source code segment . One aspect of forming an execution environment involves initialization of variables referenced by the instructions. is a block diagram depicting initialization of variables referred to by a block of executable instructions corresponding to a segment of source code embedded in documentation.

In the example provided by an instruction set corresponding to a source code segment could comprise a first instruction which explicitly declares a first variable. A second instruction might contain a reference to the first variable. Execution of instruction set would therefore cause this variable to be declared and initialized prior to its being referenced. On the other hand instruction set might also contain a third instruction containing a reference to a second variable which is not explicitly declared. This variable may be supplied by execution environment which might contain or otherwise supply a variable declaration for the second variable.

Embodiments may employ a number of approaches to declare and initialize variables. One such approach may involve reserving memory locations referenced by the instructions or reserving memory locations and fixing up the instructions to refer to those memory locations. Another approach involves using code generation to generate a sequence of instructions to allocate and if necessary initialize variables that are later referenced by the instructions. In some embodiments instructions corresponding to a source code segment may be dynamically generated in which case instructions for declaring and initializing variables may generated along with instructions corresponding to the source code segment.

An embodiment of an execution environment may comprise a temporary program which may for example be constructed and stored in random access memory and subsequently executed. The temporary program may be assembled from various sources and may include instruction segment and additional instructions for initializing and uninitializing program state environment simulations or other resources used for executing instruction segment .

Embodiments may determine that implied initialization steps should be performed prior to execution of instruction segment . Various implied initialization steps may for example be needed to allocate and initialize variables referred to by instruction segment or to initialize other aspects of program state depended upon by instruction segment .

Initialization instructions may comprise instructions to establish program state needed for execution of instructions segment . For example an API function referred to in a source code segment might require that some other API function such as an initializeAPI or setupAPI function be called beforehand. In some cases there may be a comparatively long chain of state dependencies such as when an API function in a source code segment utilizes structures or objects defined by an API that are initialized through the use of other API functions. In some embodiments initialization instructions may involve initialization of or communication with a virtual device such as a simulated mobile phone or virtual computer on which the API functions in instructions segment may interact. A virtual device used for simulating execution of source code segment may in some embodiments be made accessible to a user for interacting with the device subsequent to simulating execution of a source code portion. A user might for example interact with the virtual device to determine what effect executing the source code portion would have on the device.

Scope setup instructions may comprise instructions for allocating memory for variables referred to by instructions segment and setting initial values for those variables when necessary. In some cases variables may be complex types such as structures or objects. As noted there may be cases where API functions are used to initialize structures or objects. In other cases programming language constructs for allocating or initializing variables may be employed.

Embodiments may determine that various implied cleanup and result handling steps are to be performed following the simulated execution of source code segment . These steps may include performing state and result preservation instructions and cleanup instructions .

State and result preservation instructions may comprise instructions for handling the results of executing instructions segment . This may involve instructions for storing return values and output parameters in a memory location where they may be retrieved later. Embodiments may for example utilize a visualization mechanism to display the results of executing the API to the developer. In some embodiments the result of executing an API may be visual auditory mechanical and so forth. Result handling instructions may therefore involve interaction with device components that produce these effects. In some embodiments simulated environments may be used for result handling. For example a mobile phone might be simulated so that the graphical output of an API function may be viewed by the developer in a graphical simulation of the mobile phone.

Some embodiments may preserve results for use with subsequent interactive simulations. For example a developer might initiate a simulation of a first API function. A second API function might take the output of the first API function as input. After experimenting with the first API function the developer might wish to feed the output of the first API function into the second API function. Embodiments may preserve the results of the first API function for this purpose. In some embodiments a graphical indication of the result may be provided and may be accompanied by an indication that the result might be useful in conjunction with another API function.

Various cleanup instructions might also be utilized to perform various housekeeping functions associated with execution of the other preceding instructions. For example memory or other resources allocated during execution of the preceding instructions may be freed. Some embodiments may close or suspend a simulated computing environment if one was used during execution of the preceding instructions.

Embodiments may perform implied initialization steps by forming initialization instructions and scope setup instructions . Forming instructions may comprise identifying state depended upon by instructions segment and then forming instructions that perform the initialization. This may for example be performed using a mechanism such as a code emitting API. In some embodiments initialization instructions may be located or retrieved rather than generated. For example a repository may contain instructions segment corresponding to source code segment and also contain initialization instructions and scope setup instructions . The repository might also maintain a correspondence between instructions segment and initialization instructions . Correspondence might also be identified using metadata stored in a repository of API documentation. For example a file containing API documentation might also contain a source code segment and information that could be used to locate both instructions segment initialization instructions and scope setup instructions . The techniques just described might also be applied to forming other instructions used in simulating execution of source code segment such as state and result preservation and cleanup .

A documentation repository may comprise one or more source code segments and . These may be included in various portions of API documentation maintained in documentation repository . Embodiments may include metadata or other information associated with a source code segment to link that segment to executable instructions that may be used to provide a simulated execution of a source code segment. For example in various links are shown between source code segment and initialization instructions segment instructions segment and cleanup instructions segment .

An instructions repository may contain various instruction segments for performing aspects of simulating execution of source code segments found in document repository . An instructions segment may be a function or method corresponding to a defined interface or it may be a sequence of instructions not making up a complete function or method. An instructions segment may contain executable instructions or intermediate level instructions for performing aspects of the simulation. For example with reference to instruction segments may correspond to performing implied initialization steps simulation of source code segment and implied cleanup and result handing steps .

Instructions corresponding to preparing for the simulation for example those similar to implied initialization steps in may be performed by executing one or more of initialization instructions segments and . Instructions for simulating the execution of one of source code segments and may be performed by executing one or more of instructions segments and . Instructions corresponding to cleanup such as those similar to implied cleanup and result handling steps depicted in may be performed by executing one or more of cleanup instructions segments and .

Embodiments may utilize links between source code segments and and instructions in instruction repository to execute instructions that simulate the effect of executing a source code segment. For example in source code segment is depicted as being associated by various links to initialization instructions segment instructions segment and cleanup instructions segment . Embodiments may identify links associated with source code segment and then execute them. Although depicts source code segment being associated with only one each of initialization instructions segments instructions segment and cleanup instructions segment in various embodiments there may be one to many relationships between a source code segment and these instruction categories. In some embodiments a source code segment may be associated with an instructions segment containing initialization and cleanup instructions in addition to instructions for simulating an API function.

In an embodiment a source code module may contain sets of instructions and information linking the sets of instructions to source code segments in API documentation. For example an embodiment could contain a set of instructions corresponding to source code segments a set of initialization instructions and a set of cleanup instructions. Each of the instruction sets could be linked by program metadata to an identifier usable to locate a source code segment to which the segment pertains.

Operation depicts transmitting a documentation page to a documentation viewer such as an HTML based browser or other application capable of displaying the documentation and supporting the modes of user interaction described herein. The transmitting may be between computing devices over a network between processes executing on a computing device or between components of a single process executing on a computing device. The term transmitting may also be described as conveying information between entities. In an embodiment a documentation server transmits a documentation page over a network to a client device on which an HTML based browser is executing and configured to display the documentation.

The transmitted documentation page may contain a textual description of source code which may be referred to as a source code portion. The source code portion may be related to the content of the documentation. The source code portion may be described as a textual description of source code because being embedded in documentation it is not compilable. This may be due solely to being embedded in documentation. However additional factors may also present barriers to using the source code portion to produce an executable program. There may for example be a need to write code to declare variables perform initialization perform cleanup and so forth prior to compiling the source code to form an executable program. There may also be a need to write additional source code files such as build files resource files and so on. A developer might also expend effort writing additional source code for the purpose of visualizing the result of executing instructions corresponding to the source code portion such as writing output to a console or displaying graphical information.

Note that these steps may present a particular obstacle to developers using API documentation to understand the API. This may be due to the developer not fully understanding the API in question and therefore not understanding its dependencies.

Operation depicts receiving an input from a user of the documentation page that indicates the user s wish to see what the results of executing a source code portion would be were the source code portion to be included in the source code for a complete program and compiled to an executable file. Receiving the input may involve processing a request to traverse a hyperlink in an HTML file or interacting with any other form of a user interface component. Embodiments may receive additional information related to the request such as values for parameters that might be related to the source code portion or an indication of an environment in which the source code portion should be simulated. This might for example comprise an indication that the user wishes to see the source code portion simulated as if it were operating on a particular mobile device. In some cases and embodiments the input received in operation may further comprise information indicating parameter values the user wishes to see used in the simulation. In some cases and embodiments input may be provided by the user to indicate modifications to the source code segment itself. Embodiments

Operation depicts obtaining a set of instructions that corresponds to the source code portion. In various embodiments the set of instructions may be a function or class method rather than a complete program. In some embodiments the set of instructions may be a sequence of instructions not initially associated with any function or method. The instructions may be formed through a compilation or interpretation process retrieved from a repository and so on. If retrieved from a repository the set of instructions may be transmitted from a source such as the source of the documentation page.

Operation depicts forming an execution environment for the set of instructions so that the execution environment is compatible with execution of the set of instructions. Forming an execution environment may comprise various operations as described herein for initializing memory locations establishing required state and so forth. The formed execution environment may comprise a program one or more threads a virtual machine or other simulated device and so forth. By executing an appropriate series of preparatory instructions the environment in which the set of instructions corresponding to the source code portion may be prepared for execution. An appropriate series of follow up instructions may perform cleanup instructions on the environment.

Operation depicts simulating execution of the source code portion of the documentation by executing the set of instructions within the execution environment. As noted embodiments may form the execution environment to be compatible with executing the set of instructions as indicated. Simulating execution may also comprise additional operations related to visualization retention or performing other processing of the results of executing the instructions.

Operation depicts forming or retrieving executable instructions corresponding to a source code portion of a documentation file. Embodiments may employ information embedded in or otherwise associated with the source code portion included in the API documentation. For example the documentation may comprise an XML file with information that relates the source code portion of the documentation to a set of instructions. In some embodiments the instructions may be embedded in the XML file in a manner not visible to the end user.

Operation depicts identifying variables that are referenced by the set of instructions corresponding to the source code portion. Embodiments may employ various methods for identifying referenced variables. Variables may be identified through indirect techniques such as scanning the set of instructions for unresolved references or parsing the source code portion. Embodiments may also utilize indirect techniques such as identifying an appropriate set of initialization instructions that when executed initialize variables referenced by the set of instructions corresponding to the source code portion.

Operation depicts receiving input indicative of initial values for variables referenced by the instructions. Initial values for some variables may be supplied by the user. For example a developer browsing API documentation might supply certain values for use in the simulation. Initial values may also be retrieved from a repository included in initialization instructions stored in the documentation and so on.

Operation depicts inferring additional values for variables referenced by the set of instructions corresponding to a source code portion. For example an embodiment may infer that a structure comprising multiple variables may need initialization based on an explicit reference in the instruction set to a member of the structure. Multiple levels of dependencies may also be inferred. Embodiments may utilize techniques such as state dependency graphs to infer variables for initialization.

Embodiments may also employ similar techniques with respect to other forms of state information. Operation depicts determining additional initialization dependencies for forming an execution environment whose state is compatible with execution of the set of instructions corresponding to the source code segment. For example certain API functions may require that other API functions have been previously invoked. A state dependency graph or other technique may be used to identify functions to be invoked prior to executing the set of instructions corresponding to the source code segment.

Some embodiments may as depicted by operation compare identified state dependencies with the state of an existing execution environment. Embodiments may perform the comparison in order to determine which initialization steps to perform. Embodiments may perform the comparison based on a mapping between initialization dependencies and a current state of an execution environment.

Embodiments of the present disclosure may be employed in conjunction with many types of database management systems DBMSs . A DBMS is a software and hardware system for maintaining an organized collection of data on which storage and retrieval operations may be performed. In a DBMS data is typically organized by associations between key values and additional data. The nature of the associations may be based on real world relationships that exist in the collection of data or it may be arbitrary. Various operations may be performed by a DBMS including data definition queries updates and administration. Some DBMSs provide for interaction with the database using query languages such as structured query language SQL while others use APIs containing operations such as put and get and so forth. Interaction with the database may also be based on various protocols or standards such as HTML and XML. A DBMS may comprise various architectural components such as a storage engine that acts to store data on one or more storage devices such as solid state drives.

Communication with processes executing on the computing nodes and operating within data center may be provided via gateway and router . Numerous other network configurations may also be employed. Although not explicitly depicted in various authentication mechanisms web service layers business objects or other intermediate layers may be provided to mediate communication with the processes executing on computing nodes and . Some of these intermediate layers may themselves comprise processes executing on one or more of the computing nodes. Computing nodes and and processes executing thereon may also communicate with each other via router . Alternatively separate communication paths may be employed. In some embodiments data center may be configured to communicate with additional data centers such that the computing nodes and processes executing thereon may communicate with computing nodes and processes operating within other data centers.

Computing node is depicted as residing on physical hardware comprising one or more processors one or more memories and one or more storage devices . Processes on computing node may execute in conjunction with an operating system or alternatively may execute as a bare metal process that directly interacts with physical resources such as processors memories or storage devices .

Computing nodes and are depicted as operating on virtual machine host which may provide shared access to various physical resources such as physical processors memory and storage devices. Any number of virtualization mechanisms might be employed to host the computing nodes.

The various computing nodes depicted in may be configured to host web services database management systems business objects monitoring and diagnostic facilities and so forth. A computing node may refer to various types of computing resources such as personal computers servers clustered computing devices and so forth. A computing node may for example refer to various computing devices such as cell phones smartphones tablets embedded device and so on. When implemented in hardware form computing nodes are generally associated with one or more memories configured to store computer readable instructions and one or more processors configured to read and execute the instructions. A hardware based computing node may also comprise one or more storage devices network interfaces communications buses user interface devices and so forth. Computing nodes also encompass virtualized computing resources such as virtual machines implemented with or without a hypervisor virtualized bare metal environments and so forth. A virtualization based computing node may have virtualized access to hardware resources as well as non virtualized access. The computing node may be configured to execute an operating system as well as one or more application programs. In some embodiments a computing node might also comprise bare metal application programs.

In at least some embodiments a server that implements a portion or all of one or more of the technologies described herein may include a general purpose computer system that includes or is configured to access one or more computer accessible media. depicts a general purpose computer system that includes or is configured to access one or more computer accessible media. In the illustrated embodiment computing device includes one or more processors and or which may be referred herein singularly as a processor or in the plural as the processors coupled to a system memory via an input output I O interface . Computing device further includes a network interface coupled to I O interface .

In various embodiments computing device may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

In some embodiments a graphics processing unit GPU may participate in providing graphics rendering and or physics processing capabilities. A GPU may for example comprise a highly parallelized processor architecture specialized for graphical computations. In some embodiments processors and GPU may be implemented as one or more of the same type of device.

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above are shown stored within system memory as code and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripherals in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computing device and other device or devices attached to a network or networks such as other computer systems or devices for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet networks for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs storage area networks or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for implementing embodiments of the corresponding methods and apparatus. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computing device via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computing device as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as those that may be implemented via network interface . Portions or all of multiple computing devices such as those illustrated in may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality. In some embodiments portions of the described functionality may be implemented using storage devices network devices or special purpose computer systems in addition to or instead of being implemented using general purpose computer systems. The term computing device as used herein refers to at least all these types of devices and is not limited to these types of devices.

A compute node which may be referred to also as a computing node may be implemented on a wide variety of computing environments such as tablet computers personal computers smartphones game consoles commodity hardware computers virtual machines web services computing clusters and computing appliances. Any of these computing devices or environments may for convenience be described as compute nodes or as computing nodes.

A network set up by an entity such as a company or a public sector organization to provide one or more web services such as various types of cloud based computing or storage accessible via the Internet and or other networks to a distributed set of clients may be termed a provider network. Such a provider network may include numerous data centers hosting various resource pools such as collections of physical and or virtualized computer servers storage devices networking equipment and the like needed to implement and distribute the infrastructure and web services offered by the provider network. The resources may in some embodiments be offered to clients in various units related to the web service such as an amount of storage capacity for storage processing capability for processing as instances as sets of related services and the like. A virtual computing instance may for example comprise one or more servers with a specified computational capacity which may be specified by indicating the type and number of CPUs the main memory size and so on and a specified software stack e.g. a particular version of an operating system which may in turn run on top of a hypervisor .

A number of different types of computing devices may be used singly or in combination to implement the resources of the provider network in different embodiments including general purpose or special purpose computer servers storage devices network devices and the like. In some embodiments a client or user may be provided direct access to a resource instance e.g. by giving a user an administrator login and password. In other embodiments the provider network operator may allow clients to specify execution requirements for specified client applications and schedule execution of the applications on behalf of the client on execution platforms such as application server instances Java virtual machines JVMs general purpose or special purpose operating systems platforms that support various interpreted or compiled programming languages such as Ruby Perl Python C C and the like or high performance computing platforms suitable for the applications without for example requiring the client to access an instance or an execution platform directly. A given execution platform may utilize one or more resource instances in some implementations in other implementations multiple execution platforms may be mapped to a single resource instance.

In many environments operators of provider networks that implement different types of virtualized computing storage and or other network accessible functionality may allow customers to reserve or purchase access to resources in various resource acquisition modes. The computing resource provider may provide facilities for customers to select and launch the desired computing resources deploy application components to the computing resources and maintain an application executing in the environment. In addition the computing resource provider may provide further facilities for the customer to quickly and easily scale up or scale down the numbers and types of resources allocated to the application either manually or through automatic scaling as demand for or capacity requirements of the application change. The computing resources provided by the computing resource provider may be made available in discrete units which may be referred to as instances. An instance may represent a physical server hardware platform a virtual machine instance executing on a server or some combination of the two. Various types and configurations of instances may be made available including different sizes of resources executing different operating systems OS and or hypervisors and with various installed software applications runtimes and the like. Instances may further be available in specific availability zones representing a logical region a fault tolerant region a data center or other geographic location of the underlying computing hardware for example. Instances may be copied within an availability zone or across availability zones to improve the redundancy of the instance and instances may be migrated within a particular availability zone or across availability zones. As one example the latency for client communications with a particular server in an availability zone may be less than the latency for client communications with a different server. As such an instance may be migrated from the higher latency server to the lower latency server to improve the overall client experience.

In some embodiments the provider network may be organized into a plurality of geographical regions and each region may include one or more availability zones. An availability zone which may also be referred to as an availability container in turn may comprise one or more distinct locations or data centers configured in such a way that the resources in a given availability zone may be isolated or insulated from failures in other availability zones. That is a failure in one availability zone may not be expected to result in a failure in any other availability zone. Thus the availability profile of a resource instance is intended to be independent of the availability profile of a resource instance in a different availability zone. Clients may be able to protect their applications from failures at a single location by launching multiple application instances in respective availability zones. At the same time in some implementations inexpensive and low latency network connectivity may be provided between resource instances that reside within the same geographical region and network transmissions between resources of the same availability zone may be even faster .

Each of the processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code modules executed by one or more computers or computer processors. The code modules may be stored on any type of non transitory computer readable medium or computer storage device such as hard drives solid state memory optical disc and or the like. The processes and algorithms may be implemented partially or wholly in application specific circuitry. The results of the disclosed processes and process steps may be stored persistently or otherwise in any type of non transitory computer storage such as e.g. volatile or non volatile storage.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and sub combinations are intended to fall within the scope of this disclosure. In addition certain methods or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial in parallel or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

It will also be appreciated that various items are illustrated as being stored in memory or on storage while being used and that these items or portions thereof may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software modules and or systems may execute in memory on another device and communicate with the illustrated computing systems via inter computer communication. Furthermore in some embodiments some or all of the systems and or modules may be implemented or provided in other ways such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the modules systems and data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate device or via an appropriate connection. The systems modules and data structures may also be transmitted as generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission media including wireless based and wired cable based media and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly the present invention may be practiced with other computer system configurations.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

While certain example embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions disclosed herein. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of certain of the inventions disclosed herein.

