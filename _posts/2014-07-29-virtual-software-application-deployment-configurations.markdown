---

title: Virtual software application deployment configurations
abstract: Configuration items for a software application can be automatically and/or manually discovered, and the application can be packaged to form a virtual application package. A deployment configuration can include settings for the configuration items. The deployment configuration can be set after packaging the software application. For example, a selected configuration item in the deployment configuration may be changed in response to user input. The virtual application package can be deployed to instantiate the application one or more times, and the deployment configuration can be applied in the instantiated application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152403&OS=09152403&RS=09152403
owner: Microsoft Technology Licensing, LLC
number: 09152403
owner_city: Redmond
owner_country: US
publication_date: 20140729
---
The present application is a continuation of U.S. application Ser. No. 12 719 008 entitled VIRTUAL SOFTWARE APPLICATION DEPLOYMENT CONFIGURATIONS now U.S. Pat. No. 8 826 268 filed on Mar. 8 2010 which is incorporated herein by reference. If any disclosures are incorporated herein by reference and such incorporated disclosures conflict in part or whole with the present disclosure then to the extent of conflict and or broader disclosure and or broader definition of terms the present disclosure controls. If such incorporated disclosures conflict in part or whole with one another then to the extent of conflict the later dated disclosure controls.

Virtual applications can be implemented in a series of operations. Initially an application can be packaged in a packaging environment to generate a virtual application package. Packaging is the process of taking the application and defining its data such as files and registry entries and metadata configuration items such as items in .ini files and registry settings so that the package can include the application data and metadata to run in a target environment without actually being installed as a native application. Accordingly that package can be deployed to a target environment to instantiate a virtual application instance. The virtual application instance can run in a capsule which includes the application as well as virtual resources to run the application. Such a capsule is referred to herein as a sandbox . As used herein a package includes the information files metadata etc. that is taken from the packaging of the application and the package can be deployed to instantiate the application. The package may be split into multiple parts and some parts may be transmitted in different ways and or at different times.

The tools and techniques described and claimed herein can allow a virtual application package and a deployment configuration to be deployed to instantiate a specific instance of an application. The deployment configuration can include one or more configuration items such as items that are discovered when packaging the application. The deployment configuration may be included with or separate from the virtual application package and the deployment configuration may be edited after the application is packaged. The deployment configuration can be applied in the instantiated virtual application. For example the deployment configuration may be applied to configure the application while deploying the application and or after the application has been deployed.

In one embodiment the tools and techniques can include automatically discovering configuration items for a software application and packaging the application to form a virtual application package. The virtual application package can be deployed to instantiate the application. A deployment configuration can be applied in the instantiated application where the deployment configuration includes settings for the configuration items.

In another embodiment of the tools and techniques a software application can be packaged to form a virtual application package. A deployment configuration for the application can be set after packaging the application. Setting a deployment configuration includes confirming and or changing the configuration. For example one or more default settings for configuration items in the deployment configuration can be confirmed automatically or in response to specific user input. As another example one or more settings for configuration items can be added or modified such as adding or modifying automatically or in response to specific user input. The virtual application package can also be deployed to instantiate the application and the deployment configuration can be applied in the instantiated application. For example settings of configuration items in the deployment configuration may be applied in the application while the application package is being deployed e.g. by interleaving deployment and configuration operations and or after the application package has been deployed.

In yet another embodiment of the tools and techniques configuration items for a software application can be discovered. The application can be packaged to form a virtual application package. After packaging the application the configuration items can be presented with a user interface device. A selected configuration item can be changed in response to user input indicating the change. Additionally the virtual application package can be deployed to instantiate the application and the configuration items can be applied to the instantiated application.

This Summary is provided to introduce a selection of concepts in a simplified form. The concepts are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Similarly the invention is not limited to implementations that address the particular techniques tools environments disadvantages or advantages discussed in the Background the Detailed Description or the attached drawings.

Embodiments described herein are directed to techniques and tools for improved packaging deployment and or instantiation of virtual applications. Such improvements may result from the use of various techniques and tools separately or in combination.

Such techniques and tools may include allowing a virtual application package and a deployment configuration to be deployed to instantiate a specific instance of an application in a target environment. For example one or more configuration items for a software application may be automatically discovered. A deployment configuration that includes the items can be set after an application is packaged as a virtual application package. For example the configuration item s may be presented to a user with a user interface device e.g. by displaying representations of the configuration item s on a computer display after packaging the application. Also after the packaging one of the configuration item s may be changed in response to user input indicating the change to be made. The package can be deployed to instantiate an instance of the application and the deployment configuration can be applied in the application instance.

At packaging time a packaging engineer user conducting packaging and or the packager computing component that performs packaging may know what some configuration items are but may not know what the settings for those configuration items are to be in a specific application instance. For example some configuration items may be tied to a particular machine user or application instance. As one specific example a user acceptance testing organization may have the application connect to a database named sql qa . However when the application is run in its intended production target environment the application may connect to a database named sql production . By identifying the configuration items at packaging time but setting and applying those configuration items when deploying the package to instantiate a specific instance of the application an administrator user conducting deployment conducting the deployment can be relieved of having to identify the configuration items. However the administrator can still enter appropriate settings for the configuration items. Also a single package can be deployed to instantiate different instances with different machines and or users. This may be done without having to modify the package itself except possibly modifying the configuration items if they are included in the package and without having to repackage the application. For example this may be beneficial because one general package can be packaged and tested but this tested general package can be deployed to a number of different instances with different deployment configuration settings. If items in the package other than the deployment configuration were modified for each deployment or if the application were entirely repackaged the original testing may not be valid.

Accordingly one or more substantial benefits can be realized from the tools and techniques described herein. The subject matter defined in the appended claims is not necessarily limited to the benefits described herein. A particular implementation of the invention may provide all some or none of the benefits described herein. Although operations for the various techniques are described herein in a particular sequential order for the sake of presentation it should be understood that this manner of description encompasses rearrangements in the order of operations unless a particular ordering is required. For example operations described sequentially may in some cases be rearranged or performed concurrently. Techniques described herein with reference to flowcharts may be used with one or more of the systems described herein and or with one or more other systems. For example the various procedures described herein may be implemented with hardware or software or a combination of both. Moreover for the sake of simplicity flowcharts may not show the various ways in which particular techniques can be used in conjunction with other techniques.

The computing environment is not intended to suggest any limitation as to scope of use or functionality of the invention as the present invention may be implemented in diverse general purpose or special purpose computing environments.

With reference to the computing environment includes at least one processing unit and memory . In this most basic configuration is included within a dashed line. The processing unit executes computer executable instructions and may be a real or a virtual processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power. The memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory or some combination of the two. The memory stores software implementing virtual software application deployment configurations.

Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines of and the other figures discussed below would more accurately be grey and blurred. For example one may consider a presentation component such as a display device to be an I O component. Also processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as workstation server laptop handheld device etc. as all are contemplated within the scope of and reference to computer computing environment or computing device. 

A computing environment may have additional features. In the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus controller or network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The storage may be removable or non removable and may include non transitory computer readable storage media such as magnetic disks magnetic tapes or cassettes CD ROMs CD RWs DVDs or any other medium which can be used to store information and which can be accessed within the computing environment . The storage stores instructions for the software .

The input device s may be a touch input device such as a keyboard mouse pen or trackball a voice input device a scanning device a network adapter a CD DVD reader or another device that provides input to the computing environment . The output device s may be a display printer speaker CD DVD writer network adapter or another device that provides output from the computing environment .

The communication connection s enable communication over a communication medium to another computing entity. Thus the computing environment may operate in a networked environment using logical connections to one or more remote computing devices such as a personal computer a server a router a network PC a peer device or another common network node. The communication medium conveys information such as data or computer executable instructions or requests in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired or wireless techniques implemented with an electrical optical RF infrared acoustic or other carrier.

The tools and techniques can be described in the general context of computer readable media. Computer readable media are any available media that can be accessed within a computing environment. By way of example and not limitation with the computing environment computer readable media include memory storage and combinations of the above.

The tools and techniques can be described in the general context of computer executable instructions such as those included in program modules being executed in a computing environment on a target real or virtual processor. Generally program modules include routines programs libraries objects classes components data structures etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer executable instructions for program modules may be executed within a local or distributed computing environment. In a distributed computing environment program modules may be located in both local and remote computer storage media.

For the sake of presentation the detailed description uses terms like determine choose adjust and operate to describe computer operations in a computing environment. These and other similar terms are high level abstractions for operations performed by a computer and should not be confused with acts performed by a human being unless performance of an act by a human being such as a user is explicitly noted. The actual computer operations corresponding to these terms vary depending on the implementation.

The configuration items may also be presented to a user on a user interface device such as one of the output device s discussed above with reference to . The user may provide user input to edit one or more of the configuration items in the deployment configuration and the configuration items can be edited in response to the user input. For example a user may provide user input requesting that one of the items be deleted from the deployment configuration that a name or label for one of the items be changed that a mandatory item be changed to an optional item that an optional item be changed to a mandatory item that a default setting for an item be added changed or deleted or that some other change to one or more of the items be made.

Some specific types of configuration items will now be discussed. However these specific types are only provided as examples other types of configuration items may be identified and included in the deployment configuration in addition to or instead of these types of items. As one example a configuration item may be a database connection string. For example the packager may delegate automatic identification of database related items to a database subsystem of the packager . The database subsystem may search for database related items. For example the database subsystem may monitor API application programming interface calls when the non virtual application is being installed and extract particular strings from those calls. The database subsystem can then produce configuration items or search for items related to those extracted strings in the application state such as in application files e.g. .ini and xml files and registry entries. When the string is found the database subsystem can identify the string as a configuration item . The subsystem may also make other determinations related to the configuration item such as whether the item is mandatory or optional what the name of the item is and what if any default setting is to be included for the configuration item . The packager can include the configuration item in the deployment configuration . This inclusion can be performed by the database subsystem or some other more general component that is configured for including configuration items in the deployment configuration . For example if the database connection string mydb were found in a registry entry HKLM foo app odbcdatabase mydb the packager may store an entry HKLM foo app value odbcdatabse mydb in the deployment configuration . Similar entries could be used for other items such as xml and .ini elements. For example for a configuration item that is an xml element the packager may store the file path and an XPath expression to identify the location allowing differentiation between elements with the same name. As another example the packager may store an entry such as approot config db.xml element db mydb in the deployment configuration .

As another example a configuration item may be an account name for NT services and a subsystem of the packager that deals with NT services could identify the account name. The account name may be listed in the deployment configuration by an identifier which an NT services component will recognize when instantiating the application. For example the account name may be set by an API call. As other examples of types of configuration items configuration items may include user accounts and passwords that are managed by Microsoft s Internet Information Services IIS . An IIS subsystem of the packager can recognize user accounts and passwords managed by IIS and the packager can include configuration items for the accounts and passwords in the deployment configuration listed by appropriate identifiers.

The package which can include the deployment configuration can be sent to a deployment environment . In the deployment environment the deployment configurations can be presented to a user and the deployment configurations can be set such as by confirming default settings editing the settings etc. . For mandatory configuration items the settings may have to be confirmed and or edited in response to user input before deployment of the package will be allowed to proceed. As an example the deployment configuration may be included in a file e.g. an xml file and the file can be opened and displayed as a document to be edited. Alternatively a graphical representation of the deployment configuration can be presented e.g. the configuration items can be presented in one or more dialogs . User input can be received e.g. from an administrator conducting deployment of the package and in response to the user input an editing component can edit the configuration items in the deployment configuration as indicated by the user input. A deployment component can take the package and deploy it to a target environment . The deployment component and the editing component may both be part of the same software product or part of different software products. For example the editing component and a component for presenting the deployment configuration on a user interface device may be part of a data center manager software product while the deployment component may be part of an application virtualization software product. As another example where an XML based deployment configuration file is used the editing component can be a simple editor such as a generic XML editor which can be used to directly view and edit the deployment configuration file.

As noted above the package can be deployed to the target environment to be instantiated. For example the instantiation in the target environment can be conducted by a virtual application host which can be a client component of application virtualization software that also includes the editing component and the packager . Specifically the application can be instantiated as a virtual application instance in a sandbox in the target environment . The configuration items in the deployment configuration can be applied in the virtual application instance i.e. the instantiated application . For example the entire application may be deployed and then configured as the virtual application instance . As an alternative the deployment of the package and the configuration of the virtual application instance can be interleaved with a portion of the package being deployed and configured followed by another portion of the package being deployed and configured etc. This interleaved deployment and configuration can continue until the entire application is instantiated as the virtual application instance .

Applying the deployment configuration may be done in various ways such as overwriting metadata and or making API calls to configure the application instance . This configuring may be done in the deployment environment and or in the target environment . As another example the virtual application can be left in an unconfigured state in storage. The deployment configuration information can be merged with the application information at runtime. For example when an application opens an .ini file the .ini file can be read from storage and merged with deployment configuration item s . The merged result can be given to the application for consumption. As another example API calls can be hooked and the behavior of the API calls can be changed to return the values from the deployment configuration at runtime. For example registry API s can be hooked to detect when the virtual process for the virtual application instance is reading a registry value that has been overridden by a deployment configuration item . When that occurs the value from the deployment configuration item can be returned instead of the value in the registry.

The identification editing and or application of the deployment configuration could be done in environments that differ from the computing environment discussed above. For example the virtual application package could be deployed directly from the packaging environment to the target environment . Indeed packaging deployment instantiation and execution of the virtual application may all be done in the same environment.

Several virtual software application deployment configuration techniques will now be discussed. Each of these techniques can be performed in a computing environment. For example each technique may be performed in a computer system that includes at least one processor and a memory including instructions stored thereon that when executed by the at least one processor cause the at least one processor to perform the technique a memory stores instructions e.g. object code and when the processor s execute s those instructions the processor s perform s the technique . Similarly one or more computer readable storage media may have computer executable instructions embodied thereon that when executed by at least one processor cause the at least one processor to perform the technique.

Referring to a virtual software application deployment configuration technique will be discussed. The technique can include automatically discovering one or more configuration items for a software application. The configuration item s may be presented with a user interface device. User input may be received and in response to receiving the user input one of the configuration item s can be edited . For example this changing or editing of the configuration may include deleting the configuration item modifying a name or label associated with the configuration item or deleting adding or modifying a setting for the configuration item. The application can be packaged to form a virtual application package.

After packaging the application the configuration item s may again be presented with a user interface device. Also after packaging user input can be received and one or more configuration item settings can be edited . Other features of the configuration item s may also be edited at that time. Accordingly the presentation of configuration item s receipt of user input and responsive editing may be done before packaging is complete e.g. at packaging time and or after packaging e.g. at deployment time is complete. In addition the package may be deployed to instantiate the application. A deployment configuration which can include one or more settings for the configuration item s can be applied in the instantiated application. If it is determined that the package is to be deployed again then presenting configuration item s receiving user input editing configuration item setting s deploying the package and applying the deployment configuration can be performed again.

The technique can also include applying a second deployment configuration in the instantiated application to change setting s for the configuration item s . Applying the second deployment configuration can be done after the instantiated application has been configured with the original deployment configuration. This other deployment configuration can be different from the first deployment configuration so that the instantiated application can be reconfigured by applying the second deployment configuration. Moreover technique can also include discovering one or more configuration items for the software application in response to user input that identifies the item s and the deployment configuration can further include one or more settings for these manually discovered configuration item s .

Accordingly the same package may be deployed to instantiate the application multiple times with different deployment configuration settings being applied to in different instances of the application. For example the application may be deployed to be instantiated in multiple target environments with different deployment configuration settings for target environments that are configured differently. Accordingly deploying the virtual application package to instantiate the application can include deploying the virtual application package to instantiate the application as a first instance of the application and applying the deployment configuration can include applying the deployment configuration in the first instance of the application. The technique can further include deploying the virtual application package to instantiate the application as a second instance of the application and applying the deployment configuration in the second instance of the application. Also applying the deployment configuration in the first instance of the application and applying the deployment configuration in the second instance of the application can include applying different settings for at least one of the configuration item s in the first and second instances of the application.

Referring now to another virtual software application deployment configuration technique will be discussed. The technique can include discovering one or more configuration items for a deployment configuration and packaging a software application to form a virtual application package. The discovering can be performed before completing the packaging . For example the discovering may be performed during packaging and or prior to packaging . However discovering may be performed after packaging is completed such as by using a tool that scans a package to identify and or produce a deployment configuration document. The technique can also include setting a deployment configuration for the virtual application package after packaging . Setting the deployment configuration can include editing one or more configuration items in the deployment configuration e.g. by editing setting s for the configuration item s and or confirming existing configuration item s in the deployment configuration. For example setting the deployment configuration can be done in response to receiving user input. At least one of the configuration item s may be marked as optional or mandatory. Setting the deployment configuration can include determining for each of the configuration item s whether the item is marked as mandatory and if so then requiring user input for that item before deploying the virtual application package. For example such user input may confirm an existing default setting modify an existing default setting or enter a setting where there is no default setting. In addition the virtual application package can be deployed to instantiate the application and the deployment configuration can be applied in the instantiated application.

The package may be deployed multiple times possibly with different deployment configurations for different deployments. Accordingly the deployment configuration can be a first deployment configuration. Deploying the virtual application package to instantiate the application can include deploying the virtual application package to instantiate the application in a first instance of the application. Moreover applying the deployment configuration in the instantiated application can include applying the first deployment configuration in the first instance of the application. Moreover the technique can further include setting a second deployment configuration for the virtual application package after packaging the software application deploying the virtual application package to instantiate the application in a second instance of the application and applying the second deployment configuration in the second instance of the application. The first instance of the application can be on a first machine with a first machine configuration and the second instance of the application can be on a second machine with a second machine configuration. Alternatively the first and second instances of the application could be on the same machine or on different machines that both have the same configuration.

Referring now to yet another virtual software application deployment configuration technique will be discussed. The technique can include discovering one or more configuration items for a software application. Some or all of the discovering can be done automatically. The configuration item s can be presented on a user interface device and at least one of the configuration item s can be changed . The changing can be done in response to receiving user input indicating a change.

The application can be packaged to form a virtual application package but the presentation and changing can be done before packaging is complete. Additionally the configuration item s can be presented with a user interface device after packaging the application. In response to user input indicating a change to a selected configuration item of the configuration item s the selected configuration item can be changed . The virtual application package can be deployed to instantiate the application and the configuration item s can be applied in the instantiated application.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

