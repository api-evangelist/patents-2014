---

title: Systems and methods for protecting data files
abstract: A method for protecting data files may include (1) identifying a data file to be protected against data loss, (2) identifying a set of software programs permitted to open the data file by (a) identifying a format of the data file and (b) identifying at least one software program capable of opening files of the format of the data file, (3) detecting an attempt to open the data file by a software program not included in the set of software programs, and (4) performing a security action in response to detecting the attempt to open the data file. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09659182&OS=09659182&RS=09659182
owner: Symantec Corporation
number: 09659182
owner_city: Mountain View
owner_country: US
publication_date: 20140430
---
Targeted threats are a growing problem in the world of information security. Sometimes referred to as advanced persistent threats APTs targeted threats may include stealthy and continuous hacking processes orchestrated by groups that are capably of effectively targeting a specific entity. APTs may originate from nation states or organized crime and may threaten the security of an organization in a variety of ways. Sensitive data is commonly targeted causing monetary and reputation damages to affected organizations. APTs may be designed to steal intellectual property financial details of customers and employees organizational strategy information or any other type of confidential data. APTs may also be designed to destroy valuable data or sabotage computer controlled systems. The operations of an APT may involve modifying sensitive files such as configuration files or operating system files for the purpose of establishing backdoors escalating privilege or otherwise weakening security systems.

System administrators often have trouble identifying or detecting targeted threats since the behavior of these attacks often appear to be similar to the behavior of legitimate non malicious users. Targeted threats may involve the same or similar commands and applications used by legitimate non malicious users to use or manage systems in an attempt to mask illegitimate traffic and or behavior potentially frustrating the efforts of system administrators to distinguish between the same.

Attempts to detect and intercept stolen confidential data at points where the organization connects to the outside world may prove ineffective in part due to the volume of data to be scrutinized but also because by the time confidential data reaches that point it may have been extracted compressed encrypted and possibly even concealed within non confidential data. Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for protecting data files.

As will be described in greater detail below the instant disclosure describes various systems and methods for protecting data files by identifying programs that may be authorized to open the data files and detecting when an unauthorized program attempts to open the files. Systems and methods described herein may also retrieve reputation data from a reputation database to determine whether a process involved in opening data files is trustworthy. If these systems and methods determine that an unauthorized or untrustworthy software program has attempted to open a data file various security actions may be initiated.

In one example a computer implemented method for protecting data files may include 1 identifying a data file to be protected against data loss 2 identifying a set of software programs permitted to open the data file by a identifying a format of the data file and b identifying at least one software program capable of opening files having the format of the data file 3 detecting an attempt to open the data file by a software program not included in the set of software programs and 4 performing a security action in response to detecting the attempt to open the data file.

In some examples identifying the set of software programs may include identifying a software program that created the data file. In some examples identifying the set of software programs may include 1 monitoring software program usage of at least one user and 2 while monitoring the software program usage a identifying a software program used by the user to open the data file and b identifying a set of expected calling processes that resulted in opening the data file. In some examples identifying the format of the data file may include 1 identifying a file type for the data file where the file type is used by an operating system of the computing device for the data file and 2 identifying the format of the data file by identifying a data file format associated with the file type.

In some examples identifying the set of software programs may include identifying at least one software program associated with the file type used by the operating system for the data file. In one embodiment the computer implemented method may further include 1 in response to detecting an attempt to open the data file identifying a set of calling processes that resulted in the attempt to open the data file 2 determining for each process in the set of calling processes whether the process is trustworthy and 3 performing the security action in response to detecting that one or more processes in the set of calling processes is not trustworthy.

In some examples determining whether the process is trustworthy may include 1 determining based on the process not being included in the set of expected calling processes identified while monitoring the software program usage that the process is not trustworthy 2 determining whether executable code associated with the process is trustworthy by either or both of a determining whether the reputation of one or more files associated with the process indicates that the executable files are trustworthy and or b determining whether executable code in memory is trustworthy by detecting whether the executable code includes malicious code and 3 determining based on executable code associated with the process not being trustworthy that the process is not trustworthy.

In some examples determining whether the reputation of the executable files indicates that the executable files are trustworthy may include 1 identifying a reputation score threshold that is indicative of whether files are trustworthy 2 obtaining a reputation score for the one or more files by one or more of a obtaining a reputation score of an executable file on which the process is based and or b obtaining a minimum reputation score of a file in a set of files loaded into memory by the process and 3 determining based on the reputation score being below the reputation score threshold that the files are not trustworthy. In one embodiment the security action may include 1 disabling the software program 2 deleting the software program 3 displaying a warning message that the software program has attempted to open the data file without permission and or 4 notifying an administrator that the software program has attempted to open the data file without permission.

In one embodiment a system for implementing the above described method may include several modules stored in memory such as 1 a file identification module that identifies a data file to be protected against data loss 2 a program identification module that identifies a set of software programs permitted to open the data file by a identifying a format of the data file and b identifying at least one software program capable of opening files having the format of the data file 3 a detection module that detects an attempt to open the data file by a software program not included in the set of software programs 4 a security module that performs a security action in response to detecting the attempt to open the data file and 5 at least one physical processor configured to execute the file identification module the program identification module the detection module and the security module.

In some examples the above described method may be encoded as computer readable instructions on a non transitory computer readable medium. For example a computer readable medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify a data file to be protected against data loss 2 identify a set of software programs permitted to open the data file by a identifying a format of the data file and b identifying at least one software program capable of opening files having the format of the data file 3 detect an attempt to open the data file by a software program not included in the set of software programs and 4 perform a security action in response to detecting the attempt to open the data file.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for protecting data files. As will be explained in greater detail below the systems and methods described herein may protect data files by identifying software programs designed and or authorized to open various types of data files and detecting when software programs attempt to open data files with which they are not associated. Even when the software programs opening data files are recognized as safe systems and methods described here may detect when the safe programs are operating under the direction of unrecognized or suspicious processes. When systems and methods described herein detect an unauthorized software program or process attempting to open a data file various security actions may be initiated to protect confidential data against theft.

The following will provide with reference to detailed descriptions of exemplary systems for protecting data files. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

Exemplary system may also include a detection module that may detect an attempt to open the data file by a software program not included in the set of software programs as well as a security module that may perform a security action in response to detecting the attempt to open the data file. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include one or more databases such as reputation database . In one example reputation database may be configured to store data indicating the trustworthiness of software programs. Reputation database may represent portions of a single database or computing device or a plurality of databases or computing devices. For example reputation database may represent a portion of server in computing system in and or portions of exemplary network architecture in . Alternatively reputation database in may represent one or more physically separate devices capable of being accessed by a computing device such as server in computing system in and or portions of exemplary network architecture in .

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device in communication with a server via a network . In one example computing device may be programmed with one or more of modules and or may store all or a portion of the data in reputation database . Additionally or alternatively server may be programmed with one or more of modules and or may store all or a portion of the data in reputation database .

In one embodiment one or more of modules from may when executed by at least one processor of computing device and or server enable computing device and or server to protect data files. For example and as will be described in greater detail below file identification module may identify a data file to be protected against data loss. Program identification module may identify a set of software programs permitted to open the data file by identifying a format of the data file and identifying at least one software program capable of opening files having the format of the data file. Detection module may detect an attempt to open data file by a software program not included in set of software programs .

As shown in computing device may also include process identification module that may in response to detecting the attempt to open data file identify a set of calling processes that resulted in the attempt to open data file . Reputation module may retrieve from reputation database on server for each of calling processes a reputation score that indicates whether the executable files on which each process is based and or executable code in memory are trustworthy. In response to detecting the attempt to open the data file or in response to detecting that a process in the set of calling processes is not trustworthy security module may initiate security action .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems wearable devices e.g. smart watches smart glasses etc. gaming consoles combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Server generally represents any type or form of computing device that is capable of storing comparing and or providing data. Examples of server include without limitation application servers and database servers configured to provide various database services and or run certain software applications.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between computing device and server .

Although the modules of exemplary server oriented system are configured somewhat differently than exemplary system shown in the modules function in a similar manner. File identification module may identify a data file to be protected against data loss. Program identification module may identify a set of software programs permitted to open the data file by identifying a data file format of the data file and identifying at least one software program capable of opening files having the format of data file . Detection module may detect an attempt to open data file by a software program not included in set of software programs .

As shown in computing device may also include process identification module that may in response to detecting the attempt to open data file identify a set of calling processes that resulted in the attempt to open data file . Reputation module on server may retrieve from reputation database for each of calling processes a reputation score that indicates whether the executable file on which each process is based and or executable code in memory is trustworthy. In response to detecting the attempt to open the data file or in response to detecting that a process in the set of calling processes is not trustworthy security module may initiate security action .

Another possible system configuration similar to exemplary server oriented computing system may locate program identification module and reputation module on an application server running in a back end facility with server . Server may then act as a dedicated database server for reputation database .

As illustrated in at step one or more of the systems described herein may identify a data file to be protected against data loss. For example at step file identification module may as part of computing device in identify data file to be protected against data loss.

The term data file as used herein generally refers any durable collection of data processed maintained and or stored in computer readable form. Additionally or alternatively the phrase data file may refer to any durable collection of data that affects the state of a software program. A data file is durable in the sense that it remains accessible when the software program that created it is no longer executing. In one example a text editor may create a file containing data representing alphanumeric text. In another example a file may contain configuration data for a software program in the form of human readable text specifying information such as the location of resources used by the program. Data files may be stored on physical storage media such as a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive or the like or on virtual storage that emulates physical media.

The phrase data loss as used herein generally refers to unauthorized destruction disclosure or modification of data. Data loss may also include the modification of data files to facilitate the destruction disclosure or modification of data. For example modifying a configuration file to grant read access to a valuable data file so that the data file can be transmitted to an outside party involves data loss both to the configuration file and to the valuable data.

File identification module may identify the file to be protected against data loss in any suitable matter. For example file identification module may identify data files according to one or more criteria such as data files of certain file formats or data files created by a particular set of software programs data files created or edited by a user of the computing device or data files stored in a specific file system directory. File identification module may also identify data files required by law or organizational policy to be protected against data loss.

At step one or more of the systems described herein may identify a set of software programs permitted to open the data file by 1 identifying a format of the data file and 2 identifying at least one software program capable of opening data files having the format of the data file. For example at step program identification module may as part of computing device in identify a set of software programs permitted to open data file by identifying data file format of data file and identifying at least one software program capable of opening one or more files having data file format .

The phrase open a data file as used herein generally refers to reading the data file writing the data file modifying the data file and or accessing the data file in any other manner.

As used herein the phrase software program generally refers to any type or form of executable code i.e. sequence of computer readable instructions . Software programs may include without limitation system software application software utility programs productivity programs entertainment programs and or any other types of computer applications.

The term file format as used herein generally refers to the particular way in which data is encoded or stored within a file. In some examples a file format may be specific to the software program that created the data file. In some examples file formats may be designed to store particular types of data that may be read by several different software programs. Examples of such file formats sometimes referred to as basic file formats include without limitation file formats designed to store text e.g. .txt files .pdf files etc. images e.g. .gif files .bmp files etc. audio e.g. .mp3 files .wma files .aac files etc. and or video e.g. .mp4 files .avi files etc. . In other examples file formats may specify how differing data elements may coexist within a single file and or may combine a number of discrete files together into a single file. Examples of such file formats sometimes referred to as container file formats include without limitation archive formats e.g. .zip files .rar files etc. and or file formats designed to store multiple types of data e.g. .docx files .pptx files .xlsx files etc. .

Depending upon the operating system used to create a data file or the file system on which the file is stored the format of a data file may be indicated by part of the file s name or by file metadata. In some examples a file in a basic format may be encoded in a format understood by one specific software program or a group of software programs. For example a computing device many contain many configuration files with each configuration file containing text data that can be edited using a text editor but with each configuration file containing configuration information specific to one software program. Several application programs that run on MICROSOFT WINDOWS for example use a file named setup.ini to store settings such as the default language and location of font and localization files to be used when installing that program. In another example a data file may contain Extensible Markup Language XML data that can be opened viewed or edited using a text editor or XML editor but in a standard format containing font page layout and document formatting data that may be decoded by any of several word processing programs written to support the standard format. For example files with a .docx extension on MICROSOFT WINDOWS may be archived XML files in OFFICE OPEN XML format that describe the layout and contents of a document and that can be edited using MICROSOFT WORD OPENOFFICE WRITER LIBREOFFICE WRITER and other word processing programs.

Program identification module may identify a set of software programs permitted to open the data file in a variety of ways. For example program identification module may identify the software program that created the data file. In some examples program identification module may identify the software program that created the data file based on the file type as indicated by the file name or metadata. In other examples program identification module may identify the software program that created the data file by examining the format of data contained within the data file.

In some examples program identification module may identify the set of software programs by 1 monitoring software program usage of at least one user and 2 while monitoring the software program usage a identifying a software program used by the user to open the data file and b identifying a set of expected calling processes that resulted in opening the data file. By monitoring software program usage program identification module may identify the software program used to create a data file as well as software programs subsequently used to view or edit the file contents. For some data file types many programs may be used to create or edit data files of that type. For example many programs may create or edit plain text files. By monitoring software program usage program identification module may introduce a behavioral aspect to data file protection provided by systems and methods described herein. For example if program identification module determines that a particular user always uses OPENOFFICE WRITER to edit word processing data files program identification module may not include other word processing programs in the set of software programs permitted to open word processing files even though several other software programs may be capable of reading data files of that type. If another program attempts to open a word processing file as part of a targeted attack as will be described in greater detail below detection module may detect that an attack is in process.

By observing program usage program identification module may also identify a set of expected calling processes that result in opening the data file. By identifying the chain of calling processes that result in opening the data file program identification module may identify not only the software program that ultimately opened the data file but also the processes in the chain of calling processes that normally result in opening the data file. As will be described in greater detail below once a set of normal calling processes has been identified a subsequent variation in the chain of calling processes may indicate an attack is in progress.

In some examples identifying the format of the data file may include 1 identifying a file type for the data file where the file type is used by an operating system of the computing device for the data file and 2 identifying the format of the data file by identifying a data file format associated with the file type. For example on the MICROSOFT WINDOWS operating system data files of the OFFICE OPEN XML file type may be recognized by a .docx extension on the file name. Data files on the APPLE MACINTOSH operating system use a similar method for identifying file types but with the identifier stored as a 4 byte value in the data file s metadata. Program identification module may use the file type of a data file to identify one or more software programs that are permitted to open data files of the format associated with the file type.

In some examples identifying the set of software programs may include identifying at least one software program associated with the file type used by the operating system for the data file. Operating systems may maintain a list of associations between data file types and compatible software programs. For example the MICROSOFT WINDOWS operating system may identify MICROSOFT WORD as the default program to be used when a user opens a file with a .doc extension for reading or editing. The method used by the APPLE MACINTOSH operating system is somewhat more complex. Each data file has separate 4 byte codes identifying the file type and the file creator. The creator code specifies the default program to use when opening the data file while the file type code specifies the data type. In one example program identification module may include the default program for opening data files of each file type in the set of software programs permitted to open data files of each type.

At step one or more of the systems described herein may detect an attempt to open the data file by a software program not included in the set of software programs. For example at step detection module may as part of computing device in detect an attempt to open data file by a software program not included in the set of software programs . Detection module may detect an attempt by an unauthorized software program to open a data file in any suitable manner. For example detection module may register an event handler for a file open event using an application programming interface API provided by the operating system of the computing device.

After step one or more of the systems described herein may in response to detecting an attempt to open the data file identify a set of calling processes that resulted in the attempt to open the data file. For example process identification module may as part of computing device in in response to detection module detecting an attempt to open data file identify set of calling processes that resulted in the attempt to open data file .

Process identification module may identify a set of calling processes in any suitable manner. For example process identification module may use an operating system application programming interface API to identify the parent process of the software program that attempted to open the data file. Process identification module may identify a chain of parent calling processes until it identifies the software program that initiated the process chain that resulted in the attempt to open the data file.

After process identification module identifies one or more processes that resulted in an attempt to open a data file one or more of the systems described herein may determine based on a process not being included in the set of expected calling processes identified while monitoring software program usage that the process is not trustworthy. When monitoring software program usage program identification module may identify a set of expected calling processes created when a user executes a software program and opens a data file. A targeted attack may involve the same software program but the attack may be detected by the presence of a process not in the set of expected calling processes. For example the unexpected process may as part of the attack use the software program to read the data file for the purpose of identifying valuable data and transmitting it to an outside party or modify the data file for the purpose of weakening security systems.

After process identification module identifies one or more processes that resulted in an attempt to open a data file one or more of the systems described herein may retrieve reputation scores that indicate the trustworthiness of the executable files containing the executable code on which each of the identified processes is based as well as reputation scores of any executable files or libraries e.g. dynamic link libraries .DLL libraries loaded into memory by the processes. For example reputation module may as part of computing device in retrieve a reputation score indicating the trustworthiness of an executable file that contains executable code that created one or more of calling processes .

Reputation module may also retrieve reputation scores for any executable file or library loaded into memory by calling processes . Reputation module may determine the reputation of each of calling processes or all of calling processes collectively based on reputation scores retrieved from reputation database . For example reputation module may calculate a reputation for each of the calling processes based on the minimum or average reputation score of executable files or libraries associated with each process either an executable file that created the process or executable files or libraries loaded into memory by the process . For example a software program on a WINDOWS operating system may consist of a single .EXE file that when executed creates a process that creates several child processes. Each process may use functions included in one or more .DLL libraries and one of the library functions may open a data file. In response to detecting the attempt to open the data file reputation module may retrieve the reputation scores for the .EXE file and each of the .DLL libraries and determine whether the processes involved in opening the data file are trustworthy based on the reputation scores retrieved.

In another example reputation module may determine a collective reputation for all calling processes based on the minimum or average reputation scores of all executable files or libraries in the memory space of the calling processes . In another example reputation module may base the reputation of calling processes at least in part on the detection of malicious code in memory that is not associated with an executable file. For example malicious executable code may be found in heap memory stack memory or other allocated memory buffers.

Reputation module may retrieve reputation score from reputation database located on server . Reputation module may retrieve reputation information in a variety of ways. In one example reputation module may use a signature hash calculated by process identification module to query for the reputation score.

The term reputation as used herein generally refers to an indication of the trustworthiness prevalence prominence community opinion and or reputation of a software application. A reputation may be based on a variety of factors such as the percentage of devices or number of devices on which the software program is installed e.g. prevalence of the software program in a wide area network prevalence of the software program on the Internet prevalence of the software program on devices and networks outside a local network etc. the length of time the software program has been in use on one or more devices an indication of the reliability of the publisher or developer of the software program an indication of the likelihood that the software program may contain malware a community rating of the software program an evaluation of the software program by a trusted entity and or any other suitable factor. Factors of a software program s reputation may be quantified and two or more factors of a reputation score may be weighted and combined to yield a single numerical value or reputation score.

In one example reputation module may retrieve a reputation only for the executable file that when executed created the process that initiated the chain of processes that resulted in the attempt to open the data file because the process that initiated the process chain is the process most likely to represent a targeted attack. However because it is also possible for a process to insert itself in a chain of processes reputation module may in another example retrieve reputations for executable files associated with each of the calling processes in the calling process chain both executable files that created processes and any executable files executed by running processes.

To determine the trustworthiness of the processes that resulted in the attempt to open the data file reputation module may identify or otherwise determine a reputation score threshold that is indicative of whether executable files are trustworthy. If the reputation score reputation module retrieves for an executable file that created a process in the calling chain is below the reputation score threshold reputation module may indicate that security module is to perform a security action.

At step one or more of the systems described herein may in response to detecting an attempt to open the data file perform a security action. For example at step security module may as part of computing device in and in response to detection module detecting an attempt to open data file perform security action . The security action may also be initiated in response to detecting that a process that resulted in the attempt to open the data file is not trustworthy. For example at step security module may as part of computing device in in response to detecting that an executable file that created a process in the set of calling processes has a reputation score indicating that the executable file and therefore the process based on the executable file is not trustworthy perform security action .

Security module may perform a variety of security actions. For example security module may disable the software program that attempted to open the data file. Alternatively security module may delete the software program or move it to a quarantine subdirectory for further analysis by anti malware programs. Additionally or alternatively security module may display a warning message to the user of the computing device that the software program has attempted to open the data file without permission and or notify an administrator of the unauthorized attempt to open the data file. The security action taken may vary depending on the severity of the perceived threat. For example if the chain of processes that resulted in a data file being opened includes several programs not in the set of expected calling processes associated with the data file format security module may display a warning message to the user. If reputation module determines that the unexpected programs have low reputations security module may block access to the data file.

As explained above the systems and methods described herein may protect data files against malware and targeted threats by identifying software programs authorized to open data files of an associated file type or format. Where a data file is of a basic type that can be opened and read by several different software programs systems and methods described herein may further identify the format of data in the data file and restrict permission to open the data file only to the software program with which the file is associated. Systems and methods described herein may also identify software program data file associations based on user behavior so that a targeted threat may be detected even when it employs a legitimate and compatible software program if that program is not in line with previously demonstrated user behavior.

Systems and methods described herein may detect sophisticated targeted threats that attempt to hide their actions by using legitimate software programs by examining the chain of calling processes that resulted in an attempt to open a data file and verifying the reputation of processes in the calling chain. Systems and methods described herein may also detect attempts to open data files by unauthorized software programs and respond by taking appropriate security actions. Utilizing the techniques described above the systems and methods described herein may detect sophisticated and previously unidentified targeted threats designed to evade detection by other malware detection systems.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of physical processing unit e.g. a hardware implemented central processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example reputation database from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The term computer readable medium as used herein generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives tape drives and floppy disks optical storage media e.g. Compact Disks CDs Digital Video Disks DVDs and BLU RAY disks electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for protecting data files.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example the modules and or data described herein may reside and or execute within a virtual machine. As used herein the term virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the term virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the term information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the term information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the term endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive data file and software program data to be transformed transform the data and use the result of the transformation to detect unauthorized software programs attempting to open the data files. Modules described herein may also transform a physical computing system into a system for protecting data files. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms connected to and coupled to and their derivatives as used in the specification and claims are to be construed as permitting both direct and indirect i.e. via other elements or components connection. In addition the terms a or an as used in the specification and claims are to be construed as meaning at least one of. Finally for ease of use the terms including and having and their derivatives as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

