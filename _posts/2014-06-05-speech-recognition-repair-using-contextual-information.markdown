---

title: Speech recognition repair using contextual information
abstract: A speech control system that can recognize a spoken command and associated words (such as “call mom at home”) and can cause a selected application (such as a telephone dialer) to execute the command to cause a data processing system, such as a smartphone, to perform an operation based on the command (such as look up mom's phone number at home and dial it to establish a telephone call). The speech control system can use a set of interpreters to repair recognized text from a speech recognition system, and results from the set can be merged into a final repaired transcription which is provided to the selected application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812316&OS=08812316&RS=08812316
owner: Apple Inc.
number: 08812316
owner_city: Cupertino
owner_country: US
publication_date: 20140605
---
This application is a continuation of U.S. application Ser. No. 13 247 912 filed on Sep. 28 2011 entitled SPEECH RECOGNITION REPAIR USING CONTEXTUAL INFORMATION which is hereby incorporated by reference in its entirety for all purposes.

The present invention relates to speech recognition systems and in one embodiment speech recognition systems which are used to control a data processing system.

A common problem with many speech recognition systems is accuracy. A user can speak to a speech recognizer and the system can respond with recognized text but the recognized text can often contain many errors because the speech recognizer did not properly recognize the human user s words.

Speech recognition can be used to invoke voice dialing on a telephone such as when a user speaks the command call mom on the telephone. The use of speech to control a data processing system can result in abnormal system behavior when a transcription error from the speech recognizer system decides that the user spoke call Tom instead of call mom. Transcription errors may be caused by a hardware deficiency such as the inability to capture high quality audio recording via a Bluetooth headset or user error such as incorrect or incomplete pronunciation or background noise. Some speech recognition systems can employ the use of context to improve the speech recognition system U.S. Pat. No. 7 478 037 provides an example of a speech recognition system which employs context to aid in the speech recognition process.

An embodiment of the invention provides a speech control system that can recognize a spoken command and associated words such as call mom at home and can cause a selected application such as a phone dialer to execute the command to cause the system which can be a smartphone to perform an operation based on the command and associated words such as place a phone call to mom at home. The speech control system can in one embodiment use a speech recognizer that includes a conventional acoustic model and a conventional language model to generate a text output from a digitized input obtained from a human user s speech. The speech control system can in one embodiment be launched by a speech assistant application that the user can invoke and this speech assistant application can interpret and repair the text output from the speech recognizer and provide a repaired text output to a selected application in a set of applications the set of applications can include for example one or more applications such as a telephone application to dial and establish a voice telephone call connection and a media player application e.g. iTunes and an SMS Short Message Service text message application and video conferencing e.g. FaceTime or chat applications and an application to find or locate individuals such as friends and other applications.

The speech assistant application in one embodiment interprets the text output using a set of interpreters each of which are designed to interpret a specific type of text that the set of applications use. For example a first name interpreter is designed to interpret first names in a first name field in an address book or contacts database a last name interpreter is designed to interpret last names in a last name field in the address book or contacts database a full name interpreter is designed to interpret full names in the address book or contacts database and a business name interpreter is designed to interpret business names in the address book or contacts database. These interpreters can in one embodiment be configured to use different algorithms or processes to interpret each word in the text output for example a full name interpreter can use a fuzzy matching with edit distance similarity measurements algorithm to compare a word in the text output to words in the address book or contacts database but does not in one embodiment use an n gram algorithm to compare a word in the text output to words in the address book or contacts database while a first name interpreter uses the n gram algorithm to compare a word in the text output to words in the address book or contacts database. Moreover these interpreters can in one embodiment use different searching algorithms when searching for matches through the address book or contacts database. Each interpreter can in one embodiment also use the context e.g. the context can include an indication that a media player is playing a song when interpreting a word. The context can include in one embodiment a history of user inputs such as a conversation history e.g. prior recognized speech or a status of applications in the set of applications etc. Each interpreter in the set can in one embodiment process each word in the text output to attempt to determine if it can repair the word and each interpreter in one embodiment decides on its own whether it can repair each word the interpreter produces a score or confidence level that indicates whether it can repair the word.

A controller of the set of interpreters can in one embodiment process the results of the set of interpreters by ranking the resulting repaired interpretations using each interpreter s score or confidence level to perform the ranking and then merging the ranked interpretations. The merging seeks in one embodiment to avoid an overlap in interpretations so that only an output from one interpreter is used to repair a particular word.

In one embodiment the speech assistant application can determine a command in the text output from the speech recognizer system based on a position of a word in a string of words or by using a grammar parser to determine the command and that command along with a repaired speech transcription can be passed by the speech assistant application to a particular application in a set of applications for the particular application to execute the command using the repaired speech transcription. In this embodiment the speech assistant application can select the particular application based on the command for example a call command in the recognized text causes the speech assistant application to pass through an API the call command along with the repaired speech transcription to a telephone dialer or telephone application while a stop command in the recognized text causes the speech assistant application to pass through the API the stop command to a media player such as iTunes to stop playing the currently playing song. In this example the context provided to a media player interpreter in the set of interpreters can include the status of media e.g. the context includes the status that the Beatles song Come Together is currently playing at the time that the speech input containing the recognized word stop was received by the speech recognizer system . In this example a user does not need to select a particular desired application before speaking a command rather the user speaks with the speech assistant application being the front most application and having the speech input focus and the speech assistant application then automatically without the user specifying directly the application selects the proper application in the set of applications based on the command and then passes the command through an API to the selected application.

The embodiments described herein can be implemented as machine readable non transitory storage media or as methods or as data processing systems.

The above summary does not include an exhaustive list of all aspects of the present invention. It is contemplated that the invention includes all systems and methods that can be practiced from all suitable combinations of the various aspects summarized above and also those disclosed in the Detailed Description below.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment. The processes depicted in the figures that follow are performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software or a combination of both. Although the processes are described below in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

One embodiment of the present invention provides a set of interpreters each of which are designed or configured to repair errors of a particular type in recognized text provided by the speech recognizer system. The speech recognizer system can be a conventional software based speech recognition system which includes both an acoustic model and a language model and the combination of these models in the speech recognizer system produces a text output which is then repaired by the set of interpreters. The interpreters can be configured to operate with particular databases and content in the databases as well as particular applications which can use those databases. In one embodiment the separation of the set of interpreters from the speech recognizing system such that the set of interpreters operate after the speech recognition system provides an output allows greater flexibility in designing a speech control system. Any changes in the particular applications and or those databases can be reflected in changes in the appropriate and corresponding interpreters without having to change the underlying speech recognition system. For example a data processing system can use an off the shelf conventional speech recognition system and then provide tailored interpreters which are tailored for particular applications and particular databases containing content which will appear in spoken commands for each application or a set of applications on a data processing system. For example a command such as call John Smith on mobile uses words which presumably should appear in a user s contact or address book database. The first name John should appear in the database and the last name Smith should appear in the database moreover the database should include a field identifier indicating that one of the phone numbers is the mobile phone number for John Smith. The command call can be required to be at the beginning of the spoken command or a data processing system can use a grammar parser to determine the position of the command from the spoken command. If the contacts database changes or the phone application changes e.g. a command is added or deleted or revised the interpreter for that database and application can be changed without having to revise the speech recognition system e.g. without having to revise the speech recognition system s language model . The interpreter can be changed by for example changing the fields in a database that it interacts with or changing the algorithms used to match words in text output from the speech recognition system with the fields in the database or by changing the searching algorithms used to search through the database.

In one embodiment a data processing system may include two applications in the set such as a telephone dialer which is controlled by speech input and a media player such as iTunes which is controlled by speech input. In another embodiment the set of applications can include those applications as well as a text messaging SMS short messaging service application and an email application and a calendar application and a reminder application and a local search application and a video conferencing application and a person or object locating application. A local search application is one in which a user instructs a data processing system to provide information about a local business or local entity which is geographically close to the user s current position. For example a local search spoken command can be find a Chinese restaurant which can invoke a search through a web browser for local Chinese restaurants based upon the user s current location. Alternatively the spoken command could be in the case of a local search application call DNJ Auto Repair . If a contact database in the user s system does not include an entry for DNJ Auto Repair then the system can in response invoke a web search for the business known as DNJ Auto Repair in an area which is local to the user s current location such as a location determined by a GPS receiver .

Element in can include a conventional speech recognizer system which employs both an acoustic model and a language model to recognize words in digitized spoken commands or inputs from a human user. In one embodiment a microphone collects the spoken sounds from the human user and those sounds are digitized and provided to the speech recognizer system shown as element which in turn produces a recognized text output in a character encoding format such as Unicode shown as element . This text output is then provided to element which can be a preprocessor which creates a repair data structure which can be in one embodiment a parsed data structure using tokens described further below in conjunction with which provides an example of such a parsed data structure which is used in the repair process of for example the method shown in or the method shown in . Tokens in one embodiment can be used in the data structure to represent each word in the text output and the set of interpreters in element can operate on those tokens or words in order to determine whether or not to repair each of the words in the text output . In one embodiment an optional grammar parser can be included in element in order to determine which word in the phrase is the command which can be used to select a particular application out of the set of applications as will be described further below in conjunction with . An example of a set of interpreters which can be used in element is shown in which includes a set of interpreters which can use different algorithms either for searching their corresponding databases or for processing words to determine whether a match exists between the words in the text output and the words in the corresponding databases.

Each of the interpreters can be configured or designed to interact with one or more databases such as the databases in element . These databases can include a contacts or address book database an email database a text messaging database a media database such as an iTunes database or a database of songs or movies or a combination of songs and movies etc. Other databases and corresponding interpreters to interact in those databases can also be included in one embodiment of the present invention. In a typical operation an interpreter designed to interact with a particular database and not interact with other databases will process each word other than a command word to determine whether and how much the word matches an existing word in its corresponding database. For example the first name interpreter can using an n gram algorithm as shown in search for matches of a word which might be a first name in a contact database by searching through the database for that word and then determining whether or not a repair should be performed by the use of one or more algorithms designed to determine a level of matching between words in the database and the word currently be processed by the interpreter. In one embodiment each interpreter processes every word other than the command word in text output to determine whether that interpreter can repair the word. Moreover each interpreter can provide a score or confidence level which indicates the level of matching or whether the word should be repaired with an alternative word found in the database.

The set of interpreters shown in element can in one embodiment provide a set of alternative interpretations and these alternative interpretations are processed by in one embodiment a controller shown in element which can rank and merge the results of the interpreters in order to provide a merged interpretation which can then be provided to an application which is the target of the command in the speech input.

In one embodiment the controller in element can be the controller module shown in which interacts with a set of interpreters shown in which in turn interact with one or more databases by performing searches through those databases and processing matches in those databases using one or more algorithms as is described further below. The speech assistant application such as speech assistant application shown in can call to an API the target application shown as element and can provide as a parameter of those calls the command and the repaired transcription which is the merged interpretation in one embodiment.

A method for repairing words in recognized text output such as recognized text output is shown in . The method of can be performed with the architecture shown in and with the architecture shown in and use the one or more APIs shown in . Moreover the method of can use a speech assistant application which can select an application out of a set of applications based upon the command which is detected in the recognized text output . The method of can begin in operation in which the speech recognition system generates an initial transcription. This can be the recognized text output shown in . The speech recognition system used in operation can be the speech recognizer system which includes a conventional acoustic model and language model used to recognize words in the digitized speech input. In operation the data processing system which is performing the method of can create a parsed data structure for the initial transcription. This parsed data structure can be used in the repair process of and an example of such a data structure is shown in which will be described further below. In operation the system determines the command in the transcription and also determines the user and or system context. The command can be determined by requiring the user to speak the command first or by using a grammar parser which parses the text output such as the text output to determine the location of the command and therefore the command word itself in the text output such as the text output .

In addition in the embodiment shown in operation also includes determining the user and or system context. The context information can include a list of which applications are launched and running and which applications are not launched and running whether or not a media player is playing media such as a song or movie and can also include user state based on sensors such as proximity sensors orientation sensors accelerometers and other sensors. Further the context information can also include prior conversation history which can include for each application in the set of applications previously recognized text such as play the Beatles album Abbey Road etc. In one embodiment the context can include application domains that are mentioned in a previous conversation and can also include whether or not the current application state expects a confirmation from a user such as a yes or a no or a cancel etc. Choice values for a confirmation can be specified by the system based upon the current conversation context. For example the user asks the system to send an email to a friend. After composing the message the system requests the user to confirm. At this point the confirmation choice values are populated with yes cancel and change it . The context information can also include in one embodiment the current location of the user such as the current GPS location which can be used if the user requests a local search as described herein. The context information can also include a locale context and or a language context for example an input language context can be used by the set of interpreters to assist in speech repair. In one embodiment when the language context which is determined from a user s preference setting in one embodiment is English then an interpreter can repair yet in a text output initial transcription from a speech recognition system to be yes .

In operation the system executes each interpreter in the set of interpreters in one embodiment in order to determine whether the transcription e.g. recognize text output needs to be repaired and whether it can be repaired. In one embodiment all interpreters in the set of interpreters are executed in operation . In another embodiment only those interpreters for applications that are currently executing are executed to determine whether the transcription needs to be repaired for only those currently executing applications. In one embodiment each interpreter decides on its own based on its algorithms whether it can repair one or more words in the recognized text output provided by the speech recognizer system such as speech recognizer system in element of . This operation is shown as . If none of the interpreters can repair or decide that no repair is needed then in operation the initial transcription provided by the speech recognizer system such as recognized text output is used and provided to the selected application. If on the other hand one or more words has been determined to be repairable then a set of alternative interpretations is provided which includes the initial transcription e.g. recognized text output as well as repaired interpretations. For example if it is determined that the user has no John in their contacts database but does have a Jon in their contacts database then the word Jon will be an alternative interpretation of the word John . Each interpreter maintains scores or confidence levels indicating the level of matching for one or more alternative interpretations that it can provide to for example a controller such as controller module shown in . The scores or confidence levels can be used when ranking the various interpretations in order to select the highest matching interpretation. The scores or confidence levels can be determined on a per word basis or on a per phrase e.g. two or three word basis. Then in operation a controller module or other module can perform a merging operation which in one embodiment attempts to merge non overlapping interpretations based upon the confidence score or matching or ranking score provided by each interpreter. The merged interpretation which is the final transcription that has been repaired can then be provided in operation to a selected application. In one embodiment the selected application is selected based upon the command which was recognized or determined in operation .

Each interpreter in the architecture shown in can provide one or more alternative interpretations such as the set of alternative interpretations to the controller module . For example the first name interpreter may provide two different alternative interpretations of what appears to be a first name in a spoken command and those two different interpretations will each include a scoring or ranking indicating the degree of confidence or probability that the interpretation is correct. The score or ranking is based upon the level of matching or similarity in one embodiment. shows an example of two interpretations with different scores.

Each interpreter in the set of interpreters can use context information provided by a context determining module such as the context determining module shown in element or the context determining module in . The context can include a prior conversation history which indicates whether commands are spoken for one or more applications in the set of applications and optionally the commands themselves in addition to the words themselves. Prior conversation history provides this information which can also include prior user inputs such as user inputs on a touch screen or keyboard etc. Context determining module can determine the context from the prior conversation history and also from the state of application which can include indicators indicating which applications are launched and executing which applications are not launched and therefore not executing and whether media is playing etc. For example media player interpreter can use a context indicator when media is playing to repair an initial transcription of the word stock to be stop because the user has previously caused media to start playing and in that context while the media is playing the word stock is interpreted to be stop by the media player interpreter . The context determining module can determine a language or locale context as described herein. The context determining module can also include inputs from sensors such as orientation sensors or proximity sensors or light sensor etc. as part of the context determining process. Further the context determine module can include a history of prior user inputs. The context determining module collects this various information regarding context and provides it to the interpreters which use the context to help in making decisions of whether a word can be repaired in a spoken command input.

A specific implementation according to an embodiment of the present invention will now be provided in conjunction with . Data structure represents the words in the recognized text output with tokens .

The process of speech recognition takes a speech audio recording and transcribes that into one or more text interpretations. The initial transcription is shown as text string . These transcribed texts are stored in a table like data structure called Recognition in one embodiment and shown in .

A basic construct of the Recognition is a Token. A Token is an immutable string that represents an atomic unit of a transcription. If a transcription consists of a sequence of Tokens then each Token is encapsulated in a second level data structure called Phrase . A Phrase is a column major data structure. An ordered list of Phrase objects forms a Recognition. The existence of a Phrase data structure is to allow for alternative transcriptions.

For example when a user says Call John Smith on mobile a speech assistant application may produce the Recognition shown in 

The process of speech repair takes a Recognition object shown in as input and produces a modified Recognition object if any part of the original recognition requires and can be repaired.

An internal data structure called Meta Repair can be created to assist the speech repair process. This data structure can consist of the following the original Recognition object shown in a Repair object and Token positions relative to the original transcription.

The Repair object of Meta Repair consists of a list of alternative interpretations produced by the speech repair procedures. The data structure used to represent an alternative interpretation is called Repair Interpretation.

A Repair Interpretation consists of a text that is a plausible replacement for a substring in the original recognition and the start and end position that substring. For example if Jon should be replacement for John then a Repair Interpretation for the data structure shown in can be described as the following 

The Meta Repair object contains information to perform interpretation merge. The merge logic happens after the original transcription is passed in one embodiment through all interpreters and if there is one or more repair interpretation produced. The following pseudocode provides an example of a merge function that can be used to merge non overlapping interpretations from the set of interpreters. The INPUT original Recognition is shown in .

Then in operation the interpreters are executed to repair one or more words in the recognized speech input. If the application is selected in operation prior to executing the interpreters then only those interpreters which are designed to work with that particular application can be executed rather than executing all of the interpreters which are available in the system for all of the applications which are capable of receiving spoken commands through a speech input. Operation is similar to operation and can use the architecture shown in in conjunction with the context determining module shown in . In one embodiment the command which is determined or detected in operation is not repaired. In this case the interpreters construe the command in the text input as a stop word when performing searches through the one or more databases that the interpreters interact with. Then in operation the speech assistant application can pass the command to the selected application which was determined in operation and can pass the repaired transcription which resulted from the execution of the interpreters and the merging of the alternative interpretations to the selected application. In one embodiment the speech assistant application can perform the passing of the commands along with the repaired transcription through an API such as one or more APIs as shown in .

The speech assistant application shown in can be the same as the speech assistant application which performs one or more methods of . The speech assistant application can determine a context by making a context call through API to the operating system which in turn returns context information such as the context information described above and or shown in . The context information can also include a list of which applications are executing and which applications previously received user inputs or previously received spoken commands. The speech assistant application can also make calls to the speech recognizer system which can be a software application executing on the system shown in which represents the software stack that includes the operating system as well as the speech assistant application and one or more applications in a set of applications such as applications and . The applications and can receive commands which are passed from the speech assistant application through the API .

The following are three usage examples of speech repair by a speech assistant application in one embodiment.

 1 Snap to grid voice dialing. The speech assistant application allows a user to call contacts in the address book database using speech. The user has a contact named Marc Dickinson in the address book and has no contact named Mark or Dick . When the user says Call Marc Dickinson the speech recognition incorrectly transcribes the input as Call Mark Dick son . Instead of telling the user that the assistant cannot complete the operation because it cannot find Mark Dick son in the database speech repair can exploit contact name spelling and use a fuzzy matching algorithm to generate a more plausible alternative transcription Call Marc Dickinson . 2 Disambiguate user intent. The assistant speech application allows a user to send SMS messages and make voice dialing requests. When the user says Tell my wife to pick up milk and fruits if she goes to Safeway after work the assistant automatically composes a text message to the user s wife. Due to recognition errors the speech system may incorrectly transcribe the action word tell as call or tall . Because a request Call my wife to pick up milk and fruits if she goes to Safeway after work or Tall my wife to pick up milk and fruits if she goes to Safeway after work does not map to any actionable tasks in the assistant in one embodiment the default response is usually Sorry I don t know what you meant . Speech repair can help to resolve this problem by disambiguating the speech intent using context. For example knowing that the edit distance between the word tell and tall is short and a voice dialing command typically don t have a long running string after the target person tokens an interpreter can rewrite the original transcription as Tell my wife to pick up milk and fruits if she plan to visit Safeway after work . 3 Disambiguate command system keywords. The speech system can incorrectly transcribe a short keyword pronunciation. For example a user says Stop and the initial transcription is Stock the user says Yes and the initial transcription is Yet . Speech repair can help to overcome these problems by providing alternative transcriptions when the original transcription text is a less plausible interpretation based on one or more contextual hints. For example when the assistant is prompting the user for a YES NO confirmation it is unlikely that the user would say Yet as a follow up response. Instead of returning Yet as the final transcription the speech repair can overwrite it with Yes as a more plausible speech input. Similar repair logic is applicable to the media player domain. If a user has just requested a song to be played and an immediate speech transcription is Stock the speech repair can rewrite it with Stop as a more plausible command transcription.

A display controller and display device can provide a visual user interface for the user this interface may include a graphical user interface which is similar to that shown on a Macintosh computer when running OS X operating system software or iOS software on an iPhone or iPad. The system also includes one or more wireless transceivers to communicate with another data processing system. A wireless transceiver may be a WLAN transceiver e.g. WiFi an infrared transceiver a Bluetooth transceiver and or a wireless cellular telephony transceiver. It will be appreciated that additional components not shown may also be part of the system in certain embodiments and in certain embodiments fewer components than shown in may also be used in a data processing system. The system further can include one or more communications ports to communicate with another data processing system. The communications port may be a USB port Firewire port Bluetooth interface a docking port etc.

The data processing system also includes one or more input devices which are provided to allow a user to provide input to the system. These input devices may be a keypad or a keyboard or a touch panel or a multi touch panel which is overlaid and integrated with a display device such as display device . The data processing system can also include an optional input output device which may be a connector for a dock. It will be appreciated that one or more buses not shown may be used to interconnect the various components as is well known in the art. The data processing system shown in may be a handheld computer or a personal digital assistant PDA or a cellular telephone with PDA like functionality or a handheld computer which includes a cellular telephone or a media player such as an iPod or a game or entertainment device or devices which combine aspects or functions of these devices such as a media player combined with a PDA and a cellular telephone in one device or an embedded device or other consumer electronic devices. In other embodiments the data processing system may be a network computer or an embedded processing device within another device or other types of data processing systems which have fewer components or perhaps more components than that shown in .

Data processing system can optionally include one or more hardware devices designed to digitize and store human speech received by the microphone in Audio I O .

At least certain embodiments of the inventions may be part of a digital media player such as a portable music and or video media player which may include a media processing system to present the media a storage device to store the media and may further include a radio frequency RF transceiver e.g. an RF transceiver for a cellular telephone coupled with an antenna system and the media processing system. In certain embodiments media stored on a remote storage device may be transmitted to the media player through the RF transceiver. The media may be for example one or more of music or other audio still pictures or motion pictures.

Examples of a portable media player are described in published U.S. Pat. No. 7 345 671 and U.S. published patent application number 2004 0224638 both of which are incorporated herein by reference.

One or more Application Programming Interfaces APIs may be used in some embodiments. An API is an interface implemented by a program code component or hardware component hereinafter API implementing component that allows a different program code component or hardware component hereinafter API calling component to access and use one or more functions methods procedures data structures classes and or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.

An API allows a developer of an API calling component which may be a third party developer to leverage specified features provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from an application. An operating system OS can have multiple APIs to allow applications running on the OS to call one or more of those APIs and a service such as a program library can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.

In some embodiments the API implementing component may provide more than one API each providing a different view of or with different aspects that access different aspects of the functionality implemented by the API implementing component. For example one API of an API implementing component can provide a first set of functions and can be exposed to third party developers and another API of the API implementing component can be hidden not exposed and provide a subset of the first set of functions and also provide another set of functions such as testing or debugging functions which are not in the first set of functions. In other embodiments the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.

An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations embodied for example by function or method calls exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call e.g. how to invoke the API call and what the API call does the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling API calling component and an API implementing component. Transferring the API calls may include issuing initiating invoking calling receiving returning or responding to the function calls or messages in other words transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant key data structure object object class variable data type pointer array list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.

Furthermore data types or classes may be provided by the API and implemented by the API implementing component. Thus the API calling component may declare variables use pointers to use or instantiate constant values of such types or classes by using definitions provided in the API.

Generally an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example the API implementing component and the API calling component may each be any one of an operating system a library a device driver an API an application program or other module it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other . API implementing components may in some cases be embodied at least in part in firmware microcode or other hardware logic. In some embodiments an API may allow a client program to use the services provided by a Software Development Kit SDK library. In other embodiments an application or other client program may use an API provided by an Application Framework. In these embodiments the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these embodiments provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations an API call can report to an application the capabilities or state of a hardware device including those related to aspects such as input capabilities and state output capabilities and state processing capability power state storage capacity and state communications capability etc. and the API may be implemented in part by firmware microcode or other low level logic that executes in part on the hardware component.

The API calling component may be a local component i.e. on the same data processing system as the API implementing component or a remote component i.e. on a different data processing system from the API implementing component that communicates with the API implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component i.e. it may make API calls to an API exposed by a different API implementing component and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.

The API may allow multiple API calling components written in different programming languages to communicate with the API implementing component thus the API may include features for translating calls and returns between the API implementing component and the API calling component however the API may be implemented in terms of a specific programming language. An API calling component can in one embodiment call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug in provider and another set of APIs from another provider e.g. the provider of a software library or creator of the another set of APIs.

It will be appreciated that the API implementing component may include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling component . It should be understood that the API calling component may be on the same system as the API implementing component or may be located remotely and accesses the API implementing component using the API over a network. While illustrates a single API calling component interacting with the API it should be understood that other API calling components which may be written in different languages or the same language than the API calling component may use the API .

The API implementing component the API and the API calling component may be stored in a machine readable non transitory storage medium which includes any mechanism for storing information in a tangible form readable by a machine e.g. a computer or other data processing system . For example a machine readable medium includes magnetic disks optical disks random access memory read only memory flash memory devices etc. and can be a local storage medium or a storage medium on a remote device that is coupled to a client device by one or more networks.

In Software Stack an exemplary embodiment applications can make calls to Services 1 or 2 using several Service APIs and to Operating System OS using several OS APIs. Services 1 and 2 can make calls to OS using several OS APIs.

Note that the Service 2 has two APIs one of which Service 2 API 1 receives calls from and returns values to Application 1 and the other Service 2 API 2 receives calls from and returns values to Application 2. Service 1 which can be for example a software library makes calls to and receives returned values from OS API 1 and Service 2 which can be for example a software library makes calls to and receives returned values from both OS API 1 and OS API 2. Application 2 makes calls to and receives returned values from OS API 2.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

