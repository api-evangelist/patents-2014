---

title: File system directory attribute correction
abstract: Various embodiments are directed to systems and methods for facilitating file attribute correction. A computer system may receive a request to enumerate a first directory stored on a data storage. For a first file in the first directory, the computer system may determine that the first file has a corresponding first entry in an attribute cache, determine that the first entry for the first file indicates native file attributes that match the first file, and return for the first file at least one logical attribute indicated by the first entry.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600486&OS=09600486&RS=09600486
owner: OSR Open Systems Resources, Inc.
number: 09600486
owner_city: Amherst
owner_country: US
publication_date: 20141201
---
This application is a continuation of U.S. patent application Ser. No. 13 668 033 filed on Nov. 2 2012 which is incorporated herein by reference in its entirety and claims the benefit of U.S. Provisional Application Ser. No. 61 555 419 filed on Nov. 2 2011 which is also incorporated herein by reference in its entirety.

Common data transformations performed on computer files or other denominations of data often bring about modifications to certain file attributes such as file size file name etc. File attribute changes can be related to the goal of the transformation e.g. successful compression reduces file size or can be a side effect e.g. an encryption algorithm might require rounding of file data sizes up to some boundary . When a data transformation modifies file attributes it causes a difference between the file s logical attributes e.g. attributes of the un transformed file and its native attributes e.g. attributes after transformation . In many cases the attribute meta data associated with the file will reflect the native attributes rather than the logical attributes. This can cause complications when applications expect to receive a file or its attributes in an un transformed or logical format. When a single file or attributes thereof is requested the file may be corrected before the file and or its attributes are returned to the application e.g. by reverse transformation to logical form . In cases where multiple files are required returning an untransformed file and or the untransformed logical file attributes can be computationally expensive as each file and its attributes must be reverse transformed on the fly. Existing technologies either omit attribute correction which leads to incorrect application behavior or they suffer from the overhead costs associated with on the fly correction.

Various embodiments described herein are directed to systems and methods for utilizing tagging and or caching to correct file attributes in a computer system. For example the systems and methods described herein may be utilized to correct the attributes of files that have been subject to a transformation or other operation causing a divergence between the file s native attributes and its logical attributes.

As described herein performing transformations on file data may cause changes in file attributes e.g. divergence between native and logical file attributes . For example implementing encryption may change a file s name size timestamps etc. In many cases where data transformations are performed it is desirable to return file attributes to their original logical form before the attributes are returned to a requesting utility or application. For example when a request for one or more file attributes is received from a utility or other application an implementing computer system e.g. an OS file system layered component etc. thereof may need to examine each file and or file attribute returned by the underlying OS component e.g. file system and then determine what corrections if any must be made to the file attribute. Necessary corrections may then be made before the requested attribute or attributes are returned to the requesting application. Determining whether a file s attributes require correction and if so performing the correction can be computationally expensive. For example these operations may require additional processing additional I O to the file communications with external components e.g. a database and or other operations. If performed each time the information is requested these operations can create a noticeable decrease in system performance. Potential decreases in system performance are only amplified when the implementing system generates a directory enumeration or listing comprising file attributes for all files in a subject directory.

Various embodiments utilize file tagging to improve the efficiency of file attribute correction. For example files that are known to require attribute correction may be tagged. Upon receiving a request for one or more attributes of a file an implementing computer system may check whether the corresponding file is tagged. If the file is tagged the implementing computer system may not need to perform any additional processing to determine whether file correction is necessary. Files may be tagged in any suitable manner. For example a file may be tagged by modifying the file s existing meta data to indicate that attribute correction is necessary. Examples of meta data that may be modified include file timestamps file sizes and or other attributes of the file. The meta data may be modified in a way so as to make it possible to determine in the future from the meta data that the file attributes require correction. In some embodiments when a file attribute is modified to tag the file the unmodified e.g. correct value for the attribute may be stored at an alternate location e.g. with the file itself in an external database etc. . In some embodiments files may be tagged by adding additional information to the file e.g. an alternate data stream etc. . The existence of such additional information may be hidden e.g. from the OS application etc. . For example when the additional information is an alternate stream the alternate stream may be removed from replies to application calls requesting the list of streams for the file. In some embodiments a file may be tagged during the transformation process e.g. the process causing diversion between native and logical file attributes . For example as a file is transformed its meta data may be tagged in a manner indicating that some file attributes will require correction.

Various embodiments may also improve the efficiency of file attribute correction by utilizing attribute caching. Attribute caching may be utilized in conjunction with or separate from tagging. In various embodiments the implementing computer system may maintain an attribute cache. The attribute cache may be stored at any suitable location e.g. system memory cache memory persistent storage combinations thereof etc. and may comprise entries for a plurality of files requiring attribute correction. The entry for each file may indicate at least one native e.g. existing attribute of the file and at least one logical e.g. corrected attribute of the file. When the implementing computer system receives a request for one or more file attributes it may review the attribute cache. If the file that is the subject of the request e.g. the subject file has an attribute cache entry the implementing computer system may receive the file s logical attribute or attributes from the cache. This may obviate the need for the implementing computer system to derive logical attributes each time that a file or its attributes are accessed. In the context of a directory enumeration the attribute cache may be examined for each file in the directory either in a batch or via iteration over the full set of entries or some combination of both.

The attribute cache may be populated in any suitable manner. In some embodiments the attribute cache is populated as requests for file attributes e.g. directory enumeration requests are received. For example when the implementing system receives an attribute request for a file requiring attribute correction it may derive the logical attributes and then generate for the file an attribute cache entry indicating the native and logical attributes of the file. Also in some embodiments the attribute cache may be pre populated. For example files having attributes that are commonly accessed and or directories that are commonly enumerated may be pre processed to generate attribute cache entries.

The implementing computer system may be any suitable type of system such as for example a computer system utilizing a layered file system or similar arrangement e.g. a UNIX layered file system a MICROSOFT WINDOWS isolation file system filter driver etc. . In some example embodiments the implementing computer system is used in conjunction with a file system utilizing layered components to perform data transformations e.g. transformations that cause a divergence between native and logical file attributes . The layered components may be operating system OS or non OS components. Examples of layered components that may perform data transformations include OS components file system components additional third party transformation components positioned between the OS and the file system or at any other suitable logical position etc.

In various embodiments the systems and methods described herein may improve the performance of systems in which file attributes must be corrected to represent the correct logical information to applications. While this can be done without tagging and or caching there may be a considerable performance cost associated with other methods. Thus the systems and methods described herein may mitigate the cost of building layered data modification transformation systems e.g. encryption and or compression . For example tagging files may allow quick determinations of whether files require correction of their meta data attributes. Also for example caching both the native original attributes and the logical corrected attributes of the file allows quick computation of the correct attributes to report e.g. it may not be necessary to re calculate the logical attributes for each file after the cache is populated . It will be appreciated that in some embodiments the tagging and caching features may be utilized separately. For example files may be tagged as described to indicate to the implementing computer system that attribute correction is required. Also for example the described cache may be implemented without the use of tagging.

Before providing additional description of systems and methods for file system directory attribute correction brief descriptions are provided of an example computer system for implementing file system director attribute correction. is a logical block diagram showing one embodiment of a system architecture of a computer system that may be used to implement file system directory attribute correction as described herein. The architecture may be implemented on any suitable type of computer hardware. For example the architecture may be implemented on a computer device comprising a central processing unit CPU or other processor random access memory persistent storage e.g. hard drive solid state drive SSD etc. A block diagram of an example implementing computer system for the architecture is provided and described below with respect to .

The architecture may include one or more examples of an application an operating system a file system cache memory random access memory and a persistent data storage . The application indicated at may be executed by a processor or processors of a computer system implementing the architecture . When executed the application may perform at least one function such as for example providing e mail service providing word processing providing financial management services performing administrative tasks for the computer system etc. In various example embodiments the application may be a program provided with the operating system environment. The application may access different system resources e.g. files directories etc. by generating access requests. For example the application may request a directory enumeration or other indication of file attributes. The access requests may be handled by other components of the architecture such as the OS the file system the file system filter driver etc. Although shows a single application the architecture may support an arbitrary number of applications not shown .

In various embodiments the application may access various system resources such as data storage memory etc. via operating system . The operating system may be any suitable operating system. For example in various non limiting embodiments the operating system may be any version of MICROSOFT WINDOWS any UNIX operating system any Linux operating system OS 2 any version of MAC OS etc. The operating system may provide services to the application that facilitate the application s functions. For example the operating system may allow the application to access and manipulate system resources.

Components of the application data utilized by the application as well as components and or data for other applications e.g. resources may be stored at persistent data storage . Persistent data storage may include any kind of storage drive capable of storing data in an electronic or other suitable computer readable format. In certain non limiting embodiments data storage may include a single fixed disk drive an array of disk drives an array of disk drives combined to provide the appearance of a larger single disk drive a solid state drive SSD etc. Data storage may be physically located at the implementing computer system and or accessible over a network. In some embodiments data storage may comprise more than one physical device located at a single location or across multiple locations. For example in some embodiments the data storage may be and or comprise cloud based storage.

File system may be an organization system for logically and physically organizing data present at the data storage . In various non limiting embodiments the file system may be a native file system included with the operating system described below or a third party file system. The file system may organize data units into logical files and directories or folders . The file system may also manage associations between data files directories and physical addresses at the data storage . The file system may be for example specific to a computer system and or or to particular drives making up data storage . In various embodiments a single file system may manage associations between data files directories and physical locations for data storages located across the computer system . The file system may be any suitable file system including as non limiting examples File Allocation Table 16 FAT16 File Allocation Table 32 FAT32 NTFS High Performance File System HPFS UNIX file system UFS XFS journaled file system JFS Universal Data Format File System UDFS CD ROM File System CDFS Enhanced File System EFS SGI XFS Clustered XFS CXFS HFS VxFS Raw File System RawFS Local File System DCE LFS etc.

Each of the files may include data and attributes . The data may include various data units and may be organized for example according to the file system . Attributes may comprise meta data describing the file. The attributes may describe various different file properties including for example file names file sizes and file timestamps such as timestamps indicating when the file was created modified accessed etc. Other example attributes may indicate file properties such as for example access controls e.g. read only flags that describe characteristics of the file e.g. system hidden archive lists of alternate data streams associated with a file etc. The file attributes may be stored as a part of a file for example as part of a data stream associated with the file. Also in some embodiments file attributes may be stored e.g. by the file system OS or file system filter driver in a separate location in persistent data storage cache memory and or random access memory .

Example systems and methods that may perform data transformations as described herein are provided by commonly owned U.S. patent application Ser. No. 11 145 433 entitled Systems and Methods for Arbitrary Data Transformations U.S. patent application Ser. No. 11 509 391 entitled Managing Access to a Resource U.S. Pat. No. 8 024 433 entitled Managing Application Resources U.S. Pat. No. 7 949 693 entitled Log Structured Host Data Storage U.S. patent application Ser. No. 12 658 209 entitled Methods and Systems for Remote Data Storage Utilizing Content Addresses and PCT Patent Application Serial No. PCT US11 20375 entitled Network Encryption all of which are incorporated herein by reference in their entireties.

If the file is not tagged the file system filter driver may determine at whether the file requires attribute correction. For example the file system filter driver may determine if a record exists indicating that the file has been transformed e.g. by the file system filter driver another file system filter driver the operating system the file system etc. . Also in some embodiments the file system filter driver may examine the file for indications that it has been subject to a transformation. If at the file is determined to not require attribute correction the file system filter driver may return at the file s native attributes e.g. for inclusion in the directory listing . If at the file is determined to require attribute correction and or if the file is determined at to be tagged as requiring attribute correction then the file system filter driver may determine the logical attributes for the file at . The logical attributes of the file may be determined in any suitable manner. For example in embodiments utilizing an attribute cache deriving the logical attributes of a file may comprise consulting an entry for the file at the attribute cache . In some embodiments deriving the logical attributes of a file may comprise performing a reverse transformation of the file thereby re converting the file to its original form where the file s logical attributes and native attributes are the same.

At the file system filter driver may tag the file . Tagging of the file may indicate that the file requires attribute correction and may be performed in any suitable manner. For example a tag may be added to the meta data or attributes associated with the file . In some embodiments the file may be tagged by modifying its native size. For example the file may be modified to have a size divisible by a certain value e.g. 512 bytes or another value . In addition in some embodiments the file may be tagged utilizing an alternate data stream a feature of some file systems such as NTFS . For example an indication of the tag may be incorporated into an alternate data stream associated with the file . Also in some embodiments the file may be tagged by modifying its time stamps. For example the file may have multiple time stamps indicating for example a file creation time a last access time a last write time and in some file systems a last change time indicating the last change to the file s attributes. The tag may be applied to a file for example by modifying one or more of these values in a predictable manner.

In some embodiments the file may be tagged by modifying its name. For example the file may be re named with a universally unique identifier UUID globally unique identifier GUID or other similar naming standard that makes it straight forward to determine which files require correction as only those files meeting the exact size requirements of a GUID would fall into that category. Other similar standards may include for example other algorithmically defined mechanisms for automatically generating a name. Tagging in this manner may have the additional advantage of encrypting the file name.

At the file system filter driver may return the logical attributes of the file as determined at for example to be utilized in the enumeration of the directory. In various embodiments the file system filter driver may perform the actions indicated by box for all files in the requested directory . Upon determining the proper attributes for each file in the directory the file system filter driver may return an enumeration for the directory at . The enumeration may include a list of files in the directory as well as the logical attributes for the files. In some embodiments the actions indicated by box may be separately performed for a single file outside the context of a directory enumeration or listing.

In various embodiments the attribute cache may be utilized to facilitate the process of directory enumeration. is a block diagram showing one embodiment of an attribute cache . The attribute cache may be stored at any suitable data storage of the architecture including for example at persistent data storage as indicated in and or at cache memory random access memory etc. or any suitable combination thereof. The attribute cache may comprise a plurality of entries with each of the entries corresponding to a file . Each file entry may comprise an indication of the corresponding file as well as one or more native attributes for the file and one or more logical attributes for the file . In some embodiments the native attributes may serve as the identification of the file and other indications of the corresponding file may be omitted. For example the native attributes of the corresponding file may comprise the name of the file . In various embodiments the attribute cache may be created in a protected location within the directory hierarchy e.g. System Volume Information on a MICROSOFT WINDOWS system . In various embodiments the attribute cache may be persistent and may only be deleted for example when the size of the cache exceeds a threshold size which may be predetermined.

In some embodiments the cache may be logically organized as a series of cache files with each cache file comprising entries for one or more files. For example each cache file may correspond to one or more directories and may include entries for files in its corresponding directory or directories. In various embodiments separate cache files may be created for each directory . For example cache files may be associated with the relevant directory using unique information e.g. the GUID assigned to the directory to construct the name of the cache file .

The attribute cache may be organized and or managed in any suitable manner. For example in some embodiments a database technique may be used for organizing and managing the persistent cache file. This may provide efficiency of size which can prove to be a critical issue for directories containing large numbers e.g. millions of entries. Also database techniques may scale well. Examples database techniques that may be used as described herein to organize and manage a cache file are provided in Comp 231 Database Management Systems by Wilfred Ng which is incorporated herein by reference.

At the file system filter driver may determine whether there is a valid cache entry for the file . For example the file system filter driver may determine whether there is an entry for the file at the attribute cache . This may involve for example determining a cache file corresponding to the file and or a directory including the file and examining the cache file for an entry corresponding to the file . If no valid entry is found at the file system filter driver may derive the file s logical attributes at . The logical attributes may be derived for example as described herein above with respect to . In various embodiments no valid cache entry may be found for the file at if there is no entry for the file at all or if an entry associated with the file exists but is invalid. For example if the file system filter driver finds a cache entry associated with the file it may determine if the native attributes associated with the file match the native attributes indicated for the file at the cache entry. If the native attributes match then the file system filter driver may determine that there is a valid cache entry for the file . If not then the cache entry associated with the file may be deemed stale and discarded from the attribute cache . If no valid entry is found for the file e.g. either there is no corresponding entry or the corresponding entry is stale then the file system filter driver may derive the file s logical attributes at . The action may be executed for example in a manner similar to that described above with respect to . In some embodiments actions and may be combined with the presence or absence of a cache entry serving as a tag. For example if a cache entry is present for a file the file system filter driver may determine that attribute correction is required. If no cache entry is present the file system filter driver may determine that no attribute correction is required and may return the file s native attributes at . Utilizing the attribute cache as described herein may be particularly advantageous in cases where the file attribute requiring correction is the file s name. Correcting a file s name may be generally an expensive step involving performing I O to the file and or an external repository of some sort e.g. a database. Avoiding such I O e.g. by caching the correct logical name may thereby considerably increase efficiency.

If there is a valid cache entry for the file then the file system filter driver may retrieve the file s logical attributes from the cache entry at . At the file s logical attributes may be returned for example to be used as part of the directory listing. In various embodiments the file system filter driver may perform the actions indicated by box for all files in the requested directory . Upon determining the proper attributes for each file in the directory the file system filter driver may at return an enumeration for the directory at . The enumeration may include a list of files in the directory as well as the logical attributes for the files. In some embodiments the actions indicated by box may be separately performed for a single file outside the context of a directory enumeration or listing.

In some embodiments tagging and caching may be utilized together. For example is a flow chart illustrating one embodiment of a process flow for utilizing tagging and caching to facilitate directory enumeration. Like the process flows the process flow is described as being executed by the file system filter driver . It will be appreciated however that the process flow may be executed by any suitable component of the architecture including for example the operating system the file system etc. At the file system filter driver may receive a request to enumerate a directory. The request may originate from an application executed using the architecture such as the application . At the file system filter driver may determine whether a file in the directory is tagged to indicate that an attribute change is required for example similar to above. If the file is tagged then the file system filter driver may determine whether there is a valid cache entry for the file at . If the file is not tagged then the file system filter driver may determine at whether attribute correction is necessary for the file for example as described with respect to and . If attribute correction is necessary for the file then the file system filter driver may tag the file at . If attribute correction is not required at then the file system filter driver may return the file s native attributes at e.g. for inclusion in the directory enumeration.

After tagging at and or after determining that the file is already tagged at the file system filter driver may determine at whether there is a valid cache entry for the file for example as described herein with respect to . If there is no valid cache entry for the file the file system filter driver may derive the file s logical attributes at for example as described herein above with respect to and . If a valid cache entry exists for the file then the file system filter driver may retrieve the file s logical attributes from cache such as a cache file as described with respect to . At the file system filter driver may return the file s logical attributes e.g. for inclusion in the directory enumeration. In various embodiments the file system filter driver may perform the actions indicated by box for all files in the requested directory . Upon determining the proper attributes for each file in the directory the file system filter driver may at return an enumeration for the directory at . The enumeration may include a list of files in the directory as well as the logical attributes for the files. In some embodiments the actions indicated by box may be separately performed for a single file outside the context of a directory enumeration or listing.

In embodiments that utilize caching the attribute cache e.g. one or more cache files may be generated and or updated in any suitable manner. In some embodiments the attribute cache may be generated during the directory enumeration process. For example referring to in some embodiments upon deriving a file s logical attributes at or the file system filter driver or other suitable component may add an entry for the file to the appropriate cache location. The appropriate cache location for example may be a cache file associated with the file or its directory.

In some embodiments the file system filter driver or other suitable component may pre populate all or a portion of the attribute cache e.g. before a request for file attributes is received such as a directory enumeration request . The attribute cache may be pre populated in any suitable manner. For example is a flow chart showing one embodiment of a process flow for pre populating the attribute cache . Once again the process flow is described as being executed by the file system filter driver although it will be appreciated that any suitable architecture component may perform some or all of the process flow e.g. the OS the file system etc. .

At the file system filter driver may predict the usage frequency of various files and or directories. Frequently used files and or frequently enumerated directories may be determined in any suitable manner. For example frequently used files and or frequently enumerated directories may be determined based on past behavior of the user other similarly situated users the application s executed by the computer system etc. At the file system filter driver may pre populate the attribute cache for files and or directories that are determined to be frequently used. For example the file system filter driver may examine each individual file to determine if attribute correction is necessary. If attribute correction is necessary for a file then the file system filter driver may create for the file an entry in the attribute cache . In various embodiments pre population of the attribute cache may be scheduled to occur when system resources such as the processor and memory are otherwise idle thus minimizing the performance impact of the initial computation of the corrections. The pre populated cache may be utilized for example as described above with respect to the process flows and .

In various embodiments the file system filter driver or other suitable component of the architecture may be programmed to manage the attribute cache . For example the file system filter driver may discard portions of the attribute cache as needed e.g. for space management . For example the attribute cache may not be necessary to enable correct functioning of directory enumeration but may instead speed the enumeration as to mitigate the cost of computing the corrected information. In some embodiments the file system filter driver may be programmed to perform various compression techniques to the attribute cache . For example when the attribute cache comprises entries for files that do not require attribute correction these entries may be compacted. Also for example the file system filter driver may be programmed to reclaim space from the attribute cache according to a variety of entry parameters age size available space in memory and or on persistent storage etc. . Also in some embodiments cache entries may be reclaimed when such entries are invalided for example upon the deletion or renaming of a file.

The CPU may comprise an arithmetic and logic unit ALU a control unit cache memory and an input and output I O control . These components can be interconnected by a bus or busses often comprising groups of wires or cables. The control unit ALU and basic I O control and sometimes other hardware closely linked with these sections can be collectively considered the central processing unit CPU for the computer system . The CPU may be constructed on a single integrated circuit or microprocessor.

The control unit control system or central controller may direct the various components of the computer system . For example the control unit may decode each instruction in a computer program and turn it into a series of control signals that operate other components of the computer system . To enhance performance or efficiency of operation the control unit may in some embodiments alter the order of instructions. In some embodiments the control unit may comprise a program counter and a memory register that tracks the location in memory from which the next instruction is to be read.

The ALU may be capable of performing arithmetic and logic operations. The set of arithmetic operations that a particular ALU supports may be limited to adding and subtracting or might include multiplying or dividing trigonometry functions sine cosine etc. and square roots. Some embodiments of the ALU may be programmed to operate on whole numbers integers while others may use floating point representations of real numbers for example. The ALU may also compare numbers and return Boolean truth values e.g. true or false . Some embodiments of the system such as those implementing superscalar computers may contain multiple ALUs to facilitate processing multiple instructions at the same time. For example graphics processors and computers with Simple Instruction Multiple Data SIMD and or Multiple Instruction Multiple Data MIMD features often possess ALU s that can perform arithmetic operations on vectors and matrices. Some embodiments of the computer system may include one or more RAM cache memories configured to move more frequently needed data into the cache automatically.

Some embodiments described herein may comprise multiple CPU s . For example functions may be divided between separate CPU s creating a multiprocessing configuration. For example multiprocessor and multi core multiple CPUs on a single integrated circuit computer systems with co processing capabilities may be employed. Also multitasking may be employed as a computer processing technique to handle simultaneous execution of multiple computer programs.

Random access memory may comprise any suitable type of memory including for example Dynamic Random Access Memory DRAM Double Data Rate Synchronous Dynamic Random Access Memory DDR SDRAM . Persistent storage may be similar to the persistent storage described above with respect to the architecture . For example persistent storage may comprise any type of persistent storage device including for example a single fixed disk drive an array of disk drives an array of disk drives combined to provide the appearance of a larger single disk drive a solid state drive SSD etc. I O devices may for example be managed by the I O control and may include for example keyboards mice screen displays monitors printers hard disk drives floppy disk drives joysticks and image scanners.

In some embodiments the architecture may utilizing a file system such as NTFS that supports streaming and may utilize streaming to facilitate the correction of file attributes. For example logical file attributes may be stored at a designated stream of a file at the time of transformation. For example a primary data stream may be used as a dummy and may indicate for each transformed file logical information such as file size etc. Actual data including native attributes may be stored in one or more secondary streams. When the OS file system or other architecture component accesses attributes for the transformed file the returned attributes may be the logical attributes from the dummy stream rather than the native attributes. Also in some embodiments logical attributes may be stored in a secondary stream. The OS file system file system filter driver or other component of the architecture may use the presence of the secondary stream as a tag indicating that attribute correction is necessary. Logical attributes for the file may then be retrieved from the secondary stream.

Also incorporated herein by reference in their entireties are U.S. Pat. No. 7 809 897 entitled Managing Lock Rankings and U.S. Pat. No. 7 512 748 also entitled Managing Lock Rankings. 

In various embodiments modules or software can be used to practice certain aspects of the invention. For example software as a service SaaS models or application service provider ASP models may be employed as software application delivery models to communicate software applications to clients or other users. Such software applications can be downloaded through an Internet connection for example and operated either independently e.g. downloaded to a laptop or desktop computer system or through a third party service provider e.g. accessed through a third party web site . In addition cloud computing techniques may be employed in connection with various embodiments of the invention. In certain embodiments a module may include software firmware hardware or any reasonable combination thereof.

Various embodiments of the systems and methods may include and or utilize a computer or computer system. In various embodiments a computer may be in communication with a server or server system utilizing any suitable type of communication including for example wired or wireless digital communications. In some embodiments the server or server system may be implemented as a cloud computing application and or in a similar manner and may provide various functionality of the systems and methods as SaaS.

The examples presented herein are intended to illustrate potential and specific implementations of the present invention. It can be appreciated that the examples are intended primarily for purposes of illustration of the invention for those skilled in the art. No particular aspect or aspects of the examples are necessarily intended to limit the scope of the present invention.

It is to be understood that the figures and descriptions of the present invention have been simplified to illustrate elements that are relevant for a clear understanding of the present invention while eliminating for purposes of clarity other elements. Those of ordinary skill in the art may recognize however that these sorts of focused discussions would not facilitate a better understanding of the present invention and therefore a more detailed description of such elements is not provided herein.

Any element expressed herein as a means for performing a specified function is intended to encompass any way of performing that function including for example a combination of elements that performs that function. Furthermore the invention as may be defined by such means plus function claims resides in the fact that the functionalities provided by the various recited means are combined and brought together in a manner as defined by the appended claims. Therefore any means that can provide such functionalities may be considered equivalents to the means shown herein.

Moreover the processes associated with the present embodiments may be executed by programmable equipment such as computers. Software or other sets of instructions that may be employed to cause programmable equipment to execute the processes may be stored in any storage device such as for example a computer system non volatile memory an optical disk magnetic tape or magnetic disk. Furthermore some of the processes may be programmed when the computer system is manufactured or via a computer readable memory medium.

It can also be appreciated that certain process aspects described herein may be performed using instructions stored on a computer readable memory medium or media that direct a computer or computer system to perform process steps. A computer readable medium may include for example memory devices such as diskettes compact discs of both read only and read write varieties optical disk drives and hard disk drives. A computer readable medium may also include memory storage that may be physical virtual permanent temporary semi permanent and or semi temporary.

A computer computer system component computer device or processor may be for example and without limitation a processor microcomputer minicomputer server mainframe laptop personal data assistant PDA wireless e mail device cellular phone pager processor fax machine scanner or any other programmable device configured to transmit and or receive data over a network. Computer systems and computer based devices disclosed herein may include memory for storing certain software applications used in obtaining processing and communicating information. It can be appreciated that such memory may be internal or external with respect to operation of the disclosed embodiments. The memory may also include any means for storing software including a hard disk an optical disk floppy disk ROM read only memory RAM random access memory PROM programmable ROM EEPROM electrically erasable PROM and or other computer readable memory media. In various embodiments a host engine loader filter platform or component may include various computers or computer systems or may include a reasonable combination of software firmware and or hardware.

In various embodiments of the present invention a single component may be replaced by multiple components and multiple components may be replaced by a single component to perform a given function or functions. Except where such substitution would not be operative to practice embodiments of the present invention such substitution is within the scope of the present invention. Any of the servers for example may be replaced by a server farm or other grouping of networked servers e.g. a group of server blades that are located and configured for cooperative functions. It can be appreciated that a server farm may serve to distribute workload between among individual components of the farm and may expedite computing processes by harnessing the collective and cooperative power of multiple servers. Such server farms may employ load balancing software that accomplishes tasks such as for example tracking demand for processing power from different machines prioritizing and scheduling tasks based on network demand and or providing backup contingency in the event of component failure or reduction in operability.

In general it may be apparent to one of ordinary skill in the art that various embodiments described herein or components or parts thereof may be implemented in many different embodiments of software firmware and or hardware or modules thereof. The software code or specialized control hardware used to implement some of the present embodiments is not limiting of the present invention. For example the embodiments described hereinabove may be implemented in computer software using any suitable computer programming language such as .NET SQL MySQL or HTML using for example conventional or object oriented techniques. Programming languages for computer software and other computer implemented instructions may be translated into machine language by a compiler or an assembler before execution and or may be translated directly at run time by an interpreter. Examples of assembly languages include ARM MIPS and x86 examples of high level languages include Ada BASIC C C C COBOL Fortran Java Lisp Pascal Object Pascal and examples of scripting languages include Bourne script JavaScript Python Ruby PHP and Perl. Various embodiments may be employed in a Lotus Notes environment for example. Such software may be stored on any type of suitable computer readable medium or media such as for example a magnetic or optical storage medium. Thus the operation and behavior of the embodiments are described without specific reference to the actual software code or specialized hardware components. The absence of such specific references is feasible because it is clearly understood that artisans of ordinary skill would be able to design software and control hardware to implement the embodiments of the present invention based on the description herein with only a reasonable effort and without undue experimentation.

Various embodiments of the systems and methods described herein may employ one or more electronic computer networks to promote communication among different components transfer data or to share resources and information. Such computer networks can be classified according to the hardware and software technology that is used to interconnect the devices in the network such as optical fiber Ethernet wireless LAN HomePNA power line communication or G.hn. The computer networks may also be embodied as one or more of the following types of networks local area network LAN metropolitan area network MAN wide area network WAN virtual private network VPN storage area network SAN or global area network GAN among other network varieties.

For example a WAN computer network may cover a broad area by linking communications across metropolitan regional or national boundaries. As the systems and methods described herein aim to minimize I O transactions they may be useful in situations such as cloud computing configurations where I O transactions are performed over a WAN or other network with long I O delays. The network may use routers and or public communication links One type of data communication network may cover a relatively broad geographic area e.g. city to city or country to country which uses transmission facilities provided by common carriers such as telephone service providers. In another example a GAN computer network may support mobile communications across multiple wireless LANs or satellite networks. In another example a VPN computer network may include links between nodes carried by open connections or virtual circuits in another network e.g. the Internet instead of by physical wires. The link layer protocols of the VPN can be tunneled through the other network. One VPN application can promote secure communications through the Internet. The VPN can also be used to separately and securely conduct the traffic of different user communities over an underlying network. The VPN may provide users with the virtual experience of accessing the network through an IP address location other than the actual IP address which connects the access device to the network.

The computer network may be characterized based on functional relationships among the elements or components of the network such as active networking client server or peer to peer functional architecture. The computer network may be classified according to network topology such as bus network star network ring network mesh network star bus network or hierarchical topology network for example. The computer network may also be classified based on the method employed for data communication such as digital and analog networks.

Embodiments of the methods systems and tools described herein may employ internetworking for connecting two or more distinct electronic computer networks or network segments through a common routing technology. The type of internetwork employed may depend on administration and or participation in the internetwork. Non limiting examples of internetworks include intranet extranet and Internet. Intranets and extranets may or may not have connections to the Internet. If connected to the Internet the intranet or extranet may be protected with appropriate authentication technology or other security measures. As applied herein an intranet can be a group of networks which employ Internet Protocol web browsers and or file transfer applications under common control by an administrative entity. Such an administrative entity could restrict access to the intranet to only authorized users for example or another internal network of an organization or commercial entity. As applied herein an extranet may include a network or internetwork generally limited to a primary organization or entity but which also has limited connections to the networks of one or more other trusted organizations or entities e.g. customers of an entity may be given access an intranet of the entity thereby creating an extranet .

Computer networks may include hardware elements to interconnect network nodes such as network interface cards NICs or Ethernet cards repeaters bridges hubs switches routers and other like components. Such elements may be physically wired for communication and or data connections may be provided with microwave links e.g. IEEE 802.12 or fiber optics for example. A network card network adapter or NIC can be designed to allow computers to communicate over the computer network by providing physical access to a network and an addressing system through the use of MAC addresses for example. A repeater can be embodied as an electronic device that receives and retransmits a communicated signal at a boosted power level to allow the signal to cover a telecommunication distance with reduced degradation. A network bridge can be configured to connect multiple network segments at the data link layer of a computer network while learning which addresses can be reached through which specific ports of the network. In the network the bridge may associate a port with an address and then send traffic for that address only to that port. In various embodiments local bridges may be employed to directly connect local area networks LANs remote bridges can be used to create a wide area network WAN link between LANs and or wireless bridges can be used to connect LANs and or to connect remote stations to LANs.

In various embodiments a hub may be employed which contains multiple ports. For example when a data packet arrives at one port of a hub the packet can be copied unmodified to all ports of the hub for transmission. A network switch or other devices that forward and filter OSI layer 2 datagrams between ports based on MAC addresses in data packets can also be used. A switch can possess multiple ports such that most of the network is connected directly to the switch or another switch that is in turn connected to a switch. The term switch can also include routers and bridges as well as other devices that distribute data traffic by application content e.g. a Web URL identifier or other data location information as described herein . Switches may operate at one or more OSI model layers including physical data link network or transport i.e. end to end . A device that operates simultaneously at more than one of these layers can be considered a multilayer switch. In certain embodiments routers or other like networking devices may be used to forward data packets between networks using headers and forwarding tables to determine an optimum path through which to transmit the packets.

As employed herein an application server may be a server that hosts an API to expose business logic and business processes for use by other applications. Examples of application servers include J2EE or Java EE 5 application servers including WebSphere Application Server. Other examples include WebSphere Application Server Community Edition IBM Sybase Enterprise Application Server Sybase Inc WebLogic Server BEA JBoss Red Hat JRun Adobe Systems Apache Geronimo Apache Software Foundation Oracle OC4J Oracle Corporation Sun Java System Application Server Sun Microsystems and SAP Netweaver AS ABAP Java . Also application servers may be provided in accordance with the .NET framework including the Windows Communication Foundation .NET Remoting ADO.NET and ASP.NET among several other components. For example a Java Server Page JSP is a servlet that executes in a web container which is functionally equivalent to CGI scripts. JSPs can be used to create HTML pages by embedding references to the server logic within the page. The application servers may mainly serve web based applications while other servers can perform as session initiation protocol servers for instance or work with telephony networks. Specifications for enterprise application integration and service oriented architecture can be designed to connect many different computer network elements. Such specifications include Business Application Programming Interface Web Services Interoperability and Java EE Connector Architecture.

In various embodiments the computer systems data storage media or modules described herein may be configured and or programmed to include one or more of the above described electronic computer based elements and components or computer architecture. In addition these elements and components may be particularly configured to execute the various rules algorithms programs processes and method steps described herein.

Any patent publication or other disclosure material in whole or in part that is said to be incorporated by reference herein is incorporated herein only to the extent that the incorporated materials does not conflict with existing definitions statements or other disclosure material set forth in this disclosure. As such and to the extent necessary the disclosure as explicitly set forth herein supersedes any conflicting material incorporated herein by reference. Any material or portion thereof that is said to be incorporated by reference herein but which conflicts with existing definitions statements or other disclosure material set forth herein will only be incorporated to the extent that no conflict arises between that incorporated material and the existing disclosure material.

While various embodiments have been described herein it should be apparent however that various modifications alterations and adaptations to those embodiments may occur to persons skilled in the art with the attainment of some or all of the advantages of the invention. The disclosed embodiments are therefore intended to include all such modifications alterations and adaptations without departing from the scope and spirit of the invention.

