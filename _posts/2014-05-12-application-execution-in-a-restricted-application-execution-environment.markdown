---

title: Application execution in a restricted application execution environment
abstract: Application programming interface (API) calls made by an application are intercepted at runtime. A determination is made as to whether each intercepted API call is allowed or blocked by a restricted application execution environment. Each API call that is blocked by the restricted application execution environment is modified so that the API call is allowable such as, for instance, modifying the API call to execute against a shadow resource. Remediation code might also be executed at runtime to reformat the API call so that it is allowed to execute in the restricted application execution environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09443079&OS=09443079&RS=09443079
owner: Microsoft Technology Licensing, LLC
number: 09443079
owner_city: Redmond
owner_country: US
publication_date: 20140512
---
This application is a continuation of co pending U.S. patent application Ser. No. 12 978 664 filed on Dec. 27 2010 and entitled Application Execution in a Restricted Application Execution Environment which is expressly incorporated herein by reference in its entirety.

There is a greater need today for secure operating systems than ever before. One way newer computer operating systems provide greater security is by imposing significant restrictions on how application programs may execute. For instance an operating system may not allow an application program programmed for use with an older version of the operating system to access certain operating system provided application programming interfaces APIs . As a result legacy applications i.e. applications programmed for use with an older version of the operating system may cease to function or may function improperly when executed on a newer version of an operating system.

In order to enable legacy application programs to function with a newer operating system that imposes more burdensome security restrictions it may be necessary to modify the application program. Modification of a legacy application program might not always be possible however because the source code may be unavailable the original developer of the application program may be unavailable financial resources may be unavailable to finance the modification or the underlying technology may be too difficult to understand. This may prove to be frustrating to an individual or an organization that desires to execute the legacy application on a newer operating system.

Technologies are described herein for executing an application in a restricted application execution environment. As used herein the term restricted application execution environment is utilized to refer to an environment for executing an application program that imposes security restrictions on the execution of application programs. For instance an operating system that restricts access to legacy operating system provided APIs is a restricted application execution environment. The concepts and technologies disclosed herein permit legacy applications to access APIs provided by a restricted application execution environment that they might otherwise not be permitted to utilize.

According to one aspect presented herein a learning mode is utilized to identify the API calls made by an application that are not allowed by a restricted application execution environment. To identify these API calls the application is executed and the API calls made by the application are intercepted. For each intercepted API call a determination is made as to whether the restricted application execution environment would allow the API call to be performed. In one embodiment a security rules database is consulted to make this determination. The security rules database stores data indicating whether API calls are allowable by a restricted application execution environment.

For each API call that cannot be performed within the restricted application execution environment data is stored in a database referred to herein as a runtime remediation database that identifies the API call. Additional state information regarding the API call might also be stored in the runtime remediation database such as data identifying the caller of the API a call stack data indicating how the API was called call parameters and other data.

The contents of the runtime remediation database may be utilized at runtime to identify blocked API calls and to modify the API calls so that the restricted application execution environment will allow the calls. In particular API calls made by the application at runtime are intercepted. For each intercepted API call a determination is made as to whether the API call is allowed by the restricted application execution environment. The contents of the runtime remediation database may be utilized to identify calls that are not allowed.

Each API call that is blocked by the restricted application execution environment is modified so that the API call is allowable. For instance in one example an API call for accessing a secure resource such as a registry or a file on a mass storage device may be modified such that it is executed against a shadow resource. A shadow resource is a version of the secure resource that is accessible to the API within the restricted application execution environment. In another example program code referred to herein as remediation code may be executed to reformat the API call so that it is allowed to execute in the restricted application execution environment. The modified or reformatted API call may then be executed in the restricted application execution environment.

This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for executing an application in a restricted application execution environment. As discussed briefly above API calls made by an application are intercepted at runtime. A determination is then made as to whether each intercepted API call is allowed by a restricted application execution environment. Each API call that is blocked by the restricted application execution environment is modified so that the API call is allowable such as for instance modifying the API call to execute against a shadow resource. Remediation code might also be executed at runtime to reformat the API call so that it is allowed to execute in the restricted application execution environment. Additional details regarding these and other features will be provided below.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for executing an application in a restricted application execution environment will be described.

In response to receiving a request from the operating system the security monitor may perform various processes to determine whether the call to the API by the application is allowed. For instance the application may make a call to an API for accessing a secure resource that has been deprecated in a newer version of the operating system . The security monitor may identify the call as being unallowable and cause the operating system to deny the application access to the API . The application may expose a callback API through which the operating system may communicate this to the application .

If the security monitor determines that the call to the API is allowable the security monitor and the operating system will allow the call to the API to be performed. For instance in the example described above where the API is for accessing a secure resource the security monitor will allow the application to access the secure resource . It should be appreciated that a secure resource may be a file a named object or event a user interface message pump a kernel object a registry a network device or another type of computing resource that is managed in a secure fashion.

It should also be appreciated that the security monitor may deny access to an API for reasons other than those described above. For instance the security monitor may determine that the application has not been digitally signed in an appropriate manner utilizes calls to hidden or unauthorized APIs has not been programmed utilizing an authorized development environment or for other reasons. As will be described in greater detail below the embodiments presented herein provide functionality for allowing the application to be executed within the restricted application execution environment shown in in a secure manner.

It should be further appreciated that the restricted application execution environment shown in may be provided by a standard desktop or laptop computer system a server computer a tablet computing device a wireless telephone or virtually any other type of computing device. It should also be appreciated that the restricted application execution environment shown in is merely illustrative and that the embodiments presented herein may be utilized with other types of environments that restrict the execution of application programs .

In the learning mode of operation shown in the application program is executed. A reference monitor intercepts API calls made by the application . The reference monitor is configured to intercept the API calls and and in response thereto to determine whether the API calls are allowed to execute within the restricted application environment .

According to one implementation the reference monitor determines whether the API calls are allowed to execute by consulting the security rules database . In one embodiment the security rules database includes data indicating whether the API calls are allowed to be executed within the restricted application execution environment . For instance the security rules database may include a list of secure resources within the restricted application execution environment . If the reference monitor determines that the application has made an API call to a secure resource the API call may be deemed to be unallowable by the restricted application execution environment .

If the reference monitor identifies an API call that will be blocked by the restricted application execution environment the reference monitor sends data regarding the API call to the reporting engine . In response to receiving data from the reference monitor the reporting engine is configured to determine if the API call is remediatable. That is the reporting engine is configured in one embodiment to determine if the API call may be modified for execution within the restricted application execution environment .

If the reporting engine determines that the API call is not remediatable the reporting engine may provide an indication to a developer or author of the application . In this manner the author of the application may take steps to modify the application so that the API call is allowable within the restricted application execution environment .

If the reporting engine determines that the API call is remediatable the reporting engine stores data identifying the API call in the runtime remediation database . The reporting engine may also store additional state information regarding the API call such as data identifying the caller of the API a call stack data indicating how the API was called call parameters and other data. As will be described in greater detail below this information may be utilized at runtime of the application to enable the API call to be executed.

According to one implementation the reporting engine also includes a reporting UI . The reporting UI provides functionality for allowing a developer of the application to access the contents of the runtime remediation database . The reporting UI may also provide a UI to a developer of the application for indicating that an API call is not remediatable. This UI might provide details regarding the API call such as the state information described above. The reporting UI may also provide other types of user interfaces for providing other types of information to an author of the application .

The routine begins at operation where the reference monitor intercepts the API call . In response thereto the reference monitor consults the security rules database to determine if the intercepted call is an allowable call. If the API call is allowable the routine proceeds to operation described above where another API call may be intercepted by the reference monitor . If the API call is not allowable the routine proceeds from operation to operation .

At operation the reference monitor sends data regarding the API call to the reporting engine . As discussed above the reporting engine stores data in the runtime remediation database describing the API call . At operation the reporting UI is executed in order to enable access to the contents of the runtime remediation database to an author of the application . From operation the routine proceeds to operation described above.

It should be appreciated that the learning mode of operation illustrated in and described above utilizes a security rules database in order to determine whether API calls made by the application are allowable within a restricted application execution environment . It should be appreciated however that other types of static analyses might be performed on the application in order to determine whether the API calls made by the application are allowable within the environment .

As discussed above the runtime remediation database contains data in one embodiment identifying those API calls that are remediatable. If an API call is not identified within the runtime remediation database the reference monitor may conclude that the API call is allowable without modification and allow the API call to proceed. If the reference monitor determines that the API call is blocked by the restricted application execution environment the reference monitor is configured in one embodiment to modify the API call so that the API call can be executed within the restricted application execution environment.

In one embodiment the reference monitor virtualizes the API call in order to allow the API call to be executed within the environment . For instance when the API call is a request to access a secure resource the reference monitor may create shadow resource . The shadow resource is a version of the secure resource that is accessible to the API call within the environment . Once the shadow resource has been created the reference monitor may modify the API call so that it is executed against the shadow resource . In this manner an API call such as to an API may be modified to execute within the restricted application environment .

According to another implementation remediation code may be executed to reformat the API call or perform other functions so that the API call is permitted to execute within the restricted application execution environment . For example the API call may be to an API that requires that a secure network connection be utilized. If the call is formatted for use with an insecure network connection the remediation code may reformat the call so that it utilizes a secure network connection. The remediation code may then cause the reformatted API call to the API to be executed within the environment . It should be appreciated that the reference monitor may perform other types of functionality for modifying reformatting or otherwise changing the API call so that the API call is allowable within the restricted application execution environment .

At operation the reference monitor determines whether the API call is identified in the runtime remediation database . If not the routine proceeds from operation to operation where the reference monitor allows the API call to proceed normally. For instance if the API call is to an API exposed by the operating system the reference monitor may allow API call to the API to be performed.

If at operation the reference monitor determines that the call is identified in the runtime remediation database the routine proceeds from operation to either operation or operation . Operations are for virtualizing a secure resource identified by the API call . Operations are for executing remediation code for modifying the API call so that it is allowable. Each of these operations are described in greater detail below. It should be appreciated that the operations for virtualizing the secure resource and for executing the remediation code may be performed alternately. In another embodiment operations for virtualizing the secure resource and for executing the remediation code may be performing in conjunction with one another. As also discussed above other types of operations may be performed in order to allow the API call to be modified so that it can be performed within the environment .

In order to virtualize the secure resource a shadow resource is created at operation . As discussed briefly above the shadow resource is a copy of the secure resource that is accessible by the API call within the environment . Once the shadow resource has been created at operation the routine proceeds to where the reference monitor causes the API call to be redirected to the shadow resource . The API call is then executed against the shadow resource at operation . From operation the routine proceeds to operation described above where additional API calls may be intercepted and processed in the manner described above.

In order to execute the remediation code the routine proceeds from operation to operation where the reference monitor causes the remediation code to be executed. As discussed above the remediation code reformats the API call so that it is allowed to execute within the environment . Once the API call has been reformatted the routine proceeds to operation where the remediation code causes the reformatted API call to be executed against the secure resource . From operation the routine proceeds to operation where additional API calls are intercepted and processed in the manner described above.

It should be appreciated that according to other implementations aspects of the technologies described herein may be provided as a service. For instance in one implementation a vendor may provide the runtime remediation database and the security rules database . The vendor might also process requests to execute an application in the learning mode described above. In response thereto the vendor might provide a security rules database customized for the application. In this manner a customer of the service may be freed from having to perform the learning mode operations.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable storage media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable storage media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other non transitory medium which can be used to store the desired information and which can be accessed by the computer .

It should be appreciated that the computer readable media disclosed herein also encompasses communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media. Computer readable storage media does not encompass communication media.

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the reference monitor the security monitor the reporting engine and or the other software components described above. The mass storage device and RAM may also store other program modules and data such as the security rules database and the runtime remediation database .

In general software applications or modules may when loaded into the CPU and executed transform the CPU and the overall computer from a general purpose computing system into a special purpose computing system customized to perform the functionality presented herein. The CPU may be constructed from any number of transistors or other discrete circuit elements which may individually or collectively assume any number of states. More specifically the CPU may operate as one or more finite state machines in response to executable instructions contained within the software or modules. These computer executable instructions may transform the CPU by specifying how the CPU transitions between states thereby physically transforming the transistors or other discrete hardware elements constituting the CPU .

Encoding the software or modules onto a mass storage device may also transform the physical structure of the mass storage device or associated computer readable storage media. The specific transformation of physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the computer readable storage media whether the computer readable storage media are characterized as primary or secondary storage and the like. For example if the computer readable storage media is implemented as semiconductor based memory the software or modules may transform the physical state of the semiconductor memory when the software is encoded therein. For example the software may transform the states of transistors capacitors or other discrete circuit elements constituting the semiconductor memory.

As another example the computer readable storage media may be implemented using magnetic or optical technology. In such implementations the software or modules may transform the physical state of magnetic or optical media when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations may also include altering the physical features or characteristics of particular locations within given optical media to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this discussion.

Based on the foregoing it should be appreciated that technologies for executing an application in a restricted application execution environment have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

