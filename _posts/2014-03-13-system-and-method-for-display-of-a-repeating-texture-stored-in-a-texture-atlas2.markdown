---

title: System and method for display of a repeating texture stored in a texture atlas
abstract: In one embodiment, a method for generating textured graphics includes identifying border colors of pixels around two texture images and generating arrangements of border texels from the border colors that are positioned next to the two images in a texture atlas. The method includes generating mip-maps of the texture atlas with texels in the jump level assigned with the border color of the corresponding textures in the full-resolution texture atlas instead of the averaged color of the textures that would be assigned using a traditional mip-map process. The method includes storing the texture atlas including the two texture images and the border texels in a memory for use in generating repeated textures on an object in a virtual environment using at least one of the texture images with a mip-map without seam artifacts between the repeated textures.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589386&OS=09589386&RS=09589386
owner: Robert Bosch GmbH
number: 09589386
owner_city: Stuttgart
owner_country: DE
publication_date: 20140313
---
This application claims priority to U.S. Provisional No. 61 791 282 which is entitled System And Method For Display Of A Repeating Texture Stored In A Texture Atlas and was filed on Mar. 15 2013 the entire contents of which are hereby incorporated by reference herein.

This disclosure relates generally to the field of computer graphics and more specifically to systems and methods for generating repeated texture patterns in three dimensional computer graphics.

Many modern software applications display three dimensional representations of objects and scenes as part of a user interface. Three dimensional 3D graphics are used in a wide range of applications including games simulations virtual reality applications geospatial information applications and applications for mapping and navigation. In many applications 3D graphics are more useful than two dimensional 2D graphics at depicting real world environments and locations because the normal interaction between humans and the real world occurs in three dimensions.

In one form of 3D graphics different objects in a scene are formed from a large number of polygons. The polygons form shapes and structures in a 3D scene. Since most computing devices only display graphics with a two dimensional display the 3D graphics are converted into a rasterized array of two dimensional pixels for display. The 2D display depicts portions of the three dimensional scene in a similar manner to how a camera takes a two dimensional photograph of 3D scenes in the real world. The portal through which the 2D display depicts a 3D virtual environment is referred to as a view frustum and objects in the virtual environment appear to be at different distances from the view frustum. Many 3D graphics systems and application programming interfaces APIs including the Open Graphics Library OpenGL and the Direct 3D APIs provide common structures and interfaces to specialized graphics hardware for generation of 3D images in an efficient manner. The 3D software interacts with general purpose and specialized digital computing hardware that generates the 3D graphics in an efficient manner. In particular graphical processing units GPUs are hardware components that are configured to generate polygons and other graphical effects that form a 3D scene. Modern computing devices typically execute software with a combination of instructions for a central processing unit CPU and the GPU to generate the 3D scene and enable interaction with the 3D scene in some software applications. In some hardware embodiments the functionality of the CPU and GPU are merged together physically and optionally logically into a single a system on a chip SoC device.

In modern 3D graphics the final display includes additional graphical details that go beyond a simple rendering of polygons to provide additional detail and realism. For example rendered polygons typically receive one or more textures that simulate the appearance of materials in the real world such as wood stone metal cloth and many other materials. In many embodiments a texture is a two dimensional drawing or photograph of a material that is applied to surfaces of 3D objects to give the three dimensional objects a more realistic appearance. In some instances a texture is applied to the surfaces of a 3D object in a repeated pattern. For example a brick texture is repeated multiple times across a surface of a polygon to give the appearance of a brick wall with a repeated pattern of bricks.

Many software applications that model 3D objects us a large number of textures. Due to memory access patterns that are commonly used with 3D APIs such as OpenGL many 3D applications store multiple textures in one or more texture atlases. Each texture atlas is a larger 2D image that includes multiple individual textures arranged within the larger 2D image. The 3D software application stores coordinates for the individual textures within the texture atlas and can retrieve only selected portions of the texture from the texture atlas for mapping to 3D objects. The texture atlas provides a performance benefit because the atlas stores multiple textures in a single contiguous block of memory. Loading a single texture atlas into memory and applying textures from the atlas to one or more 3D objects is more efficient than loading individual textures into separate memory addresses for each of the objects.

As describe above existing 3D software and hardware enables repetition of a texture across the surfaces of a 3D object and enables the use of texture atlases for efficient access to multiple textures. Existing 3D systems however do not provide efficient mechanisms to enable repeated textures to be formed across objects when the textures are stored in a larger texture atlas. For example the OpenGL API provides texture wrapping functionality with a parameter GL REPEAT that specifies repetition of a texture over the surface of a 3D object. The OpenGL texture wrapping functionality is not compatible with texture atlases however because the texture wrapping functionality wraps the entire texture atlas over the surface of the 3D object instead of merely wrapping a selected texture from the texture atlas. More complex methods for extracting textures from a texture atlas using programmable shaders exist but the existing solutions suffer from artifacts when a mip map process is used to render textures over a range of sizes and distances from the foreground of a 3D scene. Mip mapping is a commonly used process in 3D graphics and the existing methods for rendering repeated textures that are retrieved from texture atlases produce visible artifacts that appear as seams between copies of the repeated texture graphics. Consequently improved methods of mapping repeated textures to 3D objects that enable use of texture atlases with mip mapped textures would be beneficial.

In one embodiment method for encoding decoding of textures in a texture atlas enables fast repetitive texture mapping with high image quality for display of mip mapped textures. The texture atlas contains both repetitive texture tiles and non repetitive texture tiles. Both non repetitive textures and repetitive textures can be stored in the texture atlas. The atlas contains textures corresponding to a plurality of 3D objects in a scene which enables a 3D graphics processor render all of the objects including applied textures from the texture atlas using one drawing call. Therefore compared with the standard solutions that have to use many drawing calls to render the 3D objects with repetitive patterns the method uses a single drawing call to fulfill the task which speeds up the rendering performance of the graphics processor. The improved rendering performance is useful in a wide range of applications including embedded and mobile computing devices and software applications. For example a mobile computing device generates 3D graphics for a navigation system that renders buildings in a city and other map features with highly detailed graphics models.

Because many buildings and other 3D objects contain both complex non repetitive and synthetic repetitive textures the texture atlas enables a high compression rate and reduced the storage cost to store these textures and to render the graphics in an efficient manner. For example if windows of a building are similar in terms of color and shape the texture atlas includes an image of one window and the system renders all the windows of the building in a repetitive manner. In one embodiment the repetitive texture mapping process is implemented using modified texture mapping procedures with the OpenGL ES 2.0 shading language.

In one embodiment a method for using a processor to apply repeated textures to a surface of an object in 3D virtual environment using a texture atlas has been developed. The method includes identifying a first border of pixels having a first color around a first image including a first plurality of pixels formed in a first rectangle identifying a second border of pixels having a second color around a second image including a second plurality of pixels formed in a second rectangle generating with the processor a third plurality of texels having the first color generating with the processor a fourth plurality of texels having the second color generating with the processor a texture atlas including a two dimensional arrangement of texels including the first image with the third plurality of texels positioned on at least one side of the first image and the second image with the fourth plurality of texels positioned on at least one side of the second image and storing the texture atlas in a memory to enable generation of repeated textures using mip mapping on an object in a virtual environment using at least one of the first image and the second image as a repeated texture without seam artifacts between repeated textures.

In another embodiment a computing system that applies repeated textures to a surface of an object in 3D virtual environment using a texture atlas has been developed. The system includes a memory and a processor operatively connected to the memory. The processor is configured execute stored program instructions in the memory to identify a first border of pixels having a first color around a first image stored in the memory the first image including a first plurality of pixels formed in a first rectangle identify a second border of pixels having a second color around a second image stored in the memory the second image including a second plurality of pixels formed in a second rectangle generate a third plurality of texels having the first color generate a fourth plurality of texels having the second color generate a texture atlas including a two dimensional arrangement of texels including the first image with the third plurality of texels positioned on at least one side of the first image and the second image with the fourth plurality of texels positioned on at least one side of the second image and store the texture atlas in the memory for generation of repeated textures using mip mapping on an object in a virtual environment using at least one of the first image and the second image as the repeated texture without seam artifacts between the repeated textures.

For the purposes of promoting an understanding of the principles of the embodiments disclosed herein reference is now be made to the drawings and descriptions in the following written specification. No limitation to the scope of the subject matter is intended by the references. The present disclosure also includes any alterations and modifications to the illustrated embodiments and includes further applications of the principles of the disclosed embodiments as would normally occur to one skilled in the art to which this disclosure pertains.

In the computing system the processor includes one or more integrated circuits that implement the functionality of a central processing unit CPU and graphics processing unit GPU . In some embodiments the processor is a system on a chip SoC that integrates the functionality of the CPU and GPU and optionally other components including the memory into a single integrated device. In one embodiment the CPU is a commercially available central processing device that implements an instruction set such as one of the x86 ARM Power or MIPS instruction set families. The GPU includes hardware and software for display of both 2D and 3D graphics. In one embodiment processor executes software drivers and includes hardware functionality in the GPU to generate 3D graphics using the OpenGL OpenGL ES or Direct3D graphics application programming interfaces APIs . For example the GPU includes one or more hardware execution units that implement geometry shaders fragment shaders and vertex shaders for the processing and display of 2D and 3D graphics. During operation the CPU and GPU in the processor execute stored programmed instructions that are retrieved from the memory . In one embodiment the stored programmed instructions include operating system software and one or more software application programs that generate 3D graphics including mapping and navigation applications virtual reality applications game applications simulation applications and any other software that is configured to generate 3D graphics. The processor executes the mapping and navigation program and generates 2D and 3D graphical output corresponding to maps and map features through the display device . The processor is configured with software and hardware functionality by storing programmed instructions in one or memories operatively connected to the processor and by operatively connecting the hardware functionality to the processor and or other electronic electromechanical or mechanical components to provide data from sensors or data sources to enable the processor to implement the processes and system embodiments discussed below.

The memory includes both non volatile memory and volatile memory. The non volatile memory includes solid state memories such as NAND flash memory magnetic and optical storage media or any other suitable data storage device that retains data when the computing system is deactivated or loses electrical power. The volatile memory includes static and dynamic random access memory RAM that stores software and data including graphics data and map feature data during operation of the computing system . In addition to the programmed instructions the memory includes virtual environment and object polygon data texture data and stored programmed instructions . The virtual environment and object polygon data includes a model of a virtual environment with ground terrain information coordinates and orientation data for multiple 3D objects that are located in the virtual environment and additional environmental data including virtual lighting sources that illuminate the virtual environment. The object data include vertices with three dimensional coordinates that define a series of interconnected polygons such as triangles that form the shape of structures in the 3D virtual environment.

In the memory the texture data include a plurality of textures which are typically 2D images. In the texture data a texture atlas includes a single image that incorporates multiple smaller texture images. As described in more detail below the texture atlas data include protective border color tiles around the borders of the individual textures in the atlas. The border tiles enable the processor to apply repeated patterns of filtered and mip mapped textures that are extracted from the texture atlas data in an efficient manner while avoiding visible seams and other image artifacts.

In the computing system the display is either an integrated display device such as an LCD or other display device which is integrated with a housing of the computing system or the display is an external display device that is operatively connected to the computing system through a wired or wireless interface to receive output signals from the processor to generate a display of the 3D virtual environment. In an embodiment where the computing system is an in vehicle embedded computing device the display is an LCD or other flat panel display that is located in the console of a vehicle or the display is a head up display HUD or other projection display that displays the 3D virtual environment on a windshield or other display surface in the vehicle.

During process the processor receives multiple textures which are each formed from two dimensional images in one embodiment. The processor groups together individual textures that have the same or similar border colors block . For example depicts a set of textures that are arranged into a completed texture map using process . Each of the textures in the texture map is formed from a rectangular arrangement of texels. As used herein the term texel refers to an element of a texture atlas and the term pixel refers to an element of an image. The texture atlas comprises multiple images whose pixels are referred to as texels when the images are included within the texture atlas. The texture atlas also includes protective border tiles including texels that form borders around the images in the texture atlas. As described below a texel from a texture can be applied to change the colors of one or more pixels on the surface of an object that is rendered in a virtual environment. The individual textures are formed with a single border color in each of the texels at the boundary of the texture although different textures use different border colors. In the set of textures the textures and have same border colors. Another group of textures and also share same border colors. In some instances an individual texture does not have a border color that matches or is similar to other border colors and the texture remains ungrouped from other textures. For example the texture in is not grouped with other textures.

During process the grouping of textures with similar colors enables arrangement of the textures together with protective rectangular border tiles around the borders of the texture group. Process continues as the processor generates protective border tiles that are arranged around the grouped textures block . Each border tile is a predetermined set of texels typically in a rectangular configuration that shares the border color of the grouped textures. As described in more detail below the protective border tiles reduce image artifacts that are generated during filtering processes where a filtering kernel operates on a region of texels instead of only a single texel and during mip mapping of the full texture atlas when multiple textures in the texture atlas would produce inaccurate colors at various mip map levels.

In some embodiments each tile of the border color texels has the same length and width dimensions as the corresponding texture that is placed next to the border tile. For example in the border tiles A G that are positioned on different sides of the texture each have the same length and width as the texture graphic . The textures and each have the same border color and the processor positions the textures and next to each other so that some of the border tiles such as the tiles A B F and G act as border tiles for both of the textures and . When arranged together the grouped textures require fewer border tiles than are required for individual textures. For example in the region in the texture atlas includes the textures that are arranged adjacent to one another with border tiles surrounding the group of textures. Similarly the textures and are grouped together with protective border tiles in the region .

While the texture atlas includes multiple textures and border tiles that are configured to enable the process to use of the textures as repeated patterns on objects in a 3D virtual environment the texture atlas is also suitable for use in the application of non repeated textures. Thus during operation the processor optionally binds a single texture atlas using the border tiles as depicted in that is used for both the application of repeated textures and for non repeated textures on the surface of objects in a 3D virtual environment.

Referring again to process continues as the processor forms the texture atlas with a preference in favor of placing textures at the exterior sides of the texture atlas instead of border tiles in situations where the placement is feasible block . The placement of textures on the exterior sides of the texture atlas reduces the number of border tiles that are required which reduces the total size of the texture atlas. In the textures and are placed on the exterior sides of the texture atlas and do not require the placement of additional border tiles on the sides of the textures that form the exterior sides of the texture atlas .

While the processing described above with reference to blocks is described in conjunction with the computing system for illustrative purposes in another embodiment an external computing device generates the texture atlas data using the process . The data corresponding to the texture atlas are then stored in the texture data of the computing device and the computing device uses the texture atlas to apply repeated textures to objects in the virtual environment and object polygon data in an efficient manner.

Process continues with generation of mip maps with corresponding mip map jump level that match the border colors of the textures in the texture atlas block . During operation of the computing system the processor performs a mip mapping process using the texture atlas. Mip mapping is a process that is known to the art for depicting a single texture at varying levels of detail. For example a single texture when displayed with a large size in a virtual environment depicts a greater level of detail with a large number of texels forming fine details in the texture while the same texture viewed at a great distance in a virtual environment may be represented by only a single texel representing the entire texture. Mip mapping in conjunction with filtering processes enables display of a single texture with varying levels of detail. During a mip map process the processor generates smaller versions of the texture atlas data with a common mip map process generating smaller versions that shrink by a factor of two in each linear dimension from the next larger sized texture so that each mip map texture also referred to as a mip map level with the resolution of the next larger mip map.

The processor applies filters to the texels from one or more of the mip map level graphics to generate the texture texels for an object in a virtual environment. Since the selected level of detail for an object is often between the levels of detail for the textures in two different mip map levels the processor uses various filtering techniques that are known to the art to generate the texture texels based on corresponding texels from two or more mip map levels. The individual images that are produced during the mip map process are often referred to as being in different mip map levels . The lowest mip map level refers to the original texture image at full resolution while one or more additional levels are formed from images with progressively lower resolution levels. The highest mip map level corresponds to the lowest resolution image that is generated during the mip mapping process. In a texture atlas that can be divided into a set of tiles some mip map embodiments generate the highest mip map level image including a single texel representing each tile in the full resolution lowest mip map level. The highest mip map level is also referred to as a jump level. 

During generation of a repeated texture that is extracted from the larger texture atlas a potential image artifact is visible as a seam artifact seen in the border of repeating textures. The artifact is caused by the mip map level selection algorithm used by the processor . The mip map level of each textured pixel is determined with reference to the derivative of texture coordinates u v e.g. du and dv . The u and v variables correspond to the x and y axes respectively on a two dimensional plane but are commonly used when referring to a texture instead of a polygon in a 3D virtual environment. The derivative of the texture coordinates is much larger at the boundary either horizontally or vertically of any texture patch that is repeated during the texture mapping process in comparison to the derivative of non boundary texture coordinates in the u v plane. As a result the texels at higher mip map level will be selected to fill in pixels that are mapped to the border of repetitive texture tile. The sudden jump of the mip map level selection produces the seam artifact. As depicted in the texture is applied in a repeating manner to the structure with a seam artifact between repeated copies of the texture . In the example of the structure the jump level texel is a different color than the color of the border texels . The artifact between each border is formed from repeated series of nine jump level texels with jump level texel color that do not match the border of the texture . Such a level is referred to as a jump level. The jump level is the level where each texture tile has been shrunken to one texel in the mip maps. The color of this texel is usually the average color of the original texture tile which introduces the seam artifact as the color is different from the border color of the original texture tile.

The process generates the texture atlas data to avoid the problems with jump level. Unlike in existing texture atlases the jump level includes jump texels with the same color as the border colors for the textures and border tiles that are placed in the texture atlas. For example as depicted in the highest mip map level includes individual texels that match the border colors in the full size texture atlas . Thus the jump level color matches the border color for each of the textures in the texture atlas. As depicted in when the texture is included in the texture atlas data with border tiles the jump level texel is formed with the same color as the border texels . When the jump level texel is used during the repeated texture mapping process the processor maps the repeated textures to the structure which is the same 3D polygon model used for the structure but is rendered without the seam artifact .

During process the processor also performs the mip mapping process with a selected texture filtering technique that is suitable for use with the texture atlas data . Mip map texture filtering refers to the techniques that are used to determine the texture mapped pixel color in an output image from the interpolation between texels in one selected mip map level or in two neighbouring mip map levels. In the process the GL NEAREST MIPMAP NEAREST and GL LINEAR MIPMAP NEAREST are suitable filtering techniques for use as for GL TEXTURE MIN FILTER in the OpenGL ES API. The GL NEAREST MIPMAP NEAREST filter specifies the filtering of nearest interpolation within a mip map level and nearest interpolation between mip map levels which uses the color of the closest texel in the closest mip map level as the border pixel color from the image. The GL LINEAR MIPMAP NEAREST filter specifies the filtering of linear interpolation within the mip map level and nearest interpolation between mip map levels which uses the value from the interpolation between texels in the closest mip map level as the border pixel color from the image.

The GL TEXTURE MIN FILTER refers to a class of minimization filters that the processor uses to select and filter the texture data from the plurality of images in the different mip map levels to generate textures for different objects that are positioned at different distances from a view frustum in a virtual environment. Some filtering techniques such as GL NEAREST MIPMAP LINEAR and GL LINEAR MIPMAP LINEAR are susceptible to producing the seam artifacts that are described above due to the color bleeding artifact when the texels at the jump level and those neighbouring mip map levels are averaged in the filtering process. Thus during process the processor uses the GL NEAREST MIPMAP NEAREST and GL LINEAR MIPMAP NEAREST filters or other filters that do not average or combine colors from multiple tiles at different mip map levels to avoid the generation of seams or other artifacts during texturing.

Process continues as the processor uses one or more shader programs such as a combination of vertex and fragment shader programs to select individual textures from the larger texture atlas data and apply the individual textures to objects in the three dimensional virtual environment block . is an example code listing of a vertex shader program that generates per vertex texture coordinates in the texture atlas. is an example code listing of a fragment shader that uses the coordinates from the vertex shader to apply a portion of the texture atlas to the surface of an object in a repeated manner. The fragment shader of is configured for a set of sixteen tiles in the texture atlas that are arranged in a 4 4 configuration but the scaling vector variable s can be adjusted for different numbers and arrangements of tiles in the texture atlas. The vertex shader of and the fragment shader of are used in conjunction with mip mapping to enable generation of output graphics images that depict the texture from a variety of detail levels.

As described above the processor is only required to bind the texture atlas data once while reusing the individual textures from the texture atlas data to apply different textures to a large number of objects in the virtual environment in an efficient manner. The textures from the texture atlas are applied to the objects in the scene in a batch processing mode that is known to the art for performing efficient graphical operations in the OpenGL API. Some or all of the textures are applied in a repeating manner. For example in a mapping and navigation program many buildings are depicted with repeating patterns of brick stone or windows. The structure model is an example of an object where the processor performs a repetitive texture operation using the single texture on selected surfaces of the structure . After application of the textures to the object model polygons and other processing including lighting and application of other visual effects the processor displays the objects with the applied textures in the virtual environment through the display device .

The processor performs a basic texture coordinate transformation in instances when a texture atlas only consists of non repetitive texture. illustrates a texture atlas with 4 different texture tiles. In many cases the texture coordinates usually between 0.0 and 1.0 of vertices in a model are defined with respect to a single texture which has to be put into a texture atlas as a single texture tile. In order to access the same texels using the original texture coordinates of a vertex when a texture atlas is used the processor identifies the correct texture coordinates for texture atlas based on the original texture coordinates. For example for a vertex having texture coordinates that reference the bottom left of Tex tile the processor alters the texture coordinates of this vertex from 0.0 0.0 to 0.5 0.5 when a texture atlas is used instead of an individual texture. In general for texture atlas containing only non repetitive texture tiles the processor applies a linear transformation to the original texture coordinates to compute the corresponding texture coordinates in the texture atlas according to Equation 1 f x x s t. In Equation 1 x represents the original texture coordinates for a vertex when texture atlas is not used s represents the scale which could be calculated by the ratio of the size of texture tile in the atlas to the original size of the tile as a standalone texture and t is the translation which is used to locate the starting point of each texture tile. The value of t is determined by the texture tile arrangement scheme in the atlas. Once a texture atlas is created from several non repetitive textures the value t for each texture tile will is fixed. In the computing device the data corresponding to locations of textures in the texture atlas are stored in the texture data to identify the individual textures in the larger texture atlas data .

When a single texture is used for repetitive texture mapping the texture coordinates of vertices are usually in the range of 0 n and n is greater than 1. This value also indicates how many times the texture will be repeated. When a texture atlas is used the processor adds the repetitive texture to the texture atlas data as a texture tile and transforms the original texture coordinates to the correct ones that can be used to sample the same texel. Given the original texture coordinates x as input the processor discards the integer part of x and relies only on the fractional part for the texture sampling. This operation is similar to the REPEAT wrap mode that is employed in the texture mapping operations of OpenGL ES. For texture atlas the GPU in the processor performs the transformation in a fragment shader in OpenGL ES according to Equation 2 f x fract x s t. In Equation 2 the fract function returns the fractional portion of each of the coordinates x. Equation 2 applies to both non repetitive texture tiles and repetitive texture tiles.

It will be appreciated that variants of the above disclosed and other features and functions or alternatives thereof may be desirably combined into many other different systems applications or methods. Various presently unforeseen or unanticipated alternatives modifications variations or improvements may be subsequently made by those skilled in the art that are also intended to be encompassed by the following claims.

