---

title: Bi-directional flow stickiness in a network environment
abstract: An example method for bi-directional flow stickiness in a network environment is provided and includes receiving a packet of a flow from a source address in a network, and destined to a destination address outside the network, looking up a flow table for an entry corresponding to the flow, and caching a forward flow entry and a reverse flow entry in the flow table if the look up results in a miss, the forward flow entry indicating a routing lookup, and the reverse flow entry indicating a previous hop from which the packet was received to maintain a bi-directional flow stickiness. Some embodiments also include receiving another packet from the destination address outside the network destined to the source address in the network, and forwarding it to the previous hop listed in the reverse flow entry.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09455908&OS=09455908&RS=09455908
owner: CISCO TECHNOLOGY, INC.
number: 09455908
owner_city: San Jose
owner_country: US
publication_date: 20140707
---
This disclosure relates in general to the field of communications and more particularly to bi directional flow stickiness in a network environment.

Data centers are increasingly used by enterprises for effective collaboration and interaction and to store data and resources. A typical data center network contains myriad network elements including hosts load balancers routers switches etc. The network connecting the network elements provides secure user access to data center services and an infrastructure for deployment interconnection and aggregation of shared resource as required including applications hosts appliances and storage. Improving operational efficiency and optimizing utilization of resources in data centers are some of the challenges facing data center managers. Data center managers want a resilient infrastructure that consistently supports diverse applications and services and protects the applications and services against disruptions. A properly planned and operating data center network provides application and data integrity and optimizes application availability and performance.

An example method for bi directional flow stickiness in a network environment is provided and includes receiving a packet of a flow from a source address in a network and destined to a destination address outside the network looking up a flow table for an entry corresponding to the flow and caching a forward flow entry and a reverse flow entry in the flow table if the look up results in a miss the forward flow entry indicating a next action to be performed on the packet and the reverse flow entry indicating a previous hop from which the packet was received to maintain a bi directional flow stickiness. Some embodiments also include receiving another packet from the destination address outside the network destined to the source address in the network and forwarding it to the previous hop listed in the reverse flow entry.

As used herein the term flow can be inclusive of a stream of packets. Substantially all packets belonging to a specific flow may have a set of common properties. Each property can be a result of applying a function to one or more packet header fields e.g. destination IP address transport header fields e.g. destination port number or application header fields e.g. real time protocol RTP header fields one or more characteristics of the packet e.g. number of multiprotocol label switching MPLS labels or one or more fields derived from packet treatment e.g. next hop IP address output interface . In many embodiments each flow may be identified by a unique 5 tuple comprising for example protocol source Internet Protocol IP address source port destination IP address and destination port. A packet may be characterized as belonging to a particular flow if it satisfies substantially all properties of that flow. For example packets with the same 5 tuple may belong to the same flow.

Turning to is a simplified block diagram illustrating a communication system for bi directional flow stickiness in a network environment in accordance with one example embodiment. illustrates a network comprising a plurality of service nodes e.g. that serve flows within network . For example a flow from to a source node may pass through service nodes as it traverses network each service node may perform one or more services on the flow. It may be noted that although only three service nodes and one source node are shown in the figure any number of service nodes and source nodes may be instantiated within network .

Assume merely for the sake of example and not as a limitation that a packet sent from source node is destined to a node outside network and passes through service nodes sequentially exiting out of network after being serviced at service node . According to a virtual topology the service chain may be illustrated as contiguous nodes in a sequential chain according to a physical topology each service node may comprise virtual machines instantiated in separate or the same server for example servers respectively. Source node may also be instantiated as a virtual machine in another or the same server . Note that network may include any number of servers within the broad scope of the embodiments. All packets flowing into and out of network may be routed accordingly by a gateway .

According to various embodiments each server may include or be connected to a forwarder . For example forwarder may be implemented on separate fabric interconnects connected to each server rack. Although forwarder can comprise a single entity in its logical manifestation in its physical manifestation it may comprise multiple instances distributed across the multiple servers e.g. in network . Forwarder may comprise a flow table and a forwarding table for forwarding packets traversing network . In a specific embodiment packets serviced by a last service node e.g. in a service chain may be processed by forwarder before forwarding on to the next node. Various embodiments of communication system may ensure bi directional flow stickiness when load balancing to an elastically scaled set of virtual service functions e.g. service nodes in spite of network address translation NAT .

In a general sense the term service node comprises an instance of a service function e.g. NAT firewall Deep Packet Inspection DPI Lawful Intercept LI etc. executing on a physical or virtual network element. In some embodiments each service node can represent separate instances of the same service function in other embodiments each service node can represent a separate instance of different service functions in yet other embodiments some service nodes e.g. and may represent two instances of the same service function and other service nodes e.g. may represent an instance of a different service function.

As used herein the term network element is meant to encompass computers network appliances servers routers switches gateways bridges load balancers intrusion detection appliances processors modules or any other suitable device component element or object operable to exchange information in a network environment. Moreover the network elements may include any suitable hardware software components modules interfaces or objects that facilitate the operations thereof. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective exchange of data or information. The term service chain refers to one or more service functions chained e.g. connected attached coupled etc. in a specific order to provide a composite service to packets traversing the network.

For purposes of illustrating the techniques of communication system it is important to understand the communications that may be traversing the system shown in . The following foundational information may be viewed as a basis from which the present disclosure may be properly explained. Such information is offered earnestly for purposes of explanation only and accordingly should not be construed in any way to limit the broad scope of the present disclosure and its potential applications.

Network services are widely deployed and essential in many networks. Each network service can include multiple individual service functions such as security wide area network WAN acceleration and server load balancing. Service functions that form part of an overall composite service may be physically located at different points in the network infrastructure such as the wide area network data center enterprise campus etc. For some network services traffic is forwarded through a sequence of service nodes providing the service functions. Forwarding traffic along a sequence of service nodes is typically based on service characteristics. For example certain traffic may be directed to a domain border gateway for monitoring and charging certain other traffic may be steered through a load balancer to distribute performance pressure before forwarding to data center services mobile network operators may split mobile broadband traffic and steer them along different offloading paths firewalls may be used to filter traffic for Intrusion Detection System IDS Intrusion Protection System IPS security gateways may be used to encrypt decrypt traffic certain traffic that traverses different network technology segments such as IPv4 IPv6 may be directed to a carrier grade network address translator CGNAT etc.

An emerging approach in various networks such as service provider networks enterprise networks and campus networks is to virtualize network services and host them in a data center. A network infrastructure as a service NIAAS establishes appropriate network connectivity between the different service nodes and the network edge data center interconnect DCI . Unlike physical appliance based approaches a virtualized network service provides the opportunity to scale the network services up or down based on dynamic capacity demands of traffic. However elastically scaling network services and service functions can pose a problem with the network infrastructure having to pin a flow in both directions to a given service node.

An additional complexity arises if the service node performs NAT. NAT is a commonly used service function in network services such as Server Load Balancers SLB firewalls etc. NAT serves to conserve the IP addresses maintain traffic affinity and enforce security among other uses. NAT may be used to map each address of one address space to a corresponding address in another space NAT may also be used in conjunction with network masquerading or IP masquerading to hide an entire IP address space usually consisting of hidden network IP addresses behind a single IP address in another usually public address space. NAT service function is typically performed using stateful translation tables to map the hidden addresses into a single IP address and to readdress the outgoing IP packets on exit so they appear to originate from a routing device at the network edge. In the reverse communications path responses are mapped back to the originating IP addresses using rules e.g. state stored in the translation tables.

NAT poses many challenges to the service chaining architecture. For example the network infrastructure cannot relate the service chain to the flow after the NAT transformation because NAT changes the flow tuple including the service characteristics. IN addition address translating service nodes may translate source Internet Protocol IP addresses source NAT destination IP addresses destination NAT and or other properties of the flows only the NAT service node may know the exact mapping of flows in the forward and reverse directions. Further NAT requires flows to be always steered through the service node as the NAT service function is based on the translation specific to the service node. Getting the translation e.g. mapping from the NAT service nodes may not be practical if the service node itself is not under control of the network infrastructure and exposes no standard interface to query any state of the flow tables. Also most networks do not provide such information to be queried using an external application programming interface API in real time.

Communication system is configured to address these issues among others to offer a system and method for bi directional flow stickiness in a network environment. According to various embodiments forwarder may receive a packet of a flow from a source address corresponding to source node in network and destined to a destination address outside network . Forwarder may look up flow table for an entry corresponding to flow and if the lookup results in a miss forwarder may cache a forward flow entry and a reverse flow entry in flow table . The forward flow entry may indicate a routing lookup and the reverse flow entry may indicate a previous hop from which the packet was received to maintain a bi directional flow stickiness. Some embodiments also include forwarder receiving another packet from the destination address outside network destined to the source address corresponding to source node e.g. reverse traffic of flow . Forwarder may forward the packet to the previous hop listed in the reverse flow entry.

In some embodiments the forward flow entry can include an action to look up forwarding table which includes a result of the routing lookup. Accordingly forwarder may look up forwarding table . In various embodiments forwarding table may comprise an action to forward the packet to gateway e.g. for packets going out of network . Each entry in flow table may include at least a source address field a destination address field and a next action field. Thus the forward flow entry for flow may include the source address of source node in the source address field the destination address in the destination address field and an instruction to lookup forwarding table in the next action field. On the other hand the reverse flow entry comprises the destination address in the source address field the source address of source node in the destination address field and an instruction to forward to the previous hop in the next action field.

In some embodiments the previous hop may be a last service node e.g. that performs network address translation NAT on the packet transforming the source address to a translated source address. In such scenarios the forward flow entry and the reverse flow entry may identify packets of the flow based on the translated source address. Note that any number of flows may traverse network the flows being associated with respective forward flow entries and a reverse flow entries in flow table .

In some embodiments network connectivity from source node through service nodes to gateway may be provided by forwarder instantiated in servers . Note that an instance is a specific realization of a software object. In some embodiments when forwarder is instantiated in multiple servers multiple substantially identical instances of forwarder may be realized and execute in each server . In other embodiments when forwarder is instantiated in multiple servers each instance may be separate and distinct from the other instances. Thus each instance of forwarder may include separate flow table whose contents may be different from the content of flow tables in other instances. Each virtual machine in servers may be attached to forwarder as the first hop network switch router. Upon reception of a packet from source node forwarding table rules in forwarder may dictate how to handle the packet e.g. forward to the first service node e.g. in the service chain towards the destination of the packet .

According to some embodiments after first service node processes the packet it sends it to forwarder which then uses forwarding table rules to determine the next service node e.g. in the service chain and so on. In some embodiments one instance of forwarder may encapsulate the packet in a tunnel header and send the packet towards another instance of forwarder that services the next service node in the service chain. Note that when there is more than one service node in each service hop e.g. more than one service node instantiated in servers instances of forwarder sending traffic to a given service node could be more than one and essentially distributed across entire network .

Given that each service in the service chain can be elastically scaled a sticky entry in every instance of forwarder may be created along the path after a flow has been identified through n tuple classification e.g. based on fields such as source IP address destination IP address source port destination port protocol and so on so that subsequent packets of the flow are serviced by the same service node. Forwarder may maintain flow table to create the flow entries.

In various embodiments forwarder may look up the flow table first for every packet to determine if there is a matching flow table entry. If there is a matching flow table entry forwarder may honor the next service node entry that is cached in the matching flow table entry. If there is no matching flow table entry forwarder may revert to its regular lookup e.g. L2 or L3 lookup logic to determine a suitable next service hop. The flow table entry in forwarder may be maintained as long as the flow is alive. The state of the flow e.g. whether it is alive or dead may be heuristically determined based on data plane activity for that flow. For example on expiration of a timeout where no data plane activity is detected the flow table entry can be removed from the flow table. The timeout may be preconfigured on a per flow table entry basis.

However ensuring flow stickiness in one direction alone is not sufficient when the reverse flow has to go through the same service node e.g. because services are state full with respect to connections or a need exists to inspect the flow in the reverse direction to properly process the connection e.g. NAT firewall etc. . If the packets of the reverse flow end up on a different service node that does not hold the flow state the packets can be dropped and bi directional connection would not be established.

In some embodiments a hash algorithm in both forward and reverse directions on forwarder may be created sending traffic to a scaled set of service nodes such that an identical hash value is computed in spite of the fact that the fields of the packet are reversed. If such a commutative hash is employed then as long as the list of service nodes on the distributed forwarder is identically programmed by the control plane for load balancing the forward and reverse flows would end up in the same service appliance. However the hash algorithm may not work if the service node performs address translation S NAT D NAT 6 to 4 translations etc. . In such cases only the service node is aware of the exact mapping of flows in either direction.

According to some embodiments forwarder may maintain a next service hop and a previous service hop in its cached flow table entry on flow entry creation. The previous service hop may be created as the next hop entry for the flow table entry that forwarder creates after swapping the source ip destination ip and source port destination port fields. Because the reverse flow entry has been created during the first few packets in the forward direction but with key fields swapped the reverse flow can match that flow table entry and may be forwarded to the same service node that processed the forward flow entry.

Such an approach can work irrespective of the type of packet processing done by the service node such as NAT . For example forwarder may substantially always be presented with identical key fields in both directions as forwarder is either before or after the packet processing done by the NAT service node. Additionally there is no requirement to have a distributed control plane or packet inspection by the control plane to establish the bi directional flow stickiness.

Turning to the infrastructure of communication system the network topology can include any number of servers hardware accelerators virtual machines switches including distributed virtual switches service nodes routers and other nodes inter connected to form a large and complex network. A node may be any electronic device client server peer service application or other object capable of sending receiving or forwarding information over communications channels in a network. Elements of may be coupled to one another through one or more interfaces employing any suitable connection wired or wireless which provides a viable pathway for electronic communications. Additionally any one or more of these elements may be combined or removed from the architecture based on particular configuration needs.

Communication system may include a configuration capable of TCP IP communications for the electronic transmission or reception of data packets in a network. Communication system may also operate in conjunction with a User Datagram Protocol Internet Protocol UDP IP or any other suitable protocol where appropriate and based on particular needs. In addition gateways routers switches and any other suitable nodes physical or virtual may be used to facilitate electronic communication between various nodes in the network.

Note that the numerical and letter designations assigned to the elements of do not connote any type of hierarchy the designations are arbitrary and have been used for purposes of teaching only. Such designations should not be construed in any way to limit their capabilities functionalities or applications in the potential environments that may benefit from the features of communication system . It should be understood that communication system shown in is simplified for ease of illustration.

The example network environment may be configured over a physical infrastructure that may include one or more networks and further may be configured in any form including but not limited to local area networks LANs wireless local area networks WLANs VLANs metropolitan area networks MANs VPNs Intranet Extranet any other appropriate architecture or system or any combination thereof that facilitates communications in a network.

In some embodiments a communication link may represent any electronic link supporting a LAN environment such as for example cable Ethernet wireless technologies e.g. IEEE 802.11x ATM fiber optics etc. or any suitable combination thereof. In other embodiments communication links may represent a remote connection through any appropriate medium e.g. digital subscriber lines DSL telephone lines T1 lines T3 lines wireless satellite fiber optics cable Ethernet etc. or any combination thereof and or through any additional networks such as a wide area networks e.g. the Internet .

In various embodiments service nodes can comprise physical service appliances e.g. stand alone boxes plugged into network appropriately. In other embodiments service nodes can comprise service cards attached internally within another network element such as a router or switch in network . In yet other embodiments service nodes can comprise virtual applications executing on suitable network elements e.g. servers switches routers etc. in network . In some embodiments service nodes can comprise a combination of the above.

In various embodiments forwarder may comprise one or more applications executing on suitable network elements e.g. fabric interconnects switches servers etc. to perform the operations described herein. In some embodiments forwarder may comprise a distributed application executing in a plurality of network elements. Note that any suitable number of instances of forwarder may be instantiated in network within the broad scope of the embodiments.

Source node may represent any suitable network endpoint. In various embodiments source node may comprise separate applications e.g. server client applications in client server network architecture executing in suitable computing devices e.g. servers . In other embodiments source node may comprise separate virtual machines on the same or different computing devices e.g. server blades in a data center . In some embodiments source node may include server blades configured in one or more chassis. In yet other embodiments source node may represent a mobile device such as a cellular phone laptop tablet or smartphone. In various embodiments gateway may represent a network edge device such as an edge router through which substantially all packets entering and leaving network traverse. Note that any number of servers service nodes source nodes gateways etc. may be activated in network within the broad scope of the embodiments.

Note that servers can include multiple physical servers e.g. rack or blade servers configured with or connected to other appropriate network elements e.g. switches fabric interconnects etc. to enable connectivity in network . For example although not explicitly indicated in the figure each server may include a separate fabric interconnect configured with the appropriate forwarder instance to enable communication with other servers gateway and applications including service nodes executing in the respective servers.

Turning to is a simplified block diagram illustrating example details of an embodiment of communication system . Assume that source node has an IP address of 127.2.3.4 in network and sends a first packet A of flow packet A being destined to a destination node having IP address 10.0.0.1 and outside network . Packet A may be subjected to a service chain comprising service nodes N where N is any integer greater than or equal to 1. Assume merely as an example and not as a limitation that the last service node N performs NAT translating source address 127.2.3.4 to 1.2.3.4. Packet A may be regenerated to B which indicates a source IP address of 1.2.3.4 and a destination address unchanged of 10.0.0.1.

Packet B may be received at forwarder which can comprise a lookup module a cache module a memory element and a processor in addition to flow table and forwarding table . Flow table may include a source address field a destination address field and an action field . When packet B is received at forwarder lookup module may perform a lookup of flow table . As packet B is a first one of flow seen by forwarder the lookup of flow table may result in a miss. Cache module may cache two entries corresponding to flow in flow table a first forward flow entry comprising the translated source IP address 1.2.3.4 in source address field destination IP address of 10.0.0.1 in destination address field and a next action to lookup forwarding table in action field and a second reverse flow entry comprising the destination IP address of 10.0.0.1 in source address field the source IP address of 1.2.3.4 in destination address field and a next action to forward to the previous hop namely service node N in action field . Note that the source address field value and destination address field values of the forward flow entry are swapped e.g. reversed in the reverse flow entry. Forwarding table may include a single entry to forward substantially all outgoing packets to gateway . Accordingly packet B may be sent out to gateway which may route it to destination node at 10.0.0.1.

Assume that destination node sends a return packet of flow . Return packet may indicate a source address of 10.0.0.1 and a destination address of 1.2.3.4. Gateway may forward return packet to forwarder . Lookup module may lookup flow table and find a hit in the reverse flow entry entry with the source address and destination address of return packet matching the values in source address field and destination address field respectively. According to the next action value in action field forwarder may forward return packet to service node N . Service node N may translate the destination address from 1.2.3.4 to 127.2.3.4 and forward return packet to the previous hops of the service chain as appropriate with return packet ultimately reaching source node after traversing substantially all service nodes N of the service chain.

Turning to is a simplified block diagram illustrating example details of an embodiment of communication system . Assume merely for example purposes and not as a limitation that source nodes in network communicate with destination nodes respectively in corresponding flows A B and C. Packets in flow A may traverse service nodes and before exiting network through gateway and vice versa e.g. return packets from destination node may traverse the same service node in reverse order packets in flow B may traverse service nodes and before exiting network through gateway and vice versa packets in flow C may traverse service node and before exiting network through gateway and vice versa. Packets from source nodes to respective destination nodes may be sent from the last service nodes e.g. and to forwarder .

Flow table maintained in forwarder may include a forward flow entry and reverse flow entry corresponding to each flow A B and C. For example forward flow entry for flow A may indicate a source address value SOURCE 1 a destination address value DESTINATION 1 and a next action to lookup forwarding table the reverse flow entry for flow A may indicate a source address value DESTINATION 1 a destination address value SRC 1 and a next action to forward to service node . Likewise the forward flow entry for flow B may indicate a source address value SOURCE 2 a destination address value DESTINATION 2 and a next action to lookup forwarding table the reverse flow entry for flow B may indicate a source address value DESTINATION 2 a destination address value SOURCE 2 and a next action to forward to service node . Similarly the forward flow entry for flow C may indicate a source address value SOURCE 3 a destination address value DESTINATION 3 and a next action to lookup forwarding table the reverse flow entry for flow C may indicate a source address value DESTINATION 3 a destination address value SOURCE 3 and a next action to forward to service node . Thus return packets of flow A may be forwarded by forwarder to service node consistently maintaining bi directional flow stickiness. Return packets of flow B may be forwarded by forwarder to service node consistently and return packets of flow C may be forwarder by forwarder to service node consistently.

Note that in some embodiments the forwarder may also be instantiated in between service nodes for example forwarder between service nodes and . In an example embodiment forwarder may be instantiated and associated with a server executing service node . In some embodiments the forward flow entry in flow table may indicate an action to look up the local copy of the forwarding table the reverse flow entry in flow table may indicate forwarding to service node . In other embodiments the forward flow entry in flow table may specify e.g. instead of looking up forwarding table for a routing decision the next service node e.g. in a direction from the source node within network to the destination node outside network the reverse flow entry may specify the previous service node e.g. from which the packet was received at forwarder . Thus each instance of forwarder may facilitate maintaining flow stickiness across the entire service chain from source to destination and vice versa within network .

Turning to is a simplified block diagram illustrating example operations that may be associated with an embodiment of communication system . Operations may execute at forwarder in many embodiments. At a packet may be received at forwarder . At lookup module may lookup flow table . At a determination may be made whether a corresponding entry has been found e.g. by searching for the source address and destination address in flow table . If an entry has not been found e.g. a miss at forwarding table may be looked up for a routing decision. At cache module may cache a forward flow entry and a reverse flow entry in flow table .

Turning back to if an entry is found in flow table e.g. a hit indicating that other packets of the flow have been seen previously or the packet is a reverse flow packet of a forward flow seen previously at the action specified in flow table may be performed. For example at forwarding table may be looked up e.g. hit indicates that other packets of the flow have been seen previously or at the packet may be forwarded to the previous hop listed in a reverse flow entry e.g. hit indicates the packet is a reverse flow packet of a forward flow seen previously .

Turning to is a simplified block diagram illustrating example details associated with forwarder according to an embodiment of communication system . Note that in network multiple instances of the same service function may be instantiated in separate servers for example for elastic scaling purposes. Service function N may be instantiated in two separate instances N and N on server and server respectively. Each service node N and N may be connected to a separate and distinct instance A and B respectively of forwarder on respective servers and . However only one of such instances of forwarder may forward packets and may be termed as the designated forwarder. All other instances of forwarder that are not the designated forwarder for the service function may be termed non designated forwarder. According to various embodiments forwarder can encompass the totality of all designated forwarder instance and non designated forwarder instance s connected to separate and distinct instances of the same service function. Moreover each forwarder may comprise a combination of designated forwarder instance and non designated forwarder instance for different service functions. For example designated forwarder instance B for service node N may act as a non designated forwarder instance for another connected service node in the same server.

Each designated forwarder instance and non designated forwarder instances may maintain separate and distinct local copies of flow table . For example designated forwarder instance B may maintain flow table B non designated forwarder instance A may maintain flow table A. Note that flow table as used herein can refer to an aggregation of substantially all local copies of flow tables maintained by the designated forwarder instance and non designated forwarder instance s unless called out as separate copies for example A and B.

In such a multi forwarder environment substantially all traffic of the flow passes through the designated forwarder instance whereas the other non designated forwarder instances hosting the destination source of some of the traffic for example may be sticky only for their destinations source only. The forwarder instance on a given server can have a different view of the flow table depending on whether it is a designated forwarder instance or a non designated forwarder instance.

Assume merely for example purposes that four service instances are instantiated for the same service function in three separate servers with two service function instances on two separate servers and two other service function instances on the same server. Each server may include a respective forwarder instance among which one instance comprises a designated forwarder instance and the other instances comprise non designated forwarder instances. Substantially all packets destined to the service function may arrive at the server executing the designated forwarder instance. The designated forwarder instance caches all flows to all service function instances and directs return traffic based on reverse flows to the right server or to the local forwarder instance. When packets arrive at any non designated forwarder instance on other servers the non designated forwarder instance may direct traffic to their local service nodes if applicable based on their cached sticky load balancing flow tables or else forward the packet to the designated forwarder instance.

Turning back to the example illustrated in the figure assume merely for example purposes that source node sends packet A to a destination outside network . Packet A traverses a series of service nodes N before reaching forwarder between service node N and gateway . For ease of illustration merely one forwarder is shown in the figure. Any number of forwarders may be included e.g. one forwarder between each node in the service chain within the broad scope of the embodiments. Assume merely for example purposes that forwarder instance A connected to service node N is one of the non designated forwarder instances for service function N.

During operation when non designated forwarder instance B receives packet A a lookup of local flow table copy A is performed. If an entry is not found as would be the case for a first packet of a flow local flow table copy A may be cached with a forward flow entry and a reverse flow entry. The forward flow entry may indicate that the packet be forwarded to designated forwarder instance B the reverse flow entry may indicate that the packet be forwarded to service node N . Packet A may be forwarded to designated forwarder instance B. Designated forwarder instance B may perform a lookup of local flow table copy B. If an entry is not found as would be the case for the first packet of a flow local flow table copy B may be cached with a forward flow entry and a reverse flow entry. The forward flow entry may indicate a lookup of the forwarding table the reverse flow entry may indicate that the packet be forwarded to non designated forwarder instance A. Packet A may be forwarder to gateway e.g. according to forwarding table entry and ultimately out of network .

In the return flow return packet AR may be sent to designated forwarder instance B by gateway . Designated forwarder instance B may perform a lookup of local flow table copy B. The reverse flow entry therein may provide a match indicating that packet AR be forwarded to non designated forwarder instance A. Accordingly designated forwarder instance B may forward packet AR to non designated forwarder instance A. Non designated forwarder instance A may perform a lookup of local flow table copy A. The reverse flow entry therein may provide a match indicating that packet AR be forwarded to service node N .

Turning to is a simplified block diagram illustrating example details associated with forwarder according to an embodiment of communication system . Forwarder may comprise a combination of designated forwarder and non designated forwarder for different service functions. For example forwarder in server may include a non designated forwarder for service node and a designated forwarder for another service node . The choice to configure forwarder in server as a designated forwarder for service node and as a non designated forwarder for service node may be based on various factors such as load balancing flow statistics server capabilities and other parameters.

Turning to is a simplified flow diagram illustrating example operations that may be associated with forwarder according to various embodiments of communication system . At a packet may be received from service node at forwarder connected to service node . At a local flow table copy may be looked up. At a determination may be made whether a matching entry is found in the local flow table copy. If the matching entry is not found at a determination may be made whether the forwarder instance is a designated forwarder instance. If not at the packet may be forwarded to the designated forwarder instance. At forward flow and reverse flow entries may be cached in the local flow table copy. The forward flow entry may indicate that the packet be forwarded to the designated forwarder instance the reverse flow entry may indicate that the packet be forwarded to service node .

On the other hand if the forwarder instance is a designated forwarder instance at the forwarding table may be looked up to determine the next hop. At forward flow and reverse flow entries may be cached in the local flow table copy. The forward flow entry may indicate that the packet be forwarded to the next hop the reverse flow entry may indicate that the packet be forwarded to the non designated forwarder instance if applicable e.g. packet received from non designated forwarder instance or service node e.g. packet received from service node . Turning back to if a matching entry is found in the local flow table copy at the appropriate action e.g. forwarding to designated forwarder instance looking up forwarding table forwarding to non designated forwarder instance forwarding to service node etc. specified in the flow table may be performed.

Note that in this Specification references to various features e.g. elements structures modules components steps operations characteristics etc. included in one embodiment example embodiment an embodiment another embodiment some embodiments various embodiments other embodiments alternative embodiment and the like are intended to mean that any such features are included in one or more embodiments of the present disclosure but may or may not necessarily be combined in the same embodiments.

Note also that an application as used herein this Specification can be inclusive of an executable file comprising instructions that can be understood and processed on a computer and may further include library modules loaded during execution object files system files hardware logic software logic or any other executable modules. Furthermore the words optimize optimization and related terms are terms of art that refer to improvements in speed and or efficiency of a specified outcome and do not purport to indicate that a process for achieving the specified outcome has achieved or is capable of achieving an optimal or perfectly speedy perfectly efficient state.

In example implementations at least some portions of the activities outlined herein may be implemented in software in for example forwarder . In some embodiments one or more of these features may be implemented in hardware provided external to these elements or consolidated in any appropriate manner to achieve the intended functionality. The various network elements e.g. forwarder may include software or reciprocating software that can coordinate in order to achieve the operations as outlined herein. In still other embodiments these elements may include any suitable algorithms hardware software components modules interfaces or objects that facilitate the operations thereof.

Furthermore forwarder described and shown herein and or their associated structures may also include suitable interfaces for receiving transmitting and or otherwise communicating data or information in a network environment. Additionally some of the processors and memory elements associated with the various nodes may be removed or otherwise consolidated such that a single processor and a single memory element are responsible for certain activities. In a general sense the arrangements depicted in the FIGURES may be more logical in their representations whereas a physical architecture may include various permutations combinations and or hybrids of these elements. It is imperative to note that countless possible design configurations can be used to achieve the operational objectives outlined here. Accordingly the associated infrastructure has a myriad of substitute arrangements design choices device possibilities hardware configurations software implementations equipment options etc.

In some of example embodiments one or more memory elements e.g. memory element can store data used for the operations described herein. This includes the memory element being able to store instructions e.g. software logic code etc. in non transitory media such that the instructions are executed to carry out the activities described in this Specification. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein in this Specification. In one example processors e.g. processor could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM an ASIC that includes digital logic software code electronic instructions flash memory optical disks CD ROMs DVD ROMs magnetic or optical cards other types of machine readable mediums suitable for storing electronic instructions or any suitable combination thereof.

These devices may further keep information in any suitable type of non transitory storage medium e.g. random access memory RAM read only memory ROM field programmable gate array FPGA erasable programmable read only memory EPROM electrically erasable programmable ROM EEPROM etc. software hardware or in any other suitable component device element or object where appropriate and based on particular needs. The information being tracked sent received or stored in communication system could be provided in any database register table cache queue control list or storage structure based on particular needs and implementations all of which could be referenced in any suitable timeframe. Any of the memory items discussed herein should be construed as being encompassed within the broad term memory element. Similarly any of the potential processing elements modules and machines described in this Specification should be construed as being encompassed within the broad term processor. 

It is also important to note that the operations and steps described with reference to the preceding FIGURES illustrate only some of the possible scenarios that may be executed by or within the system. Some of these operations may be deleted or removed where appropriate or these steps may be modified or changed considerably without departing from the scope of the discussed concepts. In addition the timing of these operations may be altered considerably and still achieve the results taught in this disclosure. The preceding operational flows have been offered for purposes of example and discussion. Substantial flexibility is provided by the system in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings of the discussed concepts.

Although the present disclosure has been described in detail with reference to particular arrangements and configurations these example configurations and arrangements may be changed significantly without departing from the scope of the present disclosure. For example although the present disclosure has been described with reference to particular communication exchanges involving certain network access and protocols communication system may be applicable to other exchanges or routing protocols. Moreover although communication system has been illustrated with reference to particular elements and operations that facilitate the communication process these elements and operations may be replaced by any suitable architecture or process that achieves the intended functionality of communication system .

Numerous other changes substitutions variations alterations and modifications may be ascertained to one skilled in the art and it is intended that the present disclosure encompass all such changes substitutions variations alterations and modifications as falling within the scope of the appended claims. In order to assist the United States Patent and Trademark Office USPTO and additionally any readers of any patent issued on this application in interpreting the claims appended hereto Applicant wishes to note that the Applicant a does not intend any of the appended claims to invoke paragraph six 6 of 35 U.S.C. section 112 as it exists on the date of the filing hereof unless the words means for or step for are specifically used in the particular claims and b does not intend by any statement in the specification to limit this disclosure in any way that is not otherwise reflected in the appended claims.

