---

title: Business suite framework for developing software applications
abstract: A system modeler may provide a framework for the development of business applications using object oriented concepts. The framework may expose selected attributes of these classes through a Graphical Presentation Interface. When a Graphical Presentation Interface is defined for a class, System Modeler may automatically generate a project containing the corresponding DataModels that can be used by Client Application developers in a variety of Client technologies. The generated DataModels may be synchronized with any changes made to the class definitions in System Modeler. When an attribute is modified in the System Modeler class, then the change will automatically filter through to the corresponding DataModels used by the Client Application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612804&OS=09612804&RS=09612804
owner: Unisys Corporation
number: 09612804
owner_city: Blue Bell
owner_country: US
publication_date: 20140908
---
The application claims the benefit of priority of U.S. Provisional Patent Application No. 61 874 510 filed on Sep. 6 2013 and entitled Agile Business Suite Client Framework which is hereby incorporated by reference.

The instant disclosure relates to application development. More specifically this disclosure relates to a framework for supporting the development of computer software applications.

Conventionally computer software is developed line by line function by function and file by file. Organization of the contents of the computer software through many functions and files is left to the developer. However the large number of ever changing staff in the development of the computer software can create organization problems with managing a computer software application over the lifetime of the application. Making changes to the software application when needs of the organization change can then be difficult due to lack of organization of the contents of the software application. Furthermore an interface for accessing a conventional framework by computer software limits the capabilities of a software application. One example of a conventional framework is shown in .

A model based development of computer software may decrease development time for new or modified computer applications within an organization. For example a data or behavioral model may be modified and an updated software framework generated by a system modeler. A Client Application developer may then build on top of the generated software framework. Later when changes are made to the data or behavioral models the framework may be regenerated with little or no interaction from the Client Application developer.

One such system modeler is the Agile Business Suite System Modeler which may enable the development of business applications using object oriented concepts. Classes can be defined to represent the data and behavior of the application. The new Client Framework exposes selected attributes of these classes through a Graphical Presentation Interface. When a Graphical Presentation Interface is defined for a class the System Modeler may automatically generate a .NET Framework project containing the corresponding DataModels that can be used by Client Application developers in a variety of Client technologies. The generated DataModels may be synchronized with any changes made to the class definitions in System Modeler. When an attribute is modified in the System Modeler class the change may automatically filter through to the corresponding DataModels used by the client application. This may enable a streamlined mechanism for delivering updates to the Client Application developer so that they can integrate changes in their application based on the latest DataModel definitions. In this way the Client Framework may keep the client applications synchronized with the class definitions in System Modeler and may help to avoid the typical runtime failures that would otherwise be incurred.

The Client Framework may support a variety of client technologies and System Modeler will generate different artefacts for each client type for WINDOWS Presentation Foundation clients the system modeler may generate DataViewModels and Datasources in addition to the DataModels. This may assist developers using XAML based technologies to design user interfaces with the WPF Designer or Blend. A corresponding set of Portable Datamodels may also be generated for client technologies that require them e.g. WINDOWS 8 Silverlight WINDOWS Phone 8 for technologies using Javascript a set of DataModels may be generated as Javascript objects. In some cases these additional artifacts may also be synchronized automatically with any changes made to the class definitions in System Modeler thereby keeping all clients in sync with the AB Suite Model.

According to one embodiment a method may include the steps of receiving at a system modeler a class comprising a plurality of attributes defining data and behavior of an application receiving at the system modeler a selection of at least a portion of the plurality of attributes for exposing through a graphical presentation interface and generating by the system modeler a software framework project comprising a data model based at least in part on the received selection and the received class.

According to another embodiment a computer program product may include a non transitory medium having code to perform the steps of receiving at a system modeler a class comprising a plurality of attributes defining data and behavior of an application receiving at the system modeler a selection of at least a portion of the plurality of attributes for exposing through a graphical presentation interface and generating by the system modeler a software framework project comprising a data model based at least in part on the received selection and the received class.

According to yet another embodiment an apparatus may include a processor and a memory coupled to the processor. The processor may be configured to perform the steps of receiving at a system modeler a class comprising a plurality of attributes defining data and behavior of an application receiving at the system modeler a selection of at least a portion of the plurality of attributes for exposing through a graphical presentation interface and generating by the system modeler a software framework project comprising a data model based at least in part on the received selection and the received class.

The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter that form the subject of the claims of the invention. It should be appreciated by those skilled in the art that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope of the invention as set forth in the appended claims. The novel features that are believed to be characteristic of the invention both as to its organization and method of operation together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood however that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.

The Client Framework may deliver an open approach to user interface development by integrating industry standard interfaces with Data Model concepts to provide a natural and intuitive environment for .NET Developers when designing end user middleware and service based applications that connect to AB Suite systems. This may be achieved through the AB Suite Access Layer API that is part of the Client Framework infrastructure. The API may provide a new way to access the AB Suite runtime application. In addition System Modeler may be used by the Client Framework to provide seamless integration and synchronization with client applications being developed.

The Client Framework may take ispec and class interface definitions in the AB Suite model to produce components that can be integrated into your client technology project. In System Modeler ispecs and classes can define a graphical presentation interface which is exposed as a set of corresponding DataModels that can then be used by many popular client development tools to create desktop web mobile and service based applications. Examples of such client development tools are WINDOWS Presentation Foundation WPF SilverLight ASP.NET MVC WINDOWS Communication Foundation WCF WINDOWS 8 WINDOWS Phone 8 and others that are based on MICROSOFT .NET technology.

Some elements of the Client framework may include Client Framework Development integrated into System Modeler a Graphical presentation attribute definition and or a Client Framework Runtime Environment. In one embodiment a mashup view may be used to display data from multiple ispecs to create an integrated experience. A mashup View may be created by extending the DataViewModel of a specific ispec. This may involve creating a partial class of the DataViewModel that is generated when you generate the access layer. This may allow a DataViewModel to be extended without the risk of overriding the changes made by when regenerating the DataViewModel.

Referring back to the access layer interface may be accessed through an AB Suite Access Layer Application Programming Interface API for connecting a client to the runtime system. This API may be part of the Client Framework infrastructure. It may deliver an open approach for .NET based user interface development by integrating industry standard interfaces with Data Model concepts. This may provide a natural and intuitive environment for .NET developers when designing end user middleware and service based applications that connect to AB Suite systems. The API may be exposed for example by 1 a set of .NET assemblies that provide classes and interfaces for connecting and performing transactions against the runtime system referred to as a Direct Connection for client technologies such as WINDOWS Presentation Foundation WPF Extensible Application Markup Language XAML ASP.NET and WINDOWS Communication Foundation WCF Service Applications and or 2 a WCF Service Gateway hosted on an Application Server this may or may not be the same machine that the AB Suite system is running on referred to as a Remote Connection and allows client applications that do not support COM DCOM to use the Access Layer API across a network using WCF for client technologies such as SILVERLIGHT and WINDOWS Store apps.

The API may allow a client interaction to interact with the AB Suite system through 1 a direct interface that can interoperate with COM DCOM such as the Access Layer API for direct connections use the .NET compatible Data Models generated by the Client Framework and or 2 a remote interface for client applications that cannot interoperate with COM DCOM. In one embodiment the API for the direct and remote connections may be exposed in the same way to the application developer. This allows for the development of code for runtime interactions in a consistent manner regardless of the connection mechanism being used. Behind the scenes client applications that obtain direct connections access COM DCOM directly and client applications that obtain remote connections communicate through an intermediary gateway using WCF. In some embodiments client applications may access the API through both direct and remote connections.

The API may expose one or more assemblies that may be referenced by the client application. For direct clients an ABSuiteAccessLayer.Connector.Core.dll assembly may be exposed which includes the interfaces exposed by the Access Layer API for all connections to the runtime system and or an ABSuiteAccessLayer.Connector.dll assembly may be exposed which includes the implementation of the classes and methods exposed by the Access Layer API for direct connections to the runtime system. For remote clients an ABSuiteAccessLayer.Connector.Core.dll may be exposed which includes the interfaces exposed by the Access Layer API for all connections to the runtime system and or an ABSuiteAccessLayer.Connector.Remote.Core assembly may be exposed which includes the implementation of the Access Layer API for remote connections through the WCF Gateway to the runtime system.

The API may include a number of components including for example an IConnection interface that provides methods and properties for establishing and maintaining a connection to the runtime system an IRtConnection interface that provides methods and properties for exchanging data with the runtime system a TransmissionObject used when sending and receiving data to or from the runtime system and or a DataModel that defines an ispec or a class that was modelled in AB Suite Developer and generated for Access Layer API usage.

Using the API while developing a client application may involve performing a method comprising instantiating a connection object using the static ConnectionFactory class that returns an instance of a Connection object when calling the Create method creating a new ConnectionDetails object and setting its properties with information about how to connect with the host application performing a Connect call on the Connection object passing in the ConnectionDetails which returns a TransmissionObject from which you can determine the status of the connection and the current DataModel populating the DataModel with new information by setting its properties using the DataHandler object to send the DataModel details to the runtime system with either the Transmit or TransmitAsync methods returning from the Transmit or TransmitAsync methods an updated Transmission object that indicates the resulting state of the transaction and provides an updated DataModel which may be for the same ispec or a new ispec repeating some of the above steps to perform additional transactions with the runtime system and closing the connection using the Connection object Close method. Psuedocode illustrating one implementation described above is 

In one embodiment of the method of the system modeler may also generate a supporting client infrastructure for the software framework project. One example of such a client infrastructure is shown in . is a block diagram illustrating a supporting client infrastructure for a software framework that may be generated by a system modeler according to one embodiment of the disclosure. A supporting infrastructure may include components . The components may include for example a DataModels project a DataModels.Portable Project a ViewModels Project an AB Suite Project a WPF XAML Views Project one or more Data Sources and or one or more XAML views.

A basic model view controller MVC application may be created such as that shown in that integrates the DataModels generated by a Client Framework. The models for the Client Framework may be generated using System Modeler and can define the data to be exchanged for specific ispec transaction. The Views may be designed to create the user interface for the application. The Controller then processes the data received from a View and uses the DataModels to connect the Access Layer API to the Runtime AB Suite application to perform transactions. The DataModels generated by the Client Framework may integrate with this environment because they take advantage of the Scaffolding feature in ASP.NET MVC which automatically generates Views based on DataModel definitions. Once the Views are generated they can be styled to suit the application s user interface by using HTML5 CSS and JavaScript.

The client container may be a standard C or other language WPF application which may include a ShellViewModel a ShellView SelectionAndErrorViews a ConsoleView model and or a ConsoleView. The ShellViewModel class may be the main class of the WPF Client Container. This class may establish a connection with the AB Suite System may load and populate the Views from the Views assembly and may handle the menu and buttons available in the main window of the WPF Client Container. The ShellViewModel class may be a partial class that can be extended without changing the core definition of the class. The main window of the application may be encapsulated in the Shell class Window class . This window may contain a toolbar content presenter and status bar. The toolbar may contain icons and menus that a user can use to open or close a session run a report and select a theme. The content presenter may host the Views from the Views assembly. The status bar may display status text and error messages sent by the host application.

A list of tasks that may be performed by the client container may include reading the configuration file .rtxml and instantiating the ShellViewModel and the Shell View classes at the Application Start Up loading by the ShellViewModel either a Direct or the Remote Connector assembly based on a UseGateWay value in a configuration file registering by the ShellViewModel for events sent by the Connector loading by the Connector the DataModel assembly and create a session with the AB Suite system and then allowing the ShellViewModel to invoke the FireUp ispec if it exists loading by the ShellViewModel the Views and DataModels assembly and showing the FireUp ispec sent by the Connector after creating the session if there is no FireUp ispec it displays the Select Screen dialog box if a session is not established the application shuts down implementing by the main window a Shell.xaml file where all user interface Views from the Views assembly may be displayed or hosted within this view binding a user interface view from the Views assembly to its corresponding DataViewModel data may be copied into the Data Model before a View is displayed and may be copied back into the Data Model before a Transmit . In one embodiment the Shell.xaml file or any other Window that appears in the container may be customized to change the look and feel of the WPF application. In some embodiments all user interface Views can be handled through data binding and by binding the Shell View to the ShellViewModel.

In one embodiment a custom container may be constructed to allow customization of a client user interface. For example an Agile Business Suite WPF Container Project template may provide a standard WPF Container provided with the default user interface design and logic Views and ViewModels project files as part of the project. This template may allow retaining of the basic behavior of the standard WPF Container of with the flexibility of being able to customize the user interface for developing WPF or XAML based applications.

Benefits of the software framework described above may include seamless integration of the client development project with the AB Suite project a natural .NET development experience exposing Ispecs and or objects as DataModels easier integration and passing in client development allowing use any kind of new concept directly in the AB Suite Solution as soon as it is available from other providers standardization and thus greater customization options because many others know how to use DataModels and or improvements in performance and usability.

In one embodiment the user interface device is referred to broadly and is intended to encompass a suitable processor based device such as a desktop computer a laptop computer a personal digital assistant PDA or tablet computer a smartphone or other mobile communication device having access to the network . In a further embodiment the user interface device may access the Internet or other wide area or local area network to access a web application or web service hosted by the server and may provide a user interface for controlling the information system.

The network may facilitate communications of data between the server and the user interface device . The network may include any type of communications network including but not limited to a direct PC to PC connection a local area network LAN a wide area network WAN a modem to modem connection the Internet a combination of the above or any other communications network now known or later developed within the networking arts which permits two or more computers to communicate.

The computer system may also include random access memory RAM which may be synchronous RAM SRAM dynamic RAM DRAM synchronous dynamic RAM SDRAM or the like. The computer system may utilize RAM to store the various data structures used by a software application. The computer system may also include read only memory ROM which may be PROM EPROM EEPROM optical storage or the like. The ROM may store configuration information for booting the computer system . The RAM and the ROM hold user and system data and both the RAM and the ROM may be randomly accessed.

The computer system may also include an input output I O adapter a communications adapter a user interface adapter and a display adapter . The I O adapter and or the user interface adapter may in certain embodiments enable a user to interact with the computer system . In a further embodiment the display adapter may display a graphical user interface GUI associated with a software or web based application on a display device such as a monitor or touch screen.

The I O adapter may couple one or more storage devices such as one or more of a hard drive a solid state storage device a flash drive a compact disc CD drive a floppy disk drive and a tape drive to the computer system . According to one embodiment the data storage may be a separate server coupled to the computer system through a network connection to the I O adapter . The communications adapter may be adapted to couple the computer system to the network which may be one or more of a LAN WAN and or the Internet. The user interface adapter couples user input devices such as a keyboard a pointing device and or a touch screen not shown to the computer system . The keyboard may be an on screen keyboard displayed on a touch panel. The display adapter may be driven by the CPU to control the display on the display device . Any of the devices may be physical and or logical.

The applications of the present disclosure are not limited to the architecture of computer system . Rather the computer system is provided as an example of one type of computing device that may be adapted to perform the functions of the server and or the user interface device . For example any suitable processor based device may be utilized including without limitation personal data assistants PDAs tablet computers smartphones computer game consoles and multi processor servers. Moreover the systems and methods of the present disclosure may be implemented on application specific integrated circuits ASIC very large scale integrated VLSI circuits or other circuitry. In fact persons of ordinary skill in the art may utilize any number of suitable structures capable of executing logical operations according to the described embodiments. For example the computer system may be virtualized for access by multiple users and or applications.

If implemented in firmware and or software the functions described above may be stored as one or more instructions or code on a computer readable medium. Examples include non transitory computer readable media encoded with a data structure and computer readable media encoded with a computer program. Computer readable media includes physical computer storage media. A storage medium may be any available medium that can be accessed by a computer. By way of example and not limitation such computer readable media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc includes compact discs CD laser discs optical discs digital versatile discs DVD floppy disks and blu ray discs. Generally disks reproduce data magnetically and discs reproduce data optically. Combinations of the above should also be included within the scope of computer readable media. Additionally the firmware and or software may be executed by processors integrated with components described above.

In addition to storage on computer readable medium instructions and or data may be provided as signals on transmission media included in a communication apparatus. For example a communication apparatus may include a transceiver having signals indicative of instructions and data. The instructions and data are configured to cause one or more processors to implement the functions outlined in the claims.

Although the present disclosure and its advantages have been described in detail it should be understood that various changes substitutions and alterations can be made herein without departing from the spirit and scope of the disclosure as defined by the appended claims. Moreover the scope of the present application is not intended to be limited to the particular embodiments of the process machine manufacture composition of matter means methods and steps described in the specification. As one of ordinary skill in the art will readily appreciate from the present invention disclosure machines manufacture compositions of matter means methods or steps presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized according to the present disclosure. Accordingly the appended claims are intended to include within their scope such processes machines manufacture compositions of matter means methods or steps.

