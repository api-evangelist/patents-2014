---

title: Service governance for distributed systems
abstract: Example systems and methods for service governance for distributed and cloud-based systems are described. In one implementation, a method extracts a plurality of service manifest files associated with a web service from a service artifact. The method also validates the plurality of service manifest files, and publishes the plurality of service manifest files in a service registry.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09479517&OS=09479517&RS=09479517
owner: WAL-MART STORES, INC.
number: 09479517
owner_city: Bentonville
owner_country: US
publication_date: 20140228
---
The present disclosure relates to methods and systems for service governance for distributed systems.

Service lifecycle includes evolution phrases of services namely from inception through to retirement. Service governance as a part of service lifecycle monitors reports and or manages processes associated with the development deployment operations and management of the services and updates establishes information associated with the processes. However conventional techniques fail to enforce service governance in an implicit and transparent way. There is a need for a solution that enables an underlying service platform to enable service onboard a governance platform.

In the following description reference is made to the accompanying drawings that form a part thereof and in which is shown by way of illustrating specific exemplary embodiments in which the disclosure may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the concepts disclosed herein and it is to be understood that modifications to the various disclosed embodiments may be made and other embodiments may be utilized without departing from the scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense.

Reference throughout this specification to one embodiment an embodiment one example or an example means that a particular feature structure or characteristic described in connection with the embodiment or example is included in at least one embodiment of the present disclosure. Thus appearances of the phrases in one embodiment in an embodiment one example or an example in various places throughout this specification are not necessarily all referring to the same embodiment or example. Furthermore the particular features structures databases or characteristics may be combined in any suitable combinations and or sub combinations in one or more embodiments or examples. In addition it should be appreciated that the figures provided herewith are for explanation purposes to persons ordinarily skilled in the art and that the drawings are not necessarily drawn to scale.

Embodiments in accordance with the present disclosure may be embodied as an apparatus method or computer program product. Accordingly the present disclosure may take the form of an entirely hardware comprised embodiment an entirely software comprised embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore embodiments of the present disclosure may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable media may be utilized. For example a computer readable medium may include one or more of a portable computer diskette a hard disk a random access memory RAM device a read only memory ROM device an erasable programmable read only memory EPROM or Flash memory device a portable compact disc read only memory CDROM an optical storage device and a magnetic storage device. Computer program code for carrying out operations of the present disclosure may be written in any combination of one or more programming languages. Such code may be compiled from source code to computer readable assembly language or machine code suitable for the device or computer on which the code will be executed.

Embodiments may also be implemented in cloud computing environments. In this description and the following claims cloud computing may be defined as a model for enabling ubiquitous convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be rapidly provisioned via virtualization and released with minimal management effort or service provider interaction and then scaled accordingly. A cloud model can be composed of various characteristics e.g. on demand self service broad network access resource pooling rapid elasticity and measured service service models e.g. Software as a Service SaaS Platform as a Service PaaS and Infrastructure as a Service IaaS and deployment models e.g. private cloud community cloud public cloud and hybrid cloud .

The flow diagrams and block diagrams in the attached figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flow diagrams or block diagrams may represent a module segment or portion of code which includes one or more executable instructions for implementing the specified logical function s . It will also be noted that each block of the block diagrams and or flow diagrams and combinations of blocks in the block diagrams and or flow diagrams may be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flow diagram and or block diagram block or blocks.

Embodiments of the present disclosure describe an approach solution to achieve automated service governance using a self service model in a distributed and cloud based system associated with Service Oriented Architecture SOA or Application Programming Interface API oriented Architecture. Embodiments of the present disclosure enable governance of a portion or the complete service API lifecycle for example from the development stage to deployment of the service API in a cloud based system wherein the deployable artifact may include a service API contract encapsulating a portion or all of the metadata about the service. The metadata may then be used to publish the service to a service registry therefore bringing the service under the purview of the service governance and enabling effective administration and monitoring of the service.

Embodiments of the present disclosure are designed to enforce service governance as part of the service lifecycle in an implicit and transparent way and therefore enable the underlying service platform to enable service onboard the governance platform. This onboard design is agnostic and transparent to the underlying service implementation. Compared to conventional techniques embodiments of the present disclosure provide advantages such as for example a uniform model to define API ability to define inter operability between systems ability to define Quality of Service QOS and service policies governance at different layers e.g. API gateway layer client layer and service layer visibility of utilization of services via effective monitoring of the services re usability of services etc.

Computing scheme may include a service provider that via server s builds a set of services e.g. web services to fulfill business goals. Service provider may define a service API contract in one or more files e.g. an Extensible Markup Language XML file . For example service provider may provide service metadata as well as QOS and policy references in the service API contract. In some embodiments the one or more files may contain metadata about the service such as for example a name a version an owner a service end point a contract uniform resource locator URL etc. that are associated with the service. Service end points may facilitate communication associated with the service. In some instances the service end points may specify the service contract that defines which methods of the service class may be accessed via the service end point and an individual service end point may expose a different set of methods. The service end point may also define a binding that specifies how a client communicates with the service and the network address where the service end point resides. An example AIP contract in XML is provided below.

Service provider may also package service API contract in a deployable service artifact e.g. in a class path of the service artifact . A service artifact may include an object created by one or more relevant users e.g. service providers service consumers etc. to specify various characteristics of a service. Examples of service artifacts include a document of understanding a business requirement document a specification of non functional requirements a specification of a priority of the service service metadata etc. Service metadata may include information that specifies the behavior structure operation of the service. For example service metadata may include a service name a status storing the operation status of the service a timestamp associate the operation of the service one or more configuration documents associated with the service a service description language document etc.

In some embodiments service provider may create service manifest XML files by adding service metadata e.g. a service endpoint and contract URL . These manifest files may then be packaged in the final deployable artifact. A service manifest file may include a document listing content of a distribution and or location in for example software packaging such that the contents of the distribution package may be validated. In some instances altering the content may invalidate the checksums in the manifest file. In some embodiments the service manifest file e.g. an XML file may be generated by adding service metadata including detailed information such as for example an end point a contract URL etc. that is associated with the service.

In some embodiments an individual manifest file may exist for an individual service environment. Service environments may include various environments in a service lifecycle. Service lifecycle may include the evolution phases of a service through which it passes e.g. from inception through to termination . In some embodiments a service lifecycle may include a modeling process a assembling or building process a deploying process a managing process etc. For instance the modeling process may include creating documenting prioritizing business requirements. The assembling process may include defining approving and monitoring the service building. Also the deploying process may include evaluating and executing functional and performance test associated with the service. The managing process may include monitoring the service and generating reports on service.

In some embodiments the service environments may include a developing environment quality assurance Q A environment a staging environment a production environment etc. In these instances development environment may be used by the developers e.g. programmers configurators etc. as they work on individual programs apply program patches or updates or turn configure new functionality. Q A environment may be used by the developers and certain users e.g. service consumers to test the migrated changes in a pseudo production environment to ensure that the changes actually work correctly. Staging environment may be used to test the application in a production environment without having users access the application yet. This environment may also be used to make sure security settings are correct and that other services on servers do not interfere with the application. Production environment may be an actual environment used by the service consumers e.g. companies institutions organizations etc. for the processing needs.

The release of deployable service artifact may be initiated by continuous integration CI jobs e.g. CI applications . Continuous integration may include techniques that merge developer working copies with a shared mainline several times in a predetermined time period in software engineering. In some embodiments as an automated component of a service governance system a continuous delivery CD unit may be responsible for packaging unit testing building and subsequent deployment of the service artifact to both non production as well as production environments using maven jobs. For example techniques of CD may include automated testing continuous integration and continuous deployment facilitating software to be developed to a high standard and easily packaged and deployed to test environments etc.

Computing scheme may also include a custom maven plugin which is triggered as part of the CI jobs . In some embodiments custom maven plugin may be an interface to SOA and or APIs. Maven is a software project management tool used by software developers to manage software projects and to centrally archive within a maven repository those artifacts binaries that comprise a project and to then use the artifacts. During the CI for the maven artifact custom maven plugin may extract the service manifest files from deployable service artifact e.g. the artifact class path and pass on to a service publisher to publish these manifest files.

In some embodiments custom maven plugin may call service publisher during the post release phase of maven builds.

As a component of the service governance system service publisher may read validate and eventually publish information associated with the service manifest file to a service registry via a registry client API . Service registry may be associated with a registry database to enable service provider to register services and service consumers to search for target services to fulfill business goals. A registered service may be stored in registry database which stores information such as for example a service end point a service contract URL a service owner quality of service parameters etc.

In some embodiments service registry may function as a listing of the services available and a listing of the addresses for invoking the services. Service registry may also facilitate coordination of versions of a service. For example service consumers and providers may specify which version they need or have. Service registry may also manage version compatibility track compatibility between versions and enumerate the providers of a desired version or compatible version. Service registry may support service states e.g. test and deprecated and provide the services with these states available to consumers.

In some embodiments service publisher may be accessed either as a Representational State Transfer REST service or as a library component. The REST service may include a service of which architectural principles by which developers may design services that focus on a system s resources including how resource states are addressed and transferred over HTTP by a wide range of clients written in different languages.

In some embodiments through registry client API and a service portal for registry a service administrator may communicate with service registry to perform operations using server s associated with service administrator . Accordingly service registry may proceed with operations such as for example creating service updating service reading service deleting service etc.

In some embodiments service administrator may manage the service e.g. monitoring the service and or generating reports on the services based on the service manifest published by the service publisher .

Service portals such as service portal for registry may connect to a process control system of computing process collect parameter data from process field devices identify sort and store the collected parameter data transmit the stored parameter data to a remote monitoring system for analysis etc. For example service portal for registry may include an apparatus and or software for collecting transmitting and analyzing parameter data between server and service registry .

After the service is deployed in cloud a cloud provisioning service may generate service contract file e.g. a XML file out of the contracts parameters. The service contract file may then be passed on to service publisher to enable service onboard the governance platform.

Service publisher may publish information associated with service contract parameters. For example service publisher may publish one or more service manifest files to service registry via a registry client API . The service manifest files include service contract parameters. Service registry may be associated with registry database to enable service provider to register services and potential consumers to search for target services to fulfill business goals.

In some embodiments through registry client API and service portal for registry service administrator may communicate with service registry to perform operations . Accordingly service registry may proceed with operations such as for example creating service updating service reading service deleting service etc. Service portal for registry may include an apparatus and or software for collecting transmitting and analyzing parameter data between server and service registry .

Computing device may also include a custom plugin module configured to extract multiple service manifest files associated with a web service from a service artifact. The multiple service manifest files include service metadata corresponding to multiple service environments. In some embodiments the service metadata may include at least one of a service name of the web service a status storing an operation status of the web service a timestamp associated with an operation of the web service one or more configuration documents associated with the web service or a service description language document of the web service. In some embodiments custom plugin module may build the service artifact using maven techniques by packaging the multiple service manifest files.

In some embodiments an individual service manifest file of the plurality of service manifest files may correspond to an individual service environment of the plurality of service environments that include a development environment a quality assurance environment a stating environment and a production environment that are associated with the web service. In these instances the individual service manifest file may be written in XML.

Computing device may also include a publisher configured to validate the multiple service manifest files and to publish the multiple service manifest files in a service registry. In some embodiments the publisher may conduct a Java XML binding JAXB read of the plurality of service manifest files before validating the plurality of service manifest files. In some embodiments publisher may determine whether the service registry includes a service call of the web service. In response to a determination that the service registry includes the service call publisher may update the service call in the service registry. In response to a determination that the service registry does not include the service call publisher may create an entry associated with the web service in the service registry.

Computing device may further include a service registry module configured to enable a service provider to register services and a service consumer to search for target services. In some embodiments the service registry module may also manage version compatibility track compatibility between versions and enumerate the providers of a desired version or compatible version to a service consumer an entity that calls invokes web services to fulfill their business goals.

At the service governance system may create one or more service manifest files associated with a web service. The one or more service manifest files may include service metadata corresponding to a plurality of service environments. The service metadata may include at least one of a service name of the web service a status storing an operation status of the web service a timestamp associated with an operation of the web service one or more configuration documents associated with the web service or a service description language document of the web service. In some embodiments an individual service manifest file of one or more service manifest files may correspond to an individual service environment of the multiple service environments that include a development environment a quality assurance environment a stating environment and a production environment that are associated with the web service. In some instances the individual service manifest file may be written in XML.

At the service governance system may build maven artifact based on the one or more service manifest files. In some embodiments the service governance system may build a service artifact using maven techniques by packaging the plurality of service manifest files. During the building for the maven artifact custom maven plugin of the service governance system may extract the service manifest from the artifact class path and then pass on to a manifest publisher component e.g. service publisher of the service governance system.

At the service governance system may extract service manifest information. In some embodiments the service governance system may extract multiple service manifest files associated with the web service from the service artifact.

At the service governance system may validate the service manifest information e.g. the multiple service manifest files . In some embodiments the service governance system may validate the plurality of service manifest files based on one or more predetermined criteria associated with at least one of a service end point a contract URL or a valid service environment of the web service. In some embodiments the service governance system may conduct a Java XML binding JAXB read of the plurality of service manifest files before validating the plurality of service manifest files.

At the service governance system may publish the service manifest files information in a service registry. In some embodiments the service governance system may determine whether the service registry includes a service call of the web service. In response to a determination that the service registry includes the service call the service governance system may update the service call in the service registry. In response to a determination that the service registry does not include the service call the service governance system may create an entry associated with the web service in the service registry.

At a service governance system may provide a web service in a cloud computing system based on one or more service contract parameters associated with the web service. Through a cloud provisioning service portal the governance system may add information associated with service registry in a deployment definition associated with the web service. Values for these parameters may be defined at service provisioning time. For example before service deployment in a cloud service provider may fill up service contract parameters.

In some embodiments after the service is deployed in cloud the service governance system may generate service contract file e.g. a XML file out of the contracts parameters. The service contract file may then be passed on to service publisher to avail the web service.

At the service governance system may extract service manifest information. In some embodiments the service governance system may extract multiple service manifest files associated with the web service from the service artifact.

At the service governance system may validate the service manifest information e.g. the multiple service manifest files . In some embodiments the service governance system may validate the plurality of service manifest files based on one or more predetermined criteria associated with at least one of a service end point a contract uniform resource locator URL or a valid service environment of the web service. In some embodiments the service governance system may conduct a Java XML binding JAXB read of the plurality of service manifest files before validating the plurality of service manifest files.

At the service governance system may publish the service manifest files information in a service registry. In some embodiments the service governance system may determine whether the service registry includes a service call of the web service. In response to a determination that the service registry includes the service call the service governance system may update the service call in the service registry. In response to a determination that the service registry does not include the service call the service governance system may create an entry associated with the web service in the service registry.

Although the present disclosure is described in terms of certain preferred embodiments other embodiments will be apparent to those of ordinary skill in the art given the benefit of this disclosure including embodiments that do not provide all of the benefits and features set forth herein which are also within the scope of this disclosure. It is to be understood that other embodiments may be utilized without departing from the scope of the present disclosure.

