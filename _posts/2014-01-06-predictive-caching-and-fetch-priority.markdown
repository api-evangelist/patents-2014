---

title: Predictive caching and fetch priority
abstract: Predicting what content items a user finds important and sending those items to a cache on the user's device at times when doing so will not drain resources and will not result in expensive data rates. Applying a ranking function that examines recency and other content metadata associated with the user's content items stored in a synchronized content management system. Determining how much of a ranked list of content items to cache and deciding when is a good time to send content items to the local cache.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411814&OS=09411814&RS=09411814
owner: Dropbox, Inc.
number: 09411814
owner_city: San Francisco
owner_country: US
publication_date: 20140106
---
The present technology pertains to storing content and more specifically pertains to caching content that is stored in a content management system.

A traditional paradigm for storing digital content involves storing content locally on the electronic device however as the user builds a collection of content items and storing it locally the amount of free storage decreases. A content management system can also be used to synchronize content items between electronic devices however frequent synchronization can involve limited or nonexistent access can drain computing resources consume network bandwidth and can involve a financial obligation when data transfer is charged as a commodity. Similarly storing a large collection of content in a content management system rather than locally to avoid local storage limitations does not adequately address the problems associated with limited or nonexistent access the consumption resources or data rates.

Therefore what is needed are techniques for reliably giving users quick access to content items that are important to them without draining computer resources.

Additional features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the disclosure will become more fully apparent from the following description and appended claims or can be learned by the practice of the principles set forth herein.

Disclosed are systems methods and non transitory computer readable storage media for reliably giving users quick access to content items that are important to them without draining computer resources. The disclosed technology can predict what content items a user finds important and can send those items to a cache on the user s device at times when doing so will not drain resources and will not result in expensive data rates.

Predicting what items a user will want locally cached can involve applying a ranking function to all of the user s content items stored in a synchronized content management system. The ranking function can involve a score that is generated based on the recency of the content items being opened shared edited emailed etc. The ranking function can involve a plurality of variables including whether a user explicitly states that a content item is important how frequently a content item is modified whether the content item is also stored in a lower resolution etc.

Additionally the disclosed technology can base how much of the content should be cached on the user s device based on how much free space is available on the device and using only a portion of the free space. The most important content items i.e. the top of the ranked list can be selected until the point where adding a new content item would exceed the allocated portion of free space.

Similarly the disclosed technology can involve deciding when is a good time to send content items to the local cache. This can involve examining a device s stamina e.g. free space battery life hardware profile network conditions whether data transfer will involve data rates etc. Depending on the state of the device s stamina the technology can establish and dynamically adjust when and how content items are sent to the local cache.

The disclosed technology also involves user interface elements for simple navigation in a system that predicts what content items a user finds important and send those items to a cache on the user s device at times when doing so will not drain resources and will not result in expensive data rates.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the disclosure.

The disclosed technology addresses the need in the art for techniques for reliably giving users quick access to content items that are important to them without draining computing resources. The disclosed technology makes it fast and simple to find content items that are important to a user. More specifically he disclosed technology can predict what content items that a user finds important and can send those items to a cache on the user s device at times when doing so will not drain resources and will not result in expensive data rates. This can be particularly useful if traveling to a region with expensive data rates or lack connectivity.

With respect to implementing various embodiments of the disclosed technology an exemplary system configuration is shown in wherein electronic devices communicate via a network for purposes of exchanging content and other data. The system can be configured for use on a wide area network such as that illustrated in . However the present principles are applicable to a wide variety of network configurations that facilitate the intercommunication of electronic devices. For example each of the components of system in can be implemented in a localized or distributed fashion in a network.

In system a user can interact with content management system through client devices . . . collectively connected to network by direct and or indirect communication. Content management system can support connections from a variety of different client devices such as desktop computers mobile computers mobile communications devices e.g. mobile phones smart phones tablets smart televisions set top boxes and or any other network enabled computing devices. Client devices can be of varying type capabilities operating systems etc. Furthermore content management system can concurrently accept connections from and interact with multiple client devices .

A user can interact with content management system via a client side application installed on client device . In some embodiments the client side application can include a content management system specific component. For example the component can be a stand alone application one or more application plug ins and or a browser extension. However the user can also interact with content management system via a third party application such as a web browser that resides on client device and is configured to communicate with content management system . In either case the client side application can present a user interface UI for the user to interact with content management system . For example the user can interact with the content management system via a client side application integrated with the file system or via a webpage displayed using a web browser application.

Content management system can make it possible for a user to store content as well as perform a variety of content management tasks such as retrieve modify browse and or share the content.

Content management system can include caching module that sends content to be cached in client device . The content can be that which a user accesses frequently indicates as a favorite or that it otherwise important. This content can be cached on client device .

Caching module can prioritize a list of content items stored for a user and can automatically send a subset of the content items representing high priority content items to client for caching. Caching module can determine high priority content items by generating a scaling factor for all of the content items stored for a user and selecting a subset of content items having a threshold scaling factor.

Additionally caching module can use information about client device to decide when and how much content to cache. For example caching module can use information about client s battery life free space hardware capabilities network connection type cost associated with connection over a network etc. to determine when and how to cache content items.

Also content can be cached on client device in one or more representation quality levels. For example a thumbnail version of a high resolution image can be cached on client device and when selected can be displayed while retrieving the full resolution image from content management system .

Prioritization of the list of content items stored for a user in a synchronized content management system selection of a subset of content items determination of device stamina and other caching techniques are explained in greater detail below.

Additionally content management system can make it possible for a user to access the content from multiple client devices . For example client device can upload content to content management system via network . The content can later be retrieved from content management system using the same client device or some other client device . Depending on the circumstances content can be cached on the same client device other client device both the same client device and the other client device or neither.

To facilitate the various content management services a user can create an account with content management system . The account information can be maintained in user account database . User account database can store profile information for registered users. In some cases the only personal information in the user profile can be a username and or email address. However content management system can also be configured to accept additional user information.

User account database can also include account management information such as account type e.g. free or paid usage information e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . The account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as digital data documents text files audio files video files etc. from one or more client devices authorized on the account. The content can also include folders or other mechanisms of grouping content items together with different behaviors such as collections playlists albums etc. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. Content management system can hide the complexity and details from client devices so that client devices do not need to know exactly where the content items are being stored by content management system . In one variation content management system can store the content items in the same folder hierarchy as they appear on client device . However content management system can store the content items in its own order arrangement or hierarchy. Content management system can store the content items in a network accessible storage SAN device in a redundant array of inexpensive disks RAID etc. Content storage can store content items using one or more partition types such as FAT FAT32 NTFS EXT2 EXT3 EXT4 ReiserFS BTRFS and so forth.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one variation each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies content storage can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage can store files more efficiently as well as provide the ability to undo operations by using a file version control that tracks changes to files different versions of files including diverging version trees and a change history. The change history can include a set of changes that when applied to the original file version produce the changed file version.

Content management system can be configured to support automatic synchronization of content from one or more client devices . The synchronization can be platform agnostic. That is the content can be synchronized across multiple client devices of varying type capabilities operating systems etc. For example client device can include client software which synchronizes via a synchronization module at content management system content in client device s file system with the content in an associated user account. In some cases the client software can synchronize any changes to content in a designated folder and its sub folders such as new deleted modified copied or moved files or folders. The client software can be a separate software application can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application a user can manipulate content directly in a local folder while a background process monitors the local folder for changes and synchronizes those changes to content management system . Conversely the background process can identify content that has been updated at content management system and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations and can provide indications of content statuses directly within the content management application. Sometimes client device may not have a network connection available. In this scenario the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system when a network connection is available. Similarly a user can manually stop or pause synchronization with content management system .

A user can also view or manipulate content via a web interface generated and served by user interface module . For example the user can navigate in a web browser to a web address provided by content management system . Changes or updates to content in the content storage made through the web interface such as uploading a new version of a file can be propagated back to other client devices associated with the user s account. For example multiple client devices each with their own client software can be associated with a single account and files in the account can be synchronized between each of the multiple client devices .

Content management system can include a communications interface for interfacing with various client devices and can interact with other content and or service providers . . . collectively via an Application Programming Interface API . Certain software applications can access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which can verify user credentials security tokens API calls specific client devices and so forth to ensure only authorized clients and users can access files. Further content management system can include analytics module module that can track and report on aggregate file operations user actions network usage total storage space used as well as other technology usage or business metrics. A privacy and or security policy can prevent unauthorized access to user data stored with content management system .

Content management system can include sharing module for managing sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The sharing can be performed in a platform agnostic manner. That is the content can be shared across multiple client devices of varying type capabilities operating systems etc. The content can also be shared across varying types of user accounts.

In some embodiments content management system can be configured to maintain a content directory identifying the location of each content item in content storage . The content directory can include a unique content entry for each content item stored in the content storage.

A content entry can include a content path that can be used to identify the location of the content item in a content management system. For example the content path can include the name of the content item and a folder hierarchy associated with the content item. For example the content path can include a folder or path of folders in which the content item is placed as well as the name of the content item. Content management system can use the content path to present the content items in the appropriate folder hierarchy.

A content entry can also include a content pointer that identifies the location of the content item in content storage . For example the content pointer can include the exact storage address of the content item in memory. In some embodiments the content pointer can point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry can also include a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module can be configured to add a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module can be configured to generate a custom network address such as a uniform resource locator URL which allows any web browser to access the content in content management system without any authentication. To accomplish this sharing module can be configured to include content identification data in the generated URL which can later be used to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. Upon selection of the URL the content identification data included in the URL can be transmitted to content management system which can use the received content identification data to identify the appropriate content entry and return the content item associated with the content entry.

In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created. For example the URL flag can be a Boolean value initially set to 0 or false to indicate that a URL to the content item has not been created. Sharing module can be configured to change the value of the flag to 1 or true after generating a URL to the content item.

In some embodiments sharing module can also be configured to deactivate a generated URL. For example each content entry can also include a URL active flag indicating whether the content should be returned in response to a request from the generated URL. For example sharing module can be configured to only return a content item requested by a generated link if the URL active flag is set to 1 or true. Thus access to a content item for which a URL has been generated can be easily restricted by changing the value of the URL active flag. This allows a user to restrict access to the shared content item without having to move the content item or delete the generated URL. Likewise sharing module can reactivate the URL by again changing the value of the URL active flag to 1 or true. A user can thus easily restore access to the content item without the need to generate a new URL.

While content management system is presented with specific components it should be understood by one skilled in the art that the architectural configuration of system is simply one possible configuration and that other configurations with more or less components are also possible.

As explained above content management system can include caching module that generates a prioritized list of content items and automatically sends a subset of content items that represent high priority content items to client for caching. In some embodiments of the disclosed technology generation of the prioritized list involves generating a scaling factor based on metadata associated content items and for all of the content items stored in content management system .

Caching module can also assign metadata values to content items. Some embodiments of the disclosed technology involve caching module assigning content items with a File Score and dynamically maintaining the File Score for the content items as it changes due to user interaction with caching module . The File Score can be an estimate of the probability that the user will want to access each particular content item on their client device . For example content management system can create a File Score based on the recency of a group of events.

In some embodiments of the disclosed technology creating a File Score based on recency can involve examining a last opened or last modified metadata value. In some other embodiments caching module can examine multiple more detailed recency related metadata values weight each value and generate a File Score. For example caching module can create a File Score by examining and weighting metadata values relating to how recently the item was opened from an interface from content management system how recently the item was opened in another application how recently the item was shared by a user of client device how recently the content item was shared to a user of client device how recently the content item was shared by a user of client device via another device how recently the content item was edited by the user of client device how recently the content item was opened by a user of client device via another non mobile device etc.

In addition to generating a priority list of content items to cache on client device caching module can also carry out a Caching Strategy. A caching strategy can involve determining when and how much content to send to client device for caching based on a condition of client device . In some embodiments of the disclosed technology caching strategy can involve examining an amount of free memory space available in client to define how much of that free space should be used to cache content items from content management system and consequently which top items from the priority list should be sent to client device .

In some embodiments caching module uses a predetermined percentage of client device s total free space. For example caching module can use the higher of twenty percent of free space on client device or one hundred megabyte. As the user of client device adds or deletes data from client device this percentage will change to accommodate a larger or smaller cache and content items are evicted or fetched accordingly. In some embodiments a time based smoothing function is applied when content is fetched or evicted to prevent thrashing and poor system performance.

Caching strategy can also involve determining client device s ability to inexpensively download store and process the caching of content items. This ability also referred to as Client Device Stamina is discussed in greater detail below.

When using a caching strategy tied to device free space different devices will have different cache sizes based on the device s specifications and usages. Accordingly basing a caching strategy on free space in client device can encourage platform agnosticism. This is because the caching module can maintain a global priority list of content items e.g. by using File Score receive a request from any client device independent of its specifications and cache content items to only fill a portion of client device so as not to unreasonably degrade client device stamina.

Next method involves calculating Fetch Priority for content items that are associated with the client device and that are stored in the synchronized content management system at block . Fetch Priority is score given to all content items associated with a particular user account in an attempt to hypothesize that content the user wants cached on a client device associated with that user account.

While the File Score is a global value that can be based on a more narrow set of metadata e.g. recency related metadata Fetch Priority is value individually tailored to form strategy for providing content items on a per device basis. Indeed in some embodiments of the disclosed technology the File Score is a factor in calculating Fetch Priority. Client Device Stamina and other variables can be used in a Fetch Priority calculation and are explained in greater detail below.

After calculating Fetch Priority method involves selecting a subset of the content items based on Fetch Priority and a percentage of the free space in the client device available for caching content items stored in the synchronized content management system. Selecting a subset of content items can involve generating a ranked list of content items based on Fetch Priority and selecting content items from the list with higher Fetch Priority values until the amount of free space for caching is full. Additionally selecting a subset of content items can involve adding content items explicitly requested in the user account.

Some embodiments of the disclosed technology involve storing multiple varying quality representations of content items that have been previously transcoded or transcoding content items into one or more varying quality representations and storing them. Fetch priority can be for each of the representations and its definition can be weighted to encourage caching of a lower quality representation in lieu of or in preemption to a higher quality representation.

Once a subset of content items is selected method involves determining that the client device has adequate client stamina explained below at block and automatically sending the subset of content items to the client device for caching at block .

As explained above a Fetch Priority calculation can use a number of factors for individually tailoring a strategy for caching content items on a per device basis. The following exemplary factors can be used 

Pinned Importance a value representing whether or not or representing a degree to which a user explicitly marks a content item as subjectively important as a favorite item etc 

Sync Score a value representing how frequently a content item is changed in the content management system and

Representation Quality a percentage describing the degree of quality of the content item when compared to an original e.g. a thumbnail representation of a photo can have a lower Representation Quality percentage .

The various factors in a Fetch Priority calculation can also be weighted and factored in algorithms that attempt to guess how a user might prefer content items that are cached in a client device.

In some embodiments the Fetch Priority value is defined as Fetch Priority Pinned Importance Weight Given to Pinned Importance File Score Weight Given to File Score 1 Representation Quality Weight Given to File Size Sync Score .

Using this function the Weight Given to Pinned Importance can be set to ensure that content items that are pinned as important favorite etc. are ensured a place in the cache. Likewise Sync Score can be set to a value such that only files with a positive Fetch Priority value should be cached.

Method also involves examining the Representation Quality level of a content item at block . As explained above a content item can be stored or transcoded and stored in a synchronized content management system in a plurality of Representation Quality levels and the varying quality versions content item can have different Fetch Priority values. Therefore so long as the other variables cause the Fetch Priority function to rank more than one varying quality version of the same content item high enough the more than one version can be cached on a client device.

Method also involves receiving user defined preferences at block the user defined preferences relating to which content items are cached how content items are cached when content items are cached etc.

In addition Fetch Priority can be calculated by using rules put into place by an operator of the content management system. For example the content management system can enforce rules that promote higher Fetch Priority values for a particular content item type e.g. camera uploads. Similarly the content management system can enforce maximum size limits to disallow large sized content items e.g. over five hundred megabytes.

Next method involves applying weights to the above received and examined variables at block and calculating a Fetch Priority based on a weight at block and the Fetch Priority result is modified per the user defined preferences at block .

Content elements represented by interface elements are cached due to their having a high Fetch Priority and their being in the top of the ranked list of . However as explained above Fetch Priority can be influenced by Pinned Importance with a user explicitly marking a content item as important. Indeed the Fetch Priority ranked list of can change after a user marks a content item represented by interface element as important. Likewise user interface can include flag interface element to show that the content item was marked as important and can include a filled circle indicator to indicate a full one hundred percent quality representation of the content item marked as important is cached when it might not otherwise be cached or when it might otherwise be cached at a lower quality representation.

Additionally user interface can include searching interface that can expose search hints such as kind flagged which a user can use to search for content items that has been marked as subjectively important. While a kind flagged search hint is shown in those with ordinary skill in the art having the benefit of this disclosure will readily understand that a wide variety other content item kinds can be searched with searching interface such as kind Word kind powerpoint kind photo kind video etc.

After identifying content items to cache a device can download and cache the content items according to dynamic schedule and at a dynamic fetch rate. Indeed the dynamic schedule and dynamic fetch rate can be tied to a device stamina value.

For example the dynamic schedule can involve determining whether the device is connected to the synchronized content management system via an adequate network connection that does not incur data rates. Likewise the dynamic fetch rate can involve determining whether the device has a predetermined threshold battery level before initiating a download for another content item to be cached.

Method involves examining an amount of free space on a client device at block examining amount of battery life remaining on the client device at block examining a hardware profile e.g. processing power RAM etc. of the client device at block examining network conditions experienced by the client device at block .

Using the examined variables method determines the Client Device Stamina at block and adjusts the Fetch Rate and Fetch Schedule based on the Client Device Stamina at block . Although specific steps are shown in in other embodiments the method can have more or fewer steps.

A static approach to Fetch Rate Fetch Schedule can cause problems during certain events. For example when a new device makes an initial link with synchronized content management system its free space can be very large. Also if the user of the device has a large number of content items existing already in the synchronized content management system then a large amount of content items will be transmitted to the device and cached locally thereon. Without modifying the Fetch Rate Fetch Schedule the device s stamina could drain very quickly. Accordingly some embodiments of the disclosed technology involve a technique for adjusting Fetch Rate Fetch Schedule that can be applied when an initial link to the synchronized content management system is first made. The technique involves temporarily setting the portion of available free space for caching very low and growing it over time. During this ramp up if the device has a predetermined requisite stamina e.g. plugged in to power battery life greater than eighty percent connected to wifi then the adjusted technique can be replaced by a more aggressive caching technique can be put into place so long as the requisite stamina remains in place.

To enable user interaction with the computing device an input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with the computing device . The communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device can be connected to the system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user via user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

It can be appreciated that exemplary systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

In some embodiments the computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

