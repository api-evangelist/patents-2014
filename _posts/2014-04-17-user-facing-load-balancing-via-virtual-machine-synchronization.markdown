---

title: User facing load balancing via virtual machine synchronization
abstract: A native environment on a local device and a virtual environment on a server device linked to the native device over a network can concurrently execute. The concurrently executing can share state information to keep activities between both environments substantially time-synched. The native environment can be a user-machine interactive environment of a machine-to-user interactive interface. The native environment can perform stand-alone operation without appreciable end-user experience degradation. A process in the native environment requiring an excessive quantity of processing cycles can be detected. The native environment can not perform the processing using resources of the native environment. The virtual environment can perform the process and synchronize the result to the native environment, thereby permitting the native environment to continue to function as if the process was performed by the native environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09354928&OS=09354928&RS=09354928
owner: 
number: 09354928
owner_city: 
owner_country: 
publication_date: 20140417
---
This utility application converts and claims the benefit of U.S. Provisional Patent Application No. 61 815 303 filed Apr. 24 2013 U.S. Provisional Patent Application No. 61 820 240 filed May 7 2013 U.S. Provisional Patent Application No. 61 838 940 filed Jun. 25 2013 U.S. Provisional Patent Application No. 61 844 545 filed Jul. 10 2013 U.S. Provisional Patent Application No. 61 845 450 filed Jul. 10 2013 and U.S. Provisional Patent Application No. 61 980 218 filed Apr. 16 2014. The entire contents of each of the above provisional applications U.S. Application No. 61 815 303 61 820 240 61 838 940 61 844 545 61 845 450 and 61 980 218 are incorporated by reference herein.

The present invention relates to the field of load balancing and more particularly to user facing load balancing via virtual machine synchronization.

In today s mobile computing environment users often interact with multiple computers to perform work and life activities. For example many users interact with a work computer e.g. company owned and a personal computer e.g. user owned during a daily experience. Many times synchronization between these multiple devices must be manually configured and or manually performed before the devices are synchronized. This process can be time consuming and error prone due to user error network bandwidth limitations and or computing resource limitations.

In many instances when a computer operating system crashes any unsaved data is potentially lost and unredeemable. Current solutions permit the user to restart the operating system and the operating system and or the user can attempt to identify the problem. Frequently these crashes are erratic and are difficult to circumvent resulting in persistent crashes and lost data. This experience results in an unsatisfactory and frustrating episode for the user.

One aspect of the present invention can include a system an apparatus a computer program product and a method for concurrently executing a native environment on a local device and a virtual environment on a server device linked to the native device over a network. The concurrently executing can share state information to keep activities between the native environment and the virtual environment substantially time synched. The native environment can be a user machine interactive environment comprising a machine to user interactive interface. The native environment can be capable of stand alone operation without appreciable end user experience degradation. A process in the native environment requiring an estimated quantity of processing cycles to be consumed for completion that exceeds a previously established cycle threshold or requiring an estimated duration for completion that exceeds a previously established duration threshold can be detected. The native environment can not perform the processing using resources of the native environment responsive to detecting. The virtual environment can perform the process and can synchronize the result of the process to the native environment thereby permitting the native environment to continue to function as if the process was performed by the native environment.

Another aspect of the present invention can include a system a computer program product an apparatus and a method for concurrently executing two or more instances of a user session on two or more different computing devices. The devices can include a first device and a second device. The first device can execute a first instance of the two or more instances. The second device can execute a second instance of the two or more instances. The first device and second device can include hardware and software. The first device and second device can be remotely located from each other and can be communicatively linked to each other over a network. The second device can execute the second instance of the user session within a virtual machine running on the second device. The disclosure can maintain state across the instances of the user session in substantially real time. The state affecting changes can be made in either the first instance or the second instances can be communicated to other ones of the instances to maintain a synchronized state for the user session. The first instance and second instance of the user session are capable of independent handling of the user session.

Another aspect of the present invention can include a method a computer program product an apparatus and a system for load balancing and more particularly to user facing load balancing via virtual machine synchronization. A synchronization engine can be configured to persist a time synchronized computing session associated with a native environment to a virtual environment. The native environment and virtual environment can execute concurrently. A data store can be able to persist at least one of a synchronization mapping a state information and a configuration setting.

The present disclosure is a solution for user facing load balancing via virtual machine synchronization. In the solution a virtual machine can be synchronized with a computing device. The synchronization can replicate the computing device state. In one instance a complex computation which can be prohibitive to execute on computing device can be executed on the virtual machine. In the instance the computation can yield a result which can be conveyed to the computing device via a state synchronization. That is the virtual machine state can be conveyed to computing device which can permit computing device to utilize the result without performing the complex computation.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

In scenario a virtual machine can be synchronized with computing device to permit the functionality of the disclosure. For example a tablet computing device can be synchronized with a remote VMWARE virtual machine via one or more networks. In scenario a complex computation can be detected within an application and the computation can be performed on machine . For example a complex graphic rendering can be detected within a video game application and the rendering can be performed on a server hosting virtual machine . In scenario state can be conveyed to device via synchronization data which can produce synchronized state with output .

It should be appreciated that in scenario device and machine can concurrently execute executable environments which can perform traditional and or proprietary functionalities. The executable environments can include but is not limited to an operating system an application e.g. and the like.

In scenario a computing device and a virtual machine can execute an application . For example the application can be a desktop publishing application executing on a desktop computer. The application can be associated with a state which can be a finite state associated with a computing session. For example state can be a data set associated with a memory state of a device operating system. The state can include but is not limited to state information state metadata state settings and the like. State information can include but is not limited to timing data e.g. timestamp memory data e.g. pointers application state information thread information e.g. thread state process information central processor unit state information e.g. opcode and the like. In one embodiment state information can include information associated with power management states including but not limited to sleep hiberanate virtual machine suspension and the like. The application state can be synchronized to a virtual machine as application synchronized state . Synchronization can utilize synchronization data to permit application to be in an identical state to application . In the instance synchronization data can be utilized to initialize and or create virtual machine .

In scenario the application can include a complex computation which can be detected by device e.g. operating system process . For example a complex computation can be a mathematical operation of a cryptography algorithm. In one instance the detection can be achieved through traditional and or proprietary algorithm analysis techniques. For example detection can determine algorithm complexity using one or more run time analysis techniques. The detection can trigger a notification to be conveyed to virtual machine . The notification can initiate the complex computation to be performed by application as complex computation execution . In one instance the computation can be omitted by device . Execution can be performed in real time or near real time.

In scenario the execution of computation can produce output . The state can be conveyed to device as synchronized state resulting in output being achieved without device performing computation . That is the computation is not being performed in parallel on machine and device but rather only on machine . In this manner the disclosure can sidestep traditional process thread synchronization problems including but not limited to software lockout race conditions inconsistencies and the like. In one instance the computation can be performed by one more virtual machines in parallel utilizing traditional and or proprietary computing mechanisms.

It should be understood that the disclosure can utilize parallel computing conventions e.g. task parallelization . It should be appreciated that computation can include one or more executable branches of logic code which can be separately performed on device and or machine . In one instance computation can include a trivial execution and a complex execution. In the instance the trivial execution can be performed on device and the complex execution can be performed on machine . That is device can continue to operate without interruption during complex computation execution processing.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in this regard. It should be appreciated that the disclosure does not delay expensive computations on device but rather utilizes different existing computing resources e.g. proximate remote to perform the computations and synchronize a finished execution state to obtain the computation output on the computing device . Device and or machine can conform to traditional and or proprietary architectures. In one embodiment device and or machine architecture can conform to x86 processor architecture.

It should be appreciated that the disclosure can utilize operating system level virtualization application virtualization and the like.

As used herein synchronization can include synchronization of processes and or synchronization of data. Process synchronization can include multiple process synchronization in which multiple processes handshake at a certain execution point to commit to a certain sequence of action. Data synchronization can include storing multiple copies of a dataset in coherence with one another or to maintain data integrity. Process synchronization primitives can be used to implement data synchronization. It should be appreciated that the scenario utilizes data synchronization to achieve process synchronization objectives but is not limited in this regard.

Data synchronization can include but is not limited to file synchronization cluster file system synchronization cache coherency redundant array of inexpensive disk RAID synchronization e.g. mirroring database replication journaling and the like.

As used herein in one embodiment a virtual machine VM can be a completely isolated guest operating system installation within a normal host operating system. Virtual machines can be implemented with either software emulation and or hardware virtualization. That is a virtual machine VM can be a software implementation of a machine e.g. computing device which executes programs similarly to that of a physical machine.

Virtual machine can include into two categories based on their use and degree of correspondence to a real machine. A system virtual machine can provide a complete system platform which supports the execution of a complete operating system OS . In contrast a process virtual machine is designed to run a single program which means that the VM can support a single process. An essential characteristic of a virtual machine is that the software running inside is limited to the resources and abstractions provided by the virtual machine such that the software cannot break out e.g. execute logic code of its virtual environment.

VM can include but is not limited to multiple OS environments which can co exist on the same computer in strong isolation from each other. The virtual machine can provide an instruction set architecture ISA which is approximately different from that of the real machine. In the disclosure traditional functionality of VMs can be leveraged to enable the functionality to be implemented for device . The functionality can include but is not limited to providing application provisioning maintenance testing high availability disaster recovery and the like.

Process VMs e.g. application virtual machine can execute as a normal application inside a host OS and can support a single process. The VM can be created when the process is started and destroyed when exits. That is process VMs provide a platform independent programming environment that abstracts away details of the underlying hardware or operating system and allows a program to execute in the same way on any platform. In one instance virtual machine can be a process virtual machine associated with application e.g. process . In one instance a process VM e.g. machine can conform to a JAVA VIRTUAL MACHINE JVM a PARROT VIRTUAL MACHINE .NET Framework e.g. Common Language Runtime and the like.

In one embodiment machine can utilize full virtualization of hardware e.g. device and can be implemented using a Type 1 or Type 2 hypervisor. A Type 1 hypervisor can run directly on the hardware. A Type 2 hypervisor can run on another operating system e.g. Linux . Each virtual machine can run any operating system supported by the underlying hardware.

In step a computing device can be identified. Identification can be performed manually and or automatically. For example an automated registration can be performed by the disclosure when the device is powered on or started from a low power state e.g. sleep . In step an appropriate virtual machine can be selected. The virtual machine selection can be performed manually and or automatically. In one instance virtual machine can be selected automatically by architecture type proximity e.g. physical bandwidth capacity e.g. available high speed routes and the like. In step if the device and the VM states are synchronized the method can continue to step else proceed to step . In step synchronization type and relevant synchronization data can be determined. Synchronization type can include asynchronous communication synchronous communication and the like. In step the synchronization can be performed based on the synchronization type. In step logic code to be executed on the computing device can be identified. In step if the complex computations within the logic code which exceed the devices resources is detected the method can continue to step else proceed to step . In step a synchronization message can be conveyed to the virtual machine to execute the logic code. For example state data including the logic code and the current state of the computing device can be conveyed to the virtual machine. In step the virtual machine can execute the logic code. The method can return to step . In step the computing device can execute the logic code.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated that the method can perform step after the execution of step and or step . That is the method can enable real time or near real time device and machine synchronization.

Synchronization server can be a hardware software entity for executing synchronization engine . Server can include but is not limited to synchronization engine session data store interface and the like. Server functionality can include but is not limited to data anonymization encryption file sharing desktop sharing capabilities e.g. remote desktop and the like. In one embodiment server can be a component of a Service Oriented Architecture. In one instance server can be a functionality of a virtual machine . In one embodiment server can include message handling capabilities. For example server can facilitate synchronization message communication and or processing. In one embodiment server can coordinate virtual machine operation. In the embodiment one or more virtual machines can be dynamically employed e.g. dynamic pooling by server to perform computation .

Synchronization engine can be a hardware software component for synchronizing a computing device with a virtual machine . Engine can include but is not limited to device handler state manager synchronizer settings and the like. Engine functionality can include but is not limited to session initiation session management session termination session conflict resolution and the like. In one instance engine can be a component of a networked computing environment distributed computing environment and the like. In one embodiment engine can be a functionality of a computing device operating system . In one instance engine can communicate state changes e.g. deltas between machine and device to overcome bandwidth and or resource limitations.

In one embodiment engine can be a computing cloud based element performing cloud computing functionality. In the embodiment engine can provide synchronization services to cloud capable devices e.g. device .

Device handler can be a hardware software element for managing device and or machine . Handler functionality can include but is not limited to device registration machine registration presence information management resource allocation determination and the like. In one instance handler can be utilized to determine processor architecture type of device operating system memory quantity and the like. In the instance handler can utilize acquired device metadata to establish an appropriate virtual machine . In one instance handler can be utilized to dynamically adjust machine based on changes in device configuration computational resource requirements and the like. For example handler can permit machine to dynamically utilize multiple processors based on computation complexity. In one embodiment handler can facilitate horizontal and or vertical scaling based on computational complexity.

State manager can be a hardware software component for managing synchronized state . Manager functionality can include but is not limited to state persistence state monitoring state changes and the like. For example manager can capture snapshots of an application state during runtime. In one embodiment manager can be a functionality of an operating system and or an application. Manager can utilize synchronization mapping to perform state synchronization. For example manager can track the state e.g. State A of a process e.g. Process A within a device e.g. Device B . In one instance manager can coordinate synchronization messages in response to a state change. In the instance synchronization messages can be conveyed between device and machine . It should be appreciated that server can be utilized to communicate messages e.g. message proxy .

Detector can be a hardware software element for identifying and or determining computation . Detector functionality can include but is not limited to algorithm analysis resource monitoring e.g. processor usage complex instruction detection e.g. floating point arithmetic and the like. In one embodiment detector can utilize historic computational information to determine computation complexity and or runtime requirements. It should be appreciated that detector can be utilized in the presence of multiple processors.

Settings can be one or more options for configuring the behavior of system engine machine and or device . Settings can include but is not limited to engine options handler settings manager options detector settings session options and the like In one instance settings can be presented within interface an interface associated with device and the like. Settings can be persisted within data store device machine and the like.

Session can be a semi permanent interactive information interchange between two or more communicating devices and or a computer and a user. Session can include but is not limited to stateful session stateless sessions and the like. Session can include but is not limited to synchronization data synchronization mapping and the like. In one instance session can include a desktop sharing session. Synchronization data can include but is not limited to thread identification data process identification data file synchronization data cache coherency data checkpointing data and the like. In one embodiment data can include but is not limited to inputs outputs and the like.

Data store can be a hardware software component able to persist synchronization mapping synchronization data settings and the like. Data store can be a Storage Area Network SAN Network Attached Storage NAS and the like. Data store can conform to a relational database management system RDBMS object oriented database management system OODBMS and the like. Data store can be communicatively linked to server in one or more traditional and or proprietary mechanisms. In one instance data store can be a component of Structured Query Language SQL complaint database.

Synchronization mapping can be one or more data sets for synchronizing operating system with guest operating system . Mapping can include but is not limited to a device identifier process identifier state identifier a timestamp and the like. In one instance mapping can be manually and or automatically generated in real time or near real time. In one embodiment mapping can be dynamically updated based on state . Mapping can be include multiple processes mapped to a device multiple states mapped to a process multiple states mapped to a device and the like. In one embodiment mapping can permit engine to persist multiple viable states for device . In the embodiment engine can permit state selection state execution and the like. For example mapping can permit a dual boot e.g. two operating systems device to persist a state for each execution environment.

Interface can be a user interactive component permitting interaction and or presentation of mapping . Interface can be present within the context of a Web browser application virtual machine application system setting interface and the like. In one embodiment interface can be a screen of a VIRTUALPC configuration interface. Interface capabilities can include a graphical user interface GUI voice user interface VUI mixed mode interface and the like. In one instance interface can be communicatively linked to computing device.

Virtual machine can be a hardware software entity for executing guest operating system OS . Machine can include a physical device a logical device and the like. Machine can include but is not limited to a virtual machine server a virtual machine client and the like. For example machine can be a VMWARE ESX or ESXi enterprise software hypervisor. In one instance machine can be a VMWARE WORKSTATION VM a VIRTUAL PC VM a VIRTUALBOX VM a PARALLELS WORKSTATION VM a VIRTUAL IRON VM and the like. In one embodiment machine can include server functionality which can be utilized to perform distributed computing actions. In the embodiment machine can harness communicatively linked devices and or virtual machines to perform computation .

Guest OS can be a collection of software which can manage computer hardware resources and or provides common services for computer programs. OS can include but is not limited to real time operating systems non real time operating systems and the like. OS can include but is not limited to MICROSOFT WINDOWS APPLE MAC OS e.g. OS X UNIX LINUX QNX GOOGLE CHROME OS EYEOS and the like. In one embodiment OS can include mobile operating systems in including iOS ANDRIOD and the like. OS can include but is not limited to a synchronized state OS data and the like. It should be appreciated that guest OS do not have to be compliant with the hardware .

Computing device can be a hardware software entity for executing operating system . Device can include but is not limited to a hardware a software and the like. Hardware can include but is not limited to processor volatile memory non volatile memory bus and the like. Hardware can include input components such as a keyboard a mouse a stylus a touchscreen a gesture capture device a camera and the like. Harare can include output components such as a loudspeaker a display and the like. Software can include but is not limited to operating system firmware and the like. Operating system can include synchronized state applications and the like.

Synchronization message can be a data set for synchronizing device with machine . Message can conform to traditional and or proprietary messaging standards. Message can include but is not limited to synchronous message passing asynchronous message passing and the like. Message format can include an Extensible Markup Language XML message Simple Object Access Protocol message Common Object Request Broker Architecture CORBA and the like. Message can conform to one or more Internet protocols including but not limited to Hypertext Transport Protocol HTTP Hypertext Transport Protocol Secure HTTPS and Simple Text Oriented Message Protocol STOMP and the like. In one embodiment message can be associated with a message queue. For example message can include a VFABRIC RABBITMQ architecture.

Computation can be one or more executable logic code operating within an operating system . Computation can include but is not limited to information processing algorithm execution and the like. Computation can include data metadata and the like. In one instance computation can include but is not limited to a virtualization executable logic an executable logic event a transaction based event a data loss event a software licensing restriction a data replication operation and the like.

In one embodiment the disclosure functionality can be embodied within an Application Programming Interface. In the embodiment the API can conform to traditional and or proprietary conventions. In one instance the API can conform to industry conventions permitting existing operating systems to access the functionality of the disclosure. In one embodiment the disclosure can be a functionality of a pre execution environment PXE . In the embodiment the pre execution environment can communicated via a network interface to obtain a synchronized state

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated that the disclosure can multiple synchronized states for different run levels e.g. multi user single user associated with multi user operating systems. It should be appreciated that virtual machine can include multiple VMs each running their own operating system e.g. guest operating system . It should be understood that synchronization within the disclosure can include maintaining memory coherence cache coherency and the like.

In browser environment embodiment a device can execute a Chrome operating system OS . The OS can include a sandboxed execution environment such as a GOOGLE NATIVE CLIENT NaCl . The NaCl software can execute one or more applications. For instance the environment can execute a GOOGLE QUICK OFFICE application. The application can include a synchronized state which can be linked to state of environment within virtual machine . That is the virtual machine can be time and or state synchronized with activities occurring within the NaCl sandbox.

In one embodiment the functionality of embodiment can be encapsulated within a Web browser plug in. In another embodiment the functionality of embodiment can be present within a process of an operating system.

It should be understood that NaCl is a sandboxing technology of an execution environment e.g. Chrome OS and can execute Web based applications as native code the NaCl can include states similar to an execution environment. That is the NaCl can be a sandboxed execution environment within an execution environment e.g. Chrome OS . In one instance NaCl can execute within a GOOGLE CHROME browser. It should be appreciated that NaCl can include portable variants such as GOOGLE PEPPER. It should be appreciated that state can include multiple application states and or NaCl system state. In one embodiment the disclosure can be a functionality of an Application Programming Interface API e.g. Pepper Plugin API .

In universal state embodiment a user can utilize a device and can be interrupted by event . For example device can execute a functionality which can trigger a system failure e.g. crash . That is user interaction can be interrupted temporarily and or permanently. In the embodiment device state can be conveyed to virtual machine prior to the event . Machine can persist state as a synchronized state . That is state can be a recent state of device prior to event occurrence. In one instance detection of event can trigger the synchronization of state . Synchronization of state can be performed employing traditional and or proprietary state persisting mechanisms.

In one configuration of the instance the disclosure can automatically detect devices proximate to user e.g. device . In one embodiment the disclosure can programmatically detect proximate devices based on historic device usage device proximity user preferences and the like. In the configuration the disclosure can convey synchronized state to device upon user interaction with device . User can interact with device with state . That is user can seamlessly interact with a previous state e.g. state of a device e.g. device on a different device e.g. device . It should be appreciated that the functionality of the embodiment can be performed without a persistent network connectivity.

In deployment embodiment a device can execute one or more applications . Applications can be associated with a state . State can include application revisioning information user preferences and the like. In the embodiment virtual machine can utilize state to perform an application upgrade . For example application can be an outdated revision of a Web browser which can be upgraded to a newer revision. In the embodiment one or more conflict resolution actions can be performed to determine a successful application upgrade . In one instance one or more conflicts can be conveyed to a user to inform the user of potential changes to application . Upon completion of application upgrade the state can be created. That is the state can be a computer state with a successfully upgraded version of application .

In one embodiment a deployment action e.g. performed by the virtual machine can be executed which can convey state to device . In the instance the deployment action can update device with state resulting in device having an upgraded application.

It should be appreciated that the disclosure can be utilized to perform operating system upgrades firmware upgrades and the like. In one embodiment the disclosure can enable rapid porting of device settings software e.g. drivers applications user preferences and the like. For example when a new computer is purchased an existing state of a previous computer can be deployed to the new computer. In one instance computer resellers can leverage the disclosure capability to reduce software costs by deploying an existing installation of an operating system application and the like.

In backup embodiment a device can be synchronized with a virtual machine VM resulting in synchronized state to be replicated on VM as synchronized state . For example device can be a tablet device which can be state synchronized with a remote virtual machine e.g. cloud . In the embodiment synchronization state can be an identical replica of state . For example the state can be a real time representation of state . State can be utilized to backup device on backup server . That is a backup image can be created from state which can reduce network resource usage device resource usage and the like. In one instance multiple savepoints can be established for a single computing session. In the instance the savepoints can be selected to permit reversion of a previous state.

In software licensing a virtual machine can include a license manager which can enable software to be dynamically shared between device . Software can be associated with a license which can limit the software usage based on traditional and or proprietary policies. For example license can be a per node software license permitting a Software A to be executable on only one device at a time. In one embodiment the machine can persist a synchronized state which can be utilized to limit the usage of software . In the embodiment manager can employ a license to permit device to share software in accordance with the license . For example software can be installed upon device but can be accessible on device only when device is not operational. That is the disclosure can permit easy software sharing between multiple devices while complying with an existing licensing scheme. It should be appreciated that license can include any traditional and or proprietary licensing scheme. In one instance when a license is unavailable manager can utilize user preferences software settings administrative policies and the like to permit software usage. In one embodiment licensing manager can be associated with a synchronization engine .

In exclusivity embodiment a synchronized state within a device can include exclusive data . For example data can include sensitive data such as financial data of a user e.g. credit card information . Data can be associated with an exclusion policy which can be one or more rules for omitting data within state during a state synchronization . Exclusion policy can include but is not limited to a rule identifier a rule a data identifier an expiration timestamp a state identifier and the like. In the embodiment the state can be synchronized to virtual machine resulting in a synchronized state which can lack exclusive data .

It should be appreciated that exclusion policy can leverage existing security protocols procedures applications and the like. In one embodiment policy can establish storage restrictions for state with exclusive data persisted as state . In the embodiment virtual machine and state can be persisted as an encrypted file within a network. For example virtual machine can be a file stored within a hidden and or encrypted TRUECRYPT volume protected by a password and or a keyfile.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. In one instance virtual machine can be utilized to offload virus checking actions network intensive operations and the like from device . Since state is identical to state operations performed by the machine e.g. downloading large files and the result can be quickly synchronized to device .

In bonded channel embodiment data channel associated with device can be utilized in tandem to improve communication between device and virtual machine . For example a mobile phone and a laptop can be communicatively linked to a virtual machine . The virtual machine can execute a synchronization engine which can perform one or more traditional and or proprietary actions to bond data channel . The bonded channel can permit device and or device to communicate with machine utilizing both data channel . It should be appreciated that data channels can include but is not limited to near field communication technologies e.g. BLUETOOTH wireless communication technologies wired communication technologies and the like. It should be appreciated that data channels can include multiple disparate channels e.g. WiFi telephony 3G 4G WIMAX and is not limited to two channels. That is the disclosure can efficiently scale bandwidth based on available channels of proximate devices.

In metrics embodiment usage information from device can be communicated to machine . In one instance information can be conveyed as a step of a synchronization action associated with the disclosure. In one embodiment engine can include a metrics engine able to extract metrics from usage information. In the embodiment metrics can include but is not limited to selection information e.g. clicks interaction behavior e.g. applications used frequency and the like. In one instance metrics be conveyed to an analytics engine communicatively linked to engine and or engine . In the instance analytics engine can determine usage patterns . In one embodiment usage patterns can be utilized to perform targeted advertisement enhance usability e.g. recommendations and the like.

In resource sharing embodiment synchronization engine executing within a virtual machine can enable peer to peer resource sharing between device . For example engine can permit two proximate devices to share memory resources. Resources can include but is not limited to hardware resources software resources and the like. In one instance engine can include a resource manager able to determine resource availability. In the instance available resources can be shared between device . In one configuration embodiment can be enabled through the use of VM agents which can aid in the coordination of resource sharing.

The flowchart and block diagrams in the illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

