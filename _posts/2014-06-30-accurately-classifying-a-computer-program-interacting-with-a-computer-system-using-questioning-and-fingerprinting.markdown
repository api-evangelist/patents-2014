---

title: Accurately classifying a computer program interacting with a computer system using questioning and fingerprinting
abstract: Methods, systems, and computer program products for accurately classifying a computer program interacting with a computer system using questioning and fingerprinting are provided. A computer-implemented method may include issuing a challenge to an application interacting with a computer system to determine whether activity performed by the application is scripted, analyzing data associated with a result of the challenge to determine whether the result is at least partially correct, and computing a reputation score for the application based on the result of the challenge. A computer-implemented method also may include comparing the reputation score for the application to a threshold for identifying non-scripted activity, and determining that the activity performed by the application is scripted when the reputation score for the application does not meet the threshold for identifying non-scripted activity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09490987&OS=09490987&RS=09490987
owner: PAYPAL, INC.
number: 09490987
owner_city: San Jose
owner_country: US
publication_date: 20140630
---
The present invention generally relates to computer system security and more particularly to the detection and classification of scripted activity in computer systems.

Cybercrime is criminal activity involving computer systems. For example a computer system may be used to perpetrate a crime or may be a target of criminal activity. Such criminal activity may include unauthorized access to personal information credit card accounts bank accounts and other secure data. In addition cybercrime also may include the propagation of computer viruses and fraud using computer systems.

A script generally refers to a collection of executable computer language instructions stored in a file. Scripts usually are created to automate execution of the instructions by a computer system. Automated scripts are executed much faster and in greater number than what can be accomplished using human effort. As a result criminals routinely use automated scripts in cybercrime to minimize effort to increase overall numbers of targets and victims and to carry out sophisticated attacks through bypassing known security measures.

Accordingly improved methods of detecting and classifying automated scripts can aid in the identification prevention and mitigation of cyberattacks.

Systems methods and computer program products for accurately classifying a computer program interacting with a computer system using questioning and fingerprinting are disclosed. Examples of the present disclosure use questioning and fingerprinting to categorize applications interacting with a computer system as human operated automated scripts or driven by a combination of human interaction and automated scripts.

In an example an application running on a client device interacts with a web server providing access to a web based application. The web server receives a request from the client application e.g. web browser computer program computer script etc. and a script detection system issues one or more challenges either in response or as part of a response to test the client application. For example challenges may test capabilities of the client application to deter mine an application type of the client application. In one example challenges test whether the client application is a web browser or another type of computer program imitating a web browser regardless of how the client application has identified or represented itself.

In an example the script detection system analyzes results of challenges issued to the client application to associate the application with an application type analyzes fingerprint information collected about the client application and analyzes monitored activity performed by the client application. The script detection system also computes a reputation score based on one or more of these factors which indicates trustworthiness of the client application.

In an example the script detection system determines whether activity of the client application is scripted or manually performed based on one or more of challenge results information collected about the application activity performed by the application or the reputation score of the application. The script detection system also may classify scripted activity as automated or semi automated based on one or more of these factors. Further one or more actions may be triggered in response to the detection and classification of scripted activity based on a security level associated with a computer system.

Accordingly aspects of the present disclosure allow detection of scripted activity and classification of such activity as automated semi automated or manual using questioning and fingerprinting. Such detection and classification may be used to prevent and mitigate unauthorized computer system activity.

Data store is persistent storage that is capable of storing various types of data such as text audio video and image content. In some examples data store might be a network attached file server while in other examples data store might be some other type of persistent storage such as an object oriented database a relational database and so forth.

Client machines A N may be personal computers PC laptops mobile phones tablet computers or any other computing device. Client machines A N may run an operating system OS that manages hardware and software of the client machines A N. A browser not shown may run on the client machines e.g. on the OS of the client machines . The browser may be a web browser that can access content and services provided by a web server of server machine . Other types of computer programs and computer scripts also may run on client machines A N.

Server machine may be a rackmount server a router computer a personal computer a portable digital assistant a mobile phone a laptop computer a tablet computer a camera a video camera a netbook a desktop computer a media center or any combination thereof. Server machine may include a web server and a script detection system . In some examples web server and script detection system may run on one or more different machines.

Web server may serve text audio video and image content from data store to clients A N. Web server also may provide web based application services and business logic to clients A N. Clients A N may locate access and consume various forms of content and services from web server using applications such as a web browser. Web server also may receive text audio video and image content from clients A N that is saved in data store for purposes that may include preservation and distribution of content.

In an example web server is coupled to one or more applications servers not shown that provide applications and services to clients A N for example through web server . For example web server may provide clients A N with access to one or more applications which include but are not limited to banking electronic commerce e mail social networking etc. Such functionality also may be provided for example as one or more different web applications standalone applications systems plugins web browser extensions and application programming interfaces APIs . In some examples plugins and extensions may be referred to individually or collectively as add ons.

In an example some clients A N may include applications associated with a service provided by server . In one example one or more device types e.g. smart phones smart televisions tablet computers etc. may use applications to access content provided by server to issue commands to server to receive content from server without visiting or using web pages.

In an example functions performed by server and or web server also may be performed by the client machines A N in whole or in part. In addition the functionality attributed to a particular component may be performed by different or multiple components operating together. Server also may be accessed as a service provided to other systems or devices appropriate application programming interfaces and thus is not limited to use in websites.

In an example script detection system includes application verifier module application fingerprinting module activity analyzer module and activity classifier module . In other examples functionality associated with application verifier module application fingerprinting module activity analyzer module and activity classifier module may be combined divided and organized in various arrangements.

In an example application verifier module receives one or more user requests from an application running on a client A. In response application verifier module issues a challenge to the application to determine whether or not an application is a particular application type. For example application verifier module may challenge the application to perform one or more tasks or to answer one or more questions e.g. in a process of elimination . Application verifier module then may analyze one or more results of the challenges to determine whether or not the application is a web browser an automated script a shell browser automated by a script or another type of application. Thus application verifier module may determine an application type of an application based on whether the application is able or unable to perform certain tasks or answer certain questions in a manner consistent with an application type.

In an example application verifier module adaptively selects a challenge to present to the application from a collection of one or more available challenges. In one example application verifier module selects challenges randomly. Application verifier module also may select challenges adaptively or by using a process of elimination to determine whether an application is associated with a particular application type.

In an example application verifier module issues one or more challenges to an application at a particular time or at various times as a client A application interacts with server machine . For example application verifier module may issue one or more challenges as part of authentication and authorization of a user login. In one example application verifier module issues challenges to an application at various points throughout a session. For example application verifier module may issue a challenge to a client A application at random times or when the application seeks to perform one or more predetermined activities during a session.

In an example application fingerprinting module receives information about the application. For example application fingerprinting module may actively collect information from the application or may receive such information from another source that has gathered or receive the data.

In an example application fingerprinting module receives information associated with a client A application from one or more sources. For example information associated with an application may be collected from cookies supercookies user agents browser fingerprints flash shared objects network devices etc. Such sources may provide correct or altered information about what an application is what an application can do a computing device executing the application an environment where the application that executes a location of the computing device where the application executes etc. In one example application fingerprinting module analyzes information associated with a client A application from various sources to detect consistency and inconsistency as part of identifying and classifying scripted activity.

In an example activity analyzer module monitors and analyzes activity performed by a client application that interacts with a server machine web server or other computing system. In one example activity analyzer module analyzes timing of application requests to determine the likelihood of whether the activity is associated with an automated script. For example activity analyzer module may compare timing of application requests to baseline timing of human responses to determine whether the application requests are associated with scripted activity.

In an example activity analyzer module monitors and analyzes web pages and other objects accessed by a client A application navigation of a client A application through a web site or other type of target application repetition in the behavior of a client A application whether a client A application accesses multiple accounts and other various aspects of interaction between a client A application and a target computer system.

In an example activity classifier module calculates a reputation score or rating for a client A application interacting with a server machine or a web server . A reputation score or rating generally refers to a score classification or ranking which indicates trustworthiness of an application. In one example activity classifier module computes a reputation score for a client A application based on information provided by one or more of application verifier module application fingerprinting module and activity analyzer module . For example a reputation score may be based in part on comparing are what a client A application says it is to what script detection system determines the client A application to be.

In an example a client A application may indicate that it is a web browser via a user agent. However challenges that issued to the client A application may reveal that the application behaves like a PERL script. Therefore such a discrepancy generally may reduce the reputation score or rating of the application. Further activity performed by a client A application at a much faster rate than human performed activity also may lower the reputation score rating of the application. In contrast the reputation score for a client A application may increase for example incrementally when the application behaves in a manner matching an application type expected to be interacting with a computer system e.g. a web browser when the application behaves in a manner consistent with how it has identified itself or when the application appears to be operated by human rather than by an automated script.

In an example activity classifier module determines whether activity performed by a client A application is scripted and classifies the activity as automated semi automated or manually performed. In one example activity classifier module determines that client A application activity is scripted based on any single determination or finding provided by application verifier module application fingerprinting module or application analyzer module . Activity classifier module also may use the same information or other information to classify the activity as one of automated semi automated or manually operated and controlled.

In an example activity classifier module also may determine that client A application activity is scripted based on a combination of information or determinations provided by any two or more of the application verifier module application fingerprinting module and activity analyzer module . Activity classifier module also may use the same information or other information to classify the activity as one of automated semi automated or manually performed.

In an example activity classifier module determines that a client A application is associated with scripted activity when a reputation score for the application does not meet a predetermined threshold of trustworthiness for identifying non scripted activity. In one example activity classifier module classifies client A application activity determined to be scripted as automated or semi automated based on a computed reputation score for the application or information provided by any of application verifier module application fingerprinting module and activity analyzer module .

Method begins at block when script detection system issues a challenge to a client A application to determine a capability of the application. In one example application verifier module selects a challenge to issue to a client A application interacting with server machine from one or more available challenges or different collections of challenges designed to test capabilities of various application types. For example application verifier module may use challenges that are each configured to test capabilities of application types such as web browsers Java applications PERL scripts etc.

In an example a web browser is an accepted or approved application type expected to interact with a web application provided by web server . Application verifier module selects one or more challenges that it will issue to a client A application making requests to web server . For example application verifier module may seek to determine whether a client A application interacting with web server is a web browser a particular type of web browser or another application type.

In an example application verifier module issues a challenge written in the JavaScript programming language to a client A application that it expects to be a web browser. For example JavaScript code may be sent to a client A application as part of a response to a request. In one example web browser challenges may include asking a web browser to provide a list of installed plug ins to provide a list of available fonts to perform a mathematical calculation or to obtain a resource e.g. a file from a particular location. In one example application verifier module may select and issue a series of challenges randomly and or adaptively to prove or disprove that an application is associated with an approved or non approved application type.

In an example each challenge may be blocking or non blocking to client A application interaction with a server machine web server application server software application etc. For example a blocking challenge may require a client A application to first provide a response to an issued challenge before the application is permitted to continue interacting with a computer system. In an example a non blocking challenge allows a client A application to continue interacting with a computer system even when the application does not provide a response to the challenge. In one example a reputation score of a client A application is reduced or lowered when the application does not provide a response to an issued challenge.

In an example a non blocking challenge allows a client A application to continue interacting with a computer system for a limited period. For example a client A application may be permitted to continue interacting with a computer system for a limited period of time or for a limited number of requests before a response to an issued challenge is required. In one example a client A application session is disallowed or terminated when the application fails to respond to one or more challenges.

At block the script detection system analyzes a result of the challenge to associate a client A application with an application type. In an example application verifier module analyzes a result returned from a client A application in response to an issued challenge. In one example application verifier module compares a result of the challenge to an expected result for an application type tested by the challenge. For example application verifier module may issue a challenge designed to test whether a client A application is a web browser. A web browser specific challenge may inquire about a specific web browser details that are not available in other application types. Thus application types other than web browsers generally would not have the capability to answer web browser specific challenges.

In an example application verifier module associates a client A application with an application type based on its analysis of one or more challenge results. In one example application verifier module determines a probability that an application is associated with an application type based on results of one or more challenges. For example application verifier module may determine a probability that a client A application is associated with one or more different application types based on each challenge response provided by a client A application. Application verifier module then may conclude that the application is associated with one or more application types for example after a certain number of challenges have been issued based on a numeric threshold or when a statistical level of certainty has been met.

At block script detection system determines whether activity performed by a client A application is scripted. In an example script detection system determines that activity performed by a client A application is scripted when the application is unable to correctly answer or perform one or more challenges or a certain number or percentage of challenges. In one example script detection system also may determine that activity performed by a client A application is scripted when the application correctly answers or performs one or more challenges associated with a non approved application type for interacting with server machine or web server .

In an example script detection system determines that activity performed by a client A application is scripted based on analyzing the activity. In one example activity analyzer module analyzes a speed at which the activity is performed objects and functionality that are accessed navigation performed by the application activity repetition in behavior of the application activity patterns in application activity network traffic patterns in application activity data etc.

In an example activity classifier module determines that activity performed by a client A application is scripted when it detects that the activity is performed at a faster rate than human initiated activity associated with a similar computing device when the activity accesses certain objects or functionality when it detects the activity is performing anomalous website navigation when it detects a repetitive pattern in the activity or when it detects anomalous network traffic patterns or alphanumeric character strings associated with scripted activity.

In one example activity classifier module determines that activity performed by a client A application is scripted when information collected about the application by application fingerprinting module is inconsistent with information determined about the application by application verifier module based on results of one of more challenges. For example information about the application may be collected from cookies supercookies user agents browser fingerprints flash shared objects network devices etc. In one example a client A application is determined to be scripted when an application type found and information collected about the application does not match an application type that has been determined for a client A.

At block script detection system classifies the activity as automated or semi automated when it is determined that the activity is scripted. In an example activity classifier module classifies the activity of a client A application determined to be scripted as automated or semi automated activity. In one example automated activity generally refers to application activity that is determined to be performed by a computer system. Semi automated activity generally refers to application activity that is determined to be performed by a combination of a computer system and human effort.

In an example activity classifier module classifies activity of a client A application as automated. For example activity classifier module may classify a client A application as automated when detecting that an application type determined to be associated with the application is an unapproved application type i.e. not expected to interact with server machine or web server . In one example a web browser application may be an approved application type expected to interact with web server . However an application determined to be another application type a Java application PERL script etc. may be unapproved for interaction with web server .

In an example activity classifier module also may classify an application as automated when information collected about a client A application is inconsistent with an application type determined to be associated with the application. For example an application may identify itself as a web browser but the application actually may be determined to be a different application type based on a result of one or more challenges. In one example activity classifier module also may classify an application as automated even when information collected about a client A application is consistent with a determined application type. For example activity classifier module may classify application activity as automated based on analysis of client A application activity or a corresponding determination provided by activity analyzer module .

In an example activity classifier module classifies activity of a client A application determined to be scripted as semi automated. In one example activity classifier module classifies application activity as semi automated when analysis of the activity or a corresponding determination provided by activity analyzer module indicates that the activity is performed by some combination of computer system and human effort. For example a pattern or timing of activity performed by an application during a login process on server machine or web server may indicate that the activity is human driven. However a later pattern or timing of activity performed during an authenticated session resulting from the login process may indicate that another portion of the activity is performed by a computer system e.g. via execution of automated scripts .

In an example one or more actions are taken when scripted activity is detected and or classified as automated or semi automated. In one example responsive actions are performed based a level of sensitivity or confidentiality associated with an application or associated information. Thus actions taken in response to detecting automated or semi automated scripts may be tailored flexibly to any organization application situation etc.

In an example detection and classification of scripted activity triggers generation of a corresponding logged event with associated information. An alert also may be generated and transmitted to notify one or more parties of the event. In one example a security permission of a session involving the application determined to be performing scripted activity is adjusted. For example security permissions for a user may be modified from writeable to read only to prevent data modification. User access also may be restricted to a limited set of objects or functionality. In some examples sessions are terminated user accounts are disabled and access is blocked to a source of a client A application.

Method begins at block when script detection system receives a request from a client A application. In an example an application running on a client A interacts with server machine by sending a request to web server . For example an application running on A may access a landing page login page or transactional page of a web application provided by web server . The web application may provide services such as banking electronic commerce e mail social networking e mail etc.

At block script detection system receives collected information about the client A application. In an example application fingerprinting module collects or receives collected information about a client A application that interacts with server machine or web server . In one example application fingerprinting module collects or receives information from one or more of cookies supercookies user agents flash shared objects network diagnostics etc. The collected information for example may indicate attributes of the application aspects of an environment where the application executes attributes of a computing device that executes the application attributes of one of more network connections used by the application etc.

At block script detection system selects a challenge to issue to the client A application. In an example application verifier module selects a challenge to issue to a client A application based on an approved or expected application type that is to interact with server machine or web server . Application verifier module also may select a challenge to issue to the application based on information collected about the application received at block .

At block script detection system issues a challenge to the client A application to determine one or more capabilities of the application. In an example application verifier module issues the challenge selected at block to the application to determine whether the application has the capability to perform the challenge or to provide information requested by the challenge.

In an example application verifier module issues a challenge by sending JavaScript code to a client A application expected to be a web browser as part of a response to a request received from the application. In one example application verifier module issues the challenge to determine whether the application is a web browser by asking the application to perform an activity or to provide information that is inherent to a web browser. For example a standard web browser usually can provide a list of installed plug ins provide a list of available fonts perform a mathematical calculation and obtain a resource e.g. a file from a particular location. Application verifier module may select and issue a series of random or adaptive challenges to prove or disprove that an application is associated with an application type.

In an example application verifier module issues a challenge to a client A application asking the application to perform one or more activities using computer code provided by a computer system. For example the computer system may provide one or more types of computer code for a client A application to use when responding to a challenge. In one example a computer system provides computer code written in one or more custom or standardized computer languages e.g. C C C Java JavaScript PERL extensible markup language XML hypertext markup language HTML cascading style sheets CSS and or other computer languages to an application.

In an example application verifier module issues a challenge involving a CAPTCHA i.e. a Completely Automated Public Turing test to tell Computers and Humans Apart . For example a challenge may include a CAPTCHA comprising text identification numeric identification audio identification a task a puzzle a mathematical problem image recognition etc. Application verifier module also may issue one or more similar non CAPTCHA challenges.

In an example application verifier module issues a challenge involving word analysis. For example a challenge may ask an application to provide a count of characters in a word or alphanumeric string. A challenge also may ask an application to provide a count of vowels or non vowels in a word or string one or more positional references of an identified character numeral or symbol in a word or string etc. Further a challenge may ask an application whether one or more words have been spelled correctly.

In an example application verifier module issues a challenge involving sentence analysis. For example a challenge may ask an application to provide a count of words in a sentence. A challenge also may ask an application to identify whether a sentence is declarative imperative interrogatory or exclamatory. In one example a challenge may ask an application whether a sentence is properly formed or to identify one or more languages represented in a sentence etc.

In an example application verifier module issues a challenge involving one or more mathematical problems. For example a challenge may ask an application to solve a mathematical problem that is numeric an equation or a mathematical problem described in words. In one example a challenge may ask an application to provide a plurality of answers for a mathematical problem having at least two correct answers e.g. correct positive and negative answers etc. .

In an example application verifier module issues a challenge involving one or factual questions. For example a challenge may ask an application to demonstrate awareness of or an ability to locate one or more pieces of common knowledge. For example a challenge may ask an application to provide an answer to a question pertaining to science history geography literature entertainment etc. e.g. the capital of France the tenth U.S. president etc. .

At block script detection system analyzes a result of the challenge to associate the client A application with an application type. In an example application verifier module compares a response to a challenge received from a client A application to an expected result associated with an application type. For example application verifier module may analyze whether a result partially or fully matches expected result associated with an approved application type or an unapproved application type to determine whether the application is or is not associated with an application type.

In an example application verifier module may issue a series of challenges to a client A application for example randomly or adaptively. In one example application verifier module determines a probability that the application is associated with each of one or more application types. For example application verifier module may compute and re compute a probability that the application is associated with each of multiple application types based on results provided by a client A application in response to multiple challenges.

At block script detection system analyzes activity performed by a client A application. In an example activity analyzer module monitors activity of a client A application interacting with web server of server machine . In one example activity analyzer module may analyze timing e.g. speed latency cadence etc. of client A application requests and responses to determine whether the activity is initiated by a human automated script or semi automated script. For example activity analyzer module may compare timing of client A application activity to a preexisting timing baseline of similar activity as performed by a human to determine whether the application requests are associated with the scripted activity. In one example activity analyzer module analyzes website navigation performed by the activity repetition in the behavior of the activity whether the activity accesses or attempts to access multiple accounts etc. In some examples a reputation score of a client A application is adjusted e.g. positively or negatively based on one or more results of script detection system analysis of client A application activity.

At block script detection system computes a reputation score for the client A application. In an example activity classifier module computes a reputation score or rating indicating trustworthiness of a client A application interacting with web server of server machine . In one example activity classifier module computes a reputation score for an application based on a correlation between an application type that is determined to be associated with the application and information collected about the application. For example the more closely a client application behaves to how it identifies itself may result in a higher reputation score.

In an example a reputation score for a client application also may be influenced positively or negatively based on behavior of the application. For example application activity associated with anomalous timing or behavioral patterns may result in a reduction in reputation score where non suspicious activity may result in a consistent or improved reputation score. In one example a reputation score may be initially computed and updated any number of times as new information is observed or learned about a client A application.

In an example a reputation score is computed or adjusted based on one or more fonts associated with a client A application. In one example application fingerprinting module determines one or more fonts associated with a client A application such as a web browser based on application fingerprint information. Application verifier module also may ask an application to provide one or more associated or installed fonts.

In an example activity classifier module computes or adjusts an application s reputation score based on comparing one or more fonts installed on or associated with the application to one or more fonts expected to be installed on or associated with the application. For example an application that is missing one or more expected fonts may receive a reduction in reputation score. On the other hand an application having one or more expected fonts may receive a reputation score increase.

In an example a reputation score is computed or adjusted based on one or more add ons associated with a client A application. For example application fingerprinting module may determine one or more add ons installed on a web browser application based on fingerprint information. Application verifier module also may ask an application to provide a list of one or more add ons installed on or available to an application. In one example a reputation score of a client application is increased when an expected add on is identified as installed on the application. A reputation score also may be reduced or penalized when a client application is missing an add on that is expected to be installed.

In an example activity classifier module computes or adjusts a reputation score of a client A application based on analysis of one or more cached objects associated with the application. For example application verifier module may ask an application to provide a list of one or more cached objects associated with the application. Application fingerprinting module may determine a list of one or more cached objects associated with an application from application fingerprint information. In one example activity classifier module analyzes the one or more cached objects and adjusts a reputation score for an application based on whether one or more of the cached objects are determined to be legitimate e.g. non malicious cached user objects or whether one or more of the cached objects are associated with a malicious source malware spyware viruses etc.

In an example activity classifier module computes or adjusts a reputation score of a client A application based on header information provided by the application. For example activity classifier module may analyze header information provided by a client A during standard communication in response to an issued challenge in fingerprint information etc. In one example activity classifier module analyzes attributes values lengths and other characteristics of the client transmitted headers.

In an example activity classifier module increases or decreases a client A application reputation score based on the correctness and authenticity of header information provided by the application. For example activity classifier module may increase a reputation score when header information provided from a web browser application is complete correct accurate meets standards including but not limited to RFC 2616 etc. On the other hand activity classifier module may deduct value from a reputation score when header information is incomplete incorrect inaccurate contains a string of characters or behaviors indicative of scripted activity etc.

In an example activity classifier module increases a client A application reputation score when header information provided by the application e.g. via self identification matches header information received when communicating with the application. For example when a client A application identifies itself as a web browser e.g. a FireFox web browser a Safari web browser etc. of a particular version or release then certain aspects of header information received from that application usually match header information associated with the particular version or release of that web browser. In one example activity classifier module decreases a client A application reputation score when header information received from the application does not match header information associated with a self identified application type provided by the application. For example if a client A application self identifies as a web browser and header information received from the application matches a programming language library instead of web browser header information then it is more likely that the application is scripted and a reputation score of the application may be reduced accordingly.

At block script detection system determines that the activity performed by the client A application is scripted. In an example application verifier module determines that activity performed by a client A application is scripted when a client A application is unable to correctly respond to a challenge associated with an approved application type for interacting with server machine or web server . In one example application fingerprinting module determines that activity performed by a client A application is scripted based on information collected about the application. In one example activity analyzer module determines that activity performed by a client A application is scripted based on a pattern of anomalous timing or behavior that it detects when analyzing the activity.

In an example activity classifier module determines that application activity is scripted based on a reputation score computed for the application. In one example activity classifier module determines that a client A application interacting with web server is scripted when a reputation score computed for the application does not meet a predetermined threshold indicating that the application is trustworthy. In one example classifier module compares a reputation score computed for an application to a predetermined minimum threshold of trustworthiness each time the reputation score is updated based on new information.

At block script detection system classifies the activity as automated or semi automated in response to determining that the activity is scripted. In an example activity classifier module classifies activity of a client A application as automated or semi automated activity. For example activity classifier module may classify an application as automated by determining that an application type of an application is an unapproved application type for interacting with web server . Activity classifier module also may classify an application as automated when information collected about a client A application is inconsistent with an application type determined to be associated with the application. Activity classifier module also may classify application activity as automated based on analysis of the activity or a corresponding determination provided by activity analyzer module .

In an example activity classifier module classifies activity of a client A application as semi automated. In one example activity classifier module classifies activity as semi automated when it is determined that the activity is performed by a combination of computer system and human effort. For example application activity may be associated with human interaction at one point in a session and then may be associated automated execution by a computer system at another point in the session or vice versa . In one example activity classifier module may classify activity as semi automated based on a reputation score computed for the application.

In an example one or more actions are taken when scripted activity is detected or identified as automated or semi automated. In one example responsive actions are performed based a level of sensitivity or confidentiality associated with an application or associated information. Thus actions taken in response to detecting automated or semi automated scripts may be tailored flexibly to any organization application situation etc.

In an example one or more activities are performed in response to classifying application activity as automated or semi automated. For example an event may be logged an alert may be transmitted a security permission of a session or user may be modified a session may be terminated a user account may be disabled access may be blocked for a client A application or for a source of the application etc.

The exemplary computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM double data rate DDR SDRAM or DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting computer readable storage media. The instructions may further be transmitted or received over a network via the network interface device .

In one example the instructions include instructions for a script detection system e.g. script detection system of and or a software library containing methods that call a script detection system. While the computer readable storage medium machine readable storage medium is shown in an example to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present disclosure may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present disclosure.

Some portions of the detailed description have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as computing comparing applying creating ranking classifying or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Certain examples of the present disclosure also relate to an apparatus for performing the operations herein. This apparatus may be constructed for the intended purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other examples will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the disclosure should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

