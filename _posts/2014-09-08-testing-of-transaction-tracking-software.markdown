---

title: Testing of transaction tracking software
abstract: In a method for generating test transactions across computing systems, a first test function of a first program on a first computing system of a plurality of computing systems receives a plurality of instructions, wherein a first instruction of the plurality of instructions is to invoke a first transaction between a second function of the first program and a second program on a second computing system of the plurality of computing systems. The first test function of the first program causes the transaction between the second function of the first program on the first computing system and the second program on the second computing system. The first test function of the first program sends the plurality of instructions to a second test function on a third computing system of the plurality of computing systems, based on a second instruction of the plurality of instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384120&OS=09384120&RS=09384120
owner: International Business Machines Corporation
number: 09384120
owner_city: Armonk
owner_country: US
publication_date: 20140908
---
The present invention relates generally to the field of software testing and more particularly to the generation of data to test transaction tracking software across diverse topologies.

Transaction tracking software is software used to track transactions across multiple technologies protocols domains and operating systems. Tracking may be achieved by monitoring tracking events at strategic points in application flow.

Testing transaction tracking software typically involves developing a large repository of test applications and or scripts that drive individual transactions within a targeted environment. An external client may be used to drive transaction loads into middleware and other applications to generate test scenarios. Test scenarios may include the invocation of local services and the generation of transactions within the system or across multiple systems.

Aspects of an embodiment of the present invention disclose a method computer program product and computing system for generating test transactions across computing systems. A first test function of a first program on a first computing system of a plurality of computing systems receives a plurality of instructions wherein a first instruction of the plurality of instructions is to invoke a first transaction between a second function of the first program and a second program on a second computing system of the plurality of computing systems. The first test function of the first program causes the transaction between the second function of the first program on the first computing system and the second program on the second computing system. The first test function of the first program sends the plurality of instructions to a second test function on a third computing system of the plurality of computing systems based on a second instruction of the plurality of instructions.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code instructions embodied thereon.

Any combination of computer readable media may be utilized. Computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of a computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

In the depicted embodiment computing system includes computing device and servers A N interconnected over network . Network may be a local area network LAN a wide area network WAN such as the Internet any combination thereof or any combination of connections and protocols that will support communications between computing device and servers A N in accordance with embodiments of the invention. Network may include wired wireless or fiber optic connections. Computing system may include additional computing devices servers computers or other devices not shown.

Computing device may be a management server a web server or any other electronic device or computing system capable of receiving and sending data. In some embodiments computing device may be a laptop computer tablet computer netbook computer personal computer PC a desktop computer a personal digital assistant PDA a smart phone or any programmable electronic device capable of communicating with servers A N via network . In other embodiments computing device may represent a server computing system utilizing multiple computers as a server system such as in a cloud computing environment. Computing device contains test driver program and log database . Computing device may include components as depicted and described in further detail with respect to .

Test driver program operates to process received requests and send the requests to one or more applicable test agent programs of test agent programs A N. In some embodiments test driver program also operates to receive responses from one or more test agent programs of test agent programs A N and to store the responses to a database such as log database . Responses received from the one or more test agent programs may indicate information about the test scenarios such as the test services applications or protocols the test agent program invoked. Responses received from the one or more test agent programs may also indicate additional test agent programs such as one or more of test agent programs A N to which the received request was cascaded or forwarded. In one embodiment test driver program resides on computing device . In other embodiments test driver program resides on another server or another computing device provided that test driver program is accessible to test agent programs A N and provided that test driver program has access to log database and test agent programs A N.

Log database may be a repository that may be written and read by test driver program . In some embodiments returned responses from test agent programs A N are be stored to log database . In one embodiment log database resides on computing device . In other embodiments log database may reside on another server another computing device or one of servers A N provided that log database is accessible to test driver program .

Servers A N may each be management servers web servers or any other electronic devices or computing systems capable of receiving and sending data. In some embodiments servers A N may each be laptop computers tablet computers netbook computers personal computers PCs desktop computers personal digital assistants PDAs smart phones or any programmable electronic devices capable of communicating with computing device and other server of servers A N via network . In other embodiments servers A N may each represent a server computing system utilizing multiple computers as a server system such as in a cloud computing environment. Servers A N each contain software A N and test agent programs A N respectively e.g. server A contains software A and test agent program A server B contains software B and test agent program B . Embodiments of the present invention may include a greater or smaller number of servers A N than depicted in . Some embodiments of the present invention may only include a single server such as a single server selected from servers A N. Servers A N may each include components as depicted and described in further detail with respect to .

Software A N may each be generic programs middleware applications or other software. Each of software A N may be located within the test environment discussed with regards to test driver program . In some embodiments respective test agent programs A N are installed in the respective software of software A N. In other embodiments respective test agent programs A N are installed to the respective server of servers A N such that each test agent program of test agent programs A N has communicative access to the respective software of software A N. In one embodiment each of software A N reside on servers A N respectively. For example software A resides on server A and software B resides on server B. In other embodiments software A N may reside on other servers or other computing devices provided that test agent programs A N have access to software A N respectively.

Test agent programs A N may each operate to receive processed requests from test driver program and to parse and execute associated commands within the request. In some embodiments test agent programs A N also return responses to test driver program . Test agent programs A N may each also operate to discover information about the test environment and discover other test agent programs e.g. test agent program A may discover test agent program B such that processed requests received from test driver program may be cascaded i.e. forwarded to other test agent programs of test agent programs A N. Test agent programs A N may support application programming interfaces APIs protocols and other technologies available in the test environment and provide a discovery service capable of gathering information about the test environment including inter system connection details which can be used to invoke test scenarios. An API is intended to be used as an interface by software components to communicate with each other. In one embodiment test agent programs A N may invoke intersystem APIs to drive transactions and interactions across systems. Intersystem APIs may include APIs capable of driving transactions and interactions across multiple system environments.

Test agent programs A N may be interconnected using standard interconnection techniques appropriate to the associated application or middleware. For example test agent programs A N may be interconnected via techniques or protocols such as the distribution and replication protocol DRP hypertext transfer protocol HTTP simple object access protocol SOAP or by other techniques or protocols. In one embodiment test agent programs A N may be functions of software A N respectively. In one embodiment test agent programs A N may reside respectively on servers A N e.g. test agent program A resides on server A . In other embodiments test agent programs A N may reside on other computing devices or servers provided that test agent programs A N are accessible to test driver program and other test agent programs of test agent programs A N and provided that test agent programs A N have access to test driver program and respectively have access to software A N.

In step test driver program receives a structured request. A structured request may be a set of structured messages representing generic or specific transaction services. Structured requests may indicate which test service application or protocol is to be invoked including and required parameters or variables to be used as input. Structured requests may contain data that includes commands requests and parameters for interpretation and execution by a test agent program such as a test agent program selected from test agent programs A N. In some embodiments the structured request is enriched with application specific data based upon one or more of the target applications or middleware. In some embodiments the structured request includes syntax indicating one or more test agent programs to which the structured request is directed. In other embodiments the structured request may include syntax indicating that the request should be forwarded to additional test agent programs as discoverable by each test agent program of test agent programs A N to which the structured request is directed. In some embodiments test driver program receives structured requests via input from a user at computing device . In other embodiments a repository may store a set of scheduled requests and a program not shown may cause test driver program to receive structured requests at times specified by the program.

In step test driver program processes the structured request. Processing the structured request may include using the structured request information and any application specific data to build formatted messages. The formatted messages may be in a form capable of being received and understood by the one or more target test agent programs of target test agent programs A N as directed by the structured request. Formatted messages may be defined such that the data in the structured request can be forwarded to additional test agent programs of test agent programs A N for further action in accordance with the structured request.

In step test driver program sends the processed request to one or more test agent programs. In the depicted embodiment each test agent program is located on a server e.g. test agent program A is located on server A . In the depicted embodiment test driver program may send the processed request to applicable test agent programs selected from test agent programs A N via network as indicated by the contents of the structured request. Upon receipt of a processed request a test agent program of test agent programs A N may perform the steps as depicted and described with reference to in .

In step test driver program receives returned responses from applicable test agent programs such as one or more of test agent programs A N. Responses may be returned to test driver program via network after processing of the request and execution of applicable actions and the creation of test scenarios by the one or more of test agent programs A N. In some embodiments the structured request may indicate whether or not a response is required. If the structured request indicates that a response is not required test driver program may not return responses and the function would be complete. As previously discussed responses received from the one or more test agent programs may indicate information about the test scenarios such as the test services applications or protocols the test agent program invoked. Responses received from the one or more test agent programs may also indicate additional test agent programs such as one or more of test agent programs A N to which the received request was cascaded or forwarded.

In step test driver program stores the returned responses as applicable from the applicable test agent program s of test agent programs A N. Test driver program may store returned responses to a repository or database such as log database on computing device . In other embodiments test driver program may store returned responses to another device or location. If the structured request indicated that no response was necessary step will not occur and the function is complete.

In one embodiment initially a structured request has been processed by test driver program and sent to test agent program via network .

In step test agent program receives the processed request. Test agent program may receive processed requests from test driver program via network . The processed request may represent a generic or specific transaction service. The processed request may indicate to test agent program which test service application or protocol is to be invoked by test agent program and the processed request may indicate any required parameters. Some processed requests may include additional requests that may require additional application specific data which can be included with the processed request generated by test driver program . Additional requests may include services such as web services message queuing services database services local services or other service requests. In some embodiments prior to receiving the processed request test agent program may be in a passive state listening for processed requests and test agent program will only activate upon receiving a processed request.

In step test agent program parses the processed request and executes any associated commands within the processed request. The processed request may indicate which test services applications programs APIs or protocols to invoke. Parsing the processed request may include reading and interpreting the request. For example a processed request may name a program and provide parameters for the program s invocation. Test agent program may parse the data and then invoke the program with the supplied parameters. In addition the processed request may indicate that the request or data should be forwarded or cascaded to one or more additional test agent programs A N.

Based on the information in the request test agent program may invoke one or more test services applications or protocols. Test agent program may utilize available APIs protocols applications and or programs as directed by the processed request to invoke behaviors capable of being monitored by transaction tracking software. Transaction tracking software may be installed into the same test environments as test agent program and test agent programs A N. Transaction tracking software may monitor the behaviors and transactions initiated by test agent program . Some processed requests may indicate one or more specific test agent programs of test agent programs A N to cascade the processed request while other processed requests may indicate that test agent program should provide discovery services. Discovery services may include gathering information about the test environment within with test agent program resides. Discovery services may additionally include providing inter system connection details and other test agent programs of test agent programs A N that are communicatively accessible to test agent program .

In decision test agent program will determine whether to cascade the processed request to one or more of test agent programs A N. Test agent program may determine to cascade the processed request to one or more of test agent programs A N if the processed request indicates that one or more specific test agent programs of test agent programs A N receive the processed request. Alternatively test agent program may determine to cascade the processed request to one or more of test agent programs A N if the processed request indicates that the request should be cascaded to all discoverable test agent programs A N or to test agent programs A N associated with particular middleware applications or systems.

If test agent program determines not to cascade the processed request decision no branch test agent program will return the responses of the execution of commands associated with the received processed request to test driver program step for storage as discussed with reference to . Test agent program may determine not to cascade the processed request if the processed request does not indicate that the request should be cascaded to any specific or discoverable test agent programs of test agent programs A N. Alternatively test agent program may determine not to cascade the processed request if test agent program determines that there are no discoverable test agent programs A N communicatively accessible to test agent program . Once all responses are returned to test driver program the function is complete.

If test agent program determines to cascade processed requests decision yes branch test agent program may utilize discovery services to discover other test agent programs such as test agent programs A N communicatively accessible to test agent program step . In some embodiments the processed request may indicate specific test agent programs of test agent programs A N to which the processed request should be forwarded to and that discovery is not necessary which may result in a bypass of step . Test agent program may discover other test agent programs such as test agent programs A N by gathering information about the test environment including inter system connection details. Test agent program may support the APIs protocols and other technologies available in the test environment and utilize these tools to discover other test agent programs such as test agent programs A N. For example in some systems connected systems can be queried by an API. In such a system test agent program could issue a call to the system to retrieve a list of connected systems and then test agent program could use the list of connected systems to invoke additional test agent programs such as one or more of test agent programs A N on connected systems.

In step test agent program sends the processed request to applicable test agent programs such as test agent programs A N. Applicable test agent programs may include test agent programs discovered by test agent program via the discovery services described above. Applicable test agent programs may also include test agent programs specified in the received processed request. Upon receipt of the processed request each test agent program of test agent programs A N will perform similar steps to parse and execute commands associated with the request and potentially further cascade the request to additional test agent programs. In some embodiments parameters in the request may indicate that multiple related requests should be executed together across multiple test agent programs A N as a set.

In step test agent program returns the responses of the execution of commands associated with the received processed request to test driver program for storage as discussed with reference to . Responses generated by test agent programs A N may indicate information about the test scenarios such as the test services applications or protocols the test agent program invoked. Responses may also indicate additional test agent programs to which test agent program forwarded the request. Once the responses are returned to test driver program the function is complete. In some embodiments the processed request may indicate that returning a response is unnecessary and the function may be complete after executing and cascading the processed request.

Use case scenario depicts test driver program sending a request to test agent program A instructing test agent program A to invoke intersystem APIs A such that intersystem APIs A generates transactions and interactions such as intersystem interactions A N. In some embodiments test agent program A may utilize discovery services to discover intersystem APIs such as intersystem APIs A located within the environment. In addition the request may indicate that the receiving test agent program such as test agent program A invoke discovery services to cascade the request to additional test agent programs such as test agent programs B D or additional discoverable test agent programs not shown .

In scenario test agent programs A N are capable of driving intersystem APIs such as intersystem APIs A D from within middleware A D respectively. As depicted by scenario after receiving the request sent by test driver program test agent program A invokes intersystem APIs A to generate intersystem interactions A and B. Intersystem interactions A and B may include transactions or interactions that occur across systems capable of being monitored by transaction tracking technologies.

In scenario test agent program A also cascades the request to discovered test agent programs B and C. Based on the request this may cause test agent programs B and C to also invoke intersystem APIs B and C respectively. For example in scenario test agent program B invokes intersystem APIs B to generate intersystem interactions C and N.

Use case scenario is merely one depicted example of the present invention. Additional components software test driver programs test agent programs and interactions may be included in other embodiments. Intersystem interactions A N may include any number of interactions and transactions and the nature of the interaction may depend upon available APIs protocols and or additional factors.

Computing device and servers A N each include communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

Test driver program and log database are stored in persistent storage of computing device for execution and or access by one or more of the respective computer processors of computing device via one or more memories of memory of computing device . Software A N and test agent programs A N are stored respectively in persistent storage of servers A N for execution and or access by one or more of the respective computer processors of servers A N via one or more memories of memory of servers A N. In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Test driver program may be downloaded to persistent storage of computing device through communications unit of computing device . Software A N and test agent programs A N may be downloaded respectively to persistent storage of servers A N through communications unit of servers A N.

I O interface s allows for input and output of data with other devices that may be connected to computing device and servers A N. For example I O interface may provide a connection to external devices such as a keyboard keypad a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. test driver program and log database can be stored on such portable computer readable storage media and can be loaded onto persistent storage of computing device via I O interface s of computing device . Software and data used to practice embodiments of the present invention e.g. software A N and test agent programs A N can be each stored respectively on such portable computer readable storage media and can be loaded respectively onto persistent storage of servers A N via I O interface s of servers A N. I O interface s also connect to a display .

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

