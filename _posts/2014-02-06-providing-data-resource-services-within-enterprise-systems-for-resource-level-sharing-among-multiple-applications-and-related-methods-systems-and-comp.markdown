---

title: Providing data resource services within enterprise systems for resource level sharing among multiple applications, and related methods, systems, and computer-readable media
abstract: Providing data resource services within enterprise systems for resource level sharing among multiple applications, and related methods, systems, and computer-readable media are disclosed. In one embodiment, a method for providing a data resource service within an enterprise system is provided. The method includes receiving a user data request from a web application having application logic located outside of an enterprise system to access user data stored in memory within the enterprise system. The method further includes accessing the user data stored in the memory within the enterprise system in response to the user data request from the web application. The method also includes providing access to the user data stored in the memory within the enterprise system to the web application in response to the user data request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09531808&OS=09531808&RS=09531808
owner: Avaya Inc.
number: 09531808
owner_city: Basking Ridge
owner_country: US
publication_date: 20140206
---
The present application claims priority to U.S. Provisional Patent Application Ser. No. 61 868 603 filed Aug. 22 2013 and entitled PROVIDING OF DATA RESOURCE SERVICES PARTICULARLY CLOUD RESOURCE SERVICES WITHIN ENTERPRISE SYSTEMS FOR RESOURCE LEVEL DATA MASHUP FOR USE BY APPLICATION LOGIC SUCH AS WEB COMMUNICATIONS WIDGETS which is hereby incorporated herein by reference in its entirety.

This application is related to U.S. patent application Ser. No. 13 863 662 filed on Apr. 16 2013 entitled DISTRIBUTED APPLICATION OF ENTERPRISE POLICIES TO WEB REAL TIME COMMUNICATIONS WEBRTC INTERACTIVE SESSIONS AND RELATED METHODS SYSTEMS AND COMPUTER READABLE MEDIA which is hereby incorporated herein by reference in its entirety.

This application is also related to U.S. patent application Ser. No. 13 923 748 filed on Jun. 21 2013 entitled APPLICATION TO REPOSITORY DATA MAPPING IN DATA REPOSITORIES AND RELATED METHODS SYSTEMS AND COMPUTER READABLE MEDIA which is incorporated herein by reference in its entirety.

A common element of web applications involves managing and controlling user data provided by an individual. For instance the web applications within social networking websites such as Facebook and LinkedIn provide each user with a personal profile generated from user provided data. Although the user data is provided by the user each web application typically controls the user data and limits its use to the specific needs of the web application. In this regard illustrate a typical data control scheme . illustrates the data control scheme wherein a user interacts with a web application . Further the web application controls access to user data as opposed to the user having direct access to the user data . In this manner the user data is tied directly to logic not shown of the web application meaning that the user data can only be accessed and used by the web application . More specifically illustrates another view of the data control scheme showing that in order for a user such as the user in to access a particular web application such as the web application in a web browser communicates with a web server . The web server accesses the user data that is tied directly to web application logic . Because the user data is directly associated with the web application logic the user data can only be accessed by the web application logic . Thus a particular web application controls user data associated with that web application and can prevent other web applications from accessing such user data.

Several problems can arise as a result of employing the data control scheme illustrated in and . For example because a web application may not provide access to user data to other web applications the data control scheme requires a user to provide similar information to multiple websites. This creates redundant instances of the user data across multiple web applications. Further because each website controls access to its instance of the user data as opposed to the user controlling such access each website determines whether other web applications can access the user data. As a result the user data is locked in to being accessed and processed by a limited number of web applications as determined by the controlling web application known as application lock in . The data control scheme in also results in rigid data boundaries as enterprise systems often block access to certain public websites due to the failure of such websites to restrict the use of user data to enterprise only functionality. In this regard enterprise systems are Internet domains that employ Enterprise Application Software EAS in order to control which users and applications have access to the Internet domain controlled by a given enterprise. Finally under the data control scheme in the user data life during which the user data is accessible corresponds to the life of the website causing the user data to become obsolete once a website is no longer accessed by the user. For instance a user with a profile on MySpace can no longer use data within that profile if the user decides to transfer his or her social networking activities exclusively to Facebook . Thus the data control scheme causes certain negative consequences.

The data control scheme described above is also employed with enterprise applications. For instance an enterprise system may include internal enterprise applications such as Voice over IP telephone service instant messaging e mail and Web Real Time Communications WebRTC teleconferencing. However as is the case with web applications such enterprise applications often require an enterprise user to provide user data separately to each application because such data is tied directly to the enterprise application logic. For example the user data associated with an enterprise user s contact list within an e mail application may be identical to the user s contact list within an instant messaging application. However the data control scheme in within the enterprise system may prevent enterprise applications from sharing user data requiring the user to provide the same information to each enterprise application separately. Thus similar problems arise within enterprise systems as those previously described in relation to web applications as a result of employing the data control scheme for enterprise applications.

One solution to remedy problems arising from the data control scheme involves the use of shared user data within an enterprise system. More specifically configuring an enterprise system to access user data tied to web application logic may eliminate the need for enterprise users to separately manage user data for enterprise applications. For instance an enterprise specific e mail application may interface to Gmail accounts for certain e mail services and features. Alternatively enterprise application logic may be configured to access and share the user data controlled by a web application. For example an enterprise specific e mail application may be configured to access only a user s contact list controlled by Gmail application logic. However allowing web applications to run within an enterprise system or share user data associated with web application logic with an enterprise application creates the potential for proprietary secure enterprise information being accessed without authorization over public web servers that host such web applications. Further enterprise applications sharing data with web applications still requires users to update multiple instances of user data in order to access similar information across enterprise applications.

Thus it would be advantageous for enterprise applications to be able to access user data used by web applications in an efficient manner without leaving secure enterprise information susceptible to unauthorized access over public web servers.

Embodiments disclosed in the detailed description include providing data resource services within enterprise systems for resource level sharing among multiple applications. Related methods systems and computer readable media are also disclosed. In embodiments disclosed herein data resource services are provided within an enterprise system to allow user data to be separated from application logic that accesses the user data. A data resource service is a service that stores user data as hierarchical resources also referred to herein as data resources identified by paths or Uniform Resource Locators URLs on a server or another storage medium. The data resources are created as either transient or persistent. A transient data resource is automatically deleted by a server when a client connection that created the data resource is disconnected while a persistent data resource is not deleted upon disconnection. Using transient data resources helps provide automatic cleanup and robustness against browser crashes. Further the data resource service is provided within an enterprise system so that users using applications within the enterprise system as well as web applications having logic outside of the enterprise system can access the same instance of stored user data based on associated privileges. The user data is centralized within the enterprise system so that the user may control and update a single instance of the user data within the enterprise system.

As a non limiting example a user within an enterprise system can use a Web Real Time Communications WebRTC based chat application WebRTC Chat within the enterprise system for instant messaging and use Gmail through Google s website for e mail communications. Each application WebRTC Chat and Gmail uses a contact list provided by the user that consists of names and contact information of people with whom the user regularly communicates. Using a data resource service enables the user to create and control one instance of a contact list that is stored within the enterprise system as opposed to providing separate instances of the contact list to WebRTC Chat and Gmail . Both WebRTC Chat and Gmail can access and use the contact list stored within the enterprise system requiring the user to update and manage only one instance of the contact list for use by both applications.

In this manner data provided to an enterprise system by a user can be used across multiple applications within the enterprise system as well as across multiple web applications having logic outside of the enterprise system. Thus rather than requiring each application within and outside of an enterprise system to manage its own possibly outdated user data each application may rely on a central instance for all user data separate from application logic. Allowing one application to use user data originally created for use by another application in this manner also known as application mash ups provides multiple exemplary benefits. For example the user data can be searched and backed up within the enterprise system independent of a particular web or enterprise application. Unifying data searching and data back up so that such tasks are not dependent on application logic can provide efficiency and time savings within an enterprise system as compared to performing similar tasks for separate enterprise applications. Additionally security within an enterprise system may benefit from the data resource service as the internal resource data can be held private within an organization without allowing access to proprietary information to public web servers. Further the data resource service may be attached to other devices or networked applications so as to expose certain information to web applications. The data resource service also provides the flexibility to be used by both web and native enterprise applications. In addition rather than requiring instances of similar data to exist within the logic of each enterprise and web application thus requiring separate data management for each instance the data resource service centralizes one usable instance of the user data within the enterprise system and provides access to such applications as permitted by the user.

In this regard in one embodiment a method for providing a data resource service within an enterprise system for resource level sharing among multiple applications is provided. The method comprises receiving a user data request from a web application having application logic located outside of an enterprise system to access user data stored in memory within the enterprise system. The method further comprises accessing the user data stored in the memory within the enterprise system in response to the user data request from the web application. The method also comprises providing access to the user data stored in the memory within the enterprise system to the web application in response to the user data request. As a non limiting example providing access to the user data may include allowing the web application to read write append or send an event to the user data as well as traverse a resource tree associated with the user data.

In another embodiment a system for providing a data resource service within an enterprise system for resource level sharing among multiple applications is provided. The system comprises a memory within an enterprise system configured to store user data. The system also comprises a data resource server configured to receive a user data request from a web application having application logic located outside of the enterprise system to access the user data stored in the memory within the enterprise system. The data resource server is further configured to access the user data stored in the memory within the enterprise system in response to the user data request from the web application. The data resource server is further configured to provide the user data stored in the memory within the enterprise system to the web application in response to the user data request.

In another embodiment a non transitory computer readable medium storing one or more programs is provided. The one or more programs comprise instructions which when executed by an electronic device cause the electronic device to implement a method for providing a data resource service within an enterprise system for resource level sharing among multiple applications. The method comprises receiving a user data request from a web application having application logic located outside of an enterprise system to access user data stored in memory within the enterprise system. The method further comprises accessing the user data stored in the memory within the enterprise system in response to the user data request from the web application. The method also comprises providing access to the user data stored in the memory within the enterprise system to the web application in response to the user data request.

With reference now to the drawing figures several exemplary embodiments of the present disclosure are described. The word exemplary is used herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments.

Embodiments disclosed herein include providing data resource services within enterprise systems for resource level sharing among multiple applications. Related methods systems and computer readable media are also disclosed. In embodiments disclosed herein data resource services are provided within an enterprise system to allow user data to be separated from application logic that accesses the user data. A data resource service is a service that stores user data as hierarchical resources also referred to herein as data resources identified by paths or Uniform Resource Locators URLs on a server or another storage medium. The data resources are created as either transient or persistent. A transient resource is automatically deleted by a server when a client connection that created the data resource is disconnected while a persistent data resource is not deleted upon disconnection. Using transient data resources helps provide automatic cleanup and robustness against browser crashes. Further the data resource service is provided within an enterprise system so that users using applications within the enterprise system as well as web applications having logic outside of the enterprise system can access the same instance of stored user data based on associated privileges. The user data is centralized within the enterprise system so that the user may control and update a single instance of the user data within the enterprise system.

As a non limiting example a user within an enterprise system can use a Web Real Time Communications WebRTC based chat application WebRTC Chat within the enterprise system for instant messaging and use Gmail through Google s website for e mail communications. Each application WebRTC Chat and Gmail uses a contact list provided by the user that consists of names and contact information of people with whom the user regularly communicates. Using a data resource service enables the user to create and control one instance of a contact list that is stored within the enterprise system as opposed to providing separate instances of the contact list to WebRTC Chat and Gmail . Both WebRTC Chat and Gmail can access and use the contact list stored within the enterprise system requiring the user to update and manage only one instance of the contact list for use by both applications.

In this manner data provided to an enterprise system by a user can be used across multiple applications within the enterprise system as well as across multiple web applications having logic outside of the enterprise system. Thus rather than requiring each application within and outside of an enterprise system to manage its own possibly outdated user data each application may rely on a central instance for all user data separate from application logic. Allowing one application to use user data originally created for use by another application in this manner also known as application mash ups provides multiple exemplary benefits. For example the user data can be searched and backed up within the enterprise system independent of a particular web or enterprise application. Unifying data searching and data back up so that such tasks are not dependent on application logic can provide efficiency and time savings within an enterprise system as compared to performing similar tasks for separate enterprise applications. Additionally security within an enterprise system may benefit from the data resource service as the internal resource data can be held private within an organization without allowing access to proprietary information to public web servers. Further the data resource service may be attached to other devices or networked applications so as to expose certain information to web applications. The data resource service also provides the flexibility to be used by both web and native enterprise applications. In addition rather than requiring instances of similar data to exist within the logic of each enterprise and web application thus requiring separate data management for each instance the data resource service centralizes one usable instance of the user data within the enterprise system and provides access to such applications as permitted by the user.

In this regard in one embodiment a method for providing a data resource service within an enterprise system for resource level sharing among multiple applications is provided. The method comprises receiving a user data request from a web application having application logic located outside of an enterprise system to access user data stored in memory within the enterprise system. The method further comprises accessing the user data stored in the memory within the enterprise system in response to the user data request from the web application. The method also comprises providing access to the user data stored in the memory within the enterprise system to the web application in response to the user data request. As a non limiting example providing access to the user data may include allowing the web application to read write append or send an event to the user data as well as traverse a resource tree associated with the user data.

In this regard illustrate an exemplary data resource service control scheme . More specifically illustrates the data resource service control scheme wherein a user provides user data to a data resource service located within an enterprise system . While this example illustrates the user existing outside of the enterprise system the user may function in a similar manner within the enterprise system . Further providing the user data to the data resource service allows the user to retain control over access to the user data . This is in contrast to the data control scheme in previously described in which the web application controls access to the respective user data . Additionally because the user data in is provided to the data resource service only one instance of the user data is provided by the user as opposed to creating a separate instance for each web application . Therefore each web application must send a user data request not shown to the data resource service in order to access the user data . For example if the data resource service receives a user data request from the web application for the user data the data resource service will provide the requested user data to the web application .

In this regard illustrates another view of the data resource service control scheme showing an example of how the user data is accessed from the data resource service in on a device level. The data resource service control scheme in contains certain common components with which are shown with common element numbers between . More specifically in this example web application logic runs within a web browser as opposed to being accessed by the web browser through the web server as illustrated in . While the web application logic runs within the web browser in this example it is possible to structure the data resource service of so that the web application logic runs on the web server of if the web server interfaces with the data resource service . The web application logic sends a user data request not shown for the user data to a data resource server which implements the data resource service in . For example the data resource server may store and manage the user data as hierarchical resources identified by paths or URLs. While the data resource service in is implemented using the data resource server in this example the data resource service may be implemented using any other device that provides additional server functions. Further upon receiving the user data request the data resource server accesses the user data that is stored in memory within the enterprise system . The data resource server provides the requested user data to the web application not shown in via the web application logic for processing. In this example the web application has its web application logic located outside of the enterprise system . However an enterprise application not shown having its enterprise application logic not shown within the enterprise system can request and receive the user data in a similar manner. By using the data resource service in to store and provide the requested user data the user not shown in is able to create and manage just one instance of the user data . This allows for greater efficiency in managing and accessing the user data across multiple web applications and enterprise applications.

In this regard illustrates an exemplary flowchart describing exemplary functions of the data resource service described in and implemented by the data resource server in . The flowchart in references certain common components with which are shown with common element numbers between the figures. More specifically in the data resource service receives a user data request from the web application having its web application logic located outside of the enterprise system . The web application sends such a user data request in order to gain access to the user data stored in the memory located within the enterprise system block . In response to the user data request from the web application at block the data resource service accesses the user data stored in the memory within the enterprise system block . The data resource service then provides access to the requested user data to the web application block . Importantly the data resource service can provide access to the user data to the web application even if the user data was originally created by the user for a different web application . In addition while illustrates an example of the data resource service receiving the user data request from the web application the data resource service functions in a similar manner when such a user data request originates from an enterprise application e.g. an application whose logic is located within the enterprise system . Further the data resource service can receive user data updates from the user and store the user data within such updates in the memory . Thus the data resource service enables the user to manage one instance of the user data that is used by multiple web applications and enterprise applications creating more efficient use and management of the user data .

In this regard illustrates an exemplary flowchart describing the data resource service functions described in and includes security functions in order to provide added protection for the user data . The flowchart in references certain common components with and which are shown with common element numbers between the figures. More specifically illustrates that the data resource service receives a user data request block and accesses the user data block as previously described in . As a non limiting example an access of the user data may include reading writing appending or sending an event to the user data as well as traversing a resource tree associated with the user data . Each type of access may require a separate access privilege. After accessing the user data at block the data resource service reviews any access privileges associated with the user data block prior to providing access to any user data to the requesting web application . For example a read privilege may be needed to access the user data . If any associated access privileges with the user data allow the user using the requesting web application to access the user data then the data resource service provides the user data to the web application block as described in . Conversely if none of the associated access privileges with the user data allow the user using the requesting web application to access the user data the data resource service will not provide access to the user data to the web application in response to the user data request block . Thus in addition to creating efficiency in managing the user data the data resource service may provide additional security privileges for the user data so as to help prevent unauthorized access of proprietary user and enterprise information.

The data resource service previously described in and may communicate with the web application in various ways. In this regard illustrates an exemplary message flow diagram illustrating data access and event notification within a data resource service based system. The message flow diagram in contains certain common components with which are shown with common element numbers between the figures. More specifically in this example the data resource server accesses the user data not shown from the memory both of which are located within the enterprise system not shown . In this example User communicates with the data resource service not shown by establishing a WebSocket connection from a web browser to the data resource server as indicated by arrow . Once such a connection is established User issues a user data read request by way of a GET command for data accessible via path room 1234 as indicated by arrow . In response to receiving the user data request the data resource server accesses the memory . Further the data resource server provides the requested user data to User indicating that the user data request was a success and also provides resource data content or entity representation to User as indicated by arrow . In addition to requesting the user data User may also update the user data in the memory by way of the data resource server . In this example User provides a user data create by using a POST command to store a resource identifiable as being accessible via a path room 1234 members for User as indicated by arrow . In this example the data resource server indicates that the user data update completed with an acknowledgement of success as indicated by arrow .

With continuing reference to User may communicate with the data resource server while User is connected to the data resource server . In this example similar to User User communicates with the data resource service not shown by establishing a WebSocket connection not shown from a web browser to the data resource server . Using this connection User sends a user data request so as to receive notifications when any changes occur within the resource accessible via the path room 1234 members by issuing a SUBSCRIBE request as indicated by arrow . Thus in response to the user data update by User previously described at arrow the data resource server provides User with a NOTIFY message that User made a POST to the resource accessible via the room 1234 members path as indicated by arrow .

In addition to the data access and event notification scenario illustrated in the message flow diagram in the data resource service previously described may be used with communications applications. For example a data resource service may interact with communications applications whose application logic runs within web browsers. A communications application such as for example a WebRTC application may be implemented using a widget which may comprise a collection of Hyper Text Markup Language HTML JavaScript and or Cascading Style Sheets code and may be embedded within a client such as a web browser. A widget hides the implementation details or the requirements of an application and exposes simple properties and interconnects of the application. A widget may be used as a standalone application or may interconnect with other widgets. Further multiple widgets may interconnect via the properties of inclusion attachment or property attachment. In this regard illustrates an exemplary topology of a WebRTC interactive session between two users using WebRTC applications implemented using WebRTC widgets in the context of a data resource service. In particular an enterprise system includes a data resource server that implements a data resource service . The data resource server is coupled to a memory that stores user data within the enterprise system . In this example the enterprise system includes a network device that prevents unauthorized access to the enterprise system such as for example a firewall.

With continuing reference to a WebRTC interactive session is established between an enterprise user device and an external user device . As used herein a WebRTC interactive session refers to operations for carrying out a WebRTC offer answer exchange establishing a peer connection and commencing a WebRTC interactive flow between two or more endpoints. Within the enterprise system the enterprise user device executes an enterprise web client such as a web browser. In this example the enterprise web client comprises a scripting engine that enables client side applications written in a scripting language. The scripting engine also provides an application programming interface API not shown to facilitate communications with other functionality providers within the enterprise web client and or the enterprise user device . The enterprise web client also includes a WebRTC functionality provider used to implement the protocols codecs and APIs necessary to enable real time interactive sessions via WebRTC. External to the enterprise system is a web application server that serves a WebRTC enabled web application not shown to requesting web clients. Also external to the enterprise system is the external user device executing an external web client such as a web browser. In this example the external web client comprises a scripting engine and a WebRTC functionality provider the functionality of which corresponds to the functionality of the scripting engine and the WebRTC functionality provider respectively.

With continuing reference to to establish a WebRTC interactive session the enterprise web client and the external web client both download the same WebRTC web application not shown from the web application server . The enterprise web client and the external web client establish secure web connections and respectively with the web application server and engage in a WebRTC offer answer exchange. Once the WebRTC offer answer exchange is complete a WebRTC interactive flow may be established via a secure peer connection between the enterprise web client and the external web client . In addition the enterprise web client and the external web client each establish a WebSocket connection and respectively with the data resource server . The external web client must have the necessary privileges to establish the WebSocket connection through the network device of the enterprise system . Further after establishing the WebSocket connections and respectively the enterprise web client and the external web client may each send user data requests and user data updates to the data resource server . In response to such requests and updates the data resource server accesses the user data stored within the memory as previously described.

In this regard illustrates an exemplary message flow diagram for a WebRTC video io widget that runs within a client such as a web browser and functions in conjunction with a data resource service within an enterprise system. In this example the video io widget allows an application to create a peer connection between two web browsers to exchange real time media streams such as live video using Interactive Connectivity Establishment ICE . The video io widget has a video box to either publish a locally captured camera and microphone or play a remote stream or media file from the web while hiding the signaling negotiations. In particular the video io widget creates a peer connection from a video io publisher to a video io player on the same data resource path. In this example a video io publisher publishes videos to video io players over separate peer connections. More specifically the video io player establishes a WebSocket connection with a data resource server located within an enterprise system as indicated by arrow . After establishing such a connection the video io player subscribes to the resource root publisher as indicated by arrow . The video io player also creates a child resource under the parent root players resource using a POST method as indicated by arrow wherein root represents the root path for that stream resource such as path to stream1 not shown . The data resource server notifies the video io player that such a child resource has been created with an id of 2142 as indicated by arrow . The video io player then subscribes to the resource root players 2142 so as to be notified of any videos published at that resource as indicated by arrow .

With continuing reference to the video io publisher establishes a WebSocket connection with the data resource server as indicated by arrow . Further the video io publisher creates a publisher resource under root and subscribes to receive change notifications for resources under root publisher and root players as indicated by arrow . Because the video io player previously subscribed to be notified of changes to the resource at root publisher the video io player receives a notification regarding the activity of the video io publisher as indicated by arrow . Similarly because the video io publisher subscribed to receive notifications regarding the resource root players the video io publisher receives an indication that 2142 has been created within the resource as indicated by arrow . In response the video io publisher offers to setup a peer connection with the video io player by sending a notification on the root players 2142 resource as indicated by arrow . Such an offer is propagated to the subscribing video io player arrow by the data resource server and the video io player accepts the offer arrow which is received by the video io publisher arrow . Thus the video io publisher and the video io player establish a peer to peer connection to stream video using the video io widget wherein the signaling and data for such video streams are accessible through the data resource server via the path root players 2142. 

With continuing reference to the new video io player also establishes a WebSocket connection with the data resource server as indicated by arrow . After establishing such a connection the video io player subscribes to the resource root publisher as indicated by arrow . The video io player establishes a child resource under the parent root players resource using a POST method as indicated by arrow . The video io publisher receives a notification that the child resource requested by the video io player will be created with an id of 9635 as indicated by arrow . The data resource server notifies the video io player that such a child resource has been created with an id of 9635 as indicated by arrow . The video io player then subscribes to the resource root players 9635 so as to be notified of any videos published at that resource as indicated by arrow . Similar to the video io player the video io publisher offers to setup a peer connection with the video io player identifiable by the root players 9635 resource as indicated by arrow . Such an offer is propagated to the video io player arrow and the video io player accepts the offer arrow which is received by the video io publisher arrow . Thus the video io publisher and the video io player establish a peer to peer connection to stream video using the video io widget wherein the signaling and data for such video streams are accessible through the data resource server via the path root players 9635. Finally the video io widget may also enable the video io publisher the video io player and the video io player to terminate their respective WebSocket connections to the data resource server .

In addition to the video io widget described in widgets may be used to implement other web applications that function using a data resource service. In this regard illustrates an exemplary state machine of a phone widget that could be used in conjunction with a data resource service within an enterprise system. More specifically the phone widget emulates existing telephony using a series of signaling messages between two users a first user and a second user . In a two party call the first user and the second user employ each respective instance of the phone widget to transition between multiple call states based on triggers as illustrated in the state machine . For example from an idle state the first user may click a call button to invite the second user to join a telephone call using an invite message placing the call in an inviting state for the first user . The second user receives the invite message while in the idle state which prompts the second user regarding the incoming call and transitions the second user from the idle state to an invited state . The second user may either answer the call by clicking on a call button thereby instructing the phone widget to send an accept message to accept the invite message . Conversely the second user may decline the call by clicking on an end button thereby instructing the phone widget to send a reject message . If the first user clicks on the end button for an outgoing pending call the first user s phone widget sends a cancel message which is received by the second user s phone widget and eventually cancels the incoming call for the second user . This transitions the call to the idle state for both the first user and the second user . If the second user rejects the invite message then the first user s phone widget receives the reject message and transitions to the idle state . If the second user accepts the invite message the call enters an active state and sends the accept message to the first user s phone widget thereby transitioning the call to the active state for both users. While the call is in the active state if either user or sends a data message the call remains in the active state . However if either the first user or the second user clicks the end button to terminate the call the corresponding phone widget sends an end message while in the active state . This terminates the call and places it in the idle state for both the first user and the second user .

As a non limiting example an exemplary message issued from the phone widget described in may originate from a user wherein the user invites another user to join a call where the invitation is identified by the number 5324. An exemplary message of such a call could include the following type invite invite id 5324 from path to user1 not shown . In addition to the video io widget described in and the phone widget described in a widget may be configured to interconnect to one or more other widgets in order to function as a single web application that functions with a data resource service.

In this regard provides a table of exemplary widgets that may be used with a data resource service. For example a click to call widget is a web audio phone with a button to initiate answer or terminate a call. The click to call widget delegates call control logic to the included phone widget and WebRTC based media processing to two audio io widgets one for publishing and another for play. For example the click to call widget binds the phone widget s resource property to the publishing audio io widget s publish property and its target resource property to the playing audio io widget s play property. A web developer may modify the widgets to change the web phone s behavior for example interconnecting the audio io references to video io widgets allows the phone widget to be used as a video phone while using the same call control. The phone reference can be set to another telephony based widget such as a call queue or automatic call distributor. Call queue extends the phone widget to put a received call invitation in a list displayed to a user and allows the user to select one invitation at a time to answer or decline. The distributor widget extends the phone widget to allow multiple targets. When a call is placed an invite is sent to all the target resources either in parallel or in sequence or a combination of the two based on a corresponding distribution property. These telephony widgets are compatible with the phone widget because each uses the same type of signaling messages and each can be used wherever the phone widget is applicable.

With continuing reference to the exemplary widgets listed in the table in a conference widget represents a multiparty conference bound to a data resource path under which all of its conference and membership resources are created. When multiple widgets set their data resource property to the same path they subscribe to the same conference and listen for a change in its members. For example if a data resource is path to conf1 then path to conf1 members is an array resource of its members. When a me property is set to a local user s data the conference widget joins the conference on the user s behalf and adds the data to the members array. These two properties are sufficient to control the conference widget. Additionally the conference widget defines join id and myid properties so as to control and indicate the local member s child identifier if needed. The phone and conference widgets have the core telephony concepts that are useful in many applications. Further the click to join widget provides a button to join or leave a conference. Additionally an inviter widget extends the phone widget for use in a conference wherein a user invites another participant to the conference using the same protocol as the phone widget.

With continuing reference to the exemplary widgets listed in the table in a roster widget displays a list of users their presence statuses and custom messages based on an array resource path. The roster widget can show a contact list in an instant messenger or display a membership list when attached to a conference widget. A videos widget supports video conferencing on a data resource path and includes one video io item per participant. If the video widget is attached video is added to an otherwise audio only conference or phone application. Further the video widget may provide a tile or a picture in picture layout based on the number of participants. However an application may override the layout by supplying a static set of video io widgets for example an application may provide a fixed four party video conference with a 2 2 layout. Further a text chat widget implements a multi party text chat function. More specifically the text chat widget has a text feed to show messages in an array resource and a text input control to post a message to that resource. The message contains sender data the date time of creation message type and the actual message either in plain text or HTML. The persistent property controls whether the message resources are persistent or transient. The chat history storage and access is implicit in the resource model. A text feed widget can display any list of messages such as forum posts or comments on a page. The text chat widget includes popular instant messenger features such as emoticons and file sharing using the data resource model. In addition a user can drag a file from a desktop to this widget to share it with other connected users. The file content is encapsulated as a data URL in the chat message resource without an explicit file sharing protocol.

With continuing reference to a conversation widget includes conference text chat videos and roster for a complete multimedia conversation. Similar to the conference widget the conversation widget defines a root resource path and myid to subscribe and join a conference path respectively. The user interface allows initiation of audio and video capabilities or sending of text messages in a conversation. A call type resource attribute within the conversation widget indicates if the conversation has audio video or text only capabilities. Additional widgets such as videos text chat notepad and white board may be attached to a conference or phone widget or a compatible extension in order to build an application. Such an attachment determines whether the application logic uses the conference member s or the phone subscriber s resource path. The ability to interconnect multiple widgets to build an application is a very powerful and flexible way to create modular and extensible applications such as a video blog video presence or online games with interactions.

In this regard various applications may be built using a combination of the widgets listed in the table in such as a public chat service. For example when a user visits a website a client application joins a public room s resource such as apps public chat public. A room has two child array resources userlist and chathistory for the current participants list and chat messages. The client subscribes to these resources to display the user roster and chat history. The public chat service allows video conferencing using a fixed 3 2 layout of video io widgets. Unlike existing symmetric video conferencing the public chat service allows asymmetric media paths wherein each user decides whom the user wants to see and from whom the user wants to hear. A user can send private messages to a target user via a direct NOTIFY on the target user s resource instead of a POST on chathistory.

In addition to the public chat service a communicator application may also be implemented using the widgets. For example a user signup may create a data resource such as users name company.com. All contacts and profile data such as presence status are rooted under this particular data resource and a roster widget binds to the user s contacts. The conversation widget enables a multimedia chat starting as two party and extends to multiparty when the user drags more contact items into a conversation window. A conversation binds to a message thread resource allowing the merging of conversations wherein a new incoming thread received from a person for whom the user already has a conversation is merged with an existing conversation. However the user profile and conversation data are not controlled by a single application. For example a presence icon is bound to a target s presence resource and can be embedded in other places such as a corporate directory or a user s home page. Clicking the icon opens a conversation widget that seamlessly interacts with the target s communicator because both applications share the same data resource design.

In addition a video presence application may also be created using the widgets listed in the table in . For example a video presence web page may show a list of contacts based on an array resource path managed by an owner. Each item in the list is a live video feed from that contact. The owner can click on a contact s video to initiate a voice and text call. Such an application uses the video io widget in the list item and the conference inviter text chat and one or more audio io widgets in a call. Further a personal wall application may be built using similar widgets. For example a personal wall may be used as an enterprise social network where a user visits another user s wall to post messages or share calendar events business cards or files. All such shared data are resources with associated access privileges. In addition contextual sharing of enterprise data may also be added. For example when a User A visits a User B s wall User A may see the last few conversations and shared files they have had outside of the application. The previously described applications are fairly small with sub thousand to a few thousand lines of code but demonstrate the wide variety of applications that can be built using the data resource model.

The exemplary computer system includes a processing device or processor a main memory as non limiting examples read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. and a static memory as non limiting examples flash memory static random access memory SRAM etc. which may communicate with each other via a bus . Alternatively the processing device may be connected to the main memory and or the static memory directly or via some other connectivity means.

The processing device represents one or more processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor a reduced instruction set computing RISC microprocessor a very long instruction word VLIW microprocessor a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device is configured to execute processing logic in instructions and or cached instructions for performing the operations and steps discussed herein.

The computer system may further include a communications interface in the form of a network interface device . It also may or may not include an input to receive input and selections to be communicated to the computer system when executing instructions. It also may or may not include an output including but not limited to display s a video display unit as non limiting examples a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device as a non limiting example a keyboard a cursor control device as a non limiting example a mouse and or a touch screen device as a non limiting example a tablet input device or screen .

The computer system may or may not include a data storage device that includes using drive s to store functions herein described in computer readable medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The one or more instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media. The instructions and or may further be transmitted or received over a network via the network interface device . The network can be an intra network or an inter network.

While the computer readable medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media as non limiting examples a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the embodiments disclosed herein. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

Providing data resource services within enterprise systems for resource level sharing among multiple applications and related methods systems and computer readable media according to embodiments disclosed herein may be provided in or integrated into any processor based device. Examples without limitation include a set top box an entertainment unit a navigation device a communications device a fixed location data unit a mobile location data unit a mobile phone a cellular phone an internet phone a computer a portable computer a desktop computer a personal digital assistant PDA a monitor a computer monitor a television a tuner a radio a satellite radio a music player a digital music player a portable music player a digital video player a video player a digital video disc DVD player and a portable digital video player.

Those of skill in the art will further appreciate that the various illustrative logical blocks modules circuits and algorithms described in connection with the embodiments disclosed herein may be implemented as electronic hardware instructions stored in memory or in another computer readable medium and executed by a processor or other processing device or combinations of both. The arbiters master devices and slave devices described herein may be employed in any circuit hardware component integrated circuit IC or IC chip as non limiting examples. Memory disclosed herein may be any type and size of memory and may be configured to store any type of information desired. To clearly illustrate this interchangeability various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. How such functionality is implemented depends upon the particular application design choices and or design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present disclosure.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a processor a digital signal processor DSP an Application Specific Integrated Circuit ASIC an field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices as non limiting examples a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The embodiments disclosed herein may be embodied in hardware and in instructions that are stored in hardware and may reside as non limiting examples in Random Access Memory RAM flash memory Read Only Memory ROM Electrically Programmable ROM EPROM Electrically Erasable Programmable ROM EEPROM registers a hard disk a removable disk a CD ROM or any other form of computer readable medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an Application Specific Integrated Circuit ASIC . The ASIC may reside in a remote station. In the alternative the processor and the storage medium may reside as discrete components in a remote station base station or server.

It is also noted that the operational steps described in any of the exemplary embodiments herein are described to provide examples and discussion. The operations described may be performed in numerous different sequences other than the illustrated sequences. Furthermore operations described in a single operational step may actually be performed in a number of different steps. Additionally one or more operational steps discussed in the exemplary embodiments may be combined. It is to be understood that the operational steps illustrated in the flow chart diagrams may be subject to numerous different modifications as will be readily apparent to one of skill in the art. Those of skill in the art would also understand that information and signals may be represented using any of a variety of different technologies and techniques. As non limiting examples data instructions commands information signals bits symbols and chips that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

The previous description of the disclosure is provided to enable any person skilled in the art to make or use the disclosure. Various modifications to the disclosure will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other variations without departing from the spirit or scope of the disclosure. Thus the disclosure is not intended to be limited to the examples and designs described herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

