---

title: Method, user terminal, and web server for providing service among heterogeneous services
abstract: A method of providing a service among heterogeneous services may include verifying whether a second web application associated with an external web service is installed in a user agent, when data of the external web service is requested from a first web application executed in the user agent, requesting key information to be used for accessing the requested data from a first server providing a web service associated with the first web application, when the second web application is installed in the user agent, receiving the key information from the first server, and accessing the requested data existing on the second web application, using the received key information, in the first web application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09503503&OS=09503503&RS=09503503
owner: Electronics and Telecommunications Research Institute
number: 09503503
owner_city: Daejeon
owner_country: KR
publication_date: 20140312
---
This application claims the benefit of Korean Patent Application No. 10 2013 0026383 filed on Mar. 12 2013 in the Korean Intellectual Property Office the disclosure of which is incorporated herein by reference.

The present invention relates to technology for providing a web service and more particularly to technology for providing a service among heterogeneous web services.

Use of web applications is increasing in an environment in which web browser based application services are used. A web application refers to a web based application written in hypertext mark up language HTML 5 JavaScript cascading style sheet CSS and the like. The web application may also refer to a service installable in a browser through a separate web or an application store. An increase of data used for such web applications may lead to an increase of traffic occurring each time the applications are loaded. Accordingly in order to prevent such an increase of traffic browser developers may develop standards for an indexed database DB corresponding to a storage for web applications in the HTML5 standards and store information to be used for various web applications in a form of key values. In addition with the spread of device application programming interfaces APIs and a web operating system OS a web application may provide various functions for example a device resource access and the like yet to be provided by a conventional browser based execution model type application. For example the web application may access resources of a device directly and utilize the resources in a service. However when users use various web applications an amount of data of individual web applications may increase. In a case in which data sharding among heterogeneous web services or web applications is required a cross access function may be suggested when domains are different in terms of a service domain for example a uniform resource locator URL in a general browser.

Referring to servers and may provide heterogeneous web services for example A.com B.com and C.com respectively. In this example among the web services an integrated authentication based cross domain data access function through a standard authentication scheme for example OAuth may be provided in a form of an API. For example in a case of web services a separate API may be defined for an access to data of heterogeneous services and a data sharding function may be provided in a cross domain through mutual user authentication by means of a standardized authentication system for example OAuth . However in a case of a web application utilization of the integrated authentication based cross domain data access function may be impossible due to a cross domain issue for security of a browser corresponding to an environment in which the web application is executed. In addition although the cross domain issue may be resolved through the support of a user agent UA additional information for example key paths of an indexed DB used by individual web applications may be necessary.

Referring to in a UA for example a browser a web application A a web application B and a web application C may access content A content B and content C respectively using key information through the indexed DB . However as an example since the web application A does not have key information for accessing the content B corresponding to the web application B or the content C corresponding to the web application C a cross domain access may be denied. In particular although a web application uses an indexed DB to store necessary information the web application may not utilize data of heterogeneous web applications due to a cross domain access denied and an absence of key information.

An aspect of the present invention provides a technology for reducing a processing power and traffic of a web server when a service among heterogeneous services is requested. Simultaneously another aspect of the present invention also provides a technology for enabling a user to access local data of another service and increasing a response speed of a service.

According to an aspect of the present invention there is provided a method of providing a service among heterogeneous services the method including verifying whether a second web application associated with an external web service is installed in a user agent when data of the external web service is requested from a first web application executed in the user agent requesting key information to be used for accessing the requested data from a first server providing a web service associated with the first web application when the second web application is installed in the user agent receiving the key information from the first server and accessing the requested data existing on the second web application using the received key information in the first web application.

The key information may be generated by the second web application transferred to a second server providing the external web service and delivered from the second server to the first server at a request of the first server.

The verifying may include verifying whether the second web application is installed in the user agent using a web application list provided by a web application manager included in the user agent.

Whether the web application list is to be provided by the web application manager may be determined based on a user agreement.

According to another aspect of the present invention there is also provided a method of providing a service among heterogeneous services the method including generating an indexed database DB in a first web application executed in a user agent confirming key information from the indexed DB and transmitting the confirmed key information to a first server providing a web service associated with the first web application and extracting data corresponding to the key information from the indexed DB and providing the extracted data to a second web application executed in the user agent when the data is requested from the second web application using the key information.

The key information may be transferred from the first server to the second web application through a second server providing a web service associated with the second web application.

According to still another aspect of the present invention there is also provided a user terminal for providing a service among heterogeneous services the user terminal including a communication unit to communicate externally and a controller to execute a user agent. The user agent may be configured to verify whether a second web application associated with an external web service is installed in the user agent when data of the external web service is requested from a first web application executed in the user agent request key information to be used for accessing the requested data from a first server providing a web service associated with the first web application when the second web application is installed in the user agent receive the key information from the first server and access the requested data existing on the second web application using the received key information through the first web application.

According to yet another aspect of the present invention there is also provided a user terminal for providing a service among heterogeneous services the user terminal including a communication unit to communicate externally and a controller to execute a user agent. The user agent may be configured to generate an indexed DB in a first web application executed in the user agent confirm key information from the indexed DB and transmit the confirmed key information to a first server providing a web service associated with the first web application and extract data corresponding to the key information from the indexed DB and provide the extracted data to a second web application executed in the user agent when the data is requested from the second web application using the key information.

According to further another aspect of the present invention there is also provided a web server for providing a service among heterogeneous services the web server including a communication unit to communicate with a user terminal and a controller. The controller may be configured to receive from the user terminal in which a first web application is installed key information with respect to data stored in an indexed DB of the first web application manage the received key information and transfer the key information corresponding to a request from an external server providing a web service associated with a second web application installed in the user terminal and the key information transferred to the external server may be transferred to the user terminal and used for accessing the data stored in the indexed DB of the first web application in the second web application.

According to still another aspect of the present invention there is also provided a web server for providing a service among heterogeneous services the web server including a communication unit to communicate with a user terminal and a controller. The controller may be configured to request key information from an external server providing a web service associated with a second web application receive the requested key information from the external server and transfer the received key information to the user terminal when the key information with respect to data stored in an indexed DB of the second web application installed in the user terminal is requested from the user terminal in which a first web application is installed and the key information transferred to the user terminal may be used for accessing the data stored in the indexed DB of the second web application in the first web application.

Reference will now be made in detail to exemplary embodiments of the present invention examples of which are illustrated in the accompanying drawings wherein like reference numerals refer to the like elements throughout. Exemplary embodiments are described below to explain the present invention by referring to the figures.

Referring to the system may include servers and and a user terminal . Although not shown in each of the servers and may include hardware resources including a communication unit to communicate externally and a controller to control the corresponding server. The user terminal may include hardware resources including a communication unit to communicate externally and a controller to control the user terminal .

As shown in the servers and may provide heterogeneous web services for example A.com B.com and C.com respectively. The user terminal may include a UA for example a browser. The UA may be executed and operated by the controller of the user terminal . Web applications for example a web application manager a web application A a web application B and a web application C may be installed in the user terminal . In this example the UA may further include the web application manager when compared to the UA of . Each of the web applications and may include an open indexed database DB .

The web application manager may manage information on the web applications installed in the UA using a web application list. In addition the web application manager may provide the web application list to a web application at a request of the corresponding web application. For example the web application manager may provide the web application list to the web application A at a request of the web application A . The web application list may include information as shown in Table 1.

The web application manager may provide an API function to provide a service among heterogeneous web applications. The API function may include a function to return information on the web application list through a function getWebappList a function to return information regarding whether a user access is permitted through a function getAcessPermission and the like. The function getWebappList may return all information on the web application list when a parameter value is absent. In addition when the parameter value corresponds to a uniform resource locator URL or a title a value of the to URL or the title with respect to web applications in the web application list may be returned. Further web services or the servers and providing the web services may additionally provide an interface for providing information on an indexed DB requested by web applications.

In although a description is provided of a structure in which utilization of mutual data among heterogeneous web services is enabled using three web services for example A.com B.com and C.com the structure is provided only as an example for ease of description. In particular it may be obvious to those skilled in the art that a type or a number of web services is not limited to the examples of web services of .

The process of may be performed by a user terminal based on a control of a web application manager a web application or a UA installed in the user terminal. The transmitted and received information illustrated in may include requests and responses transferred among a web application manager a web application and a UA in a user terminal.

Referring to in operation the user terminal may determine whether data of an external web service is required by a first web application based on a control of the first web application. In operation the user terminal may verify whether a user is using a service of the first web application based on the control of the first web application. For example the verifying whether the user is using the service of the first web application may refer to determining whether there is a user using a corresponding web service by verifying whether the user is logged in the corresponding web service. When it is verified that the user is using the service of the first web application the user terminal may perform operation . When it is verified that the user is not using the service of the first web application the process of may be terminated. In operation the user terminal may verify whether a response location of the user corresponds to the first web application based on the control of the first web application.

When it is verified that the response location of the user corresponds to the first web application the user may perform operation . When it is verified that the response location of the user does not correspond to the first web application the process of may be terminated. For example as shown in a first web application may request a content location from the user. When content is located in another web application installed on a UA for example a browser whether the response location of the user corresponds to the first web application may be verified based on a content location response from the user. Verifying whether the response location of the user corresponds to the first web application may refer to determining whether use of service information is requested through a web application by utilizing information on a UA accessed by the user. The UA information may include in general information on a version of the browser information on an environment of an operating system OS being used and the like. Accordingly the UA information may be used to verify whether the service is accessed in a form of a web application.

In operation the user terminal may request a web application list from the web application manger based on the control of the first web application. For example as shown in the first web application may request a web application list from a web application manager . In this example the web application list may be requested by the first web application to the web application manager by utilizing an intent scheme dependent on an environment in which the first web application is installed or using an API function of the web application manager . In operation the user terminal may verify whether the user agrees on an access to the data of the external web service based on the control of the web application manager. When it is verified that the user agrees to the access the user terminal may perform operation . When it is verified that the user does not agree to the access the process of may be terminated. For example as shown in the web application manager may request an agreement on the access to the data of the external web service from the user and verify whether the user agrees on the access based on an access permission response from the user.

In operation the user terminal may provide the web application list to the first web application based on the control of the web application manager. For example as shown in the web application manger may provide a web application list response to the first web application . In operation the user terminal may verify whether a second web application associated with the external web service is present using the web application list based on the control of the first web application. As described above the web application list may include information on web applications installed in the user terminal or the UA. Accordingly a specific web application installed in the user terminal or the UA may be verified using the web application list.

Referring to a first web application installed in a user terminal in relation to provision of a first web service may provide key information to a first server providing the first web service and a second web application installed in the identical user terminal in relation to provision of a second web service may receive the key information through a second server providing the second web service and utilize data or content hereinafter data of the first web application .

For example the data of the first web application may be stored through a cache in a browser of the user terminal. In this instance the second web application may access the data of the first web application stored through the cache in the browser using the key information. Accordingly traffic for providing data may be reduced from a viewpoint of a service provider and an access to local data may be enabled and a faster response speed may be expected from a viewpoint of a user.

A key update process may refer to a process in which the first web application transfers the key information to the first server and the first server updates the key information. For example the first web application may generate an indexed DB and transmit to the first server key information for accessing data stored in the indexed DB. The first server may newly generate or update key information with respect to the first web application through use of the received key information. A first web application presence verification process may refer to a process in which the second web application verifies whether the first web application is installed in the user terminal or the UA of the user terminal or whether the data of the first web application is stored in the cache of the UA or the user terminal. The first web application presence verification process may include the process described with reference to . A key information request process may refer to a process in which the second web application requests key information from the second server .

An OAuth authentication process may refer to an authentication process performed by the second server with the first server to obtain the key information of the first web application at a request of the second web application for the key information. An indexed DB information provision process may refer to a process in which the second server is provided with the key information from the first server . For example the second server may request an access to the indexed DB from the first server . In this example the first server may perform a procedure for authenticating the request for the access to the indexed DB from the second server through an authentication process. When the request is authenticated the first server may transmit to the second server a response indicating that the indexed DB is accessible. Accordingly the second server may request information on the indexed DB from the first server and the first server may provide to the second server the key information in response to the request for the information on the indexed DB.

A key information transfer process may refer to a process in which the second server provides the key information to the second web application . The second server may transfer to the second web application the key information received from the first server . A data provision process may refer to a process in which the second web application accesses the data stored in the indexed DB of the first web application using the key information. For example the second web application may request the data from the first web application using the key information and the first web application receiving the request may provide the data stored in the indexed DB to the second web application based on the key information.

As described above the first web application and the second web application are programs installed and executed in an identical UA included in a user terminal and may share data among web applications providing heterogeneous web services through a cache in the UA for example a browser. According to embodiments of the present invention a request for data from another service to a corresponding service may be processed on a UA without causing traffic of a web server whereby traffic and a processing power of the server may be reduced from a viewpoint of a service provider. In addition an access to local data of the other service may be enabled and a faster response speed may be expected from a viewpoint of a user.

The units described herein may be implemented using hardware components software components or a combination thereof. For example a processing device may be implemented using one or more general purpose or special purpose computers such as for example a processor a controller and an arithmetic logic unit a digital signal processor a microcomputer a field programmable array a programmable logic unit a microprocessor or any other device capable of responding to and executing instructions in a defined manner. The processing device may run an operating system OS and one or more software applications that run on the OS. The processing device also may access store manipulate process and create data in response to execution of the software. For purpose of simplicity the description of a processing device is used as singular however one skilled in the art will appreciated that a processing device may include multiple processing elements and multiple types of processing elements. For example a processing device may include multiple processors or a processor and a controller. In addition different processing configurations are possible such as parallel processors.

The software may include a computer program a piece of code an instruction or some combination thereof for independently or collectively instructing or configuring the processing device to operate as desired. Software and data may be embodied permanently or temporarily in any type of machine component physical or virtual equipment computer storage medium or device or in a propagated signal wave capable of providing instructions or data to or being interpreted by the processing device. The software also may be distributed over network coupled computer systems so that the software is stored and executed in a distributed fashion. In particular the software and data may be stored by one or more non transitory computer readable recording mediums.

The method according to the above described exemplary embodiments of the present invention may be recorded in computer readable media including program instructions to implement various operations embodied by a computer. The media may also include alone or in combination with the program instructions data files data structures and the like. Examples of computer readable media include magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM discs and DVDs magneto optical media such as floptical discs and hardware devices that are specially configured to store and perform program instructions such as read only memory ROM random access memory RAM flash memory and the like. Examples of program instructions include both machine code such as produced by a compiler and files containing higher level code that may be executed by the computer using an interpreter. The described hardware devices may be configured to act as one or more software modules in order to perform the operations of the above described exemplary embodiments of the present invention or vice versa.

A number of examples have been described above. Nevertheless it should be understood that various modifications may be made. For example suitable results may be achieved if the described techniques are performed in a different order and or if components in a described system architecture device or circuit are combined in a different manner and or replaced or supplemented by other components or their equivalents. Accordingly other implementations are within the scope of the following claims.

