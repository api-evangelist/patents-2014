---

title: System and method for loading application classes
abstract: In an application, variants of a class may be generated and associated with different security permissions for the application. When a class is to be loaded, a determination is made as to the application's security permissions, e.g. by decoding a security token. The class is then retrieved from a repository that stores class variants matching the required security level. The retrieved class variant, which may have a full or a reduced functionality as appropriate for the security permission may then by loaded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075966&OS=09075966&RS=09075966
owner: Oscad Remote Limited Liability Company
number: 09075966
owner_city: Wilmington
owner_country: US
publication_date: 20140127
---
This application is a continuation of and claims priority benefit to U.S. patent application Ser. No. 12 629 934 filed Dec. 3 2009 now issued as U.S. Pat. No. 8 677 506 which is incorporated herein in its entirety.

This disclosure relates to secure applications and in particular to loading classes into applications based on user security permissions.

When invoking an application on a device it may be necessary to prevent unauthorized access to the application or to some capabilities of the application depending on the security permissions of the user. Existing solutions use conditional logic within application logic or within a security module to determine whether protected capabilities can be accessed. However if permissions are set incorrectly either accidentally or through malicious intent protected capabilities may be accessed if the code implementing those capabilities is visible to the application. This can be a serious problem in distributed applications.

What is required is an improved system and method for developing and or providing secure applications.

In one aspect of the disclosure there is provided a method for loading a class in an application comprising determining a class requirement determining a security permission retrieving a class variant of the required class associated with the security permission and loading the retrieved class variant.

In one aspect of the disclosure there is provided an application comprising a request handler and at least one class loader. The request handler may be configured to process a request for a class and determine a security permission of the application. The class loader may be configured to load a class variant dependent on the security permission.

In one aspect of the disclosure there is provided a computer readable medium comprising computer executable instructions for execution by a processor that when executed cause the processor to decode a security token determine a security permission from the security token select a class repository associated with the security permission and load a class from the selected class repository.

An application structure is illustrated in . The application includes application classes that have been loaded and are used to perform the functions of the application. Application classes are typically loaded using a classloader within a request handler . In an embodiment of the present disclosure the application may be configured to have a set of security permissions encoded as a security token. When the application performs a secure operation the request handler intercepts the invocation. The request handler may be local to the caller or in a remote process. The class loader of the present embodiment is configured to load multiple variants of classes based on the permissions encoded in the security token. The security token may be generated when the application is installed on a specific computing device when a user performs a login operation or by any other means that establishes the user s security credentials. In a distributed application the security token may be passed between processes using established mechanisms for performing remote operations such as remote invocation through a secure encrypted connection. The class loader uses the security permissions to determine which variant to load.

A process for loading a class is shown in the flowchart of . At step a requirement for a class to be loaded is generated. The security permissions for the application are then evaluated step . A class variant of the required class associated with the security permission is then retrieved step and loaded step .

A specific set of permissions is mapped to a specific variant set of classes. Each set may contain a different group of classes. However each variant class that will be directly accessed by the application has the same name and namespace and provides the same public API. Each set of variant classes is contained in a separate repository such as Repository A Repository B etc. The class repositories may be located locally in the filesystem or available via the network from a central remote server. The classloader determines which repository to load classes from using the security permissions. When the application requires access to a class subject to security permissions the class loader will load a variant of the class from the appropriate repository based on the application s permissions. This protects the system from accidental or malicious use of protected capabilities. Because each variant of the class has the correct namespace and provides the correct public API the class will execute properly when loaded and invoked within the application.

One variant of the class may be coded to provide a full capability that is only accessible by a user with administrative security permissions while another variant of the same class may be coded to provide a reduced functionality accessible by a user with read only security permissions. For example one class variant may support creation and deletion of all user accounts another class variant may support updating account information but not creation or deletion and a third class variant may only support viewing account information for the current user.

In there is shown a process for performing an invocation of a class by the application. At step the request handler receives the invocation and decodes the security token from the invocation at step . Provided the security token is valid step the classloader retrieves the class variant from the appropriate class repository that matches the security permissions indicated in the security token step . The retrieved class may then be used to perform the invocation step .

A process for retrieving the class instance is shown in the flowchart of . At step a class requirement is created based on the security permission required and the class operation being performed. If the class has been previously loaded as determined at step and there is an instance of the class available as determined at step then the invocation may be performed routinely . If the class instance is not available but has been previously loaded then the class instance can be created at step before proceeding to perform the invocation . If the class has not been previously loaded then the classloader to be used to load the class is determined at step . Each class repository may have a separate classloader for it within the application. This helps to properly firewall the application and allows multiple variants of the same class to be loaded within the same application process. The classloader is determined based on the security permissions indicated in the class requirement such as from the security token. If the selected classloader is available then the class is loaded . If the class is loaded successfully as determined at step then an instance of the class is created so that the invocation can be performed .

When the application is started it loads a set of security permissions stored on the local computing device. The application is also configured to be aware of a number of class repositories and the permissions each repository requires. The application then initializes a set of security classloaders to load classes from each repository. Each security classloader is configured to load classes from one of the repositories and is aware of the security permissions required by the repository. As stated previously the class repositories may be local to the computing device or remotely accessible through a server.

The application may be embodied in hardware software firmware or a combination of hardware software and or firmware. In a hardware embodiment the application may execute on a processor operatively associated with a memory as shown in . The memory may store an instruction set executable by the processor as shown in . The instruction set allows the processor to decode a security token step which may be stored in the memory . Once decoded the processor may determine a security permission indicated in the security token step and then select a class repository associated with the security permission step . The processor then loads a class from the selected repository step .

The processor may communicate with a second processor such as a class repository processor associated with a memory that stores a number of class repositories. The application processor may send class requests to the class repository processor through a suitable communications link .

Although embodiments of the present invention have been illustrated in the accompanied drawings and described in the foregoing description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims. For example the capabilities of the invention can be performed fully and or partially by one or more of the blocks modules processors or memories. Also these capabilities may be performed in the current manner or in a distributed manner and on or via any device able to provide and or receive information. Further although depicted in a particular manner various modules or blocks may be repositioned without departing from the scope of the current invention. Still further although depicted in a particular manner a greater or lesser number of modules and connections can be utilized with the present invention in order to accomplish the present invention to provide additional known features to the present invention and or to make the present invention more efficient. Also the information sent between various modules can be sent between the modules via at least one of a data network the Internet an Internet Protocol network a wireless source and a wired source and via plurality of protocols.

