---

title: Storage of mass data for monitoring
abstract: Disclosed are various in various embodiments are systems and methods providing for storage of mass data such as metrics. A plurality of data models are generated in the server from a stream of metrics describing a state of a system. Each of the metrics is associated with one of a plurality of consecutive periods of time, and each data model represents the metrics associated with a corresponding one of the consecutive periods of time. The data models are stored in a data store and each of the metrics is discarded after use in generating at least one of the data models.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563531&OS=09563531&RS=09563531
owner: Amazon Technologies, Inc.
number: 09563531
owner_city: Seattle
owner_country: US
publication_date: 20140812
---
This application is a continuation of U.S. patent application Ser. No. 13 769 468 entitled STORAGE OF MASS DATA FOR MONITORING and filed Feb. 18 2013 which is a continuation of U.S. patent application Ser. No. 12 493 558 entitled STORAGE OF MASS DATA FOR MONITORING and filed Jun. 29 2009 now U.S. Pat. No. 8 381 039. This application also claims priority to US Provisional Patent Application entitled STORAGE OF MASS DATA FOR MONITORING assigned application No. 61 106 901 and filed on Oct. 20 2008 which is incorporated herein by reference in its entirety. This application also claims priority to US Provisional Patent Application entitled STORAGE OF MASS DATA FOR MONITORING assigned application No. 61 106 903 and filed on Oct. 20 2008 which is incorporated herein by reference in its entirety.

Large scale data processing systems such as web services and the like can produce vast amounts of log data including metrics. From time to time such data may be reviewed to diagnose problems with the data processing systems. However the quantity of log data generated by such systems can present significant difficulties in terms of data storage and review.

Various large scale computing systems such as those that operate large scale web services can generate massive amounts of data in the form of metrics that describe the performance of such services over time. For example the number of transactions that large scale electronic commerce systems conduct each day can range in the millions or more resulting in massive amounts of log data and or metrics generated on the terabyte scale regarding the performance of such systems. If something should go wrong with the operation of such services then personnel often search through log data that may include metrics in order to diagnose the problem with the service and ultimately implement a resolution.

However as such services become even more massive the amount of metrics they generate increases. As a consequence it becomes a problem to store all of the log entries or metrics generated by the normal operation of systems. Also due to the massive amounts of data involved it becomes more difficult to search through the metrics in order to diagnose and fix problems experienced with a service.

According to various embodiments of the present disclosure mass data representing metrics are received from various systems that are stored in a manner that allows the creation of monitoring outputs so that individuals who operate large scale systems can be apprised of the operating health of such systems at any given moment. In various embodiments rather than storing all of the metrics generated by a given service or system data models comprising an aggregation of the metrics received are generated that take up less storage space. The data models are such that monitoring of the operation of a given system is accomplished even though the original data metrics are not stored and are ultimately discarded. The storage of data models according to the various embodiments is data driven in the sense that the source of the metrics retains control as to how the data is stored by the various applications described herein.

With reference to shown is a data communications network according to various embodiments of the present disclosure. The data communication network includes various devices that communicate with each other over various networks. Such networks may comprise for example the Internet intranets wide area networks WANs local area networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

Among the various devices in the data communication network are one or more servers according to various embodiments. The one or more servers may be arranged in one or more server banks for example and may comprise server computers as can be appreciated. The servers may be located in a single installation or may be distributed among several geographically diverse locations as can be appreciated. For the sake of simplicity the one or more servers are referred to herein as the server although it is understood that the server as referred to herein may represent multiple servers.

In addition the data communication network includes a monitored system that generates logs and or metrics that may be transmitted to the servers as a data stream. In this respect the data stream as contemplated herein represents the various transfer approaches that may be employed such as batch transfers or other transfers as can be appreciated. The monitored system is an example of a service or physical system that generates the metrics .

To this end the metrics may describe a state of the monitored system which may comprise for example an aspect of a performance of the monitored system or other status information that may be quantified by a metric as can be appreciated. For example the monitored system may comprise a hardware based system such as an actual server computer that performs various functions and that generates various metrics describing the nature of the performance of the functions. Alternatively the monitored system may comprise an application such as a web service or other service that is executed in one or more server computers as can be appreciated.

The data communication network further includes at least one client that communicates with various services on the servers as will be described. The client may comprise various types of computer systems such as for example a desktop laptop or other computer system with like capability. To this end the client may also comprise a personal digital assistant cell phone or other portable device with like capability as can be appreciated. The client may interface with the server using various applications such as a browser application dedicated applications or other applications as can be appreciated.

There are various applications that are executed on the server according to various embodiments. Also one or more data stores may be associated with the servers for the storage of data as will be described. Among the applications executed on the servers are a validation application an aggregation application a data store application a monitoring service and a network server application . In addition various storage queues exist within the servers to store data based upon the operation of the various applications. Such storage queues include an aggregation queue and a storage queue . It is understood that the above mentioned applications are merely examples of how the functionality they perform may be organized. However it is possible to perform the same functionality with a different set of applications arranged in an alternative configuration as can be appreciated.

Further a data store is stored in a memory that is accessible to the server . Stored within the data store are data models that represent the metrics as will be described. To this end the data models stored within the data store are associated with dimensions . The dimensions are specified in association with the metrics received in the servers from the monitored system . Each of the data models is stored in association with time periods . Each time period is associated with a respective one of the dimensions in the data store . Each time period comprises one of a plurality of consecutive periods of time associated with a given dimension . A dimension comprises a key pair having a dimension label and a value.

As mentioned above the monitored system generates the metrics that are transmitted or transferred to the server via network or other communication system. Alternatively it is possible that the monitored system may be executed in the server where the transfer entails transfer among applications in the sever .

The metrics are received by the validation application that initially ensures that the metrics conform to specified transfer protocols and or formats that are predefined. In addition the validation application is configured to ensure that the number of dimensions specified by the metrics over time do not exceed a predefined threshold or otherwise does not represent a dimension overrun as will be described. Once metrics are validated by the validation application they are placed in the aggregation queue to be acted upon by the aggregation application .

The aggregation application processes the metrics in the aggregation queue and applies the results to the storage queue to be stored in the data store by the data store application . According to various embodiments the aggregation application serves to aggregate multiple metrics for respective time periods . To this end the aggregation application is configured to perform a time aggregation of the metrics received in the server and validated by the validation application .

To explain further according to various embodiments the rate at which the metrics are received in the validation application is very high. For example it is possible that the metrics received may comprise multiple terabytes of data per day such as 30 terabytes per day although the rate of flow may be less than or greater than this benchmark. In some cases such a flow rate might comprise as many as 200 000 or even up to 500 000 metrics or more each minute although the flow rate can be any flow rate. It can be rather expensive both economically and in terms of storage space and facilities needed to store each of the metrics .

According to one embodiment rather than attempting to store all of the metrics themselves data models are constructed in association with each one of a plurality of consecutive time periods . Stated another way the metrics associated with each respective consecutive time period are represented by a data model . According to one embodiment the process of generating the data models comprises aggregating the metrics for each consecutive time period thereby generating one or more aggregate metrics. To this end a data model may comprise one or more aggregate metrics.

For example assume each of the consecutive time periods is specified as a single minute although it is understood that the time periods can be specified as any time interval. Each metric that is associated with a given one of the time periods is aggregated into a data model representing that time period . Thus for a given one minute time period each metric that is associated with the time period is aggregated into the data model for that time period . In order to aggregate multiple metrics into a data model various calculations may be performed as will be described. Ultimately the data model associated with each time period may comprise a number of values representing various information about the metrics for the time period .

A metric is associated with a given time period for example if it has a time stamp that falls within the time period itself. The time stamp associated with a given metric may be generated by the monitored system or it may be generated by the validation application and associated with the metric upon receipt of the metric in the server .

A given metric may be involved in the aggregation for multiple time periods where each time period is associated with one of multiple different dimensions . A dimension is a category for which data models are maintained in the data store according to the various embodiments of the present disclosure. According to various embodiments one or more dimensions are associated with each metric received in the server . The dimensions are ultimately used to organize the storage of the data models in the data store . That is to say each of the data models associated with a given time period is stored in the data store in association with one of the dimensions .

When a metric is received in the server for example with one or more associated dimensions then the metric is used in the aggregation associated with a respective time period for each of the associated dimensions . Thus a given metric may be used in aggregation that results in multiple different data models associated with the respective time periods of the dimensions associated with the metric .

To this end when the aggregation application processes a given metric it determines the dimensions associated with the metric . Thereafter the aggregation application includes the metric in the aggregation resulting in the data models for respective time periods associated with the dimensions that were included with the metric .

According to one embodiment once a metric is included in the aggregations performed for one or more time periods of respective dimensions then the aggregation application discards the metric . From this point on only the data models for the respective time periods may be accessed in order to perform diagnostics or other functions with respect to the operation of the monitored system as the actual metrics generated no longer exist. Stated another way the actual metrics are not recoverable as they are not actually stored after the aggregation that results in the generation of the data models . This is advantageous as the amount of storage space to store the data models in association with the time periods is substantially less than the amount of storage space that would be needed to store the actual metrics themselves. The storage of data models in place of actual metrics may represent a reduction of data to be stored for example by a ratio of 1000 to 1 or other ratio.

According to one embodiment the dimensions by which the storage of data is organized in the data store may be increased or expanded based upon the appearance of the dimension in a metric received in the server . To increase or expand the dimensions in this sense means to add a new dimension to those already in existence. According to one embodiment a new dimension is created merely by its first appearance in association with a metric . According to various embodiments when the aggregation application encounters a new dimension associated with a metric then the aggregation application is configured to begin aggregation of subsequent metrics for the new dimension beginning with a pending time period that includes the time stamp of the metric that first included the new dimension .

In this respect the storage of the data models is data driven. The dimensions with which the data models are associated in the data store are created based upon the metrics received in the server . Stated another way the dimensions are not pre configured or specified in the data store . This advantageously provides a significant amount of flexibility for the operators of the monitored system in the storage of metrics . Specifically the control as to the dimensions under which metrics are aggregated and stored is retained by the operators of the monitored system .

At the same time the validation application is configured to detect whether an expansion of the dimensions comprises an error. This may be the case for example when the expansion would result in the creation of too many dimensions for a given monitored system as will be described. For example the validation application may be configured to limit the number of dimensions for a given entity to a threshold number of dimensions at any given time based on prior agreement. Once the limit has been exceeded the validation application may generate an error in the server that informs local personnel that the expansion of dimensions resulted in a total number of dimensions that exceeds the permissible threshold number of dimensions .

Alternatively the validation application may be configured to detect whether the expansion of the dimensions comprises an error by detecting whether a new dimension is actually an erroneous variation of a prior existing dimension that results in the erroneous appearance of a new or previously non existing dimension . For example in some cases the monitored system may append a given dimension with a time stamp or other data.

Once the aggregation for a given time period appears to be completed as it appears that there will be no further metrics received with a time stamp associated with the time period then the data model resulting from the aggregation is placed in the storage queue to be stored in the data store in association with the respective dimension . Thus the data for each dimension in the data store comprises data associated with multiple consecutive time periods .

According to one embodiment the data models are stored in the data store for a limited period of time. To this end the data store application may be configured to discard the data models after they have been stored for a predefined period of time. The length of the storage time may vary depending upon how much storage space exists the quantity of data represented by the data models or other data that is to be stored and or the purpose for storing the data. Such a time period may comprise for example two weeks or other time period. In any event the purpose such as a business purpose for storing the data may dictate that the storage time be specified regardless of the amount of storage space used etc.

In addition the monitoring service is configured to provide information based upon the data models stored in the data store in response to requests from the client . In this manner the monitoring service is configured to generate an output that indicates a performance of the monitored system based on the data models stored in the data store .

To this end the network server application may comprise a web server or other server application that facilitates browser access or other access to the monitoring service . The monitoring service may be configured to generate reports based on the data stored in the data store . Such reports may relay information about the past performance of the monitored system . The reports may be predefined and generated automatically to be sent to the client for a given entity or the reports may be requested in real time by the client . For example a given entity may request certain reports based on the dimensions for which data is stored in the data store . In addition other approaches may be employed in generating reports and the like to be rendered on the client so that the operational health of the monitored system can be monitored.

In addition according to another embodiment the applications executable on the server further include a metric directory application that maintains one or more active metric lists in a data store . The metric directory application serves to maintain a list of active metrics for which data models may be retrieved. To this end each time a data model generated from one or more instances of a metric is to be stored in the data store a copy of the same is supplied to the metric directory application . Alternatively copies of metrics themselves may be sent to the metric directory application . Each active metric list may be stored in the form of a table database or other data structure.

Based on the copy of the data models received the metric directory application maintains one or more active metric lists . Specifically an active metric list includes a listing of active metrics that are currently stored in the data store that may be accessed through the monitoring service . Specifically in order to access the data embodied in the data models for purposes of monitoring the operation of the monitored system the client can initially request a directory of the metrics for which data is stored in the data store . Alternatively such a directory may be automatically be generated when the client attempts to access the data in the data store in a home page or other starting point of entry. An active metric list may be associated for example with a given entity that sends metrics to the server .

In response to a request or in generating an initial portal such as a home page etc. to be sent to a client the metric directory application is configured to generate a current list or directory of active metrics for which data models are currently stored in the data store to be presented to the client . To ensure that the current list or directory of active metrics is in fact current the metric directory application is configured to maintain the active metric list .

To do this according to one embodiment a metric is not listed on the active metric list if the last instance of the metric received from the monitored system has been stored in the data store longer than a predefined period of time. In one example such a period of time may be any time period measured in minutes hours days weeks months or other interval. One example time period may comprise weeks although the time period may vary depending upon factors such as available storage space and other variables.

According to one embodiment when the metric directory application receives a new metric from the aggregation application either in the form of a metric itself or as a data model that was not listed in the active metric list the metric directory application identifies a current timestamp associated with the metric and stores both information about the metric and the current timestamp in a respective active metric list .

If the metric was included in the active metric list previously then the metric directory application simply updates the timestamp associated with such metric with the timestamp of the most recently received instance of the metric . In this manner an up to date list of the current active metrics and or data models in an active metric list is maintained.

In addition when the timestamp associated with a given metric in an active metric list indicates that the most recent data associated with a metric has been stored in the data store longer than the predefined storage time period mentioned above the metric directory application proceeds to remove such metric from the active metric list . Assuming for example that data models are only stored in the data store for the predefined storage time period then such data models would not be available as they may have been discarded. Under such circumstances metrics listed in the active metric list have become stale. Accordingly the removal of stale metrics from the active metric list by the metric directory application ensures that clients do not attempt to access metrics that no longer exist in the data store .

In addition an entity that operates a given monitored system may opt not to include their metrics in an active metric list due to concerns about privacy or security. To this end such entities may cause an identifier to be included in the metrics sent to the server that direct the metric directory application to ignore or discard such metrics so that they are not included in an active metric list .

With reference to shown is one example of a metric as generated by a monitored system according to an embodiment of the present disclosure. The metric is expressed in extensible markup language XML although it is understood that the metric may be expressed in other languages and formats as can be appreciated. The metric includes the dimensions such as Name Namespace Website Page Type and Server. It is understood that these dimensions are merely examples of the many different kinds of dimensions that may be included in the given metrics . To this end the dimensions may be any category that may be reduced to a variable or other value as can be appreciated. Further associated with the metric is a time stamp that indicates a time that the metric was generated. Although the dimensions are depicted as including Name and Namespace in some embodiments these fields may not comprise dimensions and may be located elsewhere within the metric outside of the Dimensions nest.

The time stamp thus may identify a state of the monitored system at the time that the metric was created. In the example of the time stamp indicates the latency associated with the generation of a web page. The time stamp is thus generated when the latency was identified after the page was generated itself. Alternatively a metric may be received at the server without a time stamp . In such case the validation application may be configured to generate a time stamp upon receipt of a metric and associate such time stamp with the metric .

The metric further includes a value that describes some aspect of the operation of the monitored system . For example the value described in the metric of is a number that represents the latency associated with the generation of a web page. However it is understood that the value associated with a metric may represent an aspect of the monitored system that can be expressed by or quantified into a number as can be appreciated. In addition the metric further expresses the units of the value .

To provide specific examples metrics may indicate percent utilization of processor resources and the traffic throughput associated with network interfaces. The metrics may include the number of bytes that are written to or read from a disk or other type of memory. The metrics may relate to response latencies request counts and the number of instances of healthy and or unhealthy hosts. In addition the metrics may relate to other parameters associated with the operation or usage of a given monitored system .

With reference to shown is a block diagram that illustrates the operation of the various components in the server according to various embodiments of the present disclosure. To this end depicts the aggregation queue the aggregation application the storage queue the data store application and the data store . The aggregation queue includes several metrics that are expressed in terms of a time stamp various dimensions a value and units .

The aggregation application accesses the metrics from the aggregation queue and performs a time aggregation thereby generating a data model for each time period as described above. For example as shown in the aggregation application currently is generating data models for pending time periods for three different dimensions namely dimensions D D and D. The dimensions D D and D correspond to the dimensions in the metrics which comprise a name name space and page type. It is understood that the dimensions described herein are merely provided as examples where other dimensions may be employed. The aggregation application calculates a data model for a pending time period for each of the dimensions . For example as shown with respect to the current pending time periods are for the one minute interval beginning with 10 01. 

There are three pending time periods for the three dimensions where each time period is stored in association with the respective one of the dimensions in the data store . As the aggregation application obtains metrics from the aggregation queue it calculates the data models for each of the pending time periods for the respective dimensions or any other dimensions encountered. At some point it is deemed that no further metrics are likely to be received for a pending time period . At such time the aggregation application places the results of the aggregation of the metrics for a pending time period into the storage queue to be stored in the data store .

The data models that are placed in the storage queue may comprise for example a plurality of aggregated metrics that describe or represent the metrics associated with the respective time periods that were received in the server from the monitored system . To this end the aggregated metrics may comprise for example a total count of the metrics associated with the respective time period an average of the values associated with the metrics of the respective time period a maximum one of the values and or a minimum one of the values . Also a sum of the values may be maintained as well as any other type of aggregated metric or other information about the metrics for a given time period .

The types of aggregate metrics calculated relate to the degree of aggregation performed for the respective time periods . Thus the degree of aggregation relates to the degree of detail in the information maintained in a data model relative to the metrics associated with a given time period . The degree of aggregation is lower if more aggregate metrics are calculated or if a greater amount of information is retained in the data model . Also the converse is true in that the degree of aggregation is higher if less aggregate metrics are calculated or if a lesser amount of information is retained in a data model .

The degree of aggregation relates also to the length of the time periods for which data models are generated. The degree of aggregation decreases as the time periods decrease. Conversely the degree of aggregation increases as the time periods increase.

The degree of aggregation selected may depend in part upon what data is needed to monitor the monitored system . To this end the nature of the data models stored determines to some extent how a monitored system can be monitored. For example it may be necessary to examine the data models to determine whether the monitored system is in compliance with operational thresholds. The data models should reflect the data needed to determine and or measure the performance of the monitored system with respect to the operational thresholds. For example if an average latency becomes greater than a given threshold it may be necessary to take corrective action such as bringing extra resources such as processing capacity to reduce latency. Alternatively the degree of aggregation of the metrics for each time period is specified so as to create the data models having the needed aggregate metrics that enable general monitoring of a performance of the monitored system that may or may not be measured with respect to one or more predefined operational thresholds.

In some situations the aggregation application may obtain a late one of the metrics from the aggregation queue . For example as depicted in the aggregation queue includes mostly metrics that have a time stamp of 10 01. However one of the metrics has a time stamp of 09 52. This represents a metric that for some reason was being received relatively late from the monitored system . Such late metrics represent metrics received out of temporal order relative to the other metrics .

According to one embodiment the aggregation application may send a request to the data store application for the data model for the respective time period associated with the late metric . The data store application then accesses the data model for the respective time period and returns the same to the aggregation application . In the case that the late one of the metrics is associated with a time period that is stored in the storage queue the data store application may search the storage queue after it is determined that the given time period has not yet been stored in the data store .

In response to the request from the aggregation application the data store application returns the data model associated with the time period of the late one of the metrics so that the respective data model may be updated with the late one of the metrics . Thereafter the aggregation application places the updated one of the data models in the storage queue to be placed into the data store . In this respect the updated one of the data models may be stored in the data store . In one alternative the updated one of the data models may be written over the prior data model as can be appreciated.

This provides a distinct advantage in that the aggregation application can maintain values for aged ones of the time periods . This addresses situations where metrics may be held up in transit over various networks such as the Internet or other networks as can be appreciated.

In addition it should be noted that the time periods stored for a given dimension may have a time stamp that is greater than the current time as noted by the server as it is possible that the monitored system may have a clock that is set earlier with respect to the clock of the server . Consequently the time stamps associated with the respective time periods may extend into the future relative to the time as known by the server . According to one embodiment a cutoff is specified such that metrics received with a time stamp that is too far in the future relative to the clock of the server are ignored or an error occurs that requires corrective action taken to fix the time stamp problem in the monitored system . According to one embodiment the limit to the future time stamps allowable is one hour from the current time of the server or other time limit as can be appreciated. Such a time limit reflects the fact that there may be a malfunction associated with the monitored system such that time stamps are being generated that are too far in the future relative to the actual time of the metrics generated.

In addition the aggregation queue and the storage queue are employed and the various functional components are configured so as to prevent a loss of data upon an occurrence of a loss of power etc.

Referring next to shown is another example of the operation of the various components as was described with according to various embodiments. As shown in at some point during the receipt of metrics in the aggregation queue a new dimension is experienced. In particular a new dimension of page type page1 appears in the aggregation queue . In response to the appearance of a new dimension the aggregation application generates a new pending time period D associated with the new dimension . Also the aggregation application may communicate to the data store application that the new dimension D has been created for storage in the data store .

Alternatively the data store application may store the respective data model associated with the new dimension in the data store automatically when it accesses a data model associated with a new dimension from the storage queue . This illustrates the fact that the storage of the data models in the data store is data driven. That is to say data is stored in association with new dimensions automatically based upon the dimensions associated with the metrics that are received by the server from the monitored system as can be appreciated.

With reference to shown is a flowchart that illustrates one example of various functionality of the aggregation application in view of the foregoing discussion. Alternatively the flowchart of may be viewed as depicting steps of a method implemented in the server .

The flowchart of represents for example a routine that is executed for each metric obtained from the aggregation queue . Assuming that a given metric has been obtained from the aggregation queue then in box the aggregation application determines whether the time stamp associated with the metric is out of temporal order with respect to the current pending time periods for the respective dimensions maintained by the aggregation application at any given time. A metric may be out of order if the one or more data models that should take the current metric into account have already been stored in the storage queue or the data store in association with the respective one of the dimensions .

If it is determined that the current metric is out of temporal order in box then the aggregation application proceeds to box . Otherwise the aggregation application progresses to box . In box the aggregation application implements an update of the one or more data models associated with the metric that is out of temporal order with respect to the current pending time periods of the aggregation application . This may involve communication with the data store application in order to retrieve the respective data models that need to be updated as described above. Thereafter the aggregation application ends as shown.

In box the aggregation application determines whether a new dimension exists in the current metric obtained from the aggregation queue . If such is the case then the aggregation application proceeds to box . Otherwise the aggregation application progresses to box .

In box the aggregation application implements the setup of a new storage bucket and pending time period for the new dimension . A storage bucket in this sense is an abstraction to represent the storage of data models or other data in association with the new dimension in the data store . In order to implement the setup of the new storage bucket for the new dimension the aggregation application may communicate with the data store application to inform the data store application of a need for the new storage bucket for the new dimension .

Alternatively the aggregation application may simply create a new data model associated with a new pending time period for the new dimension . Note that if there are time periods in which no metrics were received from which a data model can be calculated then no data models are stored for such time periods . In this sense the time records represented by the time periods for a given dimension may have gaps without data.

From box the aggregation application proceeds to box . In box the aggregation application determines whether the time stamp associated with the current metric is to be included in the calculation of the data models of the pending one of the time periods currently maintained by the aggregation application or if the new metric is to be included in the calculation of a data model for the next consecutive time period of one or more dimensions . Assuming that the metric includes dimensions associated with the next consecutive ones of the time periods then the aggregation application proceeds to box . Otherwise the aggregation application progresses to box .

In box one or more data models associated with new pending time periods that are in turn associated with the current metric are calculated. Thereafter in box one or more data models associated with corresponding time periods that are presumed complete are placed in the storage queue for storage in the data store . In this respect the aggregation application may maintain a minimum number of consecutive time periods for each dimension as pending time periods before being placed in the storage queue .

Such time periods may be maintained on a first in first out basis as can be appreciated. The decision as to whether to place a given data model associated with a respective time period into the storage queue depends upon whether it is believed that any additional metrics will be received that have not been processed for the respective one or more time periods . This may determine how many consecutive time periods for each dimension are maintained as pending by the aggregation application at any given time. Assuming that there are any pending time periods that are placed in the storage queue in box thereafter the aggregation application ends as shown.

Referring to box assuming that the time stamp of the current metric does not require the creation of new time periods for respective dimensions as described above then in box the data models for current pending time periods are recalculated based upon the current metric received from the aggregation queue . Thereafter the aggregation application ends.

With reference to shown is a flowchart that depicts an example of functionality of the aggregation application in updating the data models associated with a time period for a given dimension that is already stored in the data store where one of the metrics has been received out of temporal order by the aggregation application . Alternatively the flowchart of may be viewed as steps of a method implemented in the server to accomplish the same.

Beginning with box upon receiving a metric that is out of temporal order and is to be taken into account in the calculation of data models of previously stored time periods for respective dimensions indicated in the metric the aggregation application requests the data models for the respective time periods corresponding to the time stamp and the dimensions of the late metric . This request may be provided to the data store application that may obtain the data models requested and transmit them back to the aggregation application .

In box the aggregation application determines whether the data models requested have been received from the data store application or are otherwise available to the aggregation application . Assuming such is the case then in box the aggregation application recalculates the data models for the respective time periods based on the late received metric . Thereafter in box the data models for the respective time periods are placed in the storage queue to ultimately be stored in the data store in association with the respective time period of a given dimension as described above. As mentioned above it may be the case that the newly calculated data models for the respective time periods are ultimately written over the previously existing time periods . Thereafter the aggregation application ends as shown.

With reference to shown is a flowchart that depicts an example of functionality of the metric directory application in maintaining and adding metrics to the active metric list . Alternatively the flowchart of may be viewed as steps of a method implemented in the server to accomplish the same.

Beginning with box the metric directory application determines whether an identifier is associated with a metric or data model that indicates that the metric or data model is to not be included in an active metric list . If such is the case the metric directory application ends as shown where the metric or data model is ignored and or discarded. Otherwise the metric directory application proceeds to box . In box the metric directory application examines a metric or data model representing multiple instances of a metric from the aggregation application or other source to identify whether such metric currently exists as part of the active metric list . If so then the metric directory application proceeds to box . Otherwise the metric directory application moves to box .

In box the metric directory application stores the most recent timestamp for the metric in the active metric list in association with the metric itself. Thereafter this function of the metric directory application ends.

In box the metric directory application adds a previously nonexisting metric to the active metric list . Thereafter in box a timestamp for the newly added metric is stored in association with the newly added metric in the active metric list . Thereafter this function of the metric directory application ends as shown.

With reference to shown is a flowchart that depicts an example of further functionality of the metric directory application in removing stale or out of date metrics from the active metric list . Alternatively the flowchart of may be viewed as steps of a method implemented in the server to accomplish the same. The functionality of the metric directory application comprises a loop that cycles for each of the metrics stored in the active metric list .

Beginning with box the metric directory application gets the latest timestamp for the current metric in the active metric list under consideration. Then in box the metric directory application determines whether the metric is stale based upon the timestamp associated therewith given that data models may only be stored for a predefined period of time. If the respective metric is stale then the metric directory application proceeds to box in which the stale metric is removed from the active metric list . If the metric is determined to not be stale in box then this portion of the metric directory application moves to box in order to designate the next metric listed in the active metric list for consideration. Once a metric is removed from the active metric list the metric directory application proceeds to box to designate the next metric for consideration. Accordingly this portion of the metric directory application continually checks each of the metrics to identify those that are stale and removes them from the active metric list .

Referring next to shown is a schematic block diagram of one example of a server according to an embodiment of the present disclosure. The server includes a processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the server may comprise for example a server computer with such structure. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory are the validation application the aggregation application the data store application the monitoring service the network server application the metric directory application and potentially other applications. In addition a server operating system may be stored in the memory and executed by the processor as can be appreciated. Also the aggregation queue storage queue data store and data store may be stored in the memory or they may be stored in some other memory accessible to the server . It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Also other data may be stored in the memory and accessed by the processor . According to one embodiment each of the data stores and may comprise for example a database or other appropriate data storage structure. Where any component discussed herein is implemented in the form of software any one of a number of programming languages such as for example C C Java Java Script Perl Python Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor or source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory read only memory a hard drive compact disk CD floppy disk or other memory components.

The memory is defined herein as both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives floppy disks accessed via an associated floppy disk drive compact discs accessed via a compact disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Although various components executed on the server as described above may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware the same can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc.

The flowcharts of show the functionality and operation of portions of the aggregation application and the metric directory application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also where the validation application the aggregation application the data store application the monitoring service the metric directory application and any other component implemented in the server as described above comprises software or code the same can be embodied in any computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the software or code for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example electronic magnetic optical electromagnetic or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives or compact discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

