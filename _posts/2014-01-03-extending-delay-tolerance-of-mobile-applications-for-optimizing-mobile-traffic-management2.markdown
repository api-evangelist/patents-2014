---

title: Extending delay tolerance of mobile applications for optimizing mobile traffic management
abstract: Systems and methods for extending delay tolerance of mobile applications to optimize mobile traffic management are disclosed. In a mobile device, network stack timers or protocol stack timers are modified to extend delay tolerance of applications for radio alignment. In an embodiment, tolerance of mobile applications on a mobile device to delay in establishing a connection to a wireless network is extended by an application or a local proxy on a mobile device. Based on the tolerance that is extended, requests intercepted from the mobile applications are aggregated, over a period of time, such that transfer of the requests intercepted during the period of time is delayed. This minimizes the number of times the mobile device connects to the network, reducing the power consumption on the mobile device and unnecessary signaling in the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09603049&OS=09603049&RS=09603049
owner: Seven Networks, LLC
number: 09603049
owner_city: Marshall
owner_country: US
publication_date: 20140103
---
This application is a continuation of U.S. patent application Ser. No. 14 147 434 filed on Jan. 3 2014 entitled MODIFYING SYSTEM TIMERS FOR OPTIMIZING MOBILE TRAFFIC MANAGEMENT which claims priority to and benefit from U.S. Provisional Patent Application Ser. No. 61 857 152 filed on Jul. 22 2013 entitled MODIFYING SYSTEM TIMERS FOR OPTIMIZING MOBILE TRAFFIC MANAGEMENT and is related to U.S. patent application Ser. No. 14 049 105 filed on Oct. 8 2013 entitled A PROXY SERVER ASSOCIATED WITH A MOBILE CARRIER FOR ENHANCING MOBILE TRAFFIC MANAGEMENT IN A MOBILE NETWORK and U.S. patent application Ser. No. 14 050 211 filed on Oct. 9 2013 entitled SYSTEMS AND METHODS FOR ENHANCING MOBILE TRAFFIC MANAGEMENT ATA PROXY SERVER ASSOCIATED WITH OR RESIDING ON A MOBILE CARRIER FOR ALIGNING TRAFFIC IN THE MOBILE NETWORK . The content of each of the aforementioned applications is herein expressly incorporated by reference in its entirety.

Applications such as FACEBOOK TWITTER ACCUWEATHER CNN etc. on mobile devices such as smart phones and tablets periodically access the mobile network to check for updates upload data etc. The applications in the process of periodically connecting to and disconnecting from the network exchange several messages e.g. radio resource control or RRC messages with components in the mobile network. These messages contribute to signaling in the mobile network. With increased use of smart phones and data driven applications the mobile network can be overloaded with signaling from mobile devices resulting in mobile network congestion and degradation of the performance of mobile data sessions.

The following description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding of the disclosure. However in certain instances well known or conventional details are not described in order to avoid obscuring the description. References to one or an embodiment in the present disclosure can be but not necessarily are references to the same embodiment and such references mean at least one of the embodiments.

Reference in this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover various features are described which may be exhibited by some embodiments and not by others. Similarly various requirements are described which may be requirements for some embodiments but not other embodiments.

The terms used in this specification generally have their ordinary meanings in the art within the context of the disclosure and in the specific context where each term is used. Certain terms that are used to describe the disclosure are discussed below or elsewhere in the specification to provide additional guidance to the practitioner regarding the description of the disclosure. For convenience certain terms may be highlighted for example using italics and or quotation marks. The use of highlighting has no influence on the scope and meaning of a term the scope and meaning of a term is the same in the same context whether or not it is highlighted. It will be appreciated that same thing can be said in more than one way 

Consequently alternative language and synonyms may be used for any one or more of the terms discussed herein nor is any special significance to be placed upon whether or not a term is elaborated or discussed herein. Synonyms for certain terms are provided. A recital of one or more synonyms does not exclude the use of other synonyms. The use of examples anywhere in this specification including examples of any terms discussed herein is illustrative only and is not intended to further limit the scope and meaning of the disclosure or of any exemplified term likewise the disclosure is not limited to various embodiments given in this specification.

As used herein a module a manager a handler a detector an interface a controller a normalizer a generator an invalidator a categorizer a simulator an analyzer a tracker or an engine includes a general purpose dedicated or shared processor and typically firmware or software modules that are executed by the processor. Depending upon implementation specific or other considerations the module manager handler detector interface controller normalizer generator invalidator or engine can be centralized or its functionality distributed. The module manager handler detector interface controller normalizer generator invalidator categorizer simulator analyzer tracker or engine can include general or special purpose hardware firmware or software embodied in a computer readable storage medium for execution by the processor.

As used herein a computer readable medium or computer readable storage medium is intended to include all mediums that are statutory e.g. in the United States under 35 U.S.C. 101 and to specifically exclude all mediums that are non statutory in nature to the extent that the exclusion is necessary for a claim that includes the computer readable storage medium to be valid. Known statutory computer readable mediums include hardware e.g. registers Random Access Memory RAM Non Volatile NV storage to name a few but may or may not be limited to hardware.

Without intent to limit the scope of the disclosure examples of instruments apparatus methods and their related results according to the embodiments of the present disclosure are given below. Note that titles or subtitles may be used in the examples for convenience of a reader which in no way should limit the scope of the disclosure. Unless otherwise defined all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this disclosure pertains. In the case of conflict the present document including definitions will control.

Embodiments of the present disclosure include systems and methods for modifying system timers for optimizing mobile traffic management.

Applications have varying tolerance to delay in receiving responses to transactions e.g. requests that they initiate. When a response to a request from an application is delayed a timer associated with the application may time out. Similarly protocol layer and network stack layer e.g. TCP IP stack also use timers that may time out due to network delays caused by packet loss socket error server not responding and the like. Thus the delay tolerance of an application can depend on any of the application protocol or network stack specific timers. In general application specific timers have the highest precedence followed by protocol specific timers e.g. protocol specific API Application Programming interface timers framework specific timers framework level timers and then network stack timers e.g. TCP stack timers UDP stack timers .

Application developers typically define application timeouts as specific values or default values associated with protocol stacks e.g. HTTP stack or network stacks e.g. TCP UDP stack . These timers generally timeout after a short duration and can vary across multiple applications. As a result these timers can prevent optimization and or management of traffic using various techniques. Example techniques for optimization and or management of traffic include but are not limited to aligning delaying clumping e.g. gating or bundling blocking or restricting prioritizing filtering and or other methods of alignment.

In some embodiments the disclosed systems and methods identify tolerance of delay or delay tolerance to keepalives other non user interactive traffic and in some instances user interactive traffic e.g. low priority non time critical traffic for various applications on a mobile device. In further embodiments the disclosed systems and methods can also identify tolerance of delay to keepalives other non user interactive traffic and in some instances user interactive traffic for third party servers such as application or web servers that provide and or support services of applications on the mobile device e.g. application server content provider ad server promotional content server e coupon server as shown in . Note that a third party server and an application server is used interchangeably throughout the disclosure.

Embodiments of the present disclosure can determine manipulate and or optimize delay tolerance for applications to gate multiple outgoing requests associated with multiple applications for a period of time without causing the applications to timeout. As used herein outgoing requests or outgoing traffic includes requests or traffic initiated from a mobile device. By way of example outgoing requests can include requests e.g. user initiated HTTP or HTTPS requests or background requests from mobile applications on a mobile device transport or transmission protocol messages e.g. SYN ACK FIN RST and the like. As used herein incoming traffic includes traffic initiated by one or more application servers associated with one or more mobile applications on a mobile device. By way of example incoming traffic can include FACEBOOK CNN TWITTER YAHOO NEWS BBC NEWS SPOTIFY ACCUWEATHER LINE and other application messages initiated from the server side i.e. from the application servers.

Some embodiments of the disclosed technology can further align transfer of the gated or otherwise delayed requests to connection or radio events. For example transfer of the requests that are gated or delayed can occur when a radio on the mobile device is turned on e.g. connected activated powered on promoted or otherwise changed to a different power state or mode. For example in 3G network radio state promotion includes radio state change from idle to CELL DCH or from a low power state cell FACH state is a low power state with low throughput and power consumption to high power state CELL DCH state is a high power state with high throughput and power consumption . Similarly in LTE Long Term Evolution network a radio state promotion includes radio state change from idle to connected. Embodiments of the present disclosure can manipulate or optimize the delay tolerance by manipulating or optimizing the highest level independent timer in the protocol stack. In some instances the highest level independent timer can be an application s own timer i.e. application specific timer as shown in . Embodiments of the present disclosure can then identify application specific delay tolerance or timeout based on connection loss gate timing and the like. For example a local proxy on a mobile device can gradually increase the delay until an application times out and closes the socket the application times out and attempts to retry the request or the application s retry interval becomes longer than a specified threshold and the like. The disclosed systems and methods can then use the determined delay tolerance for aligning outgoing requests e.g. with radio events.

Some applications rely on framework specific timers or protocol specific API timers i.e. protocol specific timer as shown in . Embodiments of the present disclosure include framework wrappers or other components in the operating system or integrable with the operating system that can modify the protocol specific API timeouts to a fairly large or infinite value to prevent applications that rely on such protocol level timers from timing out. The disclosed systems and methods can then utilize the enhanced delay tolerance to intercept outgoing requests e.g. from one or more applications and bundle e.g. aggregate accumulate or batch them together for transfer to optimize the frequency with which a mobile device needs to establish a connection and or optimize the amount of data being sent per connection session. This results in reduction in signaling increased data transfer efficiency and reduction in mobile device power consumption.

Some applications can use network stacks such as the TCP stack directly and rely on the TCP stack timers i.e. network stack timer as shown in . When a TCP socket is being established an application developer can set how long the application is allowed to wait for the socket to be established. If the socket is not established within the specified time e.g. defined by connect timeout an error or timeout exception e.g. an event that changes the normal course of operation or requires special processing is thrown e.g. raised generated or triggered . The TCP stack can handle or resolve the timeout exception in a number of ways. For example the TCP stack can retry a number of times to attempt to establish the socket without the application being aware i.e. in a manner that is transparent to the application .

Embodiments of the present disclosure can include a framework wrapper and or a component in the operating system or integrable with the operating system that can overwrite the connect timeout value for the application to allow TCP stack parameters to be applied. TCP stack parameters are typically larger than application timeouts and can thus increase the delay tolerance for establishing new sockets. Similarly if or when a TCP socket is already established a timeout exception can occur if an application does not receive a response from a server e.g. application server associated with the application within a period of time e.g. usually a few seconds defined by a read timeout . The application can then retry a number of times using its own retry mechanism or other exception handling mechanisms. Embodiments of the present disclosure can further include a framework wrapper or a component in the operating system or integrable with a mobile operating system that can overwrite the read timeout value to prevent the socket from timing out and thus increase the delay tolerance for reading sockets.

In some embodiments the disclosed systems and methods can use a pseudo interface where data packets are routed so that the kernel never sends a reset signal to the sockets when the radio of a mobile device is turned off or powered down. Some or all of the TCP connections can be routed through a distributed proxy comprising a proxy server a local proxy and or a network side proxy as shown in . The distributed proxy can delay the socket connection to third party application servers e.g. application servers content servers ad server promotion content server coupon server as shown in and TCP read timeouts in the distributed proxy for a long period of time. States of the TCP connections like sync est read write and or other states can be maintained in the distributed proxy. The applications meanwhile remain unaware and can wait for connection without timing out. The local proxy can send acknowledgement packets ACKs or other cached messages to the applications without sending the actual queries from the applications to the network. Various implementations of the disclosed systems and methods will now be described.

In some embodiments the time periods Tand Tmay be static and can be predefined and or subsequently configured and reconfigured by a local proxy a proxy server or a carrier side proxy server e.g. network side proxy a proxy server residing in or associated with a mobile carrier or operator as shown in . Alternately these time periods may be determined at run time and may be dependent on policy device state user behavior and or other characteristics. For example if the screen is off Tcan be made much larger as allowed by the extended delay tolerance. Similarly when the screen is off Tcan be made smaller than Twhen the screen is off to for example minimize impact on user experience. In some embodiments when the screen is on the traffic management can be temporarily suspended. Thus manipulation of the delay tolerance of applications allows requests to be bundled for bulk or batch transfer using a single connection which reduces the number of radio resource control RRC messages exchanged between the mobile device and one or more base stations. This results in significant reduction of signaling in the mobile network. Further as the mobile device spends more time in the disconnected or idle state or low power state aggregating requests and there are fewer radio state transitions overall power consumption on the mobile device is also reduced.

The framework layer includes framework application programming interfaces APIs that are used by the core applications and other applications to take advantage of the mobile device hardware access location information store data in internal or external storage on the mobile device run background services add notifications and the like. In some embodiments framework wrappers plugins can be deployed to the mobile device platform stack as an add on or as a firmware update. In one example implementation the framework wrappers include a module or component that can monitor and or select certain data streams e.g. HTTP based data stream and modify the protocol specific timeouts to extend the delay tolerance of associated applications for aligning of requests responses without the applications being aware of the modification.

The core and other libraries and can be used by various components of the mobile device platform and provide many of the functionalities. Example core libraries include libraries for supporting playback and recording of audio video and images managing access to the display subsystem web browser engine libraries libraries for bitmap and vector font rendering SQLite library system C library and the like. Each mobile application can run in its own process with its own instance of the Virtual Machine such as the Dalvik VM.

The OS or the kernel e.g. Linux kernel acts as an abstraction layer between the hardware and the rest of the stack including the application layer the framework layer framework wrappers plugins the libraries and the virtual machine . The kernel supports core system services such as memory and process management network stack driver model and security. In some embodiments the kernel includes a module or component for monitoring data streams from applications e.g. non user interactive traffic from certain applications that rely on TCP stack timers low priority traffic from applications relying on TCP stack timers and detecting and or modifying application specific TCP timeouts to prevent timeout exception from being triggered without the applications being aware of the modification. Such a component may be a part of the stock OS or may be integrated within the OS by device manufacturers carriers and or end users. In some embodiments the module or component may be deployed as a customized read only memory hereinafter custom ROM that replaces the firmware on the mobile device or as a firmware update to the OS to provide delay tolerance optimization functionalities.

As illustrated when protocol specific timeouts are modified applications that rely on those protocol specific timeouts can wait for a longer time to receive responses without generating or raising a timeout exception or error. Similarly when TCP timeouts are modified applications that rely on the TCP timeouts can wait for an otherwise longer time to establish new sockets and or read from established sockets without generating or raising a timeout exception or error. Outgoing TCP traffic from the applications can be intercepted by the client side proxy which uses intelligent gating delay to align outgoing traffic from one or more applications. The aligned traffic is then sent over TCP as outgoing traffic to respective third party application servers e.g. application servers content servers as shown in .

The client devices can be any system and or device and or any combination of devices systems that is able to establish a connection including wired wireless cellular connections with another device a base station a server and or other systems such as host server and or application server content provider . Client devices will typically include a display and or other output functionalities to present information and data exchanged between among the client devices and or the host server and or application server content provider . The application server content provider can by any server including third party servers or service content providers further including advertisement promotional content publication or electronic coupon servers or services. Similarly separate advertisement servers promotional content servers and or e Coupon servers as application servers or content providers are illustrated by way of example.

The client devices can include for example mobile hand held or portable devices wireless devices or non portable devices and can be any of but not limited to a server desktop a desktop computer a computer cluster or portable devices including a notebook a laptop computer a handheld computer a palmtop computer a mobile phone a cell phone a smart phone a PDA a Blackberry device a Palm device any tablet a phablet a class of smart phones with larger screen sizes between a typical smart phone and a tablet a handheld tablet e.g. an iPad the Galaxy series the Nexus the Kindles Kindle Fires any Android based tablets Windows based tablets or any other tablet any portable readers reading devices a hand held console a hand held gaming device or console a head mounted device a head mounted display a thin client or any SuperPhone such as the iPhone and or any other portable mobile hand held devices or fixed wireless interface such as a M2M device wearable devices mobile enabled electronic glasses mobile enabled electronic watches wireless enabled glasses wireless enabled watches wireless electronic glasses wireless electronic watches etc. In one embodiment the client devices for mobile devices host server and application server are coupled via a network and or a network . In some embodiments the devices and host server may be directly connected to one another.

The input mechanism on client devices can include touch screen keypad including single touch multi touch gesture sensing in 2D or 3D etc. a physical keypad a mouse a pointer a track pad a stylus a stylus detector sensor receptor motion detector sensor e.g. including 1 axis 2 axis 3 axis accelerometer etc. a face detector recognizer a retinal detector scanner a light sensor capacitance sensor resistance sensor temperature sensor proximity sensor a piezoelectric device device orientation detector e.g. electronic compass tilt sensor rotation sensor gyroscope accelerometer or any combination of the above.

Signals received or detected indicating user activity at client devices through one or more of the above input mechanism or others can be used in the disclosed technology in acquiring context awareness at the client device . Context awareness at client devices generally includes by way of example but not limitation client device operation or state acknowledgement management user activity behavior interaction awareness detection sensing tracking trending and or application e.g. mobile applications type behavior activity operating state etc.

Context awareness in the present disclosure also includes knowledge and detection of network side contextual data and can include network information such as network capacity bandwidth traffic type of network connectivity and or any other operational state data. Network side contextual data can be received from and or queried from network service providers e.g. cell provider and or Internet service providers of the network and or network e.g. by the host server and or devices . In addition to application context awareness as determined from the client side the application context awareness may also be received from or obtained queried from the respective application service providers by the host and or client devices .

The host server can use for example contextual information obtained for client devices networks applications e.g. mobile applications application server provider or any combination of the above to manage the traffic in the system to satisfy data needs of the client devices e.g. to satisfy application or any other request including HTTP request . In one embodiment the traffic is managed by the host server to satisfy data requests made in response to explicit or non explicit user requests and or device application maintenance tasks. The traffic can be managed such that network consumption for example use of the cellular network is conserved for effective and efficient bandwidth utilization. In addition the host server can manage and coordinate such traffic in the system such that use of device side resources e.g. including but not limited to battery power consumption radio use processor memory use are optimized with a general philosophy for resource conservation while still optimizing performance and user experience. The host server may also indirectly manage traffic via creation selection and or deployment of traffic blocking policy for implementation on the mobile device in some embodiments.

For example in context of battery conservation the mobile device can observe user activity for example by observing user keystrokes backlight status or other signals via one or more input mechanisms etc. and alter mobile device behaviors. The mobile device can also request the host server to alter the behavior for network resource consumption based on user activity or behavior.

In one embodiment traffic management for resource conservation is performed using a system distributed between the client device and the network . The distributed system can include proxy and cache components on the side of the client device and or the side of the network .

In another embodiment the traffic management for resource conservation is performed using a system distributed between the host server and the client device . The distributed system can include a proxy server and cache components on the server side and a local proxy and cache components on the device client side for example as shown by the server cache on the server side and the local cache on the client device side.

In yet another embodiment the traffic management for resource conservation is performed using a system distributed among the host server client device and the network . The distributed system can include proxy and or cache components on the server side on the client device side and on the network side .

Functions and techniques disclosed for context aware traffic management for resource conservation in networks e.g. network and or and devices reside in a distributed proxy and cache system. The proxy and cache system can be distributed between and reside on a given client device in part or in whole the host server in part or in whole and or the network side proxy in part or in whole. The distributed proxy and cache system are illustrated with further reference to the example diagram shown in . Functions and techniques performed by the proxy and cache components in the client device and related components therein are described respectively in detail with further reference to the examples of . Similarly functions and techniques performed by the proxy and or cache components in the network and related components therein are described respectively in detail with further reference to the examples of . Functions and techniques performed by the components in the network side proxy which is a proxy server associated with or residing on a mobile carrier network mobile operator network or mobile operator server are described in detail in the examples of . Functions and techniques performed by the proxy server and cache components in the host server and related components are described in detail in the examples of .

In one embodiment client devices communicate with the host server and or the application server over network which can be a cellular network and or a broadband network. To facilitate overall traffic management between devices and various application servers content providers to implement network bandwidth utilization and device resource e.g. battery consumption the host server can communicate with the application server providers over the network which can include the Internet e.g. a broadband network .

In general the networks and or over which the client devices the host server and or application server communicate may be a cellular network a broadband network a telephonic network an open network such as the Internet or a private network such as an intranet and or the extranet or any combination thereof. For example the Internet can provide file transfer remote log in email news RSS cloud based services instant messaging visual voicemail push mail VoIP and other services through any known or convenient protocol such as but is not limited to the TCP IP protocol UDP HTTP DNS FTP UPnP NSF ISDN PDH RS 232 SDH SONET etc.

The networks and or include any collection of distinct networks operating wholly or partially in conjunction to provide connectivity to the client devices and the host server and may appear as one or more networks to the serviced systems and devices. In one embodiment communications to and from the client devices can be achieved by an open network such as the Internet or a private network broadband network such as an intranet and or the extranet. In one embodiment communications can be achieved by a secure communications protocol such as Secure Sockets Layer SSL or Transport Layer Security TLS .

In addition communications can be achieved via one or more networks such as but are not limited to one or more of WiMax a Local Area Network LAN Wireless Local Area Network WLAN a Personal Area Network PAN a Campus Area Network CAN a Metropolitan Area Network MAN a Wide Area Network WAN a Wireless Wide Area Network WWAN or any broadband network and further enabled with technologies such as by way of example Global System for Mobile Communications GSM Personal Communications Service PCS Bluetooth Wi Fi Fixed Wireless Data 2G 2.5G 3G e.g. WCDMA UMTS based 3G networks 4G IMT Advanced pre 4G LTE Advanced mobile WiMax WiMax 2 Wireless MAN Advanced Networks Enhanced Data Rates for GSM Evolution EDGE General Packet Radio Service GPRS Enhanced GPRS iBurst UMTS HSPDA HSUPA HSPA HSPA UMTS TDD 1xRTT EV DO messaging protocols such as TCP IP SMS MMS Extensible Messaging and Presence Protocol XMPP Real Time Messaging Protocol RTMP Instant Messaging and Presence Protocol IMPP instant messaging USSD IRC or any other wireless data networks broadband networks or messaging protocols.

The distributed proxy and cache system can include for example the proxy server e.g. remote proxy and the server cache components on the server side. The server side proxy and cache can as illustrated reside internal to the host server . In addition the proxy server and cache on the server side can be partially or wholly external to the host server and in communication via one or more of the networks and . For example the proxy server may be external to the host server and the server cache may be maintained at the host server . Alternatively the proxy server may be within the host server while the server cache is external to the host server . In addition each of the proxy server and the cache may be partially internal to the host server and partially external to the host server . The application server content provider can by any server including third party servers or service content providers further including advertisement promotional content publication or electronic coupon servers or services. Similarly separate advertisement servers promotional content servers and or e Coupon servers as application servers or content providers are illustrated by way of example.

The distributed system can also include in one embodiment client side components including by way of example but not limitation a local proxy e.g. a mobile client on a mobile device and or a local cache which can as illustrated reside internal to the device e.g. a mobile device .

In addition the client side proxy and local cache can be partially or wholly external to the device and in communication via one or more of the networks and . For example the local proxy may be external to the device and the local cache may be maintained at the device . Alternatively the local proxy may be within the device while the local cache is external to the device . In addition each of the proxy and the cache may be partially internal to the host server and partially external to the host server .

The distributed system can further include in one embodiment network side components including by way of example but not limitation a network side proxy e.g. a component in the operator network and or a network side cache not shown which can as shown reside in the operator network 

The network side proxy may be external to the mobile device the third party servers e.g. and the like and the host server . In one embodiment the network side proxy may reside in the operator s core network as an inline proxy through which all incoming outgoing traffic to from the mobile device is routed. Iii another embodiment the network side proxy may reside in the radio access network and may have knowledge of the radio state of the mobile device from the network or from real time information provided by the local proxy and or the proxy server regarding radio state promotions and demotions.

In one embodiment the distributed system can include an optional caching proxy server . The caching proxy server can be a component which is operated by the application server content provider the host server or a network service provider and or any combination of the above to facilitate network traffic management for network and device resource conservation. Caching proxy server can be used for example for caching content to be provided to the device for example from one or more of the application server provider host server and or a network service provider . Content caching can also be entirely or partially performed by the remote proxy to satisfy application requests or other data requests at the device .

In context aware traffic management and optimization for resource conservation and or congestion alleviation in a network e.g. cellular or other wireless networks characteristics of user activity behavior and or application behavior at a mobile device e.g. any wireless device can be tracked by the local proxy and communicated over the network to the proxy server component in the host server for example as connection metadata. The proxy server which in turn is coupled to the application server provider provides content and data to satisfy requests made at the device .

In addition the local proxy can identify and retrieve mobile device properties including one or more of battery level network that the device is registered on radio state signal strength cell identifier i.e. cell ID location area code or whether the mobile device is being used e.g. interacted with by a user . In some instances the local proxy can delay expedite prefetch and or modify data prior to transmission to the proxy server when appropriate as will be further detailed with references to the description associated with the examples of .

The local cache can be included in the local proxy or coupled to the local proxy and can be queried for a locally stored response to the data request prior to the data request being forwarded on to the proxy server . Locally cached responses can be used by the local proxy to satisfy certain application requests of the mobile device by retrieving cached content stored in the cache storage when the cached content is still valid.

Similarly the proxy server of the host server can also delay expedite or modify data from the local proxy prior to transmission to the content sources e.g. the application server content provider . In addition the proxy server uses device properties and connection metadata to generate rules for satisfying request of applications on the mobile device . The proxy server can gather real time traffic information about requests of applications for later use in optimizing similar connections with the mobile device or other mobile devices. The proxy server can further aggregate reports on detection of congestion from multiple mobile devices to provide reports on congestion distribution and timing patterns and other information to operators of the networks.

In general the local proxy the proxy server and or the network side proxy are transparent to the multiple applications executing on the mobile device. The local proxy is generally transparent to the operating system or platform of the mobile device and may or may not be specific to device manufacturers. In some instances the local proxy is optionally customizable in part or in whole to be device specific. In some embodiments the local proxy may be bundled into a wireless model a firewall and or a router. Similarly the network side proxy can be customizable in part on in whole to be network operator specific. For example traffic management policies for one network operator may be different from policies for another network operator.

In one embodiment the host server can in some instances utilize the store and forward functions of a short message service center SMSC such as that provided by the network service provider in communicating with the device in achieving network traffic management. Note that SMSC can also utilize any other type of alternative channel including USSD or other network control mechanisms. The host server can forward content or HTTP responses to the SMSC such that it is automatically forwarded to the client device if available and for subsequent forwarding if the client device is not currently available.

In general the disclosed distributed proxy and cache system allows optimization of network usage for example by serving requests from the local cache the local proxy reduces the number of requests that need to be satisfied over the network . Further the local proxy and the proxy server may filter irrelevant data from the communicated data. In addition the local proxy the proxy server and or the network side proxy can also accumulate background requests and low priority data and send it in batches to avoid the protocol overhead of sending individual data fragments and establishing data connections. The local proxy the network side proxy and or the proxy server can also compress or transcode the traffic reducing the amount of data sent over the network and or . The network side proxy can further block unnecessary data e.g. during socket closure from reaching the mobile device and causing the radio on the mobile device to turn on or be promoted. The network side proxy can also supply cached responses to third party servers to keep the servers happy and prevent them from retrying. The signaling traffic in the network and or can be reduced as the networks are now used less often and the network traffic can be synchronized among individual applications.

With respect to the battery life of the mobile device by serving application or content requests from the local cache the local proxy can reduce the number of times the radio module is powered up. The local proxy the network side proxy and the proxy server can work in conjunction to accumulate background requests and other low priority data and send such data in batches to reduce the number of times and or length of time when the radio is powered up. The local proxy can synchronize the network use by performing the batched data transfer for all connections simultaneously.

Client Side Proxy a component installed in a smartphone mobile device or wireless device that interfaces with device s operating system as well as with data services and applications installed in the device. The client side proxy is typically compliant with and able to operate with standard or state of the art networking protocols. Additional components and features of the client side proxy are illustrated with further references to the examples of .

Network Side Proxy or proxy server a component in the mobile operator network carrier network or mobile operator network server. In some embodiments the network side proxy can live on the core network or the radio access network . The network side proxy can interface with mobile devices third party servers e.g. application server content providers caching proxy server and server side proxy . The network side proxy can be configured as the last node for incoming traffic before the incoming traffic reaches the radio modem on the mobile device. The network side proxy is typically compliant with and able to operate with standard or state of the art networking protocols and or other requirements specific to the network operator. Additional components and features of the network side proxy are illustrated with further references to the examples of .

The server side proxy can include one or more servers that can interface with third party application servers which can be proxy or other servers that are not illustrated the client side proxy and or the network side proxy . In general the server side proxy can be compliant with and is generally able to operate with standard or state of the art networking protocols and or specifications for interacting with mobile network elements and or third party servers. Some components and features of the server side proxy are illustrated with further references to the examples of and .

Log Storage and Processing Service LSPS The log storage and processing service server system or component can provide reporting and usage analytics services. The LSPS can collect information e.g. logs from the client side proxy the network side proxy and or the server side proxy and provide the necessary tools for producing reports and usage analytics can used for analyzing traffic and signaling data or behavior across applications servers and the like. The client logs e.g. logs on the client device aggregated by the local proxy are stored in the device until a data channel is activated and then are transferred in binary format to the LSPS . In one embodiment the logs are processed using log processing tools provided by the LSPS . The processed logs are subsequently stored in a distributed database. The logs may be used for reporting as well as for troubleshooting issues. For example analytics from the logs can be used by the proxy system in managing reducing or optimizing network traffic or by the network operator in monitoring their networks for possible improvements and enhancements. Note that LSPS as illustrated may be a server separate from the server side proxy and or the host server or it may be a component of the server side proxy and or the host server residing partially or wholly therein.

In one implementation the level of logging e.g. types of data to be logged and the like can be specified using configuration settings in the client side proxy the network side proxy and or the server side proxy . Various data relating to bytes and transactions network connectivity power subscriber count and the like may be logged and or processed using default or another settings on a periodic e.g. hourly daily and the like basis.

Bytes and Transactions data may include a number of bytes transacted both to and from total number of transactions between the client side proxy and each application the client side proxy and the network e.g. radio access network the client side proxy and its cache and the like. Network Connectivity data may include for example total time the device spends in data connected state based on a two state connectivity model total number of transitions into the data connected state the number of times the radio transitions into the data connected state due to a network request that was proxied through the client side proxy total time spent in the data connected state due to a network request that was proxied through the client side proxy the number of transitions into data connected mode saved by the client side and or server side proxy system the amount of time in data connected state saved by the client side and or server side proxy system simulated values for the previous four items as if traffic proxied via client side and or server side proxy system were the only traffic on the device. Network connectivity data can also include the amount of time taken to transition from an idle state to connected state i.e. setup time a baseline or a reference determined from a sample of setup times and the like. Power related data may include for example each one percent or any other percentage value change in the battery level the total time the device is powered on but not connected to a power source and the like. Subscriber count data may include for example the number of new subscribers observed in a period and the number of active subscribers in the period. This data may be aggregated by the host server for example. Reporting of the above data can be done based on variables such as network bearer type e.g. all mobile or Wi Fi category e.g. all device model or application name time e.g. hour day or month and the like or combinations thereof.

The illustrated components can communicate with each other via TCP or other protocols that provide a communication channel between two components. To communicate over TCP a connection is established between components. Each component can then bind to a socket at its end and can read from and write to the socket bound to the connection. As illustrated the mobile device includes multiple applications such as application which can establish a communication link with the client side proxy having a local cache . The application can read from or write to the socket S while the client side proxy can read from and write to socket S at its end of the connection. The client side proxy can overwrite or modify timers associated with both sockets S and S to for example delay socket establishment or defer reading from the socket. Thus both sockets S and S are under the control of the client side proxy .

The client side proxy on the mobile device can also establish a communication link with the network side proxy in the carrier or operator network . The client side proxy can read from and write to socket S at its end of the connection while the network side proxy can read from and write to socket S at its end of the connection. Thus the client side proxy can modify the timers associated with the socket S and the network side proxy can also modify the timers associated with the socket S.

The network side proxy in the mobile carrier or mobile operator network can also establish communication links multiple third party application servers such as the third party server . The third party server can include for example application servers and or web servers that support various operations of applications installed on the mobile device . As illustrated the socket S at one end of the connection can be controlled by the network side proxy while the socket S at the other end of the connection can be controlled by the third party server .

Typically third party servers tend to timeout and close inactive sockets to save resources if they do not hear anything from the client. The third party server can send a final FIN packet to the mobile device to close the socket. If the FIN packet gets lost the third party server can keep retrying with increasing backoff algorithm. In some cases the third party server can also push some data to test the TCP connection. Since the socket S is owned and controlled by the third party server which is independent of the network side proxy and the client side proxy only the third party server can modify the timers and or other socket behavior. However the network side proxy can prevent the third party server from timing out and or causing signaling e.g. sending of FIN packets by intercepting any unnecessary data from the third party server and can prevent such unnecessary data from being delivered to the mobile device . In some embodiments the network side proxy can provide a response e.g. cached response to a request from the third party server to allow the third party server to close its socket S without causing additional signaling or to keep the socket S from timing out.

As illustrated the network side proxy in the mobile carrier or mobile operator network can also establish a communication link the server side proxy having a server cache . The network side proxy can control the socket A at its end of the communication link while the socket B can be controlled by the server side proxy at its end of the communication link. Similarly communication links between the server side proxy and multiple third party servers such as the third party server can be established in some embodiments. The socket C on one end of the communication link can be controlled by the server side proxy while socket D on the other end of the communication link can only be controlled by the third party server . To prevent socket D from timing out or causing additional signaling the server side proxy can also intercept traffic from the third party server and in some cases respond to the traffic using cached response from the server cache . Thus the disclosed technology can control the timeout behavior of sockets S S using the application framework and or network stack level timer modification and manage the behavior of socket S through interception of data packets and or use of cached responses. This allows incoming and outgoing traffic to be managed for signaling optimization and resource conservation.

The client side proxy can include software components or agents installed on the mobile device that enable traffic optimization and perform the related functionalities on the client side. Components of the client side proxy can operate transparently for end users and applications and interface with the device s operating system OS . The client side proxy can be installed on mobile devices for optimization to take place and it can effectuate changes on the data routes and or timing. Once data routing is modified the client side proxy can respond to application requests to service providers or host servers in addition to or instead of letting those applications access data network directly. In general applications on the mobile device will not notice that the client side proxy is responding to their requests.

Device State Monitor The device state monitor can be responsible for identifying several states and metrics in the device such as network status display status battery level e.g. via the radio battery information etc. such that the remaining components in the client side proxy can operate and make decisions according to device state acting in an optimal way in each state 

Traffic Recognizer The traffic recognizer analyzes all traffic between the wireless device applications and their respective host servers in order to identify recurrent patterns. Supported transport protocols include for example DNS HTTP and HTTPS such that traffic through those ports is directed to the client side proxy . While analyzing traffic the client side proxy can identify recurring polling patterns which can be candidates to be performed remotely by the server side proxy and send to the protocol optimizer .

Protocol Optimizer The protocol optimizer can implement the logic of serving recurrent requests from the local cache instead of allowing those requests go over the network to the service provider application host server. One of its tasks is to eliminate or minimize the need to send requests to the network positively affecting network congestion and device battery life.

Local Cache The local cache can store responses to recurrent requests and can be used by the Protocol Optimizer to send responses to the applications .

Traffic Scheduler The traffic scheduler can temporally move communications to optimize usage of device resources by unifying keep alive signaling so that some or all of the different applications can send keep alive messages at the same time traffic pipelining . Traffic scheduler may also decide to delay transmission of data that is not relevant at a given time for example when the device is not actively used .

Policy Manager The policy manager can store and enforce traffic management and or optimization and or reporting policies provisioned by a Policy Management Server PMS . At the client side proxy first start traffic management and or optimization and reporting policies policy profiles that is to be enforced in a particular device can be provisioned by the Policy Management Server. Enforcing traffic management policies at the device s IP layer lets an operator manage traffic before it uses radio accessed network resources. Policy usage can range from creating highly targeted subscriber plans to proactively and or reactively managing network congestion. In one implementation the conditions for selecting a policy for enforcement and or conditions for dropping an implemented policy may be managed or coordinated by the policy manager .

Watch Dog The watch dog can monitor the client side proxy operating availability. In case the client side proxy is not working due to a failure or because it has been disabled the watchdog can reset DNS routing rules information and can restore original DNS settings for the device to continue working until the client side proxy service is restored.

Reporting Agent The reporting agent can gather information e.g. logs about the events taking place in the device and sends the information to the log storage and processing service which collects and stores client side and or server side proxy system logs. Event details are stored temporarily in the device and transferred to log storage and processing service only when the data channel state is active. If the client side proxy does not send records within a period of time e.g. twenty four hours the reporting agent may in one embodiment attempt to open the connection and send recorded entries or in case there are no entries in storage an empty reporting packet. All reporting settings may be configured in the policy management server. The information in the logs may be used for reporting and or troubleshooting for example.

Push Client The push client can be responsible for the traffic to between the server side proxy and the client side proxy . The push client can send out service requests like content update requests and policy update requests and receives updates to those requests from the server side proxy . In addition push client can send data to a log storage and processing service which may be internal to or external to the server side proxy .

The server side of the distributed system can include for example a relay server which interacts with a traffic harmonizer a polling server and or a policy management server . Each of the various components can communicate with the client side proxy the network side proxy or other third party e.g. application server service provider and or other proxy and or the LSPS . Some example components of the server side proxy is described as follows 

Relay Server The relay server is the routing agent in the distributed proxy architecture. The relay server manages connections and communications with components on the client side proxy installed on devices and provides an administrative interface for reports e.g. congestion reports provisioning platform setup and so on.

Notification Server The notification server is a module able to connect to an operator s SMSC gateways and deliver SMS notifications to the client side proxy . SMS notifications can be used when an IP link is not currently active in order to avoid the client side proxy from activating a connection over the wireless data channel thus avoiding additional signaling traffic. However if the IP connection happens to be open for some other traffic the notification server can use it for sending the notifications to the client side proxy . The user database can store operational data including endpoint MSISDN organization and Notification server gateway for each resource URIs or URLs .

Traffic Harmonizer The traffic harmonizer can be responsible for communication between the client side proxy and the polling server . The traffic harmonizer connects to the polling server directly or through the data storage and to the client over any open or proprietary protocol such as the 7TP implemented for traffic optimization. The traffic harmonizer can be also responsible for traffic pipelining on the server side if there s cached content in the database for the same client this can be sent over to the client in one message.

Polling Server The polling server can poll third party application servers on behalf of applications that are being optimized . If a change occurs i.e. new data available for an application the polling server can report to the traffic harmonizer which in turn sends a notification message to the client side proxy for it to clear the cache and allow application to poll application server directly.

Policy Management Server The policy management server PMS allows administrators to configure and store policies for the client side proxies e.g. mobile device policies . It also allows administrators to notify the client side proxies about policy changes. In some embodiments the PMS allows administrators to configure and store policies for network side proxies e.g. operator policies . For example using the policy management server each operator can configure the policies to work in the most efficient way for the unique characteristics of each particular mobile operator s network.

Log Storage and Processing Service The log storage and processing service collects information e.g. logs from the client side and or from the server side and provides the tools for analyzing and producing reports and usage analytics that network operators can use for analyzing application signaling e.g. determine percent reduction in application signaling data consumption congestion improvement in battery performance and the like.

The proxy server has a wide variety of uses from speeding up a web server by caching repeated requests to caching web DNS and other network lookups for a group of clients sharing network resources. The proxy server is optional. The distributed proxy and cache system and or allows for a flexible proxy configuration using either the proxy additional proxy s in operator s network or integrating both proxies and an operator s or other third party s proxy.

The mobile device which can be a device that is portable or mobile e.g. any wireless device such as a portable phone generally includes for example a network interface an operating system a context API and mobile applications which may be proxy unaware or proxy aware . Note that the client device is specifically illustrated in the example of as a mobile device such is not a limitation and that mobile device may be any wireless broadband portable mobile or non portable device able to receive transmit signals to satisfy data requests over a network including wired or wireless networks e.g. Wi Fi Bluetooth LAN WAN and the like .

The network interface can be a networking module that enables the device to mediate data in a network with an entity that is external to the host server through any known and or convenient communications protocol supported by the host and the external entity. The network interface can include one or more of a network adaptor card a wireless network interface card e.g. SMS interface Wi Fi interface interfaces for various generations of mobile communication standards including but not limited to 2G 3G 3.5G 4G LTE and the like Bluetooth or whether or not the connection is via a router an access point a wireless router a switch a multilayer switch a protocol converter a gateway a bridge a bridge router a hub a digital media receiver and or a repeater.

The mobile device can further include client side components of the distributed proxy and cache system which can include a local proxy e.g. a mobile client of the mobile device and a cache . In one embodiment the local proxy includes a user activity module a proxy API a request transaction manager a caching policy manager having an application protocol module a traffic management policy module a traffic shaping engine a connection manager a radio state management engine and or a radio state change notification manager . The connection manager may further include a radio controller and a heartbeat manager . The request transaction manager can further include an application behavior detector and or a prioritization engine the application behavior detector may further include a pattern detector and or and application profile generator .

In one embodiment a portion of the distributed proxy and cache system for mobile traffic management resides in or is in communication with the mobile device including local proxy mobile client and or cache . The local proxy can provide an interface on the mobile device for users to access device applications and services including email IM voice mail visual voicemail feeds Internet games productivity tools or other applications etc.

The local proxy is generally application independent and can be used by applications e.g. both proxy aware and proxy unaware applications and and other mobile applications to open TCP Transport Control Protocol or other protocol based connections to a remote server e.g. the server in the examples of and or server proxy shown in the examples of . In some instances the local proxy includes a proxy API which can be optionally used to interface with proxy aware applications or applications e.g. mobile applications on a mobile device e.g. any wireless device .

The applications and can generally include any user application widgets software HTTP based application web browsers video or other multimedia streaming or downloading application video games social network applications email clients. RSS management applications application stores document management applications productivity enhancement applications and the like. The applications can be provided with the device OS by the device manufacturer by the network service provider downloaded by the user or provided by others.

One embodiment of the local proxy includes or is coupled to a context API as shown. The context API may be a part of the operating system or device platform or independent of the operating system as illustrated. The operating system can include any operating system including but not limited to any previous current and or future versions releases of Windows Mobile iOS Android Symbian Palm OS Brew MP Java 2 Micro Edition J2ME Blackberry etc.

The context API may be a plug in to the operating system or a particular client application on the device . The context API can detect signals indicative of user or device activity for example sensing motion gesture device location changes in device location device backlight keystrokes clicks activated touch screen mouse click or detection of other pointer devices. The context API can be coupled to input devices or sensors on the device to identify these signals. Such signals can generally include input received in response to explicit user input at an input device mechanism at the device and or collected from ambient signals contextual cues detected at or in the vicinity of the device e.g. light motion piezoelectric etc. .

In one embodiment the user activity module interacts with the context API to identify determine infer detect compute predict and or anticipate characteristics of user activity on the device . Various inputs collected by the context API can be aggregated by the user activity module to generate a profile for characteristics of user activity. Such a profile can be generated by the user activity module with various temporal characteristics. For instance user activity profile can be generated in real time for a given instant to provide a view of what the user is doing or not doing at a given time e.g. defined by a time window in the last minute in the last 30 seconds etc. a user activity profile can also be generated for a session defined by an application or web page that describes the characteristics of user behavior with respect to a specific task they are engaged in on the mobile device or for a specific time period e.g. for the last 2 hours for the last 5 hours .

Additionally characteristic profiles can be generated by the user activity module to depict a historical trend for user activity and behavior e.g. week 1 mo. 2 mo. etc. . Such historical profiles can also be used to deduce trends of user behavior for example access frequency at different times of day trends for certain days of the week weekends or week days user activity trends based on location data e.g. IP address GPS or cell tower coordinate data or changes in location data e.g. user activity based on user location or user activity based on whether the user is on the go or traveling outside a home region etc. to obtain user activity characteristics.

In one embodiment user activity module can detect and track user activity with respect to applications documents files windows icons and folders on the device . For example the user activity module can detect when an application or window e.g. a web browser or any other type of application has been exited closed minimized maximized opened moved into the foreground or into the background multimedia content playback etc.

In one embodiment characteristics of the user activity on the device can be used to locally adjust behavior of the device e.g. mobile device or any wireless device to optimize its resource consumption such as battery power consumption and more generally consumption of other device resources including memory storage and processing power and or further optimize signaling in the network. In one embodiment the use of a radio on a device can be adjusted based on characteristics of user behavior e.g. by the radio controller of the connection manager coupled to the user activity module . For example the radio controller can turn the radio on or off based on characteristics of the user activity on the device . In addition the radio controller can adjust the power mode of the radio e.g. to be in a higher power mode or lower power mode depending on characteristics of user activity.

In one embodiment characteristics of the user activity on device can also be used to cause another device e.g. other computers a mobile device a wireless device or a non portable device or server e.g. host server in the examples of which can communicate e.g. via a cellular or other network with the device to modify its communication frequency with the device . The local proxy can use the characteristics information of user behavior determined by the user activity module to instruct the remote device as to how to modulate its communication frequency e.g. decreasing communication frequency such as data push frequency if the user is idle requesting that the remote device notify the device if new data changed data or data of a certain level of importance becomes available etc. .

In one embodiment the user activity module can in response to determining that user activity characteristics indicate that a user is active after a period of inactivity request that a remote device e.g. server host server or the network side proxy in the examples of send the data that was buffered as a result of the previously decreased communication frequency.

In addition or in alternative the local proxy can communicate the characteristics of user activity at the device to the remote device e.g. host server or the network side proxy in the examples of and the remote device determines how to alter its own communication frequency with the device for network resource conservation and conservation of resources of the mobile device .

One embodiment of the local proxy further includes a request transaction manager which can detect identify intercept process and manage data requests initiated on the device for example by applications and or and or directly indirectly by a user request. The request transaction manager can determine how and when to process a given request or transaction or a set of requests transactions based on transaction characteristics.

The request transaction manager can prioritize requests or transactions made by applications and or users at the device for example by the prioritization engine . Importance or priority of requests transactions can be determined by the request transaction manager by applying a rule set for example according to time sensitivity of the transaction time sensitivity of the content in the transaction time criticality of the transaction time criticality of the data transmitted in the transaction and or time criticality or importance of an application making the request.

In addition transaction characteristics can also depend on whether the transaction was a result of user interaction or other user initiated action on the device e.g. user interaction with an application e.g. a mobile application . In general a time critical transaction can include a transaction resulting from a user initiated data transfer and can be prioritized as such. Transaction characteristics can also depend on the amount of data that will be transferred or is anticipated to be transferred as a result of the requested transaction. For example the connection manager can adjust the radio mode e.g. high power or low power mode via the radio controller based on the amount of data that will need to be transferred.

In addition the radio controller connection manager can adjust the radio power mode high or low based on time criticality sensitivity of the transaction. The radio controller can trigger the use of high power radio mode when a time critical transaction e.g. a transaction resulting from a user initiated data transfer an application running in the foreground any other event meeting a certain criteria is initiated or detected.

In general the priorities can be set by default for example based on device platform device manufacturer operating system etc. Priorities can alternatively or in additionally be set by the particular application for example the Facebook application e.g. a mobile application can set its own priorities for various transactions e.g. a status update can be of higher priority than an add friend request or a poke request a message send request can be of higher priority than a message delete request for example an email client or IM chat client may have its own configurations for priority. The prioritization engine may include set of rules for assigning priority.

The prioritization engine can also track network provider limitations or specifications on application or transaction priority in determining an overall priority status for a request transaction. Furthermore priority can in part or in whole be determined by user preferences either explicit or implicit. A user can in general set priorities at different tiers such as specific priorities for sessions or types or applications e.g. a browsing session a gaming session versus an IM chat session the user may set a gaming session to always have higher priority than an IM chat session which may have higher priority than web browsing session . A user can set application specific priorities e.g. a user may set Facebook related transactions to have a higher priority than LinkedIn related transactions for specific transaction types e.g. for all send message requests across all applications to have higher priority than message delete requests for all calendar related events to have a high priority etc. and or for specific folders.

The prioritization engine can track and resolve conflicts in priorities set by different entities. For example manual settings specified by the user may take precedence over device OS settings network provider parameters limitations e.g. set in default for a network service area geographic locale set for a specific time of day or set based on service fee type may limit any user specified settings and or application set priorities. In some instances a manual synchronization request received from a user can override some most or all priority settings in that the requested synchronization is performed when requested regardless of the individually assigned priority or an overall priority ranking for the requested action.

Priority can be specified and tracked internally in any known and or convenient manner including but not limited to a binary representation a multi valued representation a graded representation and all are considered to be within the scope of the disclosed technology.

Table I above shows for illustration purposes some examples of transactions with examples of assigned priorities in a binary representation scheme. Additional assignments are possible for additional types of events requests transactions and as previously described priority assignments can be made at more or less granular e.g. at the session level or at the application level etc.

As shown by way of example in the above table in general lower priority requests transactions can include updating message status as being read unread deleting of messages deletion of contacts higher priority requests transactions can in some instances include status updates new IM chat message new email calendar event update cancellation deletion an event in a mobile gaming session or other entertainment related events a purchase confirmation through a web purchase or online request to load additional or download content contact book related events a transaction to change a device setting location aware or location based events transactions or any other events request transactions initiated by a user or where the user is known to be expected to be or suspected to be waiting for a response etc.

Inbox pruning events e.g. email or any other types of messages are generally considered low priority and absent other impending events generally will not trigger use of the radio on the device . Specifically pruning events to remove old email or other content can be piggy backed with other communications if the radio is not otherwise on at the time of a scheduled pruning event. For example if the user has preferences set to keep messages for 7 days old then instead of powering on the device radio to initiate deletion of the message from the device the moment that the message has exceeded 7 days old the message is deleted when the radio is powered on next. If the radio is already on then pruning may occur as regularly scheduled.

The request transaction manager can use the priorities for requests e.g. by the prioritization engine to manage outgoing traffic from the device for resource optimization e.g. to utilize the device radio more efficiently for battery conservation . For example transactions requests below a certain priority ranking may not trigger use of the radio on the device if the radio is not already switched on as controlled by the connection manager . In contrast the radio controller can turn on the radio such a request can be sent when a request for a transaction is detected to be over a certain priority level.

In one embodiment priority assignments such as that determined by the local proxy or another device entity can be used cause a remote device to modify its communication with the frequency with the mobile device or wireless device. For example the remote device can be configured to send notifications to the device when data of higher importance is available to be sent to the mobile device or wireless device.

In one embodiment transaction priority can be used in conjunction with characteristics of user activity in shaping or managing traffic for example by the traffic shaping engine . For example the traffic shaping engine can in response to detecting that a user is dormant or inactive wait to send low priority transactions from the device for a period of time. In addition the traffic shaping engine can allow multiple low priority transactions to accumulate for batch transferring from the device e.g. via the batching module . In one embodiment the priorities can be set configured or readjusted by a user. For example content depicted in Table I in the same or similar form can be accessible in a user interface on the device and for example used by the user to adjust or view the priorities.

The batching module can initiate batch transfer based on certain criteria. For example batch transfer e.g. of multiple occurrences of events some of which occurred at different instances in time may occur after a certain number of low priority events have been detected or after an amount of time elapsed after the first of the low priority event was initiated. In addition the batching module can initiate batch transfer of the accumulated low priority events when a higher priority event is initiated or detected at the device . Batch transfer can otherwise be initiated when radio use is triggered for another reason e.g. to receive data from a remote device such as host server network side proxy . In one embodiment an impending pruning event pruning of an inbox or any other low priority events can be executed when a batch transfer occurs.

In general the batching capability can be disabled or enabled at the event transaction level application level or session level based on any one or combination of the following user configuration device limitations settings manufacturer specification network provider parameters limitations platform specific limitations settings device OS settings etc. In one embodiment batch transfer can be initiated when an application window file is closed out exited or moved into the background users can optionally be prompted before initiating a batch transfer users can also manually trigger batch transfers.

In one embodiment the local proxy locally adjusts radio use on the device by caching data in the cache . When requests or transactions from the device can be satisfied by content stored in the cache the radio controller need not activate the radio to send the request to a remote entity e.g. the host server as shown in the host server as shown in or a content provider application server such as the server provider shown in the examples of . As such the local proxy can use the local cache and the cache policy manager to locally store data for satisfying data requests to eliminate or reduce the use of the device radio for conservation of network resources and device battery consumption.

In leveraging the local cache once the request transaction manager intercepts a data request by an application on the device the local repository can be queried to determine if there is any locally stored response and also determine whether the response is valid. When a valid response is available in the local cache the response can be provided to the application on the device without the device needing to access the cellular network or wireless broadband network.

If a valid response is not available the local proxy can query a remote proxy e.g. the server proxy of to determine whether a remotely stored response is valid. If so the remotely stored response e.g. which may be stored on the server cache or optional caching server shown in the example of can be provided to the mobile device possibly without the mobile device needing to access the cellular network thus relieving consumption of network resources.

If a valid cache response is not available or if cache responses are unavailable for the intercepted data request the local proxy for example the caching policy manager can send the data request to a remote proxy e.g. server proxy of which forwards the data request to a content source e.g. application server content provider of and a response from the content source can be provided through the remote proxy as will be further described in the description associated with the example host server of . The cache policy manager can manage or process requests that use a variety of protocols including but not limited to HTTP HTTPS IMAP POP SMTP XMPP and or ActiveSync. The caching policy manager can locally store responses for data requests in the local database as cache entries for subsequent use in satisfying same or similar data requests.

The caching policy manager can request that the remote proxy monitor responses for the data request and the remote proxy can notify the device when an unexpected response to the data request is detected. In such an event the cache policy manager can erase or replace the locally stored response s on the device when notified of the unexpected response e.g. new data changed data additional data etc. to the data request. In one embodiment the caching policy manager is able to detect or identify the protocol used for a specific request including but not limited to HTTP HTTPS IMAP POP SMTP XMPP and or ActiveSync. In one embodiment application specific handlers e.g. via the application protocol module of the caching policy manager on the local proxy allows for optimization of any protocol that can be port mapped to a handler in the distributed proxy e.g. port mapped on the proxy server in the example of .

In one embodiment the local proxy notifies the remote proxy such that the remote proxy can monitor responses received for the data request from the content source for changed results prior to returning the result to the device for example when the data request to the content source has yielded same results to be returned to the mobile device. In general the local proxy can simulate application server responses for applications on the device using locally cached content. This can prevent utilization of the cellular network for transactions where new changed data is not available thus freeing up network resources and preventing network congestion.

In one embodiment the local proxy includes an application behavior detector to track detect observe monitor applications e.g. proxy aware and or unaware applications and accessed or installed on the device . Application behaviors or patterns in detected behaviors e.g. via the pattern detector of one or more applications accessed on the device can be used by the local proxy to optimize traffic in a wireless network needed to satisfy the data needs of these applications.

For example based on detected behavior of multiple applications the traffic shaping engine can align content requests made by at least some of the applications over the network wireless network e.g. via the alignment module . The alignment module can delay or expedite some earlier received requests to achieve alignment. When requests are aligned the traffic shaping engine can utilize the connection manager to poll over the network to satisfy application data requests. Content requests for multiple applications can be aligned based on behavior patterns or rules settings including for example content types requested by the multiple applications audio video text etc. device e.g. mobile or wireless device parameters and or network parameters traffic conditions network service provider constraints specifications etc.

In one embodiment the pattern detector can detect recurrences in application requests made by the multiple applications for example by tracking patterns in application behavior. A tracked pattern can include detecting that certain applications as a background process poll an application server regularly at certain times of day on certain days of the week periodically in a predictable fashion with a certain frequency with a certain frequency in response to a certain type of event in response to a certain type user query frequency that requested content is the same frequency with which a same request is made interval between requests applications making a request or any combination of the above for example.

Such recurrences can be used by traffic shaping engine to offload polling of content from a content source e.g. from an application server content provider of that would result from the application requests that would be performed at the mobile device or wireless device to be performed instead by a proxy server e.g. proxy server of remote from the device . Traffic shaping engine can decide to offload the polling when the recurrences match a rule. For example there are multiple occurrences or requests for the same resource that have exactly the same content or returned value or based on detection of repeatable time periods between requests and responses such as a resource that is requested at specific times during the day. The offloading of the polling can decrease the amount of bandwidth consumption needed by the mobile device to establish a wireless cellular or other wireless broadband connection with the content source for repetitive content polls.

As a result of the offloading of the polling locally cached content stored in the local cache can be provided to satisfy data requests at the device when content change is not detected in the polling of the content sources. As such when data has not changed application data needs can be satisfied without needing to enable radio use or occupying cellular bandwidth in a wireless network. When data has changed and or new data has been received the remote entity e.g. the host server to which polling is offloaded can notify the device .

In one embodiment the local proxy can mitigate the need use of periodic keep alive messages heartbeat messages to maintain TCP IP connections which can consume significant amounts of power thus having detrimental impacts on mobile device battery life. The connection manager in the local proxy e.g. the heartbeat manager can detect identify and intercept any or all heartbeat keep alive messages being sent from applications.

The heartbeat manager can prevent any or all of these heartbeat messages from being sent over the cellular or other network and instead rely on the server component of the distributed proxy system e.g. shown in to generate and send the heartbeat messages to maintain a connection with the backend e.g. application server provider in the example of .

In some embodiments the traffic management policy manager can manage and implement traffic management policies such as traffic blocking policies delaying policies transmission policies and or the like. The policy manager may trigger certain policies when certain conditions are met or certain events occur. For example traffic blocking and delaying policies may be enforced on low priority traffic when a radio of the mobile device is idle. During a period of enforcement for a given policy traffic that matches the policy rule set may be impacted e.g. temporarily blocked permanently blocked delayed or the like . When the enforcement period ends a radio connection may be established e.g. via the connection manager and new connection requests may propagate across the network as usual. Any delayed or temporarily blocked traffic may be dispatched to their respective destinations in accordance with certain transmission policies for example which may come into effect when a predefined period of time expires or the radio of the mobile device comes up for other reasons e.g. backlight turns on user initiates a request etc. .

In some embodiments the radio state management engine can perform the management and or policy management of mobile device radio state promotion or demotion based on buffer activity and or device state monitoring. The radio state management engine can determine what user activity and or data activity should justify a radio state promotion and communicate the information to the network to be implemented as a single session multi session or global policy e.g. via a policy manager component on the network side proxy of . This policy can be used to execute the appropriate level of throttling to prevent the radio from going to higher powered states when unjustified based on dynamic conditions e.g. network status traffic congestion user expectations user behavior other activity and the like. .

In some embodiments the radio state change notification manager can monitor or track a radio state of the mobile device and notify the network side proxy when the radio state is promoted to active. The notification can for example trigger the network side proxy to initiate transfer of delayed traffic to the mobile device . In some other embodiments the local proxy may include a notification manager not shown that provides the network side proxy information on the mobile device state user activity application behavior and the like. Such information may be utilized by the network side proxy to intelligently manage incoming traffic at the network side and optimize signaling and conserve network and device resources.

The local proxy generally represents any one or a portion of the functions described for the individual managers modules and or engines. The local proxy and device can include additional or less components more or less functions can be included in whole or in part without deviating from the novel art of the disclosure.

One embodiment of the local proxy includes the user activity module which further includes one or more of a user activity detector tracker a user activity prediction engine and or a user expectation manager . The application behavior detector can further include a prioritization engine a time criticality detection engine an application state categorizer and or an application traffic categorizer . The local proxy can further include a backlight detector .

In one embodiment the application behavior detector may detect determine identify or infer the activity state of an application on the mobile device from which traffic has originated or is directed to for example via the application state categorizer and or the application traffic categorizer . The activity state can be determined based on whether the application is in a foreground or background state on the mobile device via the application state categorizer since the traffic for a foreground application versus a background application may be handled differently.

In one embodiment the activity state can be determined detected identified or inferred with a level of certainty of heuristics based on the backlight status of the mobile device e.g. by the backlight detector or other software agents or hardware sensors on the mobile device including but not limited to resistive sensors capacitive sensors ambient light sensors motion sensors touch sensors and the like. In general if the backlight is on the traffic can be treated as being or determined to be generated from an application that is active or in the foreground or the traffic is interactive. In addition if the backlight is on the traffic can be treated as being or determined to be traffic from user interaction or user activity or traffic containing data that the user is expecting within some time frame.

In one embodiment the activity state is determined based on whether the traffic is interactive traffic or maintenance traffic. Interactive traffic can include transactions from responses and requests generated directly from user activity interaction with an application and can include content or data that a user is waiting or expecting to receive. Maintenance traffic may be used to support the functionality of an application which is not directly detected by a user. Maintenance traffic can also include actions or transactions that may take place in response to a user action but the user is not actively waiting for or expecting a response.

For example a mail or message delete action at a mobile device generates a request to delete the corresponding mail or message at the server but the user typically is not waiting for a response. Thus such a request may be categorized as maintenance traffic or traffic having a lower priority e.g. by the prioritization engine and or is not time critical e.g. by the time criticality detection engine .

Contrastingly a mail read or message read request initiated by a user a the mobile device can be categorized as interactive traffic since the user generally is waiting to access content or data when they request to read a message or mail. Similarly such a request can be categorized as having higher priority e.g. by the prioritization engine and or as being time critical time sensitive e.g. by the time criticality detection engine .

The time criticality detection engine can generally determine identify infer the time sensitivity of data contained in traffic sent from the mobile device or to the mobile device from a host server e.g. host or application server e.g. app server content source . For example time sensitive data can include status updates stock information updates IM presence information email messages or other messages actions generated from mobile gaming applications webpage requests location updates etc. Data that is not time sensitive or time critical by nature of the content or request can include requests to delete messages mark as read or edited actions application specific actions such as an add friend or delete friend request certain types of messages or other information which does not frequently changing by nature etc. In some instances when the data is not time critical the timing with which to allow the traffic to pass through is set based on when additional data needs to be sent from the mobile device . For example traffic shaping engine can align the traffic with one or more subsequent transactions to be sent together in a single power on event of the mobile device radio e.g. using the alignment module and or the hatching module . The alignment module can also align polling requests occurring close in time directed to the same host server since these request are likely to be responded to with the same data. In some instances the timing for withholding or delaying traffic and timing for allowing any delayed or new traffic to the network can be based on traffic management policies.

In the alternate or in combination the activity state can be determined from assessing determining evaluating inferring identifying user activity at the mobile device e.g. via the user activity module . For example user activity can be directly detected and tracked using the user activity tracker . The traffic resulting therefrom can then be categorized appropriately for subsequent processing to determine the policy for handling. Furthermore user activity can be predicted or anticipated by the user activity prediction engine . By predicting user activity or anticipating user activity the traffic thus occurring after the prediction can be treated as resulting from user activity and categorized appropriately to determine the transmission policy.

In addition the user activity module can also manage user expectations e.g. via the user expectation manager and or in conjunction with the activity tracker and or the prediction engine to ensure that traffic is categorized appropriately such that user expectations are generally met. For example a user initiated action should be analyzed e.g. by the expectation manager to determine or infer whether the user would be waiting for a response. If so such traffic should be handled under a policy such that the user does not experience an unpleasant delay in receiving such a response or action.

In one embodiment an advanced generation wireless standard network is selected for use in sending traffic between a mobile device and a host server in the wireless network based on the activity state of the application on the mobile device for which traffic is originated from or directed to. An advanced technology standards such as the 3G 3.5G 3G 4G or LTE network can be selected for handling traffic generated as a result of user interaction user activity or traffic containing data that the user is expecting or waiting for. Advanced generation wireless standard network can also be selected for to transmit data contained in traffic directed to the mobile device which responds to foreground activities.

In categorizing traffic and defining a transmission policy for mobile traffic a network configuration can be selected for use e.g. by a network configuration selection engine on the mobile device in sending traffic between the mobile device and a proxy server and or an application server e.g. app server host . The network configuration that is selected can be determined based on information gathered by the application behavior module regarding application activity state e.g. background or foreground traffic application traffic category e.g. interactive or maintenance traffic any priorities of the data content time sensitivity criticality.

In one embodiment transaction priority can be used in conjunction with characteristics of user activity in shaping or managing traffic for example by the traffic shaping engine . For example the traffic shaping engine can in response to detecting that a user is dormant or inactive wait to send low priority transactions from the device for a period of time. In addition the traffic shaping engine can allow multiple low priority transactions to accumulate for batch transferring from the device e.g. via the batching module . In one embodiment the priorities can be set configured or readjusted by a user. For example content depicted in Table I in the same or similar form can be accessible in a user interface on the device and for example used by the user to adjust or view the priorities.

The batching module can initiate batch transfer based on certain criteria. For example batch transfer e.g. of multiple occurrences of events some of which occurred at different instances in time may occur after a certain number of low priority events have been detected or after an amount of time elapsed after the first of the low priority event was initiated. In addition the batching module can initiate batch transfer of the accumulated low priority events when a higher priority event is initiated or detected at the device . Batch transfer can otherwise be initiated when radio use is triggered for another reason e.g. to receive data from a remote device such as host server network side proxy . In one embodiment an impending pruning event pruning of an inbox or any other low priority events can be executed when a batch transfer occurs.

In general the batching capability can be disabled or enabled at the event transaction level application level or session level based on any one or combination of the following user configuration device limitations settings manufacturer specification network provider parameters limitations platform specific limitations settings device OS settings etc. In one embodiment batch transfer can be initiated when an application window file is closed out exited or moved into the background. Users can optionally be prompted before initiating a hatch transfer and or users can also manually trigger batch transfers.

In one embodiment the local proxy locally adjusts radio use on the device by caching data in the cache . When requests or transactions from the device can be satisfied by content stored in the cache the radio controller need not activate the radio to send the request to a remote entity e.g. the host server as shown in or a content provider application server such as the server provider shown in the examples of . As such the local proxy can use the local cache and the cache policy manager to locally store data for satisfying data requests to eliminate or reduce the use of the device radio for conservation of network resources and device battery consumption.

In leveraging the local cache once the request transaction manager intercepts a data request by an application on the device the local repository can be queried to determine if there is any locally stored response and also determine whether the response is valid. When a valid response is available in the local cache the response can be provided to the application on the device without the device needing to access the cellular network or wireless broadband network.

If a valid response is not available the local proxy can query a remote proxy e.g. the server proxy of to determine whether a remotely stored response is valid. If so the remotely stored response e.g. which may be stored on the server cache or optional caching server shown in the example of can be provided to the mobile device possibly without the mobile device needing to access the cellular network thus relieving consumption of network resources.

If a valid cache response is not available or if cache responses are unavailable for the intercepted data request the local proxy for example the caching policy manager can send the data request to a remote proxy e.g. server proxy of which forwards the data request to a content source e.g. application server content provider of and a response from the content source can be provided through the remote proxy as will be further described in the description associated with the example host server of . The cache policy manager can manage or process requests that use a variety of protocols including but not limited to HTTP HTTPS IMAP POP SMTP XMPP and or ActiveSync. The caching policy manager can locally store responses for data requests in the local database as cache entries for subsequent use in satisfying same or similar data requests.

The caching policy manager can request that the remote proxy monitor responses for the data request and the remote proxy can notify the device when an unexpected response to the data request is detected. In such an event the cache policy manager can erase or replace the locally stored response s on the device when notified of the unexpected response e.g. new data changed data additional data etc. to the data request. In one embodiment the caching policy manager is able to detect or identify the protocol used for a specific request including but not limited to HTTP HTTPS IMAP POP SMTP XMPP and or ActiveSyne. In one embodiment application specific handlers e.g. via the application protocol module of the caching policy manager on the local proxy allows for optimization of any protocol that can be port mapped to a handler in the distributed proxy e.g. port mapped on the proxy server in the example of .

In one embodiment the local proxy notifies the remote proxy such that the remote proxy can monitor responses received for the data request from the content source for changed results prior to returning the result to the device for example when the data request to the content source has yielded same results to be returned to the mobile device. In general the local proxy can simulate application server responses for applications on the device using locally cached content. This can prevent utilization of the cellular network for transactions where new changed data is not available thus freeing up network resources and preventing network congestion.

In one embodiment the local proxy includes an application behavior detector to track detect observe monitor applications e.g. proxy aware and or unaware applications and accessed or installed on the device . Application behaviors or patterns in detected behaviors e.g. via the pattern detector of one or more applications accessed on the device can be used by the local proxy to optimize traffic in a wireless network needed to satisfy the data needs of these applications.

For example based on detected behavior of multiple applications the traffic shaping engine can align content requests made by at least some of the applications over the network wireless network e.g. via the alignment module . The alignment module can delay or expedite some earlier received requests to achieve alignment. When requests are aligned the traffic shaping engine can utilize the connection manager to poll over the network to satisfy application data requests. Content requests for multiple applications can be aligned based on behavior patterns or rules settings including for example content types requested by the multiple applications audio video text etc. device e.g. mobile or wireless device parameters and or network parameters traffic conditions network service provider constraints specifications etc.

In one embodiment the pattern detector can detect recurrences in application requests made by the multiple applications for example by tracking patterns in application behavior. A tracked pattern can include detecting that certain applications as a background process poll an application server regularly at certain times of day on certain days of the week periodically in a predictable fashion with a certain frequency with a certain frequency in response to a certain type of event in response to a certain type user query frequency that requested content is the same frequency with which a same request is made interval between requests applications making a request or any combination of the above for example.

Such recurrences can be used by traffic shaping engine to offload polling of content from a content source e.g. from an application server content provider ad server promotional content server e Coupon server as shown in that would result from the application requests that would be performed at the mobile device or wireless device to be performed instead by a proxy server e.g. proxy server of remote from the device . Traffic shaping engine can decide to offload the polling when the recurrences match a rule. For example there are multiple occurrences or requests for the same resource that have exactly the same content or returned value or based on detection of repeatable time periods between requests and responses such as a resource that is requested at specific times during the day. The offloading of the polling can decrease the amount of bandwidth consumption needed by the mobile device to establish a wireless cellular or other wireless broadband connection with the content source for repetitive content polls.

As a result of the offloading of the polling locally cached content stored in the local cache can be provided to satisfy data requests at the device when content change is not detected in the polling of the content sources. As such when data has not changed application data needs can be satisfied without needing to enable radio use or occupying cellular bandwidth in a wireless network. When data has changed and or new data has been received the remote entity e.g. the host server to which polling is offloaded can notify the device .

In one embodiment the local proxy can mitigate the need use of periodic keep alive messages heartbeat messages to maintain TCP IP connections which can consume significant amounts of power thus having detrimental impacts on mobile device battery life. The connection manager in the local proxy e.g. the heartbeat manager can detect identify and intercept any or all heartbeat keep alive messages being sent from applications.

The heartbeat manager can prevent any or all of these heartbeat messages from being sent over the cellular or other network and instead rely on the server component of the distributed proxy system e.g. shown in to generate and send the heartbeat messages to maintain a connection with the backend e.g. application server provider in the example of .

In some embodiments the traffic management policy manager can manage and implement traffic management policies such as traffic blocking policies delaying policies transmission policies and or the like. The policy manager may trigger certain policies when certain conditions are met or certain events occur. For example traffic blocking and delaying policies may be enforced on low priority traffic when a radio of the mobile device is idle. During a period of enforcement for a given policy traffic that matches the policy rule set may be impacted e.g. temporarily blocked permanently blocked delayed or the like . When the enforcement period ends a radio connection may be established e.g. via the connection manager and new connection requests may propagate across the network as usual. Any delayed or temporarily blocked traffic may be dispatched to their respective destinations in accordance with certain transmission policies for example which may come into effect when a predefined period of time expires or the radio of the mobile device comes up for other reasons e.g. backlight turns on user initiates a request etc. .

In some embodiments the radio state management engine can perform the management and or policy management of mobile device radio state promotion or demotion based on buffer activity and or device state monitoring. The radio state management engine can determine what user activity and or data activity should justify a radio state promotion and communicate the information to the network to be implemented as a single session multi session or global policy e.g. via a policy manager component on the network side proxy of . This policy can be used to execute the appropriate level of throttling to prevent the radio from going to higher powered states when unjustified based on dynamic conditions e.g. network status traffic congestion user expectations user behavior other activity and the like .

In some embodiments the radio state change notification manager can monitor or track a radio state of the mobile device and notify the network side proxy when the radio state is promoted to active. The notification can for example trigger the network side proxy to initiate transfer of delayed traffic to the mobile device . In some other embodiments the local proxy may include a notification manager not shown that provides the network side proxy information on the mobile device state user activity application behavior and the like. Such information may be utilized by the network side proxy to intelligently manage incoming traffic at the network side and optimize signaling and conserve network and device resources.

In some embodiments of the traffic shaping engine the delay tolerance settings detector can determine detect and or track the delay tolerance settings e.g. initial and or extended delay tolerance applications. The delay tolerance settings may include the timeout settings of application specific timers the modified protocol specific timeouts and or the modified TCP stack timeouts for example.

In some embodiments based on a given delay tolerance e.g. for applications that have their own independent timers or an extended delay tolerance e.g. for applications that rely on TCP stack timers the alignment module can align keepalives other non user interactive traffic to radio or other events low priority traffic and or other specific types of traffic.

In other embodiments based on the delay tolerance the intelligent gating delay module can determine how long traffic should be gated or delayed or when a radio on a mobile device should be turned on or promoted. For example if an HTTP based timer has been modified to have a timeout of five minutes the intelligent gating delay module can gate or delay traffic from multiple HTTP based applications for about four minutes and can then trigger the connection manager to turn on or promote the radio on the mobile device to let the gated or delayed traffic go out to the network. If the radio is turned on for other reasons for example at the three minute mark the delayed traffic can be transferred using the established radio link and the process of gating or delaying the traffic can restart when the radio is turned down.

In some embodiments the intelligent gating module may include a static timer module a dynamic timer module and a TCP payload delay state machine module . The static timer module can determine or define a period of time for delaying traffic from multiple applications. The static delay time may be a static value that is predefined for applications and or traffic type. For example traffic from all HTTP based applications can be associated with a delay time of 5 minutes or a delay time that is 95 of the delay tolerance. The dynamic timer module can determine or define a period of time for delaying traffic from multiple applications at run time while taking into account information relating to device state user activity time of day policy and or the like. For example dynamic delay timer can be set to 10 minutes during midnight and five in the morning and to 4 minutes for the rest of the hours of a day. Similarly a dynamic delay timer can be set to a longer period when a screen is off than when a screen is on.

In some embodiments the TCP payload delay state machine can delay TCP payloads data packets for gating purpose in the client side proxy using a state machine. The example state machine has four states and based on triggers the state of the TCP state machine can change. A TCP listen state is the first state during which the client side proxy is waiting for a request to establish a data connection i.e. TCP connect and or a payload i.e. TCP payload from an application. When the TCP connect and payload is received the TCP listen state transitions into the TCP payload gating delay state where the client side proxy delays the TCP payload for a period of time according to a variable gating delay trigger e.g. as determined by static or dynamic timers . When the gating delay period of time ends the TCP payload gating delay state transitions to a TCP relay state. During the TCP relay state the TCP connect and payloads are transferred to the network. At the end of the transfer the TCP end session state is reached where the TCP connection is closed by the client side proxy . TCP payload delay state machines are described in further detail with respect to .

The local proxy generally represents any one or a portion of the functions described for the individual managers modules and or engines. The local proxy and mobile device can include additional or less components more or less functions can be included in whole or in part without deviating from the novel art of the disclosure.

In some embodiments the system timer modification module may include at least one of a TCP stack timer modification module and a framework level timer modification module .

One embodiment of the TCP stack timer modification module can be used to delay or defer TCP socket establishment and or reading which allows alignment of TCP keepalive and or other non user interactive traffic or low priority traffic. When applications are installed on a mobile device the applications have their own predefined timeouts for handling TCP communication which can be set by application developers. When a change is made at the TCP level other traffic such as HTTP traffic that go over TCP are also affected. Typically applications set these timers to allow application sockets to close when necessary data transfer has been completed. However closing of the sockets after some time means that traffic cannot be delayed longer than allowed by the socket timeouts.

The socket timeout settings detector in one embodiment can detect the timeout settings for all sockets e.g. Java sockets created by applications. In other embodiments the socket timeout settings detector can detect timeout settings for sockets associated with select applications e.g. applications in a list for mobile traffic optimization or traffic over certain protocols e.g. HTTP requests HTTPS requests . The detector can further read socket logs created by applications running on the mobile device. An example socket log in JSON format for an application LINE is as follows 

In the above example socket log the value of 5000 milliseconds or 5 seconds is the application s timeout value for reading from an already established socket.

In one embodiment the socket read timeout modification module can defer or delay reading from an already established socket. Typically a timeout exception can occur at an established socket when an application does not hear anything from its application server for a predefined period of time usually a few seconds . The timeout exception is usually followed by the application s specific mechanism of retries to deal with connectivity issues. The socket read timeout modification module can modify or overwrite a read timeout parameter to delay reading from the socket. In the example socket log for LINE application shown above the read timeout was initially set to a value of 5000 milliseconds or 5 seconds by the application. The socket read timeout modification module can overwrite the initial read timeout value of 5 seconds to a new value of 0 as shown by the socket log below. The new read timeout value prevents the LINE application from timing out i.e. the application never times out or in practice the application does not time out for a long time .

By way of another example for the application YahooMail the socket log below shows that the read timeout was overwritten to a new value of 0. In this particular example the YahooMail application did not specify an initial read timeout value and thus a system default for read timeout value would apply. The read timeout value was nevertheless overwritten to 0 that enables the application socket to remain active for a longer period of time.

The socket connect timeout modification module in one embodiment can modify a timeout associated with establishing of a socket for communication. Typically when a socket for an application cannot be established before a period of time has elapsed a connect timeout exception can occur. When a socket times out the TCP stack can attempt a number of retries by sending TCP SYN packets with an increasing backoff algorithm without the application being aware of it. The socket connect timeout modification module can overwrite the initial connect timeout value to 0. Overwriting the connect timeout to 0 does not mean that the creation of the socket can be delayed indefinitely. Instead the connect timeout is defined by the TCP stack parameters. For example by default the TCP stack can attempt at least 5 TCP SYN retries which results in a connect timeout in the order of a few minutes instead of seconds e.g. 3 minutes defined by RFC . As a result creation of a socket can be delayed for much longer than initially allowed.

For example for the application LINE the socket log below shows an initial connect timeout value of 10000 milliseconds or 10 seconds. If a connection is not established before the 10000 milliseconds or 10 seconds elapse the application will timeout.

The socket connect timeout modification module can overwrite the initial connect timeout value with a larger value of for example 20000 milliseconds or 20 seconds thereby doubling the application s delay tolerance which allows the local proxy to optimize traffic management.

Some applications do not have independent timers and can rely on higher level protocol stacks with independent timers e.g. timers independent from the TCP stack timers that can time out. When the protocol stack responds with a timeout it can impact the optimization of traffic management. The framework level timer modification module in one embodiment of the system timer modification module can modify protocol stack e.g. HTTP HTTPS XMPP and the like parameters to prevent applications from timing out and thereby increase the delay tolerance.

In some embodiments the framework level timer modification module can modify the protocol specific timeouts using a static mechanism or a dynamic mechanism . In the static mechanism the protocol specific timeouts are set to fairly large values and the client side proxy determines the gating delay for aligning traffic. In the dynamic mechanism the protocol specific timeouts are decided dynamically at run time based on device state e.g. screen on off user activity policy or other criteria. Applications can communicate with the client side proxy for such dynamically determined protocol specific timeouts. Example protocol specific API timeouts in the Android framework include setConnectTimeout setConnectionTimeout setSoTimeout and setReadTimeout. Following are examples of files and or libraries in the Android framework that can be modified to overwrite the initial protocol specific timeout values 

The modification to the TCP stack timers and or framework level timers are performed on selected data streams from multiple applications before the data streams reach the TCP stack thereby allowing the TCP stack to apply the increase timeouts to the application sockets.

In some embodiments various other TCP stack parameters may be modified for aligning of keepalives and or other non user interactive traffic. For example TCP stack parameters such as round trip timeouts TCP RTO MAX TCP RTO MIN initial round trip value TCP TIMEOUT INIT MAX TCP KEEPIDLE MAX TCP KEEPINTVL MAX TCP KEEPCNT MAX TCP SYNCNT TCP DELACK RETRIES TCP ORPHAN RETRIES TCP RETR1 TCP RETR2 TCP SYN RETRIES TCP SYNACK RETRIES and the like. Many of these TCP stack parameters are defined in RFC published by the Internet Engineering Task Force IETF .

In some embodiments the network side proxy includes a radio state detector a policy manager module a traffic shaping engine and a request transaction manager . The policy manager module may further include a radio state policy manager a caching policy manager and a traffic management policy manager . The traffic shaping engine may further include an alignment module a batching module and or a blocking module . The request transaction manager may further include a time criticality detection engine a prioritization engine a traffic detector categorizer an application state detector and a device state detector . More or less components may be present in the network side proxy and or each illustrated component of the network side proxy .

One embodiment of the network side proxy includes a radio state detector which tracks detects determines estimates or receives information concerning radio states of mobile devices that connect to an operator s mobile network where the network side proxy resides. In some embodiments the radio state detector can be aware of radio states of mobile devices and determine whether a mobile device is idle or active at any given time based on the traffic from mobile devices tunneling through the network side proxy in embodiments where the network side proxy is integrated to the radio access network the radio state detector can be aware of the radio state of mobile devices based on information from the network. In other embodiments the radio state detector may obtain radio state information from the local proxy and or the proxy server which can provide real time information on radio state promotions e.g. transition from idle to active state and demotions e.g. transition from active to idle state . Receiving real time radio state information from the local proxy and or proxy server could add bandwidth overhead. However knowing the radio state information of a mobile device allows the network side proxy to manage incoming traffic in an efficient manner without having to cause the mobile device to turn on or promote its radio every time data packets are received from third party servers.

One embodiment of the network side proxy includes the request transaction manager which can detect identify intercept process and or manage incoming traffic initiated by third party servers as well as server responses e.g. HTTP responses to data requests from one or more applications on the mobile device . The request transaction manager can determine how and when to process a given request or transaction or a set of requests or transactions based on one or more criteria that may include for example transaction characteristics network settings e.g. inactivity or dormancy timers and the like. In some embodiments the transaction characteristics may depend on whether the transaction e.g. HTTP response from third party server was a result of user interaction or other user initiated action on the mobile device e.g. user interaction with a mobile application or if the transaction was initiated by the server e.g. server initiated data push . Transaction characteristics can also depend on the amount of data that will be transferred or is anticipated to be transferred as a result of the request requested transaction.

In some embodiments the request transaction manager can prioritize requests or transactions made by third party servers and or third party server responses to requests made by applications on the mobile device via the prioritization engine for example. Importance or priority of requests transactions can be determined by the request transaction manager by applying a rule set for example according to time sensitivity of the transaction time sensitivity of the content in the transaction time criticality of the transaction time criticality of the data transmitted in the transaction and or time criticality or importance of an application to which the transmission is directed to. The time criticality of the transactions may be detected via the time criticality detection engine . In general a time critical transaction can include a transaction that is responsive to a user initiated request and can be prioritized as such. In some implementations a time critical transaction is one that includes information having an expiry date time e.g. stock prices weather etc. or information pertaining to applications whose operations or functions may be impaired if such information is delayed or blocked.

In general the priorities can be determined or set in default for example based on device platform device manufacturer operating system etc. Priorities can alternatively or additionally be set by the particular application server. For example the Facebook mobile application server can set its own priorities for various transactions e.g. a status update can be of higher priority than an add friend request or a poke request a message can be of higher priority than a notification of tagging for example an email application server or IM chat application server may have its own configurations for priority. The prioritization engine may include set of rules for assigning priority.

The prioritization engine can also track network provider limitations or specifications on application or transaction priority in determining an overall priority status for a request transaction. Furthermore priority can in part or in whole be determined by user preferences either explicit or implicit. A user can in general set priorities at different tiers such as specific priorities for sessions or types or applications e.g. a browsing session a gaming session versus an IM chat session the user may set a gaming session to always have higher priority than an IM chat session which may have higher priority than web browsing session . A user can set application specific priorities e.g. a user may set Facebook related transactions to have a higher priority than LinkedIn related transactions for specific transaction types e.g. for all send message requests across all applications to have higher priority than message delete requests for all calendar related events to have a high priority etc. and or for specific folders.

The prioritization engine can track and resolve conflicts in priorities set by different entities. For example manual settings specified by the user may take precedence over device OS settings and network provider parameters limitations e.g. set in default for a network service area geographic locale set for a specific time of day or set based on service fee type may limit any user specified settings and or application set priorities. In some instances data response to a manual sync request received from a user can override some most or all priority settings in that the requested synchronization is performed when requested regardless of the individually assigned priority or an overall priority ranking for the requested action.

In some embodiments the traffic categorizer can analyze traffic from third party servers and categorize such traffic as server initiated traffic or server response traffic for example. The traffic categorizer can via the prioritization engine and or time criticality detection engine categorize traffic into priority based categories e.g. high medium or low priority traffic . In some embodiments the traffic categorizer can further detect traffic from third party servers relating to socket closures e.g. FIN packets or for checking if the client is still connected. Each categories of traffic may be handled in one or more ways by the network side proxy via the request transaction manager traffic shaping engine and the like.

In some embodiments the application state detector detects the foreground or background state of applications on a mobile device e.g. using information reported by the local proxy and or the server proxy . Information concerning the state of the applications may be used by the network side proxy to determine traffic from which third party server s should be prioritized for transfer for example. The device state detector in some embodiments detects whether a mobile device is in active mode e.g. back light is on or there is user interaction or if the device is in an idle or passive mode e.g. back light is off . Information relating to device state may be used in managing or shaping incoming traffic.

In some embodiments the traffic shaping engine may shape or manage server initiated traffic and or server response traffic. The traffic shaping engine may utilize transaction characteristics priority time criticality application state radio state traffic category device state and the like in shaping or managing traffic. For example in one implementation in response to determining that the radio state of a mobile device is idle the traffic shaping engine can delay low priority traffic from third party servers at the network side for a period of time or until one or more conditions are met. For example the network side proxy may continue to delay the low priority traffic until the radio state of the mobile device is promoted to a connected state.

One embodiment of the radio alignment module of the traffic shaping engine can align traffic from multiple third party servers to optimize the number of radio turn on events and the amount of data that can be transferred to the mobile device in each radio event. In some implementations the optimization may not necessarily minimize the number of radio turn on events or maximize the amount of data that can be transferred per event since such optimization may also take into account other conditions or characteristics such as time criticality or urgency of some of the requests. For example when an incoming request is time critical or high priority the network side proxy can allow the radio on the mobile device to turn on so that the time critical or high priority incoming request can be transferred to the mobile device without delay.

The radio alignment module can delay server initiated and or server response traffic to achieve alignment with radio turn on events. When a radio turn on event is detected e.g. via radio state detector the traffic shaping engine can allow the delayed requests and or responses to be transferred to the mobile device. In addition the traffic shaping engine can allow multiple low priority transactions from third party servers to accumulate for batch transferring to a mobile device e.g. via the batching module . The batching module can initiate a batch transfer based on certain criteria. For example a batch transfer of multiple occurrences of requests some of which occurred at different instances in time may occur after a certain number of low priority requests have been detected after an amount of time elapses after the first of the low priority requests was initiated or after an allocated buffer is filled. In addition the batching module can initiate a batch transfer of the accumulated low priority events when a higher priority event is received or detected at the network side proxy . A batch transfer can otherwise be initiated when radio use is triggered at the mobile device for another reason e.g. user interaction wakes up the mobile device . In some embodiments the batching capability can be disabled or enabled at the transaction level application level or session level based on any one or combination of the following user configuration device limitations settings manufacturer specification network operator parameters limitations platform specific limitations settings device OS settings etc.

The traffic shaping engine in some embodiments may also block some of the traffic from third party servers that are determined to be unnecessary via the blocking module . For example when existing TCP sockets on a mobile device side are closed and the radio is down a third party server s socket may timeout and attempt to terminate the connection by sending a FIN packet or testing whether the connection is still alive by pushing some data. The blocking module may block such unnecessary data packets from being delivered to the local proxy of the mobile device . In some embodiments the network side proxy via a caching policy manager may use a safe response e.g. from cache to respond to the third party server to keep the server happy. In the example of the third party server sending a FIN packet the network side proxy via the caching policy manager can respond with an ACK packet which prevents the server TCP stack from making retry attempts which usually incurs additional signaling.

One embodiment of the network side proxy includes a policy manager module which can manage policies relating to radio states caching and or traffic management. In one embodiment the radio state policy manager may perform the functions of a Policy and Charging Rules Function PCRF node in managing radio states of mobile devices by throttling. The radio state policy manager determines whether a mobile device is idle or active at any given time e.g. via the radio state detector and depending on this information the radio state policy manager can dictate whether components in the radio access network e.g. eNodeB or Radio Network Controller RNC policies that would for example allow or forbid a radio channel status upgrade into a higher powered state or lower the radio channel status to a lower powered state in a more intelligent and resource efficient manner. In some embodiments the radio state policy manager can perform throttling and the local proxy and or the proxy server can provide the information to the network regarding the level of throttling should occur to trigger radio state changes to higher powered or lower powered states. The PCRF and details relating to promotion and demotion of radio states is described in detail in co pending U.S. patent application Ser. No. 13 844 682 titled Management of Mobile Device Radio State Promotion and Demotion which is hereby expressly incorporated by reference.

The caching policy manager in one embodiment leverages data stored in the cache to respond to incoming traffic or server response traffic and thus obviate the need to establish a connection to a mobile device. The request transaction manager can intercept a request from a third party server and determine if there is a cached response in cache that can be used as a response to the third party server request. For example in the case of a socket closure on the server side the network side proxy can respond with FIN ACK and prevent the server from attempting retries.

The traffic management policy manager may also manage policies for coordinating scheduling or aligning incoming and outgoing traffic and transmission of such traffic to their respective destinations. In one implementation the traffic management policy manager may implement a policy whereby both the local proxy and the network side proxy delay or gate all the traffic during the same time period. When a trigger e.g. based on a timer is detected network side proxy can promote the radio state of the mobile device to connected and transfer the incoming traffic to the mobile device. Similarly the local proxy on the mobile device can take advantage of the radio state promotion from the network side to transfer the outgoing traffic to the respective third party servers. In some implementations the radio state can be promoted from the device side due to other reasons e.g. user initiating a request backlight turning on . When the network side proxy detects the radio state promotion the network side proxy can batch and transfer all the delayed traffic to the mobile device. When the radio state is demoted the network side proxy or the local proxy can restart the delay or gating timer to align the next set of incoming traffic.

The host server generally includes for example a network interface and or one or more repositories and . Note that server may be any portable mobile or non portable device server cluster of computers and or other types of processing units e.g. any number of a machine shown in the example of able to receive or transmit signals to satisfy data requests over a network including any wired or wireless networks e.g. WiFi cellular Bluetooth etc. .

The network interface can include networking module s or devices s that enable the server to mediate data in a network with an entity that is external to the host server through any known and or convenient communications protocol supported by the host and the external entity. Specifically the network interface allows the server to communicate with multiple devices including mobile phone devices and or one or more application servers content providers .

The host server can store information about connections e.g. network characteristics conditions types of connections etc. with devices in the connection metadata repository . Additionally any information about third party application or content providers can also be stored in the repository . The host server can store information about devices e.g. hardware capability properties device settings device language network capability manufacturer device model OS OS version etc. in the device information repository . Additionally the host server can store information about network providers and the various network service areas in the network service provider repository .

The communication enabled by network interface allows for simultaneous connections e.g. including cellular connections with devices and or connections e.g. including wired wireless HTTP Internet connections LAN WiFi etc. with content servers providers to manage the traffic between devices and content providers for optimizing network resource utilization and or to conserver power battery consumption on the serviced devices . The host server can communicate with mobile devices serviced by different network service providers and or in the same different network service areas. The host server can operate and is compatible with devices with varying types or levels of mobile capabilities including by way of example but not limitation 1G 2G 2G transitional 2.5G 2.75G 3G IMT 2000 3G transitional 3.5G 3.75G 3.9G 5G IMT advanced etc.

In general the network interface can include one or more of a network adaptor card a wireless network interface card e.g. SMS interface WiFi interface interfaces for various generations of mobile communication standards including but not limited to 1G 2G 3G 3.5G 5G type networks such as LTE WiMAX etc. Bluetooth WiFi or any other network whether or not connected via a router an access point a wireless router a switch a multilayer switch a protocol converter a gateway a bridge a bridge router a hub a digital media receiver and or a repeater.

The host server can further include server side components of the distributed proxy and cache system which can include a proxy server and a server cache . In some embodiments the proxy server can include an HTTP access engine a caching policy manager a proxy controller a traffic shaping engine a new data detector and or a connection manager .

The HTTP access engine may further include a heartbeat manager the proxy controller may further include a data invalidator module the traffic shaping engine may further include a control protocol and a batching module . Additional or less components modules engines can be included in the proxy server and each illustrated component.

In the example of a device e.g. mobile device making an application or content request to an application server or content provider the request may be intercepted and routed to the proxy server which is coupled to the device and the application server content provider . Specifically the proxy server is able to communicate with the local proxy e.g. proxy of the examples of of the mobile device the local proxy forwards the data request to the proxy server in some instances for further processing and if needed for transmission to the application server content server for a response to the data request.

In such a configuration the host or the proxy server in the host server can utilize intelligent information provided by the local proxy in adjusting its communication with the device in such a manner that optimizes use of network and device resources. For example the proxy server can identify characteristics of user activity on the device to modify its communication frequency. The characteristics of user activity can be determined by for example the activity behavior awareness module in the proxy controller via information collected by the local proxy on the device .

In some embodiments communication frequency can be controlled by the connection manager of the proxy server for example to adjust push frequency of content or updates to the device . For instance push frequency can be decreased by the connection manager when characteristics of the user activity indicate that the user is inactive. In some embodiments when the characteristics of the user activity indicate that the user is subsequently active after a period of inactivity the connection manager can adjust the communication frequency with the device to send data that was buffered as a result of decreased communication frequency to the device .

In addition the proxy server includes priority awareness of various requests transactions sessions applications and or specific events. Such awareness can be determined by the local proxy on the device and provided to the proxy server . The priority awareness module of the proxy server can generally assess the priority e.g. including dine criticality time sensitivity etc. of various events or applications additionally the priority awareness module can track priorities determined by local proxies of devices .

In some embodiments through priority awareness the connection manager can further modify communication frequency e.g. use or radio as controlled by the radio controller of the server with the devices . For example the server can notify the device thus requesting use of the radio if it is not already in use when data or updates of an importance priority level which meets a criteria becomes available to be sent.

In some embodiments the proxy server can detect multiple occurrences of events e.g. transactions content data received from server provider and allow the events to accumulate for batch transfer to device . Batch transfer can be cumulated and transfer of events can be delayed based on priority awareness and or user activity application behavior awareness as tracked by modules and or . For example batch transfer of multiple events of a lower priority to the device can be initiated by the batching module when an event of a higher priority meeting a threshold or criteria is detected at the server . In addition batch transfer from the server can be triggered when the server receives data from the device indicating that the device radio is already in use and is thus on. In some embodiments the proxy server can order the each messages packets in a batch for transmission based on event transaction priority such that higher priority content can be sent first in case connection is lost or the battery dies etc.

In some embodiments the server caches data e.g. as managed by the caching policy manager such that communication frequency over a network e.g. cellular network with the device can be modified e.g. decreased . The data can be cached for example in the server cache for subsequent retrieval or batch sending to the device to potentially decrease the need to turn on the device radio. The server cache can be partially or wholly internal to the host server although in the example of it is shown as being external to the host . In some instances the server cache may be the same as and or integrated in part or in whole with another cache managed by another entity e.g. the optional caching proxy server shown in the example of such as being managed by an application server content provider a network service provider or another third party.

In some embodiments content caching is performed locally on the device with the assistance of host server . For example proxy server in the host server can query the application server provider with requests and monitor changes in responses. When changed or new responses are detected e.g. by the new data detector the proxy server can notify the mobile device such that the local proxy on the device can make the decision to invalidate e.g. indicated as outdated the relevant cache entries stored as any responses in its local cache. Alternatively the data invalidator module can automatically instruct the local proxy of the device to invalidate certain cached data based on received responses from the application server provider . The cached data is marked as invalid and can get replaced or deleted when new content is received from the content server .

Note that data change can be detected by the detector in one or more ways. For example the server provider can notify the host server upon a change. The change can also be detected at the host server in response to a direct poll of the source server provider . In some instances the proxy server can in addition pre load the local cache on the device with the new updated data. This can be performed when the host server detects that the radio on the mobile device is already in use or when the server has additional content data to be sent to the device .

One or more the above mechanisms can be implemented simultaneously or adjusted configured based on application e.g. different policies for different servers providers . In some instances the source provider server may notify the host for certain types of events e.g. events meeting a priority threshold level . In addition the provider server may be configured to notify the host at specific time intervals regardless of event priority.

In some embodiments the proxy server of the host can monitor track responses received for the data request from the content source for changed results prior to returning the result to the mobile device such monitoring may be suitable when data request to the content source has yielded same results to be returned to the mobile device thus preventing network power consumption from being used when no new changes are made to a particular requested. The local proxy of the device can instruct the proxy server to perform such monitoring or the proxy server can automatically initiate such a process upon receiving a certain number of the same responses e.g. or a number of the same responses in a period of time for a particular request.

In some embodiments the server through the activity behavior awareness module is able to identify or detect user activity at a device that is separate from the mobile device . For example the module may detect that a user s message inbox e.g. email or types of inbox is being accessed. This can indicate that the user is interacting with his her application using a device other than the mobile device and may not need frequent updates if at all.

The server in this instance can thus decrease the frequency with which new or updated content is sent to the mobile device or eliminate all communication for as long as the user is detected to be using another device for access. Such frequency decrease may be application specific e.g. for the application with which the user is interacting with on another device or it may be a general frequency decrease e.g. since the user is detected to be interacting with one server or one application via another device he she could also use it to access other services to the mobile device .

In some embodiments the host server is able to poll content sources on behalf of devices to conserve power or battery consumption on devices . For example certain applications on the mobile device can poll its respective server in a predictable recurring fashion. Such recurrence or other types of application behaviors can be tracked by the activity behavior module in the proxy controller . The host server can thus poll content sources for applications on the mobile device that would otherwise be performed by the device through a wireless e.g. including cellular connectivity . The host server can poll the sources for new or changed data by way of the HTTP access engine to establish HTTP connection or by way of radio controller to connect to the source over the cellular network. When new or changed data is detected the new data detector can notify the device that such data is available and or provide the new changed data to the device .

In some embodiments the connection manager determines that the mobile device is unavailable e.g. the radio is turned off and utilizes SMS to transmit content to the device for instance via the SMSC shown in the example of . SMS is used to transmit invalidation messages batches of invalidation messages or even content in the case where the content is small enough to fit into just a few usually one or two SMS messages. This avoids the need to access the radio channel to send overhead information. The host server can use SMS for certain transactions or responses having a priority level above a threshold or otherwise meeting a criteria. The server can also utilize SMS as an out of band trigger to maintain or wake up an IP connection as an alternative to maintaining an always on IP connection.

In some embodiments the connection manager in the proxy server e.g. the heartbeat manager can generate and or transmit heartbeat messages on behalf of connected devices to maintain a backend connection with a provider for applications running on devices .

For example in the distributed proxy system local cache on the device can prevent any or all heartbeat messages needed to maintain TCP IP connections required for applications from being sent over the cellular or other network and instead rely on the proxy server on the host server to generate and or send the heartbeat messages to maintain a connection with the backend e.g. application server provider in the example of . The proxy server can generate the keep alive heartbeat messages independent of the operations of the local proxy on the mobile device.

The repositories and or can additionally store software descriptive data images system information drivers and or any other data item utilized by other components of the host server and or any other servers for operation. The repositories may be managed by a database management system DBMS for example which may be but is not limited to Oracle DB2 Microsoft Access Microsoft SQL Server PostgreSQL MySQL FileMaker etc.

The repositories can be implemented via object oriented technology and or via files and can be managed by a distributed database management system an object oriented database management system OODBMS e.g. ConceptBase FastDB Main Memory Database Management System JDOInstruments ObjectDB etc. an object relational database management system ORDBMS e.g. Informix OpenLink Virtuoso VMDS etc. a file system and or any other convenient or known database management package.

The caching policy manager In some embodiments can further include a metadata generator a cache look up engine an application protocol module a content source monitoring engine having a poll schedule manager a response analyzer and or an updated or new content detector . In some embodiments the poll schedule manager further includes a host timing simulator a long poll request detector manager a schedule update engine and or a time adjustment engine . The metadata generator and or the cache look up engine can be coupled to the cache or server cache for modification or addition to cache entries or querying thereof.

In some embodiments the proxy server e.g. the proxy server of the examples of and can monitor a content source for new or changed data via the monitoring engine . The proxy server as shown is an entity external to the mobile device of and external to the network side proxy of . The content source e.g. application server content provider of can be one that has been identified to the proxy server e.g. by the local proxy as having content that is being locally cached on a mobile device e.g. mobile device or . The content source can be monitored for example by the monitoring engine at a frequency that is based on polling frequency of the content source at the mobile device. The poll schedule can be generated for example by the local proxy and sent to the proxy server. The poll frequency can be tracked and or managed by the poll schedule manager .

For example the proxy server can poll the host e.g. content provider application server on behalf of the mobile device and simulate the polling behavior of the client to the host via the host timing simulator . The polling behavior can be simulated to include characteristics of a long poll request response sequences experienced in a persistent connection with the host e.g. by the long poll request detector manager . Note that once a polling interval behavior is set the local proxy on the device side and or the proxy server on the server side can verify whether application and application server content host behavior match or can be represented by this predicted pattern. In general the local proxy and or the proxy server can detect deviations and when appropriate re evaluate and compute determine or estimate another polling interval.

In some embodiments the caching policy manager on the server side of the distribute proxy can in conjunction with or independent of the proxy server on the mobile device identify or detect long poll requests. For example the caching policy manager can determine a threshold value to be used in comparison with a response delay interval time in a request response sequence for an application request to identify or detect long poll requests possible long poll requests e.g. requests for a persistent connection with a host with which the client communicates including but not limited to a long held HTTP request a persistent connection enabling COMET style push request for HTTP streaming etc. or other requests which can otherwise be treated as a long poll request.

For example the threshold value can be determined by the proxy using response delay interval times for requests generated by clients applications across mobile devices which may be serviced by multiple different cellular or wireless networks. Since the proxy resides on host is able to communicate with multiple mobile devices via multiple networks the caching policy manager has access to application client information at a global level which can be used in setting threshold values to categorize and detect long polls.

By tracking response delay interval times across applications across devices over different or same networks the caching policy manager can set one or more threshold values to be used in comparison with response delay interval times for long poll detection. Threshold values set by the proxy server can be static or dynamic and can be associated with conditions and or a time to live an expiration time date in relative or absolute terms .

In addition the caching policy manager of the proxy can further determine the threshold value in whole or in part based on network delays of a given wireless network networks serviced by a given carrier service provider or multiple wireless networks. The proxy can also determine the threshold value for identification of long poll requests based on delays of one or more application server content provider e.g. to which application e.g. mobile application or mobile client requests are directed.

The proxy server can detect new or changed data at a monitored content source and transmits a message to the mobile device notifying it of such a change such that the mobile device or the local proxy on the mobile device can take appropriate action e.g. to invalidate the cache elements in the local cache . In some instances the proxy server e.g. the caching policy manager upon detecting new or changed data can also store the new or changed data in its cache e.g. the server cache of the examples of . The new updated data stored in the server cache can be used in some instances to satisfy content requests at the mobile device for example it can be used after the proxy server has notified the mobile device of the new changed content and that the locally cached content has been invalidated.

The metadata generator can generate metadata for responses cached for requests at the mobile device . The metadata generator can generate metadata for cache entries stored in the server cache . Similarly the cache lookup engine can include the same or similar functions are those described for the cache look up engine shown in the example of .

The response analyzer can perform any or all of the functionalities related to analyzing responses received for requests generated at the mobile device in the same or similar fashion to the response analyzer of the local proxy shown in the example of . Since the proxy server is able to receive responses from the application server content source directed to the mobile device the proxy server e.g. the response analyzer can perform similar response analysis steps to determine cacheability as described for the response analyzer of the local proxy. The responses can be analyzed in addition to or in lieu of the analysis that can be performed at the local proxy on the mobile device .

Furthermore the schedule update engine can update the polling interval of a given application server content host based on application request interval changes of the application at the mobile device as described for the schedule update engine in the local proxy . The time adjustment engine can set an initial time at which polls of the application server content host is to begin to prevent the serving of out of date content once again before serving fresh content as described for the schedule update engine in the local proxy . Both the schedule updating and the time adjustment algorithms can be performed in conjunction with or in lieu of the similar processes performed at the local proxy on the mobile device .

In some embodiments of the proxy server the traffic shaping engine is further coupled to a traffic analyzer for categorizing mobile traffic for policy definition and implementation for mobile traffic and transactions directed to one or more mobile devices e.g. mobile device of or to an application server content host e.g. of . In general the proxy server is remote from the mobile devices and remote from the host server as shown in the examples of . The proxy server or the host server can monitor the traffic for multiple mobile devices and is capable of categorizing traffic and devising traffic policies for different mobile devices.

In addition the proxy server or host server can operate with multiple carriers or network operators and can implement carrier specific policies relating to categorization of traffic and implementation of traffic policies for the various categories. For example the traffic analyzer of the proxy server or host server can include one or more of a prioritization engine a time criticality detection engine an application state categorizer and or an application traffic categorizer

Each of these engines or modules can track different criterion for what is considered priority time critical background foreground or interactive maintenance based on different wireless carriers. Different criterion may also exist for different mobile device types e.g. device model manufacturer operating system etc. . In some instances the user of the mobile devices can adjust the settings or criterion regarding traffic category and the proxy server is able to track and implement these user adjusted configured settings.

In some embodiments the traffic analyzer is able to detect determined identify or infer the activity state of an application on one or more mobile devices e.g. mobile device or which traffic has originated from or is directed to for example via the application state categorizer and or the traffic categorizer . The activity state can be determined based on whether the application is in a foreground or background state on one or more of the mobile devices via the application state categorizer since the traffic for a foreground application vs. a background application may be handled differently to optimize network use.

In the alternate or in combination the activity state of an application can be determined by the wirelessly connected mobile devices e.g. via the application behavior detectors in the local proxies and communicated to the proxy server . For example the activity state can be determined detected identified or inferred with a level of certainty of heuristics based on the backlight status at mobile devices e.g. by a backlight detector or other software agents or hardware sensors on the mobile device including but not limited to resistive sensors capacitive sensors ambient light sensors motion sensors touch sensors etc. In general if the backlight is on the traffic can be treated as being or determined to be generated from an application that is active or in the foreground or the traffic is interactive. In addition if the backlight is on the traffic can be treated as being or determined to be traffic from user interaction or user activity or traffic containing data that the user is expecting within some time frame.

The activity state can be determined from assessing determining evaluating inferring identifying user activity at the mobile device e.g. via the user activity module and communicated to the proxy server . In some embodiments the activity state is determined based on whether the traffic is interactive traffic or maintenance traffic. Interactive traffic can include transactions from responses and requests generated directly from user activity interaction with an application and can include content or data that a user is waiting or expecting to receive. Maintenance traffic may be used to support the functionality of an application which is not directly detected by a user. Maintenance traffic can also include actions or transactions that may take place in response to a user action but the user is not actively waiting for or expecting a response.

The time criticality detection engine can generally determine identify infer the time sensitivity of data contained in traffic sent from the mobile device or to the mobile device from the host server or proxy server or the application server e.g. app server content source . For example time sensitive data can include status updates stock information updates IM presence information email messages or other messages actions generated from mobile gaming applications webpage requests location updates etc.

Data that is not time sensitive or time critical by nature of the content or request can include requests to delete messages mark as read or edited actions application specific actions such as an add friend or delete friend request certain types of messages or other information which does not frequently changing by nature etc. In some instances when the data is not time critical the timing with which to allow the traffic to be sent to a mobile device is based on when there is additional data that needs to the sent to the same mobile device. For example traffic shaping engine can align the traffic with one or more subsequent transactions to be sent together in a single power on event of the mobile device radio e.g. using the alignment module and or the batching module . The alignment module can also align polling requests occurring close in time directed to the same host server since these request are likely to be responded to with the same data.

In general whether new or changed data is sent from a host server to a mobile device can be determined based on whether an application on the mobile device to which the new or changed data is relevant is running in a foreground e.g. by the application state categorizer or the priority or time criticality of the new or changed data. The proxy server can send the new or changed data to the mobile device if the application is in the foreground on the mobile device or if the application is in the foreground and in an active state interacting with a user on the mobile device and or whether a user is waiting for a response that would be provided in the new or changed data. The proxy server or traffic shaping engine can send the new or changed data that is of a high priority or is time critical.

Similarly the proxy server or the traffic shaping engine can suppressing the sending of the new or changed data if the application is in the background on the mobile device. The proxy server can also suppress the sending of the new or changed data if the user is not waiting for the response provided in the new or changed data wherein the suppressing is performed by a proxy server coupled to the host server and able to wirelessly connect to the mobile device.

In general if data including new or change data is of a low priority or is not time critical the proxy server can waiting to transfer the data until after a time period or until there is additional data to be sent e.g. via the alignment module and or the batching module .

The connect and read timeouts for HTTP requests are modified to large values e.g. via system timer modification module . The modified connect and read timeouts for an HTTP request are then passed on to the TCP stack as TCP socket s connect and read timeouts allowing an HTTP based application to have a large timeout or delay tolerance . As illustrated the HTTP based application can send an HTTP request which is intercepted by the client side proxy . At the client side proxy a variable gating delay can be determined and or applied during which the HTTP request from the application and any other HTTP requests from other applications on the mobile device can be delayed or gated for alignment with a radio event for example. When the radio is turned on due to other reasons e.g. mobile device screen turns on or user interactive traffic is detected or when the delay time period is expired the requests that are delayed or gated are allowed to the network to respective third party servers such as the third party application server e.g. Google.com YouTube.com . The third party servers can then return HTTP responses which can be sent to the respective applications via the client side proxy . As illustrated in one of the HTTP responses that is associated with the HTTP request is transferred to the HTTP based application before the timer for the HTTP protocol times out.

A TCP state machine illustrated in is used to delay the TCP connect and payload associated with the HTTP request . As illustrated the first state of the state machine is the TCP LISTEN state where the client side proxy listens or waits for connection requests from an HTTP based application. When a TCP connect request and payload are received the TCP LISTEN state changes to TCP PAYLOAD GATING DELAY state . In the TCP PAYLOAD GATING DELAY state TCP connect requests and payloads are queued and delayed until a variable gating delay trigger is received. The TCP PAYLOAD GATING DELAY state then transitions to TCP RELAY state . During the TCP RELAY STATE TCP connection s can be established and TCP data packets can be used by the HTTP protocol to send HTTP requests e.g. GET requests to respective application servers. After the last of the HTTP requests are sent the TCP RELAY state transitions to TCP END SESSION state .

HTTPS and FunXMPP protocol specific timers can be modified to larger values using framework wrappers e.g. via system timer modification module . As illustrated the timers associated with the HTTPS and FunXMPP protocols are modified to have for example 10 20 30 40 50 60 seconds or other timeouts . By way of example a delay value for the connect timeout for a request can be determined from an analysis of an application associated with the request or from one or more applications based on the same protocol as the request. Requests from an HTTPS and FunXMPP based application can be intercepted by the client side proxy and a variable gating delay can be applied to delay and clump or bundle the requests 

When the time period as defined by the variable gating delay is expired or when a radio on the mobile device is powered on or promoted the clumped or bundled requests including requests are transferred over a TCP connection to application servers such as the third party server . The HTTPS and FunXMPP based responses are received from the third party servers by the client side proxy and then forwarded on the respective applications.

The TCP state machine illustrated in depicts transitions from one state to another in the process of delaying TCP connection establishment and data transfer. During the TCP LISTEN state the client side proxy listens or waits for connection requests from any HTTPS and FunXMPP based applications. When requests to establish a TCP connection and transfer payload is received the TCP LISTEN state transitions to the TCP PAYLOAD GATING DELAY state where the TCP connection and transfer payload requests can be delayed for a duration based on the delay tolerance of the application. When a variable gating delay trigger is received or detected the TCP PAYLOAD GATING DELAY state changes to the TCP RELAY state . While in the TCP RELAY state a TCP connection is established and the delayed payload can be transferred to the respective third party application servers. When the responses are received the TCP state can be changed to the TCP END SESSION state .

In the illustrated example a radio state promotion event triggers the local proxy to transfer the application requests to establish a TCP connection with third party application servers e.g. sockets S N . The delayed SYN packet from socket S is allowed to go out to the network and establish a TCP connection via a three way handshake procedure which involves sending a SYN packet receiving SYN ACK packets and returning a SYN packet to the third party application server socket S. Following establishment of a TCP connection TCP payload can be transferred and on completion of the transfer the TCP connection can be closed.

At block requests from the mobile applications are intercepted e.g. via request transaction manager . Requests may need to meet criteria to be intercepted in some instances. For example non user interactive requests or background requests may be intercepted and delayed while user interactive requests may not be. Similarly low priority requests even if they are a result of user interaction can be intercepted and delayed while high priority requests may not be. Similarly some mobile applications may be included in a list for traffic management and requests from those mobile applications may be intercepted while requests from other mobile applications not in the list may not be intercepted. At block the requests are aggregated over a period of time T to delay the requests or prevent the requests from establishing a connection to the wireless network e.g. via traffic shaping engine . At block if a radio on the mobile device is not activated or powered on and the Tperiod is not over as determined at decision block requests continue to aggregate. When the Tperiod ends the radio on the mobile device is activated e.g. via connection manager signaling the end of the aggregation period and beginning of the transfer period T. The aggregated requests are then transferred to their respective destinations at block . Alternately at block if the radio is activated or caused to be promoted to high power mode before the end of the Tperiod the aggregated requests are transferred to the respective destinations at block . At block while the radio is activated responses aggregated at a carrier side proxy server and or requests responses from one or more application servers are received at the mobile device. Use of the single radio connection to transfer multiple requests to the network and or receive multiple requests responses from remote servers reduces signaling and power consumption involved each time a radio connection is established and torn down.

At decision block when the Tperiod ends the transmission and receiving is halted by deactivating or powering down the radio at block . Until the time period TGO ends the radio remains activated and transfer of the requests and receiving of responses can continue.

In the example of the computer system includes a processor memory non volatile memory and an interface device. Various common components e.g. cache memory are omitted for illustrative simplicity. The computer system is intended to illustrate a hardware device on which any of the components depicted in the example of and any other components described in this specification can be implemented. The computer system can be of any applicable known or convenient type. The components of the computer system can be coupled together via a bus or through some other known or convenient device.

The processor may be for example a conventional microprocessor such as an Intel Pentium microprocessor or Motorola power PC microprocessor. One of skill in the relevant art will recognize that the terms machine readable storage medium or computer readable storage medium include any type of device that is accessible by the processor.

The memory is coupled to the processor by for example a bus. The memory can include by way of example but not limitation random access memory RAM such as dynamic RAM DRAM and static RAM SRAM . The memory can be local remote or distributed.

The bus also couples the processor to the non volatile memory and drive unit. The non volatile memory is often a magnetic floppy or hard disk a magnetic optical disk an optical disk a read only memory ROM such as a CD ROM EPROM or EEPROM a magnetic or optical card or another form of storage for large amounts of data. Some of this data is often written by a direct memory access process into memory during execution of software in the computer . The non volatile storage can be local remote or distributed. The non volatile memory is optional because systems can be created with all applicable data available in memory. A typical computer system will usually include at least a processor memory and a device e.g. a bus coupling the memory to the processor.

Software is typically stored in the non volatile memory and or the drive unit. Indeed for large programs it may not even be possible to store the entire program in the memory. Nevertheless it should be understood that for software to run if necessary it is moved to a computer readable location appropriate for processing and for illustrative purposes that location is referred to as the memory in this paper. Even when software is moved to the memory for execution the processor will typically make use of hardware registers to store values associated with the software and local cache that ideally serves to speed up execution. As used herein a software program is assumed to be stored at any known or convenient location from non volatile storage to hardware registers when the software program is referred to as implemented in a computer readable medium. A processor is considered to be configured to execute a program when at least one value associated with the program is stored in a register readable by the processor.

The bus also couples the processor to the network interface device. The interface can include one or more of a modem or network interface. It will be appreciated that a modem or network interface can be considered to be part of the computer system. The interface can include an analog modem isdn modem cable modem token ring interface satellite transmission interface e.g. direct PC or other interfaces for coupling a computer system to other computer systems. The interface can include one or more input and or output devices. The I O devices can include by way of example but not limitation a keyboard a mouse or other pointing device disk drives printers a scanner and other input and or output devices including a display device. The display device can include by way of example but not limitation a cathode ray tube CRT liquid crystal display LCD or some other applicable known or convenient display device. For simplicity it is assumed that controllers of any devices not depicted in the example of reside in the interface.

In operation the computer system can be controlled by operating system software that includes a file management system such as a disk operating system. One example of operating system software with associated file management system software is the family of operating systems known as Windows from Microsoft Corporation of Redmond Wash. and their associated file management systems. Another example of operating system software with its associated file management system software is the Linux operating system and its associated file management system. The file management system is typically stored in the non volatile memory and or drive unit and causes the processor to execute the various acts required by the operating system to input and output data and to store data in the memory including storing files on the non volatile memory and or drive unit.

Some portions of the detailed description may be presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the methods of some embodiments. The required structure for a variety of these systems will appear from the description below. In addition the techniques are not described with reference to any particular programming language and various embodiments may thus be implemented using a variety of programming languages.

In alternative embodiments the machine operates as a standalone device or may be connected e.g. networked to other machines. In a networked deployment the machine may operate in the capacity of a server or a client machine in a client server network environment or as a peer machine in a peer to peer or distributed network environment.

The machine may be a server computer a client computer a personal computer PC a tablet PC a laptop computer a set top box STB a personal digital assistant PDA a cellular telephone an iPhone a Blackberry a processor a telephone a web appliance a network router switch or bridge or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine.

While the machine readable medium or machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable medium and machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium and machine readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the presently disclosed technique and innovation.

In general the routines executed to implement the embodiments of the disclosure may be implemented as part of an operating system or a specific application component program object module or sequence of instructions referred to as computer programs. The computer programs typically comprise one or more instructions set at various times in various memory and storage devices in a computer and that when read and executed by one or more processing units or processors in a computer cause the computer to perform operations to execute elements involving the various aspects of the disclosure.

Moreover while embodiments have been described in the context of fully functioning computers and computer systems those skilled in the art will appreciate that the various embodiments are capable of being distributed as a program product in a variety of forms and that the disclosure applies equally regardless of the particular type of machine or computer readable media used to actually effect the distribution.

Further examples of machine readable storage media machine readable media or computer readable storage media include but are not limited to recordable type media such as volatile and non volatile memory devices floppy and other removable disks hard disk drives optical disks e.g. Compact Disk Read Only Memory CD ROMS Digital Versatile Disks DVDs etc. among others and transmission type media such as digital and analog communication links.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling of connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application shall refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above detailed description of embodiments of the disclosure is not intended to be exhaustive or to limit the teachings to the precise form disclosed above. While specific embodiments of and examples for the disclosure are described above for illustrative purposes various equivalent modifications are possible within the scope of the disclosure as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative embodiments may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified to provide alternative or subcombinations. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed in parallel or may be performed at different times. Further any specific numbers noted herein are only examples alternative implementations may employ differing values or ranges.

The teachings of the disclosure provided herein can be applied to other systems not necessarily the system described above. The elements and acts of the various embodiments described above can be combined to provide further embodiments.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the disclosure can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further embodiments of the disclosure.

These and other changes can be made to the disclosure in light of the above Detailed Description. While the above description describes certain embodiments of the disclosure and describes the best mode contemplated no matter how detailed the above appears in text the teachings can be practiced in many ways. Details of the system may vary considerably in its implementation details while still being encompassed by the subject matter disclosed herein. As noted above particular terminology used when describing certain features or aspects of the disclosure should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the disclosure with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the disclosure to the specific embodiments disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the disclosure encompasses not only the disclosed embodiments but also all equivalent ways of practicing or implementing the disclosure under the claims.

While certain aspects of the disclosure are presented below in certain claim forms the inventors contemplate the various aspects of the disclosure in any number of claim forms. For example while only one aspect of the disclosure is recited as a means plus function claim under 35 U.S.C. 112 6 other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 6 will begin with the words means for . Accordingly the applicant reserves the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the disclosure.

