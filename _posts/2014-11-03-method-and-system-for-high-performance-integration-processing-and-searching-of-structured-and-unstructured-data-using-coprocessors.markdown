---

title: Method and system for high performance integration, processing and searching of structured and unstructured data using coprocessors
abstract: Disclosed herein is a method and system for integrating an enterprise's structured and unstructured data to provide users and enterprise applications with efficient and intelligent access to that data. In accordance with exemplary embodiments, the generation of metadata indexes about unstructured data can be hardware-accelerated by processing streaming unstructured data through a reconfigurable logic device to generate the metadata about the unstructured data for the index.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396222&OS=09396222&RS=09396222
owner: IP RESERVOIR, LLC
number: 09396222
owner_city: St. Louis
owner_country: US
publication_date: 20141103
---
This patent application is a continuation of U.S. patent application Ser. No. 13 442 442 filed Apr. 9 2012 now U.S. Pat. No. 8 880 501 which is a continuation of U.S. patent application Ser. No. 12 640 891 filed Dec. 17 2009 now U.S. Pat. No. 8 156 101 which is a continuation of U.S. patent application Ser. No. 11 938 709 filed Nov. 12 2007 now U.S. Pat. No. 7 660 793 which claims priority to U.S. provisional patent application 60 865 629 filed Nov. 13 2006 the entire disclosures of each of which are incorporated herein by reference.

This patent application is related to U.S. patent application Ser. No. 11 938 732 filed Nov. 12 2007 entitled Method and System for High Performance Data Metatagging and Data Indexing Using Coprocessors and published as U.S. Patent Application Publication 2008 0114725 A1 the entire disclosure of which is incorporated herein by reference.

This patent application is also related to U.S. patent application Ser. No. 13 686 338 filed Nov. 27 2012 which is a continuation of the above referenced 732 patent application.

The present invention is generally directed toward the field of database acceleration particularly enterprise data warehouse acceleration including areas such as enterprise data searching document warehousing text mining text analytics information access and enabling actionable intelligence.

The following paragraphs provide several definitions for various terms used herein. These paragraphs also provide background information relating to these terms.

There are a number of reasons why XML is will not normally be categorized as structured as that term is used herein 

Enterprises continue to store and manage their data in a variety of disparate manners. One manner by which enterprises store their data is within relational databases using relational database management systems RDBMSs . The tabular normalized data stored in such RDBMSs is commonly referred to as structured data. For example an enterprise may format cleanse conform and store its sales records and customer information as structured data within an RDBMS. A variety of well known tools have been developed in the art for intelligently accessing such structured data typically based on standardized data languages such as the Structured Query Language SQL .

However it is commonly estimated that such tabular structured data represents only a tiny fraction of the totality of an enterprise s stored data. The remainder of the stored data is typically comprised of unstructured data whose storage is usually spread out amongst a variety of different file systems and storage means within the enterprise. An explosion of unstructured objects and documents has left many enterprises with a serious case of information overload . Intelligent and unified access to all of this structured and unstructured data has posed a difficult challenge. Contributing to this difficulty is the fact that with many enterprises storage of an enterprise s unstructured data is managed separately from the databases often by different organizational units. A huge challenge that many organizations face is to efficiently and effectively integrate their structured data in relational databases with the rest of this relatively unorganized mass of other unstructured data including blobs. Structured data can provide answers to relatively straight forward questions like what where when who by using text analytics unstructured data can answer more complex questions like why .

When a user s search includes some form of full text search the software that supports such full text querying will often take a relatively long time to complete particularly when the query requires scanning the entire bodies of many large documents. This slowness is due in part to inherent constraints on the performance of general purpose processors GPPs when executing traditional software. Current indexing techniques have important limitations to yielding find ability . Although indexing can be somewhat helpful in locating relevant documents the task of searching for mis spellings alternate spelling variations regular expressions or searching for a large number of terms are problems not easily or quickly solved with current indexing solutions and the time to create an effective index often becomes intractable. To state it differently in order to build an effective index to help find something it must be known beforehand what one is trying to find. One example of a shortcoming in conventional systems is that there is no easy or standard way to search for mis spellings. These problems are compounded in situations where the data are dynamic or constantly changing.

With respect to structured data SQL has enjoyed widespread deployment within industry because of its ability to provide a standardized consistent programming interface to many relational databases. However the inventors herein recognize that current attempts to standardize the integration of SQL for structured data with full text search capabilities or other processing capabilities such as text analytics and text mining on unstructured data have shown a need for improvement. The implementations of these attempts often evidence performance bottlenecks. Several efforts have arisen to extend standard SQL to integrate structured tabular data and various forms of unstructured data. For example SQL XML for relational access to semi structured XML data SQL MM for unstructured multimedia data SQL MED for unstructured external data and XQuery 1.0 and XPath 2.0 Full Text 1.0 for searching XML data using regular expressions wildcards stemming thesaurus and boolean operations. The inventors herein believe that these SQL extensions abilities to deal with unstructured data largely represent an inconsistent and mixed jumble of dialects which has hindered their widespread adoption in the IT industry. In the inventors opinion it is likely that serious performance issues have often slowed up these standardization efforts.

The widespread adoption of SQL has also lead to the development of a number of business intelligence BI reporting tools. The inventors believe that reporting tools functionality for supporting unstructured text analysis is relatively limited and that a need exists in the art for improvements in this area. Most of these software tools have relatively modest abilities to perform full text searches on unstructured data and other advanced text mining and analytics. The inventors reiterate their belief that the tools performances have not been particularly efficient.

Accordingly the inventors believe that there is a significant need in the art for a system that provides faster and more unified access to unstructured data. Moreover the inventors herein further believe that there is a need in the art for a better manner by which structured and unstructured data are coordinated and integrated with each other to support intelligent access of unstructured data.

Toward these ends the inventors disclose a new method and system configured to leverage hardware acceleration of the more complex unstructured data analysis during query processing in a manner that is tightly integrated with traditional standards based query processing of structured data. In doing so the present invention preferably harnesses the underlying hardware accelerated technology disclosed in the following patents and patent applications U.S. Pat. No. 6 711 558 entitled Associated Database Scanning and Information Retrieval U.S. Pat. No. 7 139 743 entitled Associative Database Scanning and Information Retrieval using FPGA Devices U.S. Patent Application Publication 2006 0294059 entitled Intelligent Data Storage and Processing Using FPGA Devices U.S. Patent Application Publication 2007 0067108 entitled Method and Apparatus for Performing Biosequence Similarity Searching U.S. Patent Application Publication 2008 0086274 entitled Method and Apparatus for Protein Sequence Alignment Using FPGA Devices published from U.S. Application Ser. No. 11 836 947 filed Aug. 10 2007 U.S. Patent Application Publication 2007 0130140 entitled Method and Device for High Performance Regular Expression Pattern Matching U.S. Patent Application Publication 2007 0260602 entitled Method and Apparatus for Approximate Pattern Matching published from U.S. patent application Ser. No. 11 381 214 filed May 2 2006 U.S. Patent Application Publication 2007 0174841 entitled Firmware Socket Module for FPGA Based Pipeline Processing and U.S. Patent Application Publication 2007 0237327 entitled Method and System for High Throughput Blockwise Independent Encryption Decryption the entire disclosures of each of which are incorporated herein by reference.

This hardware acceleration is applied toward those portions of query handling that are well suited to hardware acceleration e.g. full text search operations performed on unstructured data . To intelligently limit which unstructured data should be applied to the hardware accelerated data processing operation and thereby speed the overall response time a system that embodies the present invention may also employ indexed queries of structured data stored in a database. Preferably these queries are formulated as standardized indexed database queries such as SQL commands directed toward RDBMSs. In this manner users can formulate queries targeted toward both structured and unstructured data in a familiar way. An API in accordance with a preferred embodiment of the invention can be employed to effectively bifurcate query processing into a structured data portion and a hardware accelerated unstructured data portion.

The hardware accelerated data processing operation is preferably carried out by computer resources other than a GPP preferably a coprocessor such as a reconfigurable logic device on which firmware is deployed as described in the above referenced and incorporated patents and patent applications. By utilizing a coprocessor for this purpose significant acceleration in query processing is attained relative to conventional solutions that perform full text searching of unstructured data using traditional software executed by GPPs thereby freeing the system s GPP s to perform other system tasks.

The structured and indexed data that aids the query handling process preferably comprises at least in part the object s e.g.

document s metadata. This metadata which is preferably stored in structured relational tables within an RDBMS can be queried using standardized queries such as SQL commands to identify which subsets of unstructured data should be streamed through the coprocessor. In effect according to one aspect the present invention essentially SQL enables the data processing capabilities of the coprocessor.

Preferably the unstructured data that has been indexed with metadata is stored within high performance disk space within an appliance that employs the coprocessor on which the data processing functionality for the unstructured data is deployed. In this manner the unstructured data can be streamed through the coprocessor without network bandwidth constraints. The unstructured data can also be stored in some location that is accessible to appliance via a high speed network.

The inventors herein further disclose that the generation of metadata from unstructured objects can also be hardware accelerated using a coprocessor preferably using a coprocessor in the form of a reconfigurable logic device with appropriate firmware deployed thereon . Unstructured objects for which metadata is to be generated can be streamed through the appropriately configured coprocessor to thereby expedite the generation of metadata that is used to index that unstructured data. Following this metadata generation the entire bodies of these unstructured objects are preferably ingested into the disk space of the appliance.

The metadata is also preferably stored in an RDBMS internal to the appliance but it should be noted that structured data stored in other relational databases external to the appliance can also be accessed as part of the query processing functionality of a preferred embodiment of the present invention.

The inventors envision that in addition to the generalized data search described below the present invention can be applied toward a myriad of applications. For example in health care case management various disparate data sources such as clinical research databases patient record databases databases of insurance and regulatory filings and regulations databases can be integrated through the appliance described herein thereby enhancing the abilities of health care organizations with respect to enhancing diagnoses reducing misdiagnoses ensuring adequate treatment promoting quality of service increasing utilization of available resources reducing fraud controlling costs and other goals.

In the scientific field disparate data sources such as scientific and clinical literature medical treatment records and reports chemical compound databases pharmaceutical databases medical symptom databases and the like can be integrated using the appliance described herein. In this manner the desirable goals include extracting relationships among biomedical and chemical entities genetic markers e.g. proteins and genes base sequences and symptoms patterns such as A inhibits B A activates B and A is associated with B . Entity extraction in the context can refer to recognition of gene protein chemical symptom and syndrome names and signatures from biomedical and chemical texts based on domain dictionaries.

In the intelligence and counter terrorism field disparate data sources such as news and investigative reports communications intercepts documents and case files all in a variety of languages can be integrated through the appliance described herein. The targets and patterns that can be detected through integrated and intelligent access to this data includes organizational associations and networks behavioral attack patterns threat assessment strategy development tactical evaluation and event prediction.

In the law enforcement field similar data sources to the intelligence counter terrorism field can be integrated along with crime and court reports legal documents as well as geographic and demographic data using the appliance described herein. Goals of such integration would include detection of crime patterns temporal geospatial interpersonal and or organizational as well as support of criminal investigations and prosecutions.

In the securities fraud detection field disparate data sources such as financial and news reports corporate filings and documents and trading and other transactional records can all be integrated using the appliance described herein thereby enhancing the ability to detect such activities as insider trading reporting irregularities money laundering illegal transactions and pricing anomalies.

In the field of customer relationship management CRM disparate data sources such as customer email and letters call center notes and transcripts as well as other customer data maintained in existing CRM systems can all be integrated using the appliance described herein. Through such integration one can potentially identify product and service quality issues and assist in product design and management.

In the reputation management field disparate data sources can include news reports web pages and market analyses can be integrated using the appliance described herein to perform text mining and pattern detection operations that reveal the state of an enterprise s relations with the public.

Similarly the appliance described herein can be used as a social network analysis tool that analyzes email and other communications corporate documents and news reports to determine the connectedness of individuals and organizations.

Other areas that are believed to be ripe for the deployment of the appliance described herein include operations management competitive intelligence legal discovery e.g. where a plaintiff in a law suit requests all data maintained or under the control of the defendant that relates to John Smith content rights management regulatory compliance and others.

Furthermore the invention described herein can be used to significantly accelerate metadata generation operations that are performed on data including automated generation of content derived metadata.

These and other features and advantages of the present invention will be apparent to those having ordinary skill in the art upon review of the following description and drawings.

Preferably search appliance employs a hardware accelerated data processing capability as well as a query handling API for handling queries directed at least partially toward structured data. depicts a preferred embodiment for the appliance . Within appliance a coprocessor is positioned to receive data that streams off either or both a disk subsystem defined by disk controllers and and by data stores and either directly or indirectly by way of system memory such as RAM and a network via network interface . Data store comprises an RDBMS in which structured relational data is stored while data store comprises a file system in which unstructured data is stored. It should be noted however that unstructured data may optionally also be stored in an unstructured data column within RDBMS as described below in connection with . Network preferably comprises an enterprise network whether LAN or WAN in which various disparate document stores e.g. components and or are located. While data store is characterized as a data store for structured data it should be noted that data store may optionally contain unstructured data blobs which can also be subjected to ingest and query processing.

In a preferred embodiment the coprocessor comprises a reconfigurable logic device . Preferably data streams into the reconfigurable logic device by way of system bus although other design architectures are possible see . Preferably the reconfigurable logic device is a field programmable gate array FPGA although this need not be the case. System bus can also interconnect the reconfigurable logic device with the appliance s processor as well as the appliance s RAM . In a preferred embodiment system bus may be a PCI X or PCI Express bus although this need not be the case.

The data store can be any data storage device system but is preferably some form of a mass storage medium. For example the data store can be a magnetic storage device such as an array of disks. However it should be noted that other types of storage media are suitable for use in the practice of the invention.

The computer system defined by processor and RAM can be any commodity computer system as would be understood by those having ordinary skill in the art. For example the computer system may be an Intel Xeon system or an AMD Opteron system. Thus processor which serves as the central or main processor for appliance preferably comprises a GPP.

The reconfigurable logic device has firmware modules deployed thereon that define its functionality. The firmware socket module handles the data movement requirements both command data and target data into and out of the reconfigurable logic device thereby providing a consistent application interface to the firmware application module FAM chain that is also deployed on the reconfigurable logic device. The FAMs of the FAM chain are configured to perform specified data processing operations on any data that streams through the chain from the firmware socket module . Preferred examples of FAMs that can be deployed on reconfigurable logic in accordance with a preferred embodiment of the present invention are described below.

The specific data processing operation that is performed by a FAM is controlled parameterized by the command data that FAM receives from the firmware socket module . This command data can be FAM specific and upon receipt of the command the FAM will arrange itself to carry out the data processing operation controlled by the received command. For example within a FAM that is configured to perform an exact match operation the FAM s exact match operation can be parameterized to define the key s that the exact match operation will be run against. In this way a FAM that is configured to perform an exact match operation can be readily re arranged to perform a different exact match operation by simply loading new parameters for one or more different keys in that FAM.

Once a FAM has been arranged to perform the data processing operation specified by a received command that FAM is ready to carry out its specified data processing operation on the data stream that it receives from the firmware socket module. Thus a FAM can be arranged through an appropriate command to process a specified stream of data in a specified manner. Once the FAM has completed its data processing operation another command can be sent to that FAM that will cause the FAM to re arrange itself to alter the nature of the data processing operation performed thereby. Not only will the FAM operate at hardware speeds thereby providing a high throughput of target data through the FAM but the FAMs can also be flexibly reprogrammed to change the parameters of their data processing operations.

The FAM chain preferably comprises a plurality of firmware application modules FAMs . . . that are arranged in a pipelined sequence. However it should be noted that within the firmware pipeline one or more parallel paths of FAMs can be employed. For example the firmware chain may comprise three FAMs arranged in a first pipelined path e.g. FAMs and four FAMs arranged in a second pipelined path e.g. FAMs and wherein the first and second pipelined paths are parallel with each other. Furthermore the firmware pipeline can have one or more paths branch off from an existing pipeline path. A practitioner of the present invention can design an appropriate arrangement of FAMs for FAM chain based on the processing needs of a given application.

A communication path connects the firmware socket module with the input of the first one of the pipelined FAMs . The input of the first FAM serves as the entry point into the FAM chain . A communication path connects the output of the final one of the pipelined FAMs with the firmware socket module . The output of the final FAM serves as the exit point from the FAM chain . Both communication path and communication path are preferably multi bit paths.

The nature of the software and hardware software interfaces used by appliance particularly in connection with data flow into and out of the firmware socket module are described in greater detail in the above referenced and incorporated U.S. Patent Application Publication 2007 0174841.

It is worth noting that in either the configuration of or the firmware socket can make memory accessible to the PCI X bus which thereby makes memory available for use by an OS kernel as the buffers for transfers from the disk controller and or network interface controller to the FAMs. It is also worth noting that while a single FPGA is shown on the printed circuit boards of it should be understood that multiple FPGAs can be supported by either including more than one FPGA on the printed circuit board or by installing more than one printed circuit board in the appliance . depicts an example where numerous FAMs in a single pipeline are deployed across multiple FPGAs.

In the exemplary embodiments discussed herein the term documents will be used to describe the unstructured data that is processed through the inventive system. However it should be noted that the usage of the term documents is meant to be only exemplary as other forms unstructured data can also be processed using the inventive system and method.

An optional configuration that may enhance performance of appliance is the ability to bring a large number possibly all of an enterprise s documents into its on board data store . Furthermore it is preferred that in doing so the appliance build metadata about each document that it ingests. This document metadata comprises structured data that can then be stored in a relational database system such as in on board RDBMS .

FAMs resident in firmware pipeline are preferably arranged to perform a document metadata generation operation on the documents it receives. Examples of document metadata generation techniques that could be employed in firmware include but are not limited to part of speech tagging information and entity extraction document classification document clustering and text summarization. Functionally these operations can be viewed as a series of transformations on a data stream of one or more documents. One illustrative example of a document classification operation that can be performed on documents includes language classification. With language classification the document can be applied to a statistical n gram algorithm that is configured to identify the language that the text within the document most closely matches. Other document classification operations can employ hidden Markov models HMMs to learn some type of classification for the document. Further still regular expression pattern matching can be employed by the firmware to further develop classification information about a document. As an example a document classifier that can be used may be a flag that identifies whether the document in question contains a credit card number in such cases firmware can include FAMs that implement a regular expression pattern matching operation wherein this regular expression pattern matching operation is keyed around determining whether a document streamed therethrough includes a data pattern that looks like a credit card number. Based on the results of this operation the credit card indicator metadata can be set to positive or negative.

It is believed that conventional approaches to metadata generation operations have built these operations into software executed by a main processor such as processor which as explained above exhibits performance shortcomings. The inventors believe that by offloading these metadata generation operations to a coprocessor significant acceleration can be achieved. Additional details regarding the use of coprocessors to perform metadata generation operations can be found in the above referenced and incorporated U.S. patent application Ser. No. 11 938 732 entitled Method and System for High Performance Data Metatagging and Data Indexing Using Coprocessors .

The document metadata that is produced by the operation of firmware can then be stored in RDBMS wherein the RDBMS engine operates to generate and maintain an index of this document metadata that can later be queried using standardized database queries to identify which documents within data store should be processed through the coprocessor at hardware speeds during query processing. After the received document has been processed by firmware document can then be ingested into the appliance by storing it in the data store of unstructured data. The acts of metadata generation and document ingestion preferably operate virtually concurrently in near real time. It should be noted that the document metadata can optionally be stored in a structured database external to the appliance .

In this manner appliance can now use the document metadata indexed by RDBMS to aid decisions as to which documents should be subjected to a query specified data processing operation e.g. a full text searching operation via coprocessor . Furthermore because standardized RDBMS technology has been leveraged within appliance standardized database queries that are well known to a number of users can be used to decide which documents are to be subjected to the coprocessor based data processing operation when processing a given query .

It is generally preferred that the relational database use indexing methodologies such as B tree indexes to optimize queries of the document metadata . Also because of the richness of the indexes that can be generated via the hardware accelerated metadata generation. Sophisticated full text searching operations including proximity searching i.e. finding instances where Word X is separated from Word Y by less than Z word positions can be efficiently accomplished by leveraging the power of the indexes.

Furthermore when an enterprise adopts appliance to aid its enterprise data handling operations the document ingest pre processing can be applied not only prospectively to newly created documents but also retroactively to all or a significant subset of the enterprise s already existing documents. Thus when installing the appliance an enterprise may want to ingest all or a significant subset of its documents through the appliance as specified in connection with to enable effective and efficient document searching. However it should be noted that the documents subjected to the ingest pre processing described in connection with need not be limited to documents external to appliance . The pre processing can also be applied to documents within data store that had not previously been subjected to the metadata generation operation or to documents in need of new metadata generation operations.

It should also be noted that the storage from which documents are ingested into appliance for pre processing can be any data store accessible through the enterprise network e.g. enterprise data stores within enterprise network and data stores that are external to the enterprise network but nevertheless accessible thereto . For example the documents that are ingested into appliance can be Internet content such as web pages.

Once document metadata for a significant number of documents has been stored in RDBMS the appliance is now ready to handle user specified queries. An API within appliance is preferably configured to enable the appliance to process standardized database queries against the document metadata in RDBMS and then use the result set of the query to determine which documents should be delivered to coprocessor for a query specified data processing operation.

Thus a preferred embodiment of the present invention operates to provide SQL enabled client applications with the ability to access the hardware accelerated functionality of coprocessor via SQL commands. Thus not only can the appliance be integrated with a SQL enabled client application such as a BI reporting tool but the appliance can also or alternatively be integrated with other SQL enabled applications. For example the appliance can be integrated with any or all of the following SQL enabled applications various enterprise software applications such as ERP CRM SAP etc. middleware programs client programs custom built programs written in any of a large number of programming languages e.g. using ODBC or JDBC connectivity and another SQL database that is linked to database .

Within the appliance itself the SQL enablement preferably includes a high performance tight integration with conventional SQL relational engine software . An example of this is shown in . Relational engine software can be conventional off the shelf software for accessing relational databases. To integrate query processing through the relational engine with the coprocessor some customizations can be added to relational engine software . A few exemplary methods that could yield this type of customization to achieve the desired integration are C based external procedures custom libraries dynamically linked into the SQL engine user defined types and functions stored procedures and custom data providers.

For example code can be added to the relational engine that invokes a desired external procedure when certain statements are encountered in a SQL command. An example of this is shown in wherein the relational engine is configured to recognize the statement text contains as invoking an external program shown as coprocessor interface software in . When the relational engine encounters such a statement it makes a call on the coprocessor interface software and passes the appropriate data to the API software to thereby allow the coprocessor to function as desired as explained below in connection with . It should be readily understood that a number of external procedures can be devised for relational engine such that different statements encountered in a SQL command will invoke different external programs to thereby achieve different processing effects with the coprocessor . As stated the text contains statement can be tied to an external procedure that configures the coprocessor for an exact or approximate matching operation while a relevance ranking statement can be tied to an external procedure that configures the coprocessor for scoring data objects along relevance dimensions.

If the appliance is implemented with an open source database such as MySQL then the integration can be achieved directly within the relational engine source code itself. With the greater flexibility that an open source solution provides a SQL parser interpreter can be developed that serves as the API and intermediates all SQL requests between the client application and the database . An exemplary implementation of a SQL parser interpreter strategy for API is documented in .

Returning to the embodiment of presents a series of steps that could be used to implement a query processing solution that is based on such standard SQL extensions such as stored procedures external procedures or user defined functions. It is closely tied to which uses the same series of steps . At step an ANSI standard SQL command is composed and invoked via a SQL enabled client application. Next at step the relational engine executes on processor and it parses the SQL command to decide how the RDBMS should be queried. Optimizer hints and various coding techniques allow the SQL developer to construct a command where the order of processing can be guaranteed. That is the optimizer hints can define an appropriate order of processing as between various statements in a SQL command . With reference to this would involve the relational engine satisfying the date loaded statement prior to the working on the text contains statement. The task at hand is to try to use indexed tables stored by the RDBMS to limit the objects that will need to be full text scanned by coprocessor . Essentially the relational engine will apply a portion of the query that is directed toward structured data to RDBMS this query portion is identified as SQL command in the example of and . The relational engine and RDBMS can thus operate on a SQL command to identify documents listed in a document metadata index that it maintains to thereby identify which document match the query conditions. Thus at step the RDBMS will return a list of documents after matching the criteria set forth in the date loaded constraint portion of the SQL command against the content of its document metadata index. The documents identified by document list can preferably be identified by their locations in data store . At step the relational engine next encounters the text contains statement which is recognized as invoking an external procedure. The relational engine then invokes the coprocessor interface software that is tied to the text contains statement. The relational engine passes the query string following the text contains statement to the coprocessor interface software and further informs the coprocessor interface software of the file list generated at step . The coprocessor interface software in turn directs the operation of the coprocessor preferably by passing the query string to the coprocessor together with a command that instructs the coprocessor to appropriately configure itself to perform the query specified data processing operation. Then at step the entire bodies of the unstructured documents identified by list are read into the coprocessor . Preferably coprocessor interface software issues an instruction to the disk controller to stream the unstructured documents on list out of data store . The data store then provides the requested documents to the coprocessor as a data stream that is processed therethrough. Coprocessor then performs the specified data processing operation on data stream at hardware speeds step providing significant acceleration to the query handling operation relative to conventional approaches. Any hits that are found by the coprocessor can then be returned by the coprocessor to a temporary database table in RAM as a result set step . The coprocessor interface software in turn can inform the relational engine of this result set . Optionally at step the relational engine can post process these results to perform any desired aggregations cross correlations or subsequent analysis on the results .

Next at step the relational engine preferably formats the search results to a format expected by the reporting tool and the reporting tool operates using its existing technology to present those search results to the user.

As there are a wide variety of BI reporting tools used in industry the API is preferably configured with the capability to interface with at least most of the major BI reporting tools. For example a configuration file maintained by the search appliance can be set up during initialization of search appliance within an enterprise to identify the particular BI reporting tool with which the search appliance will interact to enable data exchanges therebetween.

It should also be noted that a conventional BI reporting tool need not be used as the interface between the search appliance and the user. For example search appliance can be configured to provide its own GUIs for display to users wherein these GUIs are configured to provide the same basic functionality as BI reporting tools. In this manner the API could then optionally be configured to directly translate the user specified query into the database query .

Further still it should be noted that the standardized query need not originate from a BI reporting tool or user instead it can originate from some other enterprise application that is making a call on the data stored by or known to the search appliance .

Also it should be noted that the API described herein as part of the search appliance can optionally be located in whole or in part within the BI reporting tool or other higher level application.

The relational engine identifies the date loaded constraint as a document metadata item and further identifies the text constraint as a matter to be resolved by the coprocessor as discussed above. With respect to the embodiment of the relational engine queries the RDBMS using SQL command which corresponds to the date loaded portion of SQL command see step see also . A documents table in the relational database inside the appliance serving as the metadata index will have had metadata generated for it when documents were loaded into storage. Filenames for responsive documents can be retrieved for all rows matching the criteria in the SQL where clause.

The RDBMS then returns a list of all documents identified by the metadata index as matching the date loaded constraint i.e. RDBMS would then apply this SQL command against its document metadata index to return a list of all documents that were loaded into data store on Jul. 7 2007 wherein this list can be stored in RAM for example a temporary database table built in memory to store the list of filenames which matched the where clause criteria . See step see also . This list preferably identifies the locations in the file system of data store where each document loaded on Jul. 7 2007 is located.

The API via API for the embodiment of and b see step also issues a request to data store for retrieval of all documents on list see . The API also operates via API for the embodiment of and b see step to generate a control signal for delivery to the coprocessor s FAM pipeline that arranges the FAM pipeline to perform a full text search built around the conditions of high throughput near blastn from the query string. This control signal is then preferably delivered to the coprocessor preferably delivered to a firmware socket module resident on the coprocessor prior to the documents arrival to the coprocessor see .

In response to the request data store outputs a data stream for delivery to the coprocessor preferably to the firmware on reconfigurable logic device as shown in see also step . The coprocessor preferably via a FAM pipeline on reconfigurable logic device then performs a hardware accelerated full text search of the documents within stream in accordance with the text constraints in the query see step see . The search results can take the form of another temporary database table built in memory to store the matches returned from the coprocessor during the full text search. The results of this high speed data processing operation are then returned to the API by way of the firmware socket module see step . The API preferably relational engine then operates to format those search results in a manner expected by the reporting tool for return to the reporting tool where they can be presented to the user in satisfaction of his her query as shown in see step .

It should also be noted that the documents for which document metadata has been generated need not necessarily be stored within the appliance in data store . Those documents can be retained in their original locations outside the appliance if desired. In such instances when it is time for those documents to be full text processed via coprocessor those documents can streamed into appliance and coprocessor via network interface . is a counterpart to that depicts this aspect of document searching wherein the documents on list returned by RDBMS include both documents inside data store and documents external to appliance that are located in some other data store that is accessible through the enterprise network. In such cases two requests and will be prepared by the API one for delivery to data store and the other for delivery outside the appliance . While this arrangement is less desired because network bandwidths may then constrain the latency with which searches are performed the inventors nevertheless note that some acceleration is still provided even if the documents are not retained within the data store . In this vein it is also worth noting that the act of ingesting a document into data store can be a copy operation rather than a move operation. Some enterprises may prefer that the master copy of the document remain in its original location external to appliance . In such situations only a copy of the document is stored by the data store .

Another powerful aspect of the preferred embodiment is the ability of the appliance to access any enterprise RDBMSs that are external to the search appliance when performing data processing operations. An overview of this aspect of the preferred embodiment is shown in . As part of this aspect of the preferred embodiment SQL commands will be issued by the API to the external RDBMS and a response to those commands will be received by the API . Accordingly the appliance will be able to efficiently leverage existing structured data maintained by an enterprise when performing searches for documents of interest.

Because the enterprise stores its customer sales data in an RDBMS that is external to the search appliance SQL command operates to join data tables in external RDBMS with document metadata tables in RDBMS . This action is reflected in the inner join statement that joins the customer data in the Customers external DB C relational table in an external RDBMS with the document metadata relational table in RDBMS based on a merged key of D.Customer ID for the document metadata table and C.Customer ID for the external relational table a SQL operation that is well known in the art. Based on this merge the relational engine can identify from the external relational table which customers have sales volumes below 10 000 and tie those customers to a field in the document metadata table. Then the documents for those customers can be further restricted based on the date loaded metadata field in the document metadata. Finally the documents for customers meeting the sales volume and date loaded constraints can be processed within coprocessor for high speed text mining based on the trouble near widget or new product constraint. Thereafter processing can proceed as described in connection with .

The relational engine then continues its handling of SQL command and determines whether any additional constraints are remaining from command that are directed toward RDBMS . If there are not then a SQL command is built for RDBMS based on the customers in result set . If there are then a SQL command is built for RDBMS based on both the result set and any remaining internal RDBMS directed constraints e.g. the date loaded constraint in the example of . Thus for the exemplary SQL command of the relational engine would apply a SQL command that seeks out all documents with document metadata restricted by the customers in result set for their customer field and restricted by the Jul. 7 2007 date for their date loaded field. This new SQL command can be delivered to RDBMS for processing thereby see . In the example of the filenames retrieved from the metadata index can be the filenames for all rows matching the criteria in the SQL where clause including the companies for which sales are below 10 000 as determined from external RDBMS .

Upon receiving the document list in response to command the remainder of the query processing proceeds as explained above in connection with as shown in . In this example the control signal for the FAM pipeline will be configured to arrange the FAM pipeline to perform a full text search of the documents within data stream to identify which ones contain the text trouble near either widget or new product .

As previously noted discloses an alternate embodiment for API . With respect to the working example of steps and correspond to what is shown in . Steps and correspond to what is shown in . Step corresponds to what is shown in . Step corresponds to what is shown in . Steps and correspond to what is shown in . Step corresponds to what is shown in and step corresponds to what is shown in .

API also discloses a series of processing steps for use when at least a portion of the structured data is stored in an RDBMS that is external to the appliance . With respect to the working example of steps and correspond to what is shown in . It should be noted that because the query in this instance is directed partially toward relational data stored in the external RDBMS the process flow will branch to step from step . Thereafter step corresponds to what is shown in . Steps and correspond to what is shown in . At that point the process flow branches to step and the remaining operations proceed such that operate as described in connection with .

It is also worth noting that the appliance can also be configured to handle queries from a higher level application such as a BI reporting tool that are directed toward neither documents within data store documents about which RDBMS maintains metadata or data within RDBMS . In such instances the API essentially acts as a pass through at least as a pass through to relational engine as those queries are directed toward the appropriate external components see steps and .

It can also be noted that API can be configured to handle queries that are directed solely toward metadata within RDBMS e.g. queries on the metadata but that do not include a document text searching constraint as shown by steps and in .

As an alternative to this mode of operation the FAM set and the FAM set can both be set up as their own separate individual pipelines as shown in . In this example intelligence built into the firmware socket module can direct data control data and target data to the appropriate FAM set based on what type of processing is needed.

Any of a variety of algorithms can be used for the query specified data processing operation performed by coprocessor preferably via firmware deployed on a reconfigurable logic device . As mentioned above full text searching can be carried out by the coprocessor. Examples of various full text searching operations that can be performed by the coprocessor include exact match operations approximate match operations regular expression matching operations pattern matching operations and others. With full text searching one or more keys corresponding to the data sought to be found in the unstructured data as defined by the query can be loaded into the coprocessor and the streaming unstructured data can be compared against the one or more keys using various techniques to determine whether any of the streaming unstructured data satisfies the query. Exemplary embodiments for such full text searching operations are disclosed in the above referenced and incorporated U.S. Pat. Nos. 6 711 558 and 7 139 743 and U.S. Patent Application Publications 2006 0294059 2007 0130140 and U.S. Patent Application Publication 2007 0260602 entitled Method and Apparatus for Approximate Pattern Matching published from U.S. application Ser. No. 11 381 214 filed May 2 2006 .

Another example of a data processing operation that can be performed by the coprocessor includes biosequence similarity searching embodiments of which are disclosed in U.S. Patent Application Publication 2007 0067108 and U.S. Patent Application Publication 2008 0086274 entitled Method and Apparatus for Protein Sequence Alignment Using FPGA Devices published from U.S. application Ser. No. 11 836 947 filed Aug. 10 2007 both of which are referenced and incorporated above.

Further still a pipeline within the coprocessor can be arranged to perform a plurality of different data processing operations on unstructured data. For example should unstructured data be stored in data store in an encrypted format then the coprocessor can be configured with a pipeline that performs a decryption operation on the encrypted unstructured data prior to performing a full text searching operation. Similarly should the unstructured data be stored in data store in a compressed format then the coprocessor can be configured with a pipeline that performs a decompression operation on the compressed unstructured data prior to performing a full text searching operation. Further still should the unstructured data be stored in data store in an encrypted and compressed format then the coprocessor can be configured with a pipeline that performs decryption and decompression prior to performing a full text searching operation.

It should also be noted that a practitioner of the present invention may choose to employ security features within the appliance that will limit the content that is available to various users. Preferably such security features are integrated with various enterprise security architectures such as LDAP Active Directory Single Sign On. It should also be noted that security functionality can be hardware accelerated through the coprocessor if desired. For example the granularity of security control can be efficiently implemented at the data level rather than at the document level through the use of coprocessor . For example in a preferred embodiment wherein the coprocessor comprises a reconfigurable logic device firmware can be arranged on the reconfigurable logic device to employ entitlement filtering that effectively masks the passage of restricted data to downstream FAMs in a firmware pipeline that are arranged for a specified data processing operation. For example regular expression pattern matching FAMs can be employed to mask out certain pieces of data e.g. names telephone numbers credit card numbers from data as it streams through the firmware . Similarly in an application of the invention to the medical records field select data within a medical record that is to only be seen by doctors nurses can be filtered using appropriately configured firmware to prevent a user who is searching through the medical records but who is not authorized to review certain parts of medical records from gaining access to the restricted data. In this way the data processing employed by the firmware can not only employ query specified data processing but also additional ancillary data processing operations such as entitlement filtering or other security controls encryption decryption see for example the encryption decryption techniques described in the above referenced and incorporated U.S. Patent Application Publication 2007 0237327 or other data processing operations that support the query specified data processing operation.

It should also be noted that the query handling technique of using structured data to identify a subset of unstructured data that is to be analyzed using a coprocessor can also be applied in situations where the structured data and the unstructured data are located in the same data store. Exemplary embodiments for this are shown in . It may be the case that a relational database table includes columns of unstructured data. An example of this might arise in a relational database which stores call center records. Structured fields of call center data may identify the date a call was received the caller s name and telephone number and the name of the call center agent who took the call. These records may also include an unstructured data field that contains free form text of the call center agent s notes about the caller s call. Using the techniques described herein a query can directed to appliance see that seeks to find all call records between Jan. 1 2008 and Jan. 31 2008 wherein the call notes contain the word refund . The structured data columns can be accessed by API to identify the subset of call records where the call date was during January 2008. Thereafter all of the call records in the identified subset or at least all of the unstructured columns in the call records for the identified subset can be streamed through coprocessor to identify those January call records which contain the word refund .

While in the preferred embodiment disclosed herein the coprocessor comprises a reconfigurable logic device such as an

FPGA it should be noted that the coprocessor can be realized using other processing devices. For example the coprocessor may comprise graphics processor units GPUs general purpose graphics processors chip multi processors CMPs dedicated memory devices complex programmable logic devices application specific integrated circuits ASICs and other I O processing components. Moreover it should be noted that appliance may employ a plurality of coprocessors in either or both of a sequential and a parallel multi coprocessor architecture.

While the present invention has been described above in relation to its preferred embodiments various modifications may be made thereto that still fall within the invention s scope. Such modifications to the invention will be recognizable upon review of the teachings herein. Accordingly the full scope of the present invention is to be defined solely by the appended claims and their legal equivalents.

