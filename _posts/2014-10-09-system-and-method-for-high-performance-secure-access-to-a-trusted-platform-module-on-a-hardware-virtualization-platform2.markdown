---

title: System and method for high performance secure access to a trusted platform module on a hardware virtualization platform
abstract: A system and method for high performance secure access to a trusted platform module on a hardware virtualization platform. The virtualization platform including Virtual Machine Monitor (VMM) managed components coupled to the VMM. One of the VMM managed components is a TPM (Trusted Platform Module). The virtualization platform also includes a plurality of Virtual Machines (VMs). Each of the virtual machines includes a guest Operating System (OS), a TPM device driver (TDD), and at least one security application. The VMM creates an intra-partition in memory for each TDD such that other code and information at a same or higher privilege level in the VM cannot access the memory contents of the TDD. The VMM also maps access only from the TDD to a TPM register space specifically designated for the VM requesting access. Contents of the TPM requested by the TDD are stored in an exclusively VMM-managed protected page table that provides hardware-based memory isolation for the TDD.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09608821&OS=09608821&RS=09608821
owner: Intel Corporation
number: 09608821
owner_city: Santa Clara
owner_country: US
publication_date: 20141009
---
This application is a divisional application of U.S. application Ser. No. 13 305 902 entitled System and Method for High Performance Secure Access to a Trusted Platform Module on a Hardware Virtualization Platform which was filed on Nov. 29 2011 and is a divisional application of U.S. application Ser. No. 11 967 683 entitled System and Method for High Performance Secure Access to a Trusted Platform Module on a Hardware Virtualization Platform which was filed on Dec. 31 2007.

This application is related to U.S. patent application Ser. No. 11 395 488 filed on Mar. 30 2006 which is a continuation in part of U.S. patent application Ser. No. 11 173 851 filed on Jun. 30 2005 and Ser. No. 11 322 669 filed on Dec. 30 2005 all of which are assigned to the assignee of the present invention.

The present invention is generally related to platform security. More particularly the present invention is related to a system and method for high performance secure access to a trusted platform module on a hardware virtualization platform.

A Trusted Platform Module TPM is a discreet passive hardware component that exposes a specific set of security functionality or commands to a host platform and operating system OS . The commands can be used to generate derived protected keys stored inside the TPM and sign and or verify data using those derived protected keys. The host platform and OS use a slow serial bus interface to send commands to and obtain results from the TPM. The slow serial bus interface limits the use of the TPM to low performance applications and precludes its use in high performance applications.

While the present invention is described herein with reference to illustrative embodiments for particular applications it should be understood that the invention is not limited thereto. Those skilled in the relevant art s with access to the teachings provided herein will recognize additional modifications applications and embodiments within the scope thereof and additional fields in which embodiments of the present invention would be of significant utility.

Reference in the specification to one embodiment an embodiment or another embodiment of the present invention means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of the phrase in one embodiment or in an embodiment appearing in various places throughout the specification are not necessarily all referring to the same embodiment.

Embodiments of the present invention describe an apparatus and method for achieving high performance access to a Trusted Platform Module TPM in a virtualization technology VT enabled host platform without loss of performance in terms of added virtual device models or loss of security. This is accomplished using a virtualized model that enables a guest OS Operating System or VM Virtual Machine to run a TPM device driver TDD and a VMM Virtual Machine Monitor to create a partition in memory for the TDD in the guest OS such that any other code at the same privilege level in the guest OS cannot access the memory contents of the TPM device driver and to map accesses to the TPM to the correct register set designated for the guest OS. Contents of the TPM requested by the TPM device driver are stored in an exclusively VMM managed protected page table that provides hardware based memory isolation for the TDD.

Embodiments of the present invention preserve the security properties of the TPM even when the contents are outside of the TPM that is stored in the partitioned memory. This enables little direct interaction with the slow interface of the TPM on the part of the security application yet provides high access to the contents of the TPM by accessing a partitioned memory solely dedicated to the TPM device drivers.

Processor s may execute programming instructions of components on platform . Processor s may be single and or multiple core processor s controller s application specific integrated circuit s ASIC s etc.

Trusted Platform Module TPM is a hardware device having cryptographic functionalities that provide a root of trust to a host platform on which it resides such as platform and extends that trust to other parts of the platform by building a chain of trust. TPM provides a set of cryptographic operations that execute in a protected environment. Such operations may include but are not limited to performing encryption decryption computing hash values of small pieces of data generating keys such as for example an Endorsement Key EK i.e. a public private key pair and other types of keys for various security purposes such as for example signing data verifying data etc. The EK is unique for each TPM and the private component of the key pair is generated within TPM and is never exposed outside of TPM thereby enabling TPM to provide the root of trust. TPM is typically accessed using a Low Pin Count LPC bus interface not explicitly shown .

TPM provides a safe place to store information. TPM also stores and reports integrity metrics such as for example the measurement of integrity of BIOS Basic Input Output System code at system startup. TPM includes a set of register space referred to as PCRs Platform Configuration Registers for storing the information and keys. In an embodiment of the present invention the PCR register space is partitioned across multiple VMs such as for example VMs and so that each VM has a true view that is dedicated portion of the PCR register space. In today s TPMs there are thirty two PCRs therefore in an embodiment in which two VMs would need to communicate with the TPM the TPM could be virtualized such that some subset of PCRs would be provided to each VM sixteen each in one embodiment . Although the current TPMs contain thirty two PCRs embodiments of the present invention are not limited to 32 PCRs. In fact embodiments of the present invention may operate with more or less PCRs. For example if the next generation TPM includes more than 32 PCRs there would be more space to allocate across the VMs requiring access to the TPM. If the next generation TPM includes less than 32 PCRs then there would be less space to allocate across the VMs requiring access to the TPM.

Although PCRs are divided amongst the VMs requiring access to the TPM the components inside the TPM that sign or ratify data using certain keys are common across the VMs irrespective of the VM that is making a request. In one embodiment a root key may be derived from the EK for each VM requiring access to the TPM. Other keys may then be derived from the root key for that VM.

NIC enables platform to communicate with other entities over a network not shown . The network may be any type of network such as for example a local area network a metropolitan area network a wide area network an intranet an Internet etc.

In an embodiment storage may represent non volatile storage to store persistent content to be used for the execution of the components on platform such as but not limited to operating system s program files configuration files etc. In an embodiment storage may include stored content which may represent the persistent store of source content for a device driver such as device drivers and . The persistent store of source content may include for example executable code store that may have executable files and or code segments links to other routines such as for example a call to a dynamic linked library DLL a data segment etc.

In embodiments storage may include integrated and or peripheral storage devices such as but not limited to disks and associated drives e.g. magnetic optical universal serial bus USB storage devices and associated ports flash memory ROM Read Only Memory non volatile semiconductor devices etc. In embodiments storage may be a storage resource physically part of platform or it may be accessible by but not necessarily a part of platform . For example storage may be accessed by platform over a network not shown via NIC .

Upon a load request such as for example from a loading agent of guest OS or VMM and or guest OS or may load the stored content from storage into memory as active content for operation of TPM device driver or respectively in the execution environment of VM or respectively.

In an embodiment memory may be volatile storage to provide active content for operation of components on platform . In embodiments memory may include RAM Random Access Memory dynamic RAM DRAM static RAM SRAM synchronous DRAM SDRAM dual data rate RAM DDRRAM etc.

In some embodiments memory may organize content stored therein into a number of groups of memory locations to facilitate virtual memory management. The groups of memory locations may be pages segments or a combination thereof.

A virtual memory utilizing paging may facilitate the emulation of a large logical linear address space with a smaller physical memory page. Thus the execution environment for a VM may provide a virtual execution environment in which the components may operate which may then be mapped into physical pages of memory . Page tables maintained by OS and and or VMM may map the logical linear addresses provided by components of the VMs and to physical address of memory .

In one embodiment TPM device drivers and or portions thereof may be selected for intra partitioning and VMM may identify and partition off portions of TPM device drivers and to control access by OSs and to TPM device drivers and . Partitioned portions may include any portion up to all of the particular component. A partitioned portion may be sequestered either physically or virtually from other components within the same VM such that intra partitioning may facilitate insulation of for example TPM device drivers and from OSs and respectively without requiring that TPM device drivers and operate in an entirely separate VM and respectively with a separate OS. Intra partitioning may also afford TPM device drivers and a level of protection from other components even those of similar or higher privilege levels within VMs and that may be compromised in some manner such as for example by malware critical runtime failures etc. Embodiments of the present invention may provide for this protection while still allowing permitted interactions between TPM device drivers and and other components such as for example the operating systems of VMs and respectively.

Virtual machine monitor VMM allows platform to run multiple guest Operating Systems OSs simultaneously and independently with each Operating System OS having its own isolated environment that is VMs and for software execution. VMM runs directly on top of VT enabled hardware such as for example processor s TPM NIC storage and memory and has full access to all of the resources in platform . VMM may present multiple views of VT hardware to the one or more independently operating VMs and . VMM may be implemented in software hardware firmware and or any combination thereof. VMM may include inter alia a memory manager and a TPM access control module .

Memory manager may be used to create an intra partition between components in the same VM guest OS. For example with regards to VM guest OS memory manager may create an intra partition memory for TPM device driver of VM guest Operating System OS so that any other software applications at the same or higher privilege level will not have access to the memory contents of TPM device driver for that guest OS. This ensures that memory pages allocated for TPM device driver are not accessible to other software applications on VM .

TPM access control module provides partitioning of the Platform Configuration Registers PCRs amongst the VMs that require access to TPM . TPM access control module maps I O input output accesses to a specific PCR register set of TPM based on the specific VM accessing TPM . In one embodiment the VM ID identification may be used as an offset to a register bank. For example when there are two VMs that may need access to TPM wherein TPM has 32 PCRs the first VM referred to as VM may access PCR register set 0 15 and the second VM referred to as VM may access register set 16 31. In one embodiment a Virtual Machine Control Structure VMCS is used to identify the VM. The VMCS structure consists of a VM ID Identification field and an Execution Instruction Pointer EIP field. The VM ID field identifies the VM. The EIP field is a pointer for the corresponding PCR register set.

TPM commands include a field referred to as the locality field. The locality field may identify a mode of operation. For example if the locality field is 0 TPM will know that platform is in the boot up stage or BIOS mode. If the locality field is 1 TPM will know that platform has completed the boot up stage and is now interacting with the operating system or is in the OS mode. This is very important because there are certain operations that are privileged and are only allowed when platform is operating in the BIOS mode versus the OS mode. TPM must be able to discern whether platform is being formatted for the first time or is being accessed after being formatted so that TPM may implement formal security checks. Thus this is the notion of locality. With embodiments of the present invention the notion of locality is extended to provide identification of a VM that is requesting access to the TPM. For example locality 5 may indicate that VM is requesting access to TPM locality 6 may indicate that VM is requesting access to TPM etc. Thus the present invention extends the notion of locality to include identification of a VM requesting access to the TPM without destroying any of the security properties of the platform. TPM access control module may be implemented in hardware software or a combination thereof.

As previously indicated VMs and contain guest Operating Systems Oss that runs on top of VMM . VMs and are configured to execute code such as for example security applications independently with each VM and being securely isolated from the others. In other words the components operating in VM VM and VM may each operate as if they were each running on a dedicated computer rather than a virtual machine. That is components operating in VM VM and VM may each expect to control various events and have complete access to VT hardware . VMM may manage VM access to VT hardware .

In an embodiment VMs and may include security applications . Security applications may include any applications running on platform that require TPM services. TPM device drivers and are APIs Application Programming Interfaces that enable security applications to access TPM . In one embodiment TPM device drivers and may be implemented as a DLL Dynamic Link Library that is linked directly into security applications .

VM may include a VT Integrity Services VIS module to provide security enhancements. VIS module enables host software agents to register themselves for protection with VMM . VM may be configured to execute code independently may be securely isolated from VM and VM and may prevent components of VMs and from performing operations that would alter modify read or otherwise affect the components of VM . VIS module manages memory manager and performs other miscellaneous management functions. While platform shows three VMs other embodiments may employ any number of VMs.

In one embodiment upon a designated event VMM may identify and partition off portions of TPM device drivers and to control access to the partitioned portions by OSs and respectively. In one embodiment a designated event may be when stored content is loaded from storage into memory as active content . In other embodiments other designated events may be additionally or alternatively used.

In this embodiment VMM may also create a protected page table PPT . VMM may copy the page frames having active content such as PF PF into PPT and assign the page table entries PTEs that do not refer to those page frames such as for example 1PTE and 6PTE with access characteristics to cause a page fault upon execution. In various embodiments access characteristics may be not present execute disabled and or read only. In an embodiment access characteristics may be not present or a combination of execute disable and read only to prevent unauthorized modifications to active content from VM . In various embodiments the setting of access characteristics may be done by VMM TPM device driver and or OS .

VMM may assign the PTEs of APT that refer to page frames having partitioned portions of TPM device driver such as 2PTE 4PTE with access characteristics . It may be noted that some page frames such as for example PF may be shared between partitioned and non partitioned elements. Therefore in an embodiment the 5PTE may not have access characteristics set in either APT or PPT .

In this embodiment execution flow between APT and PPT may be managed as follows. Initially CR3 may have value pointing to APT . An execution instruction pointer EIP may start with the 1PTE of APT and upon an attempted access of the 2PTE may cause a page fault due to access characteristics pointing to PPT . The EIP may resume operation at the 2PTE of PPT which may be a partitioned element. The EIP may execute through the 3PTE the 4PTE and the 5PTE. When the EIP attempts to access the 6PTE access characteristics may cause another page fault and VMM may switch CR3 back to value for access to the 6PTE from APT .

In some embodiments VMM may monitor the execution flow between APT and PPT to verify that the points the EIP enters and or exits PPT are as expected. Verification that the EIP jumps into PPT at valid entry points and or jumps out of PPT at valid exit points may facilitate a determination that TPM device driver and or other components in VM are operating correctly. If the entry exit point is not as expected VMM may determine that the access attempt to the partitioned TPM device driver is unauthorized and may raise an exception which in various embodiments could include rejecting the attempted access reporting the rejected access attempt to OS for example by injecting an invalid instruction exception and or causing a halt of OS as controlled by VMM .

In various embodiments the valid entry and or exit points may be predetermined such as for example at the time TPM device driver is compiled and or may be dynamic. A dynamic entry and or exit point may be created such as for example when an interrupt occurs. For example an interrupt may occur when the EIP is at the 3PTE of PPT VMM may gain control verify that the interrupt is authentic and record the EIP value for use as a dynamic exit point. The dynamic exit point may then serve as a valid entry point upon reentry to the partitioned elements of PPT .

In embodiments of the present invention VMM may verify that the element calling the partitioned elements such as for example PF PF is permitted to access them. For example VMM may receive a request from a component to access the partitioned elements. VMM may identify the component reference access permissions associated with the partitioned elements and raise an exception if the access permissions do not permit the identified component to access the partitioned elements.

As previously indicated embodiments of the present invention achieve high performance access to TPM secrets with a virtualized TPM in a VT enabled host platform without loss of performance or loss of security. In embodiments of the present invention TPM is virtualized by letting TPM device drivers and directly discover and access TPM while protecting TPM device drivers and in guest OS and guest OS respectively. Only identified TPM device drivers and may access TPM . At VMM processor locality is provided using VT Integrity Services module to de multiplex accesses to different registers of TPM thereby virtualizing TPM . Thus embodiments of the present invention are achieved by only allowing access to TPM from verified TPM device drivers allowing keys divulged to a TPM device drivers and to be used only when TPM device drivers and are executing enabling that secure handoff of the key is made between TPM device drivers and and other security agents and extending the traditional notion in TPMs of bus locality to processor locality.

Since VMM is being used to partition access to TPM when the system powers on there is a need to measure the system from the bottom up. is a flow diagram describing an exemplary method for platform startup according to an embodiment of the present invention. The invention is not limited to the embodiment described herein with respect to flow diagram . Rather it will be apparent to persons skilled in the relevant art s after reading the teachings provided herein that other functional flow diagrams are within the scope of the invention. The process begins at block where the process immediately proceeds to block .

In block the Read Only Memory or ROM is set up to measure the BIOS Basic Input Ouput System of the system. This is done to ensure that there are no hardware attacks being attempted on the system. In embodiments of the present invention the VMM which is an extension of the BIOS is also measured. The process then proceeds to block .

In block the VMM after being measured loads extension security services such as for example the VT Integrity Services VIS . The VIS performs integrity checks on the TPM device drivers and security agents and manages the memory manager of the VMM. The process then proceeds to block .

In block the VMM loads the guest operating systems programs the TPM access control hardware to partition the TPM registers or PCRs for each guest operating system VM and transfers control to the guest operating systems. The VMM programs the TPM to appear as a device with n PCRs to the OS where n equals the number of PCRs the TPM can support the number of VMs to be supported . In one embodiment the guest OSes are spawned by the VMM and control is then transferred to the VMs. The process then proceeds to block .

In block each guest operating system after discovering the TPM load the programs representing the TPM device driver. The process then proceeds to decision block .

In block the TPM device driver registers with the VT Integrity Services VIS . Each TPM device driver must pass the VIS integrity check so that the platform knows the TPM device driver can be trusted. The process then proceeds to decision block .

In decision block it is determined whether the TPM device driver passed the VIS integrity check. If the TPM device driver did not pass the VIS integrity check then the process proceeds to block .

In block the registration request for the TPM device driver is rejected and the attempt to register the TPM device driver is logged. If there are other guest operating systems to be initialized the process returns to block .

Returning to decision block if the TPM device drivers do pass the VIS integrity check the process proceeds to block . In block a protected page table PPT is created for the TPM device drivers and the TPM device driver data and code is moved into the PPT. If there are other guest operating systems to be initialized the process returns to block .

In block the TPM device driver issues a TPM call to generate a key. The process then proceeds to block .

In decision block it is determined whether the VMexit came from a registered TPM device driver. If the VMexit came from a registered TPM device driver then the process proceeds to block .

In block access to a subset of TPM hardware registers or PCRs to generate the key is allowed. The access is based on a VMCS Virtual Machine Control Structure that enables the proper subset of PCRs to be accessed. The VMCS is a control structure that provides a VM identification ID and an Execution Instruction Pointer which indicates to the VIS that this is actually coming from a registered TPM device driver. Once the proper subset of PCRs is accessed the command to generate the key is executed. Execution of the command provides the key.

Returning to decision block if it is determined that the VMexit did not come from a registered TPM device driver the process proceeds to block . In block access to the TPM hardware registers is denied. In other words no key is provided.

In block the TPM device driver issues a call to the TPM to perform an operation such as for example to sign the data referenced in the command. The process then proceeds to block .

In decision block it is determined whether this is an initial request. If this is an initial request then the process proceeds to decision block .

In decision block it is determined whether the VMexit came from a registered TPM device driver TDD . If it did come from a registered TDD then the process proceeds to block .

Returning to decision block if it did not come from a registered TDD then the process proceeds to block . In block an alert event will occur to indicate that someone is trying to access the TPM without performing a registration. The process then ends.

Returning to decision block if it is determined that this is not an initial request the process proceeds to block . In block the TPM verifies additional authentication data that was provided with the first access. The process then proceeds to block .

In block based on a VMCS Virtual Machine Control Structure access to a subset of TPM hardware HW registers or PCRs is allowed. As previously indicated the VMCS is a control structure that provides the VM identification and the Execution Instruction Pointer which indicates to the VIS that this is actually coming from a registered TPM device driver. The process then proceeds to block .

In block the TPM can perform the requested operation such as for example signing the data referenced in the command. After the command is performed the results are stored in the protected page table PPT so that only the TPM device driver can access this data. The process then proceeds to block .

In decision block it is determined whether the page is available. If the page is not available the process proceeds to block .

In block a page fault occurs because some other software is executing. The process then proceeds to block .

Returning to decision block if it is determined that the page is available the process proceeds to block . In block the TDD or security agent is allowed to the shared data that is running.

When a security agent wishes to interact with the TPM device driver the security agent must register with the VIS. If the integrity check performed by the VIS passes a memory page is shared between the TPM device driver and the security agent.

In block a security agent is scheduled by the operating system. When the security agent code is executed a VMexit is caused due to a page fault and the security agent pages are installed. The security agent is integrity verified. The process then proceeds to block .

In block after the integrity verification the security agent allocates memory pages that are marked as shared with the TPM device driver. The process then proceeds to block .

In block the security agent running in seclusion issues a TPM device driver command to generate a new key for agent usage and provide data that should be signed using this key in the shared page. The call to the TPM device driver causes a page fault. The process then proceeds to block .

In the locality of the program accessing the TPM device driver is captured in a VMM only accessible data structure defined as the VMCS in the TPM access control module. Entry point verification for the TPM device driver is also performed. The process then proceeds to block .

In block the page tables are setup for the TPM device driver code and the TPM device driver code then executes. The process then proceeds to block .

In block the TPM device driver accesses the TPM HW directly causing a VMexit due to code instrumental to causing a VMcall . The process then proceeds to block .

In block the locality of the TPM device driver is verified. The process then proceeds to decision block .

In decision block it is determined whether the correct TPM device driver is executing. If the correct TPM device driver is executing the process proceeds to block .

In block the locality of the security agent is fetched from the TPM access control module to access the specific register set in the TPM for keys specific to the security agent. The process then proceeds to block .

In block the information such as for example an Attestation Identity Key AIK retrieved from the TPM is installed in the TPM device driver pages along with the TPM issued authentication data. The TPM issued authentication data is used for future accesses to the key s . This information is accessible to the TPM device driver code as long as it is executing. If the OS scheduler is run due to a time interrupt the TPM device driver pages containing the AIK or other information issued by the TPM and any computationally related data are removed from the page tables due to the page fault VMexit. The process proceeds to block .

In block the TPM device driver retains the authentication data for future requests to the TPM for access to the AIK or other information. The TPM device driver operates on the security agent provided data using the TPM derived keys. The data is placed in a shared protected page. When the security agent resumes execution the signed data is available but the key is not accessible.

Returning to decision block if it is determined that the correct TPM device driver is not executing the process proceeds to block where the process ends.

At the security agent sends a request to the TPM device driver TDD for TPM services and provides the shared pages to the TPM device driver.

At the TPM device driver sends a TPM command corresponding with the security agent s request for TPM services. Upon sending the command to access the TPM a VMexit occurs. If this is an initial request it is determined whether the VMexit came from a registered TDD. If this is not an initial request then authentication data will need to be verified.

At the TPM verifies the authentication data and based on the VMCS enables access to the respective subset of TPM HW registers or PCRs. The TPM command specific to the security agent is executed if the verification is correct.

At the key is copied into pages accessible only by the TPM device driver code. This enables the TPM device driver to sign data in the shared pages that are accessible to both the security application or agent and the TPM device driver TDD at . The TDD also schedules a callback into the security application so that the security agent may use the data at .

In an alternative embodiment of the present invention the TPM device driver may be implemented as a Dynamic Link Library DLL linked directly into the security application. Using a DLL linked directly into the security application simplifies the runtime process of because the DLL is contained in the protected agent s protected page tables and thus eliminates the need for blocks . When using a DLL linked directly into the security application the key is accessible to the protected agent only up to the point where execution transfers outside the security agent. At that point a page fault triggers a VMexit which removes the pages containing the AIK and any computationally related data from the page tables.

Embodiments of the present invention may be implemented using hardware software or a combination thereof and may be implemented in one or more computer systems as shown in or other processing systems. The techniques described herein may find applicability in any computing consumer electronics or processing environment. The techniques may be implemented in programs executing on programmable machines such as mobile or stationary computers personal digital assistants set top boxes cellular telephones and pagers consumer electronics devices including DVD Digital Video Disc players personal video recorders personal video players satellite receivers stereo receivers cable TV receivers and other electronic devices that may include at least one processor a storage medium accessible by the processor including volatile and non volatile memory and or storage elements at least one input device and one or more output devices. Program code is applied to the data entered using the input device to perform the functions described and to generate output information. The output information may be applied to one or more output devices. One of ordinary skill in the art may appreciate that the invention can be practiced with various system configurations including multiprocessor systems minicomputers mainframe computers independent consumer electronics devices and the like. The invention can also be practiced in distributed computing environments where tasks or portions thereof may be performed by remote processing devices that are linked through a communications network.

Each program may be implemented in a high level procedural or object oriented programming language to communicate with a processing system. However programs may be implemented in assembly or machine language if desired. In any case the language may be compiled or interpreted.

Program instructions may be used to cause a general purpose or special purpose processing system that is programmed with the instructions to perform the operations described herein. Alternatively the operations may be performed by specific hardware components that contain hardwired logic for performing the operations or by any combination of programmed computer components and custom hardware components. The methods described herein may be provided as a computer program product that may include a machine accessible medium having stored thereon instructions that may be used to program a processing system or other electronic device to perform the methods. The term machine accessible medium used herein shall include any medium that is capable of storing or encoding a sequence of instructions for execution by the machine and that cause the machine to perform any one of the methods described herein. The term machine accessible medium shall accordingly include but not be limited to solid state memories optical and magnetic disks and a carrier wave that encodes a data signal. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application module logic and so on as taking an action or causing a result. Such expressions are merely a shorthand way of stating the execution of the software by a processing system to cause the processor to perform an action or produce a result.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined in accordance with the following claims and their equivalents.

