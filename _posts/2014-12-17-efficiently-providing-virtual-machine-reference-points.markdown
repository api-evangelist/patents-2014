---

title: Efficiently providing virtual machine reference points
abstract: Embodiments are directed to establishing efficient virtual machine reference points and to specifying a virtual machine reference point to query incremental changes. In one scenario, a computer system accesses a stable virtual machine checkpoint that includes portions of underlying data stored in data storage, where the checkpoint is associated with a specific point in time. The computer system then queries the data storage to determine data storage identifiers that reference the point in time associated with the checkpoint and stores the determined data storage identifiers as a virtual machine reference point, where each subsequent change to the data storage results in an update to the data storage identifier, so that virtual machine reference point is usable to identify incremental changes from specific points in time on.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430272&OS=09430272&RS=09430272
owner: Microsoft Technology Licensing, LLC
number: 09430272
owner_city: Redmond
owner_country: US
publication_date: 20141217
---
Computing systems have become ubiquitous ranging from small embedded devices to phones and tablets to PCs and backend servers. Each of these computing systems is designed to process software code. The software allows users to perform functions interacting with the hardware provided by the computing system. In some cases these computing systems allow users to establish and run virtual machines. These virtual machines may provide functionality not provided by the host operating system or may comprise a different operating system altogether. In this manner virtual machines may be used to extend the functionality of the computing system. Virtual machines may be backed up on virtual storage devices which themselves may be backed up to physical or virtual storage devices. Virtual machine hosts may also be configured to take snapshots which represent point in time images of the virtual machine. The VM snapshots or checkpoints include CPU state memory state storage state and other information necessary to completely recreate or restore the virtual machine to that point in time.

Embodiments described herein are directed to establishing efficient virtual machine reference points and to specifying a virtual machine reference point to query incremental changes. As used herein virtual machine reference points allow computer systems to identify incremental changes from specific points in time on. For example in one embodiment a computer system accesses a stable virtual machine checkpoint that includes portions of underlying data stored in data storage where the checkpoint is associated with a specific point in time. The computer system then queries the data storage to determine data storage identifiers that reference the point in time associated with the checkpoint and stores the determined data storage identifiers as a virtual machine reference point or virtual machine reference point artifacts where each subsequent change to the data storage results in an update to the data storage identifier so that virtual machine reference point is usable to identify incremental changes from specific points in time on. Virtual machine reference point artifacts allow for cases where a virtual machine has two or more virtual disks. Each virtual disk may have a different identifier for the same point in time and the reference point artifact allows the computer system to associate both of those points in time as a common point. This will be explained further below.

In another embodiment a computer system performs a method for specifying a virtual machine reference point to query incremental changes. The computer system establishes a stable unchanging state within a virtual machine where the stable state is associated with a checkpoint that includes corresponding state data and storage data. The computer system accesses previously generated reference points to identify differences in virtual machine state between the current stable state and a selected past stable point in time. The computer system also replicates the differences in virtual machine state between the current stable state and a selected past stable point in time. The differences may be replicated to a data storage device as an incremental backup or may be used for remote replication or disaster recovery purposes.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Additional features and advantages will be set forth in the description which follows and in part will be apparent to one of ordinary skill in the art from the description or may be learned by the practice of the teachings herein. Features and advantages of embodiments described herein may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. Features of the embodiments described herein will become more fully apparent from the following description and appended claims.

Embodiments described herein are directed to establishing efficient virtual machine reference points and to specifying a virtual machine reference point to query incremental changes. In one embodiment a computer system accesses a stable virtual machine checkpoint that includes portions of underlying data stored in data storage where the checkpoint is associated with a specific point in time. The computer system then queries the data storage to determine data storage identifiers that reference the point in time associated with the checkpoint and stores the determined data storage identifiers as a virtual machine reference point where each subsequent change to the data storage results in an update to the data storage identifier so that virtual machine reference point is usable to identify incremental changes from specific points in time on.

In another embodiment a computer system performs a method for specifying a virtual machine reference point to query incremental changes. The computer system establishes a stable unchanging state within a virtual machine where the stable state is associated with a checkpoint that includes corresponding state data and storage data. The computer system accesses previously generated reference points to identify differences in virtual machine state between the current stable state and a selected past stable point in time. The computer system also replicates the differences in virtual machine state between the current stable state and a selected past stable point in time. The differences may be replicated to a data storage device as an incremental backup or may be used for remote replication or disaster recovery purposes.

The following discussion now refers to a number of methods and method acts that may be performed. It should be noted that although the method acts may be discussed in a certain order or illustrated in a flow chart as occurring in a particular order no particular ordering is necessarily required unless specifically stated or required because an act is dependent on another act being completed prior to the act being performed.

Embodiments described herein may implement various types of computing systems. These computing systems are now increasingly taking a wide variety of forms. Computing systems may for example be handheld devices such as smartphones or feature phones appliances laptop computers wearable devices desktop computers mainframes distributed computing systems or even devices that have not conventionally been considered a computing system. In this description and in the claims the term computing system is defined broadly as including any device or system or combination thereof that includes at least one physical and tangible processor and a physical and tangible memory capable of having thereon computer executable instructions that may be executed by the processor. A computing system may be distributed over a network environment and may include multiple constituent computing systems.

As illustrated in a computing system typically includes at least one processing unit and memory . The memory may be physical system memory which may be volatile non volatile or some combination of the two. The term memory may also be used herein to refer to non volatile mass storage such as physical storage media. If the computing system is distributed the processing memory and or storage capability may be distributed as well.

As used herein the term executable module or executable component can refer to software objects routines or methods that may be executed on the computing system. The different components modules engines and services described herein may be implemented as objects or processes that execute on the computing system e.g. as separate threads .

In the description that follows embodiments are described with reference to acts that are performed by one or more computing systems. If such acts are implemented in software one or more processors of the associated computing system that performs the act direct the operation of the computing system in response to having executed computer executable instructions. For example such computer executable instructions may be embodied on one or more computer readable media that form a computer program product. An example of such an operation involves the manipulation of data. The computer executable instructions and the manipulated data may be stored in the memory of the computing system . Computing system may also contain communication channels that allow the computing system to communicate with other message processors over a wired or wireless network.

Embodiments described herein may comprise or utilize a special purpose or general purpose computer system that includes computer hardware such as for example one or more processors and system memory as discussed in greater detail below. The system memory may be included within the overall memory . The system memory may also be referred to as main memory and includes memory locations that are addressable by the at least one processing unit over a memory bus in which case the address location is asserted on the memory bus itself. System memory has been traditionally volatile but the principles described herein also apply in circumstances in which the system memory is partially or even fully non volatile.

Embodiments within the scope of the present invention also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions and or data structures are computer storage media. Computer readable media that carry computer executable instructions and or data structures are transmission media. Thus by way of example and not limitation embodiments of the invention can comprise at least two distinctly different kinds of computer readable media computer storage media and transmission media.

Computer storage media are physical hardware storage media that store computer executable instructions and or data structures. Physical hardware storage media include computer hardware such as RAM ROM EEPROM solid state drives SSDs flash memory phase change memory PCM optical disk storage magnetic disk storage or other magnetic storage devices or any other hardware storage device s which can be used to store program code in the form of computer executable instructions or data structures which can be accessed and executed by a general purpose or special purpose computer system to implement the disclosed functionality of the invention.

Transmission media can include a network and or data links which can be used to carry program code in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer system. A network is defined as one or more data links that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer system the computer system may view the connection as transmission media. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code in the form of computer executable instructions or data structures can be transferred automatically from transmission media to computer storage media or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a NIC and then eventually transferred to computer system RAM and or to less volatile computer storage media at a computer system. Thus it should be understood that computer storage media can be included in computer system components that also or even primarily utilize transmission media.

Computer executable instructions comprise for example instructions and data which when executed at one or more processors cause a general purpose computer system special purpose computer system or special purpose processing device to perform a certain function or group of functions. Computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code.

Those skilled in the art will appreciate that the principles described herein may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs tablets pagers routers switches and the like. The invention may also be practiced in distributed system environments where local and remote computer systems which are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network both perform tasks. As such in a distributed system environment a computer system may include a plurality of constituent computer systems. In a distributed system environment program modules may be located in both local and remote memory storage devices.

Those skilled in the art will also appreciate that the invention may be practiced in a cloud computing environment. Cloud computing environments may be distributed although this is not required. When distributed cloud computing environments may be distributed internationally within an organization and or have components possessed across multiple organizations. In this description and the following claims cloud computing is defined as a model for enabling on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services . The definition of cloud computing is not limited to any of the other numerous advantages that can be obtained from such a model when properly deployed.

Still further system architectures described herein can include a plurality of independent components that each contribute to the functionality of the system as a whole. This modularity allows for increased flexibility when approaching issues of platform scalability and to this end provides a variety of advantages. System complexity and growth can be managed more easily through the use of smaller scale parts with limited functional scope. Platform fault tolerance is enhanced through the use of these loosely coupled modules. Individual components can be grown incrementally as business needs dictate. Modular development also translates to decreased time to market for new functionality. New functionality can be added or subtracted without impacting the core system.

The computer system of may further include a checkpoint generating module . The checkpoints or snapshots herein generated by module may include various portions of corresponding checkpoint data which may be stored in a data store . The checkpoint data may include for example state data and storage data . The state data may include CPU state memory state and device state for various computer system devices. The storage data may include data files application files operating system files backup files or other data associated with a checkpoint. As such the checkpoint data associated with a checkpoint includes sufficient data to perform a full restoration or backup from the data. The storage and state data for a given computer system or virtual machine however may include a significant amount of data.

In some cases multiple checkpoints may be stored for a single computer system or virtual machine VM . Each checkpoint may be generated at a different point in time. Then once two or more checkpoints have been generated they can be compared to one another to determine the differences between them. These differences can be applied to a differential backup which only backs up the differences between the two checkpoints. Embodiments described herein introduce the concept of a reference point virtual machine reference point or VM reference point . A VM reference point allows previous storage memory and device state associated with a checkpoint to be deleted while still retaining the ability to create the differential backup. This is done by recording sequence numbers for state transitions.

Incremental backups of virtual machines involve tracking those changes to virtual machine storage that have occurred since a previous specified point in time or points in time of the VM. Traditionally a point in time snapshot of a VM is represented by VM checkpoints. As mentioned above storing full checkpoints may introduce a lot of overhead on the I O throughput of the VM as copy on write or similar techniques are often used to maintain a point in time image of the virtual storage. Maintaining VM checkpoints just for the purpose of referring to previous points in time for querying incremental changes is wasteful in terms of resource usage and negatively impacts performance of applications running in a VM.

The VM reference points described herein do not need to maintain exact point in time images of the VM state e.g. storage memory device state . The VM reference points provide a representation of a previous instance in time of the VM. The reference points can be represented by unique identifiers which can be globally unique identifiers GUIDs sequence numbers or other identifiers.

In one embodiment a VM reference point e.g. of is generated in the following manner First a point in time image checkpoint is generated for a VM. This provides a stable copy to back up from. Along with creation of this image a mechanism to track changes to the virtual storage is triggered. The triggering mechanism may be based on user interaction input from an application or other source or can be a manual trigger. Second once the computer system or VM is backed up the checkpoint is converted demoted to a reference point i.e. just a point in time representation that is not backed up by corresponding machine state . This frees up the overhead associated with a checkpoint while allowing tracking of the point in time that was last backed up. Third during the next backup a user may specify the reference point to query the incremental changes to the VM that occurred since the specified point in time.

The VM reference point includes minimal metadata which enables querying incremental changes to the virtual storage devices since the point in time represented by the reference point. An example change tracking technique involves the virtual storage subsystem maintaining a list of changed blocks across discrete points in time represented by sequence numbers. In such a system the VM reference point for that VM would just include the sequence numbers of the virtual storage devices corresponding to that discrete point in time. The sequence numbers would be incremented each time a memory register changes. As the sequence numbers correspond to a point in time for a checkpoint when data is written to disk the sequence number is increased for each memory block that is written to. At least in some embodiments the sequence numbers are the only thing stored in the VM reference point.

When a VM checkpoint e.g. is converted to a VM reference point e.g. the system releases all or substantially all of the resources that have been used to maintain a point in time image of the VM checkpoint. For instance in one scenario the system can free up the differencing virtual hard disks used to maintain the point in time image of a checkpoint eliminating the overhead of performing I O on a differencing virtual hard disk VHD . This overhead VM state data is replaced by a metadata about the reference point. The reference point metadata only contains identifiers e.g. sequence numbers corresponding to the points in time for the virtual hard disks. This enables the reference point to be used later to query the incremental changes from this point in time.

As such in once the checkpoint generating module has generated a checkpoint for a physical or virtual computer system the query generating module generates a query to identify which data storage identifiers reference the point in time associated with checkpoint . These data storage identifiers are sent to the computer system and implemented by the VM reference point generating module to generate a VM reference point . It should be understood here that the data store may be internal to or external to computer system and may include a single storage device e.g. a hard disk or an optical disk or may include many storage devices and indeed may include storage networks such as cloud storage networks. Thus the data transfers for the query and the data storage identifiers may be internal e.g. over hardware buses or may be external over a computer network.

The VM reference point thus includes those data storage identifiers that point to a specific point in time. Each subsequent change to the data storage results in an update to the data storage identifier. As such the virtual machine reference point is usable to identify incremental changes from specific points in time on. These concepts will be explained further below with regard to methods and of respectively as well as the embodiments illustrated in .

In view of the systems and architectures described above methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . For purposes of simplicity of explanation the methodologies are shown and described as a series of blocks. However it should be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Method includes accessing a stable virtual machine checkpoint that includes one or more portions of underlying data stored in data storage the checkpoint being associated with a specific point in time . For example checkpoint accessing module may access checkpoint . The checkpoint may be generated based on a running computer system or virtual machine. The checkpoint may include operating system files application files registry files data files or any other type of data including data currently stored in RAM or other memory areas. The checkpoint thus has different state data and storage data in its underlying checkpoint data . The checkpoint data may be stored in data store or in some other data store. The data store may include optical storage solid state storage magnetic storage or any other type of data storing hardware.

Method next includes querying the data storage to determine one or more data storage identifiers that reference the point in time associated with the checkpoint and storing the determined data storage identifiers as a virtual machine reference point wherein each subsequent change to the data storage results in an update to the data storage identifier such that virtual machine reference point is usable to identify incremental changes from specific points in time on . For example the query generating module may generate query which queries the data store to determine which data storage identifiers reference the point in time associated with the checkpoint . These data storage identifiers are then stored as a virtual machine reference point . The VM reference point generating module may thus access an existing checkpoint and demote it or convert it down from a checkpoint that is fully backed by state data and storage data to a VM reference point that includes only identifiers. In some cases these identifiers may simply be sequence numbers of a storage device. There may be multiple data storage identifiers for a single disk or only a data storage identifier for a disk. These concepts may be better understood with a reference to computing architecture of . It will be understood however that the example shown in is only one embodiment and that many different embodiments may be implemented.

Portions of the raw data may be currently in memory and other portions may be on disk . Since no changes have been made since the full backup the memory and disk are empty. When changes are made those changes appear in the raw data . This could be analogous of any change to a data file operating system file or other data on the physical or virtual machine. Memory blocks in memory that include updated data may be marked with a 1 or other changed block data identifiers . Again it will be understood that while sequential numbers are used as identifiers in this example substantially any type of identifiers may be used including user selected names GUIDs bitmaps or other identifiers. These identifiers are associated with a point in time. Then using this point in time virtual machine reference points may be used to identify incremental changes that point in time on.

If additional changes that are made to the raw data at a later point in time the memory and on disk identifiers would indicate that new changes have occurred. The identifier e.g. 1 indicates that the block of memory changed at the first point in time and a 2 may indicate that the block of memory has changed at the second point in time. If a block of memory includes a 1 2 identifier that may indicate that that block of memory changes at both the first point in time and the second point in time. If a power failure were to occur at this point the data on disk would likely be saved while anything in memory e.g. in RAM would be lost.

If a backup were to be performed at this stage in light of the power failure the raw data would be backed up as a differential and would include all of the data in the changed data block at the second point in time as indicated by identifier 2 . As such the differential would include the data changes that have occurred since the full backup and a full merged backup would include the differential combined with the full backup . The reference point does not need to maintain an exact point in time image of the physical or virtual machine state e.g. storage memory device state . It is just a representation of a previous instance in time of the physical or virtual machine. Using this VM reference point data backups can be performed data migrations can be performed data recovery and other data related tasks can be performed.

In some embodiments the state management module of may be used to establish at a current time a stable unchanging state within the virtual machine. The stable unchanging state means that all appropriate buffers have been cleared that no transactions are pending and that the state is not subject to change. The stable state may be established by performing any of the following buffering subsequent data changes within the virtual machine implementing temporary copy on write for subsequent data changes within the virtual machine and generating a checkpoint for the virtual machine that includes one or more portions of underlying data.

This stable state is then associated with a virtual machine reference point that includes data storage identifiers corresponding to specific stable points in time such as the current point in time . The computer system may then access previously generated virtual machine reference points to identify differences in virtual machine state between the current stable state and a selected past stable point in time and perform at least one operation using data identified by the stored data storage identifiers and the current data storage identifiers . As mentioned above these data related tasks may include backing data up restoring data replicating data and providing data to a user or other specified entity such as a third party service or client.

The data identified by the stored data storage identifiers as well as the current data storage identifiers may be combined with a previously generated checkpoint initial backup where data storage identifiers are used to combine data identified by the stored data storage identifiers and the initial backup . In this manner a differential backup may be provided simply using data storage identifiers to update state changes.

In some embodiments application programming interfaces APIs may be provided which allow third parties to store data storage identifiers as virtual machine reference points. In this manner VM reference point functionality may be extended to third parties in a uniform fashion. These VM reference points may refer to full backups as well as incremental backups. Using these APIs multiple vendors may perform data backups simultaneously. Each VM reference point e.g. comprises metadata that includes the data storage identifiers . As such the virtual machine reference point is lightweight and is not backed by checkpoint data including data storage memory or virtual machine state. In some cases the VM reference point may be converted from a checkpoint and as such may go from having data storage memory or virtual machine state as a checkpoint to having only metadata that includes data storage identifiers.

In some cases a data backed checkpoint may be reconstructed using changes identified between the virtual machine reference point and a future point in time. For instance the computer system may use a VM reference point plus a change log with pure metadata that describes what changed not the data itself to create full checkpoint by fetching data from service that is monitoring changes. Still further at least in some cases if a virtual machine is migrated the virtual machine reference point information may be transferred along with the VM. As such if the virtual machine is moved to a different computing system the data identified by the virtual machine reference point is recoverable at the new computing system. Accordingly various embodiments are described in which a VM reference point may be created and used to back up data.

Method includes establishing a stable unchanging state within a virtual machine the stable state being associated with a checkpoint that includes corresponding state data and storage data . For example the state management module of may establish a stable unchanging state within a virtual machine. The stable state may be associated with checkpoint which includes corresponding state data and storage data . The stable state may be established by buffering any subsequent data changes within the virtual machine by implementing temporary copy on write for subsequent data changes within the virtual machine so that all subsequent data changes are stored and or by generating a checkpoint for the virtual machine that includes underlying checkpoint data .

Method further includes accessing one or more previously generated reference points to identify one or more differences in virtual machine state between the current stable state and a selected past stable point in time and replicating the differences in virtual machine state between the current stable state and a selected past stable point in time . The computer system may be configured to access VM reference points to identify differences in VM state between the established stable state and another stable point in time as identified by the data storage identifiers of the VM reference point. The replication module of computer system may then replicate the identified differences between the current stable state and the selected past stable point in time. These replicated differences may form an incremental backup. This incremental backup may be used for remote replication disaster recovery or other purposes.

In some embodiments the computer system may be configured to buffer any data changes that occur while the differences in virtual machine state are determined. Then once the differences in VM state have been determined the differences can be merged with the buffered data into a live virtual machine state that includes data backed up from the selected point in time. This allows a user to select substantially any past stable point in time since the creation of a checkpoint and determine the state at that point and merge it with current state to form a live virtual machine that includes data backed up from the selected point in time. The selected past stable point in time may thus include any available previous stable point in time represented by a virtual machine reference point it does not have to be the immediately previous reference point.

A differencing virtual hard drive may be configured to keep track of the data changes that occur while the differences in virtual machine state are determined. It should also be noted that the establishing accessing and replicating steps and of Method may each continue operating during storage operations including during the creation of a checkpoint. Thus while live storage operations are being performed embodiments herein may still establish a stable state access a previously generated checkpoint and replicate differences in VM state between a current state and a selected past stable state.

In the embodiment described above with reference to sequence numbers are used as data storage identifiers. In some cases where sequence numbers are used in this manner separate sequence numbers may be assigned to each physical or virtual disk that is associated with the virtual machine. As such reference points may be created for multiple disks including disks that are out of synch. The resilient change tracking understands the sequence numbers and can create usable VM reference points for many disks simultaneously. Each VM reference point has the sequence numbers that refer to the changes made for that disk. For multiple disks that are out of synch e.g. added at different times each disk may have its own sequence reference numbers but the VM reference point tracks sequence numbers for all disks of a VM. Any data associated with a checkpoint may be moved to recovery storage so that the data does not have to sit on the production server. This reduces load on the production server and increases its ability to more efficiently process data.

In one embodiment a computer system is provided which includes at least one processor. The computer system performs a computer implemented method for establishing efficient virtual machine reference points where the method includes the following accessing a stable virtual machine checkpoint that includes one or more portions of underlying data stored in data storage the checkpoint being associated with a specific point in time querying the data storage to determine one or more data storage identifiers that reference the point in time associated with the checkpoint and storing the determined data storage identifiers as a virtual machine reference point wherein each subsequent change to the data storage results in an update to the data storage identifier such that virtual machine reference point is usable to identify incremental changes from specific points in time on.

The method further includes establishing at a current time a stable unchanging state within the virtual machine the stable state being associated with a virtual machine reference point that includes one or more data storage identifiers corresponding to specific stable points in time accessing one or more previously generated virtual machine reference points to identify one or more differences in virtual machine state between the current stable state and a selected past stable point in time and performing at least one operation using data identified by the stored data storage identifiers and the current data storage identifiers.

In some cases the at least one operation includes one or more of the following backing data up restoring data replicating data and providing data to a user or other specified entity. The data identified by the stored data storage identifiers and the current data storage identifiers is combined with a previously generated checkpoint. The stable state is established by performing at least one of the following buffering subsequent data changes within the virtual machine implementing temporary copy on write for subsequent data changes within the virtual machine and generating a checkpoint for the virtual machine that includes one or more portions of underlying data.

In some cases one or more provided application programming interfaces APIs allow multiple different third parties to store data storage identifiers as virtual machine reference points. The virtual machine reference point includes metadata that includes the data storage identifiers such that the virtual machine reference point is lightweight and is not backed by checkpoint data including data storage memory or virtual machine state. A virtual machine checkpoint that includes data storage memory and virtual machine state is converted to a virtual machine reference point that solely includes metadata. Furthermore a data backed checkpoint is reconstructed using one or more identified changes between the virtual machine reference point and a future point in time.

In another embodiment a computer system is provided which includes at least one processor. The computer system performs a computer implemented method for specifying a virtual machine reference point to query incremental changes where the method includes the following establishing a stable unchanging state within a virtual machine the stable state being associated with a checkpoint that includes corresponding state data and storage data accessing one or more previously generated reference points to identify one or more differences in virtual machine state between the current stable state and a selected past stable point in time and replicating the differences in virtual machine state between the current stable state and a selected past stable point in time.

In some cases the selected past stable point in time comprises any available previous stable point in time represented by a virtual machine reference point. Still further a differencing virtual hard drive keeps track of the data changes that occur while the differences in virtual machine state are determined. The data storage identifiers comprise sequence numbers which are incremented each time a memory register changes.

In still another embodiment a computer system is provided which includes the following one or more processors a checkpoint accessing module for accessing a stable virtual machine checkpoint that includes one or more portions of underlying data stored in data storage the checkpoint being associated with a specific point in time a query generating module for generating a query that queries the data storage to determine one or more data storage identifiers that reference the point in time associated with the checkpoint and a virtual machine reference point generating module for storing the determined data storage identifiers as a virtual machine reference point wherein each subsequent change to the data storage results in an update to the data storage identifier such that virtual machine reference point is usable to identify incremental changes from specific points in time on. Virtual machine reference point information is transferred along with the virtual machine such that if the virtual machine is moved to a different computing system the data identified by the virtual machine reference point is recoverable.

Accordingly methods systems and computer program products are provided which establish efficient virtual machine reference points. Moreover methods systems and computer program products are provided which specify a virtual machine reference point to query incremental changes.

The concepts and features described herein may be embodied in other specific forms without departing from their spirit or descriptive characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the disclosure is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

