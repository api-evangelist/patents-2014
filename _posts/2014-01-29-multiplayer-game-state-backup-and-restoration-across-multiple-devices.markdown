---

title: Multi-player game state backup and restoration across multiple devices
abstract: Technology for a method for backing up and restoring multiplayer game state across multiple devices that are registered to multiple users is disclosed herein. The method includes running instances of a multiplayer game application at multiple electronic devices, determining a backup event that occurs in any of the multiple electronic devices, wherein the backup event suggests a backup of game state data and the game state data represent a game state of the game application at the backup event, and transmitting the game state data of the game application to a remote storage service, in response to the backup event. Other electronic devices registered to any of the multiple users can retrieve the application state data from the remote storage service and restore the game application state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08747232&OS=08747232&RS=08747232
owner: Nextbit Systems Inc.
number: 08747232
owner_city: San Francisco
owner_country: US
publication_date: 20140129
---
This application is a continuation of U.S. patent application Ser. No. 14 043 034 entitled APPLICATION STATE BACKUP AND RESTORATION ACROSS MULTIPLE DEVICES which was filed on Oct. 1 2013 which is a continuation in part of U.S. patent application Ser. No. 13 772 163 entitled APPLICATION STATE SYNCHRONIZATION ACROSS MULTIPLE DEVICES which was filed on Feb. 20 2013 which claims the benefit of U.S. Provisional Patent Application No. 61 708 794 entitled CLOUD COMPUTING INTEGRATED OPERATING SYSTEM which was filed on Oct. 2 2012 all of which are incorporated by reference herein in its entirety.

At least one embodiment of the present invention pertains to cloud computing and more particularly to automatic backup and restoration of application states across multiple devices using cloud storage.

Application state data are data used to record the running status of a computer application. One example of application state data is a game save for a game application. A game save is a piece of digitally stored information about the progress of a user operating the game application. The game save can be reloaded later so that the user can continue where he stopped. The user instructs the game application to generate a game save i.e. save the game to prevent the loss of progress in the game especially when he is interrupted or ending a game session.

Sharing and backing up game saves among users have been common for many years. Originally by swapping memory cards with game saves users could help each other to unlock features in a game application. With the growing popularity of the Internet users start to upload their game saves from their devices to Internet servers. By downloading a game save from an Internet server a user can continue the progress of the game on the device on which he played the game or another device such as a computer game console or smart phone. However to achieve the goal of continuing the progress on another device the user needs to deliberately instruct the device to save the game progress i.e. game save and to upload the game save to a server or a memory card. Then the user needs to download the game from the server or the memory card to the other device and then instructs the other device to load the game save. The whole process is tedious and requires many user interventions. Furthermore the process only works for game applications that are specifically designed with game saving functionalities.

Techniques introduced here provide an automatic mechanism for backing up and restoring application state across multiple devices. In accordance with the techniques introduced here a method includes running an instance of a computer application at a first electronic device and determining a backup event that occurs in the first electronic device. The backup event suggests a backup of application state data and the application state data represent an application state of the computer application at the backup event. The method further includes transmitting the application state data of the computer application to a remote storage service in response to the backup event. Another electronic device can retrieve the application state data of the computer application from the remote storage service and restore the computer application to the application state using the application state data.

The backup proceeds automatically on the background of the operating system of the device and is transparent to the user as well as the application. The user can restore the application state of the application running on the same device or on another device at where the state of the application has been backed up. The application state backup and restore can be achieved at the operating system level of the devices. There is no special treatment or design needed for the computer application itself. Any computer application capable of running on such an operating system can take advantage of the application state backup and restore functionality.

Other aspects of the technology introduced here will be apparent from the accompanying figures and from the detailed description which follows.

References in this specification to an embodiment one embodiment or the like mean that the particular feature structure or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not all necessarily refer to the same embodiment however.

A method of application state synchronization across devices is described herein. For example a user plays a game on his smart phone and stops playing and turns off the screen of his smart phone. The state of the game application is synchronized between his smart phone and other electronic devices via a cloud system. He can pick up his tablet computer and continue to play the game from where he left off. The synchronization is not necessarily directly triggered by a user intervention. For instance the synchronization can be automatically triggered when the screen of the smart phone is turned off or the user closes the game on his smart phone. The synchronization proceeds automatically on the background and is transparent to the user. Furthermore the cloud system can analyze various information including device profile user profile and user history to determine state of which application is to be synchronized and which device the state is synchronized to.

A cloud synchronization interface can also be included to receive data to be stored in the cloud storage service. The cloud synchronization interface can include network communication hardware and network connection logic to receive the information from electronic devices. The network can be a local area network LAN wide area network WAN or the Internet. The cloud synchronization interface may include a queuing mechanism to organize the received synchronization data to be stored in the cloud storage service . The cloud synchronization interface can communicate with the cloud storage service to send requests to the cloud storage service for storing application state data and retrieving data.

An electronic device includes an operating system to manage the hardware resources of the electronic device and provide services for running computer applications . The computer application stored in the electronic device require the operating system to properly run on the device . The electronic device can backup application states of the computer applications to the cloud storage service . The electronic device includes at least one local storage device to store the computer applications application data and user data. The electronic device can synchronize the application state data with the cloud storage service via the cloud synchronization interface . The electronic device or can be a desktop computer a laptop computer a tablet computer an automobile computer a game console a smart phone a personal digital assistant or other electronic devices capable of running computer applications as contemplated by a person having ordinary skill in the art.

The computer applications stored in the electronic device can include applications for general productivity and information retrieval including email calendar contacts and stock market and weather information. The computer applications can also include applications in other categories such as mobile games factory automation GPS and location based services banking order tracking ticket purchases or any other categories as contemplated by a person having ordinary skill in the art.

The operating system of the electronic device includes a state synchronization module to backup application state information from the local storage. The state synchronization module can operate to keep the application state data from the electronic device in synchronization with the cloud storage service and other devices.

Similarly another electronic device can also synchronize the application state with the cloud storage service . The electronic devices and can synchronize the application states between each other via the cloud storage service . For instance the electronic device can synchronize the application state of a computer application to the cloud storage service . The cloud storage service communicates with the electronic device to know that the electronic device also contain this computer application and the application state of this computer application is not updated on the electronic device . In turn the cloud storage service sends the application state data to the electronic device . Thus the application state of this computer application is synchronized between the electronic devices and .

In one embodiment the synchronization for backups from the electronic devices and to the cloud storage service may take place on a configurable periodic basis such as an hour or a day. In other words the synchronization is scheduled to take place on a periodic basis. The scheduled synchronization can also check for updates that can be sent from the cloud storage service to the electronic devices and .

Another type of synchronization can be a triggered when an event occurs on the electronic device or and then the state synchronization module can initialize the application state data synchronization with the cloud storage service . The triggered synchronization does not need the intervention from the user. For instance a user turns off the screen of the electronic device . The screen turning off event can trigger an application state data synchronization with the cloud storage service as well as other electronic devices. However the user does not need to specifically instruct the device to synchronize the user does not even need to realize that the synchronization occurs.

In one embodiment the backup event can be any of the following events the screen of the electronic device being turned off the instance of the computer application being closed the instance of the computer application being paused the instance of the computer application having been run continuously for a preconfigured period of time the instance of the computer application being switched by another application the instance of the computer application being switched from the foreground to a background of the operating system a battery level of the electronic device being below a preconfigured value the electronic device turning off the electronic device switching to standby mode a clock of the electronic device reaching a preconfigured time of day and the electronic device being in a preconfigured location

In one embodiment the synchronization can be a delta synchronization where the electronic device or detects a change i.e. delta of application state data and only the changed data or difference are synchronized to the cloud storage device .

Any electronic device running an operating system having the state synchronization module can initialize the application state synchronization. In addition the cloud storage service can also initialize the application state synchronization. In one embodiment the cloud storage service may analyze the electronic devices to determine which device is to be synchronized and state data of which application are to be synchronized.

At step a backup event is determined to occur at the electronic device. The operating system of the electronic device automatically determines the backup event without the intervention from the user. The user does not specifically instruct the backup event. The user does not even need to realize the backup event. There is no need for a sync button a sync gesture a sync menu item or a sync command. In other words the operating system of the device makes the determination of a backup event. For instance the operating system may recognize an event of the screen being turned off as a backup event. The operating system may also recognize an event of a running application being closed or being switched by another application as a backup event. The operating system may further recognize an event of a system standby as a backup event. The operating system of the device can determine other types of backup events as contemplated by a person having ordinary skill in the art.

Once the operating detects a backup event the operating system of both electronic devices uploads the game state data of the computer application onto the cloud storage system at step . The operating systems of the devices may decide to immediately start uploading the game state data after the backup event or start the upload a certain amount of time after the backup event. For instance if the electronic devices detect that there are electronic devices registered to either user of the two users in a very close proximity the operating system of the device may decide to start the upload immediately because of a high possibility that either user of the two users will start using the other device soon. In another embodiment the electronic devices may decide to start the upload at a certain time of day or at certain location. For instance the electronic devices may decide to start the upload at midnight 12 AM and at the user s home determined by GPS location or WiFi location so that the upload of the application state data does not intervene with normal operation of the devices.

In one embodiment the developer of the computer application does not need to specifically write any implementation for uploading the application state data. For example there are no API calls embedded in the computer application for the application state data. The state synchronization module of the operating system is responsible for monitoring collecting and uploading the application state data. In some embodiments the state synchronization module compares the current application state on the device and the application state already stored in the cloud storage service. If the current application state is newer than the application state stored in the cloud storage service the state synchronization module determines a difference i.e. delta between the current application state data and the application state data stored in the cloud storage service. In this way the state synchronization module only needs to upload the difference to the cloud storage service. The cloud storage service is responsible for incorporating the difference into the application state data already stored.

At step the cloud storage system performs an analysis on the devices profile users profile and users history to determine which devices the state is synchronized to. For instance in one embodiment the cloud storage system determines the devices that both users are using e.g. the devices which have established the two users account . In another embodiment the analysis is based on usage pattern. For example the cloud storage service can determine to synchronize the application state to devices that the users have been frequently used during a specific time period e.g. a week. Or the cloud storage service can determine to synchronize the application state to devices on which the users have been running that computer application. In yet another embodiment the analysis is based on a proximity algorithm. For example the cloud storage service can determine to synchronize the application state to devices that are physically close to the devices in step . The proximity may be determined by GPS locations WiFi network locations cellular networking locations or the combination thereof. In still another embodiment the analysis is based on the types of applications installed on the devices. For example the cloud storage service can determine to synchronize the application state to devices that have instances of that application installed or devices that have similar applications installed. Furthermore the analysis can be determined by a combination of the above techniques as well as any other device or user information as contemplated by a person having ordinary skill in the art.

The same types of analysis disclosed in the previous paragraph are used in determining the priority of synchronization. For instance if there are application state data for multiple applications in the cloud storage service to be synchronized. The cloud storage service may determine to synchronize the state data for one application because the user has been frequently using that application during a recent time period e.g. a week. In one embodiment the cloud storage service decides a priority list including a reference to the application state data for the computer application wherein the priority list regulates the order of transmitting the application state data for the computer application and data for other applications based on the analyzing of the user profile and the hardware profiles of electronic devices.

In some embodiments the analysis is performed after the cloud storage system receives application state data from a device. In some other embodiments the analysis can be performed before the cloud storage system receives any application state data or before the backup event occurs.

At step the cloud storage system sends the game state data to one or more devices that are identified by the analysis. The identified devices receive the game state data. Therefore the instances of the game running on the devices are synchronized with the most up to date state. Users can run an instance of the application on any of these devices and the instance of the application resumes from the most up to date state. In one embodiment the cloud storage system further sends an instruction to each of the identified devices to run an instance of the computer application by resuming the game state at the backup event at step .

In one embodiment the application state data of a computer application may include application memory data application local storage data hardware configuration data and user account configuration data. The state synchronization module of the operating system is capable of collecting these data and uploading the data as included in the application state data to the cloud storage service. Based on the application state data an operating system of another electronic device can recreate the same environment and status of the application on the other electronic device.

In some embodiments the electronic devices are capable of synchronizing application state data between each other via a network such as a WiFi network Bluetooth network or a cellular phone network. Each of the electronic devices contains a network component configured to directly synchronize the application state data with another electronic device.

In another embodiment a game application is executed at a first electronic device and a second electronic device. The game application is a multiplayer game application. The first electronic device is registered to a first user and the second electronic device is registered to a second user. The first user plays against the second user.

After a sync event is detected the first electronic device and the second electronic device transmits state data of the game application to a storage server in response to the sync event. The transmission can be done via a network. A third device connected with the storage system can be detected and can be verified that the third device has the game application installed. The storage server can send the state data of the game application to the third device and an instance of the game application can be initialized at the third device by resuming game application state recorded in synchronized state data of the game application.

A state synchronization module runs on top of the kernel . The state synchronization module monitors the information from the intervening sources of the kernel and records state data according the information. In the example of a computer application includes a binary executable code that can run on top of the operating system . The computer application can further include static and dynamic libraries that are referenced by the binary executable code during application running. In one embodiment the state synchronization module runs in a user space file system e.g. FUSE on top of a Linux kernel. In another embodiment the state synchronization module runs in a kernel file system.

The application state data may further include hardware configuration data . For instance the state synchronization module may record the current device sound volume level and the screen brightness level when the application is running. These device sound volume level and the screen brightness level are recorded as part of the hardware configuration data and will be uploaded to the cloud storage service. Therefore after another device is synchronized with the application state data and starts to resume running the application the other device automatically adjusts the sound volume level and screen brightness level as on the previous device. Moreover the application state data may include user account configuration data . The user account configuration data may include the user s preferences and choices regarding the computer application and the operating system environment for running the computer application. For instance the user account configuration data may include information about the user s language preference. Assuming the computer application is a game supporting both English and Chinese languages for user interface in the game the user has selected the English language as the preferred language. The state synchronization module records the user s language preference as a part of the user account configuration data . The user account configuration data is synchronized to another device via the cloud storage service. When the other device starts to resume running the application the application will use the English language for the game interface as indicated by the user account configuration data .

In some embodiments a user can define a synchronization scheme to control the way how and when the synchronization process performs. illustrates an example of an application state synchronization process based on a user defined synchronization scheme. At step a cloud storage service receives an instruction of a synchronization scheme from a user. The synchronization scheme includes rules of how and when the synchronization process performs. For example in one embodiment the synchronization scheme can define a synchronization rule between two electronic devices a smart phone and a tablet computer for application state of a game application. The synchronization rule specifies that one of the electronic devices start attempting to synchronize application state to the other device as soon as the game application is closed or the screen of the device being turned off.

Assuming the smart phone is the current device running the game application at step the operating system of the smart phone checks whether the game application is closed by the user. If the game application is closed the process continues to step . Otherwise at step the operating system of the smart phone continues to check whether the screen of the smart phone is turned off. If the screen is turned off the process continues to step . Otherwise the process goes back to check the status as in steps and in a predetermined time period.

At step the smart phone uploads application state data of the game application to the cloud storage system. The schedule of the uploading can depend on a type and a speed of a connection between the smart phone and the cloud storage system. For instance the schedule can be determined so that the uploading is delayed to use a WiFi connection to avoid the uploading using a cellular data connection e.g. 3G or LTE . At step the cloud storage system reads the synchronization scheme defined by the user. At step the cloud storage system checks whether the other device i.e. the tablet computer is currently being connected with the cloud storage system. If the tablet computer is connected with the cloud storage system the system sends the application state data to the tablet computer according to the synchronization scheme at . Otherwise the cloud storage system continues to check the connection with the tablet computer on a periodic basis.

At step when the user starts to use the tablet computer the tablet computer starts to run an instance of the game application by resuming the application state recorded in the synchronized application state data.

In some embodiments an electronic device can automatically back up the application state data to a cloud storage service and restore the application state be retrieving the application state data from the cloud storage service. illustrates an example of an application backup and restore process. At step an first electronic device runs an instance of a computer application. At step the first electronic device determines a backup event that occurs in the first electronic device. The backup event suggests a backup of application state data and the application state data represent an application state of the computer application at the backup event. The backup event can be automatic and does not need to be instructed by a user who is operating the instance of the computer application.

At step the first electronic device transmits the application state data of the computer application to a remote storage service in response to the backup event. The remote storage service can be a cloud computing service. Alternatively the remote storage service can belong to a cloud storage service cluster. The first electronic device is capable of transmitting the application state data to the remote storage service via a network which can include the Internet a WiFi network or a cellular phone network. In one embodiment the first electronic device can immediately transmit the application state data of the computer application to a remote storage service in real time without substantial delay in response to the backup event.

The application state data of the computer application can be transmitted to the remote storage service at a preconfigured time of day or when the first electronic device is at a preconfigured location in response to the backup event. Alternatively the application state data of the computer application can be transmitted to the remote storage service at a schedule depending on a type and a speed of a connection between the first electronic device and the remote storage service in response to the backup event. The schedule can be determined so that the transmitting is delayed to use a WiFi connection to avoid the transmitting using a cellular data connection. The backup can be incremental. For instance a difference between the application state data of the computer application and previously transmitted application state data can be transmitted to a remote storage service in response to the backup event.

In some embodiments the first electronic device may further determine a restore event that occurs in the electronic device wherein the restore event suggests a restore of the application state of the computer application at the second electronic device and instructs the remote storage service to transmit the application state data of the computer application to the second electronic in response to the restore event.

Alternatively a second electronic device can perform the process of restoring the application state. At step the second electronic device determines a restore event that occurs in a second electronic device. The restore event suggests a restore of the application state of the computer application at the second electronic device. At step the second electronic device can further instruct the remote storage service to transmit the application state data of the computer application to the second electronic device in response to the restore event. At step the second electronic device restores the computer application to the application state using the application state data.

The processor s is are the central processing unit CPU of the server and thus control the overall operation of the server . In certain embodiments the processor s accomplish this by executing software or firmware stored in memory . The processor s may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs trusted platform modules TPMs or the like or a combination of such devices.

The memory is or includes the main memory of the server . The memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. In use the memory may contain a code containing instructions according to the techniques disclosed herein.

Also connected to the processor s through the interconnect are a network adapter and a storage adapter . The network adapter provides the server with the ability to communicate with remote devices over a network and may be for example an Ethernet adapter or Fibre Channel adapter. The network adapter may also provide the server with the ability to communicate with other computers. The storage adapter allows the server to access a persistent storage and may be for example a Fibre Channel adapter or SCSI adapter.

The code stored in memory may be implemented as software and or firmware to program the processor s to carry out actions described above. In certain embodiments such software or firmware may be initially provided to the server by downloading it from a remote system through the server e.g. via network adapter .

The techniques introduced herein can be implemented by for example programmable circuitry e.g. one or more microprocessors programmed with software and or firmware or entirely in special purpose hardwired circuitry or in a combination of such forms. Special purpose hardwired circuitry may be in the form of for example one or more application specific integrated circuits ASICs programmable logic devices PLDs field programmable gate arrays FPGAs etc.

Software or firmware for use in implementing the techniques introduced here may be stored on a machine readable storage medium and may be executed by one or more general purpose or special purpose programmable microprocessors. A machine readable storage medium as the term is used herein includes any mechanism that can store information in a form accessible by a machine a machine may be for example a computer network device cellular phone personal digital assistant PDA manufacturing tool any device with one or more processors etc. . For example a machine accessible storage medium includes recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

The term logic as used herein can include for example programmable circuitry programmed with specific software and or firmware special purpose hardwired circuitry or a combination thereof.

In addition to the above mentioned examples various other modifications and alterations of the invention may be made without departing from the invention. Accordingly the above disclosure is not to be considered as limiting and the appended claims are to be interpreted as encompassing the true spirit and the entire scope of the invention.

