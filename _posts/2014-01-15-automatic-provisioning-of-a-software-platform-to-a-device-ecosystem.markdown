---

title: Automatic provisioning of a software platform to a device ecosystem
abstract: A method for automatically provisioning a platform implementation package to a client device may include receiving from an application executing on the client device, a request for functionality. The request may be received via a client library distributed with the application, and may be for functionality provided by the platform implementation package. The platform implementation package may provide functionality that is not provided by the client library. It may be further automatically determined, by the client device, that the functionality requires an update to the platform implementation package. In response, a request for the update to the platform implementation package may be communicated to a computing system. The update to the platform implementation package may be received from the computing system and installed on the client device. The requested functionality may be provided to the application by the updated platform implementation package.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09417860&OS=09417860&RS=09417860
owner: Google Inc.
number: 09417860
owner_city: Mountain View
owner_country: US
publication_date: 20140115
---
This application is a divisional application of U.S. patent application Ser. No. 13 672 005 filed Nov. 8 2012 now U.S. Pat. No. 8 667 486 the entire contents of which are hereby incorporated by reference.

This application claims the benefit of U.S. Provisional Application Ser. No. 61 664 670 filed on Jun. 26 2012 entitled AUTOMATIC PROVISIONING OF A SOFTWARE PLATFORM TO A DEVICE ECOSYSTEM which is incorporated herein by reference in its entirety.

Aspects of the present application relate generally to the field of data processing. More specifically certain implementations of the present disclosure relate to automatic provisioning of a software platform to a device ecosystem.

With the increased popularity of mobile devices it is often times challenging to create a seamless application developer and user interaction across a diverse set of such mobile devices running different software platform releases. For example if a developer includes developer application programming interfaces APIs in the device software platform itself then the developer experience is fragmented by each platform release having different APIs and capabilities. For example an older version of a mobile device software platform may utilize one method of handling authentication tokens while a subsequent version of the software platform may use a different method. In this regard each application developer then has to implement the specific feature being addressed by a given API multiple times to cover the breadth of available devices working under different software platforms.

Additionally if developer APIs are included in client libraries bundled with applications then those client libraries can be running at different version levels on a single mobile device creating a fragmented user experience since the same feature will be covered by different APIs running under different client library versions. For example a video player may be included as a client library inside applications A and B installed on a mobile device. However application A may have an old version of the client library implementing an older version of the video player with a slightly different user interface than the newer version of the video player that is being implemented by a more recent client library used in application B.

Further limitations and disadvantages of conventional and traditional approaches will become apparent to one of skill in the art through comparison of such approaches with some aspects of the present method and apparatus set forth in the remainder of this disclosure with reference to the drawings.

A system and or method is provided for automatic provisioning of a software platform to a device ecosystem substantially as shown in and or described in connection with at least one of the figures as set forth more completely in the claims.

In accordance with an example embodiment of the disclosure a method for automatically provisioning a platform implementation package to a client device may include receiving at the client device and from an application executing on the client device a request for functionality. The request may be received via a client resident client library distributed with the application. The request may be for functionality provided by the platform implementation package. The platform implementation package may provide functionality that is not provided by the client library. The client device may automatically determine that the functionality requires an install of the platform implementation package or an update to the platform implementation package.

In response to the determining a request for the update to the platform implementation package may be communicated to a computing system. The client device may receive from the computing system the update to the platform implementation package. The update to the platform implementation package may be installed on the client device. The updated platform implementation package may provide the requested functionality to the application. The request for the functionality may be communicated upon initial execution of the application by the client device. The request for the functionality may be communicated after initial execution of the application by the client device. The automatic determining may include determining that the platform implementation package is outdated determining that the platform implementation package is not installed in the client device or determining that the platform implementation package is disabled.

The determining that the platform implementation package is outdated may include performing a version dependency check by comparing a version of the client library with a version of the platform implementation package. Prior to the communicating the client device may display a dialog interface for receiving user confirmation of the request for the update by calling a method in the client library for the displaying of the dialog interface. An update to the client library may be received from the computing system together with the update to the platform implementation package. The request may be received via the client library using inter process communication IPC . The communicating of the request for the update to the platform implementation package to the computing system may be deferred until at least another update is required for at least another application executing on the client device.

In accordance with another example embodiment of the disclosure a method for automatically provisioning a platform implementation package to a client device may include receiving at the client device and from an application executing on the client device a request for functionality. The request may be received via a client resident client library distributed with the application. The request may be for functionality provided by the platform implementation package. The client device may determine whether the platform implementation package performing the functionality requires an update. If the platform implementation package requires an update a request for updating the platform implementation package may be communicated to a computing system. If the platform implementation package requires an update the functionality within the client device may be disabled.

The disabling may take place if the functionality is not required by the application executing on the client device. If the functionality does not require an update the functionality may be performed using the platform implementation package installed on the client device. The functionality provided by the platform implementation package may not provided by the client library. The client library may be a thin client library.

In accordance with yet another example embodiment of the disclosure a method for automatically provisioning a platform implementation package to a client device may include receiving from a client device executing an application with a client library a request for an update to a platform implementation package. In response to the request communicating the update to the platform implementation package to the client device. The platform implementation package may be operable to perform at least one functionality associated with the client library. The platform implementation package may be distributable to at least a plurality of other client devices executing corresponding applications with the client library.

The communicating of the update to the platform implementation package to the client device may take place automatically upon receiving the request from the client device. The update of the platform implementation package may be pushed to the client device without any communication from the application or from a user of the client device. The pushing of the update may take place automatically at a predetermined time interval.

These and other advantages aspects and novel features of the present disclosure as well as details of illustrated implementation s thereof will be more fully understood from the following description and drawings.

The present disclosure relates to a method and system for automatic provisioning of a software platform to a device ecosystem. In various implementations the interaction between application developers users and a provisioning network may be further improved by implementing a multi part application programming interface API and automatically provisioning at least a portion of the multi part API to devices within a device ecosystem. More specifically functionalities for a given API may be separated into at least two groups interface functionalities which are not likely to change over time and implementation functionalities which are likely to be dynamic and change over time requiring subsequent updates . The interface functionalities may be implemented in a client library which may be used by a developer to be implemented in a device application. The implementation functionalities may be implemented in a service application or a platform implementation package which may be automatically provisioned and automatically updated throughout the device ecosystem. In this regard by separating the implementation functionality in a platform implementation package and automatically updating it throughout the device ecosystem there is no need to publish a new application due to updates in the API or the operating software.

For example a method for automatically provisioning a platform implementation package to a client device may include receiving at the client device and from an application executing on the client device a request for functionality. The request may be received via a client resident client library distributed with the application. The request may be for functionality provided by the platform implementation package which functionality is not provided by the client library. It may be further automatically determined by the client device that the functionality requires an install of the platform implementation package or an update to the platform implementation package. In response to the determining a request for the update to the platform implementation package may be communicated to a computing system. The update to the platform implementation package may be received from the computing system. The update to the platform implementation package may be installed on the client device. The requested functionality may be provided to the application by the updated platform implementation package.

As utilized herein the terms circuits and circuitry refer to physical electronic components i.e. hardware and any software and or firmware code which may configure the hardware be executed by the hardware and or otherwise be associated with the hardware. As utilized herein and or means any one or more of the items in the list joined by and or . As an example x and or y means any element of the three element set x y x y . As another example x y and or z means any element of the seven element set x y z x y x z y z x y z . As utilized herein the terms block and module refer to functions than can be performed by one or more circuits. As utilized herein the term e.g. introduces a list of one or more non limiting examples instances or illustrations.

In an example embodiment of the disclosure the interface functionalities and the implementation functionalities may be separated from the API . For example the interface functionalities may be implemented in a client library CL . The client library may be a thin client library for example. Additionally the implementation functionalities may be implemented in a platform implementation package PIP . The PIP may be for example an application package e.g. an application package .APK file which may be installed in a client device and may be used to implement given functionalities required by an application.

The provisioning manager may comprise suitable logic circuitry interfaces and or code that may be operable to separate interface and implementation functionalities of an application programming interface e.g. API in into a client library e.g. CL and a corresponding platform implementation package e.g. PIP . The provisioning manager may also comprise a CPU and memory which may be used during one or more of the provisioning functionalities disclosed herein.

The developer may be a software developer who may use one or more APIs provided by the provisioning manager when developing for example applications for use by one or more of the client devices . . . . In an example embodiment the developer may use the client library during development of application A . More specifically the developer may implement the client library as a thin client library within the application A . After development is complete the developer may communicate the application A to the provisioning manager via the communication path

For example the provisioning manager may comprise an application store and the developer may publish the completed application A in such application store. The provisioning manager may also publish the platform implementation package PIP corresponding to the client library CL . The provisioning manager may further distribute e.g. via a download the application with the client library together with the corresponding platform implementation package to one or more of the plurality of client devices . . . via communication paths . . . . For example such distribution of the application and the platform implementation package may take place when one or more of the client devices . . . purchases the application for download.

Referring to the example software provisioning environment may be substantially similar to the software provisioning environment with the difference being that the application with the client library may be downloaded by the device directly from the developer . For example the provisioning manager may provide access to the developer to a plurality of client libraries . . . which correspond to platform implementation packages . . . . The client library or any of the other client libraries may be communicated to the developer via the communication path . The completed application with the client library may be downloaded by devices . . . via communication paths . The corresponding platform implementation package may be downloaded by the devices . . . from the provisioning manager .

During example operation of the device once the application with the client library and the platform implementation package are installed at device a user may execute the application . After the application is executed the client library may be used for communicating a request for a specific implementation functionality to the platform implementation package . Such request for functionality may be communicated to the platform implementation package immediately upon starting the application or at any time during which the application is running. Additionally the request for the functionality may be initiated within the device because the application in fact requires such functionality for one or more of its processes. The request for the functionality may also be initiated because the application is attempting to verify that a corresponding platform implementation package is installed and is able to provide such functionality if required to do so by the application.

After the request for functionality is communicated to the platform implementation package it may be determined whether the platform implementation package requires an update. For example a version of the client library may be checked against the version of the platform implementation package . If the platform implementation package is outdated or is disabled or not installed it may be concluded that the platform implementation package requires an update. In response to the determining the request for an update may be communicated to the provisioning manager . The provisioning manager may send back the requested update to the device and the platform implementation package may be updated.

In an example embodiment the provisioning manager may periodically publish updates of the client libraries and the corresponding platform implementation packages that it provides. For example the provisioning manager may provide e.g. publish an update to the platform implementation package . Similarly the provisioning manager may provide e.g. publish an update to the client library .

During example operation of the device after a request for functionality is communicated to the platform implementation package it may be determined whether the platform implementation package requires an update. After it is determined that an update is required the request for an update may be communicated to the provisioning manager . The provisioning manager may then send back the requested update to the device and or to any of the other devices via the communication path

In an example embodiment the provisioning manager may also provision updates to the client library . Such updates may be communicated to device and or any of the remaining devices so that the client library used by any of the device applications e.g. applications in device applications and in device may be updated to client library . The client library update may be communicated via communication paths and it may be done concurrently with communication of the update to the platform implementation package . In another embodiment of the disclosure the client library update may be done separately from the update to the platform implementation package .

In another example embodiment of the disclosure the platform implementation package update may be directly pushed by the provisioning manager to one or more of devices . . . as silent updates. The pushing of the platform implementation package update to the one or more of devices . . . may take place automatically and without any action or communication from user s of the devices . . . or applications running on such devices. For example the platform implementation package update may be automatically pushed to the one or more of devices . . . on a regular hour cycle.

In yet another example embodiment the communication paths . . . and may comprise one or more wired and or wireless communication links.

Additionally the provisioning manager and or one or more of the devices . . . within the example software provisioning environment may use separate binaries for different versions e.g. update of the platform implementation package in order to keep minimal footprint of the platform. More specifically the provisioning manager may deliver the platform e.g. the platform implementation package to one or more of the devices . . . within the example software provisioning environment in multiple binaries broken up along functional lines rather than a single binary. This may have the benefit of allowing incremental update or installation in a storage constrained environment as well as limiting damage to the system by letting the user disable individual components associated with individual binaries rather than all functionality if a single binary is used .

Similarly in another example embodiment of the disclosure the provisioning manager and or one or more of the devices . . . within the example software provisioning environment may also use targeted binaries for different runtime architectures languages and screen densities thereby improving the bandwidth and storage impact of the services provided by the platform implementation package . More specifically the provisioning manager may maintain separate builds for different target platforms in order to save storage space and mobile data transmission costs. For example native code may be compiled to the specific architecture of the targeting device. Image resources may be targeted to the specific devices display density rather than having one in every possible density . String resources may also be limited to a set of languages supported by the device. In this regard different binaries may be used for different platform versions which may have libraries or assets included on newer devices and which may not be present on older devices .

At it may be automatically determined that the functionality requires an update to the platform implementation package . At in response to the determining a request for the update to the platform implementation package may be communicated to a computing system e.g. provisioning manager . At the update e.g. to the platform implementation package may be received from the computing system e.g. . At the update to the platform implementation package may be installed on the client device e.g. . At the requested functionality may be provided within the client device by the updated platform implementation package .

The request for the functionality may be communicated to the provisioning manager upon initial execution i.e. as part of the initial execution steps of the application . The request for the functionality may also be communicated after initial execution of the application e.g. after execution of the initial steps of the application the application or client device may determine that certain additional functionality of the application is not installed . The automatic determining may include determining that the platform implementation package is outdated determining that the platform implementation package is not installed in the client device and or determining that the platform implementation package is disabled. The determining that the platform implementation package is outdated may include performing a version dependency check by comparing a version of the client library with a version of the platform implementation package .

Prior to the communicating of the update request a dialog interface may be displayed on the device for receiving user confirmation for the update request. A method may be called in the client library for the displaying of the dialog interface. An update e.g. to the client library may be received from the computing system together with the update e.g. to the platform implementation package. The request may be received via the client library e.g. using inter process communication IPC .

In an example embodiment the communicating of the request for the update to the platform implementation package to the computing system e.g. may be deferred or delayed until at least another update is required for at least another application executing on the client device .

If it is determined that the platform implementation package requires an update at it may be determined whether the functionality is in fact required by the application executing on the client device . If the functionality is not required by the application at it may be determined whether to the disable the functionality performed by the platform implementation package . If it is determined that the functionality is to be disable then at the functionality is disable and the method concludes. If it is determined that the functionality should not be disabled processing may resume at step .

If it is determined that the functionality is in fact required by the application then at a dialog interface may be displayed at the client device for receiving user confirmation of a request for the update. The dialog interface may be displayed by calling a method in the client library. After receipt of the confirmation the request for the update to the platform implementation package may be communicated to a computing system e.g. provisioning manager .

At the update e.g. to the platform implementation package may be received from the computing system e.g. . At the update to the platform implementation package may be installed on the client device e.g. . At the requested functionality may be provided within the client device by the updated platform implementation package .

If it is determined at that the platform implementation package requires an update at the functionality may be performed by the platform implementation package .

The communicating of the update to the platform implementation package to the client device may take place automatically upon receiving the request from the client device . If a client library update e.g. is available it may be communicated to one or both of the client device and or the plurality of other client devices e.g. . The client library update may be pushed to the client device and or the plurality of other client devices as a silent update.

Referring to in an example embodiment a system for automatically provisioning a platform implementation package to a client device is disclosed and may include at least one processor e.g. CPU in a client device e.g. . The CPU may enable receiving of a request for functionality from an application e.g. executing on the client device e.g. . The request may be received via a client library e.g. distributed with the application . The request may be for functionality provided by a corresponding platform implementation package e.g. . The platform implementation package may provide functionality that is not provided by the client library .

The CPU may enable automatic determining that the functionality requires an update to the platform implementation package . In response to the determining the CPU may enable communicating a request for the update to the platform implementation package to a computing system e.g. provisioning manager . The CPU may enable receiving of the update e.g. to the platform implementation package from the computing system e.g. . The CPU may enable installing of the update to the platform implementation package on the client device e.g. . The CPU may enable providing of the requested functionality within the client device by the updated platform implementation package .

The CPU may enable communicating of the request for the functionality to the provisioning manager upon initial execution of the application or after initial execution of the application . The automatic determining may include determining that the platform implementation package is outdated determining that the platform implementation package is not installed in the client device and or determining that the platform implementation package is disabled. The determining that the platform implementation package is outdated may include performing by the CPU a version dependency check by comparing a version of the client library with a version of the platform implementation package .

Prior to the communicating of the update request the CPU may enable displaying a dialog interface on the device for receiving user confirmation for the update request. The CPU may enable calling a method in the client library for the displaying of the dialog interface. The CPU may enable receiving an update e.g. to the client library from the computing system e.g. together with the update e.g. to the platform implementation package. The request may be received via the client library e.g. using an inter process communication IPC .

Referring to in an example embodiment a system for automatically provisioning a platform implementation package to a client device is disclosed and may include at least one processor e.g. CPU or in a computing system e.g. provisioning manager or . The CPU may enable receiving a request for an update to a platform implementation package e.g. at the provisioning manager e.g. from a client device e.g. executing an application e.g. with a client library e.g. . In response to the request the CPU may enable communicating the platform implementation package update e.g. to the client device . The updated platform implementation package may be operable to perform at least one functionality associated with the client library . The CPU may also enable distributing of the updated platform implementation package to at least a plurality of other client devices e.g. executing corresponding applications with the client library .

The CPU may enable communicating of the update to the platform implementation package to the client device automatically upon receiving the request from the client device . If a client library update e.g. is available the CPU may enable communicating the update e.g. to one or both of the client device and or the plurality of other client devices e.g. . The CPU may further enable pushing the client library update to the client device and or the plurality of other client devices as a silent update.

Other implementations may provide a non transitory computer readable medium and or storage medium and or a non transitory machine readable medium and or storage medium having stored thereon a machine code and or a computer program having at least one code section executable by a machine and or a computer thereby causing the machine and or computer to perform the steps as described herein for automatically provisioning a platform implementation package to a client device.

Accordingly the present method and or system may be realized in hardware software or a combination of hardware and software. The present method and or system may be realized in a centralized fashion in at least one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other system adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present method and or system may also be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

While the present method and or apparatus has been described with reference to certain implementations it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted without departing from the scope of the present method and or apparatus. In addition many modifications may be made to adapt a particular situation or material to the teachings of the present disclosure without departing from its scope. Therefore it is intended that the present method and or apparatus not be limited to the particular implementations disclosed but that the present method and or apparatus will include all implementations falling within the scope of the appended claims.

