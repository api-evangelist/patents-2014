---

title: Security actuator for a dynamically programmable computer network
abstract: A network security policy may be implemented at network switches as a set of active packet disposition directives. In a dynamically programmable network, the network switches can be dynamically reprogrammed with packet disposition directives. A security actuator receives flow policy directives from a number of network applications. The flow policy directives express higher-level network security policy goals, including blocking and/or redirecting network traffic. The security actuator converts a flow policy directive into one or more packet disposition directives. The packet disposition directives may include trigger rules to cause network communications to be monitored for matching trigger packets. An automated mechanism initiated by the security actuator may cause trigger packets to be forwarded to the security actuator for analysis. The security actuator may generate packet disposition directives in response to receiving the trigger packets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09571523&OS=09571523&RS=09571523
owner: SRI INTERNATIONAL
number: 09571523
owner_city: Menlo Park
owner_country: US
publication_date: 20140702
---
This application claims the benefit of and priority to U.S. Provisional Patent Application Ser. No. 61 991 345 filed May 9 2014 and U.S. Provisional Patent Application Ser. No. 61 892 668 filed Oct. 18 2013 and is a continuation in part of U.S. Utility patent application Ser. Nos. 13 801 855 and 13 801 871 filed Mar. 13 2013 both of which claim the benefit of and priority to U.S. Provisional Patent Application Ser. No. 61 650 287 filed May 22 2012 and each of the foregoing applications is incorporated herein by this reference in its entirety.

This invention was made in part with government support under contract number FA8750 11 C 0249 awarded by the Air Force Research Laboratory and contract number W911NF 06 1 0316 awarded by the Army Research Office. The Government has certain rights in this invention.

Software defined networking refers to an approach to building a computer network that allows for programmable network switch infrastructures in which the rules that determine how the network switches are to process network flows can be dynamically specified and changed. Such programmability is useful for instance in the management of virtual computing resources that may be spawned or terminated on demand. The OPENFLOW network model is one example of a protocol that may be used to implement software defined networking.

According to traditional notions of network perimeter defense network security may be provided by a well defined e.g. static security policy that can be instantiated for a particular network topology. In traditional network environments the security policy often can be deployed and enforced consistently across the network infrastructure.

While the concepts of the present disclosure are susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and are described in detail below. It should be understood that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed. On the contrary the intent is to cover all modifications equivalents and alternatives consistent with the present disclosure and the appended claims.

Dynamically programmable networks some embodiments of which may be referred to as software defined networks or SDNs present several new and unique challenges to the effective enforcement of traditional security policies. For instance many different network flow control applications may be active on a particular SDN. These network applications may attempt to change the network flow control policies dynamically. Further some network applications may incorporate security vulnerabilities or may possibly be written by adversaries who wish to use the network application to take control of the network. In some cases the flow control policies of the various active network applications may potentially conflict in that some of the flow policies may be contradictory or may attempt to evade or override other flow policies.

For instance in an evasion scenario referred to herein as dynamic flow tunneling a network application may seek to evade an existing flow rule by adding a series of flow rules that redirect packets around the existing flow rule by modifying the packet header information using e.g. a goto table directive or set action . As an example in a hypothetical SDN suppose there are three host computers one network switch and one network controller where a network controller in SDN terminology refers to software that acts as an interface between other running software applications which produce network flows and the switches or other packet forwarding devices on the network . Suppose further that a firewall implemented as a network application on the hypothetical SDN has implemented a flow rule that requires the blocking of network packets that specify a particular source Internet Protocol IP address and a particular destination IP address. For instance the firewall s flow rule may require packets from an outside host identified by an address 10.0.0.2 that are directed to a network service identified as port 80 running on a host identified by an address 10.0.0.4 to be blocked. Another network application may then attempt to add three new flow rules to be implemented by the network controller as follows. The first proposed rule modifies the source IP address of a packet to 10.0.0.1 if a packet is delivered from 10.0.0.2 to 10.0.0.3 port 80 . The second proposed rule changes the destination IP address of a packet to 10.0.0.4 if a packet is delivered from 10.0.0.1 to 10.0.0.3 port 80 . The third proposed rule simply allows the forwarding of a packet from 10.0.0.1 to 10.0.0.4 at port 80. None of these flow rules taken individually conflicts with the firewall s flow rule and thus would be implemented by the network controller in the absence of security features such as those described herein.

If these proposed flow rules were to be implemented the firewall s flow rule that blocks packets from 10.0.0.2 to 10.0.0.4 could be evaded. To illustrate this suppose the host 10.0.0.2 sends a data packet to port 80 of the host 10.0.0.3. This packet can bypass the firewall because it does not directly go to the host 10.0.0.4 but to 10.0.0.3. However this packet will eventually be delivered to the host 10.0.0.4 by the network controller even if there is a firewall forbidding such traffic as a result of the second and third proposed flow rules above. In this way an inadvertently erroneous or malicious network application can evade an existing firewall by simply adding a few flow rules.

These and other challenges can be addressed by implementing a non bypassable security mediation service on the dynamically programmable network. As disclosed herein embodiments of the security mediation service can monitor and evaluate flow rule insertion requests and other packet disposition directives e.g. packet outs port mods etc. against a dynamically changing security policy and can do so in real time e.g. in response to the directives being produced by the network administrator and or various software applications running on the network and before the directives are implemented by the network devices e.g. switches . Embodiments of the security mediation service may enforce and preserve the integrity of the dynamically programmable network s security policy by providing role based source authentication conflict detection conflict resolution or any combination thereof. Some embodiments of the disclosed security mediation service are also described for example in Phillip A. Porras et al. HotSDN 12 at 121 126 Aug. 13 2012 and Phillip A. Porras delivered at the SDN Security Seminars 2012 on Feb. 28 2012 in San Francisco Calif. both of which are incorporated herein by this reference. Other materials describing embodiments of the disclosed security mediation service including video materials by Phillip A. Porras entitled and are posted at http www.openflowsec.org and incorporated herein by this reference. Additionally Mr. Porras discussed embodiments of the disclosed security mediation service in an interview posted on Jul. 3 2012 at http www.sdncentral.com sdn blog phil porras openflow secure controller 2012 07 and in an interview posted on Feb. 26 2013 at http www.sdncentral.com sdn blog sdn security oxymoron phil porras sri 2013 02 both of which are incorporated herein by this reference.

Referring now to a computer network includes a plurality of computerized modules or components described below. Each of the modules and components shown and described in the figures may be implemented on one or more computing devices as hardware software firmware or a combination thereof. An embodiment of a security actuator module is in communication with a security mediation service of the computer network . The illustrative computer network is embodied as a dynamically programmable network such as an OPENFLOW network. As shown by the dashed lines the security actuator and the security mediation service may embodied in or as a network flow controller of the network . In other embodiments the security actuator and or the security mediation service may be considered part of a control plane of the network but not necessarily part of the controller itself. For instance the security actuator may be embodied as an internal application described below which communicates with the controller via e.g. an application programming interface API . As an example using the OPENFLOW framework the security actuator may communicate with the controller via a northbound API where for example the security actuator contains a client side northbound API and the controller contains a server side northbound API. The security actuator the controller or the mediation service may communicate directly with a number of network switches via e.g. a southbound API of an OPENFLOW network. Alternatively the security actuator communicates with the network switches indirectly via the controller or the security mediation service .

The illustrative dynamically programmable computer network is embodied as a packet switching digital communications network that is implemented using a software defined networking approach such as the OPENFLOW protocol . In some embodiments the network may correspond to a physical or logical e.g. virtualized subset of a larger network such as a network slice. As used herein packet may refer to among other things a data packet a network packet data and or control communications or portions of such communications that are transmitted between devices or otherwise travel on the network .

As illustrated in the network flow controller includes the security actuator and the security mediation service which among other things operate to control the network communications between computer applications and one or more network switches on the dynamically programmable network . In some embodiments the security actuator may be included as a component of the security mediation service e.g. operate in the same process space as other components of the security mediation service . For example the security actuator may communicate directly with a security mediator of the security mediation service . Each of the network flow controller the security actuator and the security mediation service and any subcomponents or modules is implemented as software firmware hardware or a combination thereof.

The network flow controller or portions thereof typically execute in a separate process space from at least the external network applications and are also usually separated from any processes that may be running at the switches e.g. the data plane . For example in some embodiments the security mediation service is not implemented as part of a firewall.

The network flow controller may be embodied as a software abstraction of the network control layer e.g. control plane of the network switches . For instance the network flow controller may be implemented as part of or as an extension to an SDN controller such as an OpenFlow controller. Some vendors of SDN controllers include Big Switch Networks e.g. the Floodlight OpenSDN controller HP IBM VMWare and Juniper. In other implementations the network flow controller may be embodied in a shim layer between a network controller and the network applications or as part of another type of network virtualization layer. One example of a network virtualization layer for an SDN and OpenFlow specifically is FlowVisor developed by Stanford University Deutsch Telecom Inc. and Nicira Networks. In any case the network flow controller may execute on one or more computing devices e.g. servers separately from the network switches and or separately from other computing devices on which the applications may be running.

The security actuator the network flow controller and or the security mediation service may be connected to each of the switches using e.g. a dedicated control connection. The network switches each may be embodied as for example a switch a router a load balancer a learning switch or another type of network device. The switches each communicate with one or more servers to effectuate the flow of network traffic across the network in accordance with a network security policy. As used herein terms such as network traffic and network flow refer to in the context of the network sequences of data packets from a source computer to a destination where the destination may be for example another host a multicast group or a broadcast domain. In some cases network flow may refer to a logical equivalent of a call or a connection. A network flow may include all of the data packets in a specific transport connection or media stream. However a network flow need not be directly mapped to a transport connection. A network flow can also be thought of as a set of data packets that pass an observation point in the network during a certain time interval.

The security policy for the dynamically programmable network may be established by for example a network administrator and may be implemented as e.g. a data file database table or other suitable computerized data structure. As used herein the term network administrator may refer to for example a human operator a network security software application and or a computerized agent or delegate of a human operator such as a software application that acts under the direction of or in response to inputs from the human operator. The security policy may be implemented at the switches as a number of network flow rules which are maintained at the switches in local flow tables . The local flow tables are used by their respective switches to instantiate flow rules at the switch and direct the network traffic between the servers . Each of the switches updates its respective local flow table in accordance with the packet disposition updates . In some embodiments the switches may communicate changes in the local flow tables back to the security mediation service . For simplicity the illustrative network is shown with three network switches having local flow tables respectively however the network may include any number of switches .

Each of the servers may be embodied as any suitable type of computing resource e.g. a server computer group of server computers or one or more other devices that are configured to communicate with the switches to send and receive data packets over the network . For simplicity the illustrative network is shown with a fixed number of servers per switch however the network may include any number of servers in communication with any number of switches .

The network applications may each be embodied as any software firmware hardware or combination thereof that controls defines or otherwise interacts with the dynamically programmable network . For instance the network applications may include network security applications and or other types of software applications running on the network . Each of the network applications may produce one or more flow policy directives that are received by the security actuator .

The illustrative internal network application is embodied as a network software application that executes in the same process space as the security actuator . For example the internal network application may be embodied as a loadable module executing within the same operating system process as the security actuator . As another example the internal network application may be embodied as a bytecode module loaded from the same archive as the security actuator .

The illustrative external network application is embodied as a network software application that executes outside of the process space of the security actuator or even outside the process space of the network flow controller . For example the external network application may be embodied as a separate operating system process executing on the same computing device as the network flow controller or on a remote computing device. As a separate operating system process the external network application may execute from a separate non privileged account. In other embodiments the external network application may be embodied as a Python OpenFlow application that communicates with the security actuator through a Python Simplified Wrapper and interface Generator SWIG .

The illustrative network further includes a vulnerable flow prevention director and a vulnerability scanner . The vulnerability scanner may be embodied as software firmware hardware or a combination thereof e.g. any vulnerability scanner service or other process than scans the network for applications or services containing known vulnerabilities. The vulnerability scanner may produce for example a collection of vulnerable host port information. The vulnerability scanner may be embodied as a third party or legacy application that is unaware of the dynamic programmability of the network . The vulnerable flow prevention director periodically causes the vulnerability scanner to scan the network and based on the output generated by the vulnerability scanner submits flow policy directives to the security actuator . The vulnerable flow prevention director may for example generate flow policy directives to redirect external visitors away from a vulnerable host port combination while continuing to allow internal access to the vulnerable host port redirect all traffic away from the vulnerable host port combination or implement any other desired network flow policy. The vulnerable flow prevention director is illustrated as an internal network application however the vulnerable flow prevention director may be embodied as an external network application or any other type of application capable of interfacing with the security actuator .

For simplicity only three illustrative network applications are shown in . However the network may include any number of external and or internal network applications or other types of software applications. For example the network may include a network based botnet detection application such as BotHunter www.bothunter.net a contextual flow policy enforcement application or any other network security application that can communicate with the network flow controller e.g. via the security actuator . The botnet detection application may be embodied as a method and apparatus for detecting malware infection as described in United States Patent Application Publication No. 2009 0172815 which is incorporated herein by this reference in its entirety.

As used herein computer application or application may refer to among other things any type of computer program or computer readable instructions whether implemented in software hardware or a combination thereof and includes for example operating system programs middleware e.g. APIs runtime libraries utilities etc. self contained software applications or a combination of any of the foregoing.

The security actuator is embodied as software firmware hardware or a combination thereof. The security actuator is configured to convert flow policy directives received from the network applications into packet disposition directives that may be submitted to the security mediation service . For example the security actuator may receive high level threat mitigation directives expressed in the flow policy directives and translate or convert those high level directives into lower level packet disposition directives . As used herein higher level and lower level may refer to among other things relative degrees of abstraction where higher level may refer to directives that include human intelligible text and lower level may refer to directives that are machine intelligible codes and may or may not include human intelligible text. The illustrative policy directives and packet disposition directives are embodied as data communications embodying instructions and are transmitted over the network .

In some embodiments the security actuator implements the high level flow policy directives using a mechanism that may be referred to herein as a flow modification rule or packet disposition directive . As described in more detail below there are many different types of flow modification rules. Some flow modification rules allow for the security actuator or the network flow controller for example to instruct a network switch to automatically direct a packet to a specified switch port. Some flow modification rules permit the switch to rewrite portions of the header information of the packet e.g. the link layer or IPv4 header . Some flow modification rules cause a packet to be redirected e.g. to the security actuator or to the network flow controller for further processing. Such trigger flow modification rules allow the security actuator to receive packets from the network traffic i.e. packets that are targeted by the flow policy directive and based on the receipt of such packets trigger a response packet such as a TCP connection reset or trigger the insertion at the switch of flow modification rules that are specific to that particular network traffic e.g. a redirect . As such a single flow policy directive can result in the insertion of multiple different flow modification rules by the security actuator at one or more of the network switches .

The packet disposition directives may include a number of trigger rules which cause the network switches to forward matching trigger packets back to the security actuator for further analysis and may cause the security actuator to create additional packet disposition directives . For example a trigger rule may initiate or be embodied as an automated mechanism such as a stateful rule that spawns an automated mechanism or automata that communicates with one or more of the network switches after the trigger rule is implemented in order to monitor network communications to and from the switches and determine whether a corresponding flow policy directive e.g. expressed as packet disposition directives should be enforced with respect to any of the monitored communications. In that sense the security actuator can initiate an automated mechanism that can cause e.g. flow modification rules to persist for longer than the lifespan of the security actuator itself. In some examples the security actuator or an automated mechanism that it spawns listens to network communications over a period of time monitoring for packet that match the criteria of a currently active flow rule. When a packet is discovered that matches a flow rule criterion e.g. expressed as one or more packet disposition directives the security actuator or its spawned automated mechanism communicates either directly or through the controller or security mediation service with the network switches to enforce the flow rule by e.g. blocking quarantining or re directing the communication .

As further described below the security actuator may resolve higher level or application specific directives using a pre defined set of flow policy directives which may include for example block deny allow redirect quarantine undo constrain and or info directives. A block flow policy directive may for example implement a full duplex filter between a Classless Inter Domain Routing CIDR block and the internal network where the primary use for this command is in blacklist enforcement. As a result of a block directive a packet may be dropped or otherwise prevented from reaching its destination. The deny allow undo and info flow policy directives may be similar to their firewall counterparts and can be capable of being refined down to an individual flow rule. A redirect flow policy directive may for example enable a network application to tunnel all flows between a source and given target to a new target e.g. a honeypot or honeynet . With a flow policy directive a switch may rewrite the packet headers of all applicable network flows such that a source cannot tell that its flows have been redirected to the new target. One application of the redirect flow policy directive includes the redirection of a malicious scanner into a honeynet. A quarantine flow policy directive may enable a network application to essentially isolate an internal host from the network. A constrain flow policy directive may enable a network application to deactivate all current flow rules in the switches that are not set to a specified priority e.g. flow rules that are non privileged .

The security mediation service includes a security mediator which receives packet disposition directives from the security actuator in a non bypassable manner. That is the illustrative security mediator is implemented between the security actuator and the network switches so that all packet disposition directives pass through or are intercepted by the security mediator before being implemented by the switches . The security mediator evaluates the packet disposition directives based on the then current network security policy as described in more detail below. After a packet disposition directive has been evaluated by the security mediator the security mediation service may communicate a corresponding packet disposition update to one or more of the network switches or to the security actuator . Each of the security mediator the security mediation service and any subcomponents may be embodied as software firmware hardware or a combination thereof.

As used herein a packet disposition directive may refer to among other things flow rules or any computer logic that determines or results in the disposition of one or more data packets by the switches on the dynamically programmable network or that changes the switches behavior or configuration in any way. Some examples of potential packet dispositions include forward in which a data packet is sent on to its next intermediate or final destination drop in which a switch deliberately does not send a data packet on to its next destination because for example the switch s capacity is overloaded or the switch believes that the packet is part of a denial of service attack and modify in which information in the packet header is modified by the directive . Thus packet disposition directives can include flow rule insertion requests as well as other types of communications that result in a packet disposition without specifying a flow rule such as packet outs and port mods. A packet out refers generally to a packet disposition directive that may request one or more of the switches to generate network traffic in response to a specified network condition. A port mod refers generally to a packet disposition directive that can enable or disable a network service such as a port of a network switch . Packet disposition directives can be produced by for example the network administrator and or by any one or more of the network applications . The packet disposition directives may conform to or extend a software defined network protocol implemented by the network flow controller . For example in some embodiments the packet disposition directives may be OpenFlow messages. In some embodiments the packet disposition directives may directly correspond to flow rules that can be directly instantiated at the network switches .

As used herein a flow modification rule or flow rule may refer to among other things packet disposition directives that contain logic that if executed at the network switches do control the flow of data packets across the network . Thus the set of all flow rules instantiated on the dynamically programmable network embodies a current implementation of the network security policy. However in the dynamically programmable network flow rules and thus the network security policy can be modified on the fly by the packet disposition directives . Thus as used herein dynamically may refer to among other things a network in which the flow rules and thus the security policy may be constantly varying or changing in response to for example the then current network conditions. As used herein terms such as currently active flow rules or currently active directives refer generally to the set of flow rules and or other packet disposition directives that at a particular moment in time during the operation of the network represents the then current network security policy. As used herein terms such as candidate flow rule or candidate directive may refer to among other things any flow rule or other packet disposition directive that is not currently part of the set of currently active directives. In other words candidate flow rules may refer to flow rules that have not yet been evaluated by the security mediator are currently being evaluated by the security mediator or that have been evaluated but rejected by the security mediator .

To simplify the discussion flow rules are referred to herein as having two main parts match criteria and actions. The match criteria determine whether a flow rule applies to a particular data packet. The match criteria include a number of match fields including those that specify source and destination criteria for matching data packets to the flow rule. The source and destination match fields each identify particular computing resources by any suitable references or network service identifiers such as IP addresses network masks ports and or others. In some embodiments match fields other than source and destination may be used to evaluate the applicability of a flow rule to a data packet and in some embodiments one match criterion or multiple match criteria may be used.

A flow rule may contain one or more actions. The action s contained in the flow rule specify what action s are to be taken by a network switch if the flow rule applies to a particular data packet that is if the values of the match fields of the flow rule match the values of the corresponding match fields in the header of the data packet. An action may specify a disposition for the data packet for example to drop forward or modify the data packet. Some flow rules may specify that the data packet s header information is to be modified or rewritten e.g. using a set action in OpenFlow terminology if the flow rule applies to the packet. Some flow rules may specify that the data packet is to be forwarded to the network controller for further analysis.

Referring now in more detail to the security mediation service of the security mediation service validates the sources of the packet disposition directives analyzes the packet disposition directives for conflicts with existing flow rules and performs role based conflict resolution. The security mediation service detects and resolves conflicts quickly allowing for real time or near real time control of the network flow rules. The illustrative security mediation service is embodied as a number of computerized modules and data structures e.g. software firmware hardware or a combination thereof including a network security credentials table an aggregate active state table and a security mediator . Such computerized modules and data structures may execute or be resident on the same computing device or group of computing devices as the network flow controller and or on one or more other computing devices that are connected to the network .

To receive packet disposition directives from the security actuator the security mediation service may include one or more network communication interfaces. For example packet disposition directives may be received from the security actuator using a defined application programming interface API such as a northbound API of the network flow controller and or the security mediation service . Packet disposition directives may be received from the security actuator using an inter process communication mechanism such as pipes sockets or the like. For example packet disposition directives may be received through a secure sockets layer SSL communication from the security actuator .

The security mediator interfaces with the network security credentials table to validate the sources or producers of packet disposition directives and interfaces with the aggregate active state table to maintain the current status of the network security policy as implemented as the set of currently active packet disposition directives. The network security credentials table maintains a trust model for the security mediation service which associates the various sources of packet disposition directives with one or more security roles packet disposition capabilities and digital authentication content. As such the network security credentials table includes data relating to the sources security roles capabilities and digital authentication content . The sources may identify particular users e.g. network administrators or particular network applications which may submit packet disposition directives . The sources may also be referred to by terminology such as flow rule producers or rule insertion requestors. The security roles define particular security roles that may be assigned to the sources . Each role has an associated priority which is used by the security mediation service to resolve flow rule conflicts. In some embodiments one or more of the roles may be extended with sub roles according to the requirements of a particular design of the security mediation service . In some embodiments the security roles may include a number of pre defined roles e.g. network administrators security related network applications and non security related applications . For example in some embodiments the security role associated with network administrators may be assigned the highest priority. The security role associated with security related network applications may be assigned an intermediate priority that is lower than the administrator s priority but higher than the priority of other applications. For instance network security applications may produce flow rules that further constrain the network adminstrator s static network security policy based on newly perceived runtime threats or other current network conditions. The lowest priority security role may be assigned to sources that are non security related network applications or that are unidentified e.g. not digitally authenticated or that are without an assigned role . Each of the roles may be associated with one or more of the capabilities . The capabilities define the operations that sources are permitted to perform on the network for example the capabilities may include the ability to create modify or delete flow rules the ability to create packet outs the ability to perform port mods and the like. The capabilities may be associated with particular roles in some embodiments. As an example in accordance with the network security credentials a source may be associated with a role and based on the role and or the digital authentication content associated with the source the source may have certain limited or expanded capabilities . The source s role and or capabilities may be determined based at least in part on whether the source has associated digital authentication content . For example in some embodiments whether a source has capabilities that include the ability to create packet outs or perform port mods may depend upon whether the source s identity has been successfully authenticated. When a packet disposition directive is evaluated by the security mediation service the security mediation service considers the role and or capabilities associated with the source of the packet disposition directive .

The digital authentication content stores information needed to identify and authenticate the sources . For example the digital authentication content may store a public key from a digital certificate associated with each source . For network applications the digital authentication content may include an authentication tuple appropriate for the particular network application. For example an external network application may be identified by an SSL credential an identity credential and an SSL connection. In another example an embedded network application may be identified by a digital certificate and a digitally signed bytecode module.

The aggregate active state table tracks the current state of the security policy on the network as embodied in the set of currently active packet disposition directives as it changes over time during the operation of the network. The aggregate active state table thus stores data relating to the active directives which represent all of the currently accepted packet disposition directives in the dynamically programmable network at any given moment in time. The aggregate active state table also stores data relating to the currently active roles which reference the security roles associated with each of the currently active directives . Additionally the aggregate active state table maintains data relating to the current state of each of the local flow tables of the switches as it changes over time during the operation of the network .

The data relating to the active directives may include for each of the currently active directives that includes a flow rule a representation of the flow rule that is referred to herein as an alias set reduced format or alias set reduced rules. The alias set reduced rules each include an expansion of the flow rule that makes explicit any field substitutions that would result from the application of the flow rule to a data packet to which the rule applies. In a simplified example each alias set reduced rule includes a representation of the active flow rule itself a source alias set a destination alias set an associated security role and a disposition e.g. drop forward modify etc. . The source and destination alias sets are expanded representations of the source and destination match fields of the flow rule respectively which incorporate for example set action transformations and wildcards.

The alias sets initially include the values of the source and destination criteria e.g. IP addresses network masks ports etc. specified in the match fields of the flow rule. If the rule s action allows another value to be substituted for the initial value of a match field using e.g. a set action the resulting value or values are added to the associated alias set. Alias set expansion may continue for related subsequent flow rules. The initial alias sets for each subsequent flow rule are created for the source and destination match fields as above. These alias sets are then compared to the alias sets of the previous rule. If an alias set intersects with the alias set of the previous rule the union of the alias sets is used as the alias set for the subsequent rule. As used herein intersect connotes as in mathematics the generation of a set that contains all elements of a set A that also belong to another set B or equivalently all elements of B that also belong to A but no other elements. As used herein union connotes as in mathematics the generation of a set that contains all elements of a set A and all elements of another set B but no duplicates. Such expansion is performed for all of the currently active flow rules and stored in the aggregate active state table .

For example Table 1 below illustrates a set of three related flow rules and their associated alias sets. Flow rule 1 matches packets with source a and destination c and includes an action to set a to a . Thus for rule 1 the source alias set is a a and the destination alias set is c . Rule 2 matches packets with source a to destination c and includes an action to set c to b. The source alias set for rule 2 is initially a which intersects with the source alias set for rule 1. Thus the source alias set for rule 2 is a a the union of the source alias sets of rules 1 and 2. Based on the set action the destination alias set for rule 2 is c b . Lastly rule 3 matches packets with source a to destination b and includes an action to forward the data packet. The initial source and destination alias sets are a and b respectively. These alias sets intersect with the alias sets of rule 2 so the final alias sets of rule 3 are a a and c b .

Referring now in more detail to the security mediator of the security mediator receives the packet disposition directives from the security actuator and analyzes each of the packet disposition directives to detect and resolve conflicts with the then current security policy as expressed by the active directives . Acceptable packet disposition directives are added to the active directives and implemented on the switches . The illustrative security mediator is embodied as a number of computerized modules and data structures including a role based source authenticator a state table manager a conflict analyzer and a switch state change detection module .

The role based source authenticator identifies and authenticates the source associated with the packet disposition directive and associates the source s role with the packet disposition directive . To perform such authentication and validation the role based source authenticator may reference the network security credentials table .

The state table manager manages and maintains the current state of the aggregate active state table and or the network security credentials table as flow rules and or other directives are added modified and deleted from the set of currently active directives. The state table manager may operate in conjunction with the switch state change detection module so that the aggregate active state table remains synchronized with the local flow tables at the network switches .

The conflict analyzer determines live that is when a packet disposition directive is received at the security mediator whether to instantiate a packet disposition directive based on its associated role . For packet disposition directives containing flow rule insertion requests e.g. candidate flow rules the conflict analyzer may compare each candidate flow rule to the set of existing active directives . Such comparison may detect one or more rule conflicts including rule conflicts involving dynamic flow tunneling. As used herein a rule conflict arises when a candidate flow rule seeks to enable a network flow that is otherwise prohibited by the existing currently active directives or a candidate flow rule seeks to disable a network flow that is otherwise allowed by the existing currently active directives . For example conflicts can include contradictory or inconsistent rules. Any conflicts between candidate flow rules and existing active directives are resolved in accordance with the network security policy. In some embodiments conflict detection and conflict resolution may be performed by sub modules of the conflict analyzer for example by a conflict detection module and or a conflict resolution module .

The switch state change detection module communicates messages received from the switches relating to the status of the local flow tables of each switch . In particular the switch state change detection module may provide an interface by which the aggregate active state table is updated when any the switches perform rule expiration. In some embodiments the switch state change detection module may implement a callback routine to receive messages from the switches and coordinate the state of the switches with the aggregate active state table . For example a switch may reject or refuse flow rule updates when resources of the switch such as the local flow tables are exhausted. In such event the switch may send a message to the switch state change detection module signaling such rejection. In other embodiments a switch may delete a flow rule based on the expiration of a defined amount of time e.g. a timeout and send a message signaling the deletion to the switch state change detection module . The switch state change detection module receives such messages and updates the aggregate active state table accordingly.

Referring now to in the illustrative embodiment the security actuator establishes an environment during operation e.g. an execution or runtime environment . The illustrative environment includes a directive source interface module a flow policy mapping module and a flow controller API module . The various modules of the environment may be embodied as hardware firmware software or a combination thereof.

The directive source interface module is configured to receive flow policy directives from one or more flow policy directive sources such as the network applications . As described further below the flow policy directives may be embodied as relatively high level expressions of desired network security policies. For example the flow policy directives may include deny directives redirect directives quarantine directives or other directives to modify flow of data through the switches of the network .

The flow policy mapping module is configured to translate the flow policy directives into one or more packet disposition directives . The packet disposition directives can directly cause the switches to implement the flow policy directive but the flow policy directives cannot be directly implemented by the switches . The particular packet disposition directives generated may depend on the received flow policy directives . As discussed above the packet disposition directives may include flow modification rules to control flow of communications across the network or trigger rules that cause the switches to forward matching data packets to the security actuator for further analysis. The flow policy mapping module may be further configured to generate one or more additional packet disposition directives based on data forwarded in response to matching the trigger rules. In some embodiments those functions may be performed by sub modules for example by a deny module a redirect module or by a quarantine module .

The flow controller API module is configured to transmit the packet disposition directives which are created by the security actuator as translations of flow policy directives to the security mediation service . As described above the security mediation service may then add the packet disposition directives to the active flow rules of the network based on a comparison of the packet disposition directives to the set of existing currently active flow rues e.g. the packet disposition directives may be implemented as flow rules if the packet disposition directives do not conflict with the existing currently active flow rules . The flow controller API module may use any method to communicate with the security mediation service including through a northbound API of the network flow controller and or the security mediation service . The flow controller API module is also configured to receive trigger packets that have been forwarded from the switches of the network . The flow controller API module may use any method to receive those packets including a southbound API of the network flow controller and or the security mediation service registering callback functions or other method. The flow controller API module may receive the trigger packets indirectly via the security mediation service and or the network flow controller or directly from the switches .

Referring now to schematic diagram illustrates operation of the security actuator . In use as described further below the security actuator may receive a flow policy directive and then convert that flow policy directive into a number of packet disposition directives . Those packet disposition directives are then installed in the switches of the network to control the dynamic behavior of the network . The security actuator further tracks and manages those packet disposition directives over the lifetime of the flow policy directive .

Referring now to an illustrative method for processing flow policy directives by the security actuator is shown. The method may be embodied as computerized programs routines logic and or instructions of a computing system e.g. as part of the security actuator for example. The method begins in block in which the security actuator monitors for a flow policy directive received from a directive source such as the network applications . The security actuator may listen on a network socket establish an application programming interface API or establish some other communication interface to receive flow policy directives from the network applications . In block the security actuator determines whether a flow policy directive has been received. If not the method loops back to block to continue monitoring for flow policy directives . If a flow policy directive was received the method advances to block .

In block the security actuator parses the flow policy directive to identify a command and any associated parameters contained in the flow policy directive . Each flow policy directive may be embodied as a command and any number of parameters. For example the flow policy directive may be embodied as a whitespace delimited text string beginning with a command and continuing with an optional list of parameters. The security actuator may parse the flow policy directive to validate the requested command check for required parameters or otherwise prepare the flow policy directive for processing. For example valid commands may include network security directives such as BLOCK DENY REDIRECT QUARANTINE and UNPLUG as well as management directives such as ADJUST CANCEL DEFAULTS HELP HOSTINFO INFO SHUTDOWN SWITCHES and QUIT.

In block the security actuator determines whether the flow policy directive was successfully parsed. If not the method branches ahead to block in which the security actuator may report an error as described below. If the flow policy directive was successfully parsed the method advances to block .

In block the security actuator translates the requested command and parameters into a number of packet disposition directives . In block the security actuator creates a managed security directive corresponding to the flow policy directive . The illustrative security actuator can use managed security directives to diagnose and manage the operations of the security actuator and its active network security directives e.g. the currently active flow rules . For example managed security directives can adjust a time out of a packet disposition directive remove a currently active packet disposition directive generate a list of active packet disposition directives shut down the security actuator or disconnect a flow policy directive source. A managed security directive may be used by the security actuator to install remove and otherwise manage the packet disposition directives associated with the flow policy directive e.g. where there are multiple packet disposition directives needed to implement the flow policy directive . For example the security actuator may provide the flow policy directive source with a unique directive identifier for use with future commands.

In block the security actuator transmits the packet disposition directives to the security mediation service . The packet disposition directives when installed in the network cause the switches of the network to implement the flow policy directive to control network flows e.g. the flow of data across the network . The particular packet disposition directives transmitted depends on the flow policy directive to be implemented as described further below. The security actuator may communicate the packet disposition directives to the security mediation service using any appropriate technique or protocol. For example the security actuator may communicate the packet disposition directives using a northbound API of the flow controller and or security mediation service .

In block in some embodiments the security actuator transmits one or more flow modification rules to the security mediation service . The flow modification rules control flow of communications across the network . For example the flow modification rules may direct one of the switches to direct particular matching packets to a specified port of the switch or to rewrite particular elements of the data packet header e.g. the link layer header or some elements of the IPv4 header . In block in some embodiments the security actuator may transmit one or more trigger rules to the security mediation service . The trigger rules cause the switches to forward particular matching packets illustrated as trigger packets to the security actuator . For example a trigger rule may direct one of the switches to direct particular matching packets to the network controller i.e. via the security mediation service which in turn forwards the packets to the security actuator .

After translating the flow policy directive into one or more packet disposition directives in block the security actuator transmits a response to the source of the flow policy directive . The response may indicate that the flow policy directive was implemented successfully or that an error occurred. The response may include additional information such as an identifier of any managed security directive created by the security actuator results of implementing the flow policy directive or an error message. The response may be embodied as any appropriate data format including as a whitespace delimited line of text. After transmitting the response the method loops back to block to monitor for additional flow policy directives .

Referring now to a method for handling trigger packets is shown. The method may be embodied as computerized programs routines logic and or instructions of a computing system e.g. as part of the security actuator for example. The method begins in block in which the security actuator monitors for trigger packets received from the data plane of the dynamically programmable computer network . Those trigger packets may be generated in response to one or more trigger rules that have been installed on the network as described above. In use the trigger packets may be identified by one or more of the network switches and then forwarded from the switches to the network flow controller . The trigger packets may then be forwarded to the security actuator for example through the security mediation service via a client northbound API southbound API callback interface or other mechanism. In block the security actuator determines whether a trigger packet has been received. If not the method loops back to block to continue monitoring for trigger packets . If a trigger packet has been received the method advances to block .

In block the security actuator generates one or more flow modification rules based on the received trigger packet . As described above the flow modification rules control flow of communications across the network . The flow modification rules are generated to implement the associated flow policy directive . Because the flow modification rules are based on a received trigger packet they may include matching rules based on particular attributes of the received trigger packet such as internet address hardware address switch port or other data.

In block in some embodiments in block the security actuator generates a packet out based on the trigger packet . For example the flow policy directive may specify one of several blocking styles to apply to a network flow to be blocked. In some of the blocking styles rather than just dropping a matching packet the security actuator may generate a response to the originating host such as an ICMP Internet Control Message Protocol destination unreachable packet or a TCP Transmission Control Protocol connection reset.

In block the security actuator transmits the generated flow modification rules to the security mediation service . As described above the security actuator may communicate the packet disposition directives to the security mediation service using any appropriate technique or protocol including a northbound API of the network flow controller and or the security mediation service . The transmitted flow modification rules may be assigned a higher priority than the trigger rules already installed on the network and thus may change the behavior of the network for certain flows of communication. As described above the particular flow modification rules transmitted may depend on the associated flow policy directive . In block the security actuator may transmit one or more redirect rules. The redirect rules may cause the network switches to rewrite packet header information and transfer communications to an identified remap address and or network port. In block the security actuator may transmit one or more drop rules. The drop rules may cause the network switches to drop or deny communication flows to or from particular network addresses ports hardware addresses or other matching flows. In some embodiments a packet is dropped by default if no matching rule is found thus a drop rule may be embodied as a rule with no associated action or as the absence of a matching rule. In block the security actuator may transmit one or more pass through rules. A pass through rule may forward matching packets without redirecting rewriting dropping or otherwise modifying the packets. For example a pass through rule may allow traffic that is initially addressed to a remap address to be forwarded without changes. After transmitting the flow modification rules the method loops back to block to monitor for additional trigger packets .

Referring now to an embodiment of a method for translating a flow policy directive into a number of associated packet disposition directives is illustrated. The illustrative flow policy directive is a deny directive which includes a deny command and a number of parameters . The parameters further include at least one of a set of addressing parameters . The addressing parameters include IP IP PORT IP and IP PORT . IP and IP may be expressed in classless inter domain routing CIDR notation and thus may specify a particular network address or address range. Those addressing parameters indicate the source and destination address port combinations that should be blocked on the network . In other words if all of the addressing parameters are specified the deny directive blocks all network traffic to or from IP IP PORT and from or to IP IP PORT.

The parameters further include PROTOCOL which may specify the particular protocol to drop such as TCP UDP TCP and UDP User Datagram Protocol ICMP or IP. LINKDROP  and LINKDROP  may broaden when applicable the scope of traffic blocking to the link layer address es associated with the targeted traffic to be blocked. In other words all traffic to or from a host may be blocked not just its traffic with a specific IP address. The appropriateness of such an action may depend on physical topology of the network and the role associated with the host hardware using the link layer address e.g. individual wired hosts versus access points or routers .

STYLE specifies a blocking style to be used. Particular blocking styles may include DROP ICMP or RESET. DROP may simply drop matching packets. ICMP may generate for all IP packets ICMP destination unreachable packets that include a code that may be specified in the flow policy directive . Non IP packets may be dropped as with the DROP blocking style. RESET may extend the ICMP blocking style to generate a TCP connection reset when applicable for detected activity instead of generating ICMP destination unreachable messages. If the detected activity is not TCP the response may be the same as for the ICMP blocking style. RESET AFTER may be specified for the ICMP or RESET blocking styles. When the blocking style calls for packet generation e.g. ICMP or RESET not every received trigger packet will generate packet out. Rather a drop rule may be added for each trigger packet to suppress further trigger packets for that fully specified flow. The RESET AFTER parameter may specify the timeout of those fully specified rules.

PRIORITY specifies a priority for the overall flow policy directive . As described above a particular flow policy directive may be translated into a number of packet disposition directives such as flow modification rules . If two flow policy directives are specified with a different PRIORITY then all of the packet disposition directives associated with the lower priority flow policy directive will be of lower priority than all of the packet disposition directives associated with the higher priority flow policy directive i.e. flow policy directives of differing priorities will not have any overlap in actual flow modification priorities . In one embodiment the PRIORITY may be specified in an absolute range from zero to UINT MAX 4 equal to 16383 inclusive. In that embodiment each of the packet disposition directives may be assigned one of four priority levels relative to the priority of the flow policy directive . For example relative priority levels as shown in Table 2 may be used 

SWITCH may specify a particular switch of the network to which the flow policy directive applies. If left unspecified the default may be to use the first switch listed by the network flow controller .

TIMEOUT may specify the minimum amount of time that an installed flow policy directive remains active in the network . A value of zero the default may mean that the directive remains active indefinitely. The security actuator may subtract elapsed time from a non zero time out value when installing a new flow modification rule based on a trigger event so that all directive related rules expire at the same time . Note that because flow policy directives may persist for longer than the lifespan of the security actuator the security actuator may use persistent storage e.g. the data storage device described below to record any packet disposition directives that it installs as a state recovery mechanism.

As described above the deny flow policy directive may be submitted to the security actuator and then the security actuator generates a number of packet disposition directives . In the illustrative method the generated packet disposition directives are represented by pseudocode . As shown in the pseudocode the security actuator may generate two packet disposition directives to implement the deny flow policy directive . The first packet disposition directive may drop data from IP to IP and the second packet disposition directive may drop data from IP to IP . As shown in the pseudocode each of the packet disposition directive is constructed by defining a match parameter specifying network addresses protocol transport port and other information a number of attributes and a set of actions that all may be based on the parameters supplied with the flow policy directive . Note that the action may be empty meaning that matching packets are dropped or include the OFPAT OUTPUT OFPP CONTROLLER action meaning that matching packets are forwarded to the network flow controller for further analysis. Thus the packet disposition directives may be flow modification rules or trigger rules. Trigger rules may be used for example to implement linkdrop attributes or for certain blocking styles. After installing the packet disposition directives the security actuator may transmit a response to the source of the flow policy directive as described above in connection with block of .

Referring now to an embodiment of a method for processing trigger packets received in response to installing packet disposition directives corresponding to a deny flow policy directive is illustrated. Those packet disposition directives may have been generated by the security actuator as described above in connection with . Following receipt of a trigger packet in block the security actuator determines whether a linkdrop parameter e.g. LINKDROP  or LINKDROP  has been requested. If not the method advances to block described below. If a linkdrop parameter has been specified the security actuator generates packet disposition directives as represented by pseudocode .

As illustrated in pseudocode the security actuator may install two packet disposition directives that match traffic from to and from to . The identifiers and represent data layer addresses e.g. MAC addresses included in the trigger packet . Thus by using a trigger rule the security actuator may generate packet disposition directives based on hardware address information discovered dynamically in response to actual traffic flowing over the network . Similar to the pseudocode described above in connection with the action may be empty to block all traffic or may direct traffic to the network flow controller for example to support certain blocking styles. Additionally note that the priority of linkdrop related packet disposition directives is higher than the original trigger rules meaning that the linkdrop rules will have precedence for matching traffic. After installing the packet disposition directives the method advances to block .

In block the security actuator determines whether the flow policy directive has requested an ICMP or RESET blocking style. If not the method is completed. If so the method advances to block in which the security actuator generates a packet out based on the trigger packet as described above. After generating any packet out the security actuator generates a packet disposition directive as shown in pseudocode .

As shown in pseudocode after generating a packet out the security actuator generates a packet disposition directive to drop all data for the specific flow matching the trigger packet . The packet disposition directive thus matches traffic based on the attributes of the trigger packet e.g. source destination protocol hardware addresses etc. . Additionally the packet disposition directive specifies a timeout value corresponding to the TIMEOUT parameter. In other words in use the security actuator generates a packet out in response to a particular flow and then blocks all further traffic matching that flow for some period of time for example one minute. Thus the security actuator may reduce spurious network traffic that may be caused by malicious or incorrect attempts to transmit flows that have been blocked.

Referring now to an embodiment of a method for translating another flow policy directive into a number of associated packet disposition directives is illustrated. The illustrative flow policy directive is a redirect directive which includes a redirect command and a number of parameters . The parameters further include at least one of a set of addressing parameters . The addressing parameters include IP IP PORT IP and IP PORT . The description of those addressing parameters is similar to the addressing parameters described above in connection with and for clarity is not repeated here. Similarly the parameters further include PROTOCOL STYLE RESET AFTER PRIORITY SWITCH and TIMEOUT the description of which is similar to the PROTOCOL STYLE RESET AFTER PRIORITY SWITCH and TIMEOUT of respectively.

The redirect flow policy directive further includes REMAP IP and REMAP PORT . This directive instructs the network to redirect matching network traffic e.g. traffic matching the addressing parameters to the REMAP IP address and REMAP PORT if specified . To implement this directive the security actuator directs the network to rewrite matching traffic from IP IP PORT to IP IP PORT as traffic from IP IP PORT to REMAP IP REMAP PORT and to deny matching traffic from IP IP PORT to IP IP PORT. Further any IP IP PORT to IP IP PORT traffic from pre existing TCP connections may be blocked according to STYLE .

REDIRECT IDLE specifies how long flow specific redirect packet disposition directives must be idle before they are removed. The packet disposition directive idle timeout may be set to this value and the hard timeout value may be set to zero. For example the default for REDIRECT IDLE may be 5 minutes and zero i.e. indefinite may not be allowed. Thus in this situation the security actuator may create packet disposition directives that can exceed the TIMEOUT duration. As such the flow specific redirect packet disposition directives may remain active on the network even when the corresponding flow policy directive is canceled and time out only when the specific flow becomes idle.

As described above the deny flow policy directive may be submitted to the security actuator and then the security actuator generates a number of packet disposition directives . In the illustrative method the generated packet disposition directives are represented by pseudocode . As shown in the pseudocode the security actuator may generate one or more packet disposition directives to drop data from IP to IP as described above in connection with . The security actuator may also generate two packet disposition directives that function as trigger rules. The first packet disposition directive may trigger on data from IP to IP and the second packet disposition directive may trigger on traffic from REMAP IP to IP . Those trigger rules may also match packets based on the supplied values of the parameters as shown. After installing the packet disposition directives the security actuator the security actuator may transmit a response to the source of the flow policy directive as described above in connection with block of .

Referring now to an embodiment of a method for processing trigger packets received in response to installing packet disposition directives corresponding to a redirect flow policy directive is illustrated. Those packet disposition directives may have been generated by the security actuator as described above in connection with . In block the security actuator determines whether the trigger packet is recognized as being addressed between IP and REMAP IP . If not the method generates packet disposition directives as shown in pseudocode described below in connection with . If the trigger packet is recognized the security actuator generates packet disposition directives as shown in pseudocode .

As shown in pseudocode the security actuator generates two packet disposition directives to rewrite data. The first packet disposition directive rewrites data packets originally addressed from IP to IP to be addressed from IP to REMAP IP and forwarded accordingly. The second packet disposition directive rewrites data packets originally addressed from REMAP IP to IP to be addressed from IP to IP and forwarded accordingly. The packet disposition directives may include further match attributes based on the attributes of the trigger packet as shown e.g. network address hardware address port etc. .

Referring now to if the trigger packet is not recognized the security actuator may generate one or more packet disposition directives as shown in pseudocode . As shown the packet disposition directive passes through data to IP from REMAP IP in other words matching data is forwarded across the network as normal without being rewritten or redirected.

As described above the security actuator may be capable of implementing numerous other flow policy directives . For example the security actuator may implement a quarantine flow policy directive . The quarantine flow policy directive may block all general traffic through a switch to and or from a specified quarantined IP address with the exception that all web i.e. port 80 requests may be redirected to a specified notifier IP address port. Additionally DNS requests may be redirected to a particular DNS IP address which may be the same as the notifier IP address . Thus the notifier may return web pages informing the user of the quarantine providing remediation instructions requesting the user to contact administrative support or providing other information. To implement the quarantine directive the security actuator may generate packet disposition directives similar to the deny and redirect directives described above in connection with .

For example the security actuator may add at min priority two trigger rules for source or destination equal to the quarantined IP. The security actuator may determine whether received trigger packets are related to DNS port 53 for TCP and UDP or web port 80 and if so handle the trigger packet in the same was as for a redirect directive with STYLE set. In some embodiments DNS traffic port 53 TCP and UDP may be handled by pass through rules rather than being re written or blocked. This may allow a host to complete DNS normally in preparation for accessing web pages which will then be redirected to the notifier or blocked if not using port 80 . The security actuator may handle all other traffic the same as for a deny directive with the specified LINKDROP  LINKDROP  and or STYLE . It should be noted that when LINKDROP  and or LINKDROP  are specified ARP requests and ARP replies to and from the quarantined IP may still be allowed.

In some embodiments the security actuator may implement other flow policy directives as shown in Table 3 

Referring now to a simplified block diagram of an exemplary computing environment in which the security actuator may be implemented is shown. The illustrative environment includes a computing system which may implement the network flow controller the security actuator the security mediation service one or more of the network security applications the vulnerable flow prevention director and or the vulnerability scanner on a single computing device or multiple computing devices that are coupled to the network shown as a network in .

The illustrative computing system includes at least one processor e.g. a microprocessor microcontroller digital signal processor etc. memory and an input output I O subsystem . The computing system may be embodied as any type of computing device s such as a personal computer e.g. desktop laptop tablet smart phone body mounted device etc. a server an enterprise computer system a network of computers a combination of computers and other electronic devices or other computing devices. Although not specifically shown it should be understood that the I O subsystem typically includes among other things an I O controller a memory controller and one or more I O ports. The processor and the I O subsystem are communicatively coupled to the memory . The memory may be embodied as any type of suitable computer memory device e.g. volatile memory such as various forms of random access memory .

The I O subsystem is communicatively coupled to a number of components including one or more data storage devices and a communication subsystem . Although not specifically shown one or more user input devices e.g. keyboard touch screen etc. and output devices e.g. a display may be coupled to the I O subsystem to allow a human operator such as a network administrator to for example establish and update a network security policy. The data storage may include one or more hard drives or other suitable data storage devices e.g. flash memory memory cards memory sticks and or others . In some embodiments some or all of the packet disposition directives generated by the security actuator may reside in the data storage device . In some embodiments portions of systems software e.g. an operating system etc. framework middleware e.g. APIs object libraries etc. and or the security actuator reside at least temporarily in the data storage device . Portions of systems software framework middleware and or the security actuator may be copied to the memory during operation of the computing system for faster processing or other reasons. In some embodiments portions of the security actuator may be distributed across multiple computing devices e.g. servers on the network .

The communication subsystem communicatively couples the computing system to the network which may be a local area network wide area network personal cloud enterprise cloud public cloud and or the Internet for example. Accordingly the communication subsystem may include one or more wired or wireless network interface cards or adapters for example as may be needed pursuant to the specifications and or design of the particular computing system . The communication subsystem may be used by the network flow controller to communicate with the network switches in order to control and define the dynamically programmable network . For example the communication subsystem may include one or more dedicated control channels for communication with one or more of the network switches .

The computing system may include other components sub components and devices not illustrated in for clarity of the description. In general the components of the computing system are communicatively coupled as shown in by electronic signal paths which may be embodied as any type of wired or wireless signal paths capable of facilitating communication between the respective devices and components.

Illustrative examples of the technologies disclosed herein are provided below. An embodiment of the technologies may include any one or more and any combination of the examples described below.

According to at least one embodiment of this disclosure a security service for a dynamically programmable computer network is embodied in one or more computer readable storage media and includes a plurality of instructions that when executed cause a computing device to receive a flow policy directive from a flow policy directive source the flow policy directive including a command and a set of parameters wherein the command and the set of parameters describe a flow policy objective for the dynamically programmable computer network convert the flow policy directive to one or more packet disposition directives the one or more packet disposition directives to cause one or more network switches of the dynamically programmable computer network to implement the flow policy directive to control flow of communications across the dynamically programmable computer network compare the one or more packet disposition directives to a set of currently active flow rules of the dynamically programmable computer network and in response to the comparison of the one or more packet disposition directives to the set of currently active flow rules add the one or more packet disposition directives to the set of currently active flow rules.

In the security service to convert the flow policy directive may include to in response to a flow policy directive to modify communications associated with a network service identifier create a plurality of flow modification rules to cause the one or more network switches to modify the communications associated with the network service identifier. In the security service to receive the flow policy directive may include to receive a flow policy directive to deny communications associated with a network service identifier comprising one or more of a network address or a network port and to convert the flow policy directive may include to in response to the flow policy directive create a plurality of flow modification rules to drop data communications associated with the network service identifier. In the security service to convert the deny flow policy directive may include to i create a first flow modification rule to drop data communications addressed from the network service identifier and ii create a second flow modification rule to drop data communications addressed to the network service identifier. In the security service to receive the flow policy directive may include to receive a deny flow policy directive to deny communications associated with a network service identifier comprising one or more of a network address or a network port and to convert the flow policy directive may include to in response to the deny flow policy directive create a plurality of trigger rules to cause the one or more network switches to i forward to the computing device a trigger packet associated with the network service identifier and ii drop data communications associated with the network service identifier. In the security service to receive the flow policy directive may include to receive a redirect flow policy directive to redirect communications associated with a network service identifier to a redirect internet address the network service identifier to include one or more of a network address or a network port and to convert the redirect flow policy directive may include to in response to the redirect flow policy directive create a plurality of trigger rules to cause the one or more network switches to redirect a trigger packet associated with the network service identifier. In the security service to receive the flow policy directive may include to receive a quarantine flow policy directive to quarantine communications associated with a network service identifier to a notifier internet address the network service identifier to include one or more of a network address or a network port and to convert the flow policy directive may include to in response to the quarantine flow policy directive create a plurality of trigger rules to cause the one or more network switches to forward to the computing device a trigger packet associated with the network service identifier.

The security service may create a trigger rule to cause the one or more network switches to forward a trigger packet to the computing device and create in response to receipt of a trigger packet a flow modification rule to cause the one or more network switches to control flow of communications across the dynamically programmable computer network. The security service may receive a flow policy directive to deny communications associated with a network service identifier comprising one or more of a network address or a network port create a first flow modification rule to drop data communications addressed from the network service identifier and create a second flow modification rule to drop data communications addressed to the network service identifier. The security service may receive a flow policy directive to deny communications associated with a network service identifier comprising one or more of a network address or a network port create a first trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed from the network service identifier create a second trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed to the network service identifier create in response to receipt of a trigger packet a first flow modification rule to drop data communications addressed from a hardware address of the trigger packet associated with the network service identifier and create in response to the receipt of the trigger packet a second flow modification rule to drop data communications addressed to the hardware address of the trigger packet wherein the first flow modification rule and the second flow modification rule have a higher priority than the first trigger rule and the second trigger rule.

The security service may receive a flow policy directive to deny communications associated with a network service identifier comprising one or more of a network address or a network port create a first trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed from the network service identifier create a second trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed to the network service identifier and create in response to receipt of a trigger packet a first flow modification rule to drop data communications that match the trigger packet wherein the security actuator further comprises a plurality of instructions that when executed cause the computing device to generate a packet out in response to the receipt of the trigger packet and wherein the first flow modification rule has a higher priority than the first trigger rule and the second trigger rule. The security service may generate an ICMP destination unreachable packet or a TCP connection reset packet.

The security service may receive a flow policy directive to redirect communications associated with a network service identifier to a redirect internet address the network service identifier to include one or more of a network address or a network port create a first trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed from the network service identifier create a second trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed from the redirect internet address create in response to receipt of a trigger packet a first flow modification rule to forward to the redirect internet address data communications addressed from the network service identifier and addressed to a second network service identifier of the trigger packet and modify the data communications to identify the redirect internet address and create in response to the receipt of the trigger packet a second flow modification rule to forward to the network service identifier data communications addressed from the redirect internet address and addressed to the network service identifier and modify the data communications to identify the second network service identifier wherein the first flow modification rule and the second flow modification rule have a higher priority than the first trigger rule and the second trigger rule.

The security service may receive a flow policy directive to quarantine communications associated with a network service identifier to a notifier internet address the network service identifier to include one or more of a network address or a network port create a first trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed from the network service identifier create a second trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed to the network service identifier create in response to receipt of a trigger packet associated with a predefined network service a first flow modification rule to forward to the notifier internet address data communications addressed from the network service identifier and modify the data communications to identify the notifier internet address and create in response to the receipt of the trigger packet a second flow modification rule to forward to the network service identifier data communications addressed from the notifier internet address and modify the data communications to identify the second network service identifier wherein the first flow modification rule and the second flow modification rule have a higher priority than the first trigger rule and the second trigger rule.

According to at least one embodiment of this disclosure a method for actuating flow policy directives in a dynamically programmable computer network includes with at least one computing device receiving a flow policy directive from a flow policy directive source converting the flow policy directive to one or more packet disposition directives to implement the flow policy directive at one or more network switches of the dynamically programmable computer network and transmitting the one or more packet disposition directives to a flow controller of the dynamically programmable computer network the flow controller to mediate conflicts between packet disposition directives and transmit packet disposition directives to network switches of the dynamically programmable network. The flow policy directive may include a command and a set of parameters the command and the set of parameters describing a flow policy objective for a dynamically programmable computer network and the one or more packet disposition directives may be communicated from the flow controller to the one or more network switches to cause the one or more network switches to control flow of communications across the dynamically programmable computer network to implement the flow policy directive. The method may include creating a trigger rule to cause the one or more network switches to forward a trigger packet to the computing device. The method may further include creating in response to receiving the trigger packet a flow modification rule to cause the one or more network switches to control flow of communications across the dynamically programmable computer network.

The method may include receiving a flow policy directive to deny communications associated with a network service identifier comprising one or more of a network address or a network port creating a first flow modification rule to drop data communications addressed from the network service identifier and creating a second flow modification rule to drop data communications addressed to the network service identifier.

The method may include receiving a flow policy directive to redirect communications associated with a network service identifier to a redirect internet address the network service identifier comprising one or more of a network address or a network port creating a first trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed from the network service identifier creating a second trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed from the redirect internet address creating in response to receiving a trigger packet a first flow modification rule to forward to the redirect internet address data communications addressed from the network service identifier and addressed to a second network service identifier of the trigger packet and modify the data communications to identify the redirect internet address and creating in response to receiving the trigger packet a second flow modification rule to forward to the network service identifier data communications addressed from the redirect internet address and addressed to the network service identifier and modify the data communications to identify the second network service identifier wherein the first flow modification rule and the second flow modification rule have a higher priority than the first trigger rule and the second trigger rule.

The method may include receiving a flow policy directive to quarantine communications associated with a network service identifier to a notifier internet address the network service identifier comprising one or more of a network address or a network port creating a first trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed from the network service identifier creating a second trigger rule to cause the one or more network switches to forward to the computing device a trigger packet addressed to the network service identifier creating in response to receiving a trigger packet associated with a predefined network service a first flow modification rule to forward to the notifier internet address data communications addressed from the network service identifier and modify the data communications to identify the notifier internet address and creating in response to receiving the trigger packet a second flow modification rule to forward to the network service identifier data communications addressed from the notifier internet address and modify the data communications to identify the second network service identifier wherein the first flow modification rule and the second flow modification rule have a higher priority than the first trigger rule and the second trigger rule.

According to at least one embodiment of this disclosure a security actuator for actuating flow policy directives in a dynamically programmable computer network includes a plurality of instructions embodied in one or more computer readable storage media that when executed cause a computing device to receive a flow policy directive from a source of flow policy directives and in response to the flow policy directive initiate an automated mechanism to communicate with one or more network switches of the dynamically programmable computer network the automated mechanism to monitor for packets having one or more criteria matching a trigger rule and in response to a packet having a criterion matching the trigger rule cause the one or more network switches to implement the flow policy directive.

The automated mechanism may cause the one or more network switches to forward the matching packet to the security actuator. The automated mechanism may cause the security actuator to in response to the matching packet create one or more packet disposition directives based on the flow policy directive. The security actuator may in response to a determination by the automated mechanism that a packet has a criterion matching the trigger rule transmit a packet disposition directive to a security mediator of the dynamically programmable network. The security actuator may create a plurality of packet disposition directives in response to the flow policy directive and the packet disposition directives may include a trigger rule to cause the one or more network switches to forward to the security actuator a trigger packet addressed from the network service identifier a flow modification rule to one of drop forward deny and redirect data communications that match the trigger packet addressed from the network service identifier. The flow modification rule may have a higher priority than the trigger rule. The security actuator may generate a packet out in response to receipt of the trigger packet. The packet disposition directives may include a second trigger rule to cause the one or more network switches to forward to the security actuator a trigger packet addressed to the network service identifier and a flow modification rule to one of drop forward deny and redirect data communications that match the trigger packet addressed to the network service identifier. The security actuator may create a plurality of packet disposition directives in response to the flow policy directive and the packet disposition directives may include a trigger rule to cause the one or more network switches to forward to the security actuator a trigger packet addressed from a network service identifier and a flow modification rule to forward to an internet address data communications addressed from the network service identifier. The flow modification rule may modify the data communications to identify the internet address.

In the foregoing description numerous specific details examples and scenarios are set forth in order to provide a more thorough understanding of the present disclosure. It will be appreciated however that embodiments of the disclosure may be practiced without such specific details. Further such examples and scenarios are provided for illustration and are not intended to limit the disclosure in any way. Those of ordinary skill in the art with the included descriptions should be able to implement appropriate functionality without undue experimentation.

References in the specification to an embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is believed to be within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly indicated.

Embodiments in accordance with the disclosure may be implemented in hardware firmware software or any combination thereof. Embodiments may also be implemented as instructions stored using one or more machine readable media which may be read and executed by one or more processors. A machine readable medium may include any mechanism for storing or transmitting information in a form readable by a machine e.g. a computing device or a virtual machine running on one or more computing devices . For example a machine readable medium may include any suitable form of volatile or non volatile memory.

Modules data structures and the like defined herein are defined as such for ease of discussion and are not intended to imply that any specific implementation details are required. For example any of the described modules and or data structures may be combined or divided into sub modules sub processes or other units of computer code or data as may be required by a particular design or implementation of the security actuator .

In the drawings specific arrangements or orderings of schematic elements may be shown for ease of description. However the specific ordering or arrangement of such elements is not meant to imply that a particular order or sequence of processing or separation of processes is required in all embodiments. In general schematic elements used to represent instruction blocks or modules may be implemented using any suitable form of machine readable instruction and each such instruction may be implemented using any suitable programming language library application programming interface API and or other software development tools or frameworks. Similarly schematic elements used to represent data or information may be implemented using any suitable electronic arrangement or data structure. Further some connections relationships or associations between elements may be simplified or not shown in the drawings so as not to obscure the disclosure.

This disclosure is to be considered as exemplary and not restrictive in character and all changes and modifications that come within the spirit of the disclosure are desired to be protected.

