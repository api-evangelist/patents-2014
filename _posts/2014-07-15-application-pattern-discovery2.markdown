---

title: Application pattern discovery
abstract: API associations among a plurality of service application programming interfaces may be identified by analyzing service API call logs, which contain data associated with invocation of the plurality of application programming interfaces by a plurality of applications, wherein sets of APIs that are determined to be called together are identified. For a set of service APIs, a plurality of applications that invoke the APIs in the set is identified. A sequence of API calls by an application in the plurality of applications is identified, wherein multiples sequences of APIs are identified, one sequence of API calls identified respectively for one application in the plurality of applications. An application pattern is determined based on the multiple sequences of service APIs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569288&OS=09569288&RS=09569288
owner: International Business Machines Corporation
number: 09569288
owner_city: Armonk
owner_country: US
publication_date: 20140715
---
The present application relates generally to computers and computer applications and more particularly to discovering application pattern in computer applications.

A developer may program computer applications using a plurality of service application programming interfaces APIs . An application pattern may be discovered by analyzing applications that developers have created and identifying reusable configurable composition of service APIs for example for replicable business scenarios. In an API centric application the composition of services represents an orchestration and provides a perspective in the application pattern. In the current approach to creating an application pattern experts create a pattern based on existing applications.

A method for application pattern discovery in one aspect may comprise receiving application programming interface API call logs. The application programming interface call logs may comprise data associated with invocation of a plurality of application programming interfaces by a plurality of applications. The method may also comprise identifying API associations among said plurality of application programming interfaces by analyzing the API call logs. The identifying of the API associations identifies sets of APIs that are determined to be called together. The method may also comprise selecting a set of APIs from the sets of APIs. The method may further comprise identifying a plurality of applications that invoke the set of APIs. The method may also comprise identifying a sequence of API calls by an application in the plurality of applications wherein multiples sequences of APIs are identified one sequence of API calls identified respectively for one application in the plurality of applications. The method may also comprise determining an application pattern based on the multiple sequences of APIs.

A system for application pattern discovery in one aspect may comprise a storage device storing application programming interface API call logs. The application programming interface call logs may comprise data associated with invocation of a plurality of application programming interfaces by a plurality of application. A hardware processor may be operable to identify API associations among said plurality of application programming interfaces by analyzing the API call logs wherein the identifying API associations identifies sets of APIs that are determined to be called together. The hardware processor may be further operable to select a set of APIs from the sets of APIs. The hardware processor may be further operable to identify a plurality of applications that invoke the set of APIs. The hardware processor may be further operable to identify a sequence of API calls by an application in the plurality of applications wherein multiples sequences of APIs are identified one sequence of API calls identified respectively for one application in the plurality of applications. The hardware processor may be further operable to determine an application pattern based on the multiple sequences of APIs.

A computer readable storage medium storing a program of instructions executable by a machine to perform one or more methods described herein also may be provided.

Further features as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. In the drawings like reference numbers indicate identical or functionally similar elements.

In one embodiment of a methodology of the present disclosure application patterns may be discovered from service application program interface API invocation records and or logs on one or more runtime platforms. For example a computer platform may maintain numerous records about which service APIs are invoked by applications and when. Such records may implicate many similar usage scenarios and may be used as a source for application pattern discovery.

In a cloud environment the set of service APIs found or discovered according to the methodology of the present disclosure may be bundled together for various purposes such as marketing monitoring and or metering. Users may be enabled to select the APIs in the discovered application pattern e.g. in a cloud environment to bundle together to create a user defined services system.

In the present disclosure APIs refer to service APIs such as REST resources. For example a service API is an interface of a web service e.g. Simple Object Access Protocol SOAP Representational state transfer REST . RESTful APIs are examples of service APIs. A pattern refers to a preset composition of service APIs. An application pattern may comprise a set of APIs and the sequence in which those APIs are used including input and output mappings of the APIs in the sequence.

In one embodiment of the present disclosure a pattern can be provided as an application template using service APIs where the API binding and configuration properties have been parameterized.

Consider for example a product recommendation application. An application may analyze a vendor s catalog and also a customer purchase history and based on the analysis provide product recommendation to the customer. In this example application there may be two APIs an API that returns the vendor catalog and another API that returns the customer purchase history. The application may also include additional code that determines and provides recommended products. In this example application a pattern may be discovered that includes get customer purchase history API and get vendor s catalog API. The product recommendation algorithm is reusable as long as the algorithm receives two pieces of information e.g. vendor catalog information and customer purchase history information . That is the algorithm may be able to function for any catalog and any purchase history. Application pattern may thus be parameterized for different vendors e.g. for reusability. For instance parameters may include different URL for accessing different vendor catalog and different customer purchase history. Another parameter may include an API key for accessing different APIs. The key here is used as a way to authenticate the person who calls the API. A developer who is interested in developing a similar product recommendation application may take this application pattern and use it by mapping or providing parameters that are specific to the developer s application e.g. a specific vendor catalog and a specific customer purchase history data.

In another aspect the application pattern discovery may also include a sequence of APIs used and how an output from one API is used as an input to a subsequent API that is invoked e.g. mappings between the APIs for example from one call to another call. For example continuing with the product recommendation application example the pattern discovery may include information that specific product identifiers were retrieved from the get customer purchase history API and passed to the get vendor s catalog API.

An application pattern discovery methodology in one embodiment of the present disclosure may take as inputs an API catalog and API call log. An API catalog may include information such as API metadata. The API catalog may also include application metadata if available. API metadata may describe an API for example resources format request messages and response messages. Application metadata may contain a description of an application and keywords used in the application and or others. An API call log may be stored by a runtime platform for example responsive to an application accessing calling or invoking an API. An API call log may contain information about the invocation of the API such as input and output messages timestamp time of the invocation which application called the API what API call preceded this API what API was invoked subsequent to this API and other information. An example of logged information is a hypertext transfer protocol HTTP server log e.g. 15 Mar 2013 19 50 13 0100 POST http www.dummy.com exampleservice. This log identifies the time the POST request was sent and the uniform resource locator URL the POST was sent with and the API in this example exampleservice . Such log may also identify response and request messages. HTTP request for example shows a request a response the name of the application and time. Another example may include completed HTTP requests and responses to obtain this type of information a browser side plugin may be utilized . Other examples of API call log may include client activity such as operation name performer status and timestamp process information such as calling sequence input output transforming activity and others.

The application pattern discovery methodology in one embodiment of the present disclosure may output the following Set of application patterns with each application pattern representing a discovered API composition. A ranking function may be used to select a subset of patterns discovered e.g. to reduce the list of all discovered application patterns.

The application pattern discovery methodology in one embodiment of the present disclosure may generate the application pattern skeleton and API dependencies by analyzing the APIs called in association by applications serving same business scenarios.

Referring back to an API Association Analyzer analyzes API associations from the data obtained in API Call log . The API Association Analyzer may also utilize data associated with application profile e.g stored as App Profile shown at . The API Association Analyzer identifies possible candidate patterns of APIs e.g. a set of APIs. For instance the API Association Analyzer identifies sets of APIs that are used together in a number of applications.

A set of APIs may be selected for processing at a time. In one embodiment each set of APIs may be processed iteratively.

An API Call Sequence Analyzer reverse engineers API call sequence and identifies an order in which the APIs are called in the application that uses the selected set of APIs. The reverse engineering in one aspect may discover inputs and output of the APIs and map one or more inputs of an API with one or more outputs of another API. The mappings generate a sequence which estimates the invocation order of the APIs invoked by the applications that use the APIs in the set. The sequence of APIs may include the APIs in the selected set and other APIs infrequent APIs that the application invokes. Such sequence may be generated for all of the applications that use the selected set of APIs resulting in a plurality of such sequences. Based on the plurality of sequences an application pattern an average of all the sequences may be built.

A Service Orchestration Analyzer analyzes the API call sequence and generates an application pattern skeleton of the APIs. The Service Orchestration Analyzer e.g. takes the application pattern built by the API Call Sequence Analyzer and determines variables that are inputs and outputs to the application pattern.

An App Pattern Service Dependency Analyzer determines API dependencies for an application pattern. For example the application pattern may include those APIs that are to be used as is and one or more generic APIs. The generic APIs are to be replaced with specific APIs to meet the developer s objective. The App Pattern Service Dependency Analyzer discovers and recommends those specific APIs. The recommendation may be based on which specific APIs the applications have used in the past e.g. from the history of API logs.

An App Pattern Creator takes the results e.g. the discovered application pattern and stores the result in an App Pattern Repository . The result for example may be stored in the form of the application pattern inputs and outputs to the APIs in the application pattern and the description of the functionality of the application pattern. The App Pattern Creator may also have user interface functionalities that allow a user e.g. application creator to browse through the available application patterns and select one or more for developing an application.

At API calls identified at are reversed engineered to identify the order of the API calls e.g. by an API call sequence analyzer component shown in . For example the method may include identifying a sequence of API calls by an application in the plurality of applications wherein multiples sequences of APIs are identified one sequence of API calls identified respectively for one application in the plurality of applications. Identifying the order or sequence of API calls is further described with reference to below.

At API call sequence is determined for an application pattern. For instance an application pattern is determined based on the multiple sequences of APIs identified at . Determining an application pattern based on the multiple sequences of APIs is further described with reference to below.

At analysis of service orchestration for application pattern is performed e.g. by a service orchestration analyzer component shown in . At API dependencies for application pattern are determined e.g. by an app service dependency analyzer component shown in .

API associations may be identified e.g. at by using server logs e.g. stored in API call log and identifying a set of service APIs called by a plurality of applications being considered in the API association. Frequent service API sets may be identified by applications e.g. those applications serving the same or similar business scenario using algorithms such as a priori or FP growth. The degree of frequency may be preset or predefined. For example a set of APIs occurring together a predefined number of times may be determined as a frequent set. In addition a priori knowledge may be used ahead of time of possible orderings among APIs based on their description to validate the discovered APIs sets. From the sets of discovered APIs a set is selected for processing in the next steps in application pattern discovery of the present disclosure. In one embodiment the next steps may be iterated loop through for all sets. All applications that use selected API set may be considered. Service APIs that are used by applications but are not part of the frequent set are referred to as infrequent APIs.

Analyzing service orchestration may also include observing the variables transformation in the log based on a number of API calls. Observing the variables transformation the sequence and logic among APIs can be identified. For example API log can be represented in the following format instanceID variable endpointURL activity input data output data variable endpointURL activity input data . . . Variable has its name and data type. If a variable always maps to the output data of one API and the input data of another API the two APIs are sequential. If a variable sometimes maps to one API s input data and sometimes maps to another API s input data then these APIs are in if else or case relationship. If the sequence of APIs has been determined e.g. API is ahead of API while in the log the variable following API maps to the input data of API then it can be said that they are in a loop. If a variable is split to map to different APIs input data then the logic before these API calls is split. If several APIs output data is merged into one variable the logic after these APIs is merged. The service orchestration that shows the logic of the application pattern e.g. based on the variables transformation may be presented to a user of the pattern e.g. to help in understanding what the pattern does and how it works. In another aspect the pattern may be presented to the user without this service orchestration e.g. as a black box.

The following is an example algorithm that may be used to generate orderings partial or bidirectional among APIs ahead of time only from their description in one embodiment of the present disclosure. This algorithm and the resulting ordering may supplement the sequence determined according to the method described above 

A methodology for application pattern discover in one embodiment may identify the API association in the context of similar business scenarios and identify the API sequence by combining the API interface mapping and API invocation log analysis. While known technique rely on an existing execution instance identifier to determine a workflow API calls do not provide such as identifier. The methodology of the present disclosure that performs input and output mapping discovery allows for determining workflow and application pattern discovery.

A system may be provided with one or more computers and a database having a plurality of service API records. A runtime platform may hosts applications built by composing above service APIs. The service API calls made by the applications are logged in the database or other storage. A process running on the one or more computers identifies service API associations reverse engineers service API call sequences determines patterns of service API call sequences application pattern determines API dependencies for application pattern. In addition the discovered API dependencies may be validated with description induced API dependencies. For example if API description that describes the function of the API and the inputs and outputs the description may be parsed and compared again the discovered application pattern to validate the pattern and dependencies.

The computer system may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. The computer system may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

The components of computer system may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor . The processor may include an application pattern discovery module that performs the methods described herein. The module may be programmed into the integrated circuits of the processor or loaded from memory storage device or network or combinations thereof.

Bus may represent one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system may include a variety of computer system readable media. Such media may be any available media that is accessible by computer system and it may include both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory or others. Computer system may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media e.g. a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces.

Computer system may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system and or any devices e.g. network card modem etc. that enable computer system to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces .

Still yet computer system can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system. Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements if any in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

