---

title: System and method for providing multtenant access to shared resources
abstract: In one embodiment, a method includes maintaining a domain information cache. The method further includes receiving credentials from a client system. The credentials correspond to a user of the client system. The method also includes storing the credentials in a security cookie. In addition, the method includes, based, at least in part, on the domain information cache, resolving the credentials to an authentication server associated with a domain of the user. Also, the method includes authenticating, using the credentials, an identity of the user with the authentication server. Additionally, the method includes, responsive to successful authentication, building a list of groups and users to which the user belongs. Moreover, the method includes compiling a list of authorized resources to which the user has access. In addition, the method includes providing the list of authorized resources to the client system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09444808&OS=09444808&RS=09444808
owner: Dell Software Inc.
number: 09444808
owner_city: Aliso Viejo
owner_country: US
publication_date: 20140130
---
This patent application incorporates by reference the entire disclosure of a U.S. patent application Ser. No. 14 169 130 and filed on Jan. 30 2014.

The present invention relates generally to information management and more particularly but not by way of limitation to systems and methods for multitenant management of domains.

Many companies take advantage of virtualization solutions to consolidate several specialized physical servers and workstations into fewer servers running virtual machines. Each virtual machine can be configured with its own set of virtual hardware e.g. processor memory ports and the like such that specialized services that each of the previous physical machines performed can be run in their native operating system. In particular a virtualization layer or hypervisor allocates the computing resources of one or more host servers into one or more virtual machines and further provides for isolation between such virtual machines. In such a manner the virtual machine is a representation of a physical machine by software.

Virtualization solutions can be adapted to provide virtual desktop computing VDC . In VDC systems each virtual machine can represent a virtual desktop which can be accessed remotely by a client machine. By providing virtual desktops VDC systems can allow users to access their applications and data from any remote computing device. VDC systems also centralize and streamline desktop administration for IT administrators.

Terminal Services is a MICROSOFT WINDOWS component that provides benefits similar to the benefits of VDC systems. A machine running Terminal Services is a Terminal Server which can act like a mainframe multi user operating system. As such the Terminal Server can allow multiple concurrent users to start a remote interactive Windows session. Like VDC systems Terminal Servers centralize user application and data allowing remote access and efficient IT administration.

Authentication to a virtual desktop or Terminal Server can be performed using single sign on authentication. Single sign on authentication is a technique that can reduce or eliminate credentials re prompting each time a user accesses a computing resource such as a virtual desktop Terminal Server session or application. Single sign on authentication is not easily implemented in a multitenant setting involving for example multiple customers or organizations. Typical solutions can give users visibility into domains of other organizations which can pose a security risk.

Moreover as the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

In one embodiment a method is performed on a multitenant shared resources system. The method includes maintaining a domain information cache. The domain information cache includes domain information for each of a plurality of managed domains. At least a portion of the plurality of managed domains have independent security boundaries. The method further includes receiving credentials from a client system. The credentials correspond to a user of the client system. The method also includes storing the credentials in a security cookie. In addition the method includes based at least in part on the domain information cache resolving the credentials to an authentication server associated with domain of the user. Also the method includes authenticating using the credentials an identity of the user with the authentication server. Additionally the method includes responsive to successful authentication building a list of groups and users to which the user belongs. Moreover the method includes compiling a list of authorized resources to which the user has access. In addition the method includes providing the list of authorized resources to the client system.

In one embodiment an information handling system includes a processing unit wherein the processing unit is operable to implement a method. The method includes maintaining a domain information cache. The domain information cache includes domain information for each of a plurality of managed domains. At least a portion of the plurality of managed domains have independent security boundaries. The method further includes receiving credentials from a client system. The credentials correspond to a user of the client system. The method also includes storing the credentials in a security cookie. In addition the method includes based at least in part on the domain information cache resolving the credentials to an authentication server associated with domain of the user. Also the method includes authenticating using the credentials an identity of the user with the authentication server. Additionally the method includes responsive to successful authentication building a list of groups and users to which the user belongs. Moreover the method includes compiling a list of authorized resources to which the user has access. In addition the method includes providing the list of authorized resources to the client system.

In one embodiment a computer program product includes a non transitory computer usable medium having computer readable program code embodied therein. The computer readable program code is adapted to be executed to implement a method. The method includes maintaining a domain information cache. The domain information cache includes domain information for each of a plurality of managed domains. At least a portion of the plurality of managed domains have independent security boundaries. The method further includes receiving credentials from a client system. The credentials correspond to a user of the client system. The method also includes storing the credentials in a security cookie. In addition the method includes based at least in part on the domain information cache resolving the credentials to an authentication server associated with domain of the user. Also the method includes authenticating using the credentials an identity of the user with the authentication server. Additionally the method includes responsive to successful authentication building a list of groups and users to which the user belongs. Moreover the method includes compiling a list of authorized resources to which the user has access. In addition the method includes providing the list of authorized resources to the client system.

In a server based computing environment shared resources such as virtual desktops and or Terminal Servers can be pooled in a centralized data center. Client devices can initiate network connections with the shared resources using a remote protocol thereby allowing these clients to establish interactive computing sessions.

Prior to establishing a connection a client can be authenticated and provided with an authorized list of named resources. These named resources represent shared resources that the client is eligible to access. A network service referred to as a broker can be responsible for authenticating the client and providing it with an authorized list of named resources based at least partly on the client s identity and other network and security attributes. Upon requesting connectivity to a particular named resource the broker can also be responsible for resolving the named resource to an actual network address that the client can use to establish a connection.

As described herein the broker can serve a multitenant function. That is the broker can be responsible for authenticating clients that belong to different organizations or organizational subunits. Generally this multitenancy is manifested by the clients being associated with different domains. In addition to having its ordinary meaning a domain as used herein refers to a collection of network objects such as computers users and devices that share a same directory services database.

Depending on a directory services framework that is utilized domains may be subsumed within a more comprehensive management hierarchy. MICROSOFT Active Directory for example establishes logical divisions of forest tree and domain. A tree is a collection of one or more domains and domain trees in a contiguous name space linked in a transitive trust hierarchy. A forest is a collection of trees that share a common global catalog directory schema logical structure and directory configuration. Typically the forest represents the security boundary within which users computers groups and other network objects are accessible.

One way for the broker to implement the multitenant function mentioned above is to integrate all domains into a common management hierarchy. For example in MICROSOFT Active Directory implementations this can be done by placing all domains within a single forest. Another option is to establish trust relationships between each distinct forest. A downside of these approaches is that a user from a particular domain may be given visibility into other domains that belong to other organizations. Another downside is that the user may be required to select their domain in order to log in.

This disclosure describes systems and methods for allowing the broker to perform the multitenant function without modifying native security boundaries applicable to a given domain. In certain embodiments these systems and methods can be used to enhance single sign on SSO security simplify management of shared resources and more efficiently administer independent domains. For example in some embodiments a shared resources system can identify sources of domain information for a particular domain collect the domain information and cache the domain information for later use. Thereafter users groups organizational units and the like can be assigned to shared resources such as virtual desktops or remote applications. A managed service provider MSP for example can centrally maintain multiple domains on the shared resources system while preserving the security independence of those domains. Advantageously in certain embodiments a client need not specify a domain when initiating a connection with one of the shared resources.

For illustrative purposes examples may be provided herein with respect to MICROSOFT Active Directory. However it should be appreciated that the principles described herein are not so limited. Other directory services such as for example NOVELL eDirectory Red Hat Directory Server APPLE Open Directory Apache Directory Server and or the like can also be utilized.

For purposes of this disclosure an information handling system may include any instrumentality or aggregate of instrumentalities operable to compute calculate determine classify process transmit receive retrieve originate switch store display communicate manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control or other purposes. For example an information handling system may be a personal computer e.g. desktop or laptop tablet computer mobile device e.g. personal digital assistant PDA or smart phone server e.g. blade server or rack server a network storage device or any other suitable device and may vary in size shape performance functionality and price. The information handling system may include random access memory RAM one or more processing resources such as a central processing unit CPU or hardware or software control logic ROM and or other types of nonvolatile memory. Additional components of the information handling system may include one or more disk drives one or more network ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse touchscreen and or a video display. The information handling system may also include one or more buses operable to transmit communications between the various hardware components.

The users of the client systems can be associated with any of managed domains . The managed domains in a typical embodiment are representative of domains for whose users the multitenant shared resources system provides SSO access to the shared resources . In general the shared resources can reside in the managed domains for access by authorized users. However in some cases the shared resources could reside in other domains for example that are trusted by a domain in which a broker server resides. Some or all of the managed domains can be associated with different organizations different divisions within an organization and or the like. In some embodiments the managed domains can be domains of numerous distinct organizations administered by a MSP. As described in greater detail below the managed domains can each have domain information sources with which the broker server communicates. In various embodiments the multitenant shared resources system can exist within one of the managed domains or outside of the managed domains .

The multitenant shared resources system can be implemented by one or more information handling systems such as servers. These information handling systems can be distributed geographically or can be co located. The client systems can include information handling systems such as for example desktop computers workstations personal digital assistants PDAs smart phones other wireless handheld devices laptop computers tablets and the like.

The client systems can further include various software applications for accessing the multitenant shared resources system such as browser software applications stand alone software applications plug ins interfaces combinations of the same and the like. The client systems can access the multitenant shared resources system over a network which can include a local or wide area network LAN or WAN such as an organization s intranet the Internet combinations of the same and the like.

In the depicted embodiment the multitenant shared resources system includes the broker server the shared resources described above and a data store . Each of these components can be implemented in software and or hardware. For example in one embodiment the broker server represents an information handling system that is a physical computing device. In another embodiment the broker server represents a software service executing on an information handling system. Although the various components of the multitenant shared resources system are illustrated separately some or all of them can be implemented together in one or more of the same information handling systems.

The broker server can allow the client systems to communicate with the broker server to obtain access to the shared resources . The example broker server shown includes a resource allocator an authentication module a domain information cache an administration module and a connection cache . The resource allocator can perform load balancing in certain embodiments by allocating shared resources to client systems in a manner that reduces the load on any given resource . The authentication module can provide SSO access for the client systems to the shared resources . The features of the authentication module are described in greater detail below.

In a typical embodiment the administration module is operable to interact with an appropriately credentialed user e.g. an administrator to configure the managed domains identify the domain information sources and collect domain information from the domain information sources . The broker server can store the collected domain information in the domain information cache . The administration module can be resident on the broker server as illustrated the client systems or another information handling system. Exemplary operation of the administration module will be described with respect to the ensuing FIGURES.

By way of example for each of the managed domains the domain information sources are shown to include an authentication server a catalog server and a domain name system DNS server . It should be appreciated that although each managed domain of the managed domains can have the domain information sources as illustrated some or all of the domain information sources may not be exclusive to the managed domain. For example the DNS server can serve more than one domain including more than one of the managed domains . Additionally for simplicity of illustration the authentication server the catalog server and the DNS server are illustrated singly. However it should be appreciated that in various embodiments some or all the managed domains can be associated with more than one of the authentication server the catalog server and or the DNS server .

For a given managed domain of the managed domains the DNS server can resolve a domain name e.g. dell.com to respective network locations e.g. IP addresses of the authentication server and the catalog server . The authentication server can be a directory server that performs authentication for a given managed domain of the managed domains . For example in one embodiment the authentication server is a MICROSOFT Active Directory server such as a domain controller or the like. The catalog server can maintain a global listing of all network objects within an applicable security boundary. Depending on implementation the particular security boundary can be exclusive to the given managed domain or can be of a broader scope. For example in MICROSOFT Active Directory implementations the catalog server can be a global catalog server that provides a global listing of all network objects in a given forest.

The connection cache can include connection information for existing connection sessions with the domain information sources . In certain embodiments the connection cache can cache connections that are established using for example Lightweight Directory Access Protocol LDAP . The connection cache can identify each connection session by a key. The key can include unique composition of information such as for example a particular domain of the managed domains a user name and a password. If for example identification information for a desired connection session matches the key for an existing connection session in the connection cache the broker server can use the connection information for the existing connection session. Otherwise if a new connection session is created information for the new connection session including a corresponding key can be added to the connection cache . Advantageously in certain embodiments such utilization of the connection cache can save the computational and network expense of session connection and teardown.

In certain embodiments the broker server can also implement certain features of the broker described in U.S. Pat. No. 8 560 593 the 593 patent the disclosure of which is hereby incorporated by reference in its entirety. In certain embodiments the broker server can further implement certain features of the broker described in U.S. Pat. No. 8 255 984 the 984 patent the disclosure of which is also hereby incorporated by reference in its entirety.

As described above the shared resources can include virtual desktops Terminal Servers and blade computers such as blade PCs applications combinations of the same and the like. The shared resources can be implemented using any of the features described in the 593 patent or the 984 patent referred to above. Further in embodiments where the shared resources include virtual desktops the shared resources can include virtual machines implemented on a hypervisor. The hypervisor can allow multiple virtual desktops having possibly different operating systems to run on a host computer at the same time.

For instance the hypervisor can include a thin piece of software that runs directly on top of a hardware platform of a host computer and that virtualizes resources of the computer e.g. a native or bare metal hypervisor . In such embodiments the virtual desktops can run with their respective operating systems on the hypervisor without the need for a host operating system. Examples of such bare metal hypervisors can include but are not limited to ESX SERVER by VMware Inc. Palo Alto Calif. XEN and XENSERVER by Citrix Systems Inc. Fort Lauderdale Fla. ORACLE VM by Oracle Corporation Redwood City Calif. HYPER V by Microsoft Corporation Redmond Wash. VIRTUOZZO by Parallels Inc. Switzerland and the like.

In yet other embodiments the virtual desktops can have a hosted architecture in which the hypervisor runs within a host operating system environment. In such embodiments the hypervisor can rely on the host operating system for device support and or physical resource management. Examples of such hosted hypervisors can include but are not limited to VMWARE WORKSTATION and VMWARE SERVER by VMware Inc. VIRTUAL SERVER by Microsoft Corporation PARALLELS WORKSTATION by Parallels Inc. or the like.

In certain embodiments each virtual desktop includes a guest operating system and associated applications. In such embodiments the virtual desktop accesses the resources e.g. privileged resources of the host computer through the hypervisor. Many other variations in virtualization technology are possible.

As described above the authentication module of the broker server can provide users with SSO access to the shared resources . In one embodiment the authentication module receives initial client system requests to access the broker server . For example a user of a client system can log into the broker server with credentials. Credentials can include a user name and password. As will be described in detail below authentication information other than credentials can be used by the client system in some implementations.

Advantageously in certain embodiments the user does not need to expressly identify an appropriate managed domain of the managed domains . Rather the authentication module can receive the user credentials and based at least partly on those user credentials determine the appropriate managed domain. Correspondingly the authentication module can also identify the authentication server for that managed domain. Thereafter the authentication module can access the authentication server to determine whether the user credentials match any credentials stored by the authentication server . If the credentials match the authentication module can then provide the client system with access to one or more of the shared resources without re prompting the user for the credentials.

One mechanism that the authentication module can use to provide client systems with access to shared resources is to provide tickets to the client systems . A ticket can include any piece of data such as metadata. A client system in possession of a valid ticket received from the authentication module can provide the ticket to a shared resource . The shared resource can then send the ticket or some other data derived therefrom to the authentication module to verify that the user of the client system can access the shared resource . The authentication module can perform this verification in some embodiments by sending the user credentials to the shared resource . The authentication module can store user credentials and tickets in the data store or in memory.

In some embodiments the ticket provided by the authentication module is a single use ticket. The client system can use this single use ticket to connect to a single shared resource . A benefit of single use tickets in certain embodiments is that subsequent use of the ticket by a malicious user can result in denial of access to the shared resource . In some embodiments the authentication module can also establish an expiration period or time to live TTL for the ticket such as 30 seconds 60 seconds several minutes or some other time. If a client system does not attempt to connect or does not actually connect with a shared resource before the ticket expires the client system can be denied access to the shared resource . Further the ticket can be encrypted with a single or multi level encryption algorithm.

In the depicted embodiment the client system includes a client SSO application . This application can be implemented in the hardware of the client system . In one embodiment the client SSO application receives user credentials from a login user interface provided by the application or by an operating system of the client system . The SSO application can provide these credentials and other attributes to the broker server . In one embodiment the client SSO application provides a user interface for the user to enter credentials so as to access the broker server . In another embodiment the user provides credentials when logging on to the client system e.g. through an operating system prompt . The client SSO application obtains these credentials from an operating system service and passes the credentials to the broker server .

The broker server like the broker server includes a resource allocator an authentication module a domain information cache an administration module and a connection cache . In the depicted embodiment the authentication module is shown having three modules a credential manager a resource manager and a ticket manager . In certain embodiments the credential manager receives the credentials from the application of the client system . The credential manager can store the credentials in a security cookie or the like. In addition to having its ordinary meaning as used herein the term security cookie can represent contextual information that is maintained by a server. The contextual information maintained by the broker server in the security cookie can include the user s credentials among other things. In one embodiment the credential manager stores the security cookie in the data store or in a memory.

The credential manager can authenticate an identity of a user of the client system with an authentication server using the credentials. In one embodiment the authentication server is a MICROSOFT Active Directory server such as a domain controller or the like. The authentication server can also include LDAP functionality. More generally the authentication server can be a directory server that stores directory data including user credentials and other user information. In response to receiving an authentication request from the credential manager the authentication server can confirm to the credential manager whether the user has valid credentials.

If the user has valid credentials the resource manager can select one or more shared resources that are available for access by the client system . The resource manager can obtain information regarding which resources are available from the resource allocator . For example the resource allocator can apply a load balancing algorithm to determine which shared resources are available and can provide this availability information to the resource manager . The resource manager can communicate to the client system a list of one or more authorized resources that the client system is permitted to access.

In response to receiving such a list the client SSO application can select a target resource e.g. the target resource to which the client system would like to connect. The application can communicate this request to the authentication module . The ticket manager of the authentication module can receive this request. The ticket manager can create a ticket having a reference to the security cookie previously generated by the credential manager in response to receiving the request. The ticket manager can also store the ticket in the data store or in a memory. The ticket manager can provide the ticket to the application of the client system . This ticket can enable the application of the client system to authenticate to the target resource without storing the user credentials and connection information on the client system .

The target resource includes in the depicted embodiment an operating system such as a guest operating system a target security application and other applications . In response to receiving a ticket from the client SSO application the target security application can provide the ticket to the ticket manager of the broker server . In response in one embodiment the ticket manager provides the user credentials stored in the data store to the target security application .

The target resource can include its own authentication mechanism which may be provided by the operating system . The target security application can provide the credentials to the authentication mechanism of the target resource to authenticate the user. In another embodiment the target security application directly authenticates the user without using any services of the operating system . Once authenticated the client system can access the applications of the target resource .

To enhance security in certain embodiments the ticket manager can destroy the ticket so that a subsequent access to the target resource with the ticket does not successfully authenticate. The ticket manager can destroy the ticket for example by deleting the ticket from the data store .

At block the client system initiates a session with an administration module such as the administration module or . For example in various embodiments the administration module can receive administrative credentials from an administrative user of the client system . At block the administration module provides a configuration interface to the client system . The configuration interface can be for example a command line interface a graphical user interface GUI etc. In general the configuration interface enables the administrative user or another authorized user to provide configuration data related to the new domain.

The configuration data can include for example a domain short name e.g. dell a domain long name e.g. dell.com a DNS server IP address list sufficient credentials to request additional domain information e.g. a user name and password and a protocol selection. The protocol selection can specify a protocol to use when communicating with the domain information sources . The protocol selection can specify for example LDAP Secure Lightweight Directory Access Protocol SLDAP and or the like.

In some cases the administration module can provide default data for the configuration data. For example the administration module could specify that a certain protocol such as Lightweight Directory Access Protocol LDAP be used by default. In these cases the administrative user could omit providing a protocol selection. In such cases the default protocol selection would be utilized for all communication related to the new domain. The administration module can also allow the administrative user to deviate from the default protocol selection in a drill down fashion. For example if the default protocol selection were LDAP the administrative user could specify that a different protocol e.g. SSL or clear text be used for the new domain or for a particular domain information source such as one of the domain information sources . The broker server could then use the different protocol for communication related to the new domain or the particular domain information source as appropriate. The broker server could use the default protocol selection for all other communication.

At block the administration module collects configuration data for the new domain. For example the configuration data can include data entered by the administrative user via the configuration interface as described above. In certain embodiments the configuration data can identify one or more DNS servers via for example a DNS IP address list as described above at the block .

At block the administration module or another module can identify additional domain information sources using the configuration data. For example the administration module can connect to at least one DNS server identified by the configuration data and thereby retrieve a list of authentication servers and a list of catalog servers applicable to the new domain.

At block the administration module or another module can acquire domain information for the new domain. For example the administration module can connect to at least one authentication server identified at the block using a selected protocol from the configuration data or a default protocol selection . In some cases the domain information can include information related to all domains within a same security boundary as the new domain. For example in implementations using MICROSOFT Active Directory the domain information can include forest information that describes a forest to which the new domain belongs. According to this example the forest information could include for example a flatname e.g. NetBIOS name a root domain naming context a configuration naming context user principal name UPN suffixes and or the like that are applicable to the forest. Continuing this example for each domain of the forest the forest information could further include a distinguished name a NetBIOS name DNS roots and or the like that are applicable to the domain.

In certain embodiments the broker server can increase efficiency at the block by leveraging the connection cache . As described above with respect to the connection cache can include connection information for existing connection sessions with the domain information sources . The connection cache can identify each connection session by a key. The key can include unique composition of information such as for example a domain a user name and a password. If for example identification information for a desired connection session matches the key for an existing connection session in the connection cache the broker server can use the connection information for the existing connection session. Advantageously in certain embodiments such utilization of the connection cache can save the computation and network expense of session connection and teardown. After block the process ends.

At block the administration module receives a selection of a domain of the managed domains . At block the administration module enumerates users groups and organizational units for the selected domain. At block the administration module assigns all or a portion of the users groups and organizational units to the shared resources responsive to input from the administrative user. At block the administration module stores the assignments in a data store such as the data store or memory.

Turning to various embodiments of authentication processes are illustrated. In particular illustrates an authentication process from the perspective of a broker server illustrates an authentication process from the perspective of a client system and illustrates an authentication process primarily from the perspective of a target resource.

Referring specifically to an embodiment of a multitenant broker authentication process is illustrated for providing single sign on access to shared resources. The multitenant broker authentication process can be implemented by the shared resources system or . For example the multitenant broker authentication process can be implemented by the authentication module or .

At block credentials are received from a client system of a user. A security cookie is generated at block which stores the credentials. At block the credentials are resolved to an authentication server associated with a domain of the user. An example of functionality that can be performed at the block will be described with respect to . At block using the credentials an identity of the user is authenticated with the authentication server identified at block . The authentication server can be similar for example to the authentication server or . If the user identity is authenticated at block a list of groups and organizational units to which the user belongs is built at block . The list of groups and users can be cached for example in memory of the broker server .

At block the list of groups and users can be used to compile a list of authorized resources to which the user has access. For example the list can be a list of virtual desktops that were assigned using a process similar to the process of . At block the list of authorized resources is communicated to the client system. This list can be communicated to the client system by the resource manager .

At block a request is received from the client system to access a target resource of the authorized resources. At block the target resource is resolved to a network location e.g. an IP address using for example a DNS server associated with the user s domain. The DNS server can be similar for example to the DNS server . At block a secure message is sent to the target resource to add the user to a resource group for that target resource. For example in embodiments in which the target resource is a virtual desktop the user can be added to a remote desktop group for that virtual desktop. In various embodiments the secure message can be encrypted.

A ticket is provided to the client system at block . The ticket identifies the security cookie to the client system. For example in one embodiment the security cookie is assigned a global unique identifier by the broker server or . The ticket can include this global unique identifier as a reference to identify the security cookie. This identification information can enable the client system to authenticate to the target resource.

At block access is requested to a shared resource from a broker server. The access request may or may not specify a particular shared resource. The access request can include a submission of credentials. A list of authorized shared resources is received from the broker at block for example if the broker authenticates the credentials as described above.

At block access is further requested to a target resource of the authorized shared resources. The client system can select this target from the list of named resources. A ticket is received from the broker at block . The ticket contains an authentication file identifier. This identifier can refer to a security cookie generated by the broker server see .

A launch file is used to initiate a connection with the broker server at block to obtain connectivity information for the target resource. The client system can create the launch file by storing the ticket in computer storage. The connection initiated with the broker server can be a secure connection in certain embodiments. At block in response to receiving the connectivity information from the broker the ticket is communicated to the target resource to obtain access to the target resource. In one embodiment upon submitting the ticket the client can receive access to the target resource. However the target resource can perform additional authentication steps as described below with respect to .

At block a target resource receives from a broker server a secure message with instructions to add a user to a resource group of the target resource see block of . For example if the target resource is a virtual desktop the instructions could be to add the user to a remote desktop group of that virtual desktop. The target resource adds the user to the resource group at block . At block the target resource receives a ticket including e.g. an authentication file identifier from a client system. In response at block the target resource sends the ticket to the broker server and requests user credentials stored in the security cookie see .

It is determined at block whether the ticket is valid. In one embodiment the broker server can determine validity of the ticket by checking for a corresponding ticket in the data store or . In one embodiment the target resource itself can perform this checking. Determining whether the ticket is valid can include determining whether the ticket is expired. A ticket can expire in certain embodiments due to a time limit being exceeded or due to the ticket being used previously to authenticate to a target resource.

If the ticket is not valid the broker and or target resource can deny access to the target resource at block . The client system therefore cannot access the target resource at block . Otherwise the broker sends user credentials to the target resource at block . The target resource uses the credentials to authenticate the client system at block . At block after successful authentication at block the target resource permits access by the client system. At block upon user logout the target resource or an agent resident thereon removes the user from its resource group e.g. remote desktop group . Advantageously in certain embodiments removal of the user from the resource group prevents the client system from reconnecting to the target resource without going through the broker server.

At block the authentication module receives credentials for a user. The credentials can include for example a user name and a password. The user name can be in various formats. For example in some cases the user name can be in a UPN style format such as for example bsmith qafa.local. In other cases the user name can be in a down level logon name format such as for example Philly1 bsmith. Other formats are also possible.

At block a domain relevant portion is extracted from the credentials. For example if the user name is of the UPN style format the domain relevant portion can be a UPN suffix. For instance if the user name were bsmith qafa.local the extracted UPN suffix would be qafa.local. By way of further example if the user name is of the down level logon name format the domain relevant portion could be a substring of the user name e.g. Philly1 from the down level logon name example described above .

At block the authentication module identifies a highest directory level that defines an existing security boundary for the user. For example in MICROSOFT Active Directory implementations the existing security boundary can be defined by a forest. In some cases the domain of the user can define the existing security boundary e.g. in some non Active Directory implementations . For example in MICROSOFT Active Directory implementations a particular forest to which the user belongs would be identified. As described below the highest directory level can be identified in various fashions.

In some embodiments the highest directory level e.g. forest can be identified by searching domain information cache such as for example the domain information cache or for the domain relevant portion. Using MICROSOFT Active Directory forests as an example if the domain relevant portion is a UPN suffix UPN suffixes for each forest could be searched for the domain relevant portion. When the extracted UPN suffix is found in a set of UPN suffixes for a particular forest that forest can be identified as the forest to which the user belongs. In other embodiments rather than searching UPN suffixes for each forest DNS roots of that forest s domains can be searched for a match with the domain relevant portion. The forest that has the matching domain would be the forest to which the user belongs. In some embodiments it can be advantageous for the authentication module to first search for UPN suffixes as described above and then search the DNS roots if the first search is unsuccessful.

If the domain relevant portion is from a user name of a down level logon name format for each forest NetBIOS names of that forest s domains can be searched for a match with the domain relevant portion. The forest that has the matching domain would be the forest to which the user belongs. For purposes of illustration the identified forest could be qaforesta.local. 

At block a domain of the user is determined. The domain of the user can be determined in various fashions. Continuing the MICROSOFT Active Directory example from above if the identified forest resulted from searching DNS roots or NetBIOS names the domain of the user can be determined to be whatever domain resulted in the match. If for example the identified forest resulted from searching UPN suffixes the domain of the user can be identified by searching DNS roots to determine the domain of the user. In some embodiments the domain of the user can be determined via a catalog server such as the catalog server . An example of determining the domain of the user via the catalog server will be described with respect to .

At block an authentication server for the user s domain such as for example a domain controller is retrieved from the domain information cache or a DNS server for the user s domain. The authentication server can be similar for example to the authentication server of or the authentication server of . The authentication server can be used for authentication as described for example with respect to .

At block the authentication module ascertains using a domain information cache such as the domain information cache a catalog server for the highest directory level identified for example at block of . The catalog server can be similar for example to the catalog server of . As described above the catalog server typically serves all domains of the highest directory level e.g. forest that defines the existing security boundary. At block user identification information is retrieved from the catalog server. The user identification information can include for example the user s distinguished name a security account manager SAM account name a NetBIOS name and or the like.

At block all or a portion of the user identification information is parsed to yield the user s domain. For example in MICROSOFT Active Directory embodiments the user s distinguished name can be parsed. In these embodiments the user s distinguished name can include a domain controller DC portion that has a format such as DC qaforesta2 DC local. According to this example the user s domain can be determined to be qaforesta2.local. 

In various embodiments systems and methods described herein can be particularly advantageous when managing shared resources that are virtual desktops. As described above users from managed domains having independent security boundaries can be assigned and given access to virtual desktops. In certain embodiments an administrator or MSP can use an administration module such as the administration module to aggregate across the managed domains information about virtual desktops that are in use at a given time. In particular certain VDC systems may provide management application programming interfaces APIs that can be called by administrators or by an administrative interface for purposes of returning information such as the information described above. However such calls can be ineffective for a multitenant shared resources system such as the multitenant shared resources system or the multitenant shared resources system . This is because as a general matter such APIs do not accept credentials as parameters. When the multitenant shared resources system and all managed domains are within a same security boundary e.g. via trust relationships credentials are not generally necessary.

For example remote desktop services RDS provided by MICROSOFT may provide certain APIs such as for example WTSQuerySessionInformation WTSEnumerateProcesses WTSEnumerateSessions and WTSOpenServer. These APIs do not natively accept credentials. However these APIs internally call another API known as RpcBindingSetAuthInfoEx that can accept credentials. By way of example the above described problem of management APIs not accepting credentials can be overcome by intercepting calls to the RpcBindingSetAuthInfoEx API and inserting appropriate credentials. In this fashion MICROSOFT management APIs can be utilized to return desired information for example about virtual desktops in use at a given time. In various embodiments a similar solution can be applied with respect to any other management API that does not natively accept credentials but that internally makes calls to other APIs that accept credentials.

At block the administration module receives a management request from an administrative user or other user with appropriate credentials. In various embodiments the management request can request certain information across a set of management domains such as the managed domains of . In a typical embodiment the request specifies one or more calls to one or more management APIs that do not accept credentials. At block the administration module calls the management APIs in a standard fashion.

At block the administration module or another module monitors execution of the calls to the management APIs and intercepts intermediate calls to an API that accepts credentials. The API that accepts credentials can be for example the RpcBindingSetAuthInfoEx API provided by MICROSOFT. At block the administration module or another module inserts appropriate credentials e.g. administrator credentials into each intermediate call. At block the administration module or another module completes each intermediate call. At block the administration module receives information responsive to the management request. At block the administration module provides the information to the administrative user.

Although various embodiments of the method and apparatus of the present invention have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit of the invention as set forth herein.

