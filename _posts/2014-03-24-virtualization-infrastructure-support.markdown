---

title: Virtualization infrastructure support
abstract: Remote computing resource service providers allow customers to execute one or more applications in a virtual environment on computer systems provided by the computing resource service provider. The customer applications are generally executed by multiple virtual machine instances working together. The virtual machines may be managed by a hypervisor executing on computer systems operated by the service provider. Different hypervisors may support different features and have different capabilities. Customers may wish to execute the one or more applications on a particular hypervisor in order to utilize certain features. A control plane may be used to facilitate management of the virtual environment by one or more services of the computing resource service provider.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424062&OS=09424062&RS=09424062
owner: Amazon Technologies, Inc.
number: 09424062
owner_city: Seattle
owner_country: US
publication_date: 20140324
---
The use of remote computing services such as remote program execution and remote data storage has greatly increased in recent years. Customers may reduce expenses and overhead by purchasing these services from a computing resource service provider also referred to as a service provider . Customer applications may be distributed over multiple virtual machine instances and computing systems. The virtual machine instances may be controlled by a hypervisor operating on a computing system. The hypervisor may provide secure partitioning of computer system resources by executing multiple virtual machine instances on a single physical host machine. Various components of the hypervisor may require privileged access to the physical host machine in order to provide effective administration of the virtual machine instances. Although a particular type of hypervisor may support a variety of different applications and operating systems certain features of the applications or operating systems may not be supported. Furthermore customers may prefer a particular type of hypervisor or may have a preference between different types of hypervisors.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein relate to enhancements for virtualization infrastructure support for a virtual computing service offered by a computing resource service provider also simply referred to as a service provider . A virtualization layer may enable virtual machines also referred to as virtual computer systems to interact with the underlying hardware operated by the service provider. The virtualization layer may include a hypervisor or other virtual machine manager. There are a variety of different hypervisor and or virtual machine manager each with different features and capabilities. The service provider may offer customers the ability to select a particular virtualization layer or the service provider may determine a particular type of virtualization layer that includes particular features requested by the customer. For example the service provider may allow the customer to select a particular type of virtual machine and underlying virtualization layer through a management console operated by the service provider. Based at least in part on the information provided by the customer through the management console the service provider may instantiate a virtual machine with the particular virtualization layer selected by the customer.

The service provider may further provide a virtual machine management service a network management service and a storage management service. The virtual machine management service may be responsible for managing the operation of virtual machines. For example the virtual machine management service may instantiate and terminate virtual machines based at least in part on customer requests. The network management service may enable the virtual machine to communicate over a network to one or more other virtual machines or other computer systems. For example the network management system may enable a virtual private network between a plurality of virtual machines operated by users of an organization. The storage management system may provide block level storage for one or more virtual machines. For example the storage management system may provide a storage volume for a particular virtual machine to store data generated during the operation of the particular virtual machine.

The particular virtualization layer selected by the customer may not be configured to operate with the virtual machine management service network management service storage management service or other service. A control plane may be used be to enable the particular virtualization layer to operate with one or more service or systems of the service provider. The control plane may be a virtual machine configured to receive commands and other information from the one or more service or systems and enable the virtualization layer and any virtual machines associated with the virtualization layer to the commands or other information. For example the control plane may receive information corresponding to a storage device associated with a particular virtual machine from the storage management service. The control plane may then use the received information to expose a block storage device to the particular virtual machine. Exposing the block storage device to the particular virtual machines enables the particular virtual machine to treat the block storage device as a physical device attached to the particular virtual machine. In another example the control plane may receive a command to terminate execution of a particular virtual machine. The control plane may translate the command such that it may be executed by the virtualization layer and transmit the command to the virtualization layer. Translating the command may include converting the command from a particular format into a format that may be received and executed by the virtualization layer. Upon receiving the command the virtualization layer may then cause the particular virtual machine to be terminated.

The virtual machine may be communicatively coupled with a control plane through a host only private network to be described in greater detail below in connection with . The control plane may be a virtual machine configured to enable the service provider to support multiple virtualization infrastructures by at least translating hypervisor commands providing networking support and input and output support. The control plane may also be any logical container supported or managed by a hypervisor. For example the control plane may be a collection of applications or processes whose access to the system hardware is controlled by the hypervisor . The control plane may execute user level and kernel level components in order to provide virtualization support. The control plane may contain a networking component a storage component and a management component. The various components of the control plane are discussed in detail below in connection with . The control plane may support multiple virtualization infrastructures by enabling a virtual machine management service to issue a single type of command regardless of the particular type of hypervisor executing on the computer system . For example the virtual machine management service may transmit the same command to instantiate virtual machine regardless of the particular type of hypervisor . The command may be transmitted to control plane and control plane may translate the command such that the command may be executed by hypervisor .

The virtual machine management system may be a collection of computing resources collectively configured to manage one or more virtual machines executing on the computer system . Customers of the computing resource service provider may interact with the virtual computer systems service via appropriately configured and authenticated application programming interface API calls to provision and operate virtual machine instantiated on system hardware hosted and operated by the service provider. As described above the virtual machine may be used for various purposes such as to operate as servers supporting a website to operate business applications or generally to serve as computing power for the customer. Other applications for the virtual machine may be to support database applications electronic commerce applications business applications and or other applications. The virtual machine management service may allow the customer and the service provider to manage virtual machine .

A virtualization layer executing on the physical host enables the system hardware to be used to provide computational resources upon which one or more virtual machines may operate. For example the virtualization layer may enable a virtual machine to access system hardware on the physical host through virtual device drivers on the virtual machine . The virtualization layer may include a particular type of hypervisor such as hypervisor A or hypervisor B . For simplicity only two types of hypervisors are shown although any number of different hypervisors may be supported in accordance with the present disclosure. Furthermore physical host may host multiple hypervisors of the same or different types on the same system hardware . Both hypervisor A and hypervisor B may be any device software or firmware used for providing a virtual computing platform for the virtual machines . The virtual computing platform may include various virtual computer components such as one or more virtual CPUs virtual memory and the like. The virtual machines may be provided to the customers of the service provider and the customers may run an operating system or an application on the virtual machines . Further the service provider may use one or more of its own virtual machines for executing its applications. At least a portion of the virtual machine may execute kernel level components for one or more other virtual machines . For example a particular virtual machine may execute a parent partitions configured to manage one or more child partitions executed by other virtual machines where the particular virtual machine and the other virtual machines are supported by the same hypervisor.

The control planes may be virtual machines supported by a hypervisor such as hypervisor A or hypervisor B . Although one control plane is shown in for both hypervisor A and hypervisor B multiple control planes may be supported by a particular hypervisor in accordance with the present disclosure. The control planes may execute various operations using virtual computer components provided by hypervisor A and hypervisor B . The control planes may receive commands and other information from the virtual machine management service . The commands and other information may be included in an API call from the virtual machine management service to the control plane . The virtual machine management service may enable the customer to manage and operate the virtual machines .

For example the customer may transmit a request to the virtual machine management service to terminate all virtual machines operated by the customer . The request may be an API call including information corresponding to the customer and virtual machines . The virtual machine management service may determine the corresponding control planes for the virtual machines included in the request and transmit a terminate command to the control plane . The control plane may forward the command to the parent partition responsible for virtual machines and the parent partition may then forward the command to the hypervisor associated with the parent partition and at least one of the virtual machines included in the command. In various embodiments the command is transmitted directly to one or more hypervisors associated with the virtual machines .

In another example the request from the customer may include a request to instantiate a particular virtual machine managed by hypervisor A . The virtual machine management service may then determine a physical host executing hypervisor A on system hardware . The virtual machine management service may then send the command to instantiate the particular virtual machine to the control plane supported by hypervisor A . The control plane may then cause hypervisor A to instantiate the particular virtual machine . In various embodiments the control plane forwards the command to a control plane stub executing on a parent partition the parent partition then causes hypervisor A to instantiate the particular virtual machine .

In this example the webpage also includes a graphical user element configured as a next button . The next button may be a graphical user interface element of the webpage where the underlying code of the webpage is configured such that selection by an input device of the next button causes information corresponding to the selection of a hypervisor type and operating system type on the webpage to be transmitted to one or more servers of the service providers such as the servers responsible for executing the virtual machine management service. Through the management console the customer may be guided through the process of setting up a virtual machine instance. The process may be divided into steps and the customer make be prompted to provide information at each step. For example the webpage displays to the customer a list of different types of hypervisors and different types of operating systems. The customer using an input device may select a particular type of hypervisor and a particular type of operation system. The customer selection may be stored until the entire process is completed or the customer selection may be transmitted to the virtual machine management service upon selection of the next button . Although an operating systems selection is show in the customer may be prompted to select any software application to be executed by the virtual machine once instantiated. Furthermore the customer may be presented only with the option of selecting a particular type of hypervisor in the webpage .

In various embodiments the service provider may determine the particular type of hypervisor for the user based at least in part on various factors such as operating system selected by the user features of the operating system selected by the user particular features selected by the user applications selected by the user availability of particular hypervisors cost associated with a particular hypervisor or other factors suitable for selecting computer systems based on user information. In these embodiments the user may or may not be presented with the ability to select a particular hypervisor. If the user selects a particular hypervisor and the service provider determines another hypervisor may be more appropriate the user may be presented with the option to select between the user selected hypervisor and the service provider determined hypervisor.

The webpage may also include a graphical user element configured as a back button . The back button may be a graphical user interface element of the webpage where the underlying code of the webpage causes the application displaying the webpage to navigate to a previously navigated webpage. In this example the webpage contains a prompt asking the customer to select a hypervisor and an operating system using dialog boxes associated with the particular hypervisor and operating system. The hypervisors and operating systems which are selectable using the webpage may be included in webpage based at least in part on customer preference popularity among customers features of the hypervisor and or operating system features selected by the customer hypervisor and or operating system used by an organization associated with the customer an administrator associated with the customer hardware systems available to the service provider or other information suitable for selecting a hypervisor or operating systems for use with one or more virtual machines.

Once the customer has made a selection using the webpage and selected the next button the application displaying the webpage may submit an HTTP request for provision of a virtual machine supported by the selected hypervisor and executing the selected operating system. The request may be transmitted to one or more servers of service of the service provider. For example the request may be transmitted to the virtual machine management service operated by the service provider. The virtual machine management service may then select based at least in part on the customer selection a computer system capable of executing the selected hypervisor and operating system and cause the computer system to instantiate a virtual machine on behalf of the customer. In various embodiments the virtual machine management service selects a computer system that is currently executing the selected hypervisor and causes the computer system to instantiate the virtual machine on behalf of the customer. At some point in time after the virtual machine is instantiated the virtual machine management service may pass operation of the virtual machine to the customer. The virtual machine management service or some other service of the service provider may select the computer system based at least in part on a variety of factors beyond the type of hypervisor selected by the customer including a particular geographic area based at least in part on an IP address associated with the request and the customer load on one or more computer systems network traffic associated with the one or more computer systems request response latency of the one or more computer systems or any other information suitable for selecting a computer system to instantiate one or more virtual machines.

The hypervisor may be a collection of computing resources collectively configured to provide a virtual operating platform and manage access to the system hardware . The hypervisor may be selected by the customer as described above in connection with . Furthermore the hypervisor may provide support for the control plane the parent partition and the child partition . The control plane may be a collection of computing resources collectively configured to enable one or more management systems of the service provider to manage the child partitions . For example the control plane may receive network configuration information from the network management service to be described in greater detail below in connection with and configure the enhanced network interface with the received network configuration information.

The parent partition may be a collection of computing resources collectively configured to manage the child partition and receive command over a host only private network from the control plane . The parent partition may also be communicatively coupled to the hypervisor to enable hypervisor management commands received from the control plane to be transmitted to the hypervisor . The child partition may be a collection of computing resources collectively configured to execute an application or a portion of an application operated by the customer. The child partition may execute an operating system including user level components such as a virtual network driver illustrated in .

The memory may provide a computer readable storage medium for storing data that may provide the functionality of at least one embodiment of the present disclosure. The data stored in the memory programs code modules instructions that when executed by one or more processors may provide the functionality of one or more embodiments of the present disclosure. These application modules or instructions may be executed by the one or more processors . The enhanced network interface and the network interface may be network interfaces connected to the computing system . The enhanced network interface may be a collection of computing resources collectively configured to encapsulate and transmit application data such as child partition data over a network to one or more other computing systems. The network interface may be a collection of computing resources collectively configured to transmit application data such as child partition data to the enhanced network interface . Although only one enhanced network interface and network interface are shown in multiple enhanced network interfaces and network interfaces may be connected to computing system in accordance with the present disclosure. The network interfaces may be configured to send and receive application data through the virtual network driver included in the child partition . The enhanced network interface may be configured to receive application data from the network interface determine routing information based at least in part on a network map and encapsulate application data such that the application data may be received by one or more other computer systems. Encapsulating the application data by the enhanced network interface may enable network virtualization and allow the child partition to communicate over a virtual network with one or more other child partitions . In various embodiments the virtual network driver or other kernel level component is configured to encapsulate application data before transmitting the data to the network interface the network interface may then transmit the application data over the network without forwarding the application data to the enhanced network interface .

The enhanced network interface may also receive encapsulated application data over the network and determine based at least in part on the encapsulated application data a particular virtual machine executing on computer system to forward the application data to. For example the enhanced network interface may receive data directed to child partition and de encapsulate the data. The enhanced network interface may then forward the de encapsulated data to the network interface associated with the child partition . The network interface may then transmit through the virtual network driver the de encapsulated data to the child partition . The enhanced network interface may be configured with information from the control plane to enable a network management service described in detail below in connection with to manage data packets transmitted to and from child partition supported by hypervisor .

The control plane the parent partition and the child partition may be executed by a computer system such as the computer system described above in connection with . The child partition may include a storage virtualization client configured to enable the child partition to access one or more storage block level devices managed by the storage management service . The storage management service may comprise one or more computing resources that collectively operate to store data generated by the child partition for the customer using block level storage devices and or virtualizations thereof . The block level storage devices of the storage management service may for instance be operationally attached to the child partition to serve as logical units e.g. virtual drives for the child partition . The block level storage device may enable the persistent storage of data used generated by the child partition. The block level storage device may be provided by the storage virtualization client the storage virtualization client may provide drivers for communicating data and the I O request to the storage virtualization provider executed by the parent partition . For example the storage virtualization client may provide Internet Small Computer System Interface iSCSI drivers for the attached block level storage device enabling the I O request to be transmitted to the storage virtualization provider .

The storage virtualization provider may transmit the I O request to the storage system target server executed by the control plane . The request may be transmitted over private network . The storage virtualization provider may also provide kernel level support for the storage visualization client . Once the I O request is received by the storage system target server the control plane may cause the I O request to be converted based at least in part on the storage system driver such that the I O request may be received and executed by the storage management service . Returning to the example above the I O request transmitted with the iSCSI drivers may be received by an iSCSI initiator executed by the system target server . The system target server may use the storage system driver to convert the iSCSI I O request to a block level I O request such as a Global Network Block Device GNBD request compatible with the block level storage devices managed by the storage management service . In various embodiments the storage system target server and the storage system driver are implements in a separate hardware component of the computer system and the I O request may be forwarded directly from the storage virtualization provider . Furthermore the storage target server and or storage system drive may support access to block level storage systems or file level storage systems.

The management component may be a collection of computing resources collectively configured to receive commands from the one or more services of the service provider and cause the commands to be executed by the hypervisor. The management component may transmit the commands to the parent partition over the private network . The commands may be received at a control plane agent executing on the parent partition to be discussed in greater detail below in connection with the the parent partition may translate the commands in order to be executed by the hypervisor. In various embodiments the parent partition causes the commands to be executed by the hypervisor.

The child partition may execute the service client which may redirect request generated by the child partition to a provider executed by the parent partition over the virtual bus . The provider may be connected to the virtual bus and may provide the child partition with access to one or more devices. For example the provider may provide access to the child partition to a block level storage device. In order to provide the child partition with access to one or more devices the provider may be connected to an initiator . The initiator may be a target exposed to the parent partition by the control plane that enables the parent partition to transmit request over a network to a target server executed by the control plane . For example the initiator may transmit the I O request received from the provider over a host only private network to the target server .

The target server may be a collection of computing resources collectively configured to receive request from the initiator over the network and process the requests. The target server may further be configured to process request using a storage driver . The storage driver may enable the target server to translate request so that the request may be executed by the storage management service . For example a disk I O request from the service client executed by the child partition is transmitted to the provider executed by the parent partition through the virtual bus . The hypervisor may then pass the disk I O request to the initiator which transmits the disk I O request over a network to the target server of the control plane . The disk I O request is converted to a block device I O for the block level storage device exposed by the storage management service to the child partition . The storage driver transmits the block device I O to the storage management service to process the request.

The control plane may transmit commands to the control plane agent executed by the parent partition . The control plane may further execute a management component configured to receive commands from the virtual machine management service and transmit the commands to the control plane agent . The commands may be transmitted over a private network connection the parent partition and the control plane . Commands received by the management component may be API calls identifying at least a particular virtual machine and an operation to be performed on the virtual machine. For example the management component may receive a command from the virtual machine management service identifying the child partition and a termination operation. The management component may then transmit the command over the private network to the control plane agent . The control plane agent may then translate the command so that it may be invoked by the hypervisor management service . The translated command may then be transmitted to the hypervisor management service the hypervisor management service may then cause the child partition identified in the command to be terminated.

The data may then be received at a network interface such as the network interface described above in connection with . The received data may be processed by the network interface . Processing the received data may include dividing the data into packets and placing headers in each packet. After processing the packets the network interface may forward the data to the enhanced network interface . In various embodiments the network interface may simply forward packets to the enhanced network interface without processing the packets. The data may be forwarded to the enhanced network interface over a computer system bus connected to the network interface and the enhanced network interface such as a peripheral component interconnect PCI bus. The enhanced network interface may encapsulate the data . The enhanced network interface may retrieve information from a network map or mapping service in order to encapsulate the data so that the encapsulated data may be received by the corresponding virtual machine or computer system. After the data is encapsulated the encapsulated data may be transmitted over the network. The encapsulated data may be transmitted by the enhanced network interface or the network interface.

A storage system target may then be exposed to a child partition or other virtual machine . The target may be a virtual device drive configured to store data generated by the virtual machine. The target may be further configured to transmit requests to the initiator executed by the parent partition which forwards the requests to the control plane. The parent partition may then receive a connection from the virtual machine . The connection may enable data to be transmitted from the child partition or other virtual machine to the storage system. Data may be transmitted first to the parent partition initiator through the connection and then from the parent partition to the control plane. The control plane may convert storage requests from the parent partition to a storage system target. The control plane may convert the request using the storage driver as described above in connection with . Based at least in part on the converted request the control plane or component thereof may transmit data to the storage system target. For example the control plane may receive an I O request and data to be stored in the block level storage device associated with the I O request. The control plane may convert the I O request to a block level storage request and transmit over a network the converted request and the data.

The parent partition may the forward the translate command to the hypervisor . The parent partition may forward the command over the virtual bus as described above in connection with . The command may be transmitted as an API call or service call. In various embodiments the parent partition forwards the translated command directly to the hypervisor management service. Once received the hypervisor may cause the command to be executed or simply execute the command. Returning to the example above once the hypervisor or hypervisor management service has received the command to terminate the virtual machine instance the hypervisor may transmit another command to the particular virtual machine to terminate operation. The hypervisor may also terminate the virtual machine instance directly without transmitting the command to the virtual machine instance.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

