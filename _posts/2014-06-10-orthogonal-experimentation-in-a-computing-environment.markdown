---

title: Orthogonal experimentation in a computing environment
abstract: Various embodiments include at least one of systems, methods, and software to receive input configuring tests within a computing environment to expose users to standard application or website experiences or test experiences. In some embodiments, multiple tests may be configured to run orthogonally within user experiences without affecting the results of one another. Some such embodiments preserve the ability to execute certain tests in a non-orthogonal manner while other tests are allowed to execute orthogonally.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262543&OS=09262543&RS=09262543
owner: eBay Inc.
number: 09262543
owner_city: San Jose
owner_country: US
publication_date: 20140610
---
This application is a continuation of U.S. Applicant No. 13 867 203 filed on Apr. 22 2013 and entitled ORTHOGONAL EXPERIMENTATION IN A COMPUTING ENVIRONMENT and issued as U.S. Pat. No. 8 789 109 which was a divisional of U.S. application Ser. No. 12 728 067 filed on Mar. 19 2010 entitled ORTEIOGONAL EXPERIMENTATION IN A COMPUTING ENVIRONMENT and issued as U.S. Pat. No. 8 429 616 to each of which priority is claimed and each of which are incorporated herein by reference in their entirety.

In software and systems development organizations have traditionally maintained separate testing and production computing environments. New code is first tested in the test environment and then moved to the production environment upon successful completion of testing. More recent efforts have allowed for testing in a production environment but with users being exposed to only a single test at a time. Only a single test per user is allowed to ensure that the test results are not skewed by another test.

Pre deployment testing of computer applications computing environments and user experiences is commonly performed to ensure the success of newly developed or installed software devices and other products. In some instances a test may need to be executed without interference or collision with other tests. However tests may be able to execute and not be affected or skewed by other tests. Such tests that may simultaneously execute can be allowed to collide with one another and are termed orthogonal tests. Various embodiments described herein provide systems software methods and data structures to configure computing environments and tests allowed to execute in an orthogonal manner.

A test in some embodiments is a limited implementation for experimental purposes of a portion of code or other system element that modifies a user experience when utilizing an application or visiting a website. A test may be visible in a view presented to a user or may be invisible to the user instead operating in a backend process of a computing environment of the application or website. A test includes one or more treatments. For example a particular test may include a single portion of code to be tested. Another test may include two alternate portions of code to be tested where each portion of code to be tested is a treatment. A further test may include two alternate portions of code to be tested and a test control portion of code to be tested where each of the two alternate portions of code and the test control portion of code are treatments in such test instances including multiple treatments when a user experience is to be exposed to the test the user experience will be exposed to a single treatment of the multiple treatments of the test. The test control treatment when present is a parallel treatment to verify results obtained through the other treatments of the test instance.

A test may be configured by creating a new test identifying a number of treatments one or more of the test a portion of software or configuration settings to be implemented through each treatment and assigning an allotment of application or website bandwidth spectrum to the test and each treatment if more than one treatment is involved. Input is also received designating the test as either orthogonal meaning it may collide with other tests or as an exclusive test that cannot collide with other tests. The test may then be stored and implemented within a computing environment. User interfaces to create and modify test configurations according to some embodiments are illustrated and described with regard to . . Explanation of how the application or website bandwidth spectrum traffic is allotted is provided with regard to . .

In some embodiments after a test is implemented when a user requests or submits data to an application or website a determination is made whether the request or submission will be part of one or more tests. As used herein requests and submissions are commonly referred to as requests in the context of a request for data processing. In some such embodiments a user identifier is utilized to determine if the request is to be exposed to one or more tests. A hashing algorithm may be applied to the user identifier in such embodiments to provide a hash value. The hash value may then be utilized to identify each of one or more tests and treatments of the respective tests to which the request is to be exposed. In other embodiments experiment identifiers of tests may be retrieved from a database for experiments that are relevant to the particular received request. The user identifier may then be combined with each of the experiment identifiers and the hashing algorithm applied to each combined user identifier and experiment identifier. The hash values are then utilized in such embodiments to identify each test and treatments of the respective tests to which the request is to be exposed. The request is then fulfilled with standard production portions of the application or website unless a test was identified for one or more particular portions of the processing. The standard production portions of the application or website are the defaults when a test is not identified. When tests are identified test experiences are provided.

In the various embodiments herein multiple tests may be run orthogonally without affecting the results of one another. Some such embodiments preserve the ability to execute certain tests in a non orthogonal manner while other tests are allowed to execute orthogonally. These and other embodiments are described in detail herein.

In the following detailed description reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific embodiments in which the inventive subject matter may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice them and it is to be understood that other embodiments may be utilized and that structural logical and electrical changes may be made without departing from the scope of the inventive subject matter. Such embodiments may be referred to individually and or collectively herein by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed. The following description is therefore not to be taken in a limited sense and the scope of the inventive subject matter is defined by the appended claims.

The functions or algorithms described herein are implemented in hardware software or a combination of software and hardware in one embodiment. The software comprises computer executable instructions stored or otherwise tangibly embodied on computer readable storage media such as memory or other type of storage devices. Further described functions may correspond to modules which may be software hardware firmware or any combination thereof. Multiple functions are performed in one or more modules as desired and the embodiments described are merely examples. The software is executed on a digital signal processor Application Specific Integrated Circuit ASIC microprocessor or other type of processor operating on a system such as a personal computer server a router or other device capable of processing data including network interconnection devices.

Some embodiments implement the functions in two or more specific interconnected hardware modules or devices with related control and data signals communicated between and through the modules or as portions of an application specific integrated circuit. Thus the exemplary process flow is applicable to software firmware and hardware implementations.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable storage medium or in a transmission signal or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. Application Program Interfaces APIs .

The web servers may be physical and logical servers or simply logical servers that execute on one or more physical computing devices. The web servers operate to receive and respond to requests for data received over the Internet or other network. The web servers may provide web pages such as web page retrieved over a localized network from one or more database an application server or other server or data storage location. In other embodiments the web servers and application servers may provide the web page or a portion thereof such as a header a recommendation portion for a marketplace web page data for a previously viewed items portion of the web page or other portions. In some embodiments requests for data from the client computing devices or other locations processes or devices may be received over the Internet directly by one of the application servers . The application servers as with the web servers may be physical and logical servers or simply logical servers that execute on one or more physical computing devices.

In some embodiments each of the web servers and the application servers include an application kernel that provides web site functionality and web site management functionality for various purposes within the computing environment . The web site management functionality may provide functionality with regard to performance monitoring load balancing user activity tracking and the like. In some embodiments the kernel also provides testing functionality that determines whether a particular request is to be a participant in a test. In some embodiments the functionality of the application kernel is provided through an application programming interface API .

In some embodiments when a request is received by a web server an application server or other computing or networking device within the computing environment a process of the kernel performs a determination of whether the request is to be exposed to one or more tests. As used herein an experiment is synonymous with a test unless otherwise indicated. The determination of whether a request is to be exposed to a test may include performing a hashing function against a user identifier e.g. a Globally Unique Identifier GUID of the user either logical or human and using the hashed GUID to query the experiment database . When an experiment identifier is retrieved from the experiment database in response to the query the request is processed according to a test of the experiment identifier. When an experiment identifier is not retrieved from the experiment database the request is processed according to a standard production version of the website. As mentioned above with regard to the web page a request may be received for less than an entirety of the web page such as for a recommendation portion . In such instances the web page provided to a user may provide a test experience to a user on a client computing device with regard to no portions of the web page or one or more portions of the web page .

In some embodiments when a request is received such as by a web server or an application server the kernel may query the experiment database such as through an experiment server to obtain experiment identifiers of tests to which the request is to be exposed. In one such embodiment the query may return two or more experiment identifiers. In some such embodiments a further determination is made to identify a treatment of multi treatment tests to which the request is to be exposed. The GUID of the requestor and one of the retrieved experiment identifiers are joined and then the hashing function is applied to the joined GUID and experiment identifier. The resulting hash value is then used to identify a treatment of the respective test to which the request is to be exposed.

The different tests identified in the experiment server and experiment database may each be deployed to one or more web servers application servers or other computing and networking devices within the computing environment . Thus upon identification of a test or treatment thereof to which a request is to be exposed the request may be routed to an appropriate server computing device or network device utilizing kernel processes.

Although three web servers three application servers and one database are illustrated in any number of web servers application servers and databases may be present in the computing environment depending on the requirements of the particular embodiment. Similarly although one experiment server and one experiment database are illustrated in the computing environment may include any number of experiment servers and experiment databases . In some embodiments the experiment server and the experiment database may be combined into a single data processing element within the computing environment and may even coexist on a computing device upon which an application server web server or database is present. Other embodiments may not include an application server . Thus the computing environment of is provided to illustrate an example computing environment architecture upon which some embodiments may be implemented. An example computing device upon which one or more the application servers web servers databases experiment servers and experiment databases may be implemented is illustrated in .

Computer readable instructions tangibly stored on a computer readable storage medium are executable by the at least one processing unit of the computer . A hard drive CD ROM and RAM are some examples of articles including a computer readable storage medium. For example a computer program capable of execution by the at least one processing unit to cause the computer to perform one or more of the described and claimed methods herein may be stored on such as computer readable storage medium. A computer readable storage medium may also store a kernel module or program that executes on the at least one processing unit to provide the kernel services on the computer as discussed above with regard to .

In the spectrum is divided into a clean experience and a test experience . The clean experience is allotted traffic percentages zero 0 through 49. The test experience is allotted traffic percentages 50 through 99. The test experience is a spectrum portion within which tests may but need not be exposed to requests. The percentages correspond to value assigned to incoming requests from users. In some embodiments the value is assigned to a request based on a user identifier such as a GUID of the user. The GUID may be assigned to the user such as through a kernel process or other common GUID assignment processes upon receipt of a request. The GUID may also be received with an incoming request. In other embodiments the user identifier may be another value assigned to a user depending on the particular embodiment. In yet other embodiments instead of a user identifier another identification mechanism may be utilized such as an identifier of a request or a value derived from a date and time the request was sent or received.

Regardless of how the identifier is assigned or received the identifier is converted into a value that corresponds to the values with which the spectrum has been divided. In some embodiments a hashing function is applied to the identifier to arrive at a number corresponding to spectrum values. For example in an embodiment where the identifier is a GUID an MD5 hashing algorithm is applied to the GUID through a function and a value is obtained. If that value is greater than 99 the final two numbers of the value may extracted. The final two numbers will be a number between zero and 99 and therefore equating to a spectrum value. That value is then utilized to route the request within either the clean experience or the test experience .

With regard to the spectrum is again illustrated as the clean experience and test experience . The test experience as illustrated in did not include any tests. However the test experience as illustrated in now includes two tests test A and test B . Test A is allotted spectrum percentages 60 through 65 and test B is allotted spectrum percentages 80 85. As the portions of spectrum allotted to test A and test B do not overlap the tests are non orthogonal.

The remaining portions of the spectrum within the test experience e.g. percentages 50 59 66 79 and 86 99 are not allotted to tests. In some embodiments as a request is received from a user such as by a web server from a user of one of the client computing devices the kernel of the receiving web server identifies the user through a GUID performs the MD5 bashing algorithm with regard to the GUID and obtains a number between zero 0 and 99. That number is then used to route the request to the corresponding experience. When the number is within the range 60 and 65 the request is routed for exposure to test A . When the number is within the range of 80 and 85 the request is routed for exposure to test B . Otherwise the request is exposed to the standard production experience of the application or website.

with regard to the spectrum is illustrated as arc the clean experience and test experience . The test experience as illustrated in included test A and test B which are non orthogonal tests. Test A and test B are included in the test experience of along with test C . Test C is allotted spectrum percentages 50 through 99. Thus both test A and test B are orthogonal to test C . As a result when a request is routed to spectrum percentages in the range of 60 through 65 the request will be routed for exposure to both test A and test C . Similarly when a request is routed to spectrum percentages in the range of 80 through 85 the request will be routed for exposure to both test B and test C .

The spectrum portion allotted to the second test experience is available to orthogonal tests . The orthogonal tests listed include test D test E test F and test G. Test D is allotted 20 percent of the spectrum allotted to the second test experience test E 30 percent test F 50 percent and test G 25 percent. Of note with regards to the percentages of spectrum allotted to each of the tests D E F and G is that the percentages added together is greater than 100 percent. This is intentional as the tests D E F and G are allowed to collide with one another in the orthogonal second test experience . It is noted that the percentages allotted to tests D E F and G are merely examples. Alternative embodiments may allot any combination of percentages to any number of tests within the second test experience .

When a test within the second test experience includes more than one treatment each treatment is also allocated a spectrum percentage. However this spectrum percentage is not a percentage of the spectrum . Instead the treatment spectrum percentage is a percentage of the spectrum allotment to the particular test. For example test D of the orthogonal tests includes three treatments . Each of these three treatments includes an allotment percentage. For example treatment D has a 40 percent allotment as does treatment D white treatment CNTL control has a 20 percent allotment. Thus for requests that are to be exposed to test D 40 percent of those requests will be exposed to treatment D 40 percent will be exposed to treatment D and 20 percent will be exposed to the CNTL treatment.

In embodiments including the second test experience orthogonal tests to which a request is to be exposed are determined independent of one another. For example a determination of whether a request is to be exposed to test D is performed independent of a determination of whether the same request is to be exposed to test E. In such embodiments the independent determinations may be made when a request is received from a user by retrieving test identifiers of the tests to which the request might be exposed. The test identifiers may be retrieved from the experiment server or experiment database of . For each retrieved test identifier a user identifier such as a GUID as described above is added and the test identifier and the user identifier are hashed together. The resulting value is then used to determine if the request is to be exposed to the respective test of the test identifier. This adding and hashing of a test identifier and the user identifier is performed for each of the tests and a determination is made for each test . As a result a particular request may be exposed to each of the tests D E F and G while another particular request may be exposed to none. Continuing to the determination of which treatment of the test a request is to be exposed when there is more than one treatment to the test the same hash value of the hashed user identifier and test identifier is used to identify the treatment of the respective test.

Spectrum portions in some embodiments may be reserved for the clean experience the test experience and the second test experience in any proportion. In other embodiments tests are allotted spectrum portions and the tests are designated as non orthogonal test also termed regular tests or as orthogonal tests. The remaining portions of the spectrum that are not allotted to regular test and orthogonal tests comprise the clean experience . Additionally although the portions of the spectrum allotted to the clean experience the test experience and the second test experience are illustrated in through as contiguous portions of the spectrum the clean experience the test experience the second test experience regular tests and orthogonal tests need not be contiguous.

The user interface of is a user interface to receive input to create and modify test configurations. The user interface includes an experiment name ID field where a test name or identifier can be entered manually or populated following selection of an existing test. Selection of an existing test may be performed by selecting the action button labeled SELECT. Selection of this action button will cause a file listing user interface that allows a user to navigate through storage drives file folders to locate and select files or other data stored locally to or remotely from a computing device providing a view of the user interface .

The user interface further includes an experiment type field where a user may select an identifier of the type of experiment being configured. The options may include REGULAR and ORTHOGONAL. The user interface also includes experiment start and end fields where a user may enter start and end dates and times for when the test being configured is to start and end. In some embodiments the start and end dates and times are not required. In such instances the test when stored will be active until the configuration is modified. In other embodiments where the start and end dates and times are not required and have not been entered the test will not be active. Some embodiments of the user interface may also include a site selection control that allows a user to select a website or application the test being configured is to be active within. For example a test may be configured for one of several websites of an organization.

The user interface additionally includes a traffic allotment control where input is received to designate portions of traffic spectrum to the test being configured. A start percentage and an end percentage are received for each portion of the traffic spectrum to be allotted. For example a start of zero 0 and an end of four 4 can be entered to allot traffic spectrum in the range of zero 0 to four 4 to the test being configured. Additional portions may also be entered and the portions need not be contiguous. As portions of the traffic spectrum are allotted a traffic space map is updated to illustrate the allotted portions. Allotted portions of other tests may also be presented in the traffic space map . The traffic space map may also indicate portions of the traffic spectrum previously allocated to regular tests that are not allowed to collide with other regular or orthogonal tests. In such instances a user may be prevented from entering or storing traffic spectrum allotments for the test being configured that would collide.

The user interface also provides a treatment setup portion that provides user interface controls to receive input selecting and configuring treatments of the test being configured. In some embodiments the controls displayed in the treatment setup portion vary however based on the experiment type selected in the experiment type field . For example the user interface of is displayed within the treatment setup portion when the experiment type REGULAR is selected in the experiment type field while the user interface of is displayed within the treatment setup portion when the experiment type ORTHOGONAL is selected in the experiment type field .

Once the configuration of the test is complete the action button labeled SAVE can be selected to cause the test configuration to be stored such as on the experiment server or in the experiment database of . If the test configuration is not to be stored the action button labeled CANCEL may be selected and any changes within the user interface will be ignored and not saved.

The user interface of is a user interface to receive input to create and modify test treatments of a REGULAR test being configured in the user interface of . The user interface includes two treatments . The treatments may be deleted by selecting the buttons labeled with a minus sign . A treatment may also be added by selecting the button labeled with a plus sign . Each treatment includes an allotted spectrum percentage a treatment identifier a treatment name and an identifier of the treatment type . The allotted spectrum percentage is a sum of the traffic spectrum allotted via a traffic allotment control of the respective treatment . The traffic allotment control operate similarly to the traffic allotment control illustrated and described with regard to the user interface of but with regard to a respective treatments .

The treatment name is typically entered by selecting the treatment name control and selecting a name associated with a portion of code or other system element to be implemented as the treatment . The treatment type is typically entered by selecting the treatment type control and selecting either CONTROL designating the treatment as a control treatment or TREATMENT designating the treatment as a treatment rather than as a CONTROL.

The user interface of is a user interface to receive input to create and modify test treatments of an ORTHOGONAL test being configured in the user interface of . The user interface includes two treatments . The treatments may be deleted by selecting the buttons labeled with a minus sign . A treatment may also be added by selecting the button labeled with a plus sign . Each treatment includes an allotted spectrum percentage a treatment identifier a treatment name and an identifier of the treatment type .

The allotted spectrum percentage is entered by a user and the sum of the allotted spectrum percentages of all treatments within the user interface must equal 100 percent. The treatment name is typically entered by selecting the treatment name control and selecting a name associated with a portion of code or other system element to be implemented as the treatment . The treatment type is typically entered by selecting the treatment type control and selecting either CONTROL designating the treatment as a control treatment or TREATMENT designating the treatment as a treatment rather than as a CONTROL.

In some embodiments the method further includes receiving input designating a start date and an end date for when users will be exposed to the experiment. In some embodiments receiving input that designates the experiment as able to coexist with other experiments within a single user experience includes receiving input identifying a portion of website traffic to be exposed to the experiment. In some such embodiments with regard to each treatment the input identifying the portion of website traffic to which the treatment will be exposed identifies a portion of the website traffic to which the experiment is exposed.

In some embodiments the method includes receiving a request for webpage related content and performing a hashing function against a user identifier of a user from which the request was received to obtain a hash value. In some embodiments the hashing algorithm is an MD5 hashing algorithm. In other embodiments the hashing algorithm is another single or multi round hashing algorithm. The method further includes querying an experiment database such as the experiment database of as a function of the hash value to identify experiment treatments to which the user is to be exposed. The method also includes processing the request for the webpage related content according to any identified experiment variants.

In some embodiments of the method the received request for webpage related content is a request for a webpage to be built by at least one process that executes on the at least one processor. In other embodiments the received request for webpage related content is a request received from a webpage server that executes to build a webpage including at least one portion generated and provided to the logical webpage server by the processing of the request for the webpage related content according to any of the experiment treatments identified via the querying .

In some embodiments of the method a start date and an end date are stored in the database in association with at least one experiment. In such embodiments retrieving the experiment identifier of each experiment active with regard to the received request may include retrieving experiment identifiers with a start date equal to or prior to a current date and an end date prior to or equal to the current date.

It is emphasized that the Abstract is provided to comply with 37 C.F.R. 1.72 b requiring an Abstract that will allow the reader to quickly ascertain the nature and gist of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.

In the foregoing Detailed Description various features are grouped together in a single embodiment to streamline the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments of the inventive subject matter require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

It will be readily understood to those skilled in the art that various other changes in the details material and arrangements of the parts and method stages which have been described and illustrated in order to explain the nature of the inventive subject matter may be made without departing from the principles and scope of the inventive subject matter as expressed in the subjoined claims.

