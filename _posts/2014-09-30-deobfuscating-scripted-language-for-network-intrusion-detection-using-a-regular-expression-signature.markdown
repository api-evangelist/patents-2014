---

title: De-obfuscating scripted language for network intrusion detection using a regular expression signature
abstract: A device receives data, identifies a context associated with the data, and identifies a script, within the data, associated with the context. The device parses the script to identify tokens, forms nodes based on the tokens, and assembles a syntax tree using the nodes. The device renames one or more identifiers associated with the nodes and generates a normalized text, associated with the script, based on the syntax tree after renaming the one or more identifiers. The device determines whether the normalized text matches a regular expression signature and processes the data based on determining whether the normalized text matches the regular expression signature. The device processes the data by a first process when the normalized text matches the regular expression signature or by a second process, different from the first process, when the normalized text does not match the regular expression signature.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09419991&OS=09419991&RS=09419991
owner: Juniper Networks, Inc.
number: 09419991
owner_city: Sunnyvale
owner_country: US
publication_date: 20140930
---
A scripted language is high level programming language that is interpreted at runtime rather than compiled. For example scripting languages may be embedded within hypertext markup language HTML and when interpreted by a client and or server may add functionality to a web page. Scripted languages may also contain malicious code which when interpreted may compromise the security and or integrity of the client and or server.

According to some possible implementations a device may receive data identify a context associated with the data and identify a script within the data associated with the context. The device may parse the script to identify tokens form nodes based on the tokens and assemble a syntax tree using the nodes. The device may rename one or more identifiers associated with the nodes and generate a normalized text associated with the script based on the syntax tree after renaming the one or more identifiers. The device may determine whether the normalized text matches a regular expression signature and process the data based on determining whether the normalized text matches the regular expression signature. The device may process the data by a first process when the normalized text matches the regular expression signature or by a second process when the normalized text does not match the regular expression signature. The first process is different from the second process.

According to some possible implementations a method may include receiving by a device data from an end point device extracting by the device scripted code from the data and generating by the device a normalized script having whitespace and identifiers corresponding to the scripted code. The method may include formatting by the device the whitespace of the normalized script according to a normalizing scheme and renaming by the device the identifiers of the normalized script according to the normalizing scheme. The method may include determining by the device whether the normalized script matches a signature and selectively sending by the device the data to another end point device associated with the data based on determining by the device whether the normalized script matches the signature. The method may include sending by the device the data to the other end point device based on determining that the normalized script does not match the signature or not sending by the device the data to the other end point device based on determining that the normalized script matches the signature.

According to some possible implementations a computer readable medium storing instructions may include multiple instructions that when executed by one or more processors associated with a device cause the one or more processors to receive data identify executable code contained in the data execute the executable code within an environment and generate a trace based on the execution of the executable code. The multiple instructions may further cause the one or more processors to generate based on the trace a list identifying one or more functions executed by the executable code and an order execution count argument or return value associated with executing a function of the one or more functions. The multiple instructions may further cause the one or more processors to generate based on the trace an optimized code by replacing a portion of the executable code with an alternative portion the portion and the alternative portion being equivalent with respect to interaction with the environment during execution. The multiple instructions may further cause the one or more processors to modify whitespace contained in the optimized code based on a whitespace normalizing scheme modify identifiers contained in the optimized code based on an identifier normalizing scheme and provide the optimized code having the whitespace and the identifiers modified according to respective whitespace and identifier normalizing schemes for matching against a code signature to determine whether the executable code is malicious. The code signature may be associated with determining whether the executable code is malicious. The multiple instructions may further cause the one or more processors to provide the list for matching against a list signature to determine whether the executable code is malicious. The list signature may be associated with determining whether the executable code is malicious.

The following detailed description of example implementations refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

Numerous computing environments employ scripted languages such as JavaScript ECMAScript VBScript Python Perl PHP etc. to provide functionality. In particular scripted languages form a key component of dynamic hypertext markup language DHTML and asynchronous JavaScript XML AJAX which enable a user to enjoy an interactive and dynamic web browsing experience. Developers of mobile applications e.g. for smart phones tablets and the like may include scripts in their products. Unfortunately the popularity of executable script has prompted certain individuals and actors to create and distribute malicious scripts whose purpose is to disrupt hijack and or profit from a device which executes the script. These scripts may exploit a vulnerability in a device s software and or hardware to automatically execute during a seemingly innocuous activity e.g. by infecting a server trusted by the device and or trusted by a user of the device and or the author s of the malicious script may trick the user into executing the malicious script e.g. through social engineering. A malicious script may include for example a virus malware spyware ransom ware information theft e.g. sensitive session data associated with connection between two devices or the like.

To further complicate matters authors of malicious scripts script writers commonly employ one or more obfuscation techniques to prevent detection by malware antivirus scanners. For example script writers may randomize whitespace and or identifiers e.g. names of private functions and or variables add bloat e.g. a portion of the script which does not affect meaningful script behavior such as a comment or a logic switch based on a known value e.g. x 1 if x 1 then . . . use alternative means to represent constant values e.g. replacing a number with a mathematical operation use one function as a substitute for another e.g. using a local function as an alias for a suspicious remote function or object method split a string and concatenate the string at runtime and or encode a portion of the script and decode the portion at runtime. More than one obfuscation technique may be used in a particular script and some techniques may be layered e.g. encrypted content may be encrypted again using a different key . Additionally script writers may use tools to randomize the use of obfuscation techniques so that a piece of malicious script may be presented in numerous different obfuscated forms.

Implementations described herein may assist a user in mitigating the threat posed by a malicious script by providing a method and device for intercepting script containing data sent over a network to an end point device associated with the user normalizing and de obfuscating the script contained within the data comparing the normalized de obfuscated script to a regular expression signature associated with a malicious script and preventing the script from being delivered to the end point device if the script matches the signature. In this way the user s end point device as well as other end point devices associated with the network may avoid infection by scripts already identified as malicious. Additionally the method and device may assist a user in analyzing a script in order to determine whether the script is malicious and if so determine how to create a regular expression signature to direct the device to detect and detain the script.

In this way the network device may protect the second end point from a script which has previously been identified as malicious. Furthermore the network device may prevent the further spread of the malicious script by refusing to route data which contains the malicious script and possibly alerting a user to the detection e.g. through a log or email . By tracing the script and generating a list of the script s method calls the network device may simplify the task of generating signatures for new threats.

Sending end point device and or receiving end point device may include one or more devices capable of receiving and or providing information over a network e.g. sending network and or receiving network and or capable of generating storing and or processing information received and or provided over the network. For example sending end point device and or receiving end point device may include a computing device such as a laptop computer a tablet computer a handheld computer a desktop computer a mobile phone e.g. a smart phone a radiotelephone etc. a network device e.g. a router a gateway a firewall a hub a bridge etc. a server device or a similar device. Sending end point device and or receiving end point device may act as an end point e.g. a source and or a destination for a communication with another sending end point device and or receiving end point device . For example a first sending end point device and or receiving end point device may provide information to a second sending end point device and or receiving end point device e.g. via network device sending network and or receiving network . For example sending end point device may send to receiving end point device data which contains one or more scripts.

Network device may include one or more devices e.g. one or more traffic transfer devices capable of processing and or transferring data between sending end point devices and or receiving end point devices . For example network device may include a firewall a router a gateway a switch a hub a bridge a reverse proxy a server e.g. a proxy server a security device an intrusion detection device a load balancer or a similar device. For example network device may selectively route data between sending end point devices and receiving end point devices based on determining whether script within the data matches a signature.

Sending network and or receiving network may include one or more wired and or wireless networks. For example sending network and or receiving network may include a cellular network e.g. a long term evolution LTE network a 3G network a code division multiple access CDMA network etc. a public land mobile network PLMN a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network e.g. the Public Switched Telephone Network PSTN a private network an ad hoc network an intranet the Internet a fiber optic based network a cloud computing network and or a combination of these or another type of network. While shown as separate networks sending network and receiving network may be implemented as a single network.

The number and arrangement of devices and networks shown in are provided as an example. In practice there may be additional devices and or networks fewer devices and or networks different devices and or networks or differently arranged devices and or networks than those shown in . Furthermore two or more devices shown in may be implemented within a single device or a single device shown in may be implemented as multiple distributed devices. Additionally or alternatively a set of devices e.g. one or more devices of environment may perform one or more functions described as being performed by another set of devices of environment .

Bus may include a component that permits communication among the components of device . Processor may include a processor e.g. a central processing unit CPU a graphics processing unit GPU an accelerated processing unit APU etc. a microprocessor and or any processing component e.g. a field programmable gate array FPGA an application specific integrated circuit ASIC etc. that interprets and or executes instructions. Memory may include a random access memory RAM a read only memory ROM and or another type of dynamic or static storage device e.g. a flash memory a magnetic memory an optical memory etc. that stores information and or instructions for use by processor .

Storage component may store information and or software related to the operation and use of device . For example storage component may include a hard disk e.g. a magnetic disk an optical disk a magneto optic disk a solid state disk etc. a compact disc CD a digital versatile disc DVD a floppy disk a cartridge a magnetic tape and or another type of computer readable medium along with a corresponding drive.

Input component may include a component that permits device to receive information such as via user input e.g. a touch screen display a keyboard a keypad a mouse a button a switch a microphone etc. . Additionally or alternatively input component may include a sensor for sensing information e.g. a global positioning system GPS component an accelerometer a gyroscope an actuator etc. . Output component may include a component that provides output information from device e.g. a display a speaker one or more light emitting diodes LEDs etc. .

Communication interface may include a transceiver like component e.g. a transceiver a separate receiver and transmitter etc. that enables device to communicate with other devices such as via a wired connection a wireless connection or a combination of wired and wireless connections. Communication interface may permit device to receive information from another device and or provide information to another device. For example communication interface may include an Ethernet interface an optical interface a coaxial interface an infrared interface a radio frequency RF interface a universal serial bus USB interface a Wi Fi interface a cellular network interface or the like.

Device may perform one or more processes described herein. Device may perform these processes in response to processor executing software instructions stored by a computer readable medium such as memory and or storage component . A computer readable medium is defined herein as a non transitory memory device. A memory device includes memory space within a single physical storage device or memory space spread across multiple physical storage devices.

Software instructions may be read into memory and or storage component from another computer readable medium or from another device via communication interface . When executed software instructions stored in memory and or storage component may cause processor to perform one or more processes described herein. Additionally or alternatively hardwired circuitry may be used in place of or in combination with software instructions to perform one or more processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

The number and arrangement of components shown in are provided as an example. In practice device may include additional components fewer components different components or differently arranged components than those shown in . Additionally or alternatively a set of components e.g. one or more components of device may perform one or more functions described as being performed by another set of components of device .

As shown in process may include receiving data block . For example network device may receive data from sending end point device and or receiving end point device . Network device may buffer the received data while performing further analysis. In this way network device may obtain data from which scripts may be extracted and analyzed.

As further shown in process may include identifying within the data a context and a script associated with the context block . For example a context may include data associated with a document e.g. HTML XML PDF E MAIL an application e.g. a mobile embedded application web browser or other script engine or the like. The script may include embedded script linked script from another source or the like. In one example the context may be an HTML web page having HTML elements and the script may be a JavaScript element defined within a tag. In this way network device may determine whether and or how a script is to be matched to a signature.

As further shown in process may include generating and normalizing a syntax tree based on the script block . For example network device may parse the script identify valid tokens and populate an abstract syntax tree AST with nodes based on the identified tokens. Network device may further normalize the syntax tree by renaming local identifiers i.e. identifiers which may be changed without affecting the interpretation of the script according to a normalized naming scheme based on the node structure e.g. by numbering ranking the nodes and replacing identifiers associated with the nodes with new identifiers having a normalized string pattern based on a number associated with the node and or the type of node . Network device may also remove whitespace while creating the syntax tree. For example network device may identify and delete any whitespace which is not necessary for parsing the script.

As further shown in process may include generating a normalized script based on the syntax tree block . For example network device may traverse each node of the normalized syntax tree generated from the script and recode the script as a normalized script using the normalized naming scheme. Network device may normalized the whitespace of the normalized script by using a particular whitespace insertion scheme e.g. inserting a minimal amount of whitespace that preserves the syntactic structure of the script . By comparing the normalized script to similarly normalized script signatures network device may perform more accurate identifier independent matching to speed execution of a regular expression based signature matching algorithm.

As further shown in process may include determining whether to perform dynamic de obfuscation block . For example network device may determine whether to perform dynamic de obfuscation based on configuration information identifying a condition or a set of conditions associated with performing dynamic de obfuscation. For example a condition may include a state of a Boolean flag which may be set to true or false e.g. based on user input e.g. in the case of analyzing new scripts to determine whether the new scripts are malicious . Additionally or alternatively a condition may include a level and or indicia of obfuscation such as satisfying an obfuscation level threshold. Network device may for example determine the level and or indicia of obfuscation based on a heuristic algorithm e.g. by determining whether portions of script are likely to be encoded or based on a preliminary signature matching e.g. by determining whether the script matches one or more regular expression signatures associated with an obfuscation technique . Additionally or alternatively a condition may include availability of resources such as processing power network throughput latency and or memory space. Additionally or alternatively a condition may be based on information included in and or associated with the data such as a sender recipient context or the like. Alternatively or additionally network device may determine to perform dynamic de obfuscation of a script based on unsuccessfully attempting to match the script to a signature prior e.g. as described in block to performing dynamic de obfuscation. Dynamic de obfuscation may improve a level of de obfuscation and therefore a likelihood of malicious script detection.

As further shown in if dynamic de obfuscation is to be performed block YES then process may include generating an object model based on the context block . For example network device may identify an API and or object model which specifies how a script is to be interpreted and how the script may interact with its environment. Additionally or alternatively network device may identify information contained within the data such as elements environment variables or the like with which the script may interact at runtime. For example the object model may be an HTML document object model DOM which includes various methods properties and rules associated with e.g. a web browser environment. The DOM may include a DOM tree which maps data e.g. HTML and or scripting elements and values associated with the elements contained within one or more HTML XML CSS files associated with the script. By generating an object model network device may prepare the emulator environment to trace the normalized script.

As further shown in process may include tracing an interpretation of the normalized script in an emulated object model environment block . For example network device may employ a script interpreting debugging engine which emulates the environment associated with the object model generated. If the object model is a DOM then network device may emulate for example a web browser environment. Alternatively or additionally the object model may correspond to a different context e.g. PDF e mail embedded mobile application or the like and network device may likewise emulate an object model associated with that environment. Alternatively network device may employ an emulation model which does not correspond to a specific environment but still uses local elements within the object model.

Network device may substitute or implement alternative functions in place of system global potentially dangerous methods functions. Alternatively network device may interpret execute the script in a sandboxed environment to observe the results of the script s execution and or skip interpretation of portions of the script. Based on interpreting the script network device may generate a trace of events e.g. function entry exit points arguments passed values returned calling of object methods functions interacting modifying elements of the model or changing values associated with script variables object elements . The output from the trace provides network device with information which would be unavailable or difficult to obtain by static analysis and this information may be useful for de obfuscating script matching against a signature and identifying behavior of the script when executed.

As further shown in process may include generating a method call list based on the trace block . For example network device may identify based on the trace all calls references to functions which interact with the object model e.g. object methods . Network device may further generate a method call list comprising an ordered list of all calls to those functions a quantity of calls to those functions as well as arguments passed to those functions. In this way network device may characterize the script in terms of the script s interaction with its environment.

As further shown in process may include determining if the call list matches a signature block . For example network device may select a regular expression signature from a list of regular expression signatures determined to match call lists associated with one or more malicious scripts and determine whether the call list matches the regular expression signature. Network device may repeat this matching process e.g. iteratively for one or more additional regular expression signatures to determine whether the call list matches a call list associated with one of the one or more additional regular expression signatures.

As further shown in if the call list does not match a signature block NO then process may include optimizing the normalized script based on the trace block . For example network device may identify and remove from the normalized script a portion of the normalized script which does not affect meaningful script behavior e.g. dead code . Additionally or alternatively network device may identify and remove superfluous logic switches e.g. loops based on a constant expression which will always or never be interpreted at runtime alternatively represented constant values functions which return constant values split strings or the like. Based on the trace network device may also decrypt encrypted portions of the script and identify substitute alias functions. Network device may perform this optimization in an iterative manner. Alternatively or additionally network device may perform the optimization on the syntax tree which represents the script and create the optimized script from the syntax tree after optimizing the syntax tree.

As further shown in process may include determining whether the normalized script with or without additional trace based optimization matches a signature block . For example network device may select a regular expression signature from a list of regular expression signatures determined to match one or more normalized malicious scripts and determine whether the normalized script matches the regular expression signature. Network device may repeat this matching process e.g. iteratively for one or more additional regular expression signatures to determine whether the normalized script matches a malicious script associated with one of the one or more additional regular expression signatures.

As further shown in if the normalized script does not match a signature block NO then process may include determining whether the script behaves maliciously block . For example network device may determine e.g. based on user input the trace the call list the optimized normalized script and or a condition identified in the configuration information whether the script behaves maliciously despite not having matched a known signature. For example network device may identify based on the trace one or more interactions between the script and the emulated object model environment which are associated with one or more malicious behaviors e.g. based on a heuristic model .

As further shown in if the normalized script does not behave maliciously block NO then process may include processing the data as having a benign script block . For example network device may implement execute store the received data and or route the data to its intended recipient.

As further shown in if the normalized script behaves maliciously block YES then process may include modifying and or generating one or more signatures to match the normalized script and or the call list block . For example network device may assist a user in developing a new signature and or modifying an existing signature for a new form of malicious script by providing the user with a portion of the data containing the script the normalized optimized script the trace and or the call list. Additionally or alternatively network device may automatically e.g. without requiring input from a user generate a new signature and or modify an existing signature to identify the script as malicious. In this way network device may update existing signatures and or create new signatures to identify scripts as being malicious.

As further shown in if the normalized script or the call list matches a signature block YES or block YES or the script behaves maliciously block YES then process may include processing the data as having a malicious script block . For example network device may delete quarantine or otherwise prevent the execution access and or transfer of the data to another device e.g. to a receiving end point device associated with analyzing and or processing a malicious script . Additionally or alternatively network device may notify a user about the detection of a malicious script e.g. through an e mail log entry and or other message meant for access by display to a user device . Additionally or alternatively network device may generate one or more additional signatures for matching subsequent data received by network device . For example network device may generate a signature for matching data associated with a particular network device protocol content and or user e.g. to isolate the receiving network from a particular sending end point .

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

As shown in assume for example implementation that a first end point e.g. sending end point device sends to a second end point e.g. receiving end point device HTTP data HTTP 1.0 200 OK Content Type text html and additional content in response to an HTTP request from receiving end point device GET data.html HTTP 1.0 From endpoint2 network2 User Agent HTTPTool 1.0 . Assume further that a network device e.g. network device is positioned at a network location between the first end point and the second end point. Assume further that the network device intercepts and analyzes data passing between the first end point and the second end point as part of an intrusion detection and prevention system. In this way the network device may receive data passing between the first end point and the second end point to determine whether the data contains malicious scripting language.

As shown in assume for example implementation that the network device identifies script JavaScript and a context associated with the script a HTML web page contained within the data the HTTP response received from the first end point device . Assume further that the network device uses a suitable parser to identify valid script tokens keywords identifiers punctuators literals and the like . In this way the network device may begin to normalize the script for identification.

As shown in assume for example implementation that the network device generates an abstract syntax tree AST by creating nodes based on the tokens identified from the script. Assume further that the network device renames the local variables functions based on a standardized naming scheme e.g. v plus a sequential number for variables and f plus a sequential number for functions and the location of a node associated with a variable function numbering in order of traversal from root to branches . In this way the network device may use the AST to reduce storage size and processing load while mitigating obfuscation by variable function renaming.

As shown in assume for example implementation that the network device generates by traversing the nodes of the AST a normalized script having normalized identifiers as described with respect to . Assume further that the network device when generating the normalized script inserts whitespace according to a particular scheme for inserting whitespace e.g. a scheme directing the network device to insert only the minimum whitespace required to maintain the script s interpretation resulting in a normalized script having normalized whitespace. In this way the network device may match the normalized script to a regular expression signature using less memory and fewer processor resources than if the network device were to use the original script for matching while standardizing the naming scheme to defeat renaming obfuscation techniques.

As also shown in assume for example implementation that the network device has determined that dynamic de obfuscation is to be performed. Assume further that the network device identifies an API and based on the API generates a DOM tree which represents the HTML context and includes the normalized JavaScript. In this way the network device may initialize an emulator with an appropriate DOM for running a traced interpretation of the script.

As shown in assume for example implementation that the network device interprets the normalized script using the emulator within an emulated environment based on the DOM. Assume further that network device tracks function calls arguments returned values the DOM tree variable values and or other information in a trace. Using the emulator the network device may determine that the local variables represent split literal strings and may evaluate the concatenation of the split strings as object classid and clsid 55963676 2F5E 4BAF AC28 CF26AA587566 that the fromCharCode function operates with literal numeric value arguments and may evaluate the returned value of the function as http badsite and that the JavaScript script creates a new object in the DOM tree having the aforementioned classid and url as parameters.

As shown in assume that based on the trace the network device optimizes the AST to concatenate the identified split literal strings replace constant functions with literal equivalents propagate constants and substitute called functions for local alias functions which call the called functions. Assume that the network device generates an optimized normalized script based on the optimized normalized AST. In this way the network device may further reduce the memory and or processor requirements of the signature matching process as well as revert certain forms of data obfuscation in the script to reduce the odds of false negatives i.e. not matching an obfuscated malicious script to a signature .

Assume further that the network device generates a method call list based on the trace. Assume further that the method call list identifies three external methods as having been called by the script to interact with the DOM createElement setAttribute and fromCharCode as well as a call count associated with each 1 for all three and arguments passed to each inline no arguments for createElement and setAttribute 14 numeric values for fromCharCode . By generating the method call list the network device may provide another context for which a signature may be generated matched to identify a malicious script.

As shown in assume for example implementation that the network device determines whether the normalized script without dynamic de obfuscation matches a first regular expression signature REGEX1 var f1 document .createElement function var var1 . Assume further that the network device matches the first regular expression signature at the beginning of the normalized JavaScript and thereby determines that the data is to be treated as having a malicious script.

As further shown in assume that the network device determines whether the normalized script with dynamic de obfuscation matches a second regular expression signature REGEX2 55963676 2F5E 4BAF AC28 CF26AA587566 or a third regular expression signature REGEX3 badsite . Assume further that the network device matches the second and third regular expression signatures to the normalized dynamically de obfuscated script and thereby confirms that the data is to be treated as having a malicious script.

As further shown in assume that the network device determines whether the method call list matches a fourth regular expression signature REGEX4 fromCharCode 0 9 

In this way the network device may identify and or confirm the identification of a malicious script based on one or more regular expression signatures matching one or more scripts and or a method call list. As shown in the network device may select a particular regular expression signature or a particular set of regular expression signatures based on whether the signature is to be matched to a non dynamically de obfuscated normalized script a dynamically de obfuscated normalized script or to a method call list.

As shown in network device may based on determining whether the script matches a signature for a malicious script delete quarantine the data received from sending end point device if the script matches a signature or deliver the data to the receiving end point device if the script does not match a signature . In this way network device may enable receiving end point device to seamlessly send and receive data to and from sending end point device as well as other potentially dangerous untrusted sources while mitigating the risk of transferring a malicious script.

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

Implementations described herein provide an intrusion detection and protection system which inspects data passing through a device identifies a script and a context associated with the script normalizes whitespace and identifier naming de obfuscates the script traces the interpretation of the script in an emulated environment and matches the normalized de obfuscated script and other trace information to a regular expression signature for a script that has been identified as being malicious. Implementations described herein may also be used to assist a user in generating a regular expression signature to be matched against a script.

The foregoing disclosure provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above disclosure or may be acquired from practice of the implementations.

As used herein the term component is intended to be broadly construed as hardware firmware and or a combination of hardware and software.

Some implementations are described herein in connection with thresholds. As used herein satisfying a threshold may refer to a value being greater than the threshold more than the threshold higher than the threshold greater than or equal to the threshold less than the threshold fewer than the threshold lower than the threshold less than or equal to the threshold equal to the threshold etc.

It will be apparent that systems and or methods described herein may be implemented in different forms of hardware firmware or a combination of hardware and software. The actual specialized control hardware or software code used to implement these systems and or methods is not limiting of the implementations. Thus the operation and behavior of the systems and or methods were described herein without reference to specific software code it being understood that software and hardware can be designed to implement the systems and or methods based on the description herein.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of possible implementations. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one claim the disclosure of possible implementations includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used herein should be construed as critical or essential unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items and may be used interchangeably with one or more. Furthermore as used herein the term set is intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Also as used herein the terms has have having or the like are intended to be open ended terms. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

