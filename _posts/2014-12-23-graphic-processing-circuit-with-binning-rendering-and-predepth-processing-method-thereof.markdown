---

title: Graphic processing circuit with binning rendering and pre-depth processing method thereof
abstract: A graphic processing circuit with binning rendering and associated pre-depth processing method is provided. Firstly, a first depth data of a first primitive corresponding to a specified tile is received. Then, the pre-depth data corresponding to the specified tile is read from a pre-Z buffer. If the first depth data is not larger than the pre-depth data and the first primitive is an opaque primitive, the pre-depth data is updated with the first depth data. If the first depth data is not larger than the pre-depth data and the first primitive is a translucent primitive, an uncertainty ordering range is defined according to the first depth data and the pre-depth data, and the pre-depth data is updated with the uncertainty ordering range.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361697&OS=09361697&RS=09361697
owner: MEDIATEK INC.
number: 09361697
owner_city: Hsinchu
owner_country: TW
publication_date: 20141223
---
The present disclosure relates to a graphic processing circuit and a graphic processing method and more particularly to a graphic processing circuit with binning rendering and a pre depth processing method thereof.

Unless otherwise indicated herein approaches described in this section are not prior art to the claims listed below and are not admitted to be prior art by inclusion in this section.

Recently with the rapid development of the computer technology and the game software the 3D games developed according to the 3D displaying technology can provide vivid and gorgeous images. Since the handheld devices are gradually adopted the 3D displaying technology is gradually applied to the handheld devices. For example the handheld devices are smart phones tablet computers or other mobile devices.

Generally a 3D graphic processing circuit is a core of processing the 3D images. For displaying the exquisite 3D images the 3D graphic processing circuit has to consume a great deal of electric power. Especially when the 3D graphic processing circuit is disposed in a mobile device the electric power of the mobile device is quickly consumed.

Therefore it is important to increase the performance of the 3D graphic processing circuit while reducing the consumption of the electric power and extending the operating time of the mobile device.

The following summary is illustrative only and is not intended to be limiting in any way. That is the following summary is provided to introduce concepts highlights benefits and advantages of the novel and non obvious techniques described herein. Select implementations are further described below in the detailed description. Thus the following summary is not intended to identify essential features of the claimed subject matter nor is it intended for use in determining the scope of the claimed subject matter.

The present disclosure provides a graphic processing circuit and a depth processing method. By using a dual pre Z testing and occlusion culling mechanism with a binning rendering function the processing efficiency of a pixel shader circuit of the graphic processing circuit is enhanced.

The present disclosure provides a graphic processing circuit. The graphic processing circuit includes a vertex processing circuit and a pixel processing circuit. The vertex processing circuit includes a geometry processing circuit a pre Z testing circuit and a bin store. The geometry processing circuit is used for loading geometry data of a scene and performing a vertex transformation. The pre Z testing circuit is used for receiving the geometry data after the vertex transformation and segmenting the geometry data in a tile resolution thereby obtaining pre depth data of the scene in the tile resolution. The bin store is used for receiving the geometry data after the vertex transformation and segmenting the geometry data in a bin resolution thereby generating plural bin tables. The pixel processing circuit includes a rasterization processing circuit and a rendering device. The rasterization processing circuit is used for loading the plural bin tables converting the plural bin tables into plural tiles classifying the plural converted tiles into a first portion of tiles and a second portion of tiles according to depth data of the converted tiles and the pre depth data of the scene and discarding the second portion of tiles. The rendering device is used for receiving and processing the first portion of tiles thereby generating a color value and a depth value of each pixel of the scene. The geometry data contain vertex data of plural primitives. Each of the vertex data contains a source translucent value for indicating an attribute of the corresponding primitive as an opaque primitive or a translucent primitive.

The present disclosure further provides a pre depth processing method for a graphic processing circuit. The graphic processing circuit stores a pre depth data in a pre Z buffer. Firstly a first depth data of a first primitive corresponding to a specified tile is received. Then the pre depth data corresponding to the specified tile is read from a pre Z buffer. If the first depth data is not larger than the pre depth data and the first primitive is an opaque primitive the pre depth data is updated with the first depth data. If the first depth data is not larger than the pre depth data and the first primitive is a translucent primitive an uncertainty ordering range is defined according to the first depth data and the pre depth data and the pre depth data is updated with the uncertainty ordering range

Numerous objects features and advantages of the present disclosure will be readily apparent upon a reading of the following detailed description of embodiments of the present disclosure when taken in conjunction with the accompanying drawings. However the drawings employed herein are for the purpose of descriptions and should not be regarded as limiting.

The vertex processing circuit comprises a vertex loader a vertex shader and a bin store . The buffering device comprises a vertex buffer and a bin buffer . A scene contains plural objects. Each object is composed of plural primitives. An example of the primitive includes but is not limited to a triangle a quadrangle a line or a point.

While a scene is processed by the 3D graphic processing circuit the vertex data of all primitives may be temporarily stored into the vertex buffer by an application programming interface API and thus these vertex data may be further processed by the vertex processing circuit . The vertex data of each primitive contains the position information the color information and the texture coordinates of all vertexes that constitute the primitive.

The vertex processing circuit converts a frame in the scene from a 3D world space coordinate system to a 2D screen space coordinate system. Firstly the vertex data of the primitives stored in the vertex buffer are loaded into the vertex loader and transmitted to the vertex shader . Consequently a vertex transformation is performed by the vertex shader . The vertex shader may perform a lighting operation and a vertex transformation on the primitives according to programmable shader codes. After the vertex transformation is completed all primitives are converted to the 2D screen space coordinate system and then transmitted to the bin store .

Generally one scene is divided into plural bins. For example the size of one bin is 32 pixels 32 pixels. In case that the scene is composed of 1024 pixels 1024 pixels the scene may be divided into 1024 bins. It should be noted that the size of the bin and the size of the scene are not restricted.

In particular after the vertex transformation is completed the relationship between all primitives and the bins are established in the bin store and then stored into the bin buffer . For example if the screen space coordinate of the first primitive after the vertex transformation touches two bins the vertex data of the first primitive may be recorded into the bin tables of the bin store corresponding to the two bins.

Similarly after all primitives are subjected to the vertex transformation the vertex data of all primitives touching each bin may be recorded by the bin store . For example if the screen space coordinates of five primitives after the vertex transformation touch the first bin the vertex data of the five primitives may be recorded into the bin table corresponding to the first bin. In other words the bin tables corresponding to all bins may be further stored into the bin buffer by the bin store . Moreover each bin table corresponding to a specified bin contains the vertex data of the primitives touching the specified bin.

The pixel processing circuit comprises a bin loader a pre Z testing and occlusion culling circuit a pixel shader circuit and a post blending circuit . The buffering device further comprises a pre Z buffer a texture buffer and a color Z buffer .

The bin tables temporarily stored in the bin buffer may be loaded into the bin loader of the pixel processing circuit and then transmitted to the pre Z testing and occlusion culling circuit . After the bin tables are received by the pre Z testing and occlusion culling circuit the pre Z testing and occlusion culling circuit may sort the depth data of all primitives in the bin tables. Consequently the smallest depth data is determined.

During the sorting process the pre Z testing and occlusion culling circuit may selectively transmit a specified primitive to the pixel shader circuit according to the result of comparing the depth data of the primitives to be processed with the pre depth data stored in the pre Z buffer update the depth data corresponding to the specified primitive and temporarily store the updated depth data into the pre Z buffer . For example after the sorting process is completed the pre depth data stored in the pre Z buffer is the smallest depth data. The primitive corresponding to the smallest depth data is the closest to the observer.

The pre Z testing and occlusion culling circuit may judge the depth data of the specified primitive and compare depth data of the specified primitive with the pre depth data which is temporarily stored in the pre Z buffer . If the depth data of the specified primitive is larger the specified primitive is directly culled. On the other hand if the depth data of the specified primitive is smaller the pre depth data temporarily stored in the pre Z buffer is directly replaced by the depth data of the specified primitive and the specified primitive is transmitted to the pixel shader circuit so as to be processed.

After the depth data of all primitives in the bin table are sorted the pre depth data of the pre Z buffer corresponding to the first bin is the depth data of the primitive which is the closest to the display screen.

After the primitive is received by the pixel shader circuit of the pixel processing circuit the pixel shader circuit performs an arithmetic operation on all pixels of the primitive selectively reads a specified texture from the texture buffer and transmits the specified texture to the post blending circuit . Consequently the post blending circuit generates the color values and the depth values of all pixels of the scene and stores the color and depth values into the color Z buffer .

As mentioned above the pre Z testing and occlusion culling circuit of the 3D graphic processing circuit may compare the depth data of the specified primitive with the pre depth data and selectively transmits the specified primitive to the pixel shader circuit according to the comparing result. However since the bin loader of the pixel processing circuit is unable to determine the sequence of inputting the primitives to the pre Z testing and occlusion culling circuit the processing efficiency of the pixel shader circuit may be impaired.

As shown in the primitive P which is the closest to the eye of the observer has the smallest depth data z and the primitive P which is the farthest from the eye of the observer has the largest depth data z. In case that the three primitives P P and P sequentially enter the pre Z testing and occlusion culling circuit in the from front to back order only the primitive P is transmitted to the pixel shader circuit while the primitives P and P are culled. Under this circumstance the pixel shader circuit has better processing efficiency.

Please refer to . In case that the three primitives P P and P sequentially enter the pre Z testing and occlusion culling circuit in the from back to front order all of the three primitives P P and P are transmitted to the pixel shader circuit and the depth data stored in the pre Z buffer is sequentially replaced. Since the primitive P has the smallest depth data the primitives P and P are obscured by the primitive P. In fact the procedures of transmitting the primitives P and P to the pixel shader circuit are needless. In other words the sequence of inputting the primitives as shown in may adversely affect the processing efficiency of the pixel shader circuit .

Moreover if the three primitives are not all opaque primitives the processing method of the 3D graphic processing circuit becomes more complex. For example if the primitive P as shown in are translucent primitive and the primitives P and P are opaque primitives the sequence of inputting the three primitives P P and P may influence the processing result of the 3D graphic processing circuit .

The 3D graphic processing circuit of the present disclosure is capable of processing opaque primitives and translucent primitives. The operating principles of the vertex processing circuit will be illustrated as follows. The primitives described in this embodiment are all opaque primitives.

The vertex processing circuit comprises a geometry processing circuit a pre Z testing circuit and a bin store . The geometry processing circuit comprises a vertex loader and a vertex shader . The buffering device comprises a vertex buffer a pre Z buffer and a bin buffer .

While a scene is processed by the 3D graphic processing circuit the geometry data of all primitives may be temporarily stored into the vertex buffer by an application programming interface API and thus these geometry data may be further processed by the vertex processing circuit . An example of the primitive includes but is not limited to a quadrangle a triangle a line or a point. For example the geometry data may be a vertex data. The geometry data of each primitive contains the position information the color information and the texture coordinates of all vertexes that constitute the primitive.

The vertex processing circuit converts a frame in the scene from a 3D world space coordinate system to a 2D screen space coordinate system. The geometry processing circuit loads the geometry data into the vertex processing circuit . For example the geometry data of the primitives stored in the vertex buffer are loaded into the vertex loader and transmitted to the vertex shader . Consequently a vertex transformation is performed by the vertex shader . The vertex shader may perform a lighting operation and a vertex transformation on the primitives according to programmable shader codes. After the vertex transformation is completed all primitives are converted to the 2D screen space coordinate system and then transmitted to the pre Z testing circuit .

In this embodiment one scene is divided into plural tiles and plural bins. The size of the tile is smaller than the size of the bin. For example the size of one tile is 4 pixels 4 pixels and the size of one bin is 32 pixels 32 pixels. In case that the scene is composed of 1024 pixels 1024 pixels the scene may be divided into 65536 tiles or 1024 bins. It should be noted that the sizes of the tile the bin and the scene are not restricted.

Moreover after the vertex transformation is completed the pre Z testing circuit will construct the pre depth data of the whole scene in a tile resolution according to all primitives and store the pre depth data into the pre Z buffer . For example after the vertex transformation is completed the relationship between all primitives and the tiles are established by the pre Z testing circuit and stored into the pre Z buffer . Preferably the pre Z testing circuit may segment the primitives into plural tiles sort the depth data of all tiles and temporarily store the depth data into the pre Z buffer .

For example assume that the first primitive the second primitive and the third primitive touch the first tile after the vertex transformation is performed by the vertex shader . The depth data of the first primitive the second primitive and the third primitive corresponding to the first tile are za zb and zc respectively. The depth data za of the first primitive corresponding to the first tile contain the maximum depth value zax and the minimum depth value zai. The depth data zb of the second primitive corresponding to the first tile contain the maximum depth value zbx and the minimum depth value zbi. The depth data zc of the third primitive corresponding to the first tile contain the maximum depth value zcx and the minimum depth value zci. Moreover zai is larger than zbx and zbi is larger than zcx.

Firstly the depth data za of the first primitive corresponding to the first tile is temporarily stored into the pre Z buffer as a pre depth data by the pre Z testing circuit .

Then the pre Z testing circuit judges the depth data zb of the second primitive corresponding to the first tile. Since the pre depth data stored in the pre Z buffer is za and the minimum depth value zai of the pre depth data za is larger than the maximum depth value zbx of the depth data zb the first primitive corresponding to the first tile is deeper than the second primitive corresponding to the first tile among the whole scene. Under this circumstance the first primitive corresponding to the first tile is obscured by the second primitive and thus the first primitive corresponding to the first tile cannot be shown on the display screen. Meanwhile the pre Z testing circuit temporarily stores the depth data zb into the pre Z buffer . Consequently the depth data zb is the updated pre depth data in replace of the original pre depth data za. In other words the maximum depth value zax of the pre depth data za is replaced by the maximum depth value zbx of the depth data zb and the minimum depth value zai of the pre depth data za is replaced by the minimum depth value zbi of the depth data zb.

Then the pre Z testing circuit judges the depth data zc of the third primitive corresponding to the first tile. Since the pre depth data stored in the pre Z buffer is zb and the minimum depth value zbi of the pre depth data zbi is larger than the maximum depth value zcx of the depth data zc the second primitive corresponding to the first tile is deeper than the third primitive corresponding to the first tile among the whole scene. Under this circumstance the second primitive corresponding to the first tile is obscured by the third primitive and thus the second primitive corresponding to the first tile cannot be shown on the display screen. Meanwhile the pre Z testing circuit temporarily stores the depth data zc into the pre Z buffer . Consequently the depth data zc is the updated pre depth data in replace of the original pre depth data zb. In other words the maximum depth value zbx of the pre depth data zb is replaced by the maximum depth value zcx of the depth data zc and the minimum depth value zbi of the pre depth data zb is replaced by the minimum depth value zci of the depth data zc.

In this embodiment the pre Z testing circuit may compare the depth data of all primitives corresponding to each tile and determine the pre depth data corresponding to each tile. After all depth data corresponding to all tiles are sorted the pre depth data of the whole scene in the tile resolution are stored in the pre Z buffer .

After the vertex transformation is performed by the vertex shader the vertex data of all primitives are also transmitted to the bin store .

The relationship between all primitives and the bins are established by the bin store and then stored into the bin buffer . That is after all primitives are subjected to the vertex transformation the vertex data of all primitives touching each bin may be recorded by the bin store . Meanwhile a bin table is established. The bin store may store the bin tables of all bins into the bin buffer . Each bin table represents the vertex data of the primitives touching the corresponding bin.

In this embodiment the pixel processing circuit comprises a rasterization processing circuit and a rendering device . The rasterization processing circuit comprises a bin loader and an occlusion culling circuit . The rendering device comprises a pixel shader circuit and a post blending circuit . The buffering device further comprises a texture buffer and a color Z buffer .

The bin tables temporarily stored in the bin buffer may be loaded into the bin loader of the rasterization processing circuit and then transmitted to the occlusion culling circuit . After the bin tables are received by the occlusion culling circuit the depth data of all primitives are acquired according to the vertex data of all primitives in the bin tables. The occlusion culling circuit segments and converts each primitive into tiles and calculates the depth data thereof.

The occlusion culling circuit further compares the depth data of the converted tiles with the pre depth data in the pre Z buffer and determines whether the depth data of the converted tiles are transmitted to the pixel shader circuit according to a predetermined criterion.

As mentioned above all pre depth data of the whole scene have been stored in the pre Z buffer . If the depth data of the tile converted by the occlusion culling circuit is not larger than the corresponding pre depth data in the pre Z buffer it means that the converted tile is not obscured. Consequently the converted tile is transmitted from the occlusion culling circuit to the pixel shader circuit .

On the other hand if the depth data of the tile converted by occlusion culling circuit is larger than the corresponding pre depth data in the pre Z buffer it means that the converted tile is obscured. Under this circumstance the converted tile is directly discarded by the occlusion culling circuit without being transmitted to the pixel shader circuit .

As mentioned above after the occlusion culling circuit receives the bin tables and segments each primitive into the converted tiles it is not necessary to additionally sort the converted tiles. After the depth data of the converted tiles are compared with the corresponding pre depth data in the pre Z buffer the converted tiles requiring further processing are transmitted to the pixel shader circuit . Consequently the processing efficiency of the pixel shader circuit is effectively enhanced.

After the converted tile is received by the pixel shader circuit of the pixel processing circuit the pixel shader circuit performs an arithmetic operation on all pixels of the primitive corresponding to the converted tile selectively reads a specified texture from the texture buffer and transmits the specified texture to the post blending circuit . Consequently the post blending circuit generates the color values and the depth values of all pixels to be shown on the display screen and stores the color and depth values into the color Z buffer .

In the 3D graphic processing circuit of this embodiment the pre depth data of the whole scene in the tile resolution are firstly acquired by the pre Z testing circuit of the vertex processing circuit and stored in the pre Z buffer . Then while the occlusion culling circuit of the pixel processing circuit judges the converted tiles it is not necessary to additionally sort the converted tiles. After the depth data of the converted tiles are compared with the corresponding pre depth data in the pre Z buffer the converted tiles to be processed are transmitted to the pixel shader circuit while the converted tiles which need not be processed are discarded.

It should be noted that numerous modifications and alterations may be made while retaining the teachings of the present disclosure. In some situations the occlusion culling circuit is possibly unable to judge whether the converted tile is obscured according to the predetermined criterion and thus the converted tile is also referred as an ambiguous tile. For example if the maximum depth value or the minimum depth value of the depth data of the converted tile lies in the range between the maximum depth value and the minimum depth value of the pre depth data the converted tile is the ambiguous tile. The ambiguous tile may be transmitted from the occlusion culling circuit to the pixel shader circuit in order to be processed.

Preferably the vertex processing circuit and the pixel processing circuit of the 3D graphic processing circuit may be integrated into an integrated circuit. Preferably the bin buffer the pre Z buffer and the 3D graphic processing circuit may be integrated into an integrated circuit in order to increase the overall data accessing efficiency. Alternatively the bin buffer and the pre Z buffer are on die memories such as static random access memories SRAM or cache memories.

In the step S the geometry data contain vertex data of plural primitives. In the step S the plural primitives after the vertex transformation are segmented in the tile resolution so that the pre depth data of the scene in the tile resolution are obtained. In the step S the plural primitives after the vertex transformation are segmented in the bin resolution by the bin store so that the plural bin tables are generated.

In the step S the plural converted tiles are classified into the first portion of tiles and the second portion of tiles according to a predetermined criterion. According to the predetermined criterion the converted tiles whose depth data are not larger than the corresponding pre depth data in the pre Z buffer are classified as the first portion of tiles and the converted tiles whose depth data are larger than the corresponding pre depth data in the pre Z buffer are classified as the second portion of tiles. Preferably if the occlusion culling circuit is unable to judge whether the converted tiles are larger than the corresponding pre depth data in the pre Z buffer according to the predetermined criterion the converted tiles are classified as the first portion of tiles.

Moreover for processing opaque primitives and translucent primitives a destination translucent value is allocated in the pre Z buffer for recording the presence of the translucent primitives and depth relationships between the translucent primitives and the opaque primitives. Consequently the depth data of the translucent primitive between the translucent primitives is not served as the updated pre depth data of the pre Z buffer .

In comparison with the method of processing the opaque primitives the procedure of processing the pre depth data of the translucent primitive by the pre Z testing circuit of the vertex processing circuit is disclosed. The procedure of processing the translucent primitive by the pixel processing circuit is similar to the procedure of processing the opaque primitives by the pixel processing circuit and is not redundantly described herein.

While a scene is processed by the 3D graphic processing circuit the geometry data of all primitives may be temporarily stored into the vertex buffer by an application programming interface API and thus these geometry data may be further processed by the vertex processing circuit . For example the geometry data may be a vertex data. The geometry data of each primitive contains the position information the color information and the texture coordinates of all vertexes that constitute the primitive and further contains the attribute of the primitive. The attribute of the primitive includes the opaque primitive or the translucent primitive.

The vertex processing circuit converts a frame in the scene from a 3D world space coordinate system to a 2D screen space coordinate system. The geometry processing circuit loads the geometry data into the vertex processing circuit .

Firstly the geometry data of the primitives stored in the vertex buffer are loaded into the vertex loader and transmitted to the vertex shader . Consequently a vertex transformation is performed by the vertex shader . The vertex shader may perform a lighting operation and a vertex transformation on the primitives according to programmable shader codes. After the vertex transformation is completed all primitives are converted to the 2D screen space coordinate system and then transmitted to the pre Z testing circuit .

In this embodiment one scene is divided into plural tiles and plural bins. The size of the tile is smaller than the size of the bin. For example the size of one tile is 4 pixels 4 pixels and the size of one bin is 32 pixels 32 pixels. In case that the scene is composed of 1024 pixels 1024 pixels the scene may be divided into 65536 tiles or 1024 bins. It should be noted that the sizes of the tile the bin and the scene are not restricted.

Moreover after the vertex transformation is completed the pre Z testing circuit will construct the pre depth data of the whole scene in a tile resolution according to all primitives and store the pre depth data into the pre Z buffer .

In particular after the vertex transformation is completed the relationship between all primitives and the tiles are established by the pre Z testing circuit and stored into the pre Z buffer . Preferably the 3D graphic processing circuit may segment the primitives into plural tiles. While the pre Z testing circuit segments the primitives into the plural tiles the source translucent values corresponding to the segmented tiles are determined according to the attributes of the primitives. Moreover the pre Z testing circuit may sort the depth data for all tiles corresponding to a specified tile and temporarily store the pre depth data into the pre Z buffer .

Depending on the attributes of the primitives and the sequences of loading the primitives the situation of sorting the primitives and generating the pre depth data are different.

As shown in the depth data z of the first primitive P corresponding to the first tile contain the maximum depth value zand the minimum depth value z. Since the attribute of the first primitive P corresponding to the first tile is an opaque attribute the source translucent value src translucent P is 0 indicating the opaque attribute. Consequently the depth data z of the first primitive P corresponding to the first tile is temporarily stored into the pre Z buffer as a pre depth data pre z by the pre Z testing circuit . The maximum depth value and the minimum depth value of the pre depth data pre z corresponding to the first tile are updated with zand z respectively. Moreover the destination translucent value dst translucent is updated with 0 indicating no translucent tile corresponding to the first tile. Alternatively the temporary pre depth data pre z can be buffered in an internal memory e.g. a pre z cache and then the final determined pre z data are written into the pre Z buffer to save the DRAM bandwidth.

Then as shown in the depth data z of the second primitive P corresponding to the first tile contain the maximum depth value zand the minimum depth value z. Since the attribute of the second primitive P corresponding to the first tile is an opaque attribute the source translucent value src translucent P is 0 indicating the opaque attribute. Since the maximum depth value zof the depth data z is smaller than the minimum depth value zof the depth data z the first primitive P corresponding to the first tile is obscured by the second primitive P corresponding to the first tile. Consequently the depth data z is stored in the pre Z buffer as the updated pre depth data pre z. That is the maximum depth value and the minimum depth value of the pre depth data pre z corresponding to the first tile are updated with zand z respectively. Moreover the destination translucent value dst translucent is maintained at 0 indicating no translucent tile corresponding to the first tile.

Then as shown in the depth data z of the third primitive P corresponding to the first tile contain the maximum depth value zand the minimum depth value z. Since the attribute of the third primitive P corresponding to the first tile is an opaque attribute the source translucent value src translucent P is 0 indicating the opaque attribute. Since the maximum depth value zof the depth data z is smaller than the minimum depth value zof the depth data z the third primitive P corresponding to the first tile is obscured by the second primitive P corresponding to the first tile. Consequently the depth data z is not served as the updated pre depth data of the pre Z buffer . That is the maximum depth value and the minimum depth value of the pre depth data pre z corresponding to the first tile maintained at zand z respectively. Moreover the destination translucent value dst translucent is maintained at 0 indicating no translucent tile corresponding to the first tile.

As shown in the depth data z of the first primitive P corresponding to the first tile contain the maximum depth value zand the minimum depth value z. Since the attribute of the first primitive P corresponding to the first tile is an opaque attribute the source translucent value src translucent P is 0 indicating the opaque attribute. Consequently the depth data z of the first primitive P corresponding to the first tile is temporarily stored into the pre Z buffer as a pre depth data pre z by the pre Z testing circuit . The maximum depth value and the minimum depth value of the pre depth data pre z corresponding to the first tile are updated with zand z respectively. Moreover the destination translucent value dst translucent is updated with 0 indicating no translucent tile corresponding to the first tile. Alternatively the temporary pre depth data pre z can be buffered in an internal memory e.g. a pre z cache and then the final determined pre z data are written into the pre Z buffer to save the DRAM bandwidth.

Then as shown in the depth data z of the second primitive P corresponding to the first tile contain the maximum depth value zand the minimum depth value z. Since the attribute of the second primitive P corresponding to the first tile is a translucent attribute the source translucent value src translucent P is 1 indicating the translucent attribute. Since the translucent second primitive P is arranged between the pre depth data pre z corresponding to the first tile and the eye of the observer the minimum depth value of the pre depth data pre z is updated with the minimum depth value zof the depth data z of the translucent second primitive P. That is the minimum depth value zof the depth data z is stored in the pre Z buffer as the minimum depth value of the updated pre depth data pre z. After the procedure of updating the pre depth data pre z is completed the maximum depth value of the pre depth data pre z is maintained at zbut the minimum depth value of the pre depth data pre z is updated with z see . Moreover the destination translucent value dst translucent is updated with 1 indicating the presence of a translucent tile corresponding to the first tile.

Then as shown in the depth data z of the third primitive P corresponding to the first tile contain the maximum depth value zand the minimum depth value z. Since the attribute of the third primitive P corresponding to the first tile is an opaque attribute the source translucent value src translucent P is 0 indicating the opaque attribute. Since the depth data z of the third primitive P corresponding to the first tile lies within the range of the pre depth data pre z the depth data z is not served as the updated pre depth data of the pre Z buffer . That is the maximum depth value of the pre depth data pre z is maintained at zand the minimum depth value of the pre depth data pre z is maintained at z. Moreover the destination translucent value dst translucent is maintained as 1 indicating the presence of a translucent primitive corresponding to the first tile.

In this embodiment when a translucent second primitive appears between the pre depth data pre z corresponding to the first tile and the eye of the observer the range of the pre depth data pre z is expanded. Since the destination translucent value dst translucent is 1 the range of the pre depth data pre z represents an uncertainty ordering range. While all converted tiles corresponding to the first tile are processed by the occlusion culling circuit the converted tiles within the uncertainty ordering range are transmitted to the rendering device .

If the above approach of processing the translucent primitive is not done the depth data of the primitive closet to the eye of the observer is the updated pre depth data pre z. In other words the first primitive P and the third primitive P are culled by the occlusion culling circuit . Under this circumstance an erroneous ordering may occur. In this embodiment a destination translucent value is applied to indicate an uncertainty ordering range for the pre depth data pre z. Consequently the erroneous ordering can be avoided.

As shown in the depth data z of the fourth primitive P corresponding to the first tile contain the maximum depth value zand the minimum depth value z. Since the attribute of the fourth primitive P corresponding to the first tile is a translucent attribute the source translucent value src translucent P is 1 indicating the translucent attribute. Since the translucent second primitive P is arranged between the pre depth data pre z corresponding to the first tile and the eye of the observer the minimum depth value of the pre depth data pre z is updated with the minimum depth value zof the depth data z of the translucent fourth primitive P. That is the minimum depth value zof the depth data z is stored in the pre Z buffer as the minimum depth value of the updated pre depth data pre z. After the procedure of updating the pre depth data pre z is completed the maximum depth value of the pre depth data pre z is maintained at zbut the minimum depth value of the pre depth data pre z is updated with z see . Moreover the destination translucent value dst translucent is updated with 1 indicating the presence of a translucent tile corresponding to the first tile. Moreover the range of the pre depth data pre z is an uncertainty ordering range. In other words the uncertainty ordering range as shown in is expanded because of the translucent fourth primitive P. Alternatively the temporary pre depth data pre z can be buffered in an internal memory e.g. a pre z cache and then the final determined pre z data are written into the pre Z buffer to save the DRAM bandwidth.

As shown in the depth data z of the fourth primitive P corresponding to the first tile contain the maximum depth value zand the minimum depth value z. Since the attribute of the fourth primitive P corresponding to the first tile is an opaque attribute the source translucent value src translucent P is 0 indicating the opaque attribute. After the procedure of updating the pre depth data pre z is completed the maximum depth value of the pre depth data pre z is updated with zand the minimum depth value of the pre depth data pre z is updated with z see . Moreover the destination translucent value dst translucent is updated with 0 indicating an opaque status corresponding to the first tile.

Then a step S is performed to judge whether the first depth data is larger than the pre depth data. If the first depth data is larger than the pre depth data it means that the first primitive corresponding to the specified tile is obscured. The pre depth data in the pre Z buffer is not updated Step S .

On the other hand if the first depth data is not larger than the pre depth data it means that the first primitive corresponding to the specified tile is not obscured. The pre depth data in the pre Z buffer needs to be updated. Then a step S is performed to judge whether the first primitive is a translucent primitive. For example according to the source translucent value of the geometry data corresponding to the first primitive the first primitive is determined as the translucent primitive or the opaque primitive.

If the first primitive is the opaque primitive the primitives behind the first primitive corresponding to the specified tile are obscured by the first primitive. Consequently the first depth data is applied to update the pre depth data and stored in the pre Z buffer Step S .

If the first primitive is the translucent primitive the primitives behind the first primitive corresponding to the specified tile are not obscured by the first primitive. Consequently an uncertainty ordering range is defined according to the first depth data and the pre depth data and the uncertainty ordering range is served as the updated pre depth data and stored into the pre Z buffer Step S . For example the uncertainty ordering range is determined by the maximum depth value and the minimum depth value of the original pre depth data and the maximum value and the minimum value of the first depth data. Moreover the destination translucent value may indicate that the first primitive corresponding to the specified tile is translucent.

After all primitives touching the specified tile are processed by the above procedures of the pre depth data stored in the pre Z buffer can be further processed by the occlusion culling circuit .

It should be noted that numerous modifications and alterations may be made while retaining the teachings of the present disclosure. For example in another embodiment the minimum value of the pre depth data may be discarded in order to save the bandwidth between the 3D graphic processing circuit and the pre Z buffer . That is the pre depth data only contain a maximum depth value and a destination translucent value. For example in the maximum depth value of the pre depth data pre z is updated with z and the destination translucent value dst translucent is set as 0 . In the maximum depth value of the pre depth data pre z is updated with z and the destination translucent value dst translucent is set as 0 . In the pre depth data pre z is not updated. Moreover if the destination translucent value dst translucent of the pre depth data has been set as 1 it means that a translucent object is within the uncertainty ordering range. Under this circumstance it is not necessary to update the maximum depth value of the pre depth data pre z. For example as shown in the destination translucent value dst translucent of the pre depth data has been set as 1 . Consequently the maximum depth value of the pre depth data pre z is not updated.

From the above descriptions the 3D graphic processing circuit of the present disclosure has a binning rendering function. The 3D graphic processing circuit of the present disclosure is capable of processing opaque primitives and translucent primitives. After the vertex transformation is completed the pre Z testing circuit of the vertex processing circuit will construct the pre depth data of the whole scene in a tile resolution and store the pre depth data into the pre Z buffer . Moreover the converted tiles which need not be processed are discarded by the occlusion culling circuit of the pixel processing circuit . Consequently the processing efficiency of the pixel shader circuit is effectively enhanced.

While the present disclosure has been described in terms of what is presently considered to be the most practical and preferred embodiments it is to be understood that the present disclosure needs not be limited to the disclosed embodiment. On the contrary it is intended to cover various modifications and similar arrangements included within the spirit and scope of the appended claims which are to be accorded with the broadest interpretation so as to encompass all such modifications and similar structures.

The herein described subject matter sometimes illustrates different components contained within or connected with different other components. It is to be understood that such depicted architectures are merely examples and that in fact many other architectures can be implemented which achieve the same functionality. In a conceptual sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality can be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermedial components. Likewise any two components so associated can also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality and any two components capable of being so associated can also be viewed as being operably couplable to each other to achieve the desired functionality. Specific examples of operably couplable include but are not limited to physically mateable and or physically interacting components and or wirelessly interactable and or wirelessly interacting components and or logically interacting and or logically interactable components.

Further with respect to the use of substantially any plural and or singular terms herein those having skill in the art can translate from the plural to the singular and or from the singular to the plural as is appropriate to the context and or application. The various singular plural permutations may be expressly set forth herein for sake of clarity.

From the foregoing it will be appreciated that various embodiments of the present disclosure have been described herein for purposes of illustration and that various modifications may be made without departing from the scope and spirit of the present disclosure. Accordingly the various embodiments disclosed herein are not intended to be limiting with the true scope and spirit being indicated by the following claims.

