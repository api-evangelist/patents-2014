---

title: Drawing processor, drawing processing system, and drawing processing method
abstract: Disclosed herein is a drawing processing apparatus including: a drawing library section adapted to transmit a drawing command via a network; and a data transmission management section adapted to transmit reusable data, used to execute the drawing command, via the network at a time different from when the drawing command is transmitted. Also disclosed herein is a drawing processing apparatus including: a data reception management section adapted to receive reusable data, used to execute a drawing command, via a network at a time different from when the drawing command is received; and a drawing library section adapted to set the reusable data, received by the data reception management section, in a graphics processor as a resource and adapted to receive the drawing command via the network and supply the drawing command to the graphics processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09536274&OS=09536274&RS=09536274
owner: Sony Interactive Entertainment Inc.
number: 09536274
owner_city: Tokyo
owner_country: JP
publication_date: 20140320
---
The present disclosure relates to a drawing processing technology and more particularly to a technology for presenting a drawing command and data used by the drawing command.

In personal computers and game consoles the use of high image quality graphics has become pervasive. Among examples of these are executing an application such as a game or a simulation using high quality three dimensional computer graphics and playing video content generated by combining real images and computer graphics.

In general graphics is processed by a central processing unit CPU and a graphics processing unit GPU operating in a coordinated manner. The CPU is a general purpose processor designed to perform general purpose operations. In contrast the GPU is a dedicated processor designed to perform high level graphics operations. The CPU handles geometry operations such as projection transform based on a three dimensional model of an object. The GPU receives vertex data from the CPU and performs rendering. The GPU includes dedicated hardware such as a rasterizer and a pixel shader performing graphics processing through pipelining.

Some recent GPUs are called program shaders. As this name suggests these GPUs have a programmable shader function. In order to support shader programming a graphics library is commonly supplied. When an object is rendered it is necessary for the CPU to generate graphics commands to be executed by the GPU hardware one after another and hand them over to the GPU.

In connection with the related art the reader is requested to refer to Japanese Patent Laid Open No. 2008 123520.

In the case of an application using a network graphics commands and data are transmitted from a server to a client via the network so that a drawing process is performed by the client side. In the event of frequent data retransmission due to insufficient network bandwidth or communication error the drawing process is delayed thus resulting in poor responsiveness of the application. If data retransmission occurs frequently in a game application for which realtimeness is necessary in particular the progress of the game is delayed possibly impairing a realistic sensation.

In light of the foregoing it is desirable to provide a technology for efficiently performing a drawing process using a network.

According to an embodiment of the present disclosure there is provided a drawing processing apparatus that includes a drawing library section and a data transmission management section. The drawing library section transmits a drawing command via a network. The data transmission management section transmits reusable data used to execute the drawing command via the network at a time different from when the drawing command is transmitted.

Another embodiment of the present disclosure is also a drawing processing apparatus. This apparatus includes a data reception management section and a drawing library section. The data reception management section receives reusable data used to execute a drawing command via a network at a time different from when the drawing command is received. The drawing library section sets the reusable data received by the data reception management section in a graphics processor as a resource. The drawing library section also receives the drawing command via the network and supplies it to the graphics processor.

Still another embodiment of the present disclosure is a drawing processing system. This system includes a server and a client. The server transmits a drawing command via a network. The client receives the drawing command from the server. The server includes a server side drawing library section and a data transmission management section. The server side drawing library section transmits the drawing command to the client. The data transmission management section transmits to the client reusable data used to execute the drawing command at a time different from when the drawing command is transmitted. The client includes a data reception management section and a client side drawing library section. The data reception management section receives from the server the reusable data used to execute the drawing command. The client side drawing library section sets the reusable data received by the data reception management section in a graphics processor as a resource. The client side drawing library section also receives the drawing command from the server and supplies it to the graphics processor.

Still another embodiment of the present disclosure is a drawing processing method. This method includes transmitting a drawing command via a network. The method further includes transmitting reusable data used to execute the drawing command via a network at a time different from when the drawing command is transmitted. The method still further includes receiving the reusable data used to execute the drawing command. The method still further includes setting the received reusable data in a graphics processor as a resource receiving the drawing command via the network and supplying it to the graphics processor.

It should be noted that any combinations of the above components and any conversions of expressions of the present disclosure between method device system computer program data structure recording medium and so on are also effective as embodiments of the present disclosure.

The server transmits a drawing command and data separately to the client . Data in particular reusable static data such as texture data model data and shader program is transmitted separately from a drawing command. It should be noted that dynamic data that is not reused may be transmitted together with a drawing command.

The server includes an application SDK Software Development Kit a drawing library a data transmission management section a low quality texture model data storage section and a high quality texture model data storage section

The application SDK is an application program such as a game that has been created by using a variety of drawing commands of the drawing library . The low quality texture model data storage section and the high quality texture model data storage section store geometry data model data and textures used for mapping on polygon surfaces. Geometry data include for example vertex coordinate values vertex colors normal vectors UV values of polygons of objects. Geometry data and textures are used by the application SDK .

The drawing library transmits a drawing command to the client via the network and issues to the data transmission management section a request for transfer of static data that can be reused for the drawing command.

The data transmission management section reads static data such as texture and model data from the low quality texture model data storage section or high quality texture model data storage section transmitting the data to the client . Texture and model data is used for execution of the drawing command. The low quality texture model data storage section stores texture and model data of low drawing quality whereas the high quality texture model data storage section stores texture and model data of high drawing quality. The data transmission management section can select either one of them in accordance with the congestion condition of the network the processing capability of the client and other factors. For example low resolution texture data is selected if the network is in heavy traffic or if the client is limited in processing capability. On the other hand high resolution texture data is selected if the network has enough bandwidth or if the client is a high performance terminal.

The client includes a data reception management section a drawing library an identification ID association management section a graphics processing unit GPU and a texture model data cache .

The drawing library receives a drawing command from the server . The same library requests to the data reception management section texture and model data used for execution of the drawing command.

The data reception management section receives texture and model data from the server and stores it in the texture model data cache . The data reception management section supplies to the drawing library texture and model data used for execution of the drawing command in response to the request from the same library .

The ID association management section manages resource IDs resource identification information necessary for execution of the drawing command. The drawing library of the server generates a temporary resource ID temporary identification information of a resource used for execution of the drawing command supplying the temporary resource ID to the drawing library of the client . The drawing library of the client requests the GPU to assign the resource necessary for execution of the drawing command. The same library receives from the GPU a real resource ID identification information of the resource that has been actually assigned by the GPU . The drawing library of the client supplies to the ID association management section mapping information that associates the temporary resource ID with the real resource ID.

The ID association management section manages the temporary and real resource IDs in association with each other and receives a search inquiry from the drawing library . When the drawing library requests the ID association management section to search for a real resource ID using a temporary resource ID as a key the same section returns the real resource ID associated with the temporary resource ID.

Further as an option the drawing library of the client receives from the drawing library of the server a data identification ID identification information that uniquely identifies texture and model data. The ID association management section manages the data identification ID in association with temporary and real resource IDs. When the drawing library requests the ID association management section to search for temporary and real resource IDs using a data identification ID as a key the same section returns the temporary and real resource IDs associated with the data identification ID.

The drawing library acquires from the ID association management section the real resource ID associated with the temporary resource ID received from the drawing library of the server . The same library requests the GPU to set texture and model data stored in the texture model data cache in the real resource ID acquired from the ID association management section . The GPU assigns texture and model data to the resource identified by the real resource ID.

The drawing library requests the GPU to execute the drawing command. The GPU executes the drawing command using the texture and model data mapped to the real resource ID showing the rendering result on a display.

A graphics processing apparatus in related art has a host CPU and a GPU chip that are connected by an interface such as a bus. The host CPU supplies a drawing command and data to the GPU chip .

In the host CPU an application SDK issues a drawing command to a GPU through a graphic driver . The application SDK also loads static data used for the drawing command from a main memory and supplies the data to the GPU . The GPU registers the static data in a GPU memory . The GPU reads the same data from the GPU memory when executing the drawing command.

The drawing processing system in the present embodiment is premised on having a graphics processing apparatus architecture that allows registration of data in the GPU memory in advance. The drawing processing system has the host CPU on the side of the server and the GPU chip on the side of the client with the server and the client connected via the network .

A description will be given below of a drawing process handled by the drawing processing system according to the present embodiment in which a command and data are transmitted separately. However there are two types of implementations one in which a data identification ID is used which uniquely identifies data and the other in which no data identification ID is used. It is necessary to selectively use either of them according to the working example. A description will be given first of A implementation using a data identification ID followed by B implementation not using any data identification ID.

A description will be given of the implementation using a data identification ID with reference to . In this case temporary and real resource IDs and a data identification ID are managed in association with one another as described later.

Referring to in the server the application SDK issues a texture resource assignment request command to the server side drawing library S . The server side drawing library generates a temporary resource ID in accordance with the texture resource assignment request command S .

The drawing library transmits to the client the ID of the texture resource assignment request command and the temporary resource ID via the network S . The drawing library returns the temporary resource ID to the application SDK S .

As described above as the drawing library of the server issues a temporary resource ID and returns it to the application SDK it is not necessary to wait for the GPU of the client to issue a real resource ID. This makes it possible to avoid possible delay resulting from connection via the network . Further as will be described later an old real resource ID is deleted and a new real resource ID issued to replace data assigned to a resource thereby changing the value of the real resource ID returned from the client . As a result it is necessary for the drawing library of the server to identify the resource using the temporary resource ID which remains unchanged rather than using the real resource ID which is likely to be changed.

In the client the client side drawing library receives the command ID and the temporary resource ID from the server side drawing library via the network S . The drawing library issues a texture resource assignment request command to the GPU S . The GPU generates a real resource ID by executing the texture resource assignment request command and returns the real resource ID to the drawing library S .

The drawing library supplies to the ID association management section mapping information indicating the association between the temporary and real resource IDs and the ID association management section registers the mapping information S . Mapping information associating the temporary and real resource IDs is used to search for a corresponding real resource ID using a temporary resource ID as a key in steps S S and S which will be described later.

As described above a temporary resource ID is generated by the drawing library of the server whereas a real resource ID is generated by the GPU in response to a request from the drawing library of the client . When considering delay caused by the network if the drawing library of the server receives a real resource ID from the drawing library of the client a delay occurs in the execution of the command by the application SDK . Therefore the drawing library of the server temporarily returns the temporary resource ID to the application SDK . Then the drawing library of the client associates the real resource ID issued by the GPU with the temporary resource ID.

In the server the application SDK issues to the server side drawing library a command to set data in the texture resource S . This command is given the temporary resource ID the data identification ID and high and low resolution texture data as arguments.

The drawing library of the server inquires the data transmission management section by using the data identification ID as a key whether the texture data has already been transmitted to the client S . A data identification ID is intrinsic information that uniquely identifies texture data. A filename is an example of a data identification ID.

The data transmission management section searches the transmission history based on the data identification ID thus examining whether the texture data has already been transmitted S . The same section returns the judgment result to the drawing library S . If the judgment result is not transmitted the drawing library inquires the data transmission management section about the transmission conditions of the network S . The data transmission management section returns the judgment result to the drawing library S . If the judgment result is not enough bandwidth the drawing library supplies a low resolution data transmission instruction to the data transmission management section S . This transmission instruction is given the data identification ID and low resolution texture data as arguments.

The data transmission management section delegates the transmission of the low resolution data to a transmission thread S . At this time the data identification ID and low resolution texture data are also given as arguments. The data transmission management section updates the transmission history based on the data identification ID S .

Further the drawing library supplies to the data transmission management section a reservation for high resolution data transmission S . At this time the data identification ID and the high resolution texture data are given as arguments. The drawing library transmits the command ID the temporary resource ID and the data identification ID to the client S and notifies the application SDK that the command is complete S . At this time it is to be noted that data itself is not transmitted. The actual transmission of data is handled by the transmission thread to which the data transmission has been delegated by the data transmission management section . In the client the drawing library receives the command ID the temporary resource ID and the data identification ID from the server S .

Referring to the transmission thread of the server transmits the data identification ID and the low resolution texture data to the client via the network S . A reception thread of the client receives the data identification ID and the low resolution texture data S .

On the other hand the drawing library requests the data reception management section to acquire data using the data identification ID as a key S . The data reception management section searches the reception history based on the data identification ID S and returns the judgment result to the drawing library S . If the data associated with the data identification ID has yet to arrive as a result of judgment the drawing library waits for arrival of the data S .

Upon completion of reception of the low resolution texture data from the transmission thread the reception thread registers the low resolution texture data in a local cache. Then the same thread updates the reception history based on the data identification ID S and notifies the drawing library that the data has been updated S .

The drawing library that has been waiting for arrival of data requests the data reception management section again to acquire data using the data identification ID as a key S . The data reception management section searches the reception history based on the data identification ID S . Then if as a result of judgment the data has already arrived the same section supplies the low resolution texture data stored in the local cache to the drawing library S .

The drawing library requests the ID association management section to search for the real resource ID using the temporary resource ID as a key S . The ID association management section returns the real resource ID associated with the temporary resource ID to the drawing library S .

The drawing library supplies to the GPU a command to set data in the texture resource S . This command is given the real resource ID and the low resolution texture data as arguments. As a result the low resolution texture data is mapped to the real resource ID. Further the drawing library requests the ID association management section to register mapping information that associates the temporary and real resource IDs and the data identification ID S . Mapping information associating the temporary and real resource IDs and the data identification ID is used to search for the associated temporary and real resource IDs using the data identification ID as a key in step S which will be described later.

In the server the application SDK issues to the drawing library a texture selection command with a temporary resource ID as an argument S . The drawing library transmits to the client the ID of the texture selection command and the temporary resource ID S and notifies the application SDK that the command is complete S .

In the client the drawing library receives the command ID and the temporary resource ID from the server S . The drawing library requests the ID association management section to search for the real resource ID using the temporary resource ID as a key S . The ID association management section returns the real resource ID associated with the temporary resource ID to the drawing library S .

The drawing library supplies to the GPU a texture selection command with a real resource ID as an argument S . The GPU executes the texture selection command. As a result texture data assigned to the real resource ID is selected.

In the server the application SDK supplies one of various drawing commands to the drawing library together with a predetermined argument S . The drawing library transmits the ID of the drawing command and its argument to the client S and notifies the application SDK that the command is complete S .

In the client the drawing library receives the command ID and its argument from the server S . The drawing library supplies the drawing command to the GPU together with its argument S . At this time a drawing process is performed using low resolution texture data mapped to the real resource ID selected by the GPU .

In the server the transmission thread verifies the transmission conditions of the network S . If it is judged that the network has enough available bandwidth the transmission thread transmits a data identification ID and high resolution texture data to the client via the network S .

In the client the reception thread receives the data identification ID and the high resolution texture data from the server S . The same thread verifies the reception history using the data identification ID as a key S . If there is old data received for the data identification ID low resolution texture data in this case the reception thread updates the old data stored in the local cache with the high resolution texture data S . The same thread notifies the drawing library of the data identification ID and that the data has been updated S .

The drawing library requests the ID association management section to search for the temporary and real resource IDs using the data identification ID as a key S . The ID association management section returns the temporary and real resource IDs associated with the data identification ID to the drawing library S .

The drawing library supplies to the GPU a texture resource release command with the real resource ID as an argument S . As a result the GPU releases the resource associated with the real resource ID. The drawing library supplies a texture resource assignment request command to the GPU S . The GPU generates a new real resource ID and returns it to the drawing library S .

The drawing library requests the data reception management section to acquire data using the data identification ID as a key S . The data reception management section searches the reception history based on the data identification ID S and supplies high resolution texture data stored in the local cache to the drawing library S .

The drawing library supplies to the GPU a command to set data in the texture resource S . This command is given the new real resource ID and high resolution texture data as arguments. As a result the high resolution texture data is mapped to the real resource ID. Further the drawing library requests the ID association management section to register mapping information that associates the temporary and new real resource IDs and the data identification ID S .

In the above description in order to replace the low resolution texture data with the high resolution texture data the old real resource ID to which the low resolution texture data is mapped is temporarily deleted. Then the high resolution texture data is mapped to the newly generated real resource ID. Depending on the specification of the GPU it is possible to replace data by mapping new texture data to the same real resource ID without deleting the real resource ID. In this case it is possible to do without deleting the old resource ID and generating a new real resource ID.

In the server the application SDK issues to the drawing library a texture resource release command with a temporary resource ID as an argument S . The drawing library transmits to the client the ID of the texture resource release command and the temporary resource ID via the network S . The drawing library notifies the application SDK that the command is complete S .

In the client the drawing library receives the command ID and the temporary resource ID from the server S . The drawing library requests the ID association management section to search for the real resource ID using the temporary resource ID as a key S . The ID association management section returns the real resource ID associated with the temporary resource ID to the drawing library S .

The drawing library supplies to the GPU a texture resource release command with the real resource ID as an argument S . As a result the GPU releases the texture resource associated with the real resource ID. The drawing library requests the ID association management section to clear the mapping that associates the temporary and real resource IDs S . The ID association management section clears the mapping of the temporary and real resource IDs.

Referring to if a command is issued to set data in a texture resource Y in S the process proceeds to step S. If not N in S the process proceeds to step S in .

In step S the drawing library inquires the data transmission management section about the transmission history. If texture data has already been transmitted Y in S the process proceeds to step S. If texture data has yet to be transmitted N in S the drawing library verifies with the data transmission management section about the current transmission conditions of the network S . When the network has enough bandwidth Y in S the drawing library requests the data transmission management section to transmit high resolution texture data S . Then the process proceeds to step S. If the network does not have enough bandwidth N in S the drawing library requests the data transmission management section to transmit low resolution texture data first S . Further the drawing library reserves time shifted transmission of high resolution texture data with the data transmission management section S . Then the process proceeds to step S. Here the term time shifted transmission refers to data transmission at a different time when the network has enough bandwidth.

In step S the drawing library transmits to the client the ID of the command to set data in the texture resource the temporary resource ID and the data identification ID. These IDs are necessary for the client to perform the process.

Referring to if a texture resource assignment request command is issued in step S Y in S the drawing library generates a temporary resource ID S . Then the same library transmits the ID of the texture resource assignment request command and the temporary resource ID to the client S these IDs being necessary for the client to perform the process and notifies the application SDK of the temporary resource ID S . If a texture resource assignment request command is not issued in step S N in S the process proceeds to step S.

If a texture selection command is issued in step S Y in S the drawing library transmits the ID of the texture selection command and the temporary resource ID to the client S . These IDs are necessary for the client to perform the process. If a texture selection command is not issued in step S N in S the process proceeds to step S.

If a texture resource release command is issued in step S Y in S the drawing library transmits the ID of the texture resource release command and the temporary resource ID to the client S . These IDs are necessary for the client to perform the process. If a command other than a texture resource release command is issued in step S N in S the drawing library transmits the ID of that command and the temporary resource ID to the client S .

Referring to the drawing library waits for an event. When an event occurs the drawing library receives a command ID an argument and so on S .

If the event is a command to set data in a texture resource Y in S the process proceeds to step S. If not N in S the process proceeds to step S.

In step S the drawing library inquires the data reception management section about the reception history using a data identification ID as a key. If data has yet to be received N in S the drawing library goes into a wait state S and the process returns to step S. If data has already been received Y in S the drawing library acquires the data associated with the data identification ID from the data reception management section S . The drawing library inquires the ID association management section and converts the temporary resource ID into a real resource ID S . The same library sets the data acquired from the data reception management section in the GPU using the real resource ID S . The drawing library records the mapping of the temporary and real resource IDs and the data identification ID in the ID association management section S and the process returns to step S.

If the event is a texture update event in step S Y in S the drawing library performs a texture update process step S . The details of the texture update process handled by the drawing library will be described with reference to . If the event is not a texture update event in step S N in S the process proceeds to step S in .

Referring to if the event is a texture resource assignment request command in step S Y in S the drawing library issues a resource assignment request to the GPU and acquires a real resource ID from the GPU S . The same library registers the mapping of the temporary and real resource IDs in the ID association management section S . If the event is not a texture resource assignment request command in step S N in S the process proceeds to step S.

If the event is a texture selection command in step S Y in S the drawing library inquires the ID association management section and converts the temporary resource ID into a real resource ID S . The same library selects a texture to the GPU using the real resource ID S . If the event is not a texture selection command in step S N in S the process proceeds to step S.

If the event is a texture resource release command in step S Y in S the drawing library inquires the ID association management section and converts the temporary resource ID into a real resource ID S . The same library requests the GPU to release the resource using the real resource ID S . The drawing library deletes the mapping of the temporary and real resource IDs from the ID association management section S .

If the event is a command other than a texture resource release command in step S N in S the drawing library causes the GPU to execute the command associated with the command ID S .

A detailed description will be given of the texture update process in step S with reference to . The drawing library acquires the temporary and real resource IDs associated with the data identification ID from the ID association management section S .

The drawing library requests the GPU to release the resource using the real resource ID S . The same library issues a resource assignment request to the GPU and acquires a new real resource ID from the GPU S .

The drawing library acquires updated data from the data reception management section using the data identification ID S . The same library registers the updated data in the GPU using the new real resource ID S . The drawing library updates the mapping of the temporary and real resource IDs and the data identification ID in the ID association management section S .

A description will be given of the implementation not using any data identification ID with reference to . In this case temporary and real resource IDs are managed in association with each other as described later.

Referring to in the server the application SDK issues a texture resource assignment request command to the server side drawing library S . The server side drawing library generates a temporary resource ID in accordance with the texture resource assignment request command S .

The drawing library transmits to the client the ID of the texture resource assignment request command and the temporary resource ID via the network S . The drawing library returns the temporary resource ID to the application SDK S .

In the client the client side drawing library receives the command ID and the temporary resource ID from the server side drawing library via the network S . The drawing library issues a texture resource assignment request command to the GPU S . The GPU generates a real resource ID by executing the texture resource assignment request command and returns the real resource ID to the drawing library S .

The drawing library supplies to the ID association management section mapping information indicating the association between the temporary and real resource IDs and the ID association management section registers the mapping information S .

In the server the application SDK issues to the server side drawing library a command to set data in the texture resource S . This command is given the temporary resource ID and high and low resolution texture data as arguments.

The drawing library inquires the data transmission management section about the transmission conditions of the network S . The data transmission management section returns the judgment result to the drawing library S . If the judgment result is not enough bandwidth the drawing library supplies a low resolution data transmission instruction to the data transmission management section S . This transmission instruction is given the temporary resource ID and low resolution texture data as arguments.

The data transmission management section delegates the transmission of the low resolution data to the transmission thread S . At this time the temporary resource ID and low resolution texture data are also given as arguments.

Further the drawing library supplies to the data transmission management section a reservation for high resolution data transmission S . At this time the temporary resource ID and high resolution texture data are given as arguments. The drawing library transmits the command ID and the temporary resource ID to the client S and notifies the application SDK that the command is complete S . At this time it is to be noted that data itself is not transmitted. The actual transmission of data is handled by the transmission thread to which the data transmission has been delegated by the data transmission management section . In the client the drawing library receives the command ID and the temporary resource ID from the server S .

Referring to the transmission thread of the server transmits the temporary resource ID and the low resolution texture data to the client via the network S . The reception thread of the client receives the temporary resource ID and the low resolution texture data S .

On the other hand the drawing library requests the data reception management section to acquire data using the temporary resource ID as a key S . The data reception management section searches the reception history based on the temporary resource ID S and returns the judgment result to the drawing library S . If the data associated with the temporary resource ID has yet to arrive as a result of judgment the drawing library waits for arrival of the data S .

Upon completion of reception of the low resolution texture data from the transmission thread the reception thread registers the low resolution texture data in the local cache. Then the same thread updates the reception history based on the temporary resource ID S and notifies the drawing library that the data has been updated S .

The drawing library that has been waiting for arrival of data requests the data reception management section again to acquire data using the temporary resource ID as a key S . The data reception management section searches the reception history based on the temporary resource ID S . Then if as a result of judgment the data has already arrived the same section supplies the low resolution texture data stored in the local cache to the drawing library S .

The drawing library requests the ID association management section to search for the real resource ID using the temporary resource ID as a key S . The ID association management section returns the real resource ID associated with the temporary resource ID to the drawing library S .

The drawing library supplies to the GPU a command to set data in the texture resource S . This command is given the real resource ID and the low resolution texture data as arguments.

A flow of the drawing process performed by the drawing processing system is the same as that shown in . Therefore the description thereof is omitted.

In the server the transmission thread verifies the transmission conditions of the network S . If it is judged that the network has enough available bandwidth the transmission thread transmits a temporary resource ID and high resolution texture data to the client via the network S .

In the client the reception thread receives the temporary resource ID and the high resolution texture data from the server S . The same thread verifies the reception history using the temporary resource ID as a key S . If there is old data received for the temporary resource ID low resolution texture data in this case the reception thread updates the old data stored in the local cache with the high resolution texture data S . The same thread notifies the drawing library of the temporary resource ID and that the data has been updated S .

The drawing library requests the ID association management section to search for the real resource ID using the temporary resource ID as a key S . The ID association management section returns the real resource ID associated with the temporary resource ID to the drawing library S .

The drawing library supplies to the GPU a texture resource release command with the real resource ID as an argument S . As a result the GPU releases the resource associated with the real resource ID. The drawing library supplies a texture resource assignment request command to the GPU S . The GPU generates a new real resource ID and returns it to the drawing library S .

The drawing library requests the data reception management section to acquire data using the temporary resource ID as a key S . The data reception management section searches the reception history based on the temporary resource ID S and returns high resolution texture data stored in the local cache to the drawing library S .

The drawing library supplies to the GPU a command to set data in the texture resource S . This command is given the new real resource ID and high resolution texture data as arguments. Further the drawing library requests the ID association management section to register mapping information that associates the temporary and new real resource IDs S .

The drawing process following replacement of texture data as a result of texture update shown in is the same as that shown in . Therefore the description thereof is omitted. Texture deletion by the drawing processing system is the same as that shown in . Therefore the description thereof is omitted.

In step S the drawing library verifies with the data transmission management section about the current transmission conditions of the network . When the network has enough bandwidth Y in S the drawing library requests the data transmission management section to transmit high resolution texture data S . Then the process proceeds to step S. If the network does not have enough bandwidth N in S the drawing library requests the data transmission management section to transmit low resolution texture data first S . Further the drawing library reserves time shifted transmission of high resolution texture data with the data transmission management section S . Then the process proceeds to step S.

In step S the drawing library transmits to the client the ID of the command to set data in the texture resource and the temporary resource ID. These IDs are necessary for the client to perform the process.

Referring to the drawing library waits for an event. When an event occurs the drawing library receives a command ID an argument and so on S .

If the event is a command to set data in a texture resource Y in S the process proceeds to step S. If not N in S the process proceeds to step S.

In step S the drawing library inquires the data reception management section about the reception history using a temporary resource ID as a key. If data has yet to be received N in S the drawing library goes into a wait state S and the process returns to step S. If data has already been received Y in S the drawing library acquires the data associated with the temporary resource ID from the data reception management section S . The drawing library inquires the ID association management section and converts the temporary resource ID into a real resource ID S . The same library sets the data acquired from the data reception management section in the GPU using the real resource ID S . Then the process returns to step S.

If the event is a texture update event in step S Y in S the drawing library performs a texture update process step S . The details of the texture update process handled by the drawing library will be described with reference to . If the event is not a texture update event in step S N in S the process proceeds to step S in as with the case of A implementation using a data identification ID.

A detailed description will be given of the texture update process in step S with reference to . The drawing library acquires the real resource ID associated with the temporary resource ID from the ID association management section S .

The drawing library requests the GPU to release the resource using the real resource ID S . The same library issues a resource assignment request to the GPU and acquires a new real resource ID from the GPU S .

The drawing library acquires updated data from the data reception management section using the temporary resource ID S . The same library registers the updated data in the GPU using the new real resource ID S . The drawing library updates the mapping of the temporary and real resource IDs in the ID association management section S .

A description will be given below of some working examples of the drawing processing system in the present embodiment.

In the present working example the network load conditions are monitored. Data traffic is averaged by dynamically replacing data if the network lacks in available bandwidth. In the present working example data is transmitted after a temporary resource ID is issued in response to a resource assignment request. Therefore a data identification ID is not typically necessary. It is only necessary that temporary and real resource IDs are associated with each other. Therefore the present working example can be achieved by using either of A implementation using a data identification ID and B implementation not using any data identification ID.

In the server when a network monitoring device judges that the available bandwidth of the network will be exceeded as a result of intended transmission of data the data transmission management section of the server transmits low resolution data data in small amount instead to the client . Low resolution data prepared in advance may be used. Alternatively low resolution data may be dynamically generated. On the other hand the data transmission management section may reserve transmission of high resolution data data originally intended to be transmitted so that data is updated by transmitting high resolution data when the network has enough available bandwidth.

In the client the data reception management section receives and stores the low resolution data and the drawing library sets the low resolution data in the GPU . The GPU performs a drawing process using the low resolution data. Upon receipt of high resolution data the data reception management section updates this data and the drawing library sets the high resolution data in the GPU . The GPU performs a drawing process using the high resolution data from here onwards.

As described above in the working example 1 the server transmits static data to the client separately from a command. If the network is under high load low quality data data in small amount is transmitted first. Then when the network is under low load high quality data data in large amount is transmitted through time shifted transmission. This averages the data traffic thus avoiding network congestion and providing reduced response delay in the drawing processing system as a whole. Response performance can be enhanced particularly when an application such as a game for which realtimeness is necessary is executed.

In the present working example if an error occurs during data transmission or if data is damaged the client continuously executes an application using dummy data. When the server recovers from the error and transmits correct data the client performs a necessary drawing process. For example if texture data is not transmitted properly due to an error the client performs a drawing process using a dummy texture. Then when the server recovers from the error the client receives a correct texture and performs texture mapping once again. In the present working example data is transmitted after a temporary resource ID is issued in response to a resource assignment request. Therefore a data identification ID is not typically necessary. It is only necessary that temporary and real resource IDs are associated with each other. Therefore the present working example can be achieved by using either of A implementation using a data identification ID and B implementation not using any data identification ID.

In the server the network monitoring device detects a data transmission error of the network . The data transmission management section of the server reserves retransmission of data.

In the client if data requested by the drawing library has yet to arrive at the data reception management section the same library sets dummy data in the GPU . The GPU performs a drawing process using the dummy data. If data is retransmitted the data reception management section stores the data and the drawing library sets the correct data in the GPU . The GPU performs a drawing process using the correct data from here onwards.

As described above in the working example 2 the server transmits static data to the client separately from a command. If an error occurs during data transfer through a network the GPU performs a drawing process using the dummy data. Data is retransmitted at a different time. This provides improved error resistance in network transfer thus contributing to reduced response delay in the drawing processing system as a whole.

In the present working example texture and model data is transferred in advance while a game s title screen appears. In the present working example data is transferred before a temporary resource ID is issued in response to a resource assignment request. Therefore a data identification ID that uniquely identifies data is necessary. The present working example can be achieved by using A implementation using a data identification ID.

In the server the data transmission management section transmits data necessary for a drawing process one after another in advance. When the application SDK issues a drawing command the data transmission management section skips transmission of data that has been transmitted.

In the client the data reception management section stores received data. If data is requested by the drawing library the same section supplies the stored data to the drawing library . The GPU receives the data from the drawing library and performs a drawing process.

As described above in the working example 3 the server transmits static data to the client separately from a command. Data necessary for a drawing process is transmitted at a different time in advance. This provides necessary lower peak performance even for a smaller network bandwidth thus ensuring trouble free operation and providing reduced response delay in the drawing processing system as a whole.

In the working examples 1 to 3 data and a command are transmitted separately. Data necessary for execution of the command is transmitted at a different time. In the working examples 1 and 2 data is transmitted after a command is transmitted. In contrast in the working example 3 data is transmitted in advance. In any of these cases data is transmitted at a different time. This averages data traffic during network congestion or provides improved error resistance.

Further in the working example 1 it is possible to replace low quality data that has been transmitted first with high quality data transmitted later by using a data update mechanism. This provides enhanced drawing quality when the network congestion is resolved. Also in the working example 2 it is possible to replace old data damaged due to network congestion with new undamaged data by using the data update mechanism.

In the present working example a data set to be transmitted from the server to the client is switched according to the client performance and the network performance. In the present working example data is transmitted after a temporary resource ID is issued in response to a resource assignment request. Therefore a data identification ID is not typically necessary. It is only necessary that temporary and real resource IDs are associated with each other. Therefore the present working example can be achieved by using either of A implementation using a data identification ID and B implementation not using any data identification ID.

In the server the performance of the client or the network is investigated. The data transmission management section selects either a low or high resolution data set according to the performance and transmits the selected data set.

In the client the data reception management section stores data received from the server . If data is requested by the drawing library the same section supplies the stored data to the drawing library . The GPU receives the data from the drawing library and performs a drawing process.

As described above in the working example 4 the server transmits static data to the client separately from a command. The server selects either a low or high resolution data set according to the client or network performance and transmits the selected data set. This keeps network traffic to a minimum according to the performance thus providing reduced response delay in the drawing processing system as a whole. Unlike the working examples 1 and 2 a selected data set is transmitted from the beginning without updating the data further keeping the data traffic to a minimum.

In the present working example the client customizes its own texture and model data for use. In the present working example a data identification ID that uniquely identifies data is necessary to instruct that data should be replaced. The present working example can be achieved by using A implementation using a data identification ID.

In the client the drawing library sets data customized as appropriate on the client side in the GPU without being restrained by data received by the data reception management section from the server . The GPU performs a drawing process using the data replaced by the drawing library .

As described above in the working example 5 the server transmits static data to the client separately from a command. Data is customized as appropriate by the client side for use. This permits a user to customize texture and model data thus allowing for flexible drawing process.

A description has been given above of the present disclosure by way of embodiments. The embodiments are illustrative. It is understood by those skilled in the art that the combination of the components and processes can be modified in various ways and that these modification examples are also within the scope of the present disclosure.

In the above description texture data is primarily cited as an example of data transmitted from the server to the client separately from a command to explain the embodiments. The processes remain unchanged even if data to be transmitted is object model data such as vertex data.

Although identification information has been represented as IDs as done for such as temporary and real resource IDs and data identification ID a variety of implementations are available depending on the application programming interface API including use of a handle and an instance pointer. Therefore arbitrary identification information can be used as long as it allows unique identification in some way. As for data identification ID arbitrary identification information can also be used as long as it allows unique identification of data in some way such as using a file name.

In the above description the server generates a temporary resource ID. However the client may generate a temporary resource ID and return it to the server . It should be noted however that this may lead to a delay resulting from transfer of a temporary resource ID thus resulting in lower response speed.

The present disclosure contains subject matter related to that disclosed in Japanese Priority Patent Application JP 2013 076188 filed in the Japan Patent Office on Apr. 1 2013 the entire content of which is hereby incorporated by reference.

