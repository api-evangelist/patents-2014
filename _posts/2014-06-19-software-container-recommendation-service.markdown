---

title: Software container recommendation service
abstract: A technology is described for a software container recommendation service. An example method may include collecting utilization metrics for an application hosted on a computing instance. The utilization metrics may be a measure of computing resources used by the application. The utilization metrics may be analyzed to determine a level of computing resources for the computing instance used by the application. A software container configuration for the application may be determined based at least in part on the utilization metrics when analysis of the utilization metrics indicates an underutilization of computing resources by the application. The specifications of the software container configuration may then be provided to a customer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122562&OS=09122562&RS=09122562
owner: Amazon Technologies, Inc.
number: 09122562
owner_city: Seattle
owner_country: US
publication_date: 20140619
---
Generally applications are developed to be installed on a single computing platform such as an operating system on a server. The applications may be designed to execute on specific computing architectures where computing resources e.g. processors and memory may be shared with other applications installed on a server. As a result application developers may build and assemble applications in anticipation of deploying the applications across a number of different hardware environments that may include public private and virtualized servers. Due to the difficulty associated with anticipating interactions with services used by various applications on a server conflicts may arise within a service that results in poor performance or non performance of the application.

Software containers may be used to mitigate issues associated with developing and deploying applications across various hardware environments. For example an application and dependencies utilized by an application may be packed into a software container. The software container may be portable and may enable placement of a software container on servers having different hardware environments. Thus a software container may be moved from a private server having one computing architecture to a public server having another computing architecture with minimal impact or even no impact on the application.

A technology is described for a software container recommendation service that may be used to analyze a portion of a computing service environment and recommend a computing service configuration that includes packaging various applications into individual software containers and grouping the software containers on one or more computing instances. In one example configuration utilization metrics for an application installed on a computing instance may be collected. The utilization metrics may be collected over a predetermined time period e.g. over a period of days weeks months etc. . The utilization metrics may be a measurement of computing resources e.g. processing and memory of a computing instance hosting the application that are used by the application. After collecting the utilization metrics the utilization metrics may be analyzed to determine a level of capacity utilization by an application hosted on the computing instance i.e. an amount of computing resources used by an application versus an amount of computing resources available to the application . The level of capacity utilization may then be compared to a defined capacity utilization level e.g. a total capacity utilization level to determine whether available computing resources for the host computing instance may be underutilized by the application.

In a case where a determination is made that computing resources for a host computing instance may be underutilized by an application a software container configuration may be determined for the application. A software container may be a virtual container in which an application and application dependencies may be contained providing an isolated environment for the execution of the application on a computing instance. A software container configuration may be based in part on utilization metrics collected from the host computing instance. For example the utilization metrics may provide information about an amount of computing resources used to execute an application packaged into a software container. In addition a computing instance may be a virtual machine e.g. an instance of a software implementation of a computer that executes applications like a physical machine or server.

Specifications of the software container configuration may be provided to a customer e.g. via a user interface and upon approval from the customer a software container script may be generated according to the specifications for the software container configuration. The software container script may then be transferred to a computing instance selected to host the software container where the software container script may be executed to create the software container. Multiple software containers may be placed on the host computing instance.

In some computing service environments customers may deploy multiple computing instances for the purpose of hosting applications used within the computing service environment and each computing instance may host a single application. For example a computing instance may host a scheduling application that merely instigates computing tasks executed on other computing instances. As a result a customer may pay for a number of computing instances whose computing resources may be underutilized by the applications hosted on the computing instances. By packaging an application into a software container and consolidating multiple software containers on a single host computing instance underutilized computing instances may be released back to a computing service provider.

As illustrated a private virtual network may include a number of computing instances hosting applications that provide network infrastructure support services or other application services. For example the computing instances may host a scheduler service that instigates services processes programs or the like located on various other computing instances or may host support services like a Domain Name Server DNS a Virtual Private Network VPN or Network Address Translation NAT service. Some applications executing support services on a host computing instance may consume less compute and memory resources than what is available on the computing instance . Thus a portion of compute and memory resources for a computing instance may go unused by an application 

As another illustration a customer may use a computing instance to host an application that the customer may wish to isolate from other applications services processes and the like on a computing instance . For example a customer may wish to isolate an independent software vendor s small business accounting package from other applications and the customer may provide such isolation by placing the accounting package on a computing instance reserved for the accounting package. As such the customer may isolate the accounting package by installing the accounting package on an unoccupied computing instance . As a result the accounting package may occupy a limited portion of the compute and memory resources of the computing instance . Many customers may not be aware of an amount of compute and memory resources for a computing instance that an application occupies.

By way of the software container recommendation service a customer may be provided with information about the utilization of computing resources for a computing instance by an application . In one example configuration a daemon on a computing instance e.g. executing within the operating system on the computing instance may be used to monitor computing resource utilization by an application . A daemon may be a background process that for example monitors compute and memory resource utilization for a computing instance by an application . The daemon may be in communication with a metrics service and may transmit computing resource utilization data to the metrics service . In one example computing resource utilization data may be collected using a daemon over a defined time period such as over a number of days weeks or months.

The metrics service may store computing resource utilization data received from a daemon in a data store. The metrics service may use the computing resource utilization data to calculate utilization metrics for a computing instance . For example based on computing resource utilization data received from a daemon the metrics service may be able to calculate and store utilization metrics in a data store that may be used to determine whether the computing resources of a computing instance may be underutilized by an application . The utilization metrics in one example may provide an average or mean percentage of computing resources for a computing instance used by an application over a period of time. In another example utilization metrics may provide a maximum percentage of computing resources used by an application as well as a minimum percentage of computing resources used by the application over a period of time. Further utilization metrics may be broken out so as to provide individual metrics for various computing resources such as processor metrics memory metrics throughput metrics and any other metric that may be used to determine utilization of computing resources for a computing instance 

The software container recommendation service may retrieve utilization metrics for an application and or a computing instance and may make a determination of whether an application may be underutilizing the computing instance . In a case where a computing instance is determined to be underutilized by an application a recommendation may be provided to a customer via a user interface to create a software container configuration for the application . Further the recommendation may include specifying a computing instance on which to execute the software container . As an illustration a recommendation may provide utilization metric information for a computing instance hosting an application . The recommendation may specify that by packaging the application into a software container located on a computing instance hosting multiple software containers the computing instance currently hosting the application may be released back to a computing service provider or the customer for other uses.

A software container may provide an isolated environment for an application on a computing instance by creating a virtual container in which the application and application dependencies are contained. More specifically a software container may make use of an operating system s kernel control groups to limit account for and isolate a computing instance s resource usage e.g. processors memory disk input and output etc. associated with an application s process group i.e. the collection of processes for the application managed by a shell program . As one specific example a software container may be an extension of a Linux container that includes an API Application Programming Interface providing virtualization that runs an application in isolation i.e. resource isolation including processors memory block input and output network etc. and provides separate namespaces that isolate the application from an operating environment.

Using utilization metrics associated with an application a software container configuration may be determined. The utilization metrics may be used to determine a software container size e.g. an amount of processor memory block input and output etc. used to execute an application . Further based in part on the software container configuration a computing instance may be identified to host the software container configuration.

A customer using a client device may receive recommendations for software container configurations via a user interface. The user interface may be accessed by way of an interface layer included in the computing service environment . In one example a customer may view software container recommendations from the software container recommendation service and select a recommendation to have an application packaged into a software container and placed on a recommended computing instance . In one example a customer may modify a software container recommendation. For example a customer may modify a software container configuration by increasing or decreasing the resource size of the software container configuration or the customer may select a different computing instance to host a software container . Also in some examples a computing service provider may implement software container configuration rules that may specify some limitations on how software containers may be configured as discussed later in relation to .

Upon selection of a software container configuration or selection and modification of a software configuration by a customer a software container script may be generated. The software container script may be used to create a software container for an application according to specifications for the software container when the software container script is executed on a computing instance selected to host the software container as is discussed in greater detail later.

The metrics service may be used to collect computing resource utilization data from daemons located on various computing instances . In one example a daemon may be installed on a computing instance hosting an application where the daemon may send computing resource utilization data for the computing instance to the metrics service . The computing resource utilization data may include processor utilization data memory utilization data input and output utilization data as well as utilization data for other computing resources utilized by an application . The computing resource utilization data may be transmitted to the metrics service by way of a network connection e.g. a virtual network . The metrics service may calculate utilization metrics using the computing resource utilization data and store the utilization metrics in a data store . The utilization metrics may represent a portion or a percentage of computing resources utilized by an application executing on a computing instance . In one example a daemon may be instructed to send computing resource utilization data to the metric service for a defined time period. For example a computing service provider or a customer may specify a collection time period for which to collect computing resource utilization data. The collection time period specified may be for a number of hours days weeks or some other amount of time. The collection time period may be stored in a data store and the metrics service may provide instructions to a daemon on the collection time period or alternatively a daemon may obtain the collection time period from the data store .

Based in part on utilization metrics calculated for a computing instance the metrics service in one example may determine whether the computing resources of a computing instance are being underutilized by an application . Illustratively a utilization threshold value may be used as a measurement of minimum computing instance utilization and may be compared to utilization metrics for a computing instance . As one example an overall utilization threshold value may be compared to a composite score of utilization metrics for processor utilization memory utilization etc. In a case where the composite score of utilization metrics may be below the overall utilization threshold value an associated computing instance may be considered as underutilized by an application . As such a recommendation may be made to package the application into a software container.

As another example utilization threshold values for individual computing resources e.g. a processing utilization threshold value a memory utilization threshold value etc. may be compared to individual utilization metrics associated with a computing instance s individual computing resources e.g. processing utilization metrics memory utilization metrics etc. . In a case where one or more utilization threshold values for individual computing resources exceed a respective individual utilization metric a determination may be made whether a recommendation is made to package the application into a software container.

The container configuration module may be used to calculate a software container configuration for an application . A software container configuration may comprise a size of a software container an application that is to be packaged into the software container and any application dependencies that are to be packed into the software container. The size of a software container may refer to sizing specifications indicating an amount on computing resources dedicated to executing the software container. In other words the size of a software container may specify an amount of processing memory and other computing resources that may be used to execute an application contained in the software container.

In one example a software container configuration may be calculated based in part on utilization metrics associated with an application . The utilization metrics may provide information about computing resources that may be needed to execute the application . For example utilization metrics may show generally an amount of memory that an application occupies an amount of processing used to execute the application a number of input and output operations that are performed by the application as well as other computing resources related to utilization metrics . Based in part on the utilization metrics associated with an application a software container size may be determined. Having determined a software container size a computing instance may be selected to host the software container. Selection of a computing instance may be based in part on the software container size.

Sizing specifications for a computing instance to host a software container may be determined using the container configuration module where the sizing specifications may indicate a size of a computing instance that may be used to execute a number of software containers. In some examples a computing service provider may make various sizes and types of computing instances available to customers. Illustratively computing instances may be offered in sizes ranging from small medium large to extra large where size indicators may refer to an amount of computing resources e.g. processing memory input output that are included in a respective computing instance . Sizing specifications for a computing instance may be based on factors that may include a number of software containers that will be placed on a computing instance an amount of computing resources used by a software container the application type included in a software container e.g. memory intensive application network intensive application an input output intensive application etc. . Based in part on the factors a computing instance size may be selected to host one or more software containers.

A customer interface may be a user interface used to provide a customer with recommendations to improve computing resource utilization. Using a client device a customer may access the customer interface to view recommendations select recommendations for approval or modify specifications of recommendations. The customer interface may be for example a graphical user interface a command line interface a touchscreen interface or the like. In one example API calls may be utilized to obtain software container recommendations. For example an API call for at least one software container configuration may be made to the container configuration module . Upon the selection of a software container configuration by a customer an API call may be made to the container script module requesting that a software container script be created according to a software container configuration and that the software container script be transmitted to a computing instance selected to host an associated software container.

API calls procedure calls or other network commands that may be made in relation to the modules and services included in the computing device may be implemented according to different technologies including but not limited to Representational state transfer REST technology or Simple Object Access Protocol SOAP technology. REST is an architectural style for distributed hypermedia systems. A RESTful API which may also be referred to as a RESTful web service is a web service API implemented using HTTP and REST technology. SOAP is a protocol for exchanging information in the context of Web based services.

The container script module may be used to generate a software container script upon approval from the customer. A software container script may be used to create a software container for an application according to software container specifications when executed on a computing instance selected to host one or more software containers. As one example generating a software container script may include creating an application image e.g. an image of the structure of an application application dependencies and stored data associated with the application and generating instructions that reference the application image. The instructions when executed on a host computing instance create a software container and transfer the application image from a temporary location to the host computing instance where the application image is executed within the software container. In one example a software container script and or an application image may be transmitted to a host computing instance using a cryptographic network protocol such as SSH Secure Shell and SCP Secure Copy .

In one example configuration a software container configuration may be shared with other customers via a container template that the customers may obtain and use to create a software container according to the container template . For example a customer may configure a software container for an application and then create a container template based on the software container configuration. The container template may then be made available to other customers for example by way of a container template marketplace or electronic download forum.

A client device may include any device that may be capable of sending and receiving data over a network . A client device may comprise for example a processor based system such as a computing device. Such a computing device may contain one or more processors one or more memory modules and a graphical user interface . A client device may be a device such as but not limited to a desktop computer workstation network computer laptop or notebook computer tablet computer handheld computer or other devices with like capability. A client device may include a browser that may enable the client device to communicate with the customer interface . The client device may include a display such as a liquid crystal display LCD screen gas plasma based flat panel display LCD projector cathode ray tube CRT or other types of display devices etc.

The various processes and or other functionality contained on the computing device may be executed on one or more processors that are in communication with one or more memory modules according to various examples. The computing device may comprise for example of a server or any other system providing computing capability. Alternatively a number of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For purposes of convenience the computing device is referred to in the singular. However it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various data may be stored in a data store that is accessible to the modules and services contained on the computing device . The term data store may refer to any device or combination of devices capable of storing accessing organizing and or retrieving data which may include any combination and number of data servers relational databases object oriented databases cloud storage systems data storage devices data warehouses flat files and data storage configuration in any centralized distributed or clustered environment. The storage system components of the data store may include storage systems such as a SAN Storage Area Network cloud storage network volatile or non volatile RAM optical media or hard drive type media. The data store may be representative of a plurality of data stores as can be appreciated.

The computing network may include any useful computing network including an intranet the Internet a local area network a wide area network a wireless data network or any other such network or combination thereof. Components utilized for such a system may depend at least in part upon the type of network and or environment selected. Communication over the network may be enabled by wired or wireless connections and combinations thereof.

The virtualized compute service may be capable of delivery of computing and storage capacity as a software service to a community of end recipients. In one example the virtualized compute service may be established for an organization by or on behalf of the organization. That is the virtualized compute service may offer a private cloud environment. In another example the virtualized compute service may support a multi tenant environment wherein a plurality of customers may operate independently i.e. a public cloud environment . Generally speaking the virtualized compute service may provide the following models Infrastructure as a Service IaaS Platform as a Service PaaS and or Software as a Service SaaS . Other models may be provided. For the IaaS model the virtualized compute service may offer computers as physical or virtual machines and other resources. The virtual machines may be run as guests by a hypervisor as described further below. The PaaS model delivers a computing platform that may include an operating system programming language execution environment database and web server. Application developers may develop and run their software solutions on the virtualized compute service platform without incurring the cost of buying and managing the underlying hardware and software. The SaaS model allows installation and operation of application software in the virtualized compute service . End users may access the virtualized compute service using networked client devices such as desktop computers laptops tablets smartphones etc running web browsers or other lightweight client applications for example. Those familiar with the art will recognize that the virtualized compute service may be described as a cloud environment.

The particularly illustrated virtualized compute service may include a plurality of server computers . While four server computers are shown any number may be used and large centers may include thousands of server computers. The virtualized compute service may provide computing resources for executing computing instances . Computing instances may for example be virtual machines. A virtual machine may be an instance of a software implementation of a machine i.e. a computer that executes applications like a physical machine. In the example of a virtual machine each of the server computers may be configured to execute an instance manager capable of executing the instances. The instance manager may be a hypervisor virtual machine monitor VMM or another type of program configured to enable the execution of multiple computing instances on a single server. Additionally each of the computing instances may be configured to execute one or more applications.

One or more server computers may be reserved to execute software components for managing the operation of the virtualized compute service and the computing instances . For example a server computer may execute a management component . A customer may access the management component to configure various aspects of the operation of the computing instances purchased by the customer. For example the customer may setup computing instances and make changes to the configuration of the computing instances . The customer may also specify settings regarding how the computing instances are to be scaled in response to demand. An auto scaling component may scale the computing instances based upon rules defined by the customer. The auto scaling component may allow a customer to specify scale up rules for use in determining when instances should be instantiated and scale down rules for use in determining when existing instances should be terminated for example. The auto scaling component may consist of a number of subcomponents executing on different server computers or other computing devices. The auto scaling component may monitor available computing resources over an internal management network and modify resources available based on need.

A deployment component may be used to assist customers in the deployment of computing instances . The deployment component may have access to account information associated with the computing instances such as the name of owner of the account credit card information country of the owner etc. The deployment component may receive a configuration from a customer that includes data describing how computing instances may be configured. For example the configuration may specify an operating system provide one or more applications to be installed in computing instances provide scripts and or other types of code to be executed for configuring computing instances provide cache logic specifying how an application cache should be prepared and other types of information. The deployment component may utilize the customer provided configuration and cache logic to configure prime and launch computing instances . The configuration cache logic and other information may be specified by a customer using the management component or by providing this information directly to the deployment component .

As explained earlier computing instances used to execute applications e.g. software components for managing the operation of the virtualized compute service may be released when a software component is underutilizing a host computing instance . A software container recommendation service can be used to monitor utilization of computing instances and make recommendations for packaging a software component into a software container. The software container may then be placed on a computing instance executing other software containers.

Customer account information may include any desired information associated with a customer of the multi tenant environment. For example the customer account information may include a unique identifier for a customer a customer address billing information licensing information customization parameters for launching instances scheduling information auto scaling parameters etc. As described above the customer account information may also include security information used in encryption of asynchronous responses to API requests. By asynchronous it is meant that the API response may be made at any time after the initial request and with a different network connection.

A network may be utilized to interconnect the virtualized compute service and the server computers . The network may be a local area network LAN and may be connected to a Wide Area Network WAN or the internet so that end users may access the virtualized compute service . It should be appreciated that the network topology illustrated in has been simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein.

Moving now to a diagram illustrates an example method for recommending software container configurations to a customer. The method may include collecting utilization metrics for an application executing on a computing instance . The utilization metrics may be collected over a predetermined time period e.g. over a period of days weeks months etc. . The utilization metrics may be a measurement of computing resources used by the application when executing on the computing instance . For example utilization metrics may be a measurement of processor utilization memory utilization input and output utilization etc.

In one example a background service e.g. a daemon that interfaces with a metric collection service not shown may be used to collect utilization metrics . A metric collection service may receive capacity utilization metrics from a daemon and store the utilization metrics in a data store. In one example a recommendation service may perform the function of a metric collection service. In another example a metric collection service may be a separate service. Alternatively a hypervisor used to manage computing instances within a computing service environment may provide capacity utilization metrics for a computing instance hosting a single application . For example the hypervisor could provide operating system utilization information for an application .

After collecting utilization metrics over a defined time period the utilization metrics may be analyzed to determine a level of capacity utilization for the computing instance hosting the application . Capacity may refer to a computing instance s capacity to execute software installed on the computing instance . A level of capacity utilization may refer to an amount of computing resources e.g. processing memory network throughput etc. utilized by an application executing on a host computing instance . A defined capacity utilization level may be used to determine whether available computing resources may be underutilized in executing the application . For example a percentage e.g. 35 50 etc. of computing resources utilized by an application may be defined such that capacity utilization of the computing instance by an application under the percentage indicates underutilization of the computing instance . As a specific example a computing service provider may define a capacity utilization level as a composite score of 55 utilization of processing memory network throughput and I O Input and output . A computing instance having a composite capacity utilization level below 55 may be considered underutilized.

In a case where a determination has been made that a host computing instance may be underutilized by an application a software container configuration for the application may be determined. A software container may provide an isolated environment for the application on a computing instance by creating a virtual container in which the application and application dependencies are contained as described earlier.

A software container configuration may include sizing specifications for a software container and sizing specifications for a computing instance to host the software container as well as other specifications. A software container configuration may be determined based in part on the utilization metrics associated with the application . For example utilization metrics may provide information about an amount of computing resources that may be needed to execute the application packaged into a software container. Specifically the utilization metrics provide information about the amount of computing resources that the application occupied while executing on the computing instance . Therefore based on the amount of computing resources occupied by the application on the computing instance an inference may be made that a software container may occupy approximately the same amount of computing resources on a host computing instance as was occupied by the application on the computing instance .

The sizing specifications for the software container may include specifications for computing resources used to execute the application contained in the software container. For instance a sizing specification for a software container may include specifications for an amount of processing memory network throughput I O etc. used to execute an application . As a specific example sizing specifications for a software container may specify that an associated application may use 15 of processor cycles 25 500K of memory and 12 of network throughput.

The sizing specifications for the host computing instance may include specifications for a size of a computing instance. For example a computing service provider may offer a number of computing instance types and sizes. As a specific example a computing service provider may offer a general purpose computing instance in small medium large and extra large sizes. Likewise compute optimized computing instances memory optimized computing instance GPU Graphical Processing Unit optimized computing instance and storage optimized computing instance types may be offered in various sizes. The size of a computing instance may refer to a computing resource capacity of a computing instance. As a specific example a small computing instance may include one virtual processor 4 GBs of memory and 300 GBs of storage whereas a large computing instance may include 4 virtual processors 8 GBs of memory and 2 TBs of storage. As such sizing specification for the host computing instance may specify a size of a computing instance used to host a number of software containers .

Sizing specifications for the host computing instance may further consider the number of software containers that are to be placed on an individual host computing instance . A determination may be made whether an individual host computing instance can accommodate the software containers or can accommodate an additional software container . Further a determination may be made whether to select a larger computing instance that can be used to host the software container and software containers hosted on a computing instance that may be fully utilized.

Having determined a software container configuration for an application specifications of the software container configuration may be provided to a client device with a recommendation for implementing the software container configuration. In one example a recommendation for a software container configuration that includes a recommendation for a host computing instance may be provided to a customer via a graphical user interface that allows the customer to select the recommendation for implementation. A customer may be provided with the ability to modify various aspects of a recommended software container configuration. Illustratively a customer may modify sizing specifications for a software container such as increasing or decreasing processing specifications memory specifications or other computing resource specifications. Also a customer may modify a sizing specification for a host computing instance by selecting a different computing instance configuration.

Modification of a recommended software container configuration by a customer may be subject to a computing service provider s network security rules. For example when selecting a computing instance to host a number of software containers an evaluation of applications contained in the software containers may be performed to determine whether including two or more applications on an individual computing instance may result in a security risk. In a case where placing two or more software containers on a computing instance may violate a security rule a customer s modification may be prevented and the customer may be advised of the security issue.

In one example upon customer approval to implement a recommended software container configuration or to implement a customer specified software container configuration a software container script may be generated and the software container script may be transmitted via a network to a computing instance selected to host the software container . In one example a cryptographic network protocol may be used to transmit the software container script to a host computing instance .

The software container script may create a software container when executed on a host computing instance . In one example executing a software container script may create a software container by establishing an operating system level virtualization by way of a virtual environment that includes individual process and network space thereby isolating an application within the virtual environment. In addition executing the software container script may create an image of the application . Creating an application image may include replicating a structure of an application application dependencies and stored data associated with the application as constituted on a computing instance . Accordingly the application image provides a copy of the application that includes the application s data and dependencies that allow for moving the application to a different computing instance without having to reinstall the application .

Having created the software container and the application image the application contained in the software container may then be made available to the customer. Over time the customer may evaluate sizing specifications for the software container and modify the sizing specifications according to the customer s preference. Also a customer may evaluate a sizing specification for a computing instance hosting a number of software containers and in order to determine whether a different computing instance e.g. a smaller or larger computing instance may better accommodate the software containers and .

Upon customer approval to implement a recommended software container configuration or to implement a customer modified software container configuration a software container script may be generated and transmitted via a network to a server located outside of a customer s private virtual network . The software container script may be executed on the server thereby creating a software container for the application . The software container may then be transmitted to a computing instance selected to host the software container using a cryptographic network protocol.

In another example method not illustrated a computing instance may be launched within a customer s private virtual network for the purpose of hosting a number of software containers. After launching the host computing instance software container scripts for the software containers may be transmitted to the host computing instance and executed thereby creating the software containers on the host computing instance. The host computing instance may then be provided e.g. registered to the customer.

Some example distributed systems may include computing instances that host a single application that provides supporting infrastructure to the distributed system or other application functions. Namely an application may occupy a single computing instances . In some cases these applications may consume less computing resources e.g. compute and memory than what may be available on a computing instance . In other words the applications may be utilizing a small portion of the available computing resources of a computing instance and as a result a customer may be paying for computing resources that the customer may not be using.

As an example a customer may purchase a small computing instance that hosts a scheduling application e.g. a Cron that occupies a small fraction of computing resources available on the small computing instance . As another example a customer may use an application e.g. a small business accounting application that the customer wishes to isolate from other applications and therefore may purchase a small computing instance to host the application. Likewise the isolated application may consume fewer computing resources that what is available on the computing instance

Customers may be unaware of an amount of computing resources for a computing instance used by an application . As a result of the present technology a customer may be advised of computing instance utilization and may be provided with recommendations for software container configurations that may result in consolidating software containers onto a computing instance . As illustrated after evaluating a number of computing instance for a period of time a recommendation may be made to package a number of applications into separate software containers where the software containers may be placed on a single computing instance . In one example sizing specifications of the software containers may be used to determine a sizing specification of a computing instance selected to host the software containers . For example based on a sum of sizing specifications for the software containers a computing instance size may be determined e.g. a small medium or large computing instance where the size refers to an amount of computing resources available on the computing instance . After placing the software containers on a computing instance the computing instances that had been hosting the applications may be released back to a computing service provider.

Also displayed in the graphical user interface may be recommended host configurations that recommend a size for a host computing instance and a number of software containers to be hosted by the computing instance . A customer may accept a recommended host configuration or the customer may modify a recommended host configuration e.g. by using a drag and drop function by specifying which software containers a computing instance will host. In one example a visual indicator may be used to identify software containers that may not be located on the same computing instance due to a computing service provider s security policy restrictions. For example based on security policies a computing service provider may not allow certain applications to be hosted by a common computing instance using a software container.

In one example configuration a customer may make a software container template available to customers by including the software container template in a repository accessible to the customers . A customer may access a computing server via a client device and view available software container templates . The customer may then select a software container template and specify a computing instance included in a computing service provider environment on which to place a software container generated from the software container template . After selecting a software container template a software container may be generated e.g. via a software container script according to the software container template . In one example a software container script for the software container template may be transmitted to a computing instance whereupon the software container script may be executed to create the software container . Transmissions of software container related data between a data store and a computing instance may be performed using a cryptographic network protocol e.g. SSH and SCP .

As in block the utilization metrics may be analyzed to determine a level of computing resources of the computing instance used by the application. A capacity utilization level may specify an amount of computing resources occupied by an application. Thus for example a capacity utilization level may provide information about computing resources for a computing instance dedicated to hosting a single application that may be unoccupied by the application.

As in block a software container configuration may be determined for the application based at least in part on the utilization metrics when analysis of the utilization metrics indicates an underutilization of computing resources by the application. The software container configuration may include sizing specifications for a software container and sizing specifications for a computing instance hosting multiple software containers. For example a recommendation may identify or recommend a computing instance that may be used to host multiple software containers. As in block specifications of the software container configuration may then be provided to a customer who may accept the specifications or modify the specifications according to the customer s wishes. Upon acceptance a software container may be created for the application on a host computing device according to the specifications.

The memory device may contain modules that are executable by the processor s and data for the modules . Examples of services and modules located in the memory device may include a metrics service a container configuration module a container script module a customer interface module and other modules. The modules may execute the functions described earlier. A data store may also be located in the memory device for storing data related to the modules and other applications along with an operating system that is executable by the processor s .

Other applications may also be stored in the memory device and may be executable by the processor s . Components or modules discussed in this description that may be implemented in the form of software using high programming level languages that are compiled interpreted or executed using a hybrid of the methods.

The computing device may also have access to I O input output devices that are usable by the computing devices. Networking devices and similar communication devices may be included in the computing device. The networking devices may be wired or wireless networking devices that connect to the internet a LAN WAN or other computing network.

The components or modules that are shown as being stored in the memory device may be executed by the processor s . The term executable may mean a program file that is in a form that may be executed by a processor . For example a program in a higher level language may be compiled into machine code in a format that may be loaded into a random access portion of the memory device and executed by the processor or source code may be loaded by another executable program and interpreted to generate instructions in a random access portion of the memory to be executed by a processor. The executable program may be stored in any portion or component of the memory device . For example the memory device may be random access memory RAM read only memory ROM flash memory a solid state drive memory card a hard drive optical disk floppy disk magnetic tape or any other memory components.

The processor may represent multiple processors and the memory may represent multiple memory units that operate in parallel to the processing circuits. This may provide parallel processing channels for the processes and data in the system. The local interface may be used as a network to facilitate communication between any of the multiple processors and multiple memories. The local interface may use additional systems designed for coordinating communication such as load balancing bulk data transfer and similar systems.

While the flowcharts presented for this technology may imply a specific order of execution the order of execution may differ from what is illustrated. For example the order of two more blocks may be rearranged relative to the order shown. Further two or more blocks shown in succession may be executed in parallel or with partial parallelization. In some configurations one or more blocks shown in the flow chart may be omitted or skipped. Any number of counters state variables warning semaphores or messages might be added to the logical flow for purposes of enhanced utility accounting performance measurement troubleshooting or for similar reasons.

Some of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more blocks of computer instructions which may be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which comprise the module and achieve the stated purpose for the module when joined logically together.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices. The modules may be passive or active including agents operable to perform desired functions.

The technology described here may also be stored on a computer readable storage medium that includes volatile and non volatile removable and non removable media implemented with any technology for the storage of information such as computer readable instructions data structures program modules or other data. Computer readable storage media include but is not limited to non transitory media such as RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tapes magnetic disk storage or other magnetic storage devices or any other computer storage medium which may be used to store the desired information and described technology.

The devices described herein may also contain communication connections or networking apparatus and networking connections that allow the devices to communicate with other devices. Communication connections are an example of communication media. Communication media typically embodies computer readable instructions data structures program modules and other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. A modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared and other wireless media. The term computer readable media as used herein includes communication media.

Reference was made to the examples illustrated in the drawings and specific language was used herein to describe the same. It will nevertheless be understood that no limitation of the scope of the technology is thereby intended. Alterations and further modifications of the features illustrated herein and additional applications of the examples as illustrated herein are to be considered within the scope of the description.

Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more examples. In the preceding description numerous specific details were provided such as examples of various configurations to provide a thorough understanding of examples of the described technology. It will be recognized however that the technology may be practiced without one or more of the specific details or with other methods components devices etc. In other instances well known structures or operations are not shown or described in detail to avoid obscuring aspects of the technology.

Although the subject matter has been described in language specific to structural features and or operations it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features and operations described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. Numerous modifications and alternative arrangements may be devised without departing from the spirit and scope of the described technology.

