---

title: Account and customer creation in an on-line banking model
abstract: A system, method and article of manufacture are provided for account and customer creation in an online banking model. An application is received from a customer. The application includes information relating to the user and also documentation relating to the user. A first computer is utilized to create a profile for the customer based on the application received from the customer. The first computer is also utilized to create an account for the customer. Information relating to the created profile and account is transmitted from the first computer to a second computer where a notification is generated. The notification indicates that the account has been created. The notification is transmitted from the second computer to the customer utilizing a network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09367873&OS=09367873&RS=09367873
owner: Accenture Global Services Limited
number: 09367873
owner_city: Dublin
owner_country: IE
publication_date: 20140326
---
This is a continuation of Application No. 12 878 682 now allowed filed Sep. 9 2010 which is a continuation of U.S. application Ser. No. 12 043 528 filed Mar. 6 2008 now U.S. Pat. No. 7 813 983 which is a continuation of U.S. patent application Ser. No. 09 551 238 filed Apr. 17 2000 now abandoned. The disclosures of the above referenced applications are expressly incorporated herein by reference in their entireties.

The present invention relates to banking and investing and more particularly to providing banking and investment services utilizing a network.

Increasingly the public is going on line for a variety of transactions and information. More than 30 of the population have personal computers and modems. Furthermore over 60 of people with bank accounts have personal computers and modems. At the same time the number of people subscribing and using on line services is greater than 40 million and this number is growing at an exponential rate.

As the public uses computers with a greater frequency more financial transactions are being automated and performed via computer. There is good motivation to bank on line. On line banking provides convenience safety cost savings and potentially new types of services not readily or conveniently available via in person banking. Such potentially new services include access to superior up to the minute information on line investment clubs information filters and search agents.

With the increase in the number of financial transactions performed on line the convenience and cost savings of banking on line also increases. Additionally new and more powerful methods are being developed for protecting the security of financial transactions performed on line. The result is that convenience cost savings and enhanced security have combined to make on line financial services more useful and effective thereby driving the development of newer and more integrated services. More sophisticated financial systems that offer greater integration and a high degree of user control enable on line users to synthesize monitor and analyze a wide array of financial transactions and personal financial data.

Currently methods exist for users to perform a variety of on line financial transactions. These methods do not offer integrated personal financial accounting. For example users may bank on line thereby enabling performance of transactions such as transfers from one account to another. Additionally users may perform transactions on line such as stock or mutual fund purchases. In these approaches users are able to perform certain basic financial transactions.

Additionally methods exist for users to perform computerized personal financial accounting via a variety of personal financial software applications. These methods do not offer the user the ability to integrate on line performance of financial transactions. For example these software applications help users to categorize and keep track of financial expenses tax information or financial transactions. Generally these software applications require that users enter this financial information after such information has been recorded and collected by the user in a checkbook accounting book or another software application or to receive downloads. This includes downloads from different institutions with differing conventions categories and level of detail.

The automated performance of financial transactions is separate and distinct from any computerized method of accounting. Thus a user can bank on line but cannot easily take that transaction information and readily transfer it into a computer application for financial accounting. Users may not be able to reconcile bank statements efficiently or quickly obtain a complete picture of their personal finances such as monthly expenses and average monthly bank account balances.

Existing methods for financial transaction performance on line do not combine the features of tracing and monitoring transactions with an integrated financial accounting software application. Without this integration the user may not be able to readily and seamlessly combine on line banking with personal financial accounting.

Generally consumers must rely on others for financial advice. A need exists for users to have a quick and efficient way to integrate all of their financial information and for such information to be distilled and analyzed efficiently and thoroughly.

A useful method of assisting the integration and analysis of information such as financial information is by incorporating intelligent agents into an information system. An intelligent agent is a computer program that can perform a variety of tasks for a computer user. Typically a computer user will instruct an intelligent agent to assist the user by automatically performing a function and reporting the results of that performed function and or take an action. Intelligent agents have been used for such things as negotiating transactions on behalf of users reducing information overload for computer users and handling and prioritizing electronic mail on behalf of users. In each case intelligent agents have been employed to automatically perform tasks for users that would otherwise require the users constant and immediate attention. The result is that intelligent agents enable users to utilize time more efficiently and to obtain results and analysis quickly and without the users constant attention to the task being performed by the intelligent agent.

One current approach of utilizing intelligent agents in an information system is to place agents in the role of finalizing verifying or closing a transaction. This approach employs agents within the stream of electronic commerce.

Another approach of using intelligent agents in an information system is to incorporate agents in a telephone or communications network. This method of using agents focuses on the agents that can route telephone calls or send messages through a communication system.

One system utilizes agents to participate in an electronic dialogue and agree on terms of payment for a product or a service or to verify a form of identification. In this system agents are embedded in a transaction device that reviews electronic information presented by a customer for the purpose of accepting a payment or for verifying electronic identification presented by a user.

Another system uses an intelligent agent to follow the preferences and organizational considerations of the user in presenting and prioritizing electronic mail to users.

In a further system intelligent agents are used to interface with a network and deliver status messages to permit transmission and routing of communications signals.

None of the prior art methods utilize intelligent agents within an information system for the purpose of integrating and analyzing details of financial transactions and financial accounting across institutions and taking appropriate actions where the agent relieves the user of much of the routing details and learns and adapts.

A system method and article of manufacture are provided for account and customer creation in an online banking model. An application is received from a customer. The application includes information relating to the user and also documentation relating to the user. A first computer is utilized to create a profile for the customer based on the application received from the customer. The first computer is also utilized to create an account for the customer. Information relating to the created profile and account is transmitted from the first computer to a second computer where a notification is generated. The notification indicates that the account has been created. The notification is transmitted from the second computer to the customer utilizing a network.

In an embodiment of the present invention an application form may be transmitted to the customer utilizing the network prior to receipt of the completed application. In another embodiment of the present invention an identifier may be associated with the created profile. Information material for the customer may also be generated utilizing the second computer. The generated information material includes the identifier associated with the customer. The information material with the identifier is then printed using a printer coupled to the second computer to form welcome kit which can then be mailed to the customer.

In an aspect of the present invention the creation of the profile for the customer may include the generating of an identifier associated with the customer utilizing the first computer. In another embodiment of the present invention the customer profile may be associated with the created account to identify the customer as an account holder of the account. As an option a plurality of customer profiles may be associated with the created account.

In another aspect of the present invention the information relating to the customer included in the application may include personal information about the customer and or employment history of the customer. In a further aspect of the present invention the notification may be transmitted to the user in an electronic mail e mail message.

In even another embodiment of the present invention a portion or all of the information included in the application may be inputted into the first computer prior to generation of the customer profile. In yet another embodiment of the present invention the created profile and account may be stored in a database coupled to the first computer.

Embodiments of the present invention may serve to help develop a new business franchise through a new fighting brand and independent financial institution based on the buyer advocate model with the possibility of increasing overlap with a bank in the area of products and customers. New market segments may be served with a new financial services experience access to wider range of products and services with one stop convenience. Also branding based on a unique positioning may be possible to achieve instant and enduring relationships with customers. Embodiments of the present invention may also serve to provide online customers with financial products backed by tools guidance and service to help them establish and achieve their financial goals.

A preferred embodiment of a system in accordance with the present invention is preferably practiced in the context of a personal computer such as an IBM compatible personal computer Apple Macintosh computer or UNIX based workstation. A representative hardware environment is depicted in which illustrates a typical hardware configuration of a workstation in accordance with a preferred embodiment having a central processing unit such as a microprocessor and a number of other units interconnected via a system bus . The workstation shown in includes a Random Access Memory RAM Read Only Memory ROM an adapter for connecting peripheral devices such as disk storage units to the bus a user interface adapter for connecting a keyboard a mouse a speaker a microphone and or other user interface devices such as a touch screen not shown to the bus communication adapter for connecting the workstation to a communication network e.g. a data processing network and a display adapter for connecting the bus to a display device . The workstation typically has resident thereon an operating system such as the Microsoft Windows NT or Windows 95 Operating System OS the IBM OS 2 operating system the MAC OS or UNIX operating system. Those skilled in the art will appreciate that the present invention may also be implemented on platforms and operating systems other than those mentioned.

A preferred embodiment is written using JAVA C and the C language and utilizes object oriented programming methodology. Object oriented programming OOP has become increasingly used to develop complex applications. As OOP moves toward the mainstream of software design and development various software solutions require adaptation to make use of the benefits of OOP. A need exists for these principles of OOP to be applied to a messaging interface of an electronic messaging system such that a set of OOP classes and objects for the messaging interface can be provided.

OOP is a process of developing computer software using objects including the steps of analyzing the problem designing the system and constructing the program. An object is a software package that contains both data and a collection of related structures and procedures. Since it contains both data and a collection of structures and procedures it can be visualized as a self sufficient component that does not require other additional structures procedures or data to perform its specific task. OOP therefore views a computer program as a collection of largely autonomous components called objects each of which is responsible for a specific task. This concept of packaging data structures and procedures together in one component or module is called encapsulation.

In general OOP components are reusable software modules which present an interface that conforms to an object model and which are accessed at run time through a component integration architecture. A component integration architecture is a set of architecture mechanisms which allow software modules in different process spaces to utilize each others capabilities or functions. This is generally done by assuming a common component object model on which to build the architecture. It is worthwhile to differentiate between an object and a class of objects at this point. An object is a single instance of the class of objects which is often just called a class. A class of objects can be viewed as a blueprint from which many objects can be formed.

OOP allows the programmer to create an object that is a part of another object. For example the object representing a piston engine is said to have a composition relationship with the object representing a piston. In reality a piston engine comprises a piston valves and many other components the fact that a piston is an element of a piston engine can be logically and semantically represented in OOP by two objects.

OOP also allows creation of an object that depends from another object. If there are two objects one representing a piston engine and the other representing a piston engine wherein the piston is made of ceramic then the relationship between the two objects is not that of composition. A ceramic piston engine does not make up a piston engine. Rather it is merely one kind of piston engine that has one more limitation than the piston engine its piston is made of ceramic. In this case the object representing the ceramic piston engine is called a derived object and it inherits all of the aspects of the object representing the piston engine and adds further limitation or detail to it. The object representing the ceramic piston engine depends from the object representing the piston engine. The relationship between these objects is called inheritance.

When the object or class representing the ceramic piston engine inherits all of the aspects of the objects representing the piston engine it inherits the thermal characteristics of a standard piston defined in the piston engine class. However the ceramic piston engine object overrides these ceramic specific thermal characteristics which are typically different from those associated with a metal piston. It skips over the original and uses new functions related to ceramic pistons. Different kinds of piston engines have different characteristics but may have the same underlying functions associated with it e.g. how many pistons in the engine ignition sequences lubrication etc. . To access each of these functions in any piston engine object a programmer would call the same functions with the same names but each type of piston engine may have different overriding implementations of functions behind the same name. This ability to hide different implementations of a function behind the same name is called polymorphism and it greatly simplifies communication among objects.

With the concepts of composition relationship encapsulation inheritance and polymorphism an object can represent just about anything in the real world. In fact one s logical perception of the reality is the only limit on determining the kinds of things that can become objects in object oriented software. Some typical categories are as follows 

With this enormous capability of an object to represent just about any logically separable matters OOP allows the software developer to design and implement a computer program that is a model of some aspects of reality whether that reality is a physical entity a process a system or a composition of matter. Since the object can represent anything the software developer can create an object which can be used as a component in a larger software project in the future.

If 90 of a new OOP software program consists of proven existing components made from preexisting reusable objects then only the remaining 10 of the new software project has to be written and tested from scratch. Since 90 already came from an inventory of extensively tested reusable objects the potential domain from which an error could originate is 10 of the program. As a result OOP enables software developers to build objects out of other previously built objects.

This process closely resembles complex machinery being built out of assemblies and sub assemblies. OOP technology therefore makes software engineering more like hardware engineering in that software is built from existing components which are available to the developer as objects. All this adds up to an improved quality of the software as well as an increased speed of its development.

Programming languages are beginning to fully support the OOP principles such as encapsulation inheritance polymorphism and composition relationship. With the advent of the C language many commercial software developers have embraced OOP. C is an OOP language that offers a fast machine executable code. Furthermore C is suitable for both commercial application and systems programming projects. For now C appears to be the most popular choice among many OOP programmers but there is a host of other OOP languages such as Smalltalk Common Lisp Object System CLOS and Eiffel. Additionally OOP capabilities are being added to more traditional popular computer programming languages such as Pascal.

Class libraries are very flexible. As programs grow more complex more programmers are forced to reinvent basic solutions to basic problems over and over again. A relatively new extension of the class library concept is to have a framework of class libraries. This framework is more complex and consists of significant collections of collaborating classes that capture both the small scale patterns and major mechanisms that implement the common requirements and design in a specific application domain. They were first developed to free application programmers from the chores involved in displaying menus windows dialog boxes and other standard user interface elements for personal computers.

Frameworks also represent a change in the way programmers think about the interaction between the code they write and code written by others. In the early days of procedural programming the programmer called libraries provided by the operating system to perform certain tasks but basically the program executed down the page from start to finish and the programmer was solely responsible for the flow of control. This was appropriate for printing out paychecks calculating a mathematical table or solving other problems with a program that executed in just one way.

The development of graphical user interfaces began to turn this procedural programming arrangement inside out. These interfaces allow the user rather than program logic to drive the program and decide when certain actions should be performed. Today most personal computer software accomplishes this by means of an event loop which monitors the mouse keyboard and other sources of external events and calls the appropriate parts of the programmer s code according to actions that the user performs. The programmer no longer determines the order in which events occur. Instead a program is divided into separate pieces that are called at unpredictable times and in an unpredictable order. By relinquishing control in this way to users the developer creates a program that is much easier to use. Nevertheless individual pieces of the program written by the developer still call libraries provided by the operating system to accomplish certain tasks and the programmer must still determine the flow of control within each piece after it s called by the event loop. Application code still sits on top of the system.

Even event loop programs require programmers to write a lot of code that should not need to be written separately for every application. The concept of an application framework carries the event loop concept further. Instead of dealing with all the nuts and bolts of constructing basic menus windows and dialog boxes and then making these things all work together programmers using application frameworks start with working application code and basic user interface elements in place. Subsequently they build from there by replacing some of the generic capabilities of the framework with the specific capabilities of the intended application.

Application frameworks reduce the total amount of code that a programmer has to write from scratch. However because the framework is really a generic application that displays windows supports copy and paste and so on the programmer can also relinquish control to a greater degree than event loop programs permit. The framework code takes care of almost all event handling and flow of control and the programmer s code is called only when the framework needs it e.g. to create or manipulate a proprietary data structure .

A programmer writing a framework program not only relinquishes control to the user as is also true for event loop programs but also relinquishes the detailed flow of control within the program to the framework. This approach allows the creation of more complex systems that work together in interesting ways as opposed to isolated programs having custom code being created over and over again for similar problems.

Thus as is explained above a framework basically is a collection of cooperating classes that make up a reusable design solution for a given problem domain. It typically includes objects that provide default behavior e.g. for menus and windows and programmers use it by inheriting some of that default behavior and overriding other behavior so that the framework calls application code at the appropriate times.

Thus through the development of frameworks for solutions to various problems and programming tasks significant reductions in the design and development effort for software can be achieved. A preferred embodiment of the invention utilizes HyperText Markup Language HTML to implement documents on the Internet together with a general purpose secure communication protocol for a transport medium between the client and the Newco. HTTP or other protocols could be readily substituted for HTML without undue experimentation. Information on these products is available in T. Berners Lee D. Connoly RFC 1866 Hypertext Markup Language 2.0 November 1995 and R. Fielding H Frystyk T. Berners Lee J. Gettys and J. C. Mogul Hypertext Transfer Protocol HTTP 1.1 HTTP Working Group Internet Draft May 2 1996 . HTML is a simple data format used to create hypertext documents that are portable from one platform to another. HTML documents are SGML documents with generic semantics that are appropriate for representing information from a wide range of domains. HTML has been in use by the World Wide Web global information initiative since 1990. HTML is an application of ISO Standard 8879 1986 Information Processing Text and Office Systems Standard Generalized Markup Language SGML .

To date Web development tools have been limited in their ability to create dynamic Web applications which span from client to server and interoperate with existing computing resources. Until recently HTML has been the dominant technology used in development of Web based solutions. However HTML has proven to be inadequate in the following areas 

With Java developers can create robust User Interface UI components. Custom widgets e.g. real time stock tickers animated icons etc. can be created and client side performance is improved. Unlike HTML Java supports the notion of client side validation offloading appropriate processing onto the client for improved performance. Dynamic real time Web pages can be created. Using the above mentioned custom UI components dynamic Web pages can also be created.

Sun s Java language has emerged as an industry recognized language for programming the Internet. Sun defines Java as a simple object oriented distributed interpreted robust secure architecture neutral portable high performance multithreaded dynamic buzzword compliant general purpose programming language. Java supports programming for the Internet in the form of platform independent Java applets. Java applets are small specialized applications that comply with Sun s Java Application Programming Interface API allowing developers to add interactive content to Web documents e.g. simple animations page adornments basic games etc. . Applets execute within a Java compatible browser e.g. Netscape Navigator by copying code from the server to client. From a language standpoint Java s core feature set is based on C . Sun s Java literature states that Java is basically C with extensions from Objective C for more dynamic method resolution. 

Another technology that provides similar function to JAVA is provided by Microsoft and ActiveX Technologies to give developers and Web designers wherewithal to build dynamic content for the Internet and personal computers. ActiveX includes tools for developing animation 3 D virtual reality video and other multimedia content. The tools use Internet standards work on multiple platforms and are being supported by over 100 companies. The group s building blocks are called ActiveX Controls small fast components that enable developers to embed parts of software in hypertext markup language HTML pages. ActiveX Controls work with a variety of programming languages including Microsoft Visual C Borland Delphi Microsoft Visual Basic programming system and in the future Microsoft s development tool for Java code named Jakarta. ActiveX Technologies also includes ActiveX Server Framework allowing developers to create server applications. One of ordinary skill in the art readily recognizes that ActiveX could be substituted for JAVA without undue experimentation to practice the invention.

In one embodiment of the present invention the online banking model may also provide basic financial advisory content . The online banking model may further provide various tools such as for example a fund selection tool an asset allocation tool a portfolio tracking planning tool and one or more financial calculators.

In an aspect of the present invention the online banking model may additionally provide customers with Internet access SMS Phone Messaging call center services and e mail services enhanced offering information and education enhanced advisory content product configuration tools community tools such as chat rooms and bulletin boards Mobile Phone transactions and instant messaging utilizing the network. The online banking model may also provide personal portal features for the customer a personal financial manager for the customer general information about the online banking model for the customer as well as offering incentives for increasing the use of the services by the customer.

In accordance with an embodiment of the present invention the Internet may be the main delivery channel for an online banking model supported by a call center for basic inquiries and navigational assistance.

In an embodiment of the present invention an application form may be transmitted to the customer utilizing the network prior to receipt of the completed application. In another embodiment of the present invention an identifier may be associated with the created profile. Information material for the customer may also be generated utilizing the second computer. The generated information material includes the identifier associated with the customer. The information material with the identifier is then printed using a printer coupled to the second computer to form welcome kit which can then be mailed to the customer.

In an aspect of the present invention the creation of the profile for the customer may include the generating of an identifier associated with the customer utilizing the first computer. In another embodiment of the present invention the customer profile may be associated with the created account to identify the customer as an account holder of the account. As an option a plurality of customer profiles may be associated with the created account.

In another aspect of the present invention the information relating to the customer included in the application may include personal information about the customer and or employment history of the customer. In a further aspect of the present invention the notification may be transmitted to the user in an electronic mail e mail message.

In even another embodiment of the present invention a portion or all of the information included in the application may be inputted into the first computer prior to generation of the customer profile. In yet another embodiment of the present invention the created profile and account may be stored in a database coupled to the first computer.

In an aspect of the present invention the request may be received from a customer. In such an aspect of the present invention the identity of the customer may be authenticated prior to updating the profile information. In another aspect of the present invention the request may be received from a business unit utilizing the network. In a further aspect of the present invention the updating of the profile information stored in the database may further include updating the profile information stored in the database with one or more flags. As an option the flags may be referenced in normal CBS processing utilizing the network.

In one embodiment of the present invention a notification may be generated to confirm that the profile information has been updated. In such an embodiment of the present invention the notification may then be to the customer utilizing the network.

In one embodiment of the present invention the network may be utilized to adjust accounts of the payer and payee via a clearing house if it is determined that the either payee and payer do not have accounts with the common entity. As an option in such an embodiment of the present invention a record made be stored of the adjustment of the account of payee. In another embodiment of the present invention the adding of an additional payee to the list of payees may be permitted if the additional payee is not on the list of payees. In such an embodiment of the present invention information relating to the additional payee may be received and storied in a database.

In an aspect of the present invention the payment information may include information as to whether the payment is a one time payment or a recurring payment account number information bill number information and or transmission date information.

In an embodiment of the present invention a request to redeem funds may be received from the customer utilizing the network. The manager of the investment fund is notified of the request. The information stored in the database relating to the investment fund is updated to reflect the redemption of funds by the customer. Funds are also transferred from the account of the investment fund to the account of the customer. As an option in such an embodiment of the present invention the transferring of funds from the account of the investment fund to the account of the customer may occur four or more business days after the date of the receipt of the request to redeem funds.

In another embodiment of the present invention funds may be transferred from the account of the customer to the account of the investment fund via an intermediate account. In a further embodiment of the present invention the network may also be utilized to permit the customer to verify a price for subscribing to the investment fund.

In yet another embodiment of the present invention the request to subscribe from the customer may be consolidated with at least one additional request to subscribe to the investment fund. In one aspect of the present invention notifying the manager of the investment fund to enroll the customer in the investment fund may occurs one or more business day after the receipt of the request to subscribe to the investment fund.

In accordance with an embodiment of the present invention an online banking model may also include a risk profiler and asset allocation tool module. The Risk Profiler allows everyone to answer a set of questions to help determine their risk profile and display a recommended asset allocation mix. For registered user and customers this asset mix may be saved and displayed on a web page. A user can then go further by providing their personal financial data to generate a graphical representation of their current asset mix to compare with the recommended asset allocation mix.

In one embodiment of the present invention the list of questions comprises 5 questions. The risk profiler questions capture data needed to determine the risk profile. The risk profiler questionnaire page may contain selection boxes to capture information. The user clicks a Submit Button after answering to send the answers to be processed by the risk profiler action page .

The risk profiler action page processes the information from page risk profiler questionnaire page . The answers are then mapped to predefined results. This desired portfolio is then saved to the portal database and can be displayed in a web page. is a table for controls actions and responses of a risk profiler action page in accordance with an embodiment of the present invention.

One issue in delivering online banking may be ease of use. Ease of use may be predicated on many factors including the ability of the user to identify the banking information of interest and execute desired banking tasks without error or difficulty. Often users may perform four main tasks in checkbook and online banking applications 

Account Management This activity includes viewing bank account data from the bank such as cleared transactions and account balances initiating requests to bank to generate fund transfers between accounts and supporting tasks such as requesting information from the bank on certain accounts or transactions.

Bill payment Initiating requests to the bank to pay a vendor a certain amount by a certain date. Related tasks such as making payment inquiries may also be performed.

Checkbook transactions Accounting for checks withdrawals debit card purchases and the like that the user does on a regular basis. These transactions must be accounted for and integrated with the account data from the bank for an accurate reflection of the user s account.

Current balance calculation Determining how much money the user really has available in their account based on cleared and uncleared transactions including other checkbook transactions . The current balance may be calculated typically by the user or sometimes by the application by taking the latest account balance given by the bank and adding subtracting any uncleared transactions in the checkbook of the user.

Extensive consumer and usability research indicates two key areas of usability concerns with these various tasks. First customers may view banking bill payment and the determination of their current balance as interrelated tasks. Accordingly they may want related banking task and banking information to operate together in an online banking product. In fact banking tasks such as obtaining balance information cleared transactions and so forth may often be used to provide information to support the bill payment tasks.

Second customers may have difficulty using an online banking system when it is necessary to navigate from one user interface to another user interface in order to complete some task. Navigation difficulties may increase both the time required by the user to complete the task and the likelihood of error in completing the task.

A typical scenario is payment of bills which may include a large credit card bill. The user may typically decide how much of the credit card bill to pay based on currently available funds taking into account cleared transactions and uncleared transactions such as other bills being paid. To complete this task with an online banking software product the user may need to determine current balance in the account based for cleared transactions review in the checkbook to determine actual current balance based on the uncleared transactions and cleared balance and determine if they need to transfer money from another account to pay the bills. The user may also enter the bill payment requests including calculating how much of the credit card to pay from the actual balance. Further the user may use the requests to pay the bills and send the request to transfer funds.

From the user s perspective this banking activity is clearly an integrated one since the user may integrate three tasks writing checks to pay other bills obtaining cleared transactions and current balance from the bank and determining a combined current balance based on this information before writing the credit card bill.

There have been various approaches to making online banking easy for consumers to use for bill payment and checkbook maintenance. These approaches fall mainly into two categories typically tightly associated with the type of company that is delivering the online banking software and system. Generally there can be personal finance products from personal finance software companies and banking products from banks and other financial institutions.

Online banking software products from personal finance software companies can be checkbook centric. Personal finance software products may employ the checkbook as the underlying user model. As a result all transactions such as paying bills writing checking depositing or transferring funds may be done through a checkbook like user interface. For example Quicken 5.0 provides a checkbook metaphor for users. For instance there may be a user interface of the main entry screen for a personal finance software product. The entry screen may have a number of icons that are invoked to perform different functions such as the checkbook register online banking and online bill payment.

Prior to the availability of online banking the user would enter all of their various transactions into the checkbook register and then manually reconcile the checkbook register against a printed bank statement. In the checkbook register type user interface the user may see all of their transactions including both cleared and uncleared transactions mixed together. For example the first transaction may indicate that it has been cleared while the other transactions may indicate that they are not cleared. Further the balance may be of all transactions that have been entered by the user whether cleared or not. The user may not have separate balance information for just the cleared transactions immediately available.

Once online banking became available this type functionality was added as an additional feature in many checkbook products to both automate reconciliation of uncleared transactions in the checkbook against the bank s own records of cleared transactions and to provide electronic online payment of bills. Typically an online banking module is provided in which the user can view the bank s current account balance in a user interface display separate from the checkbook register. There may be separate icons for checkbook register and the online banking module. Selecting the online banking icon for the online banking module may cause the display of the online banking user interface. In such an interface the user may only see the cleared transactions which have been downloaded from the bank. The balance may be based only on the cleared transactions the bank having no information about the user s recently entered and uncleared checkbook transactions.

To use the online information for bill payment the user may need to download certain transactions to first reconcile their account. Once the transactions are downloaded the checkbook register may reflect which transactions have cleared. The only difference that appears to the user may be the indication in the checkbook register of which transactions have been cleared. The user may have to switch back and forth between the different user interfaces.

Electronic bill paying which has often been touted as a desirable feature of online banking systems may typically be enabled often as an extension of the checkbook of the user. Bill payments may be treated as checks and entered in a separate user interface. For example the interface which may be invoked from its own icon in the main user interface may be completely separate from the user interfaces for the online banking module or the checkbook.

In these types of software products there may be no persistent view of the bank s online statement as such. The online banking module may essentially be a staging area where the user may view transactions before using them to reconcile their checkbook or pay bills. In this user model the checkbook may be persistent and the online statement may be temporary since it is only viewed by downloading the information from the bank. Further in checkbook centric products the balance that may be visible throughout the software product may be the ending balance based on the transactions in the checkbook of the user including both cleared and uncleared transactions. The latest balance of cleared transactions from the bank may typically be visible only within the separate user interface display for the online banking module.

This approach assumes the primacy of the user s checkbook in the user model and system design and demotes the fact that the bank s own records of the user s account are a necessary component for an overall accurate reflection of account activity. While the bank s own records show the actual balance and cleared transactions of the user the information may not be presented to the user in single user interface consolidated with the existing information in the checkbook. Rather the information identifying cleared transactions may merely be propagated into the checkbook of the user. Further while bill payment is dependent on both the checkbook and online statement information that activity and related information may be presented in a completely separate user interface.

The software product may separate checkbook functions bill payment and viewing downloading transactions from the bank into discrete operations with their own user interfaces. The user may perform four separate tasks and may navigate multiple user interface screens to achieve what they consider to be the single task of paying bills based on currently available funds.

In the second category of online banking systems are software products and systems provided by banks or their affiliates. These software products can be bank statement centric and may take the bank s statement as the primary user model and interface. These software products may display only transactions that have actually been cleared by the bank. Along with only showing cleared transactions there may only be provided the balance information for cleared transactions.

These products may not let the user incorporate transactions that have not been posted or cleared by the bank for example checks that the user has recently written or withdrawals or deposits recently made but not posted. These transactions may be a fundamental component of the overall account of the user. The user may not get a complete view of the actual status of his account as the user considers it. The user may instead receive the information about cleared transactions that the bank has actually cleared.

Many on line banking systems contain information partially identifying the cleared transactions. There may not be information identifying the payee for checks debits and point of sale transactions. The user may need to determine which transaction is associated with which payee and which transactions have cleared. The user may need to correlate check numbers instead. Identification of point of sale transactions may be accomplished by correlating the date and amount available from the financial institution.

Many of these bank based software products are specifically intended to show the current cleared balance of the user and the cleared transactions on which it is based. The user may not see the impact of these activities on their accounts until they actually clear the bank. The effect of transactions on the balance of the account of the user may not be reflected in the user interface of the product. The user also may not be able to enter into the online system other transactions such as hand written checks or calculate a running balance based on both clear and uncleared transactions. To do these latter activities the user may need to download the cleared transaction data from the online banking product and import it into another personal finance product. For example the user may download cleared transactions into a specific file format. The user may then use a separate personal finance application or spreadsheet to actually integrate the cleared transaction data with their checkbook of uncleared transactions.

Users of these various types of online banking products may need to navigate between multiple different user interfaces to perform a single task. Two types of users of financial software products may be categorized as Organizers and Transactors. Organizers specifically intend to use their financial software products to organize categorize and track their finances with precision and detailed accuracy. For these types of users conventional software products that provide the ability to categorize transactions produce complex reports of income and expenses and the like are often seen as useful tools.

Transactors mainly want to pay bills and avoid overdrafts of their accounts. Transactors are typically not interested in categorizing transactions tracking all income and expenses or obtaining complex reports and summaries. To date conventional software products have been designed almost exclusively with Organizers as the intended users. Specifically because Transactors are concerned with avoiding overdrafts existing products and systems that do not provide an integrated view of both cleared transactions from the bank and uncleared transactions in the user s account along with a current balance may not meet the Transactor s need for an easy to use financial software product.

Organizers and Transactor s may desire an integration of all of the relevant information about a user s account the checkbook of uncleared transactions cleared transactions pending bill payments fund transfers and other transactions in a single user interface display. Both types of users of financial software may find it desirable to provide on an online banking software product and system that tightly integrates bill payment account management and determination of current balances into a single user interface display.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

