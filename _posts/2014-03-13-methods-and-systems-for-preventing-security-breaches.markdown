---

title: Methods and systems for preventing security breaches
abstract: A security payload is attached to a received binary executable file. The security payload is adapted to intercept application programming interface (API) calls to system resources from the binary executable file via export address redirection back to the security payload. Upon execution of the binary executable file, the security payload replaces system library export addresses within a process address space for the binary executable file with security monitoring stub addresses to the security payload. Upon the binary executable computer file issuing a call to a given API, the process address space directs the call to the given API back to the security payload via one of the security monitoring stub addresses that is associated with the given API. The security payload then can assess whether the call to the given API is a security breach.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09332021&OS=09332021&RS=09332021
owner: International Business Machines Corporation
number: 09332021
owner_city: Armonk
owner_country: US
publication_date: 20140313
---
The present patent application is a continuation of the patent application filed on May 28 2012 and assigned Ser. No. 13 481 926 which is a continuation of the patent application filed on Nov. 9 2007 and assigned application Ser. No. 11 938 181.

The present invention relates to preventing security breaches resulting from malicious binary executable files. More particularly the present invention relates to such prevention by attaching security payload software to the binary executable files where the security payload software intercepts application programming interface API calls to system resources via export address redirection.

Preventing security breaches within computing systems has become of paramount importance with the increasing interconnection of computing systems via the Internet and other networks. Viruses Trojan horses worms and other types of malicious software can infect computing systems causing them to perform inefficiently and or maliciously. Such malicious software is often received through web browsing programs when browsing web sites on the Internet through email programs when receiving new email and through instant messaging programs when receiving new instant messages i.e. with the software being received as a file attachment to an instant message among other ways.

Existing approaches to preventing security breaches typically focus on detecting whether malicious software has been received while performing the activities indicated in the previous paragraph. For example fingerprinting or signature detecting techniques examine computer program code or software that has been received and compares it to hexadecimal fingerprints or signatures to determine whether the computer program software is infected with any malicious elements i.e. malicious software thereby making the computer program software malicious and vulnerable. However such techniques can only detect known malicious software and not new malicious software requiring continual updating of the fingerprint or signature database to be effective.

Another example is a heuristic approach which attempts to detect whether computer program software that has been received is infected with any malicious software by scrutinizing various aspects of the software and determining the likelihood that the computer program software has been infected with malicious software. This approach can be relatively slow and results in decreasing the performance of a computing system. Furthermore the heuristic approach can yield false negatives indicating that computer program software is not infected with malicious software when in fact it is or false positives indicating that computer program software is infected with malicious software when in fact it is not .

A third example is an integrity checking approach which compares a calculated checksum of computer program software that has been received against a known checksum for the software. If the calculated checksum disagrees with the known checksum then it is concluded that the computer program software has been modified potentially due to infection with malicious software. However integrity checking presumes that a known checksum is available for the computer program software in question which is not always the case. There is therefore a need to ameliorate one or more of the above mentioned disadvantages associated with the prior art.

Disclosed is a method for preventing security breaches that may be present within binary executable electronic files. Accordingly the method includes receiving a binary executable electronic file. Security payload software is attached to the binary executable electronic file. The security payload software is adapted to intercept application programming interface API calls to system resources from the binary executable electronic file via export address redirection back to the security payload software.

Upon execution of the binary executable electronic file the security payload software replaces system library export addresses within a process address space for the binary executable electronic file with security monitoring stub addresses to the security payload software. The API calls are associated with the system library export addresses within the process address space.

Upon the binary executable electronic file issuing a call to a given API the process address space directs the call to the given API back to the security payload software via one of the security monitoring stub addresses that is associated with the given API. The security payload software assesses whether the call to the given API is a security breach. That is the security payload software assesses whether the call to the given API represents a security breach. Where the call to the given API is not a security breach the call is passed through to the given API to the system resources. However where the call to the given API is a security breach one or more security breach related actions are performed.

An article of manufacture of an embodiment of the invention includes a tangible computer readable medium such as a recordable data storage medium or another type of tangible computer readable medium. The medium includes a means which may be one or more computer programs stored on the medium. The means is for adding security payload software to a binary executable electronic file by attaching the software to the file. The security payload software is adapted to intercept application programming interface API calls to system resources from the binary executable electronic file via export address redirection back to the security payload software. Upon execution of the binary executable electronic file the security payload software replaces system library export addresses within a process address space for the binary executable electronic file with security monitoring stub addresses to the security payload software. The API calls are associated with the system library export addresses within the process address space.

A system of an embodiment of the invention includes hardware application software running on the hardware and plug in software for the application software and that also runs on the hardware. The application software is adapted to receive a binary executable electronic file. The plug in software is adapted to attach security payload software to the binary executable electronic file. The security payload software is adapted to intercept application programming interface API calls to system resources from the binary executable electronic file via export address redirection back to the security payload software. Upon execution of the binary executable electronic file the security payload software replaces system library export addresses within a process address space for the binary executable electronic file with security monitoring stub addresses to the security payload software. The API calls are associated with the system library export addresses within the process address space.

Embodiments of the invention provide for advantages over the prior art. Any binary executable electronic file that is received by a computing system can be trusted since attaching the security payload software to each such electronic file ensures that the electronic file does not perform maliciously when executed. Security can be enhanced or modified by changing security related policies against which calls to API s are assessed. As such no regular updates are necessarily needed to ensure protection against current and future malicious software. The user may be able to select to which binary executable electronic files the security payload software is attached to selectively enhance security of the computing system in question.

Furthermore the security payload software is itself resistant from infection by a virus or other malicious software insofar as the software is attached to a binary executable electronic file statically prior to execution of the file. The security payload computer software does not run or exist as a computer program on a computing system for a virus to infect except when a binary executable electronic file to which it has been attached is running and even then the software runs as part of such a binary executable electronic file. The security payload computer software can be lightweight in nature in that it consumes minimal memory and requires minimal system resources such that embodiments of the invention can be implemented in conjunction with other security measures.

In addition once a binary executable electronic file has been statically patched with security payload software the file can be distributed around a given network of systems without requiring re patching at each computing system. By comparison virus scanning security techniques typically scan each file upon entry to a computing system which means that multiple systems may scan a given file even though one of the systems has already determined that the file poses no malicious threat. Finally the security payload software attachment process is reversible such that the security payload software can be removed from a binary executable electronic file at any time.

Still other advantages aspects and embodiments of the invention will become apparent by reading the detailed description that follows and by referring to the accompanying drawings.

In the following detailed description of exemplary embodiments of the invention reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be utilized and logical mechanical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

Security payload code or software is attached to the binary executable computer code or software . As is described in more detail later in the detailed description the security payload software is adapted to intercept application programming interface API calls to system resources from the binary executable electronic file via export address redirection back to the security payload software. In one embodiment a plug in computer program i.e. plug in software may attach the security payload software to the binary executable computer software. The plug in computer program may be designed for plugging in to the application any computer programs i.e. any such software that originally received the binary executable electronic file. A plug in computer program can be defined generally and non restrictively as an auxiliary computer program that works with another computer program such as an application computer program i.e. application software to enhance the capability of the application computer program.

It is noted first that attachment of the security payload software to the binary executable electronic file is performed statically prior to the binary executable electronic file having been executed. It is also noted that the attachment performed in part of the method can include first mapping the binary executable electronic file to the virtual memory of the computing system or device on which the method is being performed. Such mapping to virtual memory permits the binary executable electronic file to be provided in a portable executable PE format within virtual memory so that a payload can be attached as can be appreciated by those of ordinary skill within the art.

Furthermore it is noted that after attachment of the security payload software to the binary executable electronic file the binary executable electronic file still is a valid binary executable electronic file such as a binary PE electronic file and is still capable of being executed. In general expanding a binary executable file such as by attaching security payload software thereto can be problematic. The binary executable file may become invalid according to the PE file format for instance or even if it remains valid the file may not be capable of being executed any longer. By comparison and in contradistinction in part attachment of the security payload software to the binary executable electronic file does not render the file invalid and the file is still capable of being executed.

The computing device may be a desktop computer a laptop computer a personal digital assistant a mobile phone or any other types of electronic computing device. The computing device is depicted in as including hardware on which an application computer program and a plug in computer program are running. The hardware may include processors memory storage devices peripheral devices input output I O devices network adapters and or other types of hardware. Furthermore other software in addition to and or in lieu of the programs and may be running on the hardware of the computing device such as operating systems device drivers and or other types of computer programs.

For exemplary purposes the server is described as being an email server but it may also be an instant messaging server a web server another type of server or another type of computing device. Importantly the server has stored thereon a binary executable electronic file that is received by the computing device . For example the application computer program may be an email computer program that receives the executable electronic file as part of an email within part of the method of . In response the plug in computer program attaches the security payload software to the executable electronic file within part of the method of .

Next the method creates a new section header for the security payload software and adds the new section to the header information of the binary executable electronic file as indicated by the letter B in . For example a new IMAGE SECTION HEADER is created for the security payload software and is named such as .payload within the header information of the binary executable electronic file. This section header is added after the headers for the existing sections of the binary executable electronic file and before the raw data for the first such section.

This new section header acts as the header information for the new section containing the security payload software and has data that is used by the system loader process to ascertain the size characteristics and location relative to the other section headers. As such the security payload software can be loaded and processed within the virtual memory space i.e. the process address space for the binary executable electronic file at runtime.

Several particular elements of this new section header can be populated with values. A characteristic of the new section indicates that the security payload software is writeable during execution. This characteristic can render the header unique as to the other software sections of the binary executable electronic file which may not be writeable during execution. In one embodiment the security payload software stores the replaced system library export addresses within its own software such that the software has to be writeable in order to store these addresses at runtime as is described in more detail later in the detailed description.

Second a SizeOfRawData of the new section is populated with the value of the security payload software as stored on a storage device such as a hard disk drive. The SizeOfRawData value may be a multiple of a FileAlignment value and can be larger or smaller than the VirtualSize value as described in the next paragraph which is not rounded up. The FileAlignment value is specifically the minimum granularity of segments or chunks of information within the binary executable file. The SizeOfRawData value may be determined as

Third a VirtualSize of the new section is populated with the total size of the new section within virtual memory. The VirtualSize is aligned to the SectionAlignment value within IMAGE OPTIONAL HEADER. Its value can be determined as

Fourth the PointerToRawData of the new section is the fill offset for the new section and is aligned according to the FileAlignment value within IMAGE OPTIONAL HEADER. If the Prev PointerToRawData is the PointerToRawData of the section before the address of the location where the security payload is added to the binary executable electronic file and if Prev SizeOfRawData is the SizeOfRawData of this prior section then

Next the method adds the security payload software to the end of the binary executable electronic file as indicated by the letter C in . Finally the address of the entry point of the binary executable electronic file is modified so that the security payload software is executed first when the binary executable electronic file is executed as indicated by the letter D in . This address is referred to as the address entry point herein. The value of the address entry point is changed to be equal to the VirtualAddress determined for the new section created in part . As such the security payload software is launched before any other software of the binary executable electronic file starts execution which permits the security payload software to hook into the system library export addresses as is described in more detail later in the detailed description.

It is noted that the SizeOfImage value within IMAGE OPTIONAL HEADER may also be changed in part . In particular this value is adjusted to take into account the increase of the size of the binary executable electronic file due to the new section having the security payload software being attached to or embedded within the binary executable electronic file. The SizeOfImage value is determined by dividing the SizeOfRawData by 4 000 which is the default size of memory pages and round it up to the nearest multiple SectionAlignment value.

Referring back to at some point the binary executable electronic file is executed or run. Upon such execution of the binary executable electronic file the security payload software replaces system library export addresses within the process address space for the binary executable electronic file with security monitoring stub addresses back to the security payload software . The process address space is the address space such as the virtual address space of the computing system or device that has been assigned to the binary executable electronic file for execution of the file.

The system library export addresses are encompassed by a system library such as a dynamically linked library DLL in one embodiment. The addresses are exported to the process address space at time of execution of the binary executable electronic file. Thus when the binary executable electronic file is executed calls to API s within the system library are routed through the system library export addresses. Replacing these system library export addresses with security monitoring stub addresses means that API calls are first routed to the security payload software so that the security payload software can initially determine whether the API calls pose security threats as will be described in more detail later in the detailed description. It is noted that part is performed dynamically at runtime of the binary executable electronic file.

Thus computer program software within the binary executable electronic file may make a given API call to the system library as indicated by the arrow . Normally the space within the system library would be occupied by a system library export address that for instance redirects the API call to software within the system library where the software implements the function of this API call. However the space has instead been replaced by a security monitoring stub address that redirects the API call to software within the security payload software as indicated by the arrow .

The original system library export address is stored within the space of the security payload software . Only if the API call does not pose a security threat does the security payload software then direct the API call back to the software as indicated by the arrow by virtue of the original system library export address having been stored within the space of the security payload software . Thus for each system library export address within the address space for the binary executable electronic file occupied by the system library the system library export address is stored within the security payload software . The system library export address within the system library is then replaced by a security monitoring stub address that redirects the API call of i.e. associated with this export address to the security payload software for processing. As such the binary executable electronic file issuing this API call results in control first passing to the security payload software for security threat checking.

These export addresses for the API s are copied to the security payload software . The export addresses within the system library are then replaced with security monitoring stub addresses to the security payload software . As such a call to a given API by the binary executable electronic file results in actuality resolves to one of the security monitoring stub addresses at the location at which the export address for this API was previously located within the system library. Therefore control passes to the security payload software which can determine whether the API call represents a security threat in deciding whether to allow the API call to continue to the export address associated with the API and as stored within the security payload software itself.

Referring back to at some point during the execution of the binary executable electronic file the binary executable electronic file issues a call to an API of the system library . As has been described the process address space occupied by the system library directs the call back to the security payload software via a security monitoring address having replaced the export address for this API. The security payload software then assesses whether the API call is a security breach or not .

In one embodiment the security payload software assesses whether the API call is a security breach by analyzing the API against one or more predetermined security related policies. Such policies can include policies represent direct information leakage indirect information leakage information tampering direct resource abuse and or indirect resource abuse among other types of security related policies. Direct information leakage includes reading local files and emails which the computer executable file may be prohibited from doing. Indirect information leakage includes changing file permissions copying local files to remote locations and so on which the computer executable file may also be prohibited from doing.

Information tampering includes updating a profile file of a user within a home directory modifying critical system settings such as startup settings and modifying the logic of other executable files scripts and macros which the computer executable file may be prohibited from doing. Direct resource abuse includes writing a large file to a directory crashing another process attempting to format hard disk drives as well as performing other operations from which recovery may not be able to be achieved all of which the computer executable file may be prohibited from doing. Indirect resource abuse can include downloading remote software placing software within a startup folder of the system updating the startup script of the system as well as scripting email and instant messaging clients to send content which the computer executable file may also be prohibited from doing.

If the API call that resulted in redirection to the security payload software does not represent a security breach then the security payload software passes through the API call back to the system resources in question . Because the security payload software has stored the export addresses for the API calls it can thus pass the API call back through to the system library if the API call does not represent a security breach. By comparison if the API call does represent a security breach the security payload software may perform one or more security breach related actions . Such actions include suspending execution of the binary executable electronic file until the user is informed and approves the API call simply terminating execution of the binary executable electronic file and so on among other types of security breach related actions.

Thereafter the binary executable electronic file may issue a second API call . As before by virtue of the system library export addresses having been replaced by security monitoring stub addresses within the process address space for the binary executable electronic file the API call is also intercepted by the security payload software that has been attached to the binary executable electronic file . In this case however the security payload software may determine that the API call represents a security risk. Therefore the API call is not allowed to pass to the operating system at the system library export address originally specified and that has been stored within the security payload software . Rather the security payload software performs one or more security breach related actions as has been described.

Embodiments of the invention provide for advantages over the prior art as has been described in the summary section above. Furthermore embodiments of the invention add new executable software and functionality in the form of the security payload software and all this new software to be embedded and attached to a binary executable electronic file without having to recompile the binary executable electronic file. There is no change to the original binary executable electronic file or its functionality. Because patching of the binary executable electronic file is performed statically prior to its executing once the binary executable electronic file has had the security payload software attached thereto the resulting file can be transferred among different computing devices without loss of security and without the file having to be repatched at each such device.

Finally import tables of the binary executable electronic file do not have to be and are not modified to ensure security via API call monitoring since instead the export addresses of system resources are modified. A separate monitoring program that has to be continually run on the computing device in question also does not have to be provided insofar as security payload software is attached to each binary executable electronic file and is executed just when the file to which it is attached is executed. It is therefore noted that although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This application is thus intended to cover any adaptations or variations of embodiments of the present invention. It is manifestly intended that this invention be limited only by the claims and equivalents thereof.

