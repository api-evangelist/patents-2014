---

title: Web browser for spoofing supported features
abstract: Emulating a supported web browser feature when a webpage is merely testing for web browser support of various features. Frequently a web page may test for support of various features of a web browser. The present technology prevents the unnecessary and premature initiation of supported features saving a user time from having to authorize its use, in addition to saving the valuable system resources (e.g. memory, power, etc.) before the supported features are actually needed by the webpage. By emulating or spoofing support of various features of a web browser, the user of a computing device can be spared authorizing use of the various features, and spared the extra power consumption of initializing the various features that may not be used.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507649&OS=09507649&RS=09507649
owner: Apple Inc.
number: 09507649
owner_city: Cupertino
owner_country: US
publication_date: 20140529
---
The present technology pertains to web browsers and more specifically pertains to web browsers with supported features.

In recent years web browsers have become more capable of handling complex webpages. Whether the browsers utilize extensions such as players like Adobe Flash player and virtual machines like Java or have access to system level resources through HTML5 and Web 2.0 technologies browsers are now capable of interpreting and rendering complex webpages. Some such webpages interpret and render complex offerings such as games displaying virtual 3 D similar to those that were only available through specialized gaming consoles not long ago.

In support of such enhanced web content several technologies have developed including new coding languages and application programming interfaces which make it easier to develop such enhanced web content. However new features are added at a rapid pace and not all Internet browsers support all features.

Web developers that want to take advantage of the best technology available need to know what a browser supports so that their webpages render in the best way possible given a browser s capabilities. Web developers have developed a strategy wherein when a webpage is initialized by a web browser the web page can request basic access to the desired technologies and if the technologies are supported the browser can report back no errors. However just because a page tests for the support of certain technologies often doesn t mean that the page is configured to take advantage of the technologies. Use of some of these technologies may expose users to potential security vulnerabilities or require significant power drains and as such loading these resources merely for a test is undesirable.

Additional features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the disclosure will become more fully apparent from the following description and appended claims or can be learned by the practice of the principles set forth herein.

Disclosed are systems methods and non transitory computer readable storage media for emulating a supported web browser feature when a webpage is merely testing for web browser support of various features. Frequently a web page may test for support of various features of a web browser. The present technology prevents the unnecessary and premature initiation of supported features saving a user time from having to authorize its use in addition to saving the valuable system resources e.g. memory power etc. before the supported features are actually needed by the webpage. By emulating or spoofing support of various features of a web browser the user of a computing device can be spared authorizing use of the various features and spared the extra power consumption of initializing the various features that may not be used.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the disclosure.

The disclosed technology addresses the need in the art for emulating a supported web browser feature when a webpage is merely testing for web browser support of various features. The present technology prevents unnecessary and premature initiation of the supported features which can save a user from having to authorize its use and can save valuable system resources e.g. memory power etc. before the supported features are actually needed by the webpage. For example the present technology can emulate a WebGL API when a webpage initializes and attempts to determine if a web browser supports the WebGL API. Frequently a web page may test for support of the WebGL API but never actually attempt to use the WebGL API to support content on the webpage. By emulating or spoofing the WebGL API the user of a computing device can be spared authorizing use of WebGL and spared the extra power consumption of initializing a 3 D construct on a graphics processing unit GPU that may not be used.

As used herein the term user shall be considered to mean a user of an electronic device s . Actions performed by a user in the context of computer software shall be considered to be actions taken by a user to provide an input to the electronic device s to cause the electronic device to perform the steps embodied in computer software. In some instances a user can refer to a user account associated with a particular electronic device.

The web browser of the present technology can include a feature emulator which will be discussed in more detail below. The web browser can make use of certain services and software provided by the operating system . As operating systems commonly do the operating system can provide system level software for accessing and using system hardware such as general purpose computing hardware and special purpose hardware .

In a general sense general purpose hardware can be considered hardware that is almost always activated in the general usage of a system while special purpose hardware can be considered hardware that is often activated only when required. General purpose hardware can include any hardware that is used to perform basic computing system functions including but not limited to a central computing unit or processor system bus memory storage user interface devices display outputs audio outputs etc. Special purpose hardware can include any hardware of limited use for specialized purposes including but not limited to graphics processing unit GPU graphics memory location detecting hardware motion detecting hardware cellular communication hardware etc. In some cases general purpose computing hardware can be used in an unusual fashion and can constitute special purpose hardware . Likewise in some systems one or more items identified as special purpose hardware may also or frequently be activated and as such should be considered general purpose hardware on such systems.

While in some embodiments the present technology is described with respect to deferring a potential activation of one or more special purpose hardware components in some embodiments the present technology can extend to delaying use of a general purpose computing hardware component too.

The web browser determines whether it can successfully emulate or spoof the supported feature with a feature emulator module without actually initializing the supported feature . The web browser can be configured with a collection of potential commands and feature requests that can be emulated. In general the web browser can emulate with feature emulator module requests or commands to create a context create an array create a buffer etc. while the web browser cannot emulate requests or commands to access specialized hardware to perform the actual function of the hardware or read out of memory reserved for the specialized hardware. For example the feature emulator module can establish a canvas and associate a 3 D drawing context with the canvas but it cannot actually draw or manipulate a 3 D object. Similarly a feature emulator module can emulate initializing GPS hardware but cannot return GPS coordinates.

If the feature emulator module can emulate the supported feature sufficiently to respond to the request without a fatal error the feature emulator module emulates the web browser feature and responds to the webpage .

Often a webpage will attempt to access a supported feature when initializing. However the webpage may not actually make use of the supported feature for any other purpose than to confirm that the web browser has the stated capability. In such instances the feature emulator can handle the request from the webpage by emulating the supported feature using only general purpose hardware thus saving resources.

Of course sometimes a webpage s initial requests to access a supported feature are a prelude to actually utilizing the supported feature to display content. In such instances the method illustrated in might proceed as already explained where the feature emulator emulates the supported feature during initialization of the webpage however the webpage might make a subsequent request for the supported feature which the feature emulator module cannot emulate .

When the feature emulator module can not emulate the supported feature adequately to respond to a request for the feature the web browser can request user permission to start the supported feature. Assuming that permission was granted by a user of the computing device the feature is started .

Since the feature emulator module may have already emulated some supported feature functions at it is important to check the feature emulator module for any saved state information pertinent to the supported feature . Since the webpage does not know that its earlier requests for the supported feature were actually spoofed it assumes that the results of its earlier interactions are still in memory. For example if a given context was loaded or a memory structure was established the webpage assumes the context is in fact loaded and the memory structure is established and can be used for further operations. As such if there is any saved state information it can be imported into the supported feature.

As noted above in some instances the feature emulator module can only imperfectly emulate the supported feature. To accommodate such occurrences the feature emulator module can record all operations that have been performed with the supported feature that have been emulated. For operations that have been adequately emulated it may be sufficient to just record the state information and transfer it to the memory associated with the supported feature. For operations that have not been adequately emulated the feature emulator module might have to instruct the supported feature to re perform the operations.

Once the state information is imported and the supported feature fully initialized and caught up with the previous instructions given by the webpage the supported feature can respond to the request .

WebGL Web Graphics Library is a JavaScript API for rendering interactive 3D graphics and 2D graphics within any compatible web browser without the use of plug ins. WebGL is integrated completely into all the web standards of the browser allowing GPU accelerated usage of physics and image processing and effects as part of the web page canvas.

Webpage can query the web browser to determine whether the web browser supports WebGL . The web browser confirms WebGL support . In some embodiments webpages attempt to actually initialize WebGL with a basic instruction. In this example the webpage instructs the web browser to build a canvas and associate the canvas with a WebGL context . In many cases a webpage might not make the query regarding support for WebGL and instead in such cases the method can begin at step .

The web browser determines that it can handle the request and emulates WebGL using its feature emulator module . All of the computing functions to handle the emulation are passed through the operating system to the general purpose computing hardware . The browser responds to the request as if the request were handled through WebGL itself.

If a webpage doesn t actually include content that requires WebGL the method can end without ever having to utilize WebGL or the specialized graphics hardware . However if the webpage does include content that requires 3D graphics processing or other WebGL supported content the webpage can instruct the browser to perform a drawing operation . The web browser cannot emulate a drawing operation and therefore must initialize WebGL. The web browser first requests permission from the user of the computing device to utilize WebGL and assuming the user has given the necessary permission the browser initializes WebGL . Initializing WebGL requires powering up graphics hardware and passing any state information associated with the prior emulation of the feature to the graphics hardware including its associated memory.

The web browser then fulfills the drawing operation by utilizing the support WebGL API to access the necessary graphics hardware drivers and utilize the graphics hardware to complete the drawing operation.

To enable user interaction with the computing device an input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with the computing device . The communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device can be connected to the system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function.

Special purpose hardware can include hardware and software of use for specialized purposes including but not limited to a graphics processing unit GPU graphics memory location detecting hardware motion detecting hardware cellular communication hardware etc.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user via user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

Special purpose hardware can include hardware and software of use for specialized purposes including but not limited to a graphics processing unit GPU graphics memory location detecting hardware motion detecting hardware cellular communication hardware etc.

It can be appreciated that exemplary systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

In some embodiments the computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

