---

title: Portable lightweight LDAP directory server and database
abstract: A lightweight embedded directory server with portable LDAP data is disclosed. The directory server and database comprises a processing chip, an on-chip processing unit, an on-chip memory system, and an on chip input/output system. The memory system stores an embedded operating system and an embedded directory server, and is also used for storing data to be processed by the processing unit. The input/output system is provided for connecting the processor chip to one or more applications for supplying directory services to the one or more applications. A portable memory device stores a directory database, and, in use, this memory device is releasably connected to the on chip input/output system. An on-chip driver is used to perform read and write operations on the portable memory device; and a boot loader software program is used for starting execution of the embedded directory service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09032193&OS=09032193&RS=09032193
owner: International Business Machines Corporation
number: 09032193
owner_city: Armonk
owner_country: US
publication_date: 20140121
---
This application is related to claims priority from and hereby incorporates by reference in its entirety U.S. patent application Ser. No. 12 495 339.

This disclosure generally relates to Lightweight Directory Access Protocol LDAP Servers and databases and more specifically to a portable LDAP server and database.

IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies. TIVOLI are registered trademarks of IBM Corporation. Microsoft is a registered trademark of Microsoft Corporation. Java is a registered trademark of Sun Microsystems U.S.A.

Lightweight Directory Access Protocol LDAP is an industry standard software protocol that enables a user to locate organizations individuals as well as other resources such as files and devices for example within a network. The network may be the Internet for example or on a smaller scale the network may be a corporate intranet. LDAP is essentially a lightweight version of Directory Access Protocol DAP which is part of X.500 a standard for directory services in a network. An advantage of LDAP is that it runs directly over Transmission Control Protocol Internet Protocol TCP IP and provides most of the functionality of DAP however at a much tower cost.

A directory provides information as to the location of a particular thing within the network. For example on TCP IP networks which include the Internet the Domain Name System DNS is the directory system used to relate the domain name to a specific network address for example a unique location in the network. LDAP allows a user to search for an individual for example without knowing the domain name or where that individual may be located within the network.

An LDAP directory is typically organized in a hierarchical tree like structure that reflects political geographical and or organizational boundaries. For example the directory may include countries at the top of the tree. These countries may then branch out into organizations which may extend to organizational units such as divisions departments etc. and then to individuals such as people files documents and shared resources such as printers.

The Lightweight Directory Access Protocol LDAP has emerged as an IETF open standard to provide directory services to applications ranging from e mail systems to distributed system management tools. LDAP is an evolving protocol that is based on a client server model in which a client makes a TCP IP connection to an LDAP server sends requests and receives responses. The LDAP information model in particular is based on an entry which contains information about some object. Entries are typically organized in a specified tree structure and each entry is composed of attributes.

LDAP provides a number of known functions including query for example search and compare update authentication etc. The search and compare operations are used to retrieve information from the database. For the search function the criteria of the search are specified in a search filter. The search filter typically is a Boolean expression that consists of qualifiers including attribute name attribute value and Boolean operators like AND OR and NOT. Users can use the filter to perform complex search operations. For example one type of filter syntax is defined in RFC 2254.

LDAP thus provides the capability for directory information to be efficiently queried or updated. It offers a rich set of searching capabilities with which users can put together complex queries to get desired information from a backing store. Increasingly it has become desirable to use a relational database for storing LDAP directory data. Representative database implementations include DB 2 Oracle Sybase Informix and the like. As is well known Structured Query Language SQL is the standard language used to access such databases.

LDAP directory server is a light weight directory server used to provide authentication authorization and identity management and many other robust features to the end user. Directory server available in the field comes with a database used to store user data and overall the directory server solution provided to the customer is heavy due to several modules attached to it such as replication proxy remote authentication etc.

As the inventors herein have recognized with customer data getting more sensitive and critical and the hardware recourses getting more compact in size there comes the need to have a compact directory server embedded in a device and with access to the sensitive customer data stored in portable databases via an embedded directory server.

Embodiments of the invention provide a lightweight embedded directory server with portable LDAP data. The directory server and database comprises a processing chip an on chip processing unit an on chip memory system and an on chip input output system. The on chip memory system stores an embedded operating system and an embedded directory server and is also used for storing data to be processed by the processing unit. The on chip input output system is provided for connecting the processor chip to one or more applications for supplying directory services to the one or more applications.

A portable memory device stores a directory database and in use this memory device is releasably connected to the on chip input output system. An on chip driver is used by the embedded directory server to perform read and write operations on the portable memory device and a boot loader software program stored on the on chip memory system is used for starting execution of the embedded directory service.

In a further aspect embodiments of the invention provide a method and a computer program product for operating a lightweight embedded directory server with portable LOAF data. The directory server and database comprises a processing chip an on chip processing unit an on chip memory system storing an embedded operating system and an embedded directory server an on chip input output system for connecting the processor chip to one or more applications for supplying directory services to the one or more applications and a portable memory device for storing directory database.

The directory server and database further comprises an on chip driver and a boot loader software program stored in the on chip memory system for starting execution of the embedded directory service. In this embodiment the method comprises releasably connecting the portable memory device to the processing chip the portable memory device storing the directory database the boot loader initiating operation of the embedded directory server and the driver performing read and write operations on the portable memory device.

Embodiments of the invention provide a number of important features. For example embodiments of the invention provide portable embedded light weight directory server stored in memory such as EEPROM SRAM or any other storage memory solution available and an embedded tight weight directory server referred to as a directory server reduced in functionality so as to reduce the footprint of the directory server so as to fit the server in the embedded device. Embodiments of the invention also provide embedded LDAP aware plug in to perform read write operation on the storage device having portable file based backend on it and an embedded LDAP KIT with support of wireless LDAP client support.

Embodiments of the invention provide several significant advantages. For instance the provision of a lightweight embedded directory server in the portable device makes the directory server easy to carry and deploy in the embedded environment. Embodiments of the invention also provide connection to portable database stored in the embedded device. This provides a customer with the flexibility to carry portable database and hook it as and when required to access user information via directory server running on the embedded device.

As will be appreciated by one skilled in the art embodiments of the present invention may be implemented as a system method or computer program product. Accordingly embodiments of the invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore embodiments of the invention may take the form of a computer program product implemented in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device.

Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of embodiments of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider.

Embodiments of the invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

A block diagram of a conventional LDAP directory service is shown in . As is well known LDAP is the lightweight directory access protocol and this protocol has been implemented in the prior art e.g. as either a front end to the X.500 directory service or as a standalone directory service. According to the protocol a client machine makes a TCP IP connection to an LDAP server sends requests and receives responses. LDAP server supports a directory as illustrated in a simplified form in .

Each of the client and server machines further include a directory runtime component for implementing the directory service operations. The directory is based on the concept of an entry which contains information about some object e.g. a person . Entries are composed of attributes which have a type and one or more values. Each attribute has a particular syntax that determines what kinds of values are allowed in the attribute e.g. ASCII characters .jpeg file etc. and how these values are constrained during a particular directory operation. Entries are stored in a given table e.g. ldap entry that includes entry IDs parent IDs a create and last modified timestamp together with the complete entry in string format. Each attribute has an associated attribute table.

The directory tree is organized in a predetermined manner with each entry uniquely named relative to its sibling entries by a relative distinguished name RDN . An RDN comprises at least one distinguished attribute value from the entry and at most one value from each attribute is used in the RDN. According to the protocol a globally unique name for an entry referred to as a distinguished name DN comprises a concatenation of the RDN sequence from a given entry to the tree root.

The LDAP search can be applied to a single entry a base level search an entry s children a one level search or an entire subtree a subtree search . Thus the scope supported by LDAP search is base one level and subtree. LDAP does not support search for arbitrary tree levels and path enumeration.

LDAP includes an application programming interface API . An application on a given client machine uses the LDAP API to effect a directory service session according to the flowchart of . At step an LDAP session with a default LDAP server is initialized. At step an API function ldap init returns a handle to the client and this handle may allow multiple connections to be open at one time. At step the client authenticates to the LDAP server using for example an API ldap bind function. At step one or more LDAP operations are performed. For example the API function ldap search may be used to perform a given directory search. At step the LDAP server returns the results of the directory search e.g. one or more database elements that meet the search criteria. The session is then closed at step with the API ldap unbind function then being used to close the connection.

As mentioned above LDAP directory server available in the field comes with a database used to store user data and overall the directory server solution provided to the customer is heavy due to several modules attached to it such as replication proxy remote authentication etc. With customer data getting more sensitive and critical and the hardware resources getting more compact in size there comes the need to have a compact directory server embedded in a device and with access to the sensitive customer data stored in portable databases via an embedded directory server.

Embodiments of the invention effectively address this issue. Generally this is done by providing a lightweight embedded directory server with portable LDAP data. This directory server is referred to herein as Embedded LDAP kit. Definitions are given for the following terms which are used in the discussion below.

EOS Embedded operating system which can be loaded in any embedded device. It is assumed that all features required to support execution of multi threaded application are available in this operating system.

EEPROM A non volatile chip used to store data. In the embodiment of the EEPROM stores the boot loader the EOS the EDS and a plug in FS PLUGIN used to perform read and write operation on flash drive.

FS PLUGIN A driver used by the EDS to perform LDAP read and write operations on the file based database backend available on the FLASH drive.

FLASH DRIVE A USB device used to store the file based database backend. For example LDBM is one such light weight file based back end which can be stored in the flash drive. The embodiment of shows a FLASH. However it can be any other storage device that can be connected to EDS over a USB port.

SRAM A physical memory used to store the data to be processed by the CPU. EOS is loaded in physical memory and keeps running till the kit is powered.

RS232 Port Network port to hook different external network applications. LDAP clients wilt connect to the EDS via this network port. The embodiment of shows an RS232 port. However it can be any other network device as well like a USB port.

USB Port Used to hook USB devices. USB based FLASH drive is hooked into the USB port where by allowing the FS PLUGIN to toad the file based back end available on the storage device into the physical memory SRAM.

With reference to discussed below are the series of steps to be followed to deploy and start EDS. In this embodiment the EDS EOS and FS PLUGIN are burnt on EEPROM.

In this embodiment an EEPROM is assumed. However EDS EOS and FS PLUGIN can be stored on any other static memory available. At step on powering on the embedded kit shown in the boot loader program is loaded into the SRAM the CPU executes the boot loader that has required instructions to load EOS and EDS into the SRAM and start their execution. At step EDS on startup toads FS PLUGIN from EEPROM into the physical memory. FS PLUGIN is a LDAP aware interrupt driven driver used to perform read and write operations on the USB devices hooked with the embedded kit. At step on connecting the FLASH drive containing the file based backend to the embedded kit the hardware interrupt generated by the FLASH drive is caught by the FS PLUGIN.

At step FS PLUG IN scans FLASH drive for the list of files constituting the file based back end and toads all the files if available into the physical memory SRAM. At step if FS PLUGIN fails to find file based backend it creates the file based backend on the USB device and loads the same into the physical memory. At step EDS establishes connection handle with the file backend loaded in the memory to perform all LDAP operations on it.

With reference to at step LDAP clients connect to EDS running on the embedded kit via RS232 via or any other configurable port. At step EDS on receiving LDAP client search request performs internal search on the LDAP entries stored in the memory SRAM . If the requested entries are available those are returned as search results.

With reference to at step LDAP client connects to EDS running on the embedded kit via RS232 via port. At step EDS on receiving LDAP client modify operation performs a modify operation on the entry if present in the in memory file based back end. It also flushes the modified entries to the FLASH memory so that the entries in SRAM and those stored on the drive are in synchronization.

While it is apparent that the invention herein disclosed is well calculated to fulfill the objects discussed above it will be appreciated that numerous modifications and embodiments may be devised by those skilled in the art and it is intended that the appended claims cover all such modifications and embodiments as fall within the true scope of the present invention.

The description set out above describe particular embodiments only and is not intended to limit the invention whose scope is determined solely by the claims set out below. As used here singular forms a an and the are intended to include plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

