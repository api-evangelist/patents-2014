---

title: Using a PKCS module for opening multiple databases
abstract: A processing device is to determine that a module, executed from a memory by the processing device, is initialized from opening a first database. The processing device is to identify a second database to be opened from a request from an application to access data that is stored in the second database. The processing device is to create, a slot, via the initialized module, to open the second database using the initialized module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09306937&OS=09306937&RS=09306937
owner: Red Hat, Inc.
number: 09306937
owner_city: Raleigh
owner_country: US
publication_date: 20141205
---
This application is a continuation of U.S. patent application Ser. No. 12 627 865 filed on Nov. 30 2009 now issued as U.S. Pat. No. 8 909 916 which is hereby incorporated by reference in its entirety.

Embodiments of the present invention relate to establishing secure connections in a network. Specifically the embodiments of the present invention relate to a method and system for using a public key cryptography standard PKCS module for opening multiple databases.

A server and a client can be protected such as with a secure socket layer SSL connection between the server and client. SSL is a protocol that provides security for communications over networks such as the Internet. A server may obtain a certificate for allowing an encryption key to be generated for establishing the SSL connection with a client. A certificate can contain the name of the server or other entity that is being identified the server s public key the name of the issuing CA and other information proving that the certificate is authenticated. When a certificate is issued the certificate and certificate information are typically stored in one or more databases. Other information may include a public key a private key for decrypting encrypted content and or whether or not a certificate is trusted for a particular purpose trust information . For example a user may wish to view an encrypted email message received by the user and a client email application can search for the private key to decrypt the email.

The key may be associated with a particular cryptographic standard such as the public key cryptography standard PKCS for example the PKCS 11 industry standard. An application such as a web browser or an email application can construct a request for the key through a security module such as a network security services NSS module which can initialize a PKCS based module e.g. PKCS 11 based module to open the database storing the security data e.g. the key to decrypt the email . NSS can use a PKCS based module to open a database by calling an initialization function to initialize the PKCS based module. The PKCS industry standard allows a module to be initialized once and while the module is initialized other calls to use the module will produce an error. The module cannot be initialized again until the module is shut down. Therefore a PKCS based module cannot open additional databases until the PKCS based module is shut down.

In addition there is not an efficient means to share security data between applications. Typically each application has its own database and may obtain security data and store the security data in its own database. For example a user may use an email application and a web browsing application. The web browsing application may first request a certificate and obtain and store the certificate in its own database. The certificate therefore may not be available to other applications such as the email application.

Embodiments of the invention are directed to a method and system for opening a database after a public key cryptography standard PKCS based module has already been initialized. A security initialization system obtains load data that identifies a first database storing security data to be opened. The initialization system determines that the PKCS based module for opening the first database is already initialized where the PKCS based module is already initialized from previously opening a second database. The initialization system causes the PKCS based module to create a slot to open the first database without shutting down the PKCS based module in response to determining that the PKCS based module is already initialized.

The PKCS 11 industry standard allows a module to be initialized once and while the module is initialized other calls to use the module will produce an error. Embodiments of the present invention can open a database after a PKCS based module e.g. PKCS 11 based module used to open the database has already been initialized. For example a PKCS based module can be initialized for a first time to open a first database. Subsequently additional databases can be opened even while the PKCS based module is running without shutting down the PKCS based module.

A client device for a user is coupled to a network . A user can use the client device to access data such as web content or email content hosted by a server such as a web server or a mail server . The user can access the data using a general purpose browser or a specialized application . An application can be a web browsing application a cryptography application an email application or the like. The application may need access to security data to enable a user to view content such as an encrypted email message or encrypted web content. For example an application may be an email application which requires a key to decrypt an email message.

Security data can be stored in a data storage system. A data storage system can include data stores file systems tokens e.g. a smartcard etc. A database is an example of a data store. Examples of security data can include a root certificate stored in a root certificate database a user certificate stored in a certificate database a key stored in a key database PKCS 11 objects stored in a PKCS database PKCS 11 objects stored in a smartcard a Privacy Enhanced Mail PEM file stored in a PEM database a system list or user list of PKCS 11 modules etc. The databases may be part of the client computer or may reside on a separate computer and accessed via network .

When a need for security data arises in an application access to the security data can be provided through a security initialization system . A client device can include a security initialization system for opening databases that store the security data. The databases may be opened based on user configurable policy information . The policy information can be stored in a policy data store . The initialization system can include a security module and one or more PKCS based modules e.g. PKCS 11 based modules . The network architecture can also include a system data store and a module library that includes a module database dB interface . This division of functionality is presented by way of example for sake of clarity. One skilled in the art would understand that the functionality described could be combined into a monolithic component or sub divided into any combination of components.

An application can request access to security data e.g. a key using a security module such as a network security services NSS module made accessible through an operating system such as by providing an application programming interface API or the like. An application can generate an initialization request . The request is received by the security module . It will be appreciated that the security module includes a set of libraries for supporting security enabled client and server application.

To open a database that stores the security data in response to detecting an initialization request the security module can access a system data store to determine which database to open. The system data store can store data e.g. a system list that identifies a module library . The module library can store a module dB interface . The module dB interface can obtain user configurable policy information for example stored in a policy data store . The policy data store can be a configuration file. The policy data store can be a lightweight data access protocol LDAP based database. The LDAP based database can be locally stored on may be part of a server not shown accessed via network . The policy information can identify a database to be opened for a particular request based on server type e.g. web server mail server application type e.g. email application web browser application name e.g. Internet Explorer Firefox and user e.g. root user administrative user . The policy information can be configured by a user such as a system administrator.

In another embodiment the security module can determine which database to open for a particular request from module data that can be included in the module dB interface . Module data can include operating system specific lists e.g. list that identify databases to be opened for a particular initialization request . For example list can be a list for the Linux operating system that identifies the certificate database and the root certificate database as the databases to open for a particular initialization request .

The security module can cause a PKCS based module to be initialized for opening a database identified by the user configurable policy information or the module data e.g. list . The module dB interface can generate load data based on the user configurable policy information or the module data and can send the load data to the PKCS based module . The load data can include the name of the database to be opened the location of the database and the access type for the database e.g. read write read write .

In cryptography PKCS refers to a group of public key cryptography standards. Security data may be stored on a hardware cryptographic token e.g. a smart card USB flash drive etc. . PKCS 11 is the Cryptographic Token Interface standard that specifies an API defining a generic interface to a cryptographic token. PKCS 11 provides an interface to one or more cryptographic devices that are active in a system e.g. client through a number of slots not shown . Typically each slot corresponds to a physical reader or other device interface for a token. A system may have some number of slots and an application can connect to tokens in any or all of those slots. PKCS 11 provides the interface to access a token through a slot.

A database storing security data or a file on disk storing security data may be perceived as a software token. The module dB interface can send load data which identifies which database to open to the PKCS based module . The module dB interface can cause the PKCS based module to initialize for opening the database identified in the load data . When the PKCS based module is initialized the PKCS based module opens a slot for opening the database which enables an application to access the database using the opened slot.

For each database to be opened the module dB interface can send a request that includes the load data to the PKCS based module . For example the module dB interface can send a Request to initialize the PKCS based module to cause a database such as a certificate database to open for example with read write access. The load data may be in a format according to the PKCS 11 industry standard. The PKCS based module can receive the load data and can translate the load data into a proprietary database operation to cause the database e.g. certificate database to open. Examples of the PKCS based module can include a PEM module for opening PEM databases e.g. PEM database or can be a soft token module for opening user databases and system databases. Privacy Enhanced Mail PEM is a protocol for securing email using public key cryptography.

Policy information or module data may identify more than one database to be opened and the PKCS based module may receive more than one request to open a database e.g. Request to Request n . The PKCS 11 standard however allows a module to be initialized once and while the module is running other calls to use the module will produce an error. For example after the PKCS based module is initialized in response to Request which opened the certificate database with read write access the PKCS based module may receive Request to open a different database such as a key database with read write access while the PKCS based module is still running

The PKCS based module can generate an error e.g. error code indicating that the PKCS based module is already initialized opened . Since the PKCS based module is already initialized the PKCS based module cannot open a slot to enable an application to access a database e.g. key database for Request . The security module can detect the error e.g. error code to determine that the PKCS based module is already initialized. In response to determining that the PKCS based module is already initialized the security module can cause the PKCS based module to create a slot to open the database e.g. key database which would enable an application to access the opened database. For an additional request such as Request n the PKCS based module can create an additional slot to open a database for Request n. The PKCS based module can create one slot for each database to be opened.

A CA server mail server and web server can be any type of computing device including server computers desktop computers laptop computers hand held computers or similar computing device. A client device can be a smart hand held device or any type of computing device including desktop computers laptop computers mobile communications devices cell phones smart phones hand held computers or similar computing device capable of transmitting certificate requests and receiving certificates. The network can be a wide area network WAN such as the Internet a local area network LAN such as an intranet within a company a wireless network a mobile communications network or a similar communication system. The network can include any number of networking and computing devices such as wired and wireless devices.

Security data can be stored in databases e.g. root certificate database certificate database key database PKCS database PEM database in one or more persistent storage units. These databases may be separate or combined databases. System lists can be stored in a system data store in a persistent storage unit. User configurable policy information can be stored in a policy data store in a persistent storage unit. A data store can be a table a database a file etc. A module dB interface can be stored in a module library in a persistent storage unit. A persistent storage unit can be a local storage unit or a remote storage unit. Persistent storage units can be a magnetic storage unit optical storage unit solid state storage unit or similar storage unit. Persistent storage units can be a monolithic device or a distributed set of devices. A set as used herein refers to any positive whole number of items.

The security module the PKCS based module and the module dB interface can be implemented as hardware computer implemented software firmware or a combination thereof. In one embodiment the security module the PKCS based module and the module dB interface comprise instructions stored in memory that cause a processing device in described in greater detail below to perform the functions of the security module the PKCS based module and the module dB interface .

In one embodiment the method can be invoked upon the security module receiving a request from an application for access to security data stored in a database e.g. a key stored in a key database . In response the security module obtains load data that identifies a database that stores security data to be opened at block . The load data can include a name of the database to open the location of the database and the type of access for the database. For example the security module may obtain load data identifying two databases to be opened such as a certificate database as a first database to be opened with read write access and a key database as a second database to be opened with read write access. The load data can be obtained from user configurable policy information for example stored in a LDAP based database or from module data for example stored in a module library. One embodiment of a method for identifying databases to open based on user configurable policy information is discussed in greater detail below in conjunction with .

At block the security module can attempt to initialize a PKCS based module to open the first database e.g. a certificate database and can determine whether the PKCS based module is already initialized at block . If the PKCS based module is not already initialized block the security module can cause the PKCS based module to initialize at block . The initialization of the PKCS based module will open a slot. At block the security module can cause the PKCS based module to open the identified database using the opened slot. For example the PKCS based module can open the first database e.g. the certificate database using the opened slot. The PKCS based module can open the database based on the load data. For example the PKCS based module can open the certificate database with read write access.

If the PKCS based module is already initialized block the security module can cause the PKCS based module to create a new slot at block . The PKCS based module can generate an error e.g. error code if the PKCS based module is already initialized and the security module can detect the error e.g. error code . For example the PKCS based module may already be initialized from previously opening the first database e.g. the certificate database . Subsequently the security module may attempt to initialize the PKCS based module to open a second database e.g. a key database . If the PKCS based module has not been shut down from the previous initialization for opening the first database the security module s attempt to initialize the PKCS based module will result in an error message e.g. error code .

At block in response to detecting that the PKCS based module is already initialized the security module can cause the PKCS based module to create a new slot for opening the second database. In on embodiment a new slot for opening the database is created via a create object call to create a special object such as CKO NEW SLOT. The security module can perform the call to cause the PKCS based module to create the new slot. At block security module can cause the PKCS based module to open the second database e.g. the key database using the new slot without shutting down the PKCS based module and the method ends.

In one embodiment the method can be invoked upon the security initialization system receiving an initialization request from an application to access security data at block . A request can include for example the type of server hosting the data e.g. mail server web server the application type e.g. email application web browser etc. the application name e.g. Internet Explorer Firefox and the user e.g. a root user administrator user . At block the initialization system can open a system data store. The system data store stores data e.g. a list that identifies a module interface e.g. module db interface in .

At block the initialization system can identify which databases to open. In one embodiment the initialization system can access user configurable policy information that identifies which databases to open. The initialization system can cause module dB interface identified at block to access user configurable policy information stored in a database such as a LDAP based database. The user configurable policy information can identify which databases to open based on the server type the application type the application name the user etc. For example a system administrator can configure a policy that identifies a user database a database that has the root certificates a user list of smart cards and a system list of smart cards to be opened if the application is a Linux application.

In another embodiment the initialization system can identify which databases to open based on module data e.g. list stored in module library in . The module data can be operating system specific. For example the module data for the Linux operating system may include a list that identifies the system database the user database and the databases that have all of the root certificates to be opened.

At block the initialization system can obtain load data for the identified databases. The module db interface can generate load data based on the policy information or module data and the initialization system can obtain the load data from the module db interface. The load data can include the name of the database to open the location of the database and data identifying whether to open a database for read access write access or read write access.

At block the initialization system can cause a PKCS based module to open a slot or create a new slot for opening the identified database and the method ends. The initialization system can send the load data to the PKCS based module causing the PKCS based module to open the database based on the load data e.g. opening a database as read only .

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device in the form of a drive unit which may include fixed or removable computer readable storage medium which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processing device is configured to execute the security initialization system for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT connected to the computer system through a graphics port and graphics chipset an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. the security initialization system embodying any one or more of the methodologies or functions described herein. The security initialization system may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media. The security initialization system may further be transmitted or received over a network via the network interface device .

The computer readable storage medium may also be used to store the security initialization system persistently. While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The terms computer readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

The security initialization system components and other features described herein for example in relation to can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. In addition the security initialization system can be implemented as firmware or functional circuitry within hardware devices. Further the security initialization system can be implemented in any combination hardware devices and software components.

In the above description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description which follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as obtaining determining causing receiving opening attempting or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. This apparatus can be specially constructed for the required purposes or it can comprise a general purpose computer system specifically programmed by a computer program stored in the computer system. Such a computer program can be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the method steps. The structure for a variety of these systems will appear from the description below. In addition embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings of embodiments of the invention as described herein.

A computer readable storage medium can include any mechanism for storing information in a form readable by a machine e.g. a computer but is not limited to floppy diskettes optical disks Compact Disc Read Only Memory CD ROMs and magneto optical disks Read Only Memory ROMs Random Access Memory RAM Erasable Programmable Read Only memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM magnetic or optical cards flash memory or the like.

Thus a method and apparatus for identifying databases to initialize based on user configurable policy information and initializing the databases to access security data has been described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

