---

title: Querying features based on user actions in online systems
abstract: Online systems, for example, social networking systems store features describing relations between entities represented in the online system. The information describing the features is represented as a graph. The online system maintains a cumulative feature graph and an incremental feature graph. Feature values based on recent user actions are stored in the incremental graph and feature values based on previous actions are stored in the cumulative graph. Periodically, the information stored in the incremental feature graph is merged with the information stored in the cumulative feature graph. The incremental graph is marked as inactive during the merge and information based on new user actions is stored in an active incremental feature graph. If a request for feature information is received, the feature information obtained from the cumulative feature graph, inactive incremental feature graph and the active incremental feature graph are combined to determine the feature information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195705&OS=09195705&RS=09195705
owner: Facebook, Inc.
number: 09195705
owner_city: Menlo Park
owner_country: US
publication_date: 20140515
---
This application is a continuation of U.S. application Ser. No. 13 690 225 filed on Nov. 30 2012 which is incorporated by reference in its entirety.

This invention relates to updating features describing user actions in online systems for example social networking systems and in particular querying features that are updated in real time based on user actions in online systems.

Online systems often present information useful to users and allow users to interact with the online system. Online systems may use various techniques to determine information that is likely to be of interest to a user before presenting the information to the user. Users are more likely to visit the online system regularly if they are presented with information they like. Online systems often earn revenue from advertisements. Advertisers prefer to advertise in online systems that are regularly visited by their users. Therefore user loyalty may determine revenues generated by an online system. As a result the ability of an online system to present interesting information to users typically affects the revenue earned by the online system.

Online systems often use past user actions for making decisions regarding actions taken by the online systems. For example past user behavior may be used by an online system to suggest information to the user that a user may find interesting. An example of an online system is a social networking system that allows users to establish connections with each other. A social networking system may use past user actions to identify news feed stories that may be of interest to a user or to identify potential friends of a user for recommending to the user. Online systems may use predictor models for determining information of interest to a user for example machine learning models. These models predict actions based on features describing users and their actions in the online system.

Online systems can often have a large number of users for example tens or hundreds of millions of users who interact on a regular basis with the online system and generate a large amount of information in the online systems. The information generated is used to determine the values of features used by the models of the online system or various modules that make decisions based on the features. Typically online systems maintain features based on a set of user actions that were taken in the past. Updating the features can be a computation intensive and complex operation. Therefore the feature values may not be updated very frequently. As a result recent changes in the patterns of interactions with the online system may not be reflected in the features until quite late. For example if the user interface of an online system is changed the user interactions with the online system may change significantly. Similarly if there is a change in the technology the user interactions with the online system may change significantly. For example if an online system that was previously not accessible via mobile devices becomes accessible via mobile devices the users may interact with the online system in new ways that may not have been previously possible or may not have been popular. However if the feature values of the online system do not reflect these recent changes the decisions made by the online system based on feature values do not reflect the recent changes in the user behavior. As a result online system may take actions that are not relevant to users any more or the online system may present information that is not interesting to the users.

Embodiments of the invention allow an online system to query feature values representing relations between users and entities based on actions performed by the user. For example a social networking system may store feature values based on interactions between a user and another user connected to the user. Each feature is associated with a user a target entity and a value based on user actions performed by the user with respect to the target entity. The online system maintains a cumulative feature store and an incremental feature store. The cumulative feature store stores feature values determined from user actions performed before a given time point and the incremental feature store stores feature values determined from user actions performed after the given time point.

A request for a feature value is received identifying a user and a feature type. A first partial result for the feature value determined from user actions performed before the given time point is received from the cumulative feature store. A second partial result determined from user actions performed after the given time point is received from the incremental feature store. The feature value is determined by combining the first partial result and the second partial result such that the first partial result is weighted by a decay factor. The determined feature value is returned to a requestor.

In an embodiment the feature values stored in the incremental feature store are updated responsive to current user actions performed by users of the online system. Furthermore at a subsequent time point the updates to the incremental feature store are stopped. A new incremental feature store is maintained for storing feature values determined using user actions occurring after the subsequent time point. Responsive to a request for a feature a third partial result value determined using user actions received after the subsequent time interval is retrieved from the new incremental feature store. The feature value is determined by combining the results of the first partial result the second partial result and the third partial result. The combination of the partial results is performed by weighing the first partial result by the decay factor. The second partial result may be weighed by another decay factor. The feature values from the incremental feature store may be merged with the feature values in the cumulative store and the incremental feature store reset.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Reference will now be made in detail to several embodiments examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality. The figures depict embodiments of the disclosed system or method for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

The users interact with the social networking system using client devices . In one embodiment the client device can be a personal computer PC a desktop computer a laptop computer a notebook a tablet PC executing an operating system for example a Microsoft Windows compatible operating system OS Apple OS X and or a Linux distribution. In another embodiment the client device can be any device having computer functionality such as a personal digital assistant PDA mobile telephone smart phone etc.

The online system receives various signals that represent user interactions with the online system . The information describing these signals is stored in the online system as features. A feature can be a value based on information describing users of the online system or interactions of the users of the online system with the online system or entities represented in the online system . For example a feature may describe the closeness between two users of the online system based on a rate of interactions between the two users. A feature may describe a likelihood of a user being interested in certain information based on information describing the user for example users interests as specified by the user or user interactions for example the type of information retrieved by the user in the past. A feature may represent the likelihood of a user accessing a page describing certain information or the likelihood of a user accessing an image video or any other type of content available on the online system . In one embodiment the online system stores a feature vector for pairs of objects in the system where the feature vector contains a number of features that describe the relationship between the objects. In a social networking system for example a feature vector may be stored for a source user s relationship with a target user where the feature vector contains features such as a measure of the frequency that the source user has viewed information about the target user initiated a communication with the target user and various other measures that describe the relationship between the source and target users. A feature manager processes the signals received by the online system to determine various feature values and stores the feature values in a feature store .

An online system may use the information available in the feature store for ranking entities represented in the online system. For example a social networking system may rank different friends of a user to determine a set of close friends. Or the social networking system may rank a set of users associated with a target user to determine a set of potential friends of the target user for suggesting to the target user. The online system may also use the feature values to determine information to be presented to a user.

The online system may present different type of information to the users. For example a social networking system may present to a user information describing other users social groups social events content images and so on. There may be a large number of actions occurring in an online system that are associated with the user. Since a user typically has limited time to spend on the online system and also the amount of space available in a user interface of the online system is typically limited the online system may select information that is most likely to be of interest to the user for presenting to the user. The online system may incorporate one or more suggestion modules that select information for presentation to the user from various available options.

The suggestion modules may use information available in the feature stores to determine whether a user is likely to perform a desired action based on information presented to the user. For example the online system may include one or predictor models that predict user behavior. The suggestion module may make suggestions to the users based on the predicted user behavior. A predictor model may be invoked by the suggestion module to make decisions regarding information presented to the user. The predictor models utilize the information available in feature stores for predicting user actions. For example a predictor model may be trained using feature values available in the feature store . As an example the online system may include a predictor model that determines a likelihood of a user requesting more information related to a newsfeed item presented to the user. Or a predictor model may determine the likelihood of a user commenting on an image presented to the user. Alternatively a predictor model may determine a likelihood of a user sending a request to connect with a potential connection recommended by the social networking system.

The online system comprises on one or more computer processors executing software modules. Some embodiments of the systems and have different and or other modules than the ones described herein and the functions can be distributed among the modules in a different manner than described here. The online system may comprise modules other than those shown in for example modules illustrated in that are further described herein.

In general the various features of the online system can be represented as a feature graph. Each feature can be associated with a source entity a target entity and a feature value. A feature can be specified as an expression based on values describing the source entity the target entity or interactions between the source and target entities. Feature expressions can be composed i.e. a feature expression can be a function of other feature expressions. An online system can have a large number of users for example millions or even hundreds of millions. There can be a very large number of interactions of users with the online system interactions between the users and large amount of information describing the users. Therefore a feature graph represented by the online system can get updated constantly based on information that is received on an ongoing basis.

The length of interval of time for which an incremental feature graph accumulates features before the feature values of the incremental feature graph are merged with the cumulative feature graph may be configurable. For example a system administrator of the online system can determine whether the length of time interval associated with a incremental feature graph is a single day a few hours or several days. In an embodiment the length of time interval is configurable for a particular set of users. Accordingly the length of time interval for incremental feature store for a particular set of user can be different from another set of users. For example if a set of users are associated with a higher rate of user actions the length of time interval for this set of users can be configured to be smaller than a set of users that perform user actions less frequently using the online systems. In an embodiment the length of time interval for the incremental feature store can be configured for each individual user.

The modified cumulative feature graph is obtained by merging the incremental feature graph with the cumulative feature graph . The modified cumulative feature graph includes the portions of graph from the incremental feature graph as well as the cumulative feature graph . The new entities and edges from the incremental feature graph are includes in the cumulative feature graph . Furthermore any edge in the incremental feature graph that corresponds to an existing edge in the cumulative feature graph results in the modification of the existing edge to the edge . The edge is obtained by aggregating the feature values corresponding to the edge with the feature values corresponding to . The aggregation of feature values may depend on the feature. Different types of feature may require different operation for merging to component values. For example the edge may represent a rate at which a source entity requests information from the target entity and the edge may represent frequent requests by the source entity for information from the target entity since the given time point. The communications since the given time point result in modification of the overall rate at which a source entity requests information from the target entity as shown by edge

The cumulative feature graph is updated during the graph merge operation . However there are no updates to the cumulative feature graph when the merge operation is not being performed. The updates based on recent user actions received by the online system are performed in the incremental feature graph . In an embodiment during the merge operation the incremental feature graph is marked as inactive and updates to the inactive incremental feature graph are stopped. A new incremental feature graph is used to make updates based on the recent user actions during the merge operation. Since there are no updates to either the cumulative feature graph or the inactive incremental feature graph that are being merged the merge operation can be performed efficiently. If the two input graphs of the merge operation can be updated during the merge operation various portions of the graphs may have to be locked thereby making the merge operation inefficient.

The shows an example with a few nodes and edges in the cumulative feature graph and the incremental feature graph. However in an online system with a large number of users both the cumulative feature graph and the incremental feature graph may have a large number of nodes and edges. The cumulative feature graph is available for other modules of the online system to request feature values.

The social networking system stores user profiles in the user profile store . The user profile store stores information describing the users of the social networking system including biographic demographic and other types of descriptive information such as work experience educational history gender sexual preferences hobbies or preferences location and the like. The user profile store may also store content provided by the user for example images videos comments and status updates. In an embodiment a user of the social networking system can be an organization for example a business a non profit organization a manufacturer a provider and the like. The type of information stored in a user profile of an organization may be different from the information stored in a user profile of an individual. For example an organization may store information describing the type of business financial information associated with the organization structure of the organization and so on. A user can be any type of entity that can be represented in the social networking system .

The social networking system allows users to add connections to a number of other users of the social networking system to whom they desire to be connected. Connections may be added explicitly by a user for example the user selecting a particular other user to be a friend or automatically created by the social networking system based on common characteristics of the user e.g. users who are alumni of the same educational institution . Social networking systems may store information describing connections of a user along with the information specific to the user.

The social networking system stores data describing one or more connections between different members in the connection store . The connection information may indicate members who have similar or common work experience group memberships hobbies or educational history. Additionally the social networking system includes user defined connections between different users allowing users to specify their relationships with other users. For example these user defined connections allow members to generate relationships with other users that parallel the users real life relationships such as friends co workers partners and so forth. Users may select from predefined types of connections or define their own connection types as needed. User information describing each user may include information describing connections of the user. Furthermore information describing a connection of a user may be accessed in relation to actions performed by a user. For example if the user posts comments on the social networking system the social networking system may provide information describing the action to connections of the user. The information may be provided to connections of the user via newsfeed.

The social networking system may associate actions taken by users with the user s profile through information maintained in a database or other data repository. Such actions may include for example sending a message to other users reading a message from the other user viewing content associated with the other user among others. In addition a number of actions performed in connection with other objects are directed at particular users so these actions are associated with those users as well.

The action logger is capable of receiving communications from the web server about user actions on and or off the social networking system . The action logger populates the action log with information about user actions to track them. Any action that a particular user takes with respect to another user is associated with each user s profile through information maintained in a database or other data repository such as the action log . Such actions may include for example adding a connection to the other user sending a message to the other user reading a message from the other user viewing content associated with the other user attending an event posted by another user among others.

A social networking system maintains a newsfeed channel that provides regular updates of information available in the social networking system to a user. The information reported via the newsfeed channel is determined by the newsfeed generator . The newsfeed generator generates messages for each user about information that may be relevant to the user based on actions stored in the action log . These messages are called stories each story is an message comprising one or a few lines of information based on one more actions in the action log that are relevant to the particular member. For example if a connection of a user performs a transaction the action may be reported to the user via a newsfeed story. The actions reported via the newsfeed are typically actions performed by connections of the user but are not limited to those. For example if certain information unrelated to the connections of the user is determined to be useful to the user the information can be reported to the user via a newsfeed.

The web server links the social networking system via the network to one or more client devices the web server serves web pages as well as other web related content such as Flash XML and so forth. The web server provides the functionality of receiving and routing messages between the social networking system and the client devices . These messages can be instant messages queued messages e.g. email text and SMS short message service messages or any other suitable messaging technique. In some embodiments a message sent by a user to another can be viewed by other users of the social networking system for example by the connections of the user receiving the message. An example of a type of message that can be viewed by other users of the social networking system besides the recipient of the message is a wall post.

The social networking system may provide users with the ability to take actions on various types of entities supported by the website. These entities may include groups or networks where networks here refer not to physical communication networks but rather to social networks of people to which members of the website may belong events or calendar entries in which a member might be interested computer based applications that a member may use via the website and transactions that allow members to buy sell auction rent or exchange items via the website. A user profile may store associations of a user with various entities.

The social networking system may provide various mechanisms to users to communicate with each other or to obtain information that they find interesting for example activities that their friends are involved with applications that their friends are installing comments made by friends on activities of other friends etc. The mechanisms of communication between members are called channels. If a user communicates with another user the user information of both users may have to be accessed for example to associate the action of communicating with the sender and the receiver.

The feature manager extracts feature values from the signals received by the social networking system corresponding to user actions. The feature manager stores the feature values extracted and provides feature values to various modules of the social networking system . The feature manager is described in the description of and is described in further detail herein for example in .

The suggestion module identifies information of interest to various users and sends the information to them. For example the social networking system may send to a user stories describing actions taken by other users that are connected to the user. The story may be communicated to the user via a channel of communication of the social networking system for example a newsfeed channel. The suggestion module uses information available in the user profiles of various users to determine stories of interest to each user. The suggestion module may use information available in a feature store to determine the information that is presented to a user. In some embodiments a suggestion module may use predictor models for example machine learning models for selecting information presented to a user. These predictor models are trained using data obtained from feature store . Various other modules may use information stored in a feature store for making decisions. For example a module may use information stored in the feature store to select potential friends for a user for suggesting to the user. The newsfeed generator may use information stored in the feature store to select newsfeed items for presenting to the user. The features may be used for various other purposes in an online system for example a social networking system may rank various entities for a user for example rank friends of a user potential friends for the user pages likely to be of interest to the user content likely to be of interest to the user search terms for type ahead for a given user advertisements likely to be of interest to a user and the like.

The client device executes a browser to allow the user to interact with the social networking system . The browser allows the user to perform various actions using the social networking system . These actions include retrieving information of interest to the user recommending content to other users upload content to the social networking system interact with other users of the social networking system establish a connection with a user of the social networking system and the like.

The interactions between the client devices and the online system are typically performed via a network for example via the internet. The network enables communications between the client device and the social networking system . In one embodiment the network uses standard communications technologies and or protocols. Thus the network can include links using technologies such as Ethernet 802.11 worldwide interoperability for microwave access WiMAX 3G digital subscriber line DSL asynchronous transfer mode ATM InfiniBand PCI Express Advanced Switching etc. Similarly the networking protocols used on the network can include multiprotocol label switching MPLS the transmission control protocol Internet protocol TCP IP the User Datagram Protocol UDP the hypertext transport protocol HTTP the simple mail transfer protocol SMTP the file transfer protocol FTP etc. The data exchanged over the network can be represented using technologies and or formats including the hypertext markup language HTML the extensible markup language XML etc. In addition all or some of links can be encrypted using conventional encryption technologies such as secure sockets layer SSL transport layer security TLS virtual private networks VPNs Internet Protocol security IPsec etc. In another embodiment the entities can use custom and or dedicated data communications technologies instead of or in addition to the ones described above. Depending upon the embodiment the network can also include links to other networks such as the Internet.

The metadata describing various types of features is stored in the feature metadata store . A feature may be represented as an expression based on values associated with entities represented in the social networking system and actions performed in the social networking system . These expressions representing features can be provided by experts and added to the system by a privileged user for example a system administrator. In an embodiment a feature is represented as a function of actions logged in the social networking system i.e. feature function logged actions . A feature could also be a function of other features for example an expression based on other features or actions or combinations of the two. As an example of a feature as an expression if the target is a user and view profile corresponds to the source user viewing the target user s profile view photo corresponds to the source user viewing the target users photo and view comment corresponds to the source user viewing a comment posted by the target user a feature called observation may be defined as follows. observation view profile view photo 0.5 view comment

In the above equation a value of a term say view profile is 1 if the action occurs and 0 if the action doesn t occur. In another embodiment the value of each term may be a score value based on information describing the particular action for example the number of times the action is performed by the user within a time interval or a score based on the length of time associated with the action such as a length of time that a user observes a photo before retrieving a different photo.

In an embodiment a feature can be an aggregate value based on actions performed by the source user with respect to multiple targets. For example a feature may represent an aggregate of all page views performed by a source user in a given time interval for all other users connected to the source user. Another feature may represent the rate at which a user views images posted by other users connected to the user. A feature may represent an action performed by a source user with respect to a target user that is normalized based on the source user s behavior with respect to all other users connected to the source user. For example a feature may represent how often a source user interacts with a target user normalized using the average number of interactions of the source user with other users connected to the source user. The feature metadata may specify an expression for combining partial results associated with a feature value. For example an expression describing a feature may specify how to obtain the feature value by combining partial results of evaluating a feature for two different time intervals.

The feature extractor extracts feature values based on the user actions performed by users of the social networking system . The feature extractor extracts features based on metadata describing the feature. In an embodiment the metadata describing various features is stored in memory of the processors implementing the social networking system for faster access. Each feature type may be associated with certain types of user actions. For example a feature corresponding to a rate of communication between a source user and a target user may be associated with every communication between the source and the target user. In an embodiment multiple instances of an action of a particular type that occur within a short time interval are treated as a single instance of the user action. For example if a user clicks on an image several times within few minutes the feature manager treats these multiple clicks as a single click action. Similarly if a user clicks a user interface button indicating the user likes an entity multiple times within a few minutes the feature manager treats these multiple like signals as a single user action indicating the user likes the entity. These series of user actions are treated as a single user action since the number of instances occurring within a short interval does not convey any significant additional information as compared to the fact that the user action was performed.

When a user action of a particular type is performed by a user all features associated with the user action may be reevaluated. In an embodiment an instance of a feature may be stored as various component values that may be combined to determine the feature value. For example counts of individual communications between two users may be stored for different time intervals. An aggregate rate of communication between the two users may be obtained by combining the different count values based on an expression describing the feature. As another example if a feature is based on the number of times a user viewed a photo each instance of the user viewing the photo may cause the feature to be re evaluated.

In an embodiment a features table stores the values of various features. For example the features table may have columns source ID target ID type of target action ID and various features. In an embodiment the values for various features may be represented as name value pairs associated with each instance of source and target. In another embodiment the data generated for a particular predictor model is represented as table I in which each source and target is associated with various features that are relevant to the model.

The feature stores and store feature values that are extracted by the feature extractor . Each feature store and stores the feature value for a particular time interval. The cumulative feature store stores feature values based on user actions that occurred before a given time point. For example at a current time point the cumulative feature store may store feature values based on user actions that were received yesterday or earlier. In contrast an incremental feature store stores user actions that occurred since the given time point. For example the feature store may store all feature values based on user actions that occurred today.

The feature values based on current user actions may be determined and stored in the incremental feature store until a given point in time after which the feature values stored in the incremental feature store are merged with the feature values of the cumulative feature store . The feature merger performs the merging of the features values from the incremental feature store with the cumulative feature store . For example at the end of each day the feature merger merges the feature values of the incremental feature store with the cumulative feature store .

To avoid updates to the incremental feature store while the feature values are being merged the incremental feature store is marked as inactive. An inactive incremental feature store is a feature store that is not updated responsive to user actions currently happening whereas an active incremental feature store is a feature store that is updated responsive to user actions currently happening in the social networking system . Accordingly the updates to the incremental feature store that is marked inactive are stopped while the information stored in the incremental feature store is merged with the cumulative feature store . Once the feature values of an incremental feature store are merged the incremental feature store is reset i.e. the incremental feature store is treated as empty. The incremental feature store is marked as active and user actions received result in updates to feature values stored in the incremental feature store . The updates to the incremental feature store may be continued for another time interval until a subsequent point in time is reached. The above process may be repeated i.e. the incremental feature store marked as inactive for merging the feature values in the incremental feature store with the cumulative feature store . In this iteration responsive to the incremental feature store being marked as inactive the incremental feature store may be marked as active. At this stage it is assumed that the information previously stored in the incremental feature store was merged with the cumulative feature store and the incremental feature store reset. Accordingly the incremental feature store can be used for updating feature values for the new time interval. Accordingly the status of the two incremental feature stores and can be switched alternatively. In one time interval the first incremental feature store is marked active and receives updates while the second incremental feature store is marked inactive and is being merged with the cumulative feature store. In the next time interval the second incremental feature store is marked active and receives updates while the first incremental feature store is marked inactive and is merged with the cumulative feature store. This process can continue while the system or is running The scheduler schedules tasks for merging an incremental feature store with the cumulative feature store and for changing the status of each incremental feature store at the appropriate time as described above.

In an embodiment the incremental feature stores are stored in storage of a computer system that has faster access time compared to the access time of a store used for the cumulative feature store . Since the cumulative feature store includes a large amount of data it is stored in a slower but less expensive storage for example flash memory. In contrast the incremental feature store is frequently accessed for updating the features as user actions are performed. Therefore the incremental feature store is stored in a faster storage for example random access memory RAM . RAM is typically expensive compared to secondary storage and the amount of RAM storage of a computer system is typically less than the amount of secondary storage available for example flash memory. Since the amount of data stored in a cumulative feature store can be significant embodiments partition the information in the cumulative feature store across multiple computers such that a partition is assigned to each computer. For example a set of users may be assigned to a partition and features associated with the users mapped to the partition.

The request processor receives requests for feature values from various modules of the social networking system . The request processor retrieves the feature values and returns the feature values to the requestor. In an embodiment the request processor retrieves the corresponding feature values from each feature store and combines them to determine an overall feature value. For example the request processor may receive a request for a feature value of a particular feature type associated with a source entity and a target entity. Each of the feature store and may store a partial result associated with the requested feature based on the user actions that occurred in the time interval associated with each feature store. The request processor retrieves the partial results for the feature value from each feature store and combines the partial results to determine the feature value based on associated user actions received by the social networking system .

In an embodiment the request processor attenuates the partial result values associated with older time intervals to give higher weight to recent data. For example the partial result obtained from the cumulative feature store may be multiplied by an attenuating factor also called a decay factor for determining the combined feature value. The value of the attenuating factor may be configurable for example a pre configured value that is less than one say 0.9. As a result the effect of older user actions in the cumulative data store decays over time. For example if a feature value can be considered as aggregating partial results associated with different time intervals partial results determined for significantly old time intervals get multiplied by the attenuating factor multiple times whereas partial results for relatively recent time intervals are multiplied by the attenuating factor only a few times. Therefore user actions associated with older time intervals are weighted less than user actions associated with newer time intervals.

The impact of a user action on a feature value can be considered as decaying exponentially over time. In some embodiments the value of the decay factor depends on the type of feature. Each feature may be associated with a half life. The value of the half life may be used to determine the decay factor for the feature. For example some features may have longer half life and other features may have shorter half life. Therefore features with longer half life have a decay factor that causes the decay of the older values slowly and features with shorter half life have a decay factor that causes the decay of the older values faster.

The scheduler checks whether the length of time interval exceeds a threshold value to determine whether to merge the partial results stored in the incremental feature store with the feature values in the cumulative store . In another embodiment the scheduler may decide when to merge the partial results stored in the incremental feature store with the feature values in the cumulative store on other criteria for example based on whether the amount of information stored in the incremental feature store exceeds a threshold value or whether the number of user actions received exceeds a threshold value.

If the scheduler decides that the results in the incremental feature store are ready to be merged with the feature values in the cumulative store the scheduler marks the incremental feature store as inactive and the incremental feature store as active. Accordingly the status of the two incremental feature stores is switched. In an embodiment the feature manager may allocate a new incremental feature store for storing updates for the next time interval instead of switching between two incremental feature stores. For example a incremental feature store may be selected from a pool of incremental feature stores. In an embodiment a new incremental feature store may be allocated for each new time interval. The feature merger merges the feature values from the incremental feature store to the cumulative feature store . The above steps and are repeated multiple times for example as long as the social networking system is running In an embodiment the feature merger is executed as a background thread that performs the merge operation.

In step the incremental feature store is marked as inactive and the incremental feature store is marked as active. Accordingly the updates based on the signals are performed to the incremental feature store and the updates to the inactive incremental feature store are stopped. In step the feature values from the inactive incremental feature store are merged to the cumulative feature store . During the merge operation the signals cause updates to the incremental feature store . The above process is repeated multiple times for example while the social networking system is running

When the current time point reaches the incremental feature store is marked inactive and a new incremental feature store is used as the active incremental feature store. illustrates the time intervals corresponding to step shown in . shows a time line with three time intervals time interval that corresponds to time before time point time interval that corresponds to the time between the time points and and time interval that corresponds to time since time points . The cumulative feature store stores feature values determined using user actions that occurred during the time interval . The inactive incremental feature store stores feature values determined using user actions that occurred during the time interval and the active incremental feature store stores feature values determined using user actions that occurred during the time interval and gets updated responsive to user actions currently occurring.

The request processor receives requests for feature values and processes them. A request provides the information identifying the feature that is requested for example the request may identify a user associated with the feature value a target entity associated with the feature value and information identifying a type of the feature. The different feature stores store partial results corresponding to a particular feature values each partial result determined using a set of user actions for example user actions occurring during a particular time interval. As an example if a feature value is determined by aggregating values associated with user actions the partial result value corresponding to a store may correspond to an aggregate value determined using all relevant actions within that store. Therefore a the request processor determines a feature value by combining partial results corresponding to the feature value obtained from each feature store . Certain feature stores may not have any partial result values corresponding to a feature for example if no relevant user actions occurred in the time interval corresponding to the feature store. In this situation the request processor combines partial results from the feature stores that have partial results for the feature value.

The weighted combination determined by the request processor weighs the partial results associated with the older user actions by a decay factor also called the attenuation factor . This attenuates the effect of older user actions in the feature values. The decay factor is a value less than one for example 0.9. In an embodiment each feature may be associated with a different decay factor. In an embodiment each feature is associated with a half life and the decay factor for the feature determined based on the half life. For example for certain features older user actions may be more relevant compared to other features. If older user actions are more relevant the decay factor may be larger resulting in slower decay of older user actions. On the other hand if older user actions are less relevant for the computation of a feature the decay factor may be smaller resulting in faster decay of older user actions. In an embodiment the decay factor value may be configurable.

The partial results for the requested feature may be available in a single incremental feature store and the cumulative feature store for example if the request for the feature is received during step . The feature value f in this situation may be determined using the equation 1 where x represents the partial result obtained from the incremental feature store and y represents the partial result obtained from the cumulative feature store and represents the decay factor. 1 

The partial results for the requested feature may be available in a the incremental feature store the incremental feature store and the cumulative feature store for example if the request for the feature is received during step . The feature value f in this situation may be determined using the equation 1 where x represents the partial result obtained from the incremental feature store y represents the partial result obtained from the cumulative feature store z represents the partial result obtained from the incremental feature store represents the decay factor for partial results from the incremental feature store and represents the decay factor for partial results from the incremental feature store 2 

The equation 1 corresponds to the computation performed for merging feature values from incremental feature store to the cumulative feature store as illustrated in or the merging as illustrated in .

The features and advantages described in the specification are not all inclusive and in particular many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter.

For example the predictor models can be generated and used in other types of online systems and are not limited to social networking systems. For example an online system that stores user profiles and allows users to take actions can generate and user predictors for various actions that users can take. For example an online system may allow users to receive feeds of various types of data. A predictor model may be developed for predicting whether a user is going to open a feed presented to the user. The predictor model can be used by the online system to order the feeds presented to the user for example the feeds may be ordered based on the likelihood that a user is going to open the feed or request additional information from the feed.

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising a computer readable medium containing computer program code which can be executed by a computer processor for performing any or all of the steps operations or processes described.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a tangible computer readable storage medium or any type of media suitable for storing electronic instructions and coupled to a computer system bus. Furthermore any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon. Accordingly the disclosure of the embodiments of the invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

