---

title: Method of taking a computer architecture respresentation and generating  manufacturing methods capable of manufacturing a computer systems contained in a specification
abstract: Techniques and a system for creating a vendor independent computer language and compiling the language into an architecture specification language allowing for taking a source data stream (file, WSDL, XML) and passing thru a language parser, populating a storage medium with a plurality of technical inputs and vendor technical specifications for generic technologies and probable technologies required for desired architectures generated by the language parser, and optimizing the inputs and creating relationships between technologies and groups of technologies and storing results in the storage medium.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003358&OS=09003358&RS=09003358
owner: 
number: 09003358
owner_city: 
owner_country: 
publication_date: 20140312
---
This application claims priority to U.S. Provisional Patent Application Ser. No. 61 800 272 and U.S. Provisional Patent Application Ser. No. 61 800 387 both filed on Mar. 15 2013 which are hereby incorporated by reference in its entirety. Other related applications having common inventorship and or ownership as may mentioned throughout this disclosure are also incorporated by reference in their entirety.

The disclosed subject matter relates to methods of taking a computer architecture representation and generating manufacturing methods capable of manufacturing the computer systems contained in the specification. The invention also includes an enhanced means of executing those applications and causing the specified systems to be built on demand.

The traditional method is for an engineer to take a high level design specification and for the engineer to research and use vendor specific documentation of commands and his individual knowledge and experience to determines the necessary equipment creates a Bill of Material creates a low level design and creates implementation instructions. To deploy the system for each system to be deployed the engineer takes the implementation instructions executes the commands in the implementation instructions necessary to create the systems. He then creates operating instructions for operating the systems and executes those to place the system under operational management. An alternate method is for an engineer to code the commands he would execute into a service catalog or a provisioning tool. The problem that this creates is that the engineer is manually mapping the high level design to the individual commands necessary to implement that high level design and then either manually executing those command as placing those commands in a service catalog or provisioning tool. If the end user decides to transition from one technology to another they have to have this mapping recreated potentially by a completely different engineer with the appropriate knowledge of the commands on the desired technology. A significant amount of the information gathered and generated for the initial implementation is not retained and usable for subsequent designs.

Techniques here disclosed include a method and system for generating a computer architecture representation in a reusable syntax and grammar. As a result the invention also includes an enhanced means of creating artifacts such as high level design documents bills of materials and traditional drawings.

The present invention provides a method of generating a computer architecture representation in a reusable syntax and grammar wherein a plurality of language definitions that include at least a first language definition for technical specifications and attributes. This information is typically submitted by an engineer and comes in the form of multiple specifications and may include vendor technical specifications best practices and corporate best practices.

Technical Specifications for applications may include but are not limited to details such as memory required disk space required. Technical specifications for operating systems may include but are not limited to hardware limitations such as required physical memory processor type. Industry best practice details may include but are not limited to that although the vendor recommends a certain amount of memory for an application the industry best practice is two times that amount.

The term technical specification is understood herein as any data that is provided by an engineer or manufacturer detailing technology including but not limited to operating system requirements application requirements or hardware requirements. As an exemplary scenario a technical specification for Windows 2012 Server may specify minimum processor 1.4 Ghz 64 bit processor minimum ram 512 MB minimum disk 32 GB.

In accordance with an embodiment of the invention the method provides a second language definition for business details and attributes. This information is typically provided by the user and includes but not limited to goals decisions constraints site details and user details. A decision may include but is not limited to a selection of a particular vendor. Business details may include but are not limited to number of locations size of locations and users at locations.

The term business details and business attributes is understood herein as any data that is provided by a user that is specific to their business environment. As an exemplary scenario a business attribute may specify to use the industry best practice over the vendor specification.

In accordance with a further embodiment of the invention the method provides third language definition supplementary details and attributes. This information is custom data that can be customer or implementation dependent. An example supplemental detail may be able to be to a specific vendor or technology bias.

The term supplementary details and supplementary attributes is understood herein as any data that is provided by a user as custom data. As an exemplary scenario a user may specify a operating system or manufacturer bias such as Microsoft is a preferred vendor. Algorithms selected at runtime may use this supplemental data for decisions.

In an embodiment of the invention the method provides for parsing and performing semantic grammar analysis for each of the language definitions that consist of reading each line of input parsing and performing semantic grammar analysis of attributes of the specification elements or lines element lists groups and attributes of the list group individual elements or lines and attributes of the elements and finally individual lines or elements within a list group and any attributes of that element and produce an intermediate representation as reusable individual elements and attributes. In some embodiments of the invention the method may include a means of deconstructing these specifications into reusable elements which provides the advantage that elements may be reused in a plurality of designs.

In an embodiment of the invention the method has a means for dynamically compile and generate an architectural specification based on user selected data the produced intermediate representation and an algorithm selected at run time that consists of reading each input variable and passing those variables to the specified algorithm. The algorithm processes the individual elements and attributes based on the defined algorithm. The output of the selected algorithm is then passed to the compiler to generate the architecture specification in a specific language definition.

The term architecture representation is understood herein as a data structure for storing and representing the data contained in a high level design in a generic reusable way.

In accordance with a further embodiment of the invention the method has a means for dynamically compile and generate an architectural specification based on user selected data the produced intermediate representation supplemental details and attributes and an algorithm selected at run time that consists of reading each input variable and passing those variables to the specified algorithm. The algorithm processes the individual elements and attributes based on the defined algorithm. The output of the selected algorithm is then passed to the compiler to generate the architecture specification in a specific language definition.

In accordance with a further embodiment of the invention the method provides a means for dynamically generating industry standard technical documents from a generated architecture specification.

In another aspect the invention is directed to a system implementing the above described language specifications methods and compiler mechanism.

Embodiments of the invention have the advantage that different architectures are capable of being generated rapidly based on a broader set of technical and engineering inputs than the conventional methods.

In accordance with an embodiment of the invention the system further provides means for receiving a source data stream of input information from the user. Memory means allow for a data structure instantiating code segment that establishes a storage record in memory as well as for storing technical input records business input records relationships and architecture specification language representation. A processor means operates for parsing and performing semantic grammar analysis for each of the language definitions as well as recording parsed results to the storage medium. The processor means further enables executing a selected optimization function to optimize and create relationships and saving the results to the storage medium. The disclosure includes executing a compilation function to compute and create an architectural representation in the specified syntax and grammar.

In accordance with a further embodiment of the invention the system further provides means for receiving a source data stream of input information from the user. Memory means enable a data structure instantiating code segment that establishes a storage record in memory and for storing technical input records business input records relationships supplemental details and attributes and architecture specification language representation. A processor means operates parsing and performing semantic grammar analysis for each of the language definitions including supplemental details and attributes recording parsed results to the storage medium executing a selected optimization function to optimize and create relationships and save results to the storage medium as well as executing a compilation function to compute and create an architectural representation in the specified syntax and grammar.

These and other advantages of the disclosed subject matter as well as additional novel features will be apparent from the description provided herein. The intent of this summary is not to be a comprehensive description of the claimed subject matter but rather to provide a short overview of some of the subject matter s functionality. Other systems methods features and advantages here provided will become apparent to one with skill in the art upon examination of the following FIGUREs and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the accompanying claims.

APPENDIX 3 shows a shows exemplary implementation of the grammar in APPENDIX 1 but in XML as an alternative format.

To facilitate the processing of specifications a new grammar and syntax may be required. The listing in APPENDIX 1 and APPENDIX 2 are exemplary grammar for a specification file that may be used as inputs to the methods described in and . The listing in APPENDIX 3 shows a possible implementation of the grammar in APPENDIX 1 but in XML as an alternative format.

A method of consuming a high level design or computer architecture representation and generating manufacturing methods capable of manufacturing the computer systems contained in the specification comprising the steps of taking a source data stream file WSDL XML passing thru a parser. The process includes populating a storage medium with a plurality of application programming interfaces api s commands and vendor implementation specifications for specific technologies required for architectures generated by the language parser as well as optimizing the inputs and creating relationships between commands and groups of commands or api s required to implement portions of the architecture and storing results in the storage medium.

The disclosed method further includes the steps of further populating the storage medium with supplemental attributes. The may employ a compiling algorithm to retrieve inputs and a high level design stored in an architectural specification language from the storage medium and produce a plurality of system manufacturing applications. Also the method may employ a compiling algorithm to retrieve from the storage medium a high level design stored in an architectural specification language and inputs and or supplemental attributes and produce a plurality of system Manufacturing applications

Another embodiment of the present disclosure includes a system for consuming a high level design or computer architecture representation and generating manufacturing applications capable of manufacturing the computer systems contained in the specification. This embodiment may include a language parser communicating with the storage medium and coupled to a computer network for parsing vendor implementation specifications api s and commands into individual inputs and value pairs and records those inputs to the storage medium. An optimization processor may communicate with the storage medium and coupled to a computer network for optimizing parsed inputs and creates relationships and records those inputs to the storage medium. Moreover a language parser may communicate with the storage medium and coupled to a computer network for parsing computer architecture representations and records those inputs to the storage medium. Then a compiling processor communicating with the storage medium and coupled to a computer network for retrieving inputs from the storage and generating a plurality of system manufacturing applications while a manufacturing server coupled to a computer network and having memory and processor stores and executes the manufacturing applications. The server preferably conducts a manufacturing transaction with a user and either delivering the manufacturing applications to the user or executing the manufacturing applications directly. Such a system embodiment may further include a language parser communicating with the storage medium and coupled to a computer network for parsing supplemental attributes into individual inputs and value pairs and records those inputs to the storage medium.

Yet a further embodiment of the present disclosure may include a computer program embodied on a computer readable medium for creating a vendor implementation computer language. The computer program embodiment may include a data structure for instantiating code segment that establishes a storage record in memory. Such a data structure may include a command api identifier as well as a plurality of separate command or api records each maintaining a pointer to the command api identifier. Here compiling algorithm may include instructions for deconstructing a high level design identifying commands to execute in order to create the architecture represented and constructing and compiling manufacturing applications necessary to execute identified commands.

This embodiment contemplates the use of a data structure instantiating code segment that establishes a storage record in memory having an architecture specification identifier and a plurality of technical input records and business input records each maintaining a pointer to said architecture specification identifier. Here a compiling algorithm provides instructions for deconstructing the computer architecture representation identifying commands to execute in order to create the architecture represented and constructing and compiling manufacturing applications necessary to execute identified commands.

The processing features and functions described herein for generating a computer architecture representation in a reusable syntax and grammar. The disclosed subject matter provides an enhanced means of creating artifacts such as high level design documents bills of materials and traditional drawings that may be implemented in various manners. Moreover the process and features here described may be stored in magnetic optical or other recording media for reading and execution by such various signal and instruction processing systems. The foregoing description of the preferred embodiments therefore is provided to enable any person skilled in the art to make or use the claimed subject matter. Thus the claimed subject matter is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

