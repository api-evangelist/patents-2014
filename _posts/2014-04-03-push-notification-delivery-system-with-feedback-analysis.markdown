---

title: Push notification delivery system with feedback analysis
abstract: A push notification delivery system includes a server system including a processor, a network interface, and memory storing program instructions having code segments for receiving a received push notification, code segments for determining at least one of a favorable push time and a favorable message format based upon a database of received push information developed from a plurality of prior sent push notifications, and code segments for pushing the message to the destination in accordance with the at least one of a favorable push time and a favorable message format. A method for delivering push notifications includes receiving a received push notification including a message and a destination, sending a sent push notification derived from the received push notification to the destination in accordance with at least one favorable condition, receiving received push information related to the sent push notification, and storing the received push information in a database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09277023&OS=09277023&RS=09277023
owner: Urban Airship, Inc.
number: 09277023
owner_city: Portland
owner_country: US
publication_date: 20140403
---
This application is a continuation of co pending U.S. patent application Ser. No. 13 160 226 entitled PUSH NOTIFICATION DELIVERY SYSTEM WITH FEEDBACK ANALYSIS filed Jun. 14 2011 which is incorporated herein by reference for all purposes.

Push technology aka server push is a type of Internet based communication where the request for a given transaction is initiated by a publisher or server. It is contrasted with pull technology where the request for transmission of information is initiated by a receiving device or client. 

Push services are sometimes based upon information preferences expressed in advance. This is referred to as a publish subscribe model. For example a client might subscribe to one or more information channels. The server associated with the channels can then push information to the client when new content becomes available.

There are many types of push services. For example synchronous conferencing and instant messaging are forms of push services. Increasingly popular are push enabled web applications including market data distribution e.g. stock tickers online chat messaging systems e.g. webchat auctions online betting and gambling sports results monitoring consoles and sensor network monitor.

There are also hybrid push pull systems. For example email begins as a push system in that the SMTP protocol upon which it is based is a push protocol. However the last step in the delivery of an email e.g. from a mail server to a desktop computer typically uses a pull protocol such as POP3 or IMAP.

As will be appreciated there are many and widespread uses for push technology. However one drawback of such technology is that it is essentially a unidirectional technology where pushes are sent to devices and then forgotten. This limits the opportunity to improve the effectiveness of future pushes by deriving feedback as to the effectiveness of prior pushes.

A method for delivering push notifications set forth by way of example and not limitation includes receiving a received push notification including a message and a destination determining for the received push notification at least one of a favorable push time and a favorable message format based upon a database of received push information developed from a plurality of prior sent push notifications and sending a sent push notification derived from the received push notification to the destination in accordance with the at least one of a favorable push time and a favorable message format. Sending push notifications at a favorable push time and or in a favorable message format can improved the effectiveness of the push notification.

A push notification delivery system set forth by way of example and not limitation includes a server system including a processor memory and a network interface. By way of non limiting example the memory stores program instructions having code segments for receiving a received push notification including a message and a destination code segments for determining for the received push notification at least one of a favorable push time and a favorable message format based upon a database of received push information developed from a plurality of prior sent push notifications and code segments for pushing the message to the destination in accordance with the at least one of a favorable push time and a favorable message format.

A non transient computer readable medium including program instructions includes by way of example and not limitation code segments for receiving a received push notification including a message and a destination code segments for determining for the received push notification at least one of a push time and a message format based upon a database of received push information developed from a plurality of prior sent push notifications and code segments for pushing the message to the destination in accordance with the at least one of a push time and a message format.

A method for delivering push notifications set forth by way of example and not limitation includes receiving a received push notification including a message and a destination sending a sent push notification derived from the received push notification to the destination in accordance with at least one favorable condition receiving received push information related to the sent push notification and storing the received push information in a database. Storing the received push information in a database permits by way of non limiting example the use of a number of data mining techniques to determine factors which can improve the push notification delivery process.

These and other embodiments and advantages and other features disclosed herein will become apparent to those of skill in the art upon a reading of the following descriptions and a study of the several figures of the drawing.

Stored in memory of notification server system are program instructions including a number of code segments for implementing various processes of the server system . For example the notification server system includes code segments for receiving a received push notification from a push originator server system such as a customer website via Internet . The received push notification can include a message and a destination for example.

Example notification server system can also include code segments for creating a send token and a sent push notification e.g. a sent push notification derived from the received push notification . The send token can be used to distinguish the sent push notification from other push notifications. For example the sent push notification with send token can be sent over the Internet to a push gateway server system . The push gateway server system can then send for example a push notification to a mobile device . A mobile device can be by way of non limiting examples a cell phone a smart phone a mobile texting device a tablet computer etc. In other embodiments a sent push notification with send token can be sent to other destinations such as a client computer proxy server device etc.

In this example gateway server system is typically provided by a provider implementing push notification protocols which are particular to for example a certain type of mobile device . For example iPhone and Android mobile devices e.g. smart phones tablet computers etc. have dedicated push gateways maintained by Apple Inc. and Google Inc. respectively. It should be noted that the push gateway server system may be part of notification server system or may be separate as shown in .

In the example of code segments are also included in notification server system for receiving received push information concerning a processing of the sent push notification. These code segments can for example identify the sent push notification from the received push information by the send token. For example received push information can be developed by a mobile device which is coupled to by way of non limiting example a cellular network and from there to the Internet such as by an Internet Service Provider ISP . TCP IP protocol communications can thus occur between mobile device and notification server system including the received push information .

It will be appreciated that mobile device is just one example of a device or client that is receptive to push notifications. For example a portable device can communicate through Internet via an ISP using a WiFi or cable connection. Other devices such personal computers tablets etc. can also communicate with the Internet via an ISP . Alternatively devices receptive to push notifications may be coupled directly to Internet . In any event the devices however they may be coupled to the Internet are capable of communicating with notification server system to provide for example received push information .

Thus despite the different ways in which they are coupled to Internet portable device other device and still other devices systems and apparatus not shown can participate in the receiving of push notifications and the providing of information concerning a processing of a push notification in much the same way described previously with respect to the example of mobile device . By way of further non limiting examples portable device other device and still other devices systems and apparatus may receive sent push notifications without the intermediary of a push gateway server system .

According to certain example embodiments notification server system receives a push notification including a message and a destination from push originator server system . Upon receiving the push notification notification server system can create for example a push token. As used herein a push token is an identifier used to represent the received push notification and is suitable to be used as a key in performing lookups to retrieve information pertaining to the received push notification identified by the push token. The push token may be derived in some way from the received push notification and or metadata related thereto e.g. a hash or may be otherwise generated or assigned e.g. it may be randomly assigned .

In this example an operation is performed by which the recipients of the push message are identified. Further push messages are generated which are addressed to the one or more recipients of the push notification and which preferably include another identifier referred to as a send token. As used herein a send token is an identifier used to represent a sent push notification and is suitable to be used as a key in performing lookups to retrieve information pertaining to the sent push notification identified by the send token. The send token may be linked to the sent push notification or may be unrelated to the sent push notification.

The send token in this example is therefore used to represent the sent push notification. The send token may also be associated with the push token on a one to one or many to one basis. That is a single push token may be associated with a single send token or with multiple send tokens. In such an arrangement it is possible to retrieve information about the receive push notification associated with the push token using the send token as a key and also possible to given a push token retrieve information about the sent push messages associated with one or more associated send tokens. It is therefore apparent that a one to many mapping may exist between the push token and the send tokens and that this mapping can be used to obtain related information given a push token or a send token.

By way of non limiting example a sent push notification or derived from a received push notification and a send token is sent over the Internet to a designated destination. For example push gateway server system is configured to forward the sent push notification to its destination e.g. mobile device or other mobile device by non limiting examples. Notification server system is disposed to receive push information or concerning a processing of the sent push notification as identified by the related send token.

The send token can be for example stored in a memory of notification server system to identify the sent push notification. Also the received push information can be stored for example in a memory of notification server system . The received push notification and or the sent push notification can also be stored in a memory of notification server system for example.

By way of further example a push token can be created after receiving the received push notification and can be subsequently stored in a memory of notification server system . The sent push notification can be sent to one or more destinations. In this example a number of send tokens are created corresponding to the number of destinations. It will therefore be apparent that there can be a one to one or many to one mapping between the send token s and the push token.

By way of non limiting example program instructions stored in a memory of notification server system can include code segments for receiving a received push notification including a message and a destination code segments creating a send token code segments sending a sent push notification derived from the received push notification and the send token and code segments receiving received push information which is identified by the send token concerning a processing of the sent push notification. In this example the program instructions can further include code segments for creating a push token after receiving the received push notification. By still further example the program instructions can include code segments for storing in a persistent database of notification server system at least one of a received push notification a sent push notification a send token and a push token.

By way of example and not limitation a device or client such as a mobile device portable device or other device may include program instructions stored in a memory which include code segments for receiving a push notification with send token code segments for processing the push notification and code segments for sending push information which is identified by the send token concerning the processing of the push notification. Such push information can be sent to for example notification server system to provide feedback from the device as to the processing of the push notification.

By way of non limiting example code segments for processing the push notification can be associated with an application program running on the client. For example code segments for processing the push notification can include a library of code segments which can be utilized by the application program. Further the push information in this example includes information concerning the use of the push notification by the application program. The push information may be augmented by other information such as life cycle event information pertaining to the device or an application program of the device. Such life cycle information may be sent separately or may in some cases accompany the push information.

Non volatile memory is by way of non limiting example coupled to bus and can serve as storage for the various program instructions and data for notification server system . As used herein non volatile memory shall refer to a non volatile computer readable medium such as a hard disk drive optical drive flash memory or other computer readable memory which does not lose data when power is removed. In certain examples some or all of the non volatile memory remote or network attached storage.

Both volatile memory and non volatile memory are examples of non transitory computer readable media. As used herein non transitory computer readable media refers to a physical memory and excludes propagating electromagnetic waves and or other forms of non statutory subject matter in accordance with current USPTO protocols.

According to certain example embodiments non volatile memory will store program instructions comprising an operating system for notification server system . The operating system may be UNIX Linux Windows or another operating system as will be appreciated by those of skill in the art. Further a portion of the storage capacity of non volatile memory may be used to store one or more databases and associated code segments. Of course operating system code segments databases and associated code segments etc. may also be stored in volatile memory for as long as it is provided with power.

I O subsystem is coupled to bus and handles the various input and output operations of notification server system which may include by way of example and not limitation output to a display input from a keyboard input from a pointing device etc. Such devices may be coupled part time to I O subsystem . Such devices may also be coupled via the network interface and a network which may be Internet or another LAN or WAN. This allows for remote control and monitoring of notification server system .

It should be noted that the notification server system of may comprise multiple servers load balancers etc. Therefore as used herein a notification server system comprises one or more servers configured to implement the processes described herein. The notification server system depicted in is but one example hardware configuration for a notification server system.

A display subsystem of mobile device is coupled to bus and may include by way of example and not limitation a flat panel display such as an LCD display electronic paper display etc. an adapter to drive other attachable displays etc. Also display subsystem of mobile device may include an electro acoustic transducer aka speaker or earphone for audio output.

In this example a network interface coupled to bus provides access to a cellular network . This is typically accomplished with a bidirectional RF digital communication link . A memory serves in this example as a random access RAM memory of processor .

In addition to processor other devices coupled to bus may access memory which may be volatile memory using for example DMA transfers. A non volatile memory e.g. flash memory is coupled to bus in certain examples which can provide storage for program instructions for an operating system of mobile device as well as program instructions for the various applications of mobile device .

By way of non limiting example the received push notification can be received by an API call from push originator server system of . These API calls can be made by way of a non limiting example using a REST based API. As well known to those of skill in the art REST is an acronym for Representational State Transfers and is a way of organizing state transitions of and communications between computers clients and servers communicating in a network environment typically using HTTP or HTTPS protocol. REST based operations often include the ability to create read update and delete resources specified by a hierarchical specifier in a URL. For example an API call comprising a received push notification can be as follows 

After processing a received push notification the notification server system sends a sent push notification to for example the push gateway server system of . For example a push notification can implement the following format 

Notification server system can also for example be responsive to a push source interface which comprises for example a REST based API to be used to query statistical information concerning the use of a certain application which may be stored in database and queue subsystem as well as many other kinds of queries information upload operations information update operations and information deletion operations. By way of further example notification server system is also responsive to received push information and or app life cycle events typically from clients.

Notification server system can for example also include other processes such as processes to develop statistics from data stored in database and or queue such as received push information and app life cycle events . For example statistics can be developed such as the number of times a certain application program is opened initialized closed foregrounded backgrounded etc. on one or more clients. An example of received push information takes the following format 

the payload may contain information specifying what happened on the device like started this application etc.

A still further example process that can be performed by notification server system is to periodically scan database and or queue for data that requires processing. After identifying such data processes can be initiated to for example enqueue a job to process the database and or queue typically to create derived data products.

If it is determined in operation that a received push notification has been received the process continues with an operation in which a sent push notification is sent at an optimal condition. As used herein optimal may be used synonymously with favorable improved or the like to mean a condition which is meant to improve the result of a push. By way of non limiting example an optimal condition can be a favorable push notification time and or a favorable push notification format. For example a favorable push notification time could be just before a mealtime for a push notification having to do with a restaurant. As another example a favorable push format may be to change the color font size and or font of the display of a push.

After the push notification has been sent by operation an operation stores and processes received push information. This occurs for example as a result of received push information being received from a device such as a phone or other device to which the push notification was sent. Such received push information may be the result of a user opening an application in response to a push notification that has resulted in passive indicia associated with an application of the device or an active notification such as modal dialog on the device in association with the application. The received push information in this non limiting example can be stored and processed so that subsequent sent push notifications can be improved. Upon completion of operation the process continues with operation to await a new push notification.

Since a given received push notification may result in multiple sent push notifications operation may be invoked multiple times for a single invocation of operation . If it is determined in operation that a sent push notification should not be optimized then that sent push notification is processed in operation . Operation sends the sent push notification. Once the sent push notification is sent the process with respect to that sent push notification ends at . Other sent push notifications associated with the parsed received push notification may still be in various stages of processing in the process of .

If it is determined in operation that a sent push notification should be optimized then the process continues in an operation which applies a filter based upon the received push information in the database of received push information developed from a plurality of prior sent push notifications in order to provide for example a favorable push time a favorable push format or both for the sent push notification. One or more parameters derived from the received push notification associated with the sent push notification may be used in the determination of a favorable push time a favorable push format or both. Then in an operation a determination is made as to whether the sent push notification should be personalized.

If it is determined in operation that the sent push notification should be personalized then the process continues in an operation which modifies the sent push notification. Such modification alters the presentation of the push notification in some way resulting in a favorable push format. By way of non limiting example such alteration may include altered or additional visual display altered or additional message content altered or additional sound or vibration or a combination of alterations. The process then continues with operation which determines whether or not the sent push notification can be scheduled.

If in operation it is determined that the sent push notification can be scheduled then the process continues in an operation which places the sent push notification in a send queue. The process then continues in an operation which determines whether the message density is acceptable. That is if at the current time e.g. as provided by a real time clock the destination of the sent push notification has been saturated with sent push notifications to such a degree that further sent push notifications could annoy the user and possibly cause him to turn off push notifications then the density would be deemed unacceptable. Thus if it is determined in operation that the density is acceptable then the process continues in operation described earlier and the process is complete at .

The process begins at and continues with an operation which determines if a full feature set for an app associated with a given received push notification is available in the database of received push information. If it is determined in operation that a full feature set is not available then the process continues with operation which uses a general purpose global feature set as a starting point for features that are missing but for which some initial value is needed. This addresses the cold start condition present in systems that perform iterative refinement of a database and which use the database during the process. Once initialized the app feature set will gradually adapt based on received push information and additional device information observed over time. Upon completion of operation assigning the global feature set to be used initially for features that are missing for this app user combination the process continues with operation .

Operation causes the sent push notification to conform to a local favorable condition reflected in the database of received push information for this app user combination. The process then continues with an operation which sets individualization and scheduling parameters for this sent push notification. The process is then completed at . If it was determined in operation that the app has a full feature set then the process skips operation and continues directly with operation .

It will be appreciated that the database analysis of operation can be performed using a variety of data analysis techniques. By way of non limiting example set of data analysis techniques grouped under the umbrella term data mining are useful in that data mining techniques focus on modeling and knowledge discovery for predictive rather than purely descriptive purposes.

Data mining is an interdisciplinary field of computer science wherein patterns are extracted from large data sets by combining methods from statistics artificial intelligence and database management. Data mining also encompasses data dredging data fishing and data snooping wherein data mining techniques are used to sample parts of a larger population data set that are or may be too small for reliable statistical inference to be made about the validity of any patterns discovered. Data dredging data fishing and data snooping techniques can however be used in creating new hypotheses to test against larger data populations or to be tested for validity in a more empirical fashion.

As will be appreciated by those of skill in the art data mining can include one or more methods and algorithms. By way of non limiting examples these methods and algorithms may include association rule learning cluster analysis constructive induction data analysis decision trees factor analysis knowledge discovery neural nets predictive analytics reactive business intelligence regression structured data analysis statistics and text mining.

By way of non limiting example a useful data mining technique is cluster analysis or clustering. With cluster analysis a set of observations including for example received push information from the database are assigned into subsets known as clusters so that observations in the same cluster are similar in some sense. An important step in most clustering techniques is to select a distance measure which will determine the similarity of two observations or elements is calculated.

Decision tree techniques encompass decision support tools which use a tree like graph or model of decisions and their possible consequences including chance event outcomes resource costs and utility. Decision trees can be used in decision analysis to help identify a strategy most likely to reach a goal e.g. the optimization of a push notification.

Factor analysis is a statistical method used to describe variability among observed variables in terms of a potentially lower number of unobserved variables called factors. For example variations in three or four observed variables may reflect the variations in a single unobserved variable or in a reduced number of unobserved variables. Factor analysis searches for such joint variations in response to unobserved latent variables.

Knowledge discovery is a concept in the field of computer science that describes the process of automatically searching large volumes of data for patterns that can be considered knowledge about the data. It is categorized according to what kind of data is searched and in what form the result of the search is represented.

An artificial neural network ANN often simply called a neural network NN is a computational model that is inspired by the structure and or functional aspects of biological neural networks. A neural network includes an interconnected group of artificial neurons e.g. programmed constructs that mimic properties of biological neurons and it processes information using a connectionist approach to computation. In most cases an ANN is an adaptive system that changes its structure based on external or internal information that flows through the ANN during a learning phase. Modern ANN can typically be considered to be non linear statistical data modeling tools and are often used to model complex relationships between inputs and output to find patterns in the data.

Predictive analytics encompass a variety of statistical techniques from modeling data mining and game theory that analyze current and historical facts to make predication about future events. Models formed from predictive analytic techniques can capture relationships among many factors to allow an assessment of risk and reward associated with a particular set of conditions to guide in a decision making process.

Regression analysis encompasses statistical techniques which can estimate relationships among variables. Types of regression analysis include linear regression models simple linear regression logistic regression nonlinear regression nonparametric regression robust regression and stepwise regression.

Text mining sometimes referred to as text data mining refers to the process of deriving high quality information from text e.g. in a push message . High quality information may be derived through the identification of patterns and trends by for example a statistical pattern learning process. Text mining usually involves the process of structuring the input text usually parsing along with the addition of some derived linguistic features and the removal of others with the subsequent insertion into a database deriving patterns within the structured data and evaluating and interpreting the output.

Many parameters may be collected which can become feature vectors in the multi dimensional space. Various derivative representations of the data may be developed by processes which use the received push information in the database as input and produce derivative data structures which can map the feature vectors into a form that can be used to determine a favorable time or favorable format for subsequent sent push notifications by way of non limiting examples.

Initially in this example the multi dimensional space may be populated by features that are obtained from an aggregate of demographically or otherwise similar users. The points in this initial set of feature vectors may form clusters of points which represent sent push notifications that have been successfully converted through user interaction as a result of a push. In some instances an inference may be made that a user interaction with a given app is the result of a push notification when the interaction is shortly after a push notification.

Favorable clusters of aggregate feature vectors are depicted in by way of non limiting example. Thus sent push notifications that are within this cluster in multi dimensional space will be sent in this example. Push notifications that are outside of this cluster may in some cases be adjusted so that they are within the cluster and the altered sent push notification may then be sent. The feature set of a new device application combination in this example is measured against known clusters of device and application features. At any given time in the system there will be a number of clusters that represent similar device and application combinations. When a new device is observed its multi dimensional feature set is compared using one or more distance metrics including but not limited to Euclidean distance Levenshtein distance or Mahalanobis distance. Using multiple distance calculations a composite distance for a new device from one of the existing clusters and associate that device with the nearest cluster can be derived in this example. Based on the example association optimized pushes to the new application device combination can be delivered as would deliveries to the rest of the cluster in the near term.

In a new device DX may be measured for affinity to two different clusters C and C by way of non limiting example. Each cluster will have an attraction based on the composite distance measurement. This initial association is only for new device and application combinations. Over time the weights and ranks of features in an application device combination will be personalized based on user response to pushes.

Over time with the addition of more feature vectors that are particular to the specific user and application associated with a push notification will populate the space and in certain embodiments they will displace feature vectors associated with the aggregate. In other examples feature vectors weight of importance will fade over time. Newer feature vectors may cause a highly favorable region to drift over time to an area of multi dimensional space that is more personalized to the specific application and user.

The new personalized favorable area is shown in by way of non limiting example. Sent push notifications that are within this cluster in multi dimensional space can for example be sent. Push notifications that are outside of this cluster may in some cases be adjusted so that they are within the cluster and the altered sent push notification can then be sent.

A further example process for optimizing a push notification delivery system with feedback analysis follows. In this non limiting example received push information regarding previous sent push notifications is collected and stored in a database. Some sent push notifications are converted through user interaction in response to the sent push notification and others are not. When a sent push notification is converted received push information can be received from the device and stored in the database. Many parameters can be collected which may be represented as feature vectors in a multi dimensional space. Various derivative representations of the data may developed by processes which use the received push information in the database as input and can produce derivative data structures which map the feature vectors into a form that can be used to determine a favorable time or favorable format for subsequent sent push notifications.

One such structure is a K D tree which can organize vast amounts of information into a multi dimensional data structure that can be rapidly queried by way of non limiting example. The K D tree is so named because it supports an arbitrarily high number K of dimensions. One example K D tree would store feature vectors for each sent push notification whether or not the sent push notification was successfully converted. Those vectors that represent a successfully converted sent push notification will represent a location in the multi dimensional space where it is was successful to send a sent push notification and will have a re enforcing effect for future sent push notifications. Those feature vectors that represent a sent push notification that was not successfully converted represent a location in multidimensional space where it was not successful to send a sent push notification in this non limiting example. These locations will have a negative reinforcing effect for future sent push notifications.

Over time hot and cold areas are developed in the multi dimensional space in this example. Hot areas represent portions of the multi dimensional space where it is favorable to send a push notification while cold areas represent portions of the multi dimensional space where it is undesirable to send a push notification.

As new data is collected for a given region of the multi dimensional space old data is associated with a lower weight relative to that of the new data. In certain embodiments the relevance of data is tapered off on a logarithmic scale. This is considered advantageous in this example because the initial set of feature vectors for the multi dimensional space are derived not from personal information since none are available at the outset but from general information about an aggregate of users that are demographically or otherwise similar to this user.

In this example the K D tree is queried for data surrounding a point for which the system proposes to send a push notification. The query space can be for example a hypersphere surrounding the point. All feature vectors within that hypersphere are returned as the query result. These feature vectors each have either a positive or negative effect on the favorability of sending a push notification corresponding to the given point in multidimensional space. An overall metric of favorability is developed for this point in multi dimensional space based upon the feature vectors that are returned.

Each feature is associated with a weight that can be developed using for example a Pearson correlation relating the feature to successful conversion by way of non limiting example. Such weights can be used in a number of ways to adjust their respective features importance in the metric of favorability. For example the scale of the corresponding dimensions can be adjusted so that less important data is spread over a greater area in the multi dimensional space. Alternatively the weight can be used to affect the impact of the associated feature vector on the overall favorability metric of a given point.

Since a richer set of information is available for successful conversions than for unsuccessful there exists an imbalance in terms of the number of dimensions in which the two kinds of information can exist in the multi dimensional space. It may therefore be desirable in this example to replicate the unsuccessful feature vectors so that they occupy multiple locations along the axes for which no data is available or applicable.

Engagement with an application at various times of day independently of a sent push notification can have a reinforcing effect in the portions of multi dimensional space that represent that interaction. This kind of interaction can therefore make previously cold areas of the multi dimensional space turn hot. This can be advantageous in that the presence of cold areas in the multi dimensional space may have a self reinforcing effect. e.g. since an area is so cold that no sent push notifications are ever sent dynamic change in that area requires some outside event such as independent engagement with the application.

The aforementioned overall favorability metric associated with a given point in K D space in this example may be deemed to warrant sending a sent push notification at the time and or manner associated with that point in multi dimensional space. When this occurs a search for a more acceptable point may be conducted. Various other locations in the space can be queried and associated favorability metrics can be obtained. Such points may represent future times or alternative means of presentation or both. When one or more acceptable point is found a best one e.g. the one considered to be the most favored can be selected and the sent push notification can be scheduled for delivery. It is often desirable to favor an acceptable point that is associated with a relatively nearby time over points that are far in the future.

In this example maintenance of the K D tree can include the removal of old data or the resealing of a dimension. It may therefore be desirable to rebuild the tree periodically. Alternatively the tree may be edited to reflect new data or new weights. Other processes may also or alternatively be performed as will be appreciated by those of skill in the art.

It will be appreciated that the forgoing systems and processes include computer implemented processes. As such a number of different hardware and software platforms may be used to implement the systems and processes described herein. The processes are generally stored as program instructions including code segments in non transitory computer readable media that can be accessed directly or indirectly by systems and or devices as disclosed herein or otherwise. Furthermore although various embodiments have been described using specific terms words and or phrases such description is for illustrative purposes only. The terms words and or phrases used are for the purpose of description rather than of limitation.

It is to be understood that changes and variations may be made by those of ordinary skill in the art without departing from the spirit or the scope of the present invention which is set forth in the following claims. In addition it should be understood that aspects of various other embodiments may be interchanged either in whole or in part. It is therefore intended that the claims be interpreted in accordance with the true spirit and scope of the invention without limitation or estoppel.

