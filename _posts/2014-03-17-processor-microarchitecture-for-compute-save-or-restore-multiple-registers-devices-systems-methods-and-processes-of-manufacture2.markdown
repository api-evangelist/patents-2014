---

title: Processor micro-architecture for compute, save or restore multiple registers, devices, systems, methods and processes of manufacture
abstract: An electronic circuit () includes a bias value generator circuit () operable to supply a varying bias value in a programmable range, and an instruction circuit () responsive to a first instruction to program the range of said bias value generator circuit () and further responsive to a second instruction having an operand to repeatedly issue said second instruction with said operand varied in an operand value range determined as a function of the varying bias value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09557992&OS=09557992&RS=09557992
owner: TEXAS INSTRUMENTS INCORPORATED
number: 09557992
owner_city: Dallas
owner_country: US
publication_date: 20140317
---
This application is a division of U.S. patent application Ser. No. 13 247 101 filed Sep. 28 2011 which is a division of U.S. patent application Ser. No. 12 125 431 TI 63894 filed May 22 2008 now U.S. Pat. No. 8 055 886 which claims the benefit of provisional U.S. Patent Application No. 60 949 426 TI 63894PS filed Jul. 12 2007 titled Processor Micro Architecture for Compute Save or Restore Multiple Registers Devices Systems Methods and Processes of Manufacture. 

Portions of this patent application contain materials that are subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the United States Patent and Trademark Office but otherwise reserves all copyright rights whatsoever.

This invention is in the field of electronic computing hardware and software and communications and is more specifically directed to improved circuits devices and systems for power management and information and communication processing and processes of operating and making them. Without limitation the background is further described in connection with communications processing.

Wireline and wireless communications of many types have gained increasing popularity in recent years. The personal computer with a wireline modem such as DSL digital subscriber line modem or cable modem communicates with other computers over networks. The mobile wireless or cellular telephone has become ubiquitous around the world. Mobile telephony has recently begun to communicate video and digital data and voice over packet VoP or VoIP in addition to cellular voice. Wireless modems for communicating computer data over a wide area network are also available.

Mobile video on cellular telephones and other mobile platforms is increasing in popularity. It is desirable that many streams of information such as video voice and data should be flexibly handled by such mobile devices and platforms under power management.

Wireless data communications in wireless mesh networks such as those operating according to the IEEE 802.16 standard or WIMAX are increasing over a widening installed base of installations. The wireless mesh networks offer wideband multi media transmission and reception that also appear to call for substantial computing power and hardware. Numerous other wireless technologies exist and are emerging about which various burdens and demands for power management exist and will arise.

Security techniques are used to improve the security of retail and other business commercial transactions in electronic commerce and to improve the security of communications wherever personal and or commercial privacy is desirable. Security is important in both wireline and wireless communications and apparently imposes still further demands for computing power and hardware and compatible power management.

Processors of various types including DSP digital signal processing chips RISC reduced instruction set computing information storage memories and or other integrated circuit blocks and devices are important to these systems and applications. Containing or reducing energy dissipation and the cost of manufacture and providing a variety of circuit and system products with performance features for different market segments are important goals in DSPs integrated circuits generally and system on a chip SOC design.

Generally and in one form of the invention an electronic circuit includes a bias value generator circuit operable to supply a varying bias value in a programmable range and an instruction circuit responsive to a first instruction to program the range of the bias value generator circuit and further responsive to a second instruction having an operand to repeatedly issue the second instruction with the operand varied in an operand value range determined as a function of the varying bias value.

Generally and in another form of the invention a processor for electronic computing includes an instruction register an instruction decoder having a decoded instruction output with an instruction operand output the instruction decoder operable to successively decode a repeat instruction and a repeated instruction having an operand a pipeline having pipestages including a particular pipestage coupled to the decoded instruction output and a repeating instruction circuit coupled between the instruction decoder and the particular pipestage the repeating instruction circuit responsive to the repeat instruction to program an operand value range and also responsive to the repeated instruction and its operand to vary the value of the operand over the operand value range and deliver the varying value of the operand to the particular pipestage.

Generally and in a further form of the invention an electronic circuit includes an instruction circuit operable to provide a push instruction having an immediate constant a count register operable to hold a changing count a destination stack and push instruction execution circuitry operable to dynamically push data to the destination stack in response to the immediate constant from the instruction circuit biased with the changing count from the count register.

Generally and in a process form of the invention a process of operating an electronic circuit includes supplying a varying counter value in a programmable range and responding to a first instruction to program the range and responding to a second instruction having an associated operand to repeatedly vary the operand in an operand value range determined as a function of the counter value varying in the programmable range.

Generally and in another process form of the invention a process of operating a processor having a pipeline for electronic computing includes successively delivering a repeat instruction and a repeating instruction having an operand responding to the repeat instruction to program an operand value range and responding to the repeated instruction and its operand to repeatedly vary the value of the operand in the operand value range and to deliver the repeatedly varied value of the operand to the pipeline.

Generally and in yet another form of the invention an electronic circuit includes a memory a set of longer width and shorter width storage elements an instruction operand value generating circuit operable to generate a succession of values in an operand value range an address pipeline coupled to the instruction operand value generating circuit and operable to use the succession of values to access a succession of memory locations in the memory and selection circuitry also coupled to the instruction operand value generating circuit and operable to concurrently use the same succession of values to access the set of longer width and shorter width storage elements and thereby effectuate transfers of information between the set and the memory.

Generally and in an additional form of the invention a processing system includes a printed circuit board a volatile memory a processor on the printed circuit board for electronic computing coupled to the volatile memory and the processor including a pipeline and a set of longer width and shorter width storage elements a nonvolatile memory elsewhere on the printed circuit board and coupled to the processor for holding representations of instructions for the instruction register to save and restore the set of longer width and shorter width storage elements to the volatile memory the instructions including a repeat instruction as well as a repeated instruction having an operand the processor further including an instruction operand value generating circuit operable to generate values varying in an operand value range and biasedly related to the operand of the repeated instruction represented in the nonvolatile memory and selection circuitry in the pipeline coupled to the instruction operand value generating circuit and operable to use the values to access the set of longer width and shorter width storage elements and thereby facilitate transfers of information between the set and the volatile memory.

Generally and in yet another form of the invention an electronic debugging circuit includes a bias value generator circuit operable to supply a varying bias value in a programmable range and having a counter register a pipeline register an instruction circuit responsive to a first instruction to program the range of the bias value generator circuit and further responsive to a second instruction having an operand to repeatedly issue the second instruction to the pipeline register with the operand varied in an operand value range determined as a function of the varying bias value and a scan controller having at least one scan path linking the counter register and the pipeline register to the scan controller.

Generally and in another further process form of the invention a process of manufacturing includes fabricating structures on an integrated circuit wafer defining both a bias value generator circuit having a programmable range and an instruction circuit coupled to the bias value generator circuit and electrically testing the structures to verify that the instruction circuit is responsive to a first instruction to program the range of the bias value generator circuit and that the bias value generator circuit supplies a varying bias value in the programmed range and that the instruction circuit is further responsive to a second instruction having an operand to repeatedly issue the second instruction with the operand varied in an operand value range determined as a function of the varying bias value.

These and other circuit device system apparatus process and other forms of the invention are disclosed and claimed.

Corresponding numerals in different figures indicate corresponding parts except where the context indicates otherwise. Some otherwise identical designations may inadvertently have different characters or portions upper case or lower case in different parts of the description and drawings and such otherwise identical designations indicate the corresponding parts except where the context indicates otherwise.

In an improved communications system has system blocks as described next and improved with any one some or all of the circuits and subsystems shown in . Any or all of the system blocks such as cellular mobile telephone and data handsets and a cellular telephony and data base station a WLAN AP wireless local area network access point IEEE 802.11 or otherwise a Voice over WLAN gateway with user voice over packet telephone not shown and a voice enabled personal computer PC with another user voice over packet telephone not shown communicate with each other in communications system . Each of the system blocks is provided with one or more PHY physical layer blocks and interfaces as selected by the skilled worker in various products for DSL digital subscriber line broadband over twisted pair copper infrastructure cable DOCSIS and other forms of coaxial cable broadband communications premises power wiring fiber fiber optic cable to premises and Ethernet wideband network. Cellular base station two way communicates with the handsets with the Internet with cellular communications networks and with PSTN public switched telephone network .

In this way advanced networking capability for services software and content such as cellular telephony and data audio music voice video e mail gaming security e commerce file transfer and other data services internet world wide web browsing TCP IP transmission control protocol Internet protocol voice over packet and voice over Internet protocol VoP VoIP and other services accommodates and provides security for secure utilization and entertainment appropriate to the just listed and other particular applications.

The embodiments applications and system blocks disclosed herein are suitably implemented in fixed portable mobile automotive seaborne and airborne communications control set top box television receiver or two way TV and other apparatus. The personal computer PC is suitably implemented in any form factor such as desktop laptop palmtop organizer mobile phone handset PDA personal digital assistant internet appliance wearable computer content player personal area network or other type.

For example handset is improved for selectively determinable functionality performance security and economy when manufactured. Handset is interoperable and able to communicate with all other similarly improved and unimproved system blocks of communications system . Camera provides video pickup for cell phone to send over the internet to cell phone PDA TV and to a monitor of PC via any one some or all of cellular base station DVB station WLAN AP STB and WLAN gateway . Handset has a video storage such as hard drive high density memory and or compact disk CD in the handset for digital video recording DVR such as for delayed reproduction transcoding and retransmission of video to other handsets and other destinations.

On a cell phone printed circuit board PCB in handset is provided a higher security processor integrated circuit an external flash memory and SDRAM and a serial interface . Serial interface is suitably a wireline interface such as a USB interface connected by a USB line to the personal computer and magnetic and or optical media when the user desires and for reception of software intercommunication and updating of information between the personal computer or other originating sources external to the handset and the handset . Such intercommunication and updating also occur via a processor in the cell phone itself such as for cellular modem WLAN BLUETOOTH from a website or or other circuitry for wireless or wireline modem processor digital television and physical layer PHY .

In processor integrated circuit includes at least one processor or central processing unit CPU block coupled to an internal on chip read only memory ROM an internal on chip random access memory RAM and an internal on chip flash memory . A security logic circuit is coupled to secure or general purpose identification value Security GPI bits of a non volatile one time alterable Production ID register or array of electronic fuses E Fuses . Depending on the Security GPI bits boot code residing in ROM responds differently to a Power On Reset POR circuit and to a secure watchdog circuit coupled to processor . A device unique security key is suitably also provided in the E fuses or downloaded to other non volatile difficult to alter parts of the cell phone unit .

The words internal and external as applied to a circuit or chip respectively refer to being on chip or off chip of the applications processor chip . All items are assumed to be internal to an apparatus such as a handset base station access point gateway PC or other apparatus except where the words external to are used with the name of the apparatus such as external to the handset. 

ROM provides a boot storage having boot code that is executable in at least one type of boot sequence. One or more of RAM internal flash and external flash are also suitably used to supplement ROM for boot storage purposes.

It is contemplated that the skilled worker uses each of the integrated circuits shown in or such selection from the complement of blocks therein provided into appropriate other integrated circuit chips or provided into one single integrated circuit chip in a manner optimally combined or partitioned between the chips to the extent needed by any of the applications supported by the cellular telephone base station personal computer s equipped with WLAN WLAN access point and Voice WLAN gateway as well as cellular telephones radios and televisions Internet audio video content players fixed and portable entertainment units routers pagers personal digital assistants PDA organizers scanners faxes copiers household appliances office appliances microcontrollers coupled to controlled mechanisms for fixed mobile personal robotic and or automotive use combinations thereof and other application products now known or hereafter devised for increased partitioned or selectively determinable advantages.

In an integrated circuit includes a digital baseband DBB block that has a RISC processor such as MIPS core s ARM core s or other suitable processor and a digital signal processor such as from the TMS320C55x DSP generation from TEXAS INSTRUMENTS Incorporated or other digital signal processor or DSP core communications software and security software for any such processor or core security accelerators and a memory controller. Security accelerators block provide additional computing power such as for hashing and encryption that are accessible for instance when the integrated circuit is operated in a security level enabling the security accelerators block and affording types of access to the security accelerators depending on the security level and or security mode. The memory controller interfaces the RISC core and the DSP core to Flash memory and SDRAM synchronous dynamic random access memory . On chip RAM and on chip ROM also are accessible to the processors for providing sequences of software instructions and data thereto. A security logic circuit of has a secure state machine SSM to provide hardware monitoring of any tampering with security features. A Secure Demand Paging SDP circuit is provided for effectively extended secure memory.

Digital circuitry on integrated circuit supports and provides wireless interfaces for any one or more of GSM GPRS EDGE UMTS and OFDMA MIMO Global System for Mobile communications General Packet Radio Service Enhanced Data Rates for Global Evolution Universal Mobile Telecommunications System Orthogonal Frequency Division Multiple Access and Multiple Input Multiple Output Antennas wireless with or without high speed digital data service via an analog baseband chip and GSM CDMA transmit receive chip . Digital circuitry includes a ciphering processor CRYPT for GSM ciphering and or other encryption decryption purposes. Blocks TPU Time Processing Unit real time sequencer TSP Time Serial Port GEA GPRS Encryption Algorithm block for ciphering at LLC logical link layer RIF Radio Interface and SPI Serial Port Interface are included in digital circuitry .

Digital circuitry provides codec for CDMA Code Division Multiple Access CDMA2000 and or WCDMA wideband CDMA or UMTS wireless suitably with HSDPA HSUPA High Speed Downlink Packet Access High Speed Uplink Packet Access or 1 EV DV 1 EV DO or 3 EV DV data feature via the analog baseband chip and RF GSM CDMA chip . Digital circuitry includes blocks MRC maximal ratio combiner for multipath symbol combining ENC encryption decryption RX downlink receive channel decoding de interleaving viterbi decoding and turbo decoding and TX uplink transmit convolutional encoding turbo encoding interleaving and channelizing. . Blocks for uplink and downlink processes of WCDMA are provided.

Audio voice block supports audio and voice functions and interfacing. Speech voice codec s are suitably provided in memory space in audio voice block for processing by processor s . An applications interface block couples the digital baseband chip to an applications processor . Also a serial interface in block interfaces from parallel digital busses on chip to USB Universal Serial Bus of PC personal computer . The serial interface includes UARTs universal asynchronous receiver transmitter circuit for performing the conversion of data between parallel and serial lines. A power resets and control module provides power management circuitry for chip . Chip is coupled to location determining circuitry for GPS Global Positioning System . Chip is also coupled to a USIM UMTS Subscriber Identity Module or other SIM for user insertion of an identifying plastic card or other storage element or for sensing biometric information to identify the user and activate features.

In a mixed signal integrated circuit includes an analog baseband ABB block for GSM GPRS EDGE UMTS HSDPA HSUPA which includes SPI Serial Port Interface digital to analog analog to digital conversion DAC ADC block and RF radio frequency Control pertaining to GSM GPRS EDGE UMTS HSDPA HSUPA and coupled to RF GSM etc. chip . Block suitably provides an analogous ABB for CDMA wireless and any associated 1 EV DV 1 EV DO or 3 EV DV data and or voice with its respective SPI Serial Port Interface digital to analog conversion DAC ADC block and RF Control pertaining to CDMA and coupled to RF CDMA chip .

An audio block has audio I O input output circuits to a speaker a microphone and headphones not shown . Audio block has an analog to digital converter ADC coupled to the voice codec and a stereo DAC digital to analog converter for a signal path to the baseband block including audio voice block and with suitable encryption decryption activated.

A control interface has a primary host interface I F and a secondary host interface to DBB related integrated circuit of for the respective GSM and CDMA paths. The integrated circuit is also interfaced to an I2C port of applications processor chip of . Control interface is also coupled via circuitry to interfaces in circuits and the baseband .

A power conversion block includes buck voltage conversion circuitry for DC to DC conversion and low dropout LDO voltage regulators for power management sleep mode of respective parts of the chip regulated by the LDOs. Power conversion block provides information to and is responsive to a power control state machine between the power conversion block and circuits .

Circuits provide oscillator circuitry for clocking chip . The oscillators have frequencies determined by one or more crystals. Circuits include a RTC real time clock time date functions general purpose I O a vibrator drive supplement to cell phone ringing features and a USB On The Go OTG transceiver. A touch screen interface is coupled to a touch screen XY off chip.

Batteries such as a lithium ion battery and backup battery provide power to the system and battery data to circuit on suitably provided separate lines from the battery pack. When needed the battery also receives charging current from a Charge Controller in analog circuit which includes MADC Monitoring ADC and analog input multiplexer such as for on chip charging voltage and current and battery voltage lines and off chip battery voltage current temperature under control of the power control state machine. Battery monitoring is provided by either or both of 1 Wire and or an interface called HDQ.

In an RF integrated circuit includes a GSM GPRS EDGE UMTS CDMA RF transmitter block supported by oscillator circuitry with off chip crystal not shown . Transmitter block is fed by baseband block of chip . Transmitter block drives a dual band RF power amplifier PA . On chip voltage regulators maintain appropriate voltage under conditions of varying power usage. Off chip switchplexer couples wireless antenna and switch circuitry to both the transmit portion and the receive portion next described. Switchplexer is coupled via band pass filters to receiving LNAs low noise amplifiers for 850 900 MHz 1800 MHz 1900 MHz and other frequency bands as appropriate. Depending on the band in use the output of LNAs couples to GSM GPRS EDGE UMTS CDMA demodulator to produce the I Q or other outputs thereof in phase quadrature to the GSM GPRS EDGE UMTS CDMA baseband block .

Further in an integrated circuit chip or core is provided for applications processing and more off chip peripherals. Chip or core has interface circuit including a high speed WLAN 802.11a b g interface coupled to a WLAN chip . Further provided on chip is an applications processing section which includes a RISC processor such as MIPS core s ARM core s or other suitable processor a digital signal processor DSP such as from the TMS320C55x DSP generation and or the TMS320C6x DSP generation from TEXAS INSTRUMENTS Incorporated or other digital signal processor s and a shared memory controller MEM CTRL with DMA direct memory access and a 2D two dimensional display graphic accelerator. Speech voice codec functionality is suitably processed in chip in chip or both chips and .

The RISC processor and the DSP in section have access via an on chip extended memory interface EMIF CF to off chip memory resources including as appropriate mobile DDR double data rate DRAM and flash memory of any of NAND Flash NOR Flash and Compact Flash. On chip the shared memory controller in circuitry interfaces the RISC processor and the DSP via an on chip bus to on chip memory with RAM and ROM. A 2D graphic accelerator is coupled to frame buffer internal SRAM static random access memory in block . A security block in security logic of includes an SSM analogous to SSM and includes secure hardware accelerators having security features and provided for secure demand paging as further described herein and for accelerating encryption and decryption. A random number generator RNG is provided in security block . Among the Hash approaches are SHA 1 Secured Hashing Algorithm MD2 and MD5 Message Digest version . Among the symmetric approaches are DES Digital Encryption Standard 3DES Triple DES RC4 Rivest Cipher ARC4 related to RC4 TKIP Temporal Key Integrity Protocol uses RC4 AES Advanced Encryption Standard . Among the asymmetric approaches are RSA DSA DH NTRU and ECC elliptic curve cryptography . The security features contemplated include any of the foregoing hardware and processes and or any other known or yet to be devised security and or hardware and encryption decryption processes implemented in hardware or software.

Security logic of and includes hardware based protection circuitry also called security monitoring logic or a secure state machine SSM. Security logic is coupled to and monitors busses and other parts of the chip for security violations and protects and isolates the protected areas. Security logic makes secure ROM space inaccessible makes secure RAM and register space inaccessible and establishes any other appropriate protections to additionally foster security. In one embodiment such a software jump from Flash memory to secure ROM for instance causes a security violation wherein for example the security logic produces an automatic immediate reset of the chip. In another embodiment such a jump causes the security monitoring logic to produce an error message and a re vectoring of the jump away from secure ROM. Other security violations would include attempted access to secure register or RAM space.

On chip peripherals and additional interfaces include UART data interface and MCSI Multi Channel Serial Interface voice wireless interface for an off chip IEEE 802.15 Bluetooth and low and high rate piconet and personal network communications wireless circuit . Debug messaging and serial interfacing are also available through the UART. A JTAG emulation interface couples to an off chip emulator Debugger for test and debug. Further in peripherals are an I2C interface to analog baseband ABB chip and an interface to applications interface of integrated circuit chip having digital baseband DBB.

Interface includes a MCSI voice interface a UART interface for controls and a multi channel buffered serial port McBSP for data. Timers interrupt controller and RTC real time clock circuitry are provided in chip . Further in peripherals are a MicroWire u wire 4 channel serial port and multi channel buffered serial port McBSP to Audio codec a touch screen controller and audio amplifier to stereo speakers.

External audio content and touch screen in out and LCD liquid crystal display organic semiconductor display and DLP digital light processor display from TEXAS INSTRUMENTS Incorporated are suitably provided in various embodiments and coupled to interface . In vehicular use the display is suitably any of these types provided in the vehicle and sound is provided through loudspeakers headphones or other audio transducers provided in the vehicle. In some vehicles a transparent organic semiconductor display of is provided on one or more windows of the vehicle and wirelessly or wireline coupled to the video feed.

Interface additionally has an on chip USB OTG interface that couples to off chip Host and Client devices. These USB communications are suitably directed outside handset such as to PC personal computer and or from PC to update the handset .

An on chip UART IrDA infrared data interface in interfaces couples to off chip GPS global positioning system block cooperating with or instead of GPS and Fast IrDA infrared wireless communications device. An interface provides EMT9 and Camera interfacing to one or more off chip still cameras or video cameras and or to a CMOS sensor of radiant energy. Such cameras and other apparatus all have additional processing performed with greater speed and efficiency in the cameras and apparatus and in mobile devices coupled to them with improvements as described herein. Further in an on chip LCD controller or DLP controller and associated PWL Pulse Width Light block in interfaces are coupled to a color LCD display or DLP display and its LCD light controller off chip and or DLP digital light processor display.

Further on chip interfaces are respectively provided for off chip keypad and GPIO general purpose input output . On chip LPG LED Pulse Generator and PWT Pulse Width Tone interfaces are respectively provided for off chip LED and buzzer peripherals. On chip MMC SD multimedia and flash interfaces are provided for off chip MMC Flash card SD flash card and SDIO peripherals.

In a WLAN integrated circuit includes MAC media access controller PHY physical layer and AFE analog front end for use in various WLAN and UMA Unlicensed Mobile Access modem applications. PHY includes blocks for Barker coding CCK and OFDM. PHY receives PHY Clocks from a clock generation block supplied with suitable off chip host clock such as at 13 16.8 19.2 26 or 38.4 MHz. These clocks are compatible with cell phone systems and the host application is suitably a cell phone or any other end application. AFE is coupled by receive Rx transmit Tx and CONTROL lines to WLAN RF circuitry . WLAN RF includes a 2.4 GHz and or 5 GHz direct conversion transceiver or otherwise and power amplifier and has low noise amplifier LNA in the receive path. Bandpass filtering couples WLAN RF to a WLAN antenna. In MAC Security circuitry supports any one or more of various encryption decryption processes such as WEP Wired Equivalent Privacy RC4 TKIP CKIP WPA AES advanced encryption standard 802.11i and others. Further in WLAN a processor comprised of an embedded CPU central processing unit is connected to internal RAM and ROM and coupled to provide QoS Quality of Service IEEE 802.11e operations WME WSM and PCF packet control function . A security block in WLAN has busing for data in data out and controls interconnected with the CPU. Interface hardware and internal RAM in WLAN couples the CPU with interface of applications processor integrated circuit thereby providing an additional wireless interface for the system of .

Still other additional wireless interfaces such as for wideband wireless such as IEEE 802.16 WiMAX mesh networking and other standards are suitably provided and coupled to the applications processor integrated circuit and other processors in the system. WiMax has MAC and PHY processes and the illustration of blocks and for WLAN indicates the relative positions of the MAC and PHY blocks for WiMax.

In a further digital video integrated circuit is coupled with a television antenna and or coupling circuitry to share antenna and or to provide television antenna tuning antenna selection filtering RF input stage for recovering video audio controls from television transmitter e.g. DVB station of . Digital video integrated circuit in some embodiments has an integrated analog to digital converter ADC on chip and in some other embodiments feeds analog to ABB chip for conversion by an ADC on ABB chip . The ADC supplies a digital output to interfaces of applications processor chip either directly from chip or indirectly from chip via the ADC on ABB chip . Applications processor chip includes a digital video block coupled to interface and having a configurable adjustable shared memory telecommunications signal processing chain such as Doppler MPE FEC. See incorporated patent application TI 62445 Flexible And Efficient Memory Utilization For High Bandwidth Receivers Integrated Circuits Systems Methods And Processes Of Manufacture Ser. No. 11 733 831 filed Apr. 11 2007 which is hereby incorporated herein by reference. A processor on chip such as RISC processor and or DSP configures supervises and controls the operations of the digital video block .

In a system has an MPU subsystem an IVA subsystem and DMA subsystems .. The MPU subsystem suitably has a RISC or CISC processor such as a superscalar processor with L1 and L2 caches. The IVA subsystem has a DSP for image processing video processing and audio processing. The IVA subsystem has L1 and L2 caches RAM and ROM and hardware accelerators as desired such as for motion estimation variable length codec and other processing. DMA is integrated into the system in such a way that it can perform target accesses via target firewalls .and .of connected on the interconnects . A target is a circuit block targeted or accessed by an initiator. In order to perform such accesses the DMA channels are programmed. Each DMA channel specifies the source location of the Data to be transferred and the destination location of the Data.

Data exchange between the peripheral subsystem and the memory subsystem and general system transactions from memory to memory are handled by the System SDMA. Data exchanges within a DSP subsystem . are handled by the DSP DMA .. Data exchange to refresh a display is handled in display subsystem . using a DISP DMA . numeral omitted . This subsystem . for instance includes a dual output three layer display processor for 1 Graphics and 2 Video temporal dithering turning pixels on and off to produce grays or intermediate colors and SDTV to QCIF video format and translation between other video format pairs. The Display block . feeds an LCD panel using either a serial or parallel interface. Also television output TV and Amp provide CVBS or S Video output and other television output types. Data exchange to store camera capture is handled using a Camera DMA . in camera subsystem CAM .. The CAM subsystem . suitably handles one or two camera inputs of either serial or parallel data transfer types and provides image capture hardware image pipeline and preview.

A hardware security architecture including SSM propagates qualifiers on the interconnect and as shown in . The MPU issues bus transactions and sets some qualifiers on Interconnect . SSM also provides an MreqSystem qualifier s . The bus transactions propagate through the L4 Interconnect and then reach a DMA Access Properties Firewall .. Transactions are coupled to a DMA engine .in each subsystem .which supplies a subsystem specific interrupt to the Interrupt Handler . Interrupt Handler is also coupled to SSM .

Firewall protection by firewalls .is provided for various system blocks . such as GPMC to Flash memory . ROM . on chip RAM . Video Codec . WCDMA HSDPA . MAD2D . to Modem chip and a DSP .. Various initiators in the system are given 4 bit identifying codes designated ConnID. Some Initiators and their buses in one example are Processor Core MPU RD WR INSTR Buses digital signal processor direct memory access DSP DMA RD WR system direct memory access SDMA . RD WR Universal Serial Bus USB HS virtual processor PROC VIRTUAL RD WR INSTR virtual system direct memory access SDMA VIRTUAL RD WR display . such as LCD memory management for digital signal processor DSP MMU camera CAMERA . CAMERA MMU and a secure debug access port DAP.

The DMA channels support interconnect qualifiers collectively designated MreqInfo such as MreqSecure MreqPrivilege MreqSystem in order to regulate access to different protected memory spaces. The system configures and generates these different access qualifiers in a security robust way and delivers them to hardware firewalls . . etc. and . . etc. associated with some or all of the targets. The improved hardware firewalls protect the targets according to different access rights of initiators. Some background on hardware firewalls is provided in incorporated patent application TI 38804 Method And System For A Multi Sharing Security Firewall Ser. No. 11 272 532 filed Nov. 10 2005 which is hereby incorporated herein by reference.

The DMA channels . . etc. are configurable through the L4 Interconnect by the MPU . A circuitry example provides a Firewall configuration on a DMA L4 Interconnect interface that restricts different DMA channels according to the configuration previously written to configuration register fields. This Firewall configuration implements hardware security architecture rules in place to allow and restrict usage of the DMA channel qualifiers used in attempted accesses to various targets.

When an attempt to configure access for DMA channels in a disallowed way is detected in band errors are sent back to the initiator that made the accesses and out band errors are generated to the Control Module and converted into an MPU Interrupt. Some background on security attack detection and neutralization is described in the incorporated patent application TI 37338 System and Method of Identifying and Preventing Security Violations Within a Computing System Ser. No. 10 961 344 filed Oct. 8 2004 which is hereby incorporated herein by reference.

In the MPU Others block and System DMA SDMA . . each supply or have some or all of the MreqInfo signals MreqSystem MreqSecure MreqPrivilege MreqDebug MreqType and other signals for various embodiments with the signals as described in TABLE 7. L4 Interconnect supplies the MreqInfo signals to the DMA Firewall and other firewalls .. Interconnect is also coupled to Control Module and cryptographic accelerator blocks and PRCM .

A signal ConnID is issued onto the various buses by each initiator in the system . The signal ConnID is coded with the 4 bit identifying code pertaining to the initiator originating that ConnID signal. System Memory Interface in some embodiments also has an adjustment made to ConnID initiator code so that if incoming ConnID MPU AND MreqSystem 1 then ConnID MPU Virtual. If incoming ConnID SDMA AND MreqSystem 1 then ConnID SDMA Virtual. In this way the special signal MreqSystem identifies a virtual world for these initiators to protect their real time operation. For background on these initiators and identifiers see for instance incorporated patent application TI 61985 Virtual Cores And Hardware Supported Hypervisor Integrated Circuits Systems Methods and Processes of Manufacture Ser. No. 11 671 752 filed Feb. 6 2007 which is hereby incorporated herein by reference.

The System Memory Interface SMS with SMS Firewall is coupled to SRAM Refresh Controller SDRC . and to system SRAM . A new ConnID is suitably generated each time the processor core MPU or system SDMA . . perform an access in the case when the MreqSystem qualifier is one 1 .

In Control Module between Interconnect and DMA Firewall . receives a Security Violation signal when applicable from DMA Firewall .. A Flag pertaining to the Security Violation is activated in a Control Sec Err Status register and is forwarded to SSM Platform Status Register. This flag is read on every Monitor Mode switch or otherwise frequently read or interrupt handler generates an interrupt each time one of the Flag bits is updated or activated by the hardware.

In PRCM is provided in a voltage domain called Wakeup domain WKUP. PRCM is coupled to L4 Interconnect and coupled to Control Module . PRCM is coupled to a DMA Firewall . to receive a Security Violation signal if a security violation occurs and to respond with a Cold or Warm Reset output. Also PRCM is coupled to the SSM .

The modem enters the deep sleep state by acknowledging the D2D idle request by asserting the signal MODEM IDLEACK. The PRCM will gate the modem functional clock upon assertion of the D2D Idle Acknowledge. The modem exits this deep sleep state by asserting a D2D wakeup signal MODEM SWAKEUP. The SAD2D OCP interface clock and modem functional clock are each restarted by the PRCM upon assertion of the D2D wakeup.

Numerous operations involving context switching interrupts and various computations used in the circuits blocks and systems of are facilitated by improved circuitry for repeat multiple instructions as described herein.

In a DSP core is provided with improved circuitry for repeat multiple instructions as described herein. See Glossary TABLE 1 for meanings of various designations in the structures illustrated.

In a DSP subsystem is provided for use in the IVA block and or any of the system blocks .of . A DSP core is bidirectionally coupled with a Hardware Accelerator . The DSP core is bidirectionally coupled with a level 1 L1 memory subsystem including SRAM banked memory. The DSP core is also bidirectionally coupled with a data cache and an instruction cache . The memory subsystem and cache s are coupled to a level 2 L2 memory subsystem by OCP interfaces . L2 memory subsystem provides Level 2 SRAM banked memory caching for Data cache and Instruction cache . A direct memory access DMA unit is coupled to memory subsystem and OCP interfaces and performs DMA information transfers.

In the DSP core and its associated buses are further detailed. DSP core has an instruction unit I unit to control the program flow an address unit A unit to control the data flow and a data unit D unit to execute computations and other data path operations. DSP core is coupled to a set of buses including Data read Data Buses BB CB DB Program read Address Bus PAB and Data read Address Buses BAB CAB DAB. The D unit is suitably fed from Data read Data Buses BB CB DB. I unit suitably utilizes Program read Address Bus PAB to assert addresses and receives program instructions thus read on a Program read Bus PB. The A unit supplies Write addresses to one or more of Data Write Address Buses EAB FAB and D unit concurrently supplies Write data to the corresponding Data Write Data Buses EB FB. The A unit supplies Read addresses to one or more of Data read Address Buses BAB CAB DAB and concurrently receives Read data for itself or for unit from the corresponding Data read Data Buses BB CB DB.

I unit receives instructions on a wide bus and stores some or many lines of instructions in a multi word wide Instruction Buffer Queue IBQ . Instructions are transferred as needed to an Instruction Decoder Controller with associated Instruction Register having sections or slots . for Instruction 1 and . for Instruction 2. depicts a dual issue machine. For an architecture accommodating a higher number of instruction issue more corresponding sections or slots .are provided.

A Unit has a block of Address Registers and a block of Data Registers . An arithmetic logic unit ALU supports data address generator DAG functions. Storage blocks for Xmem Ymem Zmem are coupled to ALU . A Stack unit holds context specific register contents and supports multiple push and multiple pop operations as taught herein.

D Unit has multiply accumulate units MAC1 . and MAC2 . each coupled to receive Data read Data such as from any one or more of buses BB CB DB. A set of Accumulator registers are coupled to the MACs . and . as well as to a pair of arithmetic logic units ALU1 . . with associated shifters . . and to a Bit Operations Unit . D Unit is divided into execute pipe stages as described later hereinbelow. D Unit is coupled to and supplies Data Write Data to buses EB and FB.

An Interrupt Control circuit vectors operations in response to any of plural interrupt inputs so that the Program Counter PC is loaded with the address of the initial instruction in the applicable interrupt service routine corresponding to the particular interrupt and so that the Instruction Register s have the initial instruction itself entered jammed therein so that the applicable interrupt service routine commences.

In the A Unit has storage areas designated Xmem Ymem Zmem coupled with the Auxiliary Registers for data and addresses as well as coupled to one or more address generator ALU s . FFT butterfly bit reverse addressing is supported. In this way the A Unit has circuitry adapted to control the data flow for signal processing loops transforms and their inverses coding and decoding compression and decompression and image processing loops and X Y Z three dimensional processing loops among many other desirable high performance operations.

D Unit register block has a set of accumulator registers e.g. designated AC0 AC15 coupled to ALUs .and shifters .and Bit Operations as well as to the Data Write Buses EB and FB. Bit Operations perform any of various logic operations on a bit wise basis.

In some parts of the circuitry of are depicted in more detail for a dual issue architecture and for conciseness only the more detailed parts are described in connection with . Program Counter PC is coupled with the instruction unit so that jumps and calls are supported. Stack is also associated with a storage block for coefficients. A pair of buses INST1 bus and INST2 bus couples various parts of the pipeline together as shown. A Unit is shown with to Data Address Generators DAGX and DAGY. A Hardware Accelerator Interface HAIF couples the DSP core to the Hardware Accelerator of . A Bus Interface block INTF couples the DSP core to the various buses for read and write operations.

In the Single Repeat circuitry has a mux feeding a Repeat Counter RPTC which in turn is coupled to both a decrementor and a Not Zero detector . Mux has first input lines which receive a Constant field or immediate operand n that is the operand of a Repeat instruction such as Repeat n . Mux has second input lines which are fed back from the output of the decrementor . Mux has a selector control line labeled Single repeat. When a Single Repeat instruction uOPcode first emerges from Instruction Decoder the selector control line is active to cause mux couple the operand n to load repeat counter RPTC with the number n. Then mux has its selection changed to thereafter couple the decrementor and second input lines to mux output lines to the Repeat Counter RPTC on subsequent clock cycles until the Repeat counter RPTC counts down to zero.

In during this time of downcounting in RPTC the Instruction pipe register and the rest of the pipeline are concurrently being clocked so that the decoded instruction from Instruction Decoder to which the Repeat pertains is repeatedly issued into the pipeline thereby effectuating the Repeat instruction. To ensure that only one instruction is repeated an AND gate provides an active output on a STOP line to the Instruction Register IR to prevent new instructions from being entered into IR. The STOP output from AND gate is active provided that both a Single Repeat Active Flag SRAF register bit from Instruction Decoder is active on a first input line to AND gate and that an output from the Not Zero detector is also active on a second input line to AND gate .

The Instruction Register IR .is controlled by the STOP so that the IR continues to hold a given instruction such as Push or Pop that is subject to the Repeat. Because the given instruction remains in the IR the Instruction Decoder continues to output the same uOPcode corresponding to the given instruction which is to be repeated as long as Repeat Counter RPTC is down counting. When zero is reached in RPTC the STOP from AND gate is terminated and the Instruction Register IR receives a subsequent instruction and Instruction Decoder provides a subsequent corresponding uOPcode. The selector control associated with mux is then ready to detect that subsequent uOPcode. If the uOPcode is a Single Repeat at that time or at some later time then circuits again cooperate and respond as just described.

In execute time increases in proportion to the repeat number in a repeat counter RPTC. A repeat instruction RPT sends an instruction kept in an instruction register IR multiple times to a pipeline as shown in . Repeat counter RPTC is loaded when the repeat instruction RPT is decoded. When the value in repeat counter RPTC is not zero 0 instruction register IR update is stopped and keeps the instruction next after the repeat instruction RPT in software code from updating the IR.

For example a signal STOP is applied to the IR when both the instruction decoder has a flag active indicative of a type of instruction from which update may need to be stopped e.g. Single Repeat Action Flag SRAF and the value in repeat counter RPTC is not zero. Concurrently the instruction is repeatedly delivered to the instruction pipe register. Repeat counter RPTC is decremented at each cycle until it reaches zero whereupon the STOP signal goes inactive and the IR is updated with a new instruction because the repeat instruction RPT generation is completed.

Execute time of the repeat instruction RPT is proportional or equal to the repeat number plus one. For example in the case of a multiple push the execute time is proportional to number of push 1 . Stack size is user defined software stack not limited by hardware. Some embodiments are provided situated and operated near the circuitry where the instruction is decoded.

A single repeat instruction saves program space when a loop iterates one instruction such as a computation in a digital filter or initialization e.g. zero filling of some memory region.

As between those two listings when executed in the processor the repeat instruction itself consumes a cycle. Summarizing the repeat instruction saves many bytes in the code size and acceptably incurs a cost of one execution cycle.

Save restore of a set of CPU registers to the stack could laboriously be coded as follows at considerable cost in code size 

Suppose registers were mapped on the data memory space as Memory Mapped Registers MMR and sequential access to CPU registers were realized by using memory addressing mode. However using such a memory addressing mode would take up one of the data address registers AR of for pointing to each MMR address. An example below shows software code that might use MMR addressing for saving 16 address registers by taking up or occupying the AR0 data address register.

MMR mapping as described presents an inevitable difficulty of expandability or issue of increasing the space for new registers. To map increased CPU registers on data memory space can lead to data memory allocation policy change. This policy change may force old codes developed by old policy to be modified. If some old CPU registers cannot be mapped then upgrading software code in accordance with the policy change necessarily entails a tedious and burdensome revision of the software code so that those registers are still saved or restored one by one by corresponding upgrade instructions.

Some processors have a few scoreboard style multiple registers such as for a Load Store instruction. But other processors have many more registers that vary generation by generation of processors. In one particular example of a processor addressed by some of the embodiments herein more than 100 registers are to be saved and the embodiments are applicable to smaller or larger numbers of registers.

In words some embodiments herein single repeat a push instruction and pop also which takes the register ID as an operand. Using an embodiment suppose this piece of code is executed as follows saving a great deal of code size 

However without more the repeated push instruction supported by the circuit of would repetitively push the content of the one register identified in the instruction e.g. AC0 sixteen times when instead all of a set of registers AC0 AC15 are to be saved.

To solve this problem some embodiments provide and execute a single repeat of a push wherein the static operand of the push instruction is automatically and sequentially offset with a decrementing value 15 14 . . . 2 1 0 during repetition. A repeat counter register RPTC in the CPU is augmented with hardware including Register ID Generation Logic of . That register RPTC is loaded with an initial counter value and then decremented to zero whereupon the zero signifies the end of repetition. In this way one example of a counter circuitry operable to supply a varying counter value in a programmable range is shown. The register RPTC together with the decrementor act as one example of a bias value generator circuit. Register ID Generation Logic operates so that during each single repeat a modified operand for the instruction is loaded to the instruction pipe register instead of the unchanging operand in the original instruction. In this way the modified operand has a repeatedly changing value varying over an operand value range determined as a function of the counter value varying over the programmable range so that a series of instructions in effect are automatically generated.

Using the code repeat 15 dbl push AC0 now supported by the hardware of the instruction unit issues a succession of push instructions with varying operand values to the execution pipeline while saving considerable cost in code size.

A given one instance of push instruction generated from this stored instruction code repeat 15 dbl push AC0 in the code memory is thus repeated in actual operation by being replicated into multiple issued instructions supplied into the pipeline for execution. The repeat instruction provides the number 15 to program the range of counting for register RPTC. The dbl push instruction has an associated operand AC0 that is used together with the varying counter value of RPTC to vary the operand of instruction dbl push over its desired operand value range AC15 . . . AC0.

In some processors have many register files that are to be saved or restored when context switching is requested. And the code size that is necessary for saving or restoring those registers gets bigger as the number of registers increases and a processor architecture gets more extensive. show an embodiment that can forestall this code size increase and has future expandability.

The processor has an instruction to store register content to top of stack PSH and load register from top of stack POP . And the processor has an instruction that repeats next instruction N 1 times RPT . At the repeat RPTC dedicated register for single repeat is initialized by N and decrements once for each instruction execution in the repeat sequence.

The concept is here introduced of Register Space which contains some set of the CPU registers or all CPU registers regardless of its register group. Any CPU register is assigned its own Register ID RegID and mapped onto the Register Space.

Also introduced are remarkable PSH and POP instructions that can take the all CPU registers as their source or destination field PSH RegID POP RegID . And when that is repeated the source or destination RegID field of that instruction is modified at instruction decode phase by adding or subtracting the value of RPTC. In an example of the repeat process and structure the syntax

In a detailed repeating instruction circuitry embodiment is responsive to both the repeat instruction RPT and repeated instruction PSH or POP for performing this remarkable operational process and may be compared with the circuitry of . For conciseness the description build on the description of corresponding parts that have already been described in connection with . In an electronic circuit has a bias value generator circuit and a RegisterID Generation Logic . RegisterID Generation Logic includes an Adder having output lines coupled to a first input of a mux and also includes a Subtracter analogously having output lines coupled to a second input of the mux . Mux has selector controls that are responsive to uOPcodes of instructions like Push and Pop or Load and Store etc that are the inverse of each other.

In Repeat Counter RPTC lines are extended as lines to respective first inputs of Adder and Subtracter . Also the Operand output lines from Instruction Decoder are extended as lines and to respective second inputs of Adder and Subtracter . In this way Adder delivers the desired sum on line so that PSH RegID actually works as PSH RegID plus RPTC value. Moreover Subtracter delivers the desired difference on line so that POP RegID actually works as POP RegID minus RPTC value. If uOPcode represents a Push on a selector control lines then the mux couples the output of Adder as a Source Identification SrcID value to the output of mux coupled to first input lines of a mux . If uOPcode represents a Pop on selector control lines then the mux couples the output of Subtracter as a Destination Identification DstID value to the output of mux coupled to first input lines of mux . Mux also has second input lines that extend from Operand lines . Both Source Identification SrcID value and Destination Identification DstID value are names for Register ID RegID Operand values used in different ways later in a pipeline.

In Repeat counter RPTC is coupled to decrementor and to muxed adder subtracter so that the bias value in RPTC and the Operand value delivered to Instruction Pipe Register are varied jointly. The varying Operand value is provided by the hardware of in response to the repeated instruction that itself has the Operand. The Operand value provided by the hardware of is reversibly varied in a direction depending on whether the repeated instruction performs save or restore. The Operand value is varied as a function of the varying bias value represented in register RPTC . The Operand value is varied in an operand value range equal to the repeat number n originally stored in register RPTC . No translator or translation of any macro instruction to a micro instruction is necessary to obtain the repeated instruction with its varying operand values. If the Repeat instruction is not listed with the repeated instruction then the repeated instruction executes once with the Operand value that comes with the repeated instruction itself. That is if the Repeat instruction is absent the repeated instruction is simply issued with the Operand once and not varying.

Mux has a selector control responsive so that if the repeated instruction opcode uOPcode is either Push OR Pop then mux couples mux via first input lines to an output of mux coupled to Instruction pipe register . In this way Instruction pipe register receives either a Source Identification SrcID value if the instruction is a Push or receives a Destination Identification DstID value if the instruction is a Pop. If the instruction is neither a Push nor a Pop nor any other instruction improved by the teachings herein to which the mux output is relevant then the selector controls for mux perform default selection and couple the Operand input through mux to the Instruction pipe register as if the rest of the RegisterID Generation Logic were absent.

Also in a Computed Single Repeat block is responsive to lines from Instruction Decoder to configure a Register CSR with a Computed Single Repeat value. This CSR value is coupled to a third input of mux . The selector controls of mux are augmented so that when a repeat instruction calling indirectly for the use of whatever value has previously been entered in the register CSR is to be used as the repeat n CSR then the mux couples CSR via third input to the Repeat Counter RPTC .

Further in clock control for the Repeat Counter RPTC and for decrementor is explicitly provided by an AND gate . Notice that decrementor is one example of a count changing circuit that establishes the direction of counting as down counting. AND gate has a first input for clock CLK and a second input for gating the clock in accordance with a stall signal ISTALL DEC. RPTC is part of the bias value generator circuit that has AND gate and its second input for the stall signal. The circuit is responsive to the stall signal when active at the stall signal input to supply the bias value currently reached in counter register RPTC without further varying the bias value while the stall signal is active. The stall signal ISTALL DEC is activated for instance when a context switch is needed in the midst of execution of a multiple push or multiple Pop instruction. A context switch may be applied for instance when a higher priority application or interrupt is effectuated. AND gate and stall signal ISTALL DEC are used to respond to any instance of pipeline stall in which the counter RPTC is to be stalled as well. Halting the processor for power management or other purposes is also facilitated by AND gate and stall signal ISTALL DEC.

Another AND gate further controls clock and ends decrementing by decrementor . AND gate and operates so that if any of the following conditions occur decrementor operation is suspended or terminated 1 Not Zero detector detects that Repeat Counter RPTC value has reached zero 2 a processor Break signal is active 3 active state of a low active signal INWHILE generated elsewhere in the processor in response to duration of a predetermined condition in a status register or otherwise.

where x is a predetermined bit field that depends on implementation and represents the particular register.

The above set of instructions execute the instruction PSH AR0 differently each time for 16 times and produce a succession of sixteen PSH instructions. Here the operand RegID field of PSH AR0 is x0h. At the first iteration RPTC shows decimal number 15. Its RegID field of the instruction is modified as RegID RPTC generates RegID xFh where xFh is the hexadecimal RegID of AR15.

Then the example instructions RPT 15 PSH AR0 use the circuitry of in response to active PUSH line to generate the following 16 different instructions.

The stack operates as a Last In First Out LIFO memory so the operation is done in the reversed order. The operand RegID field is modified as RegID RPTC.

Then above set of instructions RPT 15 POP AR15 uses the circuitry of in response to active POP line to generate a series or succession of sixteen 16 different POP instructions with POP operand values varying in reverse AR0 AR15 compared to the varying operand values AR15 AR0 for Push. There is no need to change pre existing bus widths with these modified instructions unless it is desired to reduce context switching latency an increase data transfer rates generally using extended bus widths.

Stack size is defined by an allocation of adequate memory bytes for data memory bytes for program code and memory bytes for stack. Some embodiments e.g. repeat n dbl push pop AC0 desirably provide a compression of program code in the program memory compared to the amount of program memory bytes that would otherwise be used for an explicitly lengthy block of code such dbl push pop AC15 dbl push pop AC14 . . . dbl push pop AC0 . In some embodiments the repeat parameter n can be revised in a parameter memory referenced by the repeat instruction RPT and such revision inexpensively and effectively accommodates system upgrades.

In some other embodiments tabulated in TABLES 3 and 4 herein below the scope of the registers intended to be covered by a multi push or multi pop instruction is abstractly represented by mnemonics like ALL RLH or XR etc. instead of using a repeat number n. The decoding hardware in each hardware upgrade or generation of a processor automatically executes the tabulated instruction syntax to cover the scope of registers applicable to that generation of the processor.

The multiple push and multiple pop and other multiple instructions herein are applicable to data unit DU address unit AU memory spaces and to all other units and pipeline stages to which their advantages make them applicable.

A second input of mux receives the current contents of Instruction Register IR .. In an aspect of the circuit operation an active STOP enables AND gate to cause mux to select that second input instead of a subsequent fetched instruction from FIFO provided there is no interrupt request active on line INT. When mux selects second output in response to STOP it causes the current contents of Instruction Register IR .to be fed back into Instruction Register IR thereby effectively freezing the IR and stopping update thereof so that the multiple push pop instruction uOPcode can be repeatedly delivered clock cycle after clock cycle to the pipeline.

Further in the Single Repeat Active Flag SRAF is saved as part of the context along with the Program Counter PC value to form the return context or part thereof for use herein. The save is suitably made by a context saving circuit for example a stack including a stack input register . Context save is performed at interrupt or subroutine call or virtual machine context switch or otherwise by a push to stack input register . The register RETA of and in due course is subject to a context restoring read return or a return from interrupt RET INT instruction.

Context change logic pulses the stack for pushing and popping the stack in response to inputs such as Call Return and Interrupt Request as shown in . Accordingly not only is the original program address returned to the Program Counter PC but also the saved state of the Single Repeat Active Flag SRAF is returned on lines to the SRAF register. The Repeat Counter RPTC is also coupled to and saved onto the stack via stack input register and restored via RETA as part of the context so that if a multiple push pop instruction for instance were in progress when the context save occurred then the multiple push pop instruction benefits from the context restore and resumes from the point where it left off.

In this way the instruction circuit is operable over a time interval to repeatedly issue the repeated instruction with its Operand thus varied and the instruction circuit is interruptible prior to completion of the time interval to issue an interrupt instruction and further operable to subsequently resume from the interruption and complete the repeatedly issuing of the second instruction with the Operand varied in an operand value range determined as a function of the varying bias value.

Once a single repeat instruction is decoded the processor then freezes instruction register IR . for instance by holding the repeated instruction content in the IR . for multiple cycles. This freeze operation is symbolized by the feedback path from IR via line mux mux and back to IR. During this repeat process RPTC is decremented toward zero 0 . A logic gate performs an AND function represented by

When that logic function is True AND gate output active the circuit thereby determines if repeat is ongoing and should continue. The AND circuit supplies STOP to AND gate that controls multiplexer coupled after the instruction FIFO. The multiplexer selectively controls and delivers either a new instruction from IBQ or delivers a repeated instruction when that logic function is true to mux to feed the instruction register IR.

Now suppose an interrupt request is presented at mux . The processor desirably hangs up the repeat process in the sense of interrupting execution of the repeat process and saving its context for resumption later. The processor then serves the interrupt by coupling an interrupt related instruction from interrupt control circuit via mux to IR and executing the associated interrupt service routine ISR. Then when a return from interrupt is executed the processor restores the context of the repeat process and resumes the repeat process. It should be understood that some embodiments alternatively flush IBQ and load the ISR through IBQ . 

The interrupt request de freezes IR using mux . At the same time the interrupt request loads specific instruction s designated INTR into instruction register IR. Instruction s INTR saves a return context for the interrupt software then saves SRAF and PC to RETurn Address register RETA and invokes a branch to an interrupt service routine. INTR itself can include a multiple push as taught herein. 

At this point the value in register SRAF representing repeat active e.g. a one bit is packed into the return context. At the same time SRAF itself is cleared to prevent further decrementing of RPTC.

The interrupt service routine ends with a RET INT instruction with which SRAF is restored then the first instruction loaded into IR which is the very instruction that was repeated will be again repetitively processed until RPTC reaches 0 during CPU s executing the interrupt service routine SRAF is 0 thus RPTC is not decremented . If some instruction is repeated in the interrupt service routine then SRAF is set and the repeat instruction in the ISR loads the RPTC. A repeat multiple pop can be used to restore the context of the interrupted code as well.

In TABLE 3 the instructions perform a respective Push to Top Of Stack operation and have a word pointer mode and a byte pointer mode as alternative modes for instance. In the operations represented next XSP is the extended data stack pointer position and XSP is the stack space at the position to which pointer XSP points. HI and LO represent high and low words or the first and second halves of a long word.

When in the word pointer mode of PUSH some embodiments operate as shown in TABLE 3A see corresponding enumeration in the Syntax TABLE 3 above.

When in the byte pointer mode of PUSH the pointer value XSP is twice as large and the decrements are twice as large as in word mode. This is because a word is twice as large as a byte here. The corresponding operations on the same operands are as shown in TABLE 3B 

The instructions of TABLES 3 3A 3B perform various forms of a PUSH operation. Operand s such as a CPU register e.g. ALLx RLHx XRx or a data memory location addressed by Smem is moved to a data memory location addressed by XSP and XSSP . If the source is a member of ALLa e.g. includes RLHa XRa a memory store is performed that is the same as a Store instruction. For instruction 1 and 2 when it is used in the single repeat loop multiple CPU registers are pushed sequentially.

An instruction push regID when repeated works additively as pseudocode push regID RPTC in a repeat loop and uses adder of to provide source identification SrcID for push.

Some processor embodiments are dual issue as in and have a wide instruction register having a respective instruction slot and an instruction slot to hold two instructions that can be issued simultaneously. The multi push scheme is applicable for example if the instruction is in the instruction slot 1st Instruction in of a dual issue processor. During multi pop a generated register identification regID remains within the boundary between single word register and long word register. The multi pop instruction operates on single word registers or long word registers but not both in the same multi pop instruction in this example although hybrid instructions for different register lengths in the same instruction are also contemplated.

Different dual issue processor embodiments can utilize different embodiments of circuitry as regards the matter of entering the multi push or multi pop instruction into the wide instruction register and whether to enter it if another type of instruction occupies instruction slot . Multi push and multi pop instructions instruction 1 and 2 in this particular example are not used as the slot instruction in the single repeated instructions having a wide instruction register for plural instructions held in slots of the wide instruction register although alternative embodiments can be arranged to operate differently. Some embodiments replicate the circuitry of and integrate it with the pipeline structure so that multi Push and multi Pop are operable for each of two or more pipelines servicing one thread or plural threads concurrently.

For instruction type 7 when in the byte pointer mode operation is same as instruction 1 or 2. When stack configuration is 32 bit stack mode For instruction 1 2 3 4 5 and 6 same amount of decrement is applied to XSSP. For instruction 7 when in the byte pointer mode same amount of decrement 4 is applied to XSSP.

These instructions in TABLE 4 perform Pop from Top Of Stack operation in a single cycle and have a word pointer mode and a byte pointer mode analogous to such modes for the Push to Top of Stack operation of TABLE 3 but performing operations in reverse.

When in the word pointer mode of POP some Pop embodiments operate as shown in TABLE 4A. See corresponding enumerated operations in the Syntax TABLE 4 above.

The instruction types of TABLES 4 4A 4B perform a POP operation. A data memory location XSP addressed by pointer XSP or XSSP by XSSP is moved to a CPU register or data memory location addressed by Smem.

If the destination is a member of register group ALLa includes RLHa XRa then a register update is performed and is same as a Logical load copy instruction.

For instruction 1 and 2 when it is used in the single repeat loop multiple CPU registers are popped sequentially.

Syntax regID pop works subtractively as regID RPTC pop in the loop. Expressed in other symbolism an instruction pop regID when repeated works as pseudocode pop regID RPTC in a repeat loop and uses subtractor of to provide destination identification DstID for pop. A multiplexer Mux selects the output of adder or subtractor of depending on whether Push or Pop is involved as opcode in the repeat instruction. In a succeeding Mux is controlled by repeat active flag SRAF register to deliver an operand directly from the Decoder or to deliver the output of the adder subtractor mux to a following Instruction Pipe Register.

This multi pop instruction is applicable when the instruction is in the instruction slot . During multi pop generated register identification regID remains within the boundary between single word register and long word register. For instruction 7 when in the byte pointer mode operation is same as instruction 1 or 2. When stack configuration is 32 bit stack mode then for instruction 1 2 3 4 5 and 6 same amount of increment is applied to XSSP. And for instruction 7 when in the byte pointer mode a same amount of increment 4 is applied to XSSP.

In the multi push pop using some other register besides AC0 as base for repeating works just as well. For example 

Any register which is in sequential order in the ALLx register ID can be pushed or popped sequentially by single repeat. For example in an embodiment herein the repeat push instruction could be 

Then the order of push is push AC7 push AC6 push AC5 push AC4 . The corresponding repeat pop instruction is 

Even if the interrupt contains its own sequence like single repeat on push from AC0 the register index is generated from register ID in the instruction and the RPTC value. In this way the RPTC is saved on interrupt and that is sufficient information for restoring the repeat instruction at the point at which the repeat instruction was interrupted. For example let a repeat push instruction be 

Suppose Reg ID of AC0 is x00. Then RPTC value is added to regID of AC0 to generate register index with which to restore a point in the sequence after an interrupt and then resume pushes.

The assembler is suitably structured to check for repeat instructions that are incompatible with the hardware architecture of the processor and flags an error. For example suppose there are 16 accumulator registers in the hardware but the repeat instruction calls for a push pop relating to more accumulator registers than exist in the hardware.

These various embodiments of repeat instructions operating on the circuitry of make the next following instruction or two paralleled instructions on the next following line of the code listing just below the repeat instruction repeatedly do operand decrement and execute the number of times specified in the operand of the repeat instruction. The iteration count is taken from immediate value instruction 1 or from register CSR of . The next code listing line instruction single or parallel plural is repeated k16 or CSR 1 times value zero means one time repeating i.e. a sequential execution .

For the repeat instruction 1 and 2 of TABLE 5 in the decode phase of the pipeline of repeat counter RPTC is loaded with the iteration count and single repeat active flag SRAF is set and thus indicates that the repeating instruction circuit of is currently active. Then in the Execute2 X2 pipestage register CSR is loaded by post modification. In the case of TABLE 5 instructions 3 4 5 in the Execute2 X2 pipestage register CSR is loaded by post modification. In the case of instruction 5 of TABLE 5 a data address DAa is asserted by pipe stage AD2 using address unit AU ALU of pipe stage AD2 and memory at that data address is read by pipe stage ACI and fed to Execute1 X1 stage of the pipeline of and then in the Execute2 X2 pipestage register CSR is loaded by post modification. The single repeat active flag SRAF is set and repeat is active. RPTC is decremented as decode of the repeated instruction e.g. push pop is validated or continued using STOP.

In the repeated instruction indirectly accesses a repeat value by using CSR to load repeat register RPTC . Then a mux connects RPTC input to output from decrementor so that RPTC counts down from the CSR value wherein RPTC sequentially holds value after decremented value fed back from and supplied by decrementor via line and coupled by mux via output line to RPTC. An Interrupt can be serviced during repeating. Single repeat active flag SRAF is saved to the stack of along with the return address for PC then SRAF is cleared. Upon a return SRAF and the return address are recovered automatically.

In after first preserving an RPTC value and SRAF applicable to a calling routine user can program a repeat instruction for a subroutine via selector line to cause mux to couple an operand constant or immediate field from decoder on line to repeat counter RPTC . Before returning to the calling routine from the subroutine the earlier preserved RPTC value and SRAF are restored as in for use by the calling routine when it resumes.

Expanded Push Pop and Load Store instructions are now described using TABLE 5A which tabulates each of several types of repeated instructions that are repeated by application of any given repeat instruction of TABLE 5. Push Pop instructions and supporting hardware embodiments are expanded to support all CPU architecture registers including any exception registers that might exist in a given processor architecture. Also Load Store instructions LD ST that support all CPU architecture registers are added as embodiments to unify load store instructions for particular registers.

TABLES 6 and 7 respectively show an example sequence of context save and context restore for use in interrupt processing and return. The tabulated code saves a very substantial percentage of code storage space compared to register by register instructions pushing popping and results will vary depending on embodiment and application. The code sequence of TABLE 7 effectively undoes or reverses the operations of TABLE 6.

Notice that the assembler conveniently responds to register mnemonics in TABLES 6 and 7 and the repetition number n covers a set of registers over a contiguous set of pointer positions in Register Space. One example in TABLE 6 is repeat 3 dbl push RSA0 which pushes four registers REA1 REA0 RSA1 RSA0 in decreasing underlying numerical order in Register Space and completes the operation by pushing the register e.g. RSA0 that is explicitly specified in the repeat push instruction. The corresponding repeated pop in TABLE 7 is repeat 3 REA1 dbl pop which pops those four registers RSA0 RSA1 REA0 REA1 in increasing underlying numerical reverse order in Register Space completing the operation by popping the register e.g. REA1 that is explicitly specified in the repeat pop instruction.

A still more complicated operational example in TABLE 6 is given by the remarkably uncomplicated instructions repeat 24 push PDP . Instructions are decoded whereupon a whole panoply of 24 contiguous registers in Register Space are pushed in decreasing underlying numerical order in Register Space and operationally ending with register PDP. The panoply of registers includes sixteen sequentially numbered registers AC15.G AC14.G . . . AC0.G as well as BK47 . . . BKC circular buffer size register BOFC . . . BOF01 buffer offset and finally the PDP peripheral data page pointer that is literally specified in the repeat push syntax. Conversely the context restore repeat pop syntax is repeat 24 AC15.G pop .

In other words the repeat pop syntax uses the circuitry of to generate 24 different successive instructions for the pipeline to pop the whole panoply of 24 contiguous registers in increasing underlying numerical order in register space and operationally ending with register AC15.G. Thus some embodiments can do a repeat push pop on a mixture of different sets of successively numbered registers and miscellaneously named registers. In this way a considerable code preparation convenience and flexibility are provided as well as substantially saving code storage space.

In a particular processor and outside of the context save of TABLE 6 status registers ST0 55 ST1 55 ST2 and RETA with SRAF and PC are automatically saved. Certain other registers IIR BER BIOS IFRx IERx DBGIERx IVPx SP and SSP do not need to be saved in some embodiments.

Depending on various considerations and type of embodiment save restore operations on registers according to teachings herein may be performed using a set of different multiple repeat instructions as in TABLES 6 and 7 supported by the hardware of or otherwise or in one simple sequence defined by one multiple repeat instruction. Considerations that encourage the use of a set of different multiple repeat instructions are listed next.

1 If a machine context involves information stored in types of registers involving different register lengths e.g. a word 16 bit register and a longword 32 bit register. In a processor that has distinct instructions to support different register lengths a single word push then pop and a longword push then pop it is advisable to use different multiple repeat instructions to save and restore the machine context. Dynamic computing of the register identification RegID in Register Space using adder or subtracter is associated with a repeated push pop instruction operating on one length or type of register throughout the counting process in RPTC established by a given repeat n instruction. 2 If a machine context involves information stored in a subset of particular registers that are sparsely or not contiguously mapped among the RegIDs comprising Register Space then it may be more convenient to save restore the machine context by using different multiple repeat instructions to piecewise save restore only the particular registers. However some other embodiments can be prepared to store a contiguous set of registers that includes the subset of the particular registers and then to ignore some of the registers in the contiguous set in the restoring process. 3 In some embodiments some registers are seen twice reflecting a capability of the processor to access some registers or part of them. Thus one register can be seen twice with full form and with divided form. An example of such is address registers. In a consider an example of a 24 bits wide address register XAR0 which has different register names for the different forms and can be accessed in the full form or can be accessed partially. x refers to leading or trailing RegID bits.

Notice that Register Space in does not necessarily resemble either a Physical Space of a register nor a Memory Address Space of a physically regular structure like a memory. The selection circuits and of are suitably arranged in this example just above to respond to widely different RegID values in Register Space to access different parts of the same register. Conversely closely spaced RegID values in Register Space may access operationally distinct and physically quite separate structures on the processor semiconductor chip layout. 4 Some processor embodiments may have one or more RegIDs that are reserved in the sense that no corresponding actual register is implemented in the hardware of the processor. In such case the actual registers holding information representing a machine context are not contiguous in Register Space and different multiple repeat instructions are suitably used to save restore the actual registers.

Turning to a further consideration of TABLE 4 the instruction types 1 3 5 6 of TABLE 4 perform a multiple or single 16 bit word Pop from top of Stack and they move one two or multiple data memory locations addressed by XSP to the 16 bit destination operand. The destination operand may be 1 a 16 bit data memory operand Smem 2 an accumulator low part an accumulator high part an auxiliary register or a temporary register 3 any 16 bit CPU register having a register ID symbol within the defined Register Space and some registers may be excluded either in here late from the Register Space or at excluded from the instruction operations as desired. These instructions use a dedicated datapath independent of the Address Unit AU ALU and independent of the Data Unit DU operations to perform the specified instruction operation.

Instruction 1 performs a single 16 bit word pop from the top of the stack. The content of the 16 bit data memory location addressed by XSP is moved to the 16 bit data memory location Smem. XSP is incremented to address the following 16 bit word.

Instruction 2 performs two 16 bit word pops from the top of the stack. The content of the 16 bit data memory location addressed by XSP is moved to the 16 bit destination register RLHa. XSP is incremented to address the following 16 bit word. The content of the 16 bit data memory location addressed by XSP is moved to the 16 bit data memory location Smem. XSP is again incremented to address the next following 16 bit word.

Instruction 3 performs two 16 bit word pops from the top of the stack. The content of the 16 bit data memory location addressed by XSP is moved to the 16 bit destination register RLHa. XSP is incremented to address the following 16 bit word. The content of the 16 bit data memory location addressed by XSP is moved to the 16 bit destination register RLHb. XSP is again incremented to address the next following 16 bit word. Instruction 4 performs either a single 16 bit word pop from the top of the stack or multiple 16 bit pops from the top of the stack.

When executed out of an unconditional repeat single structure this instruction 3 performs a single 16 bit word pop from the top of the stack as follows. The content of the 16 bit data memory location addressed by XSP is moved to the 16 bit register ALLa. XSP is incremented to address the following 16 bit word. The user designates the 16 bit ALLa registers by using the valid register ID symbols register names . When accumulator high parts ACx.H are referenced as the destination operand the 16 bit data memory location addressed by XSP is loaded to bits of ACx. When accumulator low parts ACx.L are referenced as the destination operand the 16 bit data memory location addressed by XSP is loaded to bits of ACx. When XARx.H XSSP.H XSP.H XDP.H or ACx.G are referenced as the destination operand the eight lowest bits of the 16 bit data memory location addressed by XSP are loaded to the destination register. When peripheral data page register PDP is referenced as the destination operand the nine lowest bits of the 16 bit data memory location addressed by XSP are loaded to the destination register.

When Block Repeat Counter BRC1 is loaded with the content of a data memory location addressed by XSP the block repeat save register BRS1 is also loaded with the same value. Therefore when performing a CPU register context save with push instructions instructions are coded to save the BRS1 register to the stack before BRC1. At context restore with pop instructions the BRS1 register is restored after BRC1.

When executed inside an unconditional repeat single structure this instruction performs a sequence of pops from the top of the stack to a 16 bit ALLx register with the registerID of the popped register incrementing along the iterations of the single repeat structure.

Consider an example using the instruction in the repeat single structure below repeat NB REG TO POP 1 

The register ID regIDa of the selected 16 bit ALLa register references another 16 bit CPU register ALLb with a register ID regIDb equal to regIDa NB REG TO POP 1 . This reference is made by subtracter for pop subtraction. At the first iteration of the repeat single structure the following operations occur. ALLb register is popped from the top of the stack. XSP is incremented to address the following 16 bit word. At the next iteration the 16 bit register with the register ID regIDb 1 is popped XSP is again incremented to address the next following 16 bit word and so on until at the last iteration the 16 bit register ALLa is popped and XSP is again incremented to address the next following 16 bit word.

Note that a dual issue embodiment might not execute another instruction in parallel of this instruction when used in an unconditional repeat single structure. The set of registers popped by this multiple pop structure are of the same type 16 bit . Also note that when XSP is incremented to address the following 16 bit word this means that in word pointer mode XSP is incremented by 1 and in byte pointer mode XSP is incremented by 2. In byte pointer mode the software code is written to ensure that the Smem address and XSP are aligned on a multiple of two bytes. If not then the CPU generates a bus error in one example processor embodiment.

When stack configuration is 32 bit stack mode XSSP is incremented by the same amount as XSP. The registers modified by these instructions are updated in the execute2

pipeline phase X2 . The increment operations performed on XSP and XSSP in 32 bit stack mode are performed by the AU DAGEN S dedicated to the stack addressing management. XSP and XSSP registers are read in the address1 pipeline phase AD1 and are updated in the address2 pipeline phase AD2 . Note that there may be a latency between PDP SP SSP ARx BSAxx BKxx BRCx BRS1 and CSR write by these instructions and their subsequent read in the AD1 phase by the AU DAGENs or by the P unit loop control management.

Consider the following example syntax AC0.L AC1.L pop . The content of the memory location addressed by the data stack pointer XSP is copied to AC0 15 0 and the content of the memory location addressed by XSP 1 is copied to AC1 15 0 . The XSP register is incremented by 2. SP and SP 1 are unchanged.

Execution of the syntax AC8.H AR3 pop involves the following operations. The content of the memory location addressed by the data stack pointer XSP is copied to AC8 31 16 and the content of the memory location addressed by XSP 1 is copied to the location addressed by XAR3. The XSP is incremented by 2.

Instruction types 2 and 4 of TABLE 4 perform multiple or single 32 bit word pop from the top of stack. In TABLE 4B these instructions move one or multiple data memory locations addressed by XSP to the 32 bit destination operand. The destination operand may be a 32 bit data memory operand dbl Smem or any 32 bit CPU register having a register ID symbol. These instructions use a dedicated datapath independent of the AU ALU and the DU operators to perform the operation.

Instruction 4 of TABLE 4 performs a single 32 bit word pop from the top of the stack. The content of the 16 bit data memory location addressed by XSP is moved to the higher 16 bits of the 32 bit data memory operand dbl Smem . XSP is incremented to address the following 16 bit word. The content of the 16 bit data memory location addressed by XSP is moved to the lower 16 bits of the 32 bit data memory operand dbl Smem . XSP is again incremented to address the next following 16 bit word.

Instruction 2 of TABLE 4 performs either a single 32 bit word pop from the top of the stack or multiple 32 bit pops from the top of the stack. When executed out of an unconditional repeat single structure this instruction 2 performs a single 32 bit word pop from the top of the stack as follows. The content of the 16 bit data memory location addressed by XSP is moved to the higher 16 bits of the 32 bit register ALLa. XSP is incremented to address the following 16 bit word. The content of the 16 bit data memory location addressed by XSP is moved to the lower 16 bits of the 32 bit register ALLa. XSP is incremented to address the following 16 bit word. The user designates the 32 bit ALLa registers by using valid register ID symbols.

When accumulators ACx are referenced as the destination operand the 32 bit words popped from the stack as described previously are loaded to bits of ACx. When a particular width register XARx XSSP XSP XDP RSAx or REAx is referenced as the destination operand the corresponding part of the width of the 32 bit word popped from the stack is loaded to the destination register.

When RETA register is referenced as the destination operand the 32 bit word popped from the stack is loaded to the width of RETA register content the return address of the calling subroutine and the balance of the content to a CFCT register having active control flow execution context flags of the calling subroutine.

When executed inside an unconditional repeat single structure this instruction 2 performs a sequence of pops from the top of the stack to a 32 bit ALLx register with the registerID of the popped register incrementing along the iterations of the single repeat structure.

Consider a process example using the following instruction in a repeat single structure repeat NB REG TO POP 1 

The register ID RegIDa of the selected 32 bit ALLa register references another 32 bit CPU register ALLb with a register ID regIDb equal to RegIDa NB REG TO POP 1 . At the first iteration of the repeat single structure the ALLb register is popped from the top of the stack. XSP is incremented to address the following 32 bit word. At the next iteration the 32 bit register with the register ID RegIDb 1 is popped and XSP is again incremented to address the next following 32 bit word and so on. At the last iteration the 32 bit register ALLa is popped and XSP is again incremented to address the next following 32 bit word. Note that a dual issue embodiment might not execute another instruction in parallel with this instruction when used in an unconditional repeat single structure. The set of registers popped by this multiple pop structure are of the same type 32 bit . Also note that when XSP is incremented to address the following 16 bit word this means the following In word pointer mode XSP is incremented by 1. In byte pointer mode XSP is incremented by 2. In byte pointer mode ensure the dbl Smem address is aligned on a multiple of four bytes. If not then the CPU generates a bus error. Similarly the code is written to ensure that XSP is aligned on a multiple of two bytes. If not then the CPU generates a bus error. When the stack configuration is 32 bit stack mode XSSP is incremented by the same amount as XSP.

For instruction 4 of TABLE 4 in word pointer mode when dbl Smem is at an even address the two 16 bit values popped from the stack are stored in memory in the same order as they are stored at memory location dbl Smem . When dbl Smem is at an odd address the two 16 bit values popped from the stack are stored in the reverse order of the one at memory location dbl Smem . Regarding pipeline operations the registers modified by these instructions are updated in the execute2 pipeline phase X2 . The increment operations performed on XSP and XSSP in 32 bit stack mode are performed by the AU DAGEN S dedicated to the stack addressing management. The XSP and XSSP registers are read in the address1 pipeline phase AD1 and are updated in the address2 pipeline phase AD2 . Note that a latency may exist between XDP XSP XSSP and XARx write by these instructions and their subsequent read in the AD1 phase by the AU DAGENs or by the P unit loop control management. When executing a block repeat loop registers RSAx and REAx are not modified by these instructions 4 and 2.

Consider this example syntax dbl AR2 pop . The content of the memory location addressed by the data stack pointer XSP is stored at the address pointed to by XAR2. If the address pointed to by XAR2 is even the content of the memory location addressed by

XSP 1 is stored at the address pointed to by XAR2 1. If the address pointed to by XAR2 is odd the content of the memory location addressed by XSP 1 is stored at the address pointed to by XAR2 1. The XSP register is incremented by 2. XAR2 is incremented by 2. When AR 0 15 is used with dbl XAR 0 15 is incremented by 2.

Regarding the syntax AC2 dbl pop the content of the memory location addressed by the data stack pointer XSP is copied to AC2 31 16 . The content of the memory location addressed by XSP 1 is copied to AC2 15 0 . The XSP register is incremented by 2.

Register Space is independent from the other spaces in the processor so as to permit easily expanding the number of registers in the future without losing upward compatibility. A repeated instruction is generated dynamically in every instruction decode stage. A new Instruction is dynamically generated at each time by just using and referring to the base instruction being repeated and to the repeat counter RPTC. Real estate is conserved in some embodiments as shown. Some embodiments use a state machine to perform the dynamically repeated multi cycle instruction.

Some other embodiments repeatedly issue the same instruction down the pipe and then vary its effect at the point somewhere down in the pipe where Source ID SID is used by Source selection block in and where Destination ID DST is utilized by Destination selection block in .

Some of the embodiments remarkably provide compatibility with interrupts asserted during the repeat process. An additional register is unnecessary here to save instruction state of the repeated instruction. Since instruction is generating a dynamically repeated version at each time this sequence is interruptible without an additional register.

Some of the embodiments can provide any one or more of the following desirable features and or other desirable features smaller code size easily expandable number of registers in processor upgrades unnecessary to assign new instruction opcode as number of registers is expanded unnecessary to introduce new CPU register unnecessary to provide new mode bit or status bit interrupt response time remains undiminished. Dynamic instruction modification at decode stage is also applied in some embodiments.

In some embodiments the code size reduction saves more real estate than the adder subtracter mux and selector circuitry of involve. In some other embodiments the convenience and increased economic efficiency of upgrading software from one processor generation to another justify the hardware improvements regardless of a little amount of real estate used. Multiple repeat pushing eight registers is believed to save 11 code bytes 2 8 regs. 3 2 11 where 2 8 represents conventional code space and 3 2 represents repeat multiple push code space. Multiple repeat pushing 16 registers is believed to save 27 code bytes 2 16 regs. 3 2 27 . Four multiple repeat 8 register pushes are believed to save 4 11 44 code bytes. Thus there is no statically predetermined amount of code bytes saving and generally the Savings are believed to increase according to the equation

In a push pop instruction goes through a DSP processor pipeline and is processed and activates DSP components. See also a push instruction in pipeline of and a pop instruction in pipeline of . Description suitably starts with an instruction register IR into which a processor instruction is loaded. An instruction is a specific bit pattern disclosed as machine language and sometimes called binary code. For example a binary code 0x0e 0x30 can represent a push to data register zero as symbolized by push DR0 .

A decoder analyzes the instruction s and interprets each one into an internal expression or machine language that is implementation dependent. The decoder also activates a data address generator DAgen when desired. The decoder activates the data address generator in the case of a push pop using the stack pointer SP to produce a write to read from memory operation.

For address generation the register file is read in Address1 stage then processed into effective address in Addr2 stage which is then sent off the CPU to memory for a read operation operand or pipelined to a later stage for a write operation operand. In one example a so called memory operand pipeline is used wherein memory access is intimately closely or tightly combined into the processor pipeline.

Following such memory read request issuance when MPU pipelines an instruction to Execute stage the MPU activates a math operating unit named DU data unit for some sort of computing. The DU has operational units ALU or MAC inside which the units take operand s from memory s and from registers and compute as the instruction specifies e.g. add compare or multiply .

Here a push instruction acts as a store to memory instruction for which the selected register is read in Execute1 stage then finally passed to the memory interface to be stored coupling with a corresponding address. A pop instruction acts as a load from memory for which no computation is performed and the value from memory which was once pushed to the stack is retrieved. A stack is a specific region in the memory pointed to by SP stack pointer register. The stack is provided to preserve the MPU register contents temporarily and then is retrieved by writing back to the destination register.

Some embodiments provide a remarkable operation that dynamically produces the source destination register for a push pop instruction under single repeat. The register value is embedded in the instruction as immediate constant which is intentionally biased with RPTC single repeat count register.

Instruction pipe register of refers to either or both the register for the first stage AD1 of Main pipe or Address pipe of B as applicable to the instruction. In B the circuitry of is located just after Decoder and just before Main pipe pipe stage ADI. are a close up view near the Decoder block in B. show circuitry occupying only a small area to add extra processing functionality after and associated with Instruction Decoder whereupon the results are piped down the pipeline. The Source identification SrciD from adder or destination identification DstiD from subtracter in is piped down the Main pipe in B.

Sourcing and reading of the register file registers is performed using the source destination selection block in B. For source selection a multiplexer tree inside the selection block has Source identification SrcID for selection signal. For destination selections Destination identification DstID is fully decoded and used for the enable signal on the clock line to the particular destination target register with which to update that target register.

As shown in an the processor has a memory having memory locations accessible by memory addresses and an address pipeline responsive to the repeated instruction PSH and varying values of the operand to assert write addresses PUSH ADR to the memory as a function of the varying values. The processor further has a register file and source selector circuitry coupled to pipeline and responsive to the repeated instruction PSH with the varying values of the operand to access registers in the register file . The register s thus accessed in the register file are piped down a Store Pipeline having store pipe stages EX2 WR1 WR2 whereupon a write of PUSH DATA is completed to the memory locations in the memory corresponding to the asserted write addresses from the address pipeline .

As further shown in the processor address pipeline is also responsive to the repeated instruction POP and varying values of the operand to assert read addresses to the memory as a function of the varying values to read information from the memory locations addressed by the asserted read addresses. Register file and destination selector circuitry of the processor are coupled to pipeline and responsive to the repeated instruction POP with the varying values of the operand to load registers in the register file with the information read from the memory locations.

For context changing purposes register file in this description suitably also is meant in addition to those registers in a physically regular register file structure to stand for all the registers which are used to specify a processor context even though some of these registers may be operationally non analogous and physically quite separate or different structures on the chip real estate. The use of register identification RegID values in Register Space provides a useful and efficient way of interfacing a somewhat miscellaneous set of structurally less regular storage elements that define a context in some processor embodiments with the more organized and structurally regular circuitry of a stack or memory.

The architecture of also makes remarkably efficient use of the processor pipeline s . In the main pipeline has plural pipe stages after the instruction decode stage so that a Beginning Middle and End of main pipeline are distinct from one another. The Beginning of main pipeline is in the decode and first Address pipe stage. The Middle of main pipeline lies between the pipe stage RD and a first Execute pipe stage EX1. The End of main pipeline is situated at the writeback WR portion. In both Push and Pop the repeat multiple instruction hardware of is situated in the decode stage at the Beginning or top of the pipelines and so that the hardware can immediately deliver instruction s without any pipeline bubble. Notice also that Stack Pointer SP is very high up or early in the address pipeline and the Address Generator can increment off Stack Pointer SP as a base address or otherwise off an appropriately provided base address to access Memory Address Space. Stack Pointer SP is a memory starting address from which an Address Generator increments or provides a memory base address to which the Address Generator adds the incrementing Operand as an offset from the Push Pop circuitry of B as a function of RPTC.

The address generator if used to sum the Operand as an offset to a base address may deliver a succession of memory address values in non contiguous portions of Memory Address Space in response to a succession of a repeat multiple instructions that operate through the hardware of to deliver operand values over noncontiguous operand value ranges. Delivering memory address values in non contiguous portions of Memory Address Space is acceptable and desirable when the mapping of the context registers in Memory Address Space is intended to be a straightforward translation of the mapping of the context registers in Register Space see middle column of registers in . On the other hand when very compact storage of some or all of the context registers in Memory Address Space is desired then the Address Generator is operated to increment or decrement continuously to store the registers on Push and conversely decrements or increments on Pop in a continuous and contiguous manner instead of summing a base address with the Operand values.

In the middle column shows registers arrayed in non contiguous operand value ranges in Register Space while the right column shows registers selected by repeat multiple instructions operating on Register Space stored in a more compact manner in contiguous address ranges in Memory Address Space in the right column in . Moreover the ordering of stored register contents in Memory Address Space can be reversed compared to their ordering in Register Space as indicated by crossed arrows .

A simple example of contiguous ranges of numbers is that a range 1 5 decimal is noncontiguous with a range 8 12. By contrast a range 8 12 is contiguous with a range 13 14. Non contiguous ranges are such that when range end and start values are subtracted from each other the differences are all at least two 2 . Contiguous ranges have at least one difference of range end and start values that exactly equals one 1 .

A refinement of the contiguousness concept is that byte ranges are bytewise contiguous when the foregoing numerical subtraction definition pertains at the byte level such as when all bytes in a series of 32 bit registers have contents full. Word ranges are wordwise contiguous when the foregoing numerical subtraction definition pertains at the word level even though the word may have only one byte of content. Longword ranges are longword wise contiguous when the foregoing numerical subtraction definition pertains at the longword level even though the longword may be missing one two or three bytes of content as illustrated in . Note that is not limiting since some embodiments of structure and process operate to completely pack full the register contents into memory and Memory Address Space on a bytewise contiguous basis for instance. If the context does not indicate otherwise use of the word contiguous without further qualification indicates that the content is at least contiguous at 32 bit width level.

In the Middle area of main pipeline a first Push PSH in a series of pushes makes a Source selection using Source selector and the actual source register in Register File is just updated by execution of one or more previous instructions farther down in the Execute pipestage s . The selected part of Register File is muxed out and piped down to the End area of the main pipeline . Concurrently the address from Address Generator of address pipeline is piped down correspondingly to the End area of address pipeline before assertion as a memory address PUSH ADDR for the Push to access memory and write the data PUSH DATA from the End area of main pipeline to memory . In this way the data PUSH DATA is fully updated with the any pertinent results of execution of the previous instruction s that were farther down in the Execute pipestage s of main pipeline when the Source selector was operated as part of the overall operation of Push.

By contrast the last POP in a series of pops makes a Destination selection using Destination selector also in the Middle area of main pipeline . Destination selector loads Register File in the Middle of the pipeline . A new non Pop instruction is likely to be right behind the last POP in the pipeline. In this way the new non Pop instruction is able to immediately use the restored contents of Register File in the Execute stages thereafter. Thus Pop operates conversely to Push in the sense that restore is the opposite of save but the location and timing of the Pop operation in the pipeline is not simply a reverse operation in the same place. In Pop performs the memory read access in a manner focused on the Middle area of the address pipeline and the Destination selection and restore write to Register File likewise is focused on the Middle area of the main pipeline . Push in makes the Source selection in Register File in a manner focused on the Middle area of the main pipeline but performs the memory write access for Push in a manner focused on the End area of both the main pipeline and the End area of the address pipeline .

From a pipeline architecture viewpoint RegisterID generation logic of and arithmetic unit with mux of is situated just after Instruction Decoder in a decode pipe stage prior to main pipeline and address pipeline . This location for the RegisterID generation logic associates the altered repeated instruction Operand with the same pipe stage Decode as the pipe stage holding the counter of RPTC that generates the RPTC value of which a given Operand value RegID is a function. This assures that the pipeline operations in every pipe stage thereafter are properly coordinated not only for regular operation of Push Pop but also are coordinated for operations on interrupt save restore and context switch. RegisterID generation logic provides one hardware circuit delivering operand values for use by both the main pipeline and the address pipeline . In this way for instance main pipeline utilizes varying RegID values from RegisterID generation logic while address pipeline can offset the memory base address with the same varying RegID values from the sameRegisterID generation logic . The two pipelines and cooperate elegantly. Provision of one instance of RegisterID generation logic in this example to serve both pipelines conserves chip real estate.

The selection circuits and of even respond to widely different RegID values in Register Space to access different parts of the same register as noted in an example of a register XAR0 earlier hereinabove and as shown in . Conversely closely spaced RegID values in Register Space may access operationally distinct and physically quite separate structures on the processor semiconductor chip layout in Physical Space. The address pipeline uses a succession of RegID values in the operand value range in resulting from the operation of the bias value generating circuitry e.g. counting operation in to access a succession of memory locations in memory while the selection circuits and coupled to Main pipe are concurrently using the same succession of RegID values to access the somewhat miscellaneous set of structurally and or functionally more regular and less regular longer width and shorter width storage elements that define a context in some processor embodiments and thereby effectuate transfers of information therebetween. In some embodiments use a stack organization with a stack pointer SP so that asserting non contiguous successive RegIDs and Register Space delivers a contiguous succession of information into memory space from the miscellaneous registers and storage elements in the processor.

The selection circuits and have some circuitry for decoding the operand RegID onto access signal lines that enable the access and that physically realize and correspond to the organization of Register Space i.e. the correspondences of various RegID values in Register Space to each respective actual register or storage element in the processor hardware that is needed to define the context or is otherwise pertinent to a given transfer of information that is to be effectuated. The organization of Register Space and the circuitry of the selection circuits and that implement Register Space are suitably arranged or designed by the skilled worker in accordance with the teachings herein so that the amount of context save restore software an example of which is shown in TABLES 6 and 7 operates on few enough sets of contiguous RegID values so that the number of operand value ranges indexed i not n in the Savings equation elsewhere herein is small enough to be convenient for purposes of a given system and its foreseeable upgrades. A nonvolatile memory such as a flash memory in the system or boot flash space in the processor core or other suitably located nonvolatile memory is programmed with a plurality of repeat and repeated instructions as sequential instructions defining plural operand value ranges indexed i that can be non contiguous for specifying operations of an instruction operand value generating circuit.

A first example of an instruction operand value generating circuit is the combination of bias value generator circuit with RegisterID generation logic of . A second example of an instruction operand value generating circuit is the alternative corresponding circuitry of . The instruction operand value generating circuit is operable in response to a plurality of sequential instructions defining plural non contiguous operand value ranges to generate a succession of values in plural non contiguous operand value ranges.

In some embodiments as illustrated in the address pipeline is responsive to the succession of values in the plural non contiguous operand value ranges from the instruction operand value generating circuit to access a succession of memory locations in contiguous memory address spaces. Indeed the address pipeline is operable when the instruction operand value generating circuit generates in non contiguous operand value ranges to access a succession of memory locations in contiguous memory address spaces either in response to the succession of operand values or simply from repeated clocking of the repeated instruction Push Pop etc. itself through the pipeline.

Some embodiments also utilize register access by RegID asserted by multiple repeat of the repeated instruction in plural non contiguous operand value ranges for information transfer between each accessed register and a hardware stack. The hardware stack automatically responds to each Push and Pop without need of address generation to push and pop the hardware stack.

Parallelizing execution of the Repeat instruction is also contemplated by using plural ported memory for memory in some embodiments performing wide accesses to register file and using the address pipeline or associated circuitry to do concurrent accesses to the plural ports of the plural ported memories. Source selection circuit and Destination selection circuit are hardwired or configured to respond to each RegID identifying a given shorter or wider width portion of a context register like AR0H and AR0 or the entire shorter or wider width context register itself like XAR0 and registers to apply appropriate byte enable s to access the corresponding portion of that register or the entire register. The circuitry accommodates various types of memory caching and caches with cache line access. For instance access to a memory cache in some embodiments transfers an entire wide cache line of several words between cache and a cache line wide register for quick access and the appropriate byte enables are applied at both the context register and the cache access bus and or the cache line wide register to transfer one or more bytes therebetween.

This approach also confers flexibility to software to retrieve context in pieces if desired and execute some application code right away that may only depend on part of the context information. Thus some application code may be executed in between the execution of pieces of software that retrieve parts of a given context for effectively faster context switches or returns.

In multiple repeat logic in the decode stage in automatically generates a sequence of RegID values in Register Space. Source selection circuit and Destination selection circuit automatically map the RegID values in Register Space to access Physical Space as it is called herein. Physical Space is the actual layout of the context registers and their shorter and wider widths on the integrated circuit. Address pipeline is responsive to the decode stage to automatically map the RegID values in Register Space to corresponding values in Memory Address Space for establishing a software stack or other data structure. In this way Physical Space is mapped and translated to Memory Address Space.

Memory Address Space usefully accommodates information from registers that describes each of several contexts wherein respective context saves of information in context registers specified by the RegID values in Register Space are performed as the processor goes through operations in different contexts and switches between contexts. In some embodiments Register Space is independent of and separate from Memory Address Space. For example when Source selection and Destination selection are not directly accessible by asserting a memory address on a memory address bus then Register Space is independent of and separate from Memory Address Space. Security of Register Space is enhanced and pipeline operation does not involve accesses to Register Space by memory addresses.

The circuitry of together with the pipeline arrangement of decouples the Register Space and the Memory Address Space while providing save restore between them in a very flexible manner. The save or restore order of RegID values does not need to be linear in Memory Address Space and can be flexibly established in simple and piecewise linear more complicated ways. For instance higher RegID values can precede lower RegID values in a save to increasingly higher memory address values and vice versa. The instructions in the save restore sequences can be repeat instructions that increase memory address values continually while piecewise first increasing over an operand value range of RegID and then decreasing over some noncontiguous operand value range of Reg ID.

Register Space can be separate and independent from Memory Address Space or may partially overlap Memory Address Space. Register Space pertains to all registers which the skilled worker designers to include and in some embodiments suitably includes all context defining registers of a processor.

 ALLa herein means a register belongs in ALLx register group see TABLE 2 Glossary. The instruction format dbl push ALLa is decoded to deliver a register identification RegID value as operand on line of that specifies a register at one end of the range of Register Space pointer values for the ALLx register group. In one type of embodiment the specified register is the one at the end of the range at which the last repeated push or last repeated pop is performed in the repeat sequence. The instruction format dbl push ALLa is suitably implemented by the same circuitry that supports

 ALLa is also used as a generalized expression of a register in processor assembly language similar to expressing a concept in algebra to which concrete numbers are applied later. ALLa and ALLb are analogous to pronouns of a language. ALLa can be used to indicate the register which is literally named in a given instruction and ALLb can be used to indicate the register which is actually indicated in any given instance of successive generation of different instances of a repeated instruction.

The same encoding is assigned for ALLa and register identification RegID. Alphabetic ALLa is encoded at assembly time. ALLx when it is first register operand in the instruction is written ALLa. ALLx when it is second register operand in the instruction is written ALLb.

In the generalized use herein a push instruction is represented on documents or in generic form as push ALLa and then used in the computer program code with actual register selection dbl push AC0 push to stack accumulator0 32 bit value or

Data access is suitably any appropriate width and in one example the register file RF registers are accessed register by register when reading from or writing to memory.

RPT instruction followed by PUSH POP instruction results in a multi cycle instruction that does not pre establish or limit operation to a fixed range of registers. Instead a number N of registers to save and identification of which registers to save are both user defined.

In some embodiments provide hardware support for exactly symmetrical syntax for push and pop. Assembler encodes the operand field as the same register designation e.g. AC0 for both push and pop and hardware of performs the multiple push in decreasing order and a multiple pop in increasing order. For example when saving n accumulator registers to the stack the following code is used 

The stack operates as a Last In First Out LIFO memory so the operation is done in the reverse order. The operand RegID field is modified as RegID plus RPTC for both Push and Pop.

In electronic circuit has bias value generator circuitry revised relative to circuitry of by replacing decrementor with a decrementor incrementor circuit replacing Non Zero detector with a Not Equal detector or comparator and replacing muxes with muxes and . A constant register CONST holds a different constant for use by the Not Equal detector depending on whether the instruction is a Push or Pop or Store or Load . The Logic of is changed to alternatively vary the operand value as a function of the varying bias value from RPTC by omitting subtracter and changing an adder to be an arithmetic element .

In Mux has selector controls that are responsive to uOPcodes of instructions like Push and Pop or Load and Store etc. that are the inverse of each other. If the instruction is Push then a hardwired zero field is coupled via a mux from input to output and clocked into CONST register at the time when the Repeat n instruction is decoded. Concurrently mux on a second input delivers as the case may be the Repeat operand value from input or CSR value from input to output and then through a mux to initialize Repeat Counter with an initial counter value for Push. When the repeated instruction such as PSH AC0 is decoded decrementor incrementor circuit is activated for decrementing by uOPcode for Push and mux couples the output of decrementor incrementor circuit to the Repeat Counter RPTC . In this way downcounting by RPTC becomes operative.

Instruction Register IR .is frozen by the STOP signal from AND gate during the down counting. The down counting RPTC value is successively summed by arithmetic element with the Operand value for RegID e.g. of AC0 provided by Instruction Decoder on line . The output of arithmetic element operating as an adder is coupled by mux output to an operand portion of Instruction Pipe Register . Comparator detects when the RPTC value on line equals zero the value stored in CONST register for push. Then comparator disables decrementing by decrementor incrementor circuit and the repeated Push is complete.

Conversely in if the instruction is Pop then a hardwired zero field is coupled via a mux from input to output and then through a mux to initialize Repeat Counter for Pop at the time when the Repeat n instruction is decoded. Concurrently mux on its output delivers as the case may be the repeat operand value from input or CSR value from input to output which clocks into CONST register . When the repeated instruction such as POP AC0 is decoded decrementor incrementor circuit is activated for incrementing by uOPcode for Pop and mux couples the output of decrementor decrementor circuit to the Repeat Counter RPTC . In this way upcounting by RPTC becomes operative. Instruction Register IR .is frozen by the STOP signal from AND gate during the upcounting. The upcounting RPTC value is successively summed by arithmetic element operating as an adder with the Operand value for RegID e.g. of AC0 provided by Instruction Decoder on line . The output of arithmetic element is coupled by mux output to an operand portion of Instruction Pipe Register . Comparator detects when the RPTC value on line equals the value stored in CONST register for pop i.e. n repeat operand or CSR . Then comparator disables incrementing by decrementor incrementor circuit and the repeated Pop is complete.

Notice that for either Push or Pop decrementor incrementor circuit selectively establishes the direction of counting depending on the nature of the repeated instruction as Push or Pop Store or Load or otherwise. Also notice that for either Push or Pop comparator determines when register RPTC has reached an opposite end of the programmable range of bias values from which counting began.

As in the circuitry of includes Interrupt Unit coupling Interrupt Sources to enter a first instruction of an interrupt service routine via jam interrupt lines JAM INTR to Instruction Register IR and to enable the Instruction Decoder for decoding thereof.

In a block for Configuration Register and Control Circuits is used to configurably revise the operation of the circuitry of for any of the following types of syntax support. A Configuration Register in block can hold any of a plurality of configuration codes representing different structure embodiments and or method of operation embodiments of circuitry of or variations thereof and having concatenated code fields. For enhanced security the Configuration Register is loaded in a secure manner and protected by security protection hardware such as a secure state machine SSM. Various lines in are labeled for code 0010001 merely by way of example and not of limitation. For instance the circuit of is structured as a hardware embodiment having operation corresponding to code 0010000 in . Control Circuits in the block decode and couple first and second code fields so as to establish mux selector controls determine decrementing or incrementing and determine add or subtract functionality as specified in TABLES 8.1 and 8.2.

Scan controller is operable to probe debug and verify this circuitry along at least one scan path linking the following registers to the scan controller by serial scanning in and scanning out bits in register SRAF the Configuration Register in block the CSR register CONST register Instruction Pipe Register and register RPTC .

Examples of a set of configuration codes for a first code field are shown in TABLE 8.1 with xxx in the second code field 

Examples of a set of configuration codes for a second code field are shown in TABLE 8.2 with xxx in the first code field. The terminology uOPcode1 refers to a first operation that generates data or sets up a first transition of location of data such as PSH ST etc and uOPcode2 refers to a second reverse operation that restores things as they were before the application of uOPcode1 or reverses the first transition of location of data such as POP LD etc. The symbolism means an alphanumeric register name e.g. AR6 AC0 PDP etc. having a register identification RegID in Register Space. CONST refers to register value for comparison with RPTC for Not Equal detector . RPTC in this TABLE 8.2 refers to the initial value is supplied by mux output to register from which counting begins. Dec or Inc refers to mode of operation of decrementor incrementor . Add or Subtract refers to mode of operation of arithmetic element . In TABLE 8.2 a respective such list CONST RPTC Inc Dec Add Subtract is respectively provided underneath each corresponding uOPcode1 and uOPcode2.

A first form of reconfiguration changes the mode of operation of adder to provide a subtracting input mode for a line . Then for example when saving restoring n accumulator registers to the stack the following code is used 

Some further embodiments prepare an assembler macro like push AC15 AC0 and it is encoded as repeat push.

Some other further embodiments pack RPT 15 and PUSH ARx as one instruction symbol like MPUSH ARx for instance. In such embodiments a further code packing advantage is obtained by packing a repeat instruction and a push or pop instruction together.

Some other embodiments apply not only to the operand field but also to the opcode field of an instruction. Operations are suitably performed sequentially on one register and or memory space at a time or on plural registers and or memory spaces at a time. In such case consider the multiple repeat instruction

This multiple repeat instruction pushes AC0 and AC1 in a first push then AC2 and AC3 in a second push . . . and finally AC14 and AC15 in a last push. Besides pairs of registers of this example other numbers of registers can be concurrently repeat pushed popped.

Still further embodiments provide a useful instruction sequence by assigning a sequential sub opcode field for a given instruction. Repeat counter RPTC modifies the sub opcode field and perhaps operand field also of the given instructions and thereby realizes that instruction sequence. Some of these embodiments also have Repeat counter RPTC modify the operand field of the given instruction and thereby realizes a further type of instruction sequence.

A repeat instruction in yet further embodiments is applied to a block of instructions thereafter. For instance in such an embodiment with a block of just two instructions held in parallel in Instruction Registers IR1 and IR2 respectively for execution down a pair of superscalar pipes an example of the code is written

Each of the instructions in the block has the same repeat number n applicable to it so the Repeat Counter RPTC circuitry of or is straightforwardly applied. However because there are two pipes to handle parallel execution the circuitry of is revised to replicate circuitry as revised circuitry pair . and . and Instruction Pipe Register is revised as a register pair . and . to serve the respective superscalar pipes. The hardware embodiment s represented by are analogously revised. In operation the Push instruction pair performs the context save in a manner that intersperses different sequences first sequence based on AC0 second sequence based on PDP of registers in Register Space in the pushes to memory . Thus the order of the saving of the registers to the memory is different from the order of saving that occurs using the code 

The order of the saving of the registers to the memory presents no difficulty for a multiple repeat Push operation like context save because the reverse operation of multiple repeat Pop performs context restore into the original register locations in Register Space.

Some embodiments have a multiple repeat instruction of any of the foregoing types that is made to be a conditional instruction that operates on a built in condition such as IF WHILE etc. involving status bits or status register bit fields for statuses such as carry less than zero equal to zero etc. The instruction evaluates a condition defined by its condition field and as long as the condition is true the repeat instruction is repeatedly executed. In the decode pipeline the SRAF and a While Repeat Active Flag WRAF are set active. At each repeat operation the condition defined in the condition field of the instruction is tested in an execute pipe stage and when the condition becomes false the repeat operation is stopped. RPTC shows how many iterations remained to be performed. In a pipeline structure wherein the condition is evaluated in an execute pipestage then when the condition tests false some of the succeeding iterations of that repeated instruction may already be in address generation or read pipestages. When the while repeat structure is exited reading the computed single repeat CSR content enables a determination of how many instructions have gone through the address generation phase of the pipeline. An unconditional single repeat instruction is used to rewind the pointer registers if a false condition has been met inside the while repeat structure. An interrupt can be serviced during conditional repeating. SRAF and WRAF are saved to the stack along with the returned address and then recovered upon the return.

Some embodiments have one or more types of macro instruction that includes multiple micro instructions one or more of which micro instructions includes a multiple repeat instruction.

Some other embodiments program the counter and the counter counts to some end of range value other than n or zero 0 . Both ends of the range are programmed by configuration of plural register values for start and end of the range in some embodiments.

Still other embodiments use some other function for value V besides an addition Op RPTC to vary the operand. For instance another contemplated function is a more complicated linear function wherein either or both of the operand Op and the counter value RPTC have multiplicative constants or coefficients associated with them according to the relationship Op RPTC.

In c 1 and c 1. Some other embodiments use other integer values for the constants cand c and this can accomplish a staggering of values in memory space or a rotation of values in one or more dimensions in memory space.

Some further embodiments use a nonlinear function. One simple example of a nonlinear function is a multiplicative product of the operand Op times the counter value RPTC according to the relationship Op RPTC.

Other further embodiments vary the values and cover the programmable range in some manner such as Op 213 . . . 0 or in a pseudorandom manner in the programmable range or otherwise.

Put another way the RPTC register in some embodiments is not used as a counter and instead holds successive values that are not all in a decrementing or incrementing order of counting. The successive values result from operation of any suitable circuit for generating them. Some embodiments do not wholly use the operand value range and or do not fill up or cover the programmable range with RPTC values. The phrase bias value generator circuit is expansively used herein to refer to all counting and non counting types of embodiments because both generate bias values with which to bias the operand. Thus many embodiments are contemplated.

In various embodiments of an integrated circuit improved as described herein are manufactured according to a suitable process of manufacturing process as illustrated in the flow of . Operations commence with a begin and prepare RTL netlist and place and route for processor circuitry having repeat multiple instructions and hardware to support them as taught elsewhere herein. The resulting design is verified in a step so that the architecture design actually implements the structures and operations taught herein. An evaluation step loops back to step if the design needs to be corrected otherwise operations proceed to a step to fabricate numerous integrated circuits including structures defining the processor circuitry herein on integrated circuit wafers using silicon silicon germanium SiGe gallium arsenide GaAs or other materials family. After wafer fabrication integrated circuits are tested in a step using wafer probe for actual electrical power up and verification of actual electrical operations as taught herein. For instance step suitably involves electrically testing the structures to verify that the instruction circuit is responsive to a first instruction such as a repeat instruction to program the range of the bias value generator circuit and that the bias value generator circuit supplies a varying bias value in the programmed range and that the instruction circuit is further responsive to a second instruction such as push pop load store etc. having an operand to repeatedly issue the second instruction with the operand varied in an operand value range determined as a function of the varying bias value. Also at this time and or after subsequent packaging scan controller performs serial scan in and scan out of bits for electrically testing the operation of the integrated circuits as described.

The results of scan test are evaluated at a step and if corrections are needed then operations loop back to step . Otherwise operations proceed to system integration step wherein one or more processor integrated circuits are stuffed onto printed wiring board s .

In a step a flash memory is programmed with system parameters boot configuration and data for configuration register for the circuitry of and with representations of repeat instructions and repeated instructions to accommodate sets of storage elements as in . For embodiments having a Configuration Register as in block of the system parameters suitably include information for the Configuration Register to establish the desired forms of repeat multiple instructions and their operations which the processor s and system are to support. The printed wiring board PWB is stuffed with the flash memory and the system is actually powered up.

A step tests the multiple push pop or other repeat multiple instructions for correct operation of the processor and in the system. An evaluation step determines whether the test results are all right and if not operations of a step adjust the parameters and loop back to step or back to step if need be. If the test results are all right operations proceed to a step to assemble telecommunications units or other products for sale and consumption whereupon an End is reached.

Various embodiments are used with one or more microprocessors each microprocessor having a pipeline is selected from the group consisting of 1 reduced instruction set computing RISC 2 digital signal processing DSP 3 complex instruction set computing CISC 4 superscalar 5 skewed pipelines 6 in order 7 out of order 8 very long instruction word VLIW 9 single instruction multiple data SIMD 10 multiple instruction multiple data MIMD 11 multiple core using any one or more of the foregoing and 12 microcontroller pipelines control peripherals and other micro control blocks using any one or more of the foregoing.

Various embodiments are implemented in any integrated circuit manufacturing process such as different types of CMOS complementary metal oxide semiconductor SOI silicon on insulator SiGe silicon germanium organic transistors and with various types of transistors such as single gate and multiple gate MUGFET field effect transistors and with single electron transistors and other structures. Photonic integrated circuit blocks components and interconnects are also suitably applied in various embodiments.

1A. The electronic circuit as claimed in claim wherein said bias value generator circuit has a counter register and a circuit for establishing the programmable range and coupled to said counter register.

1B. The electronic circuit as claimed in claim A wherein said circuit for establishing the programmable range includes a multiplexing circuit for selectively coupling an initial counter value to said counter register.

1C. The electronic circuit as claimed in claim wherein said instruction circuit is also responsive if an instance occurs wherein the second instruction is present but the first instruction is absent so that the second instruction is issued just once in such instance with said operand unchanged.

4A. The electronic circuit as claimed in claim wherein said bias value generator circuit includes a detector circuit operable to determine when the counter register has reached an opposite end of the programmable range.

11A. The processor claimed in claim wherein said pipeline is operable to execute a push instruction and said repeating instruction circuit is responsive to said repeat instruction and to the push instruction as said repeated instruction to deliver a succession of push instructions with varying operand values to said pipeline.

11B. The processor claimed in claim A wherein said pipeline is also operable to execute a pop instruction and said repeating instruction circuit is responsive to the pop instruction as another repeated instruction to deliver a succession of pop instructions to the pipeline with operand values varying in reverse compared to the varying operand values for the push instruction.

11C. The processor claimed in claim wherein said pipeline is operable to execute a store instruction and said repeating instruction circuit is responsive to said repeat instruction and to the store instruction as said repeated instruction to deliver a succession of store instructions with varying operand values to said pipeline.

11D. The processor claimed in claim C wherein said pipeline is also operable to execute a load instruction and said repeating instruction circuit is responsive to the load instruction as another repeated instruction to deliver a succession of load instructions to the pipeline with operand values varying in reverse compared to the varying operand values for the store instruction.

11E. The processor claimed in claim further comprising a repeat active register coupled to said instruction decoder and representing whether said repeating instruction circuit is currently active and the processor further comprising a context circuit for storing said repeat active register.

11F. The processor claimed in claim wherein said repeating instruction circuit includes a counter register and the processor further comprises a context circuit for storing said counter register.

11G. The processor claimed in claim further comprising a memory having memory locations accessible by memory addresses and an address pipeline responsive to the repeated instruction and varying values of said operand to assert write addresses to said memory as a function of the varying values and the processor further comprising a register file and source selector circuitry coupled to said first named pipeline and responsive to the repeated instruction with the varying values of said operand to access registers in said register file and write data to the memory locations in said memory corresponding to the asserted write addresses from said address pipeline.

18A. The electronic circuit claimed in claim further comprising a multiplexer circuit having a first input to receive said immediate constant and a second input to receive a repeat count and a count changing circuit operable to feed said repeat count to said second input of said multiplexer said multiplexer having an output to deliver the changing count to said count register.

18B. The electronic circuit claimed in claim further comprising pop instruction execution circuitry operable to dynamically pop data from said destination stack.

18C. The electronic circuit claimed in claim further comprising pop instruction execution circuitry operable to dynamically pop data from said destination stack in response to an immediate constant from said instruction register biased in a reverse manner relative to push with the changing count from said count register.

22A. The electronic circuit claimed in claim further comprising a second pipeline coupling said instruction operand value generating circuit with said selection circuitry.

22B. The electronic circuit claimed in claim wherein said selection circuitry includes decoding circuitry for decoding each value onto access signal lines to select storage elements in said set.

22C. The electronic circuit claimed in claim further comprising a nonvolatile memory coupled to said instruction operand value generating circuit and programmed with a plurality of repeat and repeated instructions defining plural operand value ranges for operations of said instruction operand value generating circuit.

Notes Aspects are paragraphs which might be offered as claims in patent prosecution. The above dependently written Aspects have leading digits and internal dependency designations to indicate the claims or aspects to which they pertain. Aspects having no internal dependency designations have leading digits and alphanumerics to indicate the position in the ordering of claims at which they might be situated if offered as claims in prosecution.

While some embodiments may have an entire feature totally absent or totally present other embodiments such as those performing the blocks and steps of the Figures of drawing have more or less complex arrangements that execute some process portions selectively bypass others and have some operations running concurrently sequentially regardless. Accordingly words such as enable disable operative inoperative are to be interpreted relative to the code and circuitry they describe. For instance disabling or making inoperative a second function by bypassing a first function can establish the first function and modify the second function. Conversely making a first function inoperative includes embodiments where a portion of the first function is bypassed or modified as well as embodiments where the second function is removed entirely. Bypassing or modifying code increases function in some embodiments and decreases function in other embodiments.

A few preferred embodiments have been described in detail hereinabove. It is to be understood that the scope of the invention comprehends embodiments different from those described yet within the inventive scope. Microprocessor and microcomputer are synonymous herein. Processing circuitry comprehends digital analog and mixed signal digital analog integrated circuits ASIC circuits PALs PLAs decoders memories non software based processors microcontrollers and other circuitry and digital computers including microprocessors and microcomputers of any architecture or combinations thereof. Internal and external couplings and connections can be ohmic capacitive inductive photonic and direct or indirect via intervening circuits or otherwise as desirable. Implementation is contemplated in discrete components or fully integrated circuits in any materials family and combinations thereof. Various embodiments of the invention employ hardware software or firmware. Process diagrams herein are representative of flow diagrams for operations of any embodiments whether of hardware software or firmware and processes of manufacture thereof.

While this invention has been described with reference to illustrative embodiments this description is not to be construed in a limiting sense. Various modifications and combinations of the illustrative embodiments as well as other embodiments of the invention may be made. The terms including includes having has with or variants thereof are used in the detailed description and or the claims to denote non exhaustive inclusion in a manner similar to the term comprising . It is therefore contemplated that the appended claims and their equivalents cover any such embodiments modifications and embodiments as fall within the true scope of the invention.

