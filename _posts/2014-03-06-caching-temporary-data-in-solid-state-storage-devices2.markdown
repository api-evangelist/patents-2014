---

title: Caching temporary data in solid state storage devices
abstract: Various systems and methods for inhibiting a modified block of data from being written to an underlying persistent storage device are disclosed. A cache is maintained by a file system and the cache is implemented to temporarily cache portions of application data for an application. The application data for the application is stored on the underlying persistent storage device. Metadata is accessed if it is detected that a block of data in the cache has been modified. The metadata indicates that the block of data is not needed for the integrity of the application. In response to the metadata, the modified block of data is inhibited from being written to the underlying persistent storage device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09646012&OS=09646012&RS=09646012
owner: Veritas Technologies LLC
number: 09646012
owner_city: Mountain View
owner_country: US
publication_date: 20140306
---
This invention relates to caching data and more particularly to caching data in solid state storage devices.

A database is a structure managed by a database management system DBMS program that organizes a collection of data. Logically a database can organize data in a variety of ways. For example in relational databases data can be logically organized into table spaces. In addition to maintaining a logical organization of data databases can also store the data they organize into data files. These data files can include data files that store user data as well as temporary files that store copies of the user data and any other needed data in order to allow the DBMS to manipulate the user data and or how the user data is being logically presented to a user. For example if the user wants to see a logical view of the user data in which the user data is sorted based on a particular column of a table into which the data has been logically organized the DBMS can use a temporary file to create the sorted view.

Caching is a technique that allows data that is being accessed or is likely to be accessed in the near future by an application such as a DBMS to be temporarily cached by temporarily moving that data from a slower storage device to a faster storage device. Caching can reduce the time the application takes to access data and thus is a technique that is often used to improve application performance. Accordingly the performance of a DBMS can be improved by caching the data it uses whether in user data files or temporary files in a faster storage device.

As an example often the underlying user and temporary data used by a DBMS is stored on a set of one or more hard disk drives. While these disk drives provide cost effective persistent storage there are many other types of storage that provide better access performance. These other types of storage including solid state storage devices which are also referred to as solid state drives SSDs can thus be used as cache storage in order to improve the performance of the DBMS.

Various systems and methods for inhibiting a modified block of data from being written to an underlying persistent storage device are disclosed. One such method involves detecting that a block of data in a cache has been modified. The cache is maintained by a file system and the cache is implemented to temporarily cache portions of application data for an application. The application data for the application is stored on the underlying persistent storage device. The method also involves accessing metadata. The metadata indicates that the block of data is not needed for the integrity of the application. In response to the metadata the method inhibits the modified block of data from being written to the underlying persistent storage device.

In some embodiments the metadata contains file system metadata and cache policy metadata. The file system metadata maps one or more files to one of a plurality of underlying blocks of data. The cache policy metadata indicates one or more portions of one or more files that are necessary for the integrity of the application.

In other embodiments the cache is implemented on a solid state drive and the application is a database application. The method may also involve detecting that a second block of data in the cache has been modified and accessing metadata. The metadata indicates that the second block of data is needed for the integrity of the application. In response to the metadata the method allows the modified block of data to be written to the underlying persistent storage device.

In one embodiment the inhibiting is performed when the block of data is modified. In this example the cache is implemented as a write through cache. In another embodiment the inhibiting is performed when the block of data is removed from the cache. In this alternate example the cache is implemented as a write back cache.

In one or more embodiments the metadata indicates that the block of data is part of a portion of a temporary file and the metadata indicates that the portion of the temporary file is not needed for the integrity of the application. The metadata can also indicate that a header and a tail of the temporary file are needed for integrity of the application.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any limiting. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

While the invention is susceptible to various modifications and alternative forms specific embodiments of the invention are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the invention to the particular form disclosed. Instead the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

Nodes are also coupled to a persistent storage device . Persistent storage device can include one or more of a variety of different storage devices including hard disks compact discs digital versatile discs solid state drive SSD memory such as Flash memory and the like or one or more logical storage devices such as volumes implemented on one or more such physical storage devices. Persistent storage device is described as providing persistent storage because data stored on persistent storage device can be maintained e.g. for a non negligible time such as several minutes hours days weeks years decades and so on even if the power to persistent storage device and or to a drive that reads and writes to persistent storage device is interrupted or cycled off for a non negligible time.

Node and persistent storage device can be integrated e.g. where the persistent storage device is coupled to the node s internal processing devices by an internal bus and is built within the same chassis as the rest of the node or separate. If separate node and persistent storage device can be coupled by a local connection e.g. using a technology such as Bluetooth Peripheral Component Interconnect PCI Small Computer System Interface SCSI or the like or as shown in this example via one or more networks such as the Internet or a storage area network.

In this example node implements a file system . File system is a software program that organizes and controls access to files. Here file system controls access to the files used by application stored on persistent storage device including user data and temporary data . File system can maintain metadata e.g. metadata that identifies e.g. by a file name each temporary file including directories which are special files that can act as containers for one or more other files as well as each temporary file s location on a storage device each temporary file s size and other information such as the temporary file s creation time most recent access time and the like. Such information can be maintained in an inode structure for certain types of files systems.

The term file system can refer to both the software application which itself can be part of an operating system or database that organizes the files and the collection of files that are organized by that application. Files can be organized hierarchically with directories collecting groups of files and or other directories. A file system application like file system can provide another application such as a DBMS application with access to files e.g. to open read modify create delete and otherwise interact with the data within the files .

A file system application also tracks how the files it organizes map to the blocks of data within the underlying storage volume in file system metadata . This way when an application such as a database requests access to a particular file e.g. using the file name of the file the file system can translate that request into a request for the particular blocks of data included in the requested file. Accordingly the file system application knows which blocks of data in persistent storage device belong to each file. This knowledge based on file system metadata maintained by the file system allows file system to selectively apply different cache policies as specified in cache policy to different blocks of data based upon the file to which each block of data belongs. In other words file system can apply a first cache policy to a first block of data in response to detecting that the first block of data belongs to a first file but can apply a second cache policy to a second block of data in response to detecting that the second block of data is part of a second file.

Each block is a unit of data. In some embodiments blocks are fixed size units of data that represent the smallest granularity of data that can be manipulated by the file system application underlying persistent storage device and or operating system. In other embodiments blocks can be variably sized can represent a larger granularity than the smallest representable by the file system and or have other different characteristics than specified here.

In this example application data which is resident on persistent storage device includes user data and temporary data . Application data is a set of data that is maintained by a database application such as a DBMS not shown in this figure which can be executed on node . Temporary data can be maintained in one or more temporary files like temporary file . It is noted that this is a simplified example and that other embodiments can include far more complex organizational schemes with a greater number of temporary files and or directories than are shown here.

As noted above each set of data maintained by a DBMS can be logically maintained as a set of tablespaces which can in turn include one or more indexes and or a set of one or more tables that themselves include one or more rows and one or more columns. User data represents the data that a user e.g. a human user or set of such users another application and the like has requested the DBMS to store. Temporary data can be used to allow a DBMS to manipulate user data . For example the DBMS can allow users access to user data using a sequential query language SQL . Various SQL commands such as those used to initiate sort join merge or similar operations in order to create an index for a set of user data and so on can be sent to the DBMS by a user. To implement a single database operation requested by one of these commands multiple parallel DBMS processes may need to access manipulate and or exchange data and thus temporary data can be used to facilitate this exchange. Accordingly the DBMS can copy portions of user data into temporary data in order implement a database operation which can also involve one or more DBMS processes further accessing creating modifying and otherwise manipulating the temporary data in order to complete the database operation.

Because user data in a modern database can include very large amounts of data e.g. in terms of gigabytes terabytes or larger and because a user can specify large portions or even all of user data to be processed in a given database operation extremely large amounts of data may be included in temporary data at a given time. Because storage devices such as persistent storage device are often due to reasons of cost reliability and the like unable to provide as high access performance as other types of storage devices the time needed to access data on such a persistent storage device is often a limiting factor. Accordingly many systems use a storage device that can be accessed more quickly to temporarily cache the portions of the application data that are currently needed by the DBMS in order to improve DBMS performance. Here cache is implemented on such a device which in this example is SSD device . As the data in the cache is no longer needed by the DBMS such data can be removed from the cache.

File system executing on node also implements a cache control module . Cache control module is configured to manage cache . Cache control module uses cache policy to control which data is moved into and out of cache as well as to control when that data is moved into and out of cache . Cache control module can access cache policy which can be a set of one or more cache rules in order determine for a given application or set of applications what triggers should cause data to be moved into the cache e.g. such as that data or a block of data in logical or physical proximity to that data being read to and or written to and the like as well as what sort of triggers should cause data to be removed from the cache e.g. that data not having been accessed within a certain amount of time which can be defined either in concrete terms or relative to the most recent time that other data in the cache has been accessed .

When data is being moved out of cache e.g. due to a cache policy specified trigger cache control module uses cache policy metadata and file system metadata collectively these two sets of information can be simply referred to as metadata to detect whether that data needs to also be written back to underlying persistent storage device in order to preserve the integrity of the application using that data. The integrity of the application can be defined in a specific manner depending upon the application being used. For example in some DBMS systems integrity is defined as a state in which the DBMS can be successfully recovered to a valid state after a failure. The process of recovering after a failure can be described as recovery. In many systems an application such as a DBMS does not need the contents of a temporary file in order to have application integrity. Accordingly cache policy can specify which data is and or is not needed in order to maintain application integrity. This specification can be made on a file by file basis and can also indicate that specific parts of certain files are and or are not needed for application integrity. For example certain DBMS systems may require that a temporary file s header tail size information and the like be maintained persistently but that other portions of the temporary file are not needed for application integrity.

In existing cache systems all modified blocks of data within the cache i.e. blocks of data that the cache indicates have been modified since those blocks were moved into the cache such blocks can also be described as dirty blocks are written back to the underlying storage device e.g. when those blocks are initially modified within the cache in a write though cache implementation or when those modified blocks of data are removed from the cache in a write back cache implementation . Each time data needs to be written back to the underlying storage device though performance may be negatively affected especially if the amount of modified data is large as can be the case with database temporary files. However since some of the data that can be stored in cache may not be needed to maintain the integrity of the database it is possible to potentially improve performance by not writing that non integral i.e. not needed to maintain application integrity data back to the underlying storage device when that non integral data is modified in a write through cache or removed in a write back cache . Unfortunately most conventional cache control mechanisms are implemented at the block level such that such mechanisms cannot differentiate between different blocks based upon what file and or portion of a file those blocks belong to. In such systems all modified blocks in the cache must be handled in the same way i.e. written back to the underlying storage at the appropriate time even though that handling is unnecessary for some of those blocks.

Unlike convention block level cache control mechanisms cache control module is implemented as part of file system and thus has access to file system metadata that allows blocks to be mapped to files. Additionally cache policy metadata can indicate which files and or which portions of files within a database are and or are not necessary for application integrity. Based upon these two sets of information cache control module can selectively handle different blocks of data differently when those blocks are modified depending upon whether the contents of those blocks are needed to maintain application integrity or not.

Accordingly cache control module can modify block of data in cache without storing block of data to underlying persistent storage device either at the time of modification in a write through cache or at the time of removal e.g. deletion marking as invalid overwriting and the like in a write back cache as long as cache policy in conjunction with metadata indicates that block of data is not necessary for application integrity. For example cache control module first detects that block of data has been modified while in the cache. Cache control module can then determine based upon metadata which file and or portion e.g. header tail body etc. of a file block of data belongs to. Then cache control module can access cache policy to see if that file and or portion of a file needs to be maintained for application integrity. In response to metadata and cache policy cache control module then determines whether block of data needs to be written to underlying persistent storage device .

In some embodiments the method detects that block of data in cache has been modified. Cache is maintained by file system and cache is implemented to temporarily cache portions of application data for application . Application data for application is stored on underlying persistent storage device . In other embodiments the method accesses metadata . Metadata indicates that block of data is not needed for the integrity of application . In response to metadata the modified block of data is inhibited from being written to underlying persistent storage device . In some embodiments eliminating writes of modified data that is not needed for application integrity from cache to underlying persistent storage device can improve the input and or output I O response of the system. As such eliminating such writes may also in at least some embodiments improve the performance of application for which the caching is being performed.

The method can then generate file specific caching rules to be stored as part of the cache policy used by the file system. The method at operation queries application e.g. a DBMS to identify each file e.g. each temporary file used by application that is not needed in its entirety for application integrity. Additionally the method can query application and or a user e.g. using a graphical user interface command line interface application programming interface or the like in order to identify whether any portions of such a file are needed for application integrity. Based upon these queries a set of cache rules can be generated and stored as part of cache policy . These rules indicate which files and or portions of files are needed and or not needed for application integrity.

When it is time to cache at least a portion of a file e.g. as indicated by a trigger condition specified in cache policy from the underlying persistent storage volume in the cache volume at operation the file system application can allocate a new empty file within the file system on the cache volume to store that data. At operation the file system application also stores information on the underlying persistent storage device identifying that at least a portion of the file on the underlying persistent storage volume is now resident in a cache volume. Then at operation data from the underlying file on the underlying persistent storage volume can be cached by copying that data into the new file on the cache volume. Blocks within the file in the cache volume can be moved in and out of the cache as needed e.g. to implement the cache policy .

If the underlying volume is being accessed by multiple nodes e.g. as part of a clustered application implementation whenever a block of data in the cache volume is modified the corresponding block can also be marked invalid or otherwise locked on the underlying storage device thus preventing different nodes from seeing different values of that block at the same time.

In some embodiments the use of a write through cache policy i.e. in which data is written back to the underlying storage device as it is modified in the cache as opposed to a write back policy in which modified data in the cache is only written back to the underlying storage device when it is time to remove that data from the cache can be used to maintain application integrity in situations in which the application is a clustered application. In clustering instances of the application are simultaneously executing on different nodes but each instance operates on the same underlying application data stored on the underlying persistent storage device. However each node can have its own file system implemented cache. Here by forcing integral data i.e. data that is necessary for application integrity to be written back to the underlying storage device when it is modified in the cache new values of the integral data are always available to all of the nodes in the cluster at the same time. As such there is no risk that different nodes in the cluster will be using different values of that integral data at the same time.

As an example in a clustered database application certain portions of a temporary file are integral. Accordingly whenever one of these portions of the temporary file is modified in any node s cache that portion of the temporary file will also be written back to the underlying storage device used by all of the nodes. Typically such a write back operation is implemented atomically so that the operation will succeed or fail only in its entirety e.g. if the write to the underlying storage device fails the write to the cache will also not be completed thus preventing two different values of the integral data from existing at the same time .

Some databases support an autoextend operation by which the size of a temporary file can be automatically increased as needed. At the same time the size of the temporary file can be part of the data that is needed for database integrity. Accordingly in a clustered system if one node triggers the autoextend operation the new size of the temporary file will need to be written back to the underlying storage device as part of an atomic write back operation from the cache in order to maintain system integrity.

The cache policy can also identify the particular handing to be taken with respect to the identified data e.g. whether data needs to be written back to the underlying persistent storage device if modified or whether the data does not need to be written back . While the handling can be explicitly specified in some embodiments this handling is implicit based upon the type of data integral or non integral and thus does not need to be explicitly specified in the cache policy.

In some embodiments cache policy may be provided when the application is initialized by a system administrator. For example a database administrator can use a graphical or command line interface to the file system application in order to specify that a header block and a tail block of a database temporary file as being integral while an allocation map may be made non integral as it is not needed for database recovery. Based on this input the file system can update the cache policy to include the information provided by the administrator.

Alternatively a file system developer may encode the cache policy for certain standard well known applications into a preconfigured set of cache policies that are included as part of the file system application. In these embodiments an administrator does not need to provide information identifying which files or portions of files are integral and or non integral to the file system since such information is already present within the file system s cache policy. Some such embodiments may also let a user update such a cache policy e.g. to supplement and or modify the preconfigured policy that the file system already contains or allow a user to add new cache policies for new types of applications for which preconfigured cache policies are not already available within the file system.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the embodiments described and or illustrated herein. For example processor may perform and or be a means for performing all or some of the operations described herein. Processor may also perform and or be a means for performing any other operations methods or processes described and or illustrated herein.

Memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example memory and a non volatile storage device such as for example persistent storage device and or cache as described in detail below . In one example program instructions implementing a cache control module may be loaded into memory .

In certain embodiments computing system may also include one or more components or elements in addition to processor and memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the operations or features described and or illustrated herein.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Serial Advanced Technology Attachment SATA Serial Attached SCSI SAS and external SATA eSATA host adapters Advanced Technology Attachment ATA and Parallel ATA PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like.

Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in computing system may also include a persistent storage device and a cache coupled to communication infrastructure via a storage interface . Devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example devices and may each include a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . A storage device like persistent storage device can store information such as temporary file of as described above.

In certain embodiments devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example devices and may be configured to read and write software data or other computer readable information. Devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in .

Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. Examples of computer readable storage media include magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and the like. Such computer programs can also be transferred to computing system for storage in memory via a network such as the Internet or upon a carrier medium.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in memory and or various portions of devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the embodiments described and or illustrated herein. Additionally or alternatively one or more of the embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the embodiments disclosed herein.

Similarly servers N generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet. In one example the cache control system and nodes N may include a cache control module as shown in .

As illustrated in a storage unit may be directly attached to node . Similarly one or more caches N may be directly attached to nodes N . Storage unit with persistent storage device generally represents any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments persistent storage device may represent network attached storage NAS devices configured to communicate with nodes N using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers N may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between multiple storage devices. SAN fabric may facilitate communication between servers N applications N and a plurality of storage devices. SAN fabric may also facilitate via network communication between cache control system persistent storage device and caches N . As with storage unit persistent storage device and caches N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to computing system of a communication interface such as communication interface in may be used to provide connectivity between cache control system and network . Cache control system may be able to access information related to applications N using for example a web browser or other client software. Such software may allow cache control system to access data hosted by servers N persistent storage device or caches N . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server a database application node persistent storage device cache or any combination thereof. All or a portion of one or more of the embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to cache control system over network .

In some examples all or a portion of the computing devices in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In addition one or more of the components described herein may transform data physical devices and or representations of physical devices from one form to another. For example a cache control module in may transform behavior of a computing device in order to cause the computing device to inhibit a modified block of data from being written to an underlying persistent storage device.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

