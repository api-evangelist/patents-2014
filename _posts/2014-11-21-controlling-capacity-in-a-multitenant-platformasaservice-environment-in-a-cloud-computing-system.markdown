---

title: Controlling capacity in a multi-tenant platform-as-a-service environment in a cloud computing system
abstract: Implementations of the disclosure provide for controlling capacity in a multi-tenant Platform-as-a-Service (PaaS) environment in a cloud computing system. A method includes obtaining, by a resource control module executed by a processing device, an active capacity metric of each node in a multi-tenant Platform-as-a-Service (PaaS) system, the active capacity metric determined in view of a number of containers that are currently executing in the node and a maximum number of active containers allowed to execute in the node, comparing, by the resource control module, the active capacity metric of the each node to an active capacity threshold associated with the each node, and when the active capacity metric exceeds the active capacity threshold in all of the nodes in a district of the multi-tenant PaaS system and when a maximum actual capacity of containers in the district is not exceeded, adding a new node to the district.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501330&OS=09501330&RS=09501330
owner: Red Hat, Inc.
number: 09501330
owner_city: Raleigh
owner_country: US
publication_date: 20141121
---
This application is a continuation of U.S. patent application Ser. No. 13 483 800 filed on May 30 2012 the entirety of which is incorporated herein by reference.

The embodiments of the invention relate generally to platform as a service PaaS environments and more specifically relate to controlling capacity in a multi tenant PaaS environment in a cloud computing system.

Cloud computing is a computing paradigm in which a customer pays a cloud provider to execute a program on computer hardware owned and or controlled by the cloud provider. It is common for cloud providers to make virtual machines hosted on its computer hardware available to customers for this purpose. The cloud provider typically provides an interface that a customer can use to requisition virtual machines and associated resources such as processors storage and network services etc. as well as an interface a customer can use to install and execute the customer s program on the virtual machines that the customer requisitions together with additional software on which the customer s program depends. For some such programs this additional software can include software components such as a kernel and an operating system. Customers that have installed and are executing their programs in the cloud typically communicate with the executing program from remote geographic locations using Internet protocols.

For programs that are web applications the additional software can further include such software components as middleware and a framework. Web applications are programs that receive and act on requests in web or other Internet protocols such as HTTP. It is common for a user to use a web application by using a browser executing on the user s client computer system to send requests in a web protocol via the Internet to a server computer system on which the web application is executing. It is also common for automatic user agents to interact with web applications in web protocols in the same fashion.

While many web applications are suitable for execution in the cloud it often requires significant expertise and effort in order to install execute and manage a web application in the cloud. For example an administrator typically should identify the software components that a web application needs in order to execute and what versions of those software components are acceptable. In addition the administrator typically should obtain install and appropriately configure each such software component as well as the application itself. Where this high level of expertise and effort has been invested in order to get a web application running on a particular hypervisor and in a particular provider s cloud a similarly high level of expertise and effort usually should be subsequently invested to execute the web application instead or in addition on a different hypervisor and or in a different particular provider s cloud. Also it can be difficult to obtain useful information about how the application is performing and otherwise behaving when executing in the cloud.

Accordingly software and or hardware facilities for facilitating the execution of web applications in the cloud have been introduced and are known as Platform as a Service PaaS offerings. PaaS offerings typically facilitate deployment of applications without the cost and complexity of buying and managing the underlying hardware and software and provisioning hosting capabilities providing the facilities required to support the complete life cycle of building and delivering web application and service entirely available from the Internet. Typically these facilities operate as one or more virtual machines VMs running on top of a hypervisor in a host server.

In present PaaS offerings a first customer s deployed applications do not co exist with any other customer s deployed applications on the VMs that are hosting the first customer s deployed applications. However such an arrangement can be inefficient to the PaaS provider offering the platform services. This is because the applications being deployed in the PaaS are generally quite small packages and the size of the VM does not correspond to the size of the application. It can be costly to initialize a new VM for each application deployment and it may also be a waste of resources that are not being utilized. In a public cloud environment a PaaS provider pays for deploying a VM whether the VM lies idle or not. In a private cloud environment there is still a strain on resources for running VMs that are not completely utilized.

Embodiments of the invention provide for controlling capacity in a multi tenant Platform as a Service PaaS environment in a cloud computing system. A method of embodiments of the invention includes obtaining by a resource control module executed by a processing device an active capacity metric of each node in a multi tenant Platform as a Service PaaS system the active capacity metric determined in view of a number of containers that are currently executing in the node and a maximum number of active containers allowed to execute in the node comparing by the resource control module the active capacity metric of the each node to an active capacity threshold associated with the each node and when the active capacity metric exceeds the active capacity threshold in all of the nodes in a district of the multi tenant PaaS system and when a maximum actual capacity of containers in the district is not exceeded adding a new node to the district.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving attaching forwarding caching executing applying identifying configuring establishing determining pinging comparing adding or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

Embodiments of the invention provide a mechanism for controlling capacity in a multi tenant PaaS environment in a cloud computing system. Embodiments of the invention monitor an active capacity metric of multiple nodes in a PaaS cloud computing system to determine when new nodes should be added or existing nodes should be removed to best address load demands on the PaaS system. An agent at the broker layer pulls active capacity metric information from each node and analyzes all nodes in a district to determine whether active capacity thresholds are being exceeded. If a node has reached its active capacity threshold and there is still capacity within the district then the broker adds a new node within the district. If the node reaches its active capacity threshold and there is no capacity within the district then new nodes are added in a different district. A similar process takes place to determine if nodes within a district should be removed due to excess capacity.

Clients and are connected to hosts and the cloud provider system via a network which may be a private network e.g. a local area network LAN a wide area network WAN intranet or other similar private networks or a public network e.g. the Internet . Each client may be a mobile device a PDA a laptop a desktop computer or any other computing device. Each host may be a server computer system a desktop computer or any other computing device. The cloud provider system may include one or more machines such as server computers desktop computers etc.

In one embodiment the cloud provider system is coupled to a cloud controller via the network . The cloud controller may reside on one or more machines e.g. server computers desktop computers etc. and may manage the execution of applications in the cloud . In some embodiments cloud controller receives commands from PaaS provider controller . Based on these commands the cloud controller provides data e.g. such as pre generated images associated with different applications to the cloud provider system . In some embodiments the data may be provided to the cloud provider and stored in an image repository in an image repository not shown located on each host or in an image repository not shown located on each VM .

Upon receiving a command identifying specific data e.g. application data and files used to initialize an application on the cloud the cloud provider retrieves the corresponding data from the image repository creates an instance of it and loads it to the host to run on top of a hypervisor not shown as a VM or within a VM . In addition a command may identify specific data to be executed on one or more of the VMs . The command may be received from the cloud controller from a PaaS Provider Controller or a user e.g. a system administrator via a console computer or a client machine. The image repository may be local or remote and may represent a single data structure or multiple data structures databases repositories files etc. residing on one or more mass storage devices such as magnetic or optical storage based disks solid state drives SSDs or hard drives.

In one embodiment PaaS provider controller includes a resource control module configured to control capacity of a multi tenant PaaS system implemented in cloud . The resource control module may monitor overall capacity of VMs implementing the multi tenant PaaS system in order to determine whether more VMs should be added to the PaaS system or removed from the PaaS system. The PaaS provider controller can interact with cloud provider system to cause capacity of the PaaS system to be increased or decreased accordingly.

While various embodiments are described in terms of the environment described above those skilled in the art will appreciate that the facility may be implemented in a variety of other environments including a single monolithic computer system as well as various other combinations of computer systems or similar devices connected in various ways. For example the data from the image repository may run directly on a physical host instead of being instantiated on a VM .

In one embodiment the client layer resides on a client machine such as a workstation of a software developer and provides an interface to a user of the client machine to a broker layer of the PaaS system . For example the broker layer may facilitate the creation and deployment on the cloud via node layer of software applications being developed by an end user at client layer .

In one embodiment the client layer includes a source code management system sometimes referred to as SCM or revision control system. One example of such an SCM or revision control system is Git available as open source software. Git and other such distributed SCM systems usually include a working directory for making changes and a local software repository for storing the changes. The packaged software application can then be pushed from the local Git repository to a remote Git repository. From the remote repository the code may be edited by others with access or the application may be executed by a machine. Other SCM systems work in a similar manner.

The client layer in one embodiment also includes a set of command tools that a user can utilize to create launch and manage applications. In one embodiment the command tools can be downloaded and installed on the user s client machine and can be accessed via a command line interface or a graphical user interface or some other type of interface. In one embodiment the command tools expose an application programming interface API of the broker layer and perform other applications management tasks in an automated fashion using other interfaces as will be described in more detail further below in accordance with some embodiments.

In one embodiment the broker layer acts as middleware between the client layer and the node layer . The node layer includes the nodes on which software applications are provisioned and executed. In one embodiment each node is a VM provisioned by an Infrastructure as a Service IaaS provider such as Amazon Web Services. In other embodiments the nodes may be physical machines or VMs residing on a single physical machine. In one embodiment the broker layer is implemented on one or more machines such as server computers desktop computers etc. In some embodiments the broker layer may be implemented on one or more machines separate from machines implementing each of the client layer and the node layer or may implemented together with the client layer and or the node layer on one or more machines or some combination of the above.

In one embodiment the broker layer includes a broker that coordinates requests from the client layer with actions to be performed at the node layer . One such request is new application creation. In one embodiment when a user using the command tools at client layer requests the creation of a new application or some other action to manage the application the broker first authenticates the user using an authentication service . In one embodiment the authentication service may comprise custom authentication methods or standard protocols such as SAML Oauth etc. In one embodiment the authentication service may comprise custom authentication methods or standard protocols such as SAML Oauth etc. Once the user has been authenticated and allowed access to the system by authentication service the broker uses a server orchestration system to collect information and configuration information about the nodes .

In one embodiment the broker uses the Marionette Collective MCollective framework available from Puppet Labs as the server orchestration system but other server orchestration systems may also be used. The server orchestration system in one embodiment functions to coordinate server client interaction between multiple sometimes a large number of servers. In one embodiment the servers being orchestrated are nodes which are acting as application servers and web servers.

For example if the broker wanted to shut down all applications on all even numbered nodes out of 100 000 nodes the broker would only need to provide one command to the server orchestration system . Then the server orchestration system would generate a separate message to all nodes to shut down all applications if the node is even and distribute the messages to the nodes using a messaging and queuing system. Thus in one embodiment the broker manages the business logic and model representing the nodes and the applications residing on the nodes and acts as a controller that generates the actions requested by users via an API of the client tools . The server orchestration system then takes those actions generated by the broker and orchestrates their execution on the many nodes managed by the system.

In one embodiment the information collected about the nodes can be stored in a data store . In one embodiment the data store can be a locally hosted database or file store or it can be a cloud based storage service provided by a Storage as a Service SaaS storage provider such as Amazon S3 Simple Storage Service . The broker uses the information about the nodes and their applications to model the application hosting service and to maintain records about the nodes. In one embodiment node data is stored in the form of a JavaScript Object Notation JSON blob or string that maintains key value pairs to associate a unique identifier a hostname a list of applications and other such attributes with the node.

In embodiments of the invention the PaaS system architecture of is a multi tenant PaaS environment. In a multi tenant PaaS environment each node runs multiple applications that may be owned or managed by different users and or organizations. As such a first customer s deployed applications may co exist with any other customer s deployed applications on the same node VM that is hosting the first customer s deployed applications .

In addition each node also maintains a cartridge library . The cartridge library maintains multiple software components referred to herein as cartridges that may be utilized by applications deployed on node . A cartridge can represent a form of support software providing the functionality needed to run an application . In one embodiment the cartridges are maintained that support languages such as JBoss PHP Ruby Python Perl and so on. In addition cartridges may be provided that support databases such as MySQL PostgreSQL Mongo and others. Cartridges may also be available that support the build and continuous integration environments such as a Jenkins cartridge. Lastly cartridges may be provided to support management capabilities such as PHPmyadmin RockMongo 10gen mms agent and cron scheduler for example. Adding an instance of a cartridge from cartridge library to an application provides a capability for the application without the customer owning the application having to administer or update the included feature.

The deployment of multiple applications of multiple customers on a single node VM is a cost efficient solution for PaaS providers. However deploying a multi tenant PaaS solution raises a variety of concerns including for example how to efficiently control capacity and utilization of the nodes in the PaaS system. Embodiments of the invention provide a mechanism to add nodes in a multi tenant PaaS system when capacity limits are reached. One embodiment of the interaction between the server orchestration system and a node to implement adding nodes for resource control in a multi tenant PaaS system is now described in more detail with reference to .

Each node also includes a server orchestration system agent configured to track and collect information about the node and to perform actions on the node . Thus in one embodiment using MCollective as the server orchestration system the server orchestration system agent can act as a MCollective server. The server orchestration system would then act as the MCollective client that can send requests queries and commands to the MCollective server on node .

As previously mentioned cartridges provide the underlying support software that implements the functionality of applications . In one embodiment an application may utilize one or more cartridge instances that are run in one or more resource constrained containers on nodes . Cartridge library provides an OS based location outside of all application containers that acts as a source for cartridge instantiations that provide functionality for an application . An application may use more than one cartridge instance as part of providing functionality for the application . One example of this is a JavaEE application that uses a JBoss AS7 cartridge with a supporting MySQL database provided by a MySQL cartridge. Each cartridge instance may include a software repository that provides the particular functionality of the cartridge instance . Although depicts just one cartridge instance with a repository it should be appreciated that each cartridge instance of includes a repository even if not shown.

A container is a resource constrained process space on the node to execute functionality of an application. In some embodiments a container is established by the node with resource boundaries including a limit and or designation of the amount of memory amount of storage and security types and or labels to be applied to any functions executed by the container . In one embodiment containers may be established using the Linux Containers LXC virtualization method. In some embodiments a container may also be known as a gear. In some embodiments cartridges instances for an application may execute in containers dispersed over more than one node as shown with application illustrated in . In other embodiments cartridge instances for an application may run in one or more containers on the same node as shown with application in .

In one embodiment the server orchestration system broker includes a resource control module that manages capacity and utilization of nodes in the multi tenant PaaS system. The resource control module controls capacity in the multi tenant PaaS system by adding or removing nodes based on an active capacity metric of the nodes . In one embodiment three scenarios may trigger the addition of new nodes to the PaaS system creation of a new application migration of an existing application or active capacity status check performed at pre determined intervals. When any of the triggering events occur the resource control module examines active capacity metric information from each node to determine whether active capacity thresholds are being exceeded.

The active capacity of node may refer to the number of active containers running on a node divided by the total number of active containers that can run on the node . An active container is one that is currently executing and consuming resources. In some embodiments a node may contain both active and idle containers . The idle containers may be ones that have not been started yet by their owners or my have been stopped by their owners. In either case an idle container may be one that is not executing and consuming resources of the node . As a result the active capacity of a node is therefore different than the actual capacity of the node .

Nodes are further grouped into districts . Although only two districts are illustrated one skilled in the art will appreciate that server orchestration system may manage multiple more than two districts within a PaaS system. In one embodiment a district is a collection of nodes that is given a dedicated set of Internet Protocol IP addresses ports and security labels such as SELinux security labels to share. As such two nodes in the same district should not have any containers that conflict with each other in terms of IP address ports or security labels.

Each district has a maximum total number of containers that can be provisioned in the district . For instance if a district is provisioned with a set of SELinux security labels then due to limitations of the SELinux security labeling system only 6 000 unique security labels can be doled out before the security labels should be re used. As such in this embodiment the district is limited to 6 000 containers in order to avoid conflicts between containers in a district .

Active and actual capacity metrics of each node are based on the resource usage limitations of each container . Each container may be assigned a constrained set of node resources CPU memory disk space that the container may utilize. Correspondingly based on the assigned resource sets of the containers in a node the node is configured with a maximum active capacity and maximum actual include idle and active container capacity. In addition the nodes are configured with active capacity thresholds that determine when new nodes should be added to a district .

This use of active capacity thresholds allows a node to be over utilized in terms of actual capacity total number of containers assigned to the node under the assumption that many containers on a node are bound to be idle and therefore a node can be assigned more containers than it can handle running at one time to better utilize resources of the multi tenant PaaS system. The active capacity threshold setting is the protection mechanism that triggers a migration event to a new node if that active capacity on a node gets too high and puts too much load on the resources of the node .

In one embodiment an administrator of the multi tenant PaaS system configures the capacity and threshold settings both actual and active of the districts and nodes and these settings are then monitored and maintained by the resource control module at the broker layer of the PaaS system.

As mentioned above the resource control module is triggered to examine node active capacity metrics in three situations addition of a new application and thus container to a node migration of a container between nodes and during a resource status check occurring at pre determined intervals. For example when a new application is initialized in the PaaS system the broker layer determines where containers executing the components of the application should be instantiated. As part of this determination the active capacity of current nodes is examined in order to instantiate the containers on the least utilized node . If all nodes are found to be at or near their active capacity threshold then a new node should be added to the PaaS system to control capacity within the system.

Similarly if a container is to be migrated from one node to another for reasons beyond the scope of this disclosure the broker layer determines where the container should be migrated by examining the active capacity of the existing nodes . Similar to above if all nodes are found to be at or near their active capacity threshold then a new node should be added to the PaaS system to control capacity within the system.

In some embodiments the resource control module is programmed to perform status checks of the nodes in the PaaS system at pre determined intervals e.g. every 2 3 hours . The resource control module pings all nodes for their active capacity metric and based on this data determines whether any nodes are at or near their active capacity threshold. If there are no other nodes that can receive migrated containers from the node at active capacity threshold then the resource control module causes the process for adding a new node to the PaaS system to occur.

In one embodiment if a node has reached its active capacity threshold the resource control module also has to determine whether the district of the node has reached its maximum capacity of containers . If the district has not reached its maximum capacity of containers then the resource control module initiates the process to add a new node within the district. On the other hand if the district has reached its maximum capacity then the resource control module examines capacity in other districts and determines whether a new node should be added in a district having capacity to spare.

A similar process takes place to determine if nodes within a district should be removed due to excess capacity. In one embodiment the process to remove a node is triggered when the periodic status checks occur. In the case of removing nodes the resource control module examines whether containers of a district can be consolidated into fewer number of nodes without exceeding any active capacity or actual max capacity thresholds of the nodes in the district . are flow diagrams describing the capacity control process in further detail below.

Method begins at block where a trigger event is received that starts a capacity analysis process. In one embodiment the trigger event is the instantiation of a new application in the multi tenant PaaS system. In another embodiment the trigger event is the migration of one or more containers within the multi tenant PaaS system. In yet another embodiment the trigger event is a periodic status check of the nodes and district in the multi tenant PaaS system.

At block the existing nodes in the PaaS system are contacted pinged to obtain their current active capacity metric. In one embodiment the active capacity metric refers to the number of active containers running on a node divided by the total number of active containers that can run on the node. An active container is one that is currently executing and consuming resources. The resource control module dictates what the maximum number of active containers on the node can be while the node itself provides the information about the current number of active containers. In one embodiment the node maintains the active capacity metric current active container total active containers allowed . In other embodiment the node may provide the number of active containers and the resource control module may calculate the active capacity metric by dividing the provided number by data stored at the resource control module indicating the max total number of active containers allowed at the node.

At block the received active capacity metric is compared to an active capacity threshold associated with the node and stored by the resource control module. For example assume a node has a max actual capacity of 200 containers a max active capacity of 100 containers and an active capacity threshold of 90 . Currently the same node has 150 containers instantiated on the node with 80 of those containers currently active and 70 of the containers idle. In this case the active capacity of the node is 80 80 active containers 100 max active containers allowed and does not exceed the 90 active capacity threshold set for the node. If an influx of idle containers became active say 30 containers then the active capacity metric would increase to 110 and would exceed the active capacity threshold.

Then at decision block it is determined whether an active capacity threshold is exceeded at the nodes within a district. If not the method ends. However if the active capacity threshold is exceeded by the nodes in a district then method continues to decision block where it is determined whether a max actual capacity of containers in the district is exceeded. In one embodiment the resource control module maintains the data on the max actual capacity of a district. If the max actual capacity of the district has not been exceeded then method proceeds to block where a new node is added to the district. In one embodiment the resource control module initiates a process to add the new node which involves communicating with a cloud controller to provision the node.

On the other hand if the max actual capacity of containers in the district has been exceeded then method proceeds to block . At block the capacity of other districts and the active capacity of nodes within those districts are examined. A similar process as provide in method may be repeated in each of those districts to determine whether a new node should be added to that district to address capacity concerns. If a district has capacity for containers and nodes with existing capacity to add more containers then a container migration process which is outside the scope of the present disclosure would be performed to address capacity in the district with max capacity reached.

Method begins at block where a trigger event is received that starts a capacity analysis process. In one embodiment the trigger event is a periodic status check of the nodes and district in the multi tenant PaaS system. At block the existing nodes in the PaaS system are pinged to obtain their current active capacity metric. In one embodiment the active capacity metric refers to the number of active containers running on a node divided by the total number of active containers that can run on the node. An active container is one that is currently executing and consuming resources. The resource control module dictates what the maximum number of active containers on the node can be while the node itself provides the information about the current number of active containers.

In one embodiment the node maintains the active capacity metric current active container total active containers allowed . In other embodiment the node may provide the number of active containers and the resource control module may calculate the active capacity metric by dividing the provided number by data stored at the resource control module indicating the max total number of active containers allowed at the node.

At block for each district the resource control module determines whether containers in the nodes of the districts can be consolidated into a number of nodes that is less than the current number of nodes in the district. In making this assessment the resource control module examines if there are any arrangements of container node combinations where the active capacity threshold of a node is not exceeded and where the max actual container capacity of a node is also not exceeded. At block if the nodes in a district can be consolidated into a smaller number without violating and threshold or capacity limits then migration of containers in the district is performed to re allocate the containers into the lesser number of nodes. Then at block any empty nodes are removed.

The exemplary computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute instructions for performing the operations and steps discussed herein illustrated in by depicting instructions within processor .

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD a cathode ray tube CRT or a touchscreen an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium also known as a computer readable storage medium on which is stored software e.g. one or more sets of instructions software etc. embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory e.g. instructions and or within the processor e.g. processing logic during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface device .

In one embodiment the software include instructions for a resource control module which may correspond to resource control module of and or a software library containing methods that call the resource control module for controlling capacity in a multi tenant PaaS environment in a cloud computing system. While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as segmenting analyzing determining enabling identifying modifying or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

Reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. Thus the appearances of the phrase in one embodiment or in an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment. In addition the term or is intended to mean an inclusive or rather than an exclusive or. 

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

