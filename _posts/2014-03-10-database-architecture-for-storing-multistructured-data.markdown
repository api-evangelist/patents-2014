---

title: Database architecture for storing multi-structured data
abstract: In various embodiments, a system for ingesting, organizing, and storing data is disclosed. The system comprises a processor and a memory unit. A document database is stored by the memory unit. The document database is configured to store data without any foreknowledge of a structure of the data. The data comprises an ontology comprising a plurality of terms describing the data within the document database. A graph database is stored by the memory unit. The graph database comprises a materialized view of the document database. The graph database provides connections between the ontology. The document database and the graph database share common entity profile UUIDs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09390159&OS=09390159&RS=09390159
owner: ZEPHYR HEALTH, INC.
number: 09390159
owner_city: San Francisco
owner_country: US
publication_date: 20140310
---
As enterprises collect larger and larger volumes of data about their target markets customer and community structured data e.g. customer relationship management CRM data and enterprise resource planning ERP data is becoming an increasingly smaller percentage of the overall data domain. At the same time the need to interconnect the data and use it to produce analytics and data driven business decisions has grown.

A single persistence solution to data management requires significant tradeoffs and creates complexity in the management of data and abstraction of components required to manage and search the data effectively. A single database may be well suited to storing data and managing relationships between the data but may not be suitable to both purposes simultaneously. Relational databases excel at managing relationships between aggregated data. However when attempting to manage relations between disaggregated data relational models require creating a predetermined hierarchy which may be brittle and exceptionally difficult to manage.

What is needed is a flexible persistence solution for providing data management of amorphous data without a fixed hierarchical relationship while maintaining robust searching and indexing functionality.

In various embodiments a data management system for ingesting organizing and storing data is disclosed. The data management system comprises a processor and a memory unit. A document database is stored by the memory unit. The document database is configured to store data without any foreknowledge of a structure of the data. The data comprises an ontology comprising a plurality of terms describing the data within the document database. A graph database is stored by the memory unit. The graph database comprises a materialized view of the document database. The graph database provides connections between the ontology. The document database and the graph database share common entity profile UUIDs.

In various embodiments a computer implemented method for ingesting organizing and accessing data is disclosed. The method comprises storing by a memory unit a document database. The document database is configured to store data without any foreknowledge of a structure of the data. The data comprises an ontology comprising a plurality of terms describing the data. The method further comprises storing by the memory unit a graph database. The graph database comprises a materialized view of the document database. The graph database provides connections between the plurality of terms. The document database and the graph database share common entity profile UUIDs. The method further comprises accessing by the processor data in the document database through the connections of the graph database.

In various embodiments a non transitory computer readable medium comprising a plurality of instructions which may be executed by a computer processor is disclosed. The plurality of instructions causes the processor to store a document database in a memory unit. The document database is configured to store data without any foreknowledge of a structure of the data. The data comprises an ontology comprising a plurality of terms describing the data. The plurality of instructions further causes the processor to store a graph database in the memory unit. The graph database comprises a materialized view of the document database. The graph database provides connections between the ontology. The document database and the graph database share common entity profile UUIDs.

In various embodiments a data management system for ingesting organizing and storing data is disclosed. The data management system comprises a processor and a memory unit. A document database is stored by the memory unit. The document database is configured to store data without any foreknowledge of a structure of the data. The data comprises an ontology comprising a plurality of terms describing the data within the document database. A graph database is stored by the memory unit. The graph database comprises a materialized view of the document database. The graph database provides connections between the ontology. The document database and the graph database share common entity profile UUIDs.

In various embodiments a computer implemented method for ingesting organizing and accessing data is disclosed. The method comprises storing by a memory unit a document database. The document database is configured to store data without any foreknowledge of a structure of the data. The data comprises an ontology comprising a plurality of terms describing the data. The method further comprises storing by the memory unit a graph database. The graph database comprises a materialized view of the document database. The graph database provides connections between the plurality of terms. The document database and the graph database share common entity profile UUIDs. The method further comprises accessing by the processor data in the document database through the connections of the graph database.

In various embodiments a non transitory computer readable medium comprising a plurality of instructions which may be executed by a computer processor is disclosed. The plurality of instructions causes the processor to store a document database in a memory unit. The document database is configured to store data without any foreknowledge of a structure of the data. The data comprises an ontology comprising a plurality of terms describing the data. The plurality of instructions further causes the processor to store a graph database in the memory unit. The graph database comprises a materialized view of the document database. The graph database provides connections between the ontology. The document database and the graph database share common entity profile UUIDs.

Reference will now be made in detail to several embodiments including embodiments showing example implementations of data management systems and methods for ingesting organizing and accessing data. Wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality. The figures depict example embodiments of the disclosed systems and or methods of use for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative example embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

In one embodiment the data management system enables ingestion organization and accessibility of unstructured semi structured and structured data in a Software as a Service SaaS model. Ingestion of data may comprise receiving and storing data without any foreknowledge of the structure and content of that data. The data may be stored in a document database . In one embodiment the data management system stores the data in a schema less document database which allows for amorphous data models and does not require the data architecture to be known prior to storage. The document database may store representations of entities persons or things within a domain. The representations stored in the document database may comprise one or more documents. The document database may comprise a data dense index sparse database which allows the storing of bulk data without robust search capabilities. In one embodiment the document database may comprise for example a MongoDB database.

In one embodiment the two tiered database architecture may comprise a graph database . The document database allows the data management system to provide amorphic data models and processing but lacks the ability to provide connectivity between the concepts entities structures attributes within the stored data. A graph database may be implemented to provide connectivity between the concepts of the data stored within the document database . In one embodiment the graph database may comprise a materialized view of the document database . The graph database may provide a data sparse index dense graph of the entire data domain. The graph database allows connectivity of the data in the document database to be expressed in a compact high performance structure. In one embodiment the graph database may comprise for example a Neo4j database.

In some embodiments the data management system may comprise an application programming interface API for providing access to the two tiered database architecture . In one embodiment the API may comprise a representational state transfer API REST API via which the capabilities of two tiered database architecture are accessible. The API may provide access to the document database and graph database without the need for a user to consider the persistence mechanism e.g. the two tiered architecture the data is sourced from. In some embodiments the API may be highly expressive and may provide immediate access to new ontology constructs without any additional development. For example in one embodiment the API may be configured to add user defined terms to an ontology and provide search capabilities based on the updated ontology without the need for the user to interact with the ontological definitions of the document database .

In one embodiment the data management system may comprise three high level components a core persistence component a data management component and a data accessibility component. The core persistence component may comprise the two tiered document architecture . The core persistence component may comprise one or more ontologies for classifying data in various domains that may be associated with the document database . The document database is configured to store bulk data in a data dense index sparse structure. The graph database comprises a materialized view of the document database . The graph database comprises a data sparse index dense structure. The two tiered database architecture may comprise an in memory cache for storing recently retrieved commonly retrieved or recently generated nodes or documents. In one embodiment the graph database may provide full text search of the data e.g. documents stored within the document database .

The data management component may comprise data ingestion organization and management functions. In one embodiment the data management component may provide parsing loading modeling and linking of incoming data. The data management component may be linked to one or more external functions . In one embodiment the external functions may comprise black box functions which are not visible by the user. The external functions may comprise one or more algorithms for processing parsing loading modeling or linking data incoming to the document database . The data management component may provide data normalization and disambiguation such as for example by linking the incoming data to the proper terms in the ontology vocabulary or eliminating redundant terms in the ontology vocabulary. The data management component may manage linkages across the two tiered architecture and may create or eliminate linkages between nodes or terms. The data management component may manage the ontology such as for example by adding new vocabulary to the ontology managing the hierarchical structure of the ontology or updating the terms in the vocabulary.

The data accessibility component provides access to the graph database and the document database to a user. The data accessibility component may comprise an API . The API obfuscates the implementation details by merging the core persistence model e.g. by providing access to both the document database and the graph database in the same API. By implementing the API developers need not be concerned with the underlying data architecture or implementation and may focus on manipulation and analysis of the stored data. In one embodiment API may comprise an expressive semantically complete REST API. The API may expose the vocabulary and taxonomy of the data domain. New data and data features for example new vocabulary are immediately available via the API without additional development.

In one embodiment the data stored in the document database may comprise one or more ontologies which describe the data. An otology formally represents knowledge as a set of concepts and the relationships between pairs of concepts within a domain. Ontologies may be used to model a domain and support reasoning about entities or structures within the domain. An ontology may comprise a shared vocabulary which describes the various entities or structures within the domain. The shared vocabulary may comprise a plurality of terms defining the entities concepts or structures within the selected domain. For example the plurality of terms may correspond to one or more attributes of the entities concepts or structures within the domain. The vocabulary may be used to model a domain with the definition of objects or concepts and related properties. In one embodiment the ontology may describe a vertical structure within a domain. For example in one embodiment the data management system may comprise an ontology describing concepts within a specific domain such as for example a healthcare domain a pharmaceuticals domain or any other suitable domain or industry.

In some embodiments the ontology may comprise two types of attributes arranged strictly or loosely in a hierarchy organic attributes and derived attributes. Organic attributes may comprise attributes of an entity which occur by the very nature of the existence of the entity person or structure within a domain. For example attributes of a Healthcare provider entity stored in the document database may include specialty zip code state phone number e mail address credentials or other similar attributes. Organic attributes are not calculated but instead exist without external intervention. Derived attributes may comprise attributes of an entity which are derived from organic attributes and or other derived ontology attributes. Derived attributes may be calculated. For example derived attributes of a Healthcare Provider entity may include experience number or emergency room visits influence leadership or other similar derived attributes.

In some embodiments the ontology may comprise a provider defined ontology. The provider defined ontology may comprise a plurality of terms generated by the provider of the data management system to describe a specific domain. For example in one embodiment the selected domain may comprise healthcare. The provider defined ontology may comprise a plurality of terms describing the structures concepts and entities that exist within the healthcare domain. The provider defined ontology may be maintained by a provider and may be provided to each instance of the data management system . The provider defined ontology may be updated when entities are added to the document database that are not described by the existing vocabulary. In some embodiments the provider defined ontology may be updated to include new terms to describe an entity added to the document database . In some embodiments existing terms within the provider defined ontology may be altered to encompass a new entity added to the document database .

In some embodiments the ontology may comprise user defined ontology comprising a plurality of user defined terms. The user defined terms may be provided by a user and may comprise vocabulary not included in the provider defined ontology or may overlap with the vocabulary of the provider defined ontology. The user defined ontology may comprise vocabulary specific to the user or the user data. The user defined ontology may replace the provider defined ontology within the system may be maintained separate from the provider defined ontology or may be merged with the provider defined ontology.

In some embodiments the ontology may comprise a merged ontology. A provider defined ontology may be provided by a provider and may comprise vocabulary defining common or generic terms within a domain. A user defined ontology may be provided by a user and may comprise additional vocabulary defining common uncommon or user specific terms within the domain. The merged ontology may comprise a combined ontology of the provider defined ontology and the user defined ontology.

For example a user may access a data management system configured for a pharmaceutical domain. The user may want to incorporate Healthcare Provider survey results such as for example attitudinal Likert scale survey results as attributes of entities represented within the document database. Each survey response may be assigned as an organic attribute of a given healthcare provider represented within the document database . For example the healthcare provider s response to a specific question may represent the healthcare provider s attitude toward genetic pre screening. The user may also want to incorporate both the strength of the attitude distance from the center of the Likert scale and the direction of the attitude positive or negative into the calculation of a provider defined derived ontology attribute or term such as the Key Opinion Leader KOL attribute. The data management system may generate one or more user defined organic ontological attributes for the survey results and two new derived ontological attributes for the strength of attitude distance from center and direction of attitude attributes organic and derived attributes are discussed in more detail below . In one embodiment the provider defined ontology may be modified to incorporate the new organic and derived attributes. The data management system may allow incorporation of the user data and user defined ontological attributes without any foreknowledge of the survey the meaning of individual questions or how the data is represented.

In some embodiments the user defined ontology may comprise one or more terms that conflict with the vocabulary of the provider defined ontology. Conflicting terms may comprise for example a first term in the provider defined ontology and a second term in the user defined ontology for describing the same attribute of an entity a term in the provider defined ontology to describe a first feature of an entity and the same term in the user defined ontology to describe a second feature of an entity or a term in the provider defined ontology having a first set of ontological relationships and the same term in the user defined ontology having a second set of ontological relationships. In some embodiments conflicting terms are resolved by taking the ontological properties of the user defined ontology for the merged ontology.

The bulk data from the data import may be input into the data management component . The data management component may be configured to provide processing evaluation and disambiguation of the imported data . The data management component may also be configured to calculate one or more derived attributes of the imported data . The data management component may provide a direct representation of custom data provided by a user. The data management component manages the ontology of the data management system . The data management component may establish node and graph connections for the imported data based on the ontology as expressed in the meta data of the imported data. The data management component may be configured to extend or modify the ontology of the data management system to include the vocabulary identified for the imported data. The data management component may store temporary data during processing. The data management component may allow user review of the selected ontological terms node connections and parsing of the imported data. The data management system may have input and output access to the two tiered database architecture . The data management system may access data stored in the document database and may access the graph connections and search indexes of the graph database .

In some embodiments the synchronization process may receive a batch comprising updates to existing entities. The synchronization process may identify the UUIDs for the existing entities. If the UUID of the entity itself has been updated such as for example if the name of the entity has changed due to a merger or rebranding the synchronization process identifies the entities with identify updates and prepares a batch update for the entity nodes comprising the identity information changes and updates the graph database nodes.

In some embodiments the synchronization process may evaluate updates to entities to identify attribute changes for entities already comprising at least one node in the graph database . The synchronization process may run a batch GET to find the entity nodes corresponding to the evaluated entities. The synchronization process merges the found nodes with the entity updates stored in memory. If the evaluation fails to identify a node in the graph database corresponding to the updated entity the synchronization process may generate a batch of missing entity nodes and may merge the missing entity nodes into the graph database . In some embodiments the synchronization process may identify one or more changes to unique attributes of the graph database . The synchronization process evaluates the list of changed or added attributes with the attribute nodes within the graph database . The synchronization process retrieves the identified attribute nodes and updates the attribute nodes with the updated attribute list. If an attribute node is not identified during the evaluation the synchronization process generates new nodes for the missing attributes and adds the missing nodes to the graph database .

In one embodiment the data management system may serve at least two primary abstract purposes 1 the retention of fully canonical representation of entities within a domain such as for example entities within a healthcare domain such as Healthcare professionals HCPs Key Opinion Leaders KOLs Institutions or other entities within the healthcare domain and 2 the modeling of the relationships between entities between entities and various entity attributes and enabling the traversal of those relationships for discovery. For example in some embodiments entities within a healthcare domain may comprise attributes including specialty practice area accreditations or other healthcare specific attributes. The attributes of the entities may correspond to at least a portion of the terms within ontology vocabulary. By combining the first and second abstract purposes the data management system may provide insight into the modeled domain. In some embodiments the data management system may retain previous representations of entities such as historical information useful in disambiguation meta data about various attributes as well as the metadata that is implemented within the CDAL and data management process DMP to derive the fully canonical representations of entities and the relationships between those entities and their attributes.

In some embodiments the data management system implements a two tiered architecture comprising a document database and a graph database persistence platform to leverage the variable schema and atomic nature of a document as an implementer of the canonical entity representation and the node edge relational structure to implement relationships between entities and between entities and their attributes. A single persistence solution that enables both primary purposes of the platform such as for example implementing only the document database or only the graph database would require significant tradeoffs and create complexity in the management of data and the abstraction of components required to implement core functionality. A document database may be well suited to storing an atomic self contained canonical representation of an entity. However the document database may be incapable of effectively managing a complex structure of pair wise relations between entities and relevant entity attributes which may be useful in the browsing of target market data. Relational databases excel at managing relations between sets of aggregated data one to many relationships however when attempting to manage relations between disaggregated data nodes such as the data stored in the document database relational models generally require creating a predetermined relationship map or hierarchy which may be brittle and exceptionally difficult to manage in an environment where relations are amorphous. The data management system implements a flexible schema less amorphous persistence solution. In some embodiments the two tiered architecture is configured to defer as few problems as possible up the stack to higher order architectures.

In one embodiment the canonical entity and attribute representations e.g. documents are stored in the document database and the relationship information is stored in the graph database . The graph database may be intentionally data sparse such that the graph database will carry only the representation information useful for discovery browsing the graph . The graph database may be heavily indexed to enable node searchability. The graph database relationships may be meaningful in terms of both direction and in terms of naming. For example the graph database may comprise one or more directions connecting entities within the document database such as attributes identifying that an entity works at another entity stored in the document database went to an institution represented in the document database or has a feature represented in the document database . As another example the graph database may comprise one or more significant attribute names such as for example a primary address attribute a practice address attribute or other significant attribute identifiers. In some embodiments the relationships between the nodes and entities may also be heavily indexed to promote searchability.

In one embodiment the document database may comprise one or more representation of entities. Entities may refer to people places and things such as for example people institutions or practice areas within a specific domain. For example the document database for a healthcare domain may comprise entities such as for example healthcare providers healthcare institutions universities research institutions and any other physical real world object. In some embodiments entities may also comprise products such as for example industry or customer products.

In some embodiments the entities within the document database may comprise attributes which may identify information about the entities. In some embodiments attributes may have no tangible meaning in the document database or graph database without being associated with an entity. For example in some embodiments attributes of an entity may include addresses specialties accreditations authorship survey data or geographic location to name just a few. In some embodiments the data management system may provide standards and practices around the definition of entities and attributes. In some embodiments the assignment as an attribute or an entity may be arbitrary. The data management system may differentiate entities from attributes based on the information provided at creation. By providing flexibility between the assignment of data as attributes or entities the data management system provides an adaptive system for organizing and accessing data.

As shown in in order to access the document database the DMP first accesses the graph database to navigate select or browse the data stored in the document database . The document database and the graph database comprise shared node IDs . The shared node ID is used by the DMP to access the documents identified by the graph database and stored within the document database .

The graph database provides an extensive and robust capability for the creation of expressive and non hierarchical representations of user data. In some embodiments it may be advantageous to provide fixed and potentially hierarchical ontologies for example based on industry specialty department or other attributes of the domain. The fixed ontologies may require a more fixed hierarchical structure for maintaining the relationships between the vocabulary of the various attributes. In some embodiments the graph database provides an expressive view into the ontology allowing a user to select an ontological root based on the user s understanding of the problem to be solved. For example in some embodiments the graph database may allow a user to search for or select a specific term from the vocabulary and navigate through the ontology based on parent child relationships between the selected term and the remainder of the vocabulary.

The ontology may be composed of hierarchical components. In some embodiments the graph database may only represent the implementation of the ontology for example how the ontology is expressed as attributes assigned to entities. The definition of the ontology may be expressed as one or more documents stored in the document database . By storing the definition of the ontology in the document database the data management system may provide a rich hierarchical definitional view of the ontology via the document structure while maintaining the expressiveness and composability of discovery inherent in the graph.

In one embodiment the data management system may comprise a provider defined and industry specific ontology. The provider defined ontology may comprise one or more sub ontologies designed to tailor to specific functions or departments within a domain. In some embodiments sub ontologies may be assigned to certain entities or groups of entities based on their role within an organization other entity or ontological hierarchy. In some embodiments the provider defined ontologies may be defined within the document database by relevant meta data. The meta data may define for example hierarchy and interdependencies of the entity semantic characteristics of the entity sub components of the entity expected content and types of content associated with the entity or validation or verification mechanisms used by the entity. In some embodiments derived attributes may extend the meta data by providing additional information about attributes such as for example a calculation mechanism such as algorithms processing jobs map reduce functions or other suitable calculation mechanisms calculation frequency input data required for the calculation expected output data of the calculation or other features of the meta data defined attribute.

In some embodiments the ontology may be extended and modified by a user defined ontology. The user defined ontology may extend or modify the implementation details of the provider defined ontology and sub ontologies to suit the particular needs of a user. The user defined ontology may be stored discretely from the provider defined ontology in the document database . In one embodiment the user defined ontology may comprise a copy of the provider defined ontology with additional organic and derived attributes and or modification to some of the provider defined terms such as for example modification of the system provided derived attributes. The user defined ontology definitions may be stored in the document database and may be modified and extended copies of the provider defined ontology described above.

In some embodiments the data management system may be configured to operate in a cloud based Infrastructure as a Service IaaS Software as a Service SaaS multi tenant environment. The data management system may be configured to protect user proprietary data such as the user defined ontology and user uploaded data and share public data such as the provider defined ontology or provider data for a specific domain . In some embodiments the data management system actively manages data persistence and visibility through a combination of logical and physical separation.

In some embodiments the data stored by the data management system may comprise three distinct types of data user proprietary data provider proprietary data and public record data. User proprietary data may comprise data provided by a specific user or customer of the data management system . User proprietary data may be managed by the specific user. The user proprietary data may be protected user data and may not be accessed by other users. In some embodiments user proprietary data may comprise data derived calculated from other user proprietary data. Provider proprietary data may comprise provider data which is derived from public records data or generated by the data management system via other means such as for example purchase of data from vendors surveys of the relevant domain or other data collection techniques. Public record data may comprise data sourced from publicly available repositories. For example in one embodiment involving a healthcare domain public record data may be provided by AMA SunlightOrg PubMed or other publicly available repositories. Those skilled in the art will appreciate that the publicly available repositories will vary from domain to domain.

In various embodiments the data management system may maintain data security through logical separation physical separation or both. Logical separation may comprise the sequestration of data at an access layer. In some embodiments user proprietary data for multiple users may be physically intermingled on the storage device by access to the user proprietary data may b logically restricted to the specific user associated with the user proprietary data. For example the data stored by the data management system for a specific user may reside on the same host as data stored for other users may be stored on the same physical storage device and may be intermingled on that storage device. For example a first user s data may be held on the same server or in the same document database replica set as a second user s data. The first user s data may be logically separated into different document databases stored by the server which would have distinct access restrictions such as for example user name and password requirements. Although the data is logically separated the first user s data and the second user s data may reside on the same host and may reside on the same storage device within the host.

In some embodiments the data management system may maintain data security through physical separation. Physical separation may comprise the sequestration of data at the storage layer. Data may be stored on separate physical hosts and separate storage devices. By storing a user s data on separate physical hosts and separate storage devices the data management system may provide a greater level of security for user proprietary data. For example a first user s data may be stored on a document database replica set comprising a first host a second host and a third host. In some embodiments only the first user has access to the first host the second host and the third host. A second user s data may be stored on a document database replica set made up of a fourth host a fifth host and a sixth host and only the second user may have access to the fourth host the fifth host and the sixth host.

In some embodiments user data may be segmented at the logical layer and the physical layer. By separating the data at both the logical layer and the physical layer the data management system may ensure data privacy across multiple users in a single domain or across multiple domains. In some embodiments a first user and a second user may be competing within the domain and exposing user proprietary data may result in serious consequences for the users and the system providers. By ensuring data security through logical and physical separation the data management system may minimize the risks of accidental exposure of user proprietary data.

In some embodiments the data management system may maintain each user as a cell. illustrates one embodiment of a cell architecture . The cell architecture may comprise component isolation within the data management system . A cell may comprise a self contained installation of components capable of providing all operations of the data management system . For example in the illustrated embodiment the first cell and the second cell comprise individual version of the API servers the data management platform the document database and the graph database . In some embodiments each cell may be configured to service a single user. In some embodiments each cell may service a shard. A shard may comprise a plurality of users. For example the data management system may comprise multiple shards wherein each shard comprises only a single user from any given domain. For example a shard may comprise a user within a healthcare domain a user within a pharmaceutical domain and a user within a chemical domain. By establishing each user as a cell within the cell architecture the data management system may maintain the user s proprietary data in a secure environment. In some embodiments each cell may operate independently and may be coordinated by a programmable orchestration layer such as for example the application API the DMP and the meta data which provides synchronization of the API and the DMP . In some embodiments each cell may comprise a full set of API servers DMP servers graph database hosts and a document database replica set. In some embodiments the cell may support multiple clients via client sharding of the graph database and logical separation of document database access.

In some embodiments provider proprietary data such as the provider defined ontology or provider defined entities and public record data may be used to supplement or augment user proprietary data. The provider proprietary data and the public record data sets may become accessible to a specific cell as the DMP populates. The DMP may use provider proprietary data or public record data to create entities and attributes organic or derived in the user cell . In some embodiments the data management system may control access to the provider proprietary data and public record data internally. Users may have access to copies of the provider proprietary data and public record data within the user s cell . In some embodiments the provider proprietary data and or the public record data may comprise one or more shards corresponding to specific domains. For example the provider proprietary data may comprise multiple shards separated by industry domain or industry function groups.

In some embodiments a specified API or DMP node may be restricted to accessing a single set of user proprietary data but may have access to the full set of provider proprietary data and public sourced data. In some embodiments the data vocabulary attributes and entities of the provider proprietary data and public sourced data may be stored in a document database internally and exposed into the user specific document database graph database of the user cell . In some embodiments an internal use graph may be generated for each individual cell implementation of the data management system .

In some embodiments the cell architecture may provide scaling by domain sharing each user is a cell or shard and logical and physical separation of each user s data for security purposes. The DMP and API implementations may be identical between cells and may be driven by client and or shared metadata. In some embodiments each DMP and API implementation may be bound to a cell and logically and physically incapable of connecting to another cell s document database or graph database . Each cell may comprise a representation of the provider proprietary data and the public sourced data. In some embodiments a fully canonical representation of the provider proprietary data and the public sourced data may reside in the data management system core . If a user ceases to use the provider proprietary data set or the public sourced data set the graph database nodes entities and attributes which were created within the user s cell from the data management system core may be deleted including derived attributes which are a part of that data set.

In one embodiment herein a non transitory computer readable media or memory is provided. The computer readable media or memory tangibly embodies a program of instructions executable by the computer system to store a document database in a memory unit wherein the document database is configured to store data without any foreknowledge of a structure of the data wherein the data comprises an ontology comprising a plurality of terms describing the data and store a graph database in the memory unit wherein the graph database comprises a materialized view of the document database wherein the graph database provides connections between the ontology and wherein the document database and the graph database share common entity profile UUIDs. Further the computer readable media or memory tangibly embodies a program of instructions executable by the computer system to store a document database in a memory unit wherein the document database is configured to query the graph database based on at least one user provided term wherein the user provided term matches at least one term of the ontology and wherein the graph database returns the node IDs corresponding to at least one node matching the at least one user provided term and retrieve at least one document from the document database wherein the at least one documents comprises the node IDs returned by the graph database. Indeed the program instructions can be such as to carry out any computer assisted method or operation discussed herein.

In one embodiment the computer support may include a process for controlling a computer system that implements the database architecture for storing multi structured data. The system for controlling a computer system may include a switching system which at a simplest level can be menu displayed on a computer screen. The system for controlling may be structured to offer choices to solicit predetermined data or trigger predetermined operations including for example entering data associated with the database architecture computer system.

In one embodiment a plurality of computers can cooperate to implement the tax savings techniques for healthcare plans. For example each computer system can utilize a computer to computer communication device and such as a network e.g. telephone Internet cable etc. with electronic transmission means for e.g. email real time communication system or the like e.g. with a corresponding receiver system in communicating between the computers to enable the computers to cooperate in carrying out the implementing of computer implemented tax savings techniques for healthcare plans.

For example the plurality of computers may implement a computer implemented system configured to execute a program of instructions executable by the computer system to store by a memory unit a document database configured to store data without any foreknowledge of a structure of the data wherein the data comprises an ontology comprising a plurality of terms describing the data store by a memory unit a graph database comprising a materialized view of the document database wherein the graph database provides connections between the plurality of terms and wherein the document database and the graph database share common entity profile UUIDs access by the processor data in the document database through the connections of the graph database.

If implemented by more than one computer the computer system may include at least a provider of goods or services computer system. Any or all of the computer systems may include one or all of the following an input device such as a keyboard a storage device an output device a memory including a program the foregoing articulated in greater exemplification with regard to e.g. with the storage device and memory being separate or the same as one may prefer in one implementation or another.

While various details have been set forth in the foregoing description it will be appreciated that the various aspects of the record linkage process may be practiced without these specific details. For example for conciseness and clarity selected aspects have been shown in block diagram form rather than in detail. Some portions of the detailed descriptions provided herein may be presented in terms of instructions that operate on data that is stored in a computer memory. Such descriptions and representations are used by those skilled in the art to describe and convey the substance of their work to others skilled in the art. In general an algorithm refers to a self consistent sequence of steps leading to a desired result where a step refers to a manipulation of physical quantities which may though need not necessarily take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It is common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. These and similar terms may be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities.

Unless specifically stated otherwise as apparent from the foregoing discussion it is appreciated that throughout the foregoing description discussions using terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

It is worthy to note that any reference to one aspect an aspect one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the aspect is included in at least one aspect. Thus appearances of the phrases in one aspect in an aspect in one embodiment or in an embodiment in various places throughout the specification are not necessarily all referring to the same aspect. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more aspects.

Some aspects may be described using the expression coupled and connected along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example some aspects may be described using the term connected to indicate that two or more elements are in direct physical or electrical contact with each other. In another example some aspects may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however also may mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other.

It is worthy to note that any reference to one aspect an aspect one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the aspect is included in at least one aspect. Thus appearances of the phrases in one aspect in an aspect in one embodiment or in an embodiment in various places throughout the specification are not necessarily all referring to the same aspect. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more aspects.

Although various embodiments have been described herein many modifications variations substitutions changes and equivalents to those embodiments may be implemented and will occur to those skilled in the art. Also where materials are disclosed for certain components other materials may be used. It is therefore to be understood that the foregoing description and the appended claims are intended to cover all such modifications and variations as falling within the scope of the disclosed embodiments. The following claims are intended to cover all such modification and variations.

Some or all of the embodiments described herein may generally comprise technologies for implementing computer implemented record linkage process or otherwise according to technologies described herein. In a general sense those skilled in the art will recognize that the various aspects described herein which can be implemented individually and or collectively by a wide range of hardware software firmware or any combination thereof can be viewed as being composed of various types of electrical circuitry. Consequently as used herein electrical circuitry includes but is not limited to electrical circuitry having at least one discrete electrical circuit electrical circuitry having at least one integrated circuit electrical circuitry having at least one application specific integrated circuit electrical circuitry forming a general purpose computing device configured by a computer program e.g. a general purpose computer configured by a computer program which at least partially carries out processes and or devices described herein or a microprocessor configured by a computer program which at least partially carries out processes and or devices described herein electrical circuitry forming a memory device e.g. forms of random access memory and or electrical circuitry forming a communications device e.g. a modem communications switch or optical electrical equipment . Those having skill in the art will recognize that the subject matter described herein may be implemented in an analog or digital fashion or some combination thereof.

The foregoing detailed description has set forth various embodiments of the devices and or processes via the use of block diagrams flowcharts and or examples. Insofar as such block diagrams flowcharts and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams flowcharts or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof. In one embodiment several portions of the subject matter described herein may be implemented via Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs digital signal processors DSPs or other integrated formats. However those skilled in the art will recognize that some aspects of the embodiments disclosed herein in whole or in part can be equivalently implemented in integrated circuits as one or more computer programs running on one or more computers e.g. as one or more programs running on one or more computer systems as one or more programs running on one or more processors e.g. as one or more programs running on one or more microprocessors as firmware or as virtually any combination thereof and that designing the circuitry and or writing the code for the software and or firmware would be well within the skill of one of skill in the art in light of this disclosure. In addition those skilled in the art will appreciate that the mechanisms of the subject matter described herein are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the subject matter described herein applies regardless of the particular type of signal bearing medium used to actually carry out the distribution. Examples of a signal bearing medium include but are not limited to the following a recordable type medium such as a floppy disk a hard disk drive a Compact Disc CD a Digital Video Disk DVD a digital tape a computer memory etc. and a transmission type medium such as a digital and or an analog communication medium e.g. a fiber optic cable a waveguide a wired communications link a wireless communication link e.g. transmitter receiver transmission logic reception logic etc. etc. .

All of the above mentioned U.S. patents U.S. patent application publications U.S. patent applications foreign patents foreign patent applications non patent publications referred to in this specification and or listed in any Application Data Sheet or any other disclosure material are incorporated herein by reference to the extent not inconsistent herewith. As such and to the extent necessary the disclosure as explicitly set forth herein supersedes any conflicting material incorporated herein by reference. Any material or portion thereof that is said to be incorporated by reference herein but which conflicts with existing definitions statements or other disclosure material set forth herein will only be incorporated to the extent that no conflict arises between that incorporated material and the existing disclosure material.

One skilled in the art will recognize that the herein described components e.g. operations devices objects and the discussion accompanying them are used as examples for the sake of conceptual clarity and that various configuration modifications are contemplated. Consequently as used herein the specific exemplars set forth and the accompanying discussion are intended to be representative of their more general classes. In general use of any specific exemplar is intended to be representative of its class and the non inclusion of specific components e.g. operations devices and objects should not be taken limiting.

With respect to the use of substantially any plural and or singular terms herein those having skill in the art can translate from the plural to the singular and or from the singular to the plural as is appropriate to the context and or application. The various singular plural permutations are not expressly set forth herein for sake of clarity.

The herein described subject matter sometimes illustrates different components contained within or connected with different other components. It is to be understood that such depicted architectures are merely exemplary and that in fact many other architectures may be implemented which achieve the same functionality. In a conceptual sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality can be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermedial components. Likewise any two components so associated can also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality and any two components capable of being so associated can also be viewed as being operably couplable to each other to achieve the desired functionality. Specific examples of operably couplable include but are not limited to physically mateable and or physically interacting components and or wirelessly interactable and or wirelessly interacting components and or logically interacting and or logically interactable components.

In some instances one or more components may be referred to herein as configured to configurable to operable operative to adapted adaptable able to conformable conformed to etc. Those skilled in the art will recognize that configured to can generally encompass active state components and or inactive state components and or standby state components unless context requires otherwise.

While particular aspects of the present subject matter described herein have been shown and described it will be apparent to those skilled in the art that based upon the teachings herein changes and modifications may be made without departing from the subject matter described herein and its broader aspects and therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of the subject matter described herein. It will be understood by those within the art that in general terms used herein and especially in the appended claims e.g. bodies of the appended claims are generally intended as open terms e.g. the term including should be interpreted as including but not limited to the term having should be interpreted as having at least the term includes should be interpreted as includes but is not limited to etc. . It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended such an intent will be explicitly recited in the claim and in the absence of such recitation no such intent is present. For example as an aid to understanding the following appended claims may contain usage of the introductory phrases at least one and one or more to introduce claim recitations. However the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles a or an limits any particular claim containing such introduced claim recitation to claims containing only one such recitation even when the same claim ncludes the introductory phrases one or more or at least one and indefinite articles such as a or an e.g. a and or an should typically be interpreted to mean at least one or one or more the same holds true for the use of definite articles used to introduce claim recitations.

In addition even if a specific number of an introduced claim recitation is explicitly recited those skilled in the art will recognize that such recitation should typically be interpreted to mean at least the recited number e.g. the bare recitation of two recitations without other modifiers typically means at least two recitations or two or more recitations . Furthermore in those instances where a convention analogous to at least one of A B and C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B and C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . In those instances where a convention analogous to at least one of A B or C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B or C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . It will be further understood by those within the art that typically a disjunctive word and or phrase presenting two or more alternative terms whether in the description claims or drawings should be understood to contemplate the possibilities of including one of the terms either of the terms or both terms unless context dictates otherwise. For example the phrase A or B will be typically understood to include the possibilities of A or B or A and B. 

With respect to the appended claims those skilled in the art will appreciate that recited operations therein may generally be performed in any order. Also although various operational flows are presented in a sequence s it should be understood that the various operations may be performed in other orders than those which are illustrated or may be performed concurrently. Examples of such alternate orderings may include overlapping interleaved interrupted reordered incremental preparatory supplemental simultaneous reverse or other variant orderings unless context dictates otherwise. Furthermore terms like responsive to related to or other past tense adjectives are generally not intended to exclude such variants unless context dictates otherwise.

In certain cases use of a system or method may occur in a territory even if components are located outside the territory. For example in a distributed computing context use of a distributed computing system may occur in a territory even though parts of the system may be located outside of the territory e.g. relay server processor signal bearing medium transmitting computer receiving computer etc. located outside the territory .

A sale of a system or method may likewise occur in a territory even if components of the system or method are located and or used outside the territory. Further implementation of at least part of a system for performing a method in one territory does not preclude use of the system in another territory.

Although various embodiments have been described herein many modifications variations substitutions changes and equivalents to those embodiments may be implemented and will occur to those skilled in the art. Also where materials are disclosed for certain components other materials may be used. It is therefore to be understood that the foregoing description and the appended claims are intended to cover all such modifications and variations as falling within the scope of the disclosed embodiments. The following claims are intended to cover all such modification and variations.

In summary numerous benefits have been described which result from employing the concepts described herein. The foregoing description of the one or more embodiments has been presented for purposes of illustration and description. It is not intended to be exhaustive or limiting to the precise form disclosed. Modifications or variations are possible in light of the above teachings. The one or more embodiments were chosen and described in order to illustrate principles and practical application to thereby enable one of ordinary skill in the art to utilize the various embodiments and with various modifications as are suited to the particular use contemplated. It is intended that the claims submitted herewith define the overall scope.

