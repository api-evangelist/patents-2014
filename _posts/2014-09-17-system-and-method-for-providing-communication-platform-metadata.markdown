---

title: System and method for providing communication platform metadata
abstract: A system and method that includes executing communication processes in an application platform, which comprises on behalf of outside entities, negotiating communications between a set of internal resources and at least one external resource using at least a first communication protocol and a second protocol; capturing internal log information during execution of the application platform; receiving a request to access log information by an outside entity; synthesizing the internal log information of the first protocol and at least a second protocol into a unified communication report; and transmitting the unified communication report.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09137127&OS=09137127&RS=09137127
owner: Twilio, Inc.
number: 09137127
owner_city: San Francisco
owner_country: US
publication_date: 20140917
---
This application claims the benefit of U.S. Provisional Application Ser. No. 61 879 023 filed on 17 Sep. 2013 which is incorporated in its entirety by this reference.

This invention relates generally to the communication platform field and more specifically to a new and useful system and method for providing communication platform metadata in the communication platform field.

Application platforms are frequently used by other applications and services to supplement or facilitate particular interactions and functionality. The application platforms in many cases do not expose logs and analytics about internal platform operations and events. Such information in some cases contains sensitive information. Not only would exposing the logs be a potential security vulnerability to the application platform but also extracting useful information from the application platform logs would be challenging. In a more specific scenario communication platforms have numerous challenges in debugging and identifying errors due to dependence on various communication resources internal and external. A user of a communication platform may encounter an error as a result of misconfiguration of their system of the communication platform a communication provider or a particular endpoint participating in a communication. Thus there is a need in the communication platform field to create a new and useful system and method for providing sanitized platform metadata. This invention provides such a new and useful system and method.

The following description of preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

A system for providing communication platform metadata of a preferred embodiment can include a multitenant platform system no an internal log storage system a log sanitizer and exposed log interface . The system functions to clean organize and otherwise synthesize event logs resource metadata and or any suitable internal records such that they can be consumed by outside entities in a secure and useful manner. The system preferably exposes event logs across multiple operation modes and more specifically communication modes. Event information of two or more communication protocols as controlled by a communication platform can be exposed. For example the SIP communication or IP communication protocols can be contextualized with synchronous alignment with application level communication over HTTP or other suitable protocols. The system can be used in exposing routing event logs that abstract out internal information and events of the platform. The system can also be used in processing logs of the system and presenting analysis and classification of the event logs. This can enable improved debugging analytics and or operational insight into use of an application platform by an outside entity.

The system in a first implementation is used by a communication platform in sanitizing packets and communication messages with at least one outside entity as shown in . The system can additionally or alternatively be applied to operational trace logs of actions performed by the application platform as shown in . In a third implementation the system can be applied to metadata of accessible resources of the communication platform. The accessible resources can be accessible over an API such as a REST API or through an application programming interface API as shown in .

The multitenant platform system of the preferred embodiment functions to perform some task or service on behalf of an outside entity and generate metadata relating to the performed operations. Preferably the application platform is a multitenant distributed computing system providing an application programming interface API . The API preferably operates over an application layer protocol such as HTTP HTTPS SPDY or any suitable protocol. The platform can provide a processing service a communication service a media service resource service and or any suitable type of service. A communication service can facilitate or manage synchronous or asynchronous communication involving at least one outside endpoint. The application platform preferably provides a service used by outside applications or devices.

An exemplary communication service can include bridging synchronous voice session over a SIP service. An exemplary processing service can include executing application instructions within the application platform . The multitenant platform no is substantially similar to the telephony application platform described in patent application Ser. No. 12 417 630 filed 2 Apr. 2009 entitled System and Method for Processing Telephony Sessions which is hereby incorporated in its entirety by this reference. A telephony or communication application platform can enable synchronous communication sessions such as voice sessions video sessions screen sharing sessions or any suitable synchronous form of media communication. The communication can be carried out over PSTN channels SIP channels IP based channels WebRTC or any suitable communication protocol. The communication application platform can similarly facilitate asynchronous communication such as SMS MMS IP based client application messaging proprietary platform messaging e.g. social network messaging or any suitable form of asynchronous communication. The application platform may alternatively provide any suitable service or be any suitable type of platform.

A telephony application platform preferably includes the combination of a communication based signaling and media protocol that is used for facilitating communication sessions. The telephony application platform will preferably utilize a first protocol such as SIP or any suitable communication protocol. The first protocol is preferably a communication protocol that facilitates initiating an interactive media session e.g. voice video chat gaming screen sharing etc. between at least two endpoints. Additionally the communication platform includes at least a second protocol. The second protocol can be used in application logic and control of the communication. The second protocol can be an asynchronous communication protocol that involves the messaging between the platform and an outside application server. The second protocol can be an application layer protocol such as HTTP HTTPs SPDY and the like. The telephony application platform can operate according to responses of an outside developer application. Messages sent over the second protocol preferably include communication state information. The state information can be embedded as query parameter as message data or in any suitable format. In some instances the application platform submits requests to the application server and the application platform will perform a service according to the response. Such a model can be common in communication based service platforms where the service platform provides significant infrastructure to handle incoming calls. In this mode the second protocol can be used in accessing procedural instructions generated and served by an external server. For example in response to a call associated with an account the telephony application platform requests direction from an application server of the account. Similarly the second protocol may be used in response to any event of the application platform . For example the procedural instructions can be telephony instructions organized into a telephony instruction document. The instructions are preferably at least partially proceeded sequentially and translated into actions over a communication protocol i.e. the first protocol . In another variation an API request can be transmitted to the communication platform. The API request may be formed so as to augment and mutate communication state which can translate into actions performed over the first protocol. For example an application can use a REST API call to alter the state of a current voice session.

The application platform acts as infrastructure delegate for a particular outside application. The application server can be hosted and operated by an outside party independent of the telephony platform. Considerable infrastructure and services are required to provide the calling services. Logistically the complexity of a communication application platform can be a barrier to allow customer access to raw metadata logs and or analytics. In a first case a given action by the application platform will involve multiple resources and components of the application platform no. These resources and components can log information for internal diagnostics and tracking but this raw data could expose the underlying infrastructure of the application platform which could open up more widespread security issues. In a second case the internal diagnostics and tracking can be useful for the application platform but a significant portion of the data could be completely irrelevant to outside developers or applications. Similarly the communication application platform will log information across multiple communication protocols and resources and the interaction of the multiple protocols facilitated by the application platform can be useful to an outside entity.

The application platform will include a plurality of severs service engines modules routers processor engines components and or other suitable resources that are used during operating the platform. A subset of the platform resources can be publicly accessible. A public resource would be a platform resource explicitly or implicitly exposed to outside entities. Explicit exposure can include any resource directly addressable by an outside entity. An implicitly exposed resource can include resources that operate on the edge of the application platform and interface with an outside entity. While an outside application may not be able to directly address communication to the implicitly exposed resource the IP address or resource address may be visible when inspecting communication messages. A load balancer node is a common public resource that is visible by outside users. Another subset of the platform resources can be internal resources. Internal platform resources are used internally and preferably do not communicate interact directly with outside components. While internal platform resources can be responsible for a processing or otherwise handling a task the internal platform resource is preferably kept transparent to outside entities. The exposed platform resources and the internal platform resources preferably log events or otherwise contribute to metadata records.

The internal log storage system of the preferred embodiment functions to store records of events and or metadata of the application platform . The internal log storage system can be any suitable metadata repository. The internal log storage system stores the information for internal diagnostics and operations but the system can additionally expose an augmented version of the data to outside entities. The internal log storage system can be a single repository where all resources of the application platform store metadata. More preferably a plurality of different storage systems is used to store different types of data. The internal log storage system can be database or data storage solution operated by the platform operator. Alternatively the internal log storage system can use an outside storage solution such as Amazon s S3 storage solution or any suitable storage service. In a first variation a packet logging service is implemented within the components that handle SIP communication. Those components can run a service to store packet history e.g. pcap packet capture files in the internal log storage system . In a second variation an application instruction document is processed on behalf of a user account e.g. a developer using the platform for an outside application . As the instruction document is processed various operations and events could be executed. Multiple services can contribute to processing the application instructions. In the telephony application platform example processing instructions could include a voice service a SMS service an MMS service a SIP service one or more media transcoding service a text to speech service and or other suitable computing resources. The various resources of the platform can store metadata records into one or more internal log storage systems . In a third variation the application platform can provide a number of accessible API resources. A subset of the API resources can be used to invoke different actions and behavior by the platform. Calls made to the API resources that either query the API or mutate the API resource can be logged along with responses to API calls. Another subset of the API resources can be accessed to retrieve media and or information about a particular item. For example the telephony application platform can include a call resource where information about a call such as origin phone number destination phone number and call duration can be accessed. Resource data generated or captured by the application platform can be stored in an internal log storage system . The information can be stored in a raw form and sanitized on demand.

The log sanitizer of the preferred embodiment functions to process and clean metadata of the internal log storage system for outside consumption. The raw metadata and the information contained in the stored records can include several components that could be unsuitable for sharing with the users of a multitenant platform . Some exemplary metadata information that could be sensitive information can include IP addresses or other endpoint addresses of internal platform resources internal signaling of internal platform resources communication flow protocol between multiple platform resources sensitive user information proprietary data or information valuable to the platform internal errors or warnings partner information and or any suitable logged information that a platform operator or user of the platform would have reason to keep unexposed. The log sanitizer preferably abstracts the log information to level where only desired information is exposed. In one variation the amount and type of information sanitized can be dynamically set according to a policy engine. The policy engine preferably uses a request account to determine the level of sanitization.

The log sanitizer can use a variety of different processes during the sanitization process. In a first process internal resources are generalized to a parent or related public resource. During a communication session a public resource will interface between an outside entity and the internal platform resources. As opposed to attributing the different events to the responsible internal platform resources the logged events can be attributed to the public resource. From the perspective of the outside application a single public resource is responsible for all the events. During packet logging the IPs of internal platform resources are replaced with an IP of a public resource. The log sanitizer can additionally recalculate any checksums or reprocess other aspects of the packet when updated with a sanitized IP address. The log sanitizer can additionally filter events. All or select events of internal platform resources can be removed condensed or summarized to simplify the metadata provided to outside users. Similarly some events may be reduced to simplified representations. For example in a telephony application platform it could be beneficial to show that different network carriers were contacted when initiating a new call. However it could be detrimental to reveal the actual carriers used and any prioritization of those carriers. In this situation the log sanitizer can anonymize the carrier names and details e.g. SIP addresses IP addresses and the like . The log sanitizer can additionally use log patterns across accounts session instances requests or other instances of platform use. For example the log sanitizer can identify application instruction logic errors based on recurring patterns in multiple events. The system can additionally include a cache of sanitized metadata such that repeated requests do not require raw data to be re sanitized a subsequent time. The log sanitizer preferably includes interfaces to the internal log storage system and to at least one outside interface. The interface can be to a web stack which can use the data to provide a graphical user interface or to an exposed API such that programmatic interaction with the information can occur.

In the first exemplary implementation the SIP pcap information is sanitized cleaned organized or otherwise augmented to remove references to internal platform resources and to generalize platform actions to the public platform resources. Additionally some internal routing can be removed from the pcap information logs which functions to abstract internal operations of the application platform to those impacting outside applications. In the second exemplary implementation processing of instructions is sanitized to anonymize or remove references to internal and protected outside resources e.g. partner resources .

The exposed log interface of the preferred embodiment functions to provide an access layer to sanitized log information. The exposed log interface is used by outside account holders and or applications to access or read metadata. The metadata is preferably stored in reference to historical use of the application platform . The metadata can be grouped or associated with particular sessions of use. The exposed log interface can enable an entity to access metadata of a particular account accounts sub accounts or sub accounts and optionally to specify a particular sub set of metadata to be accessed. In a first variation the exposed log interface is a graphical user interface. A web stack or native application uses a private or non public API to communicate with the log sanitizer to request a particular set of logged metadata. The log sanitizer can sanitize the requested data on demand and then transmit the information to the web stack or native application. The web stack or native application can then transform the sanitized metadata into a graphical user interface. In another variation an API can be exposed by the application platform such that the information can be programmatically retrieved. The API is preferably a REST API but any suitable type of API can alternatively be used.

The log interface in one variation includes a set of graphical user interface component which function to facilitate understanding and utility of log information when viewed by a user.

As a first component a graphical log interface can include a browsing interface which functions to provide a mechanism through which a user can explore log information available to an account. In one variation the log information is a time ordered list of event logs. More preferably the log information is partitioned or segmented into different portions that represent different sessions as shown in . For example all event logs associated with a particular communication session can be grouped together. In one case multiple communication sessions are executed in parallel and each of the sessions can be segmented into individual information sequence logs so that the sequence of events can be more easily followed. The browsing interface can additionally include a classification of log information segments. In particular sequences with errors are classified and highlighted for inspection. The type of error and different error patterns can be classified. The user can explore different error classifications to see a collection of log information sessions that include or relate to the error. In one variation errors of higher priority or that have been classified as solvable may highlighted above other errors. Additionally or alternatively the browsing interface can include a search tool. The log information is preferably indexed based on the properties used in the communication. The indexed log information can be searched using any suitable search interface. In one example a user can search for log information be defining a search query based on packet parameters.

As a second component the log information is formatted into a unified event log interface as shown in A B A and B. The unified event log interface preferably includes a sequenced combination of at least two protocols. As described a first protocol may be a SIP protocol and the second protocol may be an HTTP based protocol HTTP or HTTPS . The unified event log interface is a combination of at least two forms log information with the sequence set based on timing and or cause and effect. For example the unified event log interface may show an API request to initiate a call the SIP communication in negotiating the call the HTTP communication between the application platform and an outside server when obtaining procedural instructions and then the resulting updates to the SIP communication.

The unified event log interface can additionally include error or event annotations. The annotations can be used to add descriptive markers for portions of the event logs. A set of individual log records may be summarized as performing some actions. For example the SIP sequence of communications related to calling a number may have an annotation of calling phone number . Errors may additionally include annotations that add a description of the error. In one variation the error annotation can include a suggestion for a solution.

As another component the log interface can include shared log browsing mode wherein two graphical log interfaces are synchronized between two device instances. The shared log browsing mode is preferably used as a tool for customer support agents aiding a customer. The shared browsing mode can include a first account view of log information and a second account view of log information. Preferably one account can have greater permissions or access to log information while a second account has a restricted view of the log information i.e. the log information is more heavily sanitized . In one use case scenario a customer can call customer support and the log information viewed by the customer can be synchronized with the customer support. However the customer sees a sanitized view of the log information while the customer support views log information from the same session but with the log information sanitized in a different format or with no sanitization at all. In one variation actions made through one device instance can be synchronized by a second instance.

As another component the log interface can include an event replay tool which functions to enable one or more event sequences to be replayed. The event replay tool can enable different requests originating from the application platform to be executed. The outbound message is preferably transmitted to the same destination in substantially the same manner. Some parameters may be edited or changed during replay. The replayed communication can result in a response. The response may be compared to the original response with differences highlighted for easy comparison. In one variation each step in a sequence of communications has to be individually initiated. In another variation a user can individually step through a sequence. Alternatively a sequence of communications can be replayed at any suitable time.

As shown in a method for providing sanitized platform metadata of a preferred embodiment can include executing an application platform utilizing a set of protocols S capturing internal log information during execution of the application platform S receiving a request to access log information by an outside entity S synthesizing the internal log information of the set of protocols into a unified communication report S and transmitting the unified communication report S. The method functions to expose a useful interpretation of account logs in a communication application platform that has been delegated communication responsibility by an outside party. Preferably the unified communication report is used in creating a unified log visualization that makes sense of communication signaling of a first protocol and the related log events of application logic of a second protocol. In one variation the first protocol is a media signaling protocol such as SIP and the second protocol is an application layer protocol and more specifically an HTTP based protocol employed in obtaining application directives.

In one variation synthesizing the internal log information can include sanitizing the log information S as shown in wherein the method can function to share internal log information of an application platform while preserving confidential or internal information of the platform. An application platform can generate considerable log and eventing records to support execution of the platform platform analytics and issue resolution. The method enables the information to be reformatted and selectively formatted to provide relevant data and uncompromising data. A first potential benefit of the method is the automatic privatization of internal information of full event information. A second potential benefit of the method is the automatic simplification of log information. If all internally logged information were exposed the data could be rendered unusable by outside entities because of the large barrier to interpreting and processing the information into a usable form. The method can simplify reduce and interpret log records into a more consumable format for outside entities.

The method can have particular benefits for session logs or a set of interconnected or related records. For example the method can be applied to packet based record synthesis and sanitation such as the data generated during a SIP communication session or other synchronous communication session. The method can similarly be used in platforms with instruction interpretation where a sequence of processes is initiated in response to interpretation and execution of an instruction document e.g. an XML document of telephony instructions . The logged information can be exposed over a user graphical interface or alternatively through an API of the application platform. In particular the method has benefits in the area of telephony or communication application platforms where the application platform includes extensive infrastructure to support the service provided to outside customers e.g. developers and their respective applications . An outside developer may delegate complicated communication processes of his application to the communication application platform and because many of the processes involve internal infrastructure the method can facilitate exposing at least some of the internal logs in a safe and controlled manner.

Block S which includes executing an application platform utilizing a set of protocols functions to run host or manage an application platform. The application platform is preferably a platform as a service PaaS type infrastructure that provides processing resources or services to outside entities. The outside entities are preferably account holders but could alternatively be any suitable outside entity. Developers and managers of applications configure their respective applications to use the application platform to facilitate at least a portion of the application offering. The application platform is preferably a multitenant platform servicing multiple accounts on shared resources. The application platform can additionally enable forming hierarchical multitenancy such that accounts of the application platform can similarly have subaccounts wherein the parent account seemingly provides multitenancy. A subaccount or a basic account may both be suitable outside entities. The logged information of the method is preferably logged for multiple accounts if not all accounts but the method can similarly be applied to non multitenant platforms or to individual accounts.

When executing an application platform on behalf of an outside entity executing the application platform can include several different types of operations. These operations can be dependent on the objective and function of the particular application platform. One preferred type of application platform is a telephony or communication application platform as described and referenced above. Various use cases of the method for a communication platform are used herein. However the method is not limited to such use cases and can be applied to any suitable platform.

In one exemplary mode executing an application platform can include routing a communication session through at least two resources of the application platform. When an application platform is facilitating communication with one endpoint or between two or more endpoints the application platform can depend on multiple resources to provide a service. This may involve routing between two resources that each connects to a different endpoint. For example a caller in a first region may connect to a local resource in the first region. The application platform then routes communication through different resources to a resource in a second region to connect to a call destination endpoint. In another example an outside entity connects to a public resource of the platform and then one or more internal resources actually processes the requested task before public resource responds to the outside entity. Such communication routing negotiating and orchestration can be at least partially achieved through a media signaling protocol. The media signaling protocol is preferably SIP but may alternatively be any suitable protocol. Log information related to the SIP packet traffic that passes within the platform and on the edge of the network inbound and outbound Sip traffic may be logged events. For example logged information of the SIP traffic may show the INVITE request of a caller the trying response to the caller an INVITE to a first destination the Ringing messages the acceptance message the acknowledgement message and the session progress message and a BYE message. The logged information can include any suitable SIP message. A communication signaling protocol of the application platform preferably bridges and coordinates media flow between at least two endpoints.

In a related mode executing an application platform can additionally include processing application logic of a communication session which functions to perform delegated business logic of an outside entity. Processing application logic can include obtaining interpreting and executing instructions. In one variation an application layer protocol is used in retrieving or receiving application instructions. The application layer protocol is preferably an HTTP based protocol such as HTTP or HTTPS but may alternatively be any suitable application layer protocol such as SPDY. In one variation an event callback URI is configured for an application or an account. The application platform makes a request to the event callback URI using the application layer protocol upon detection of the event. A response to the request preferably includes procedural instructions. The procedural instructions can be telephony instructions that may direct a communication focused application platform to call a number message a number e.g. SMS MMS make a video call start a recording collect input e.g. DTMF play audio generated from text e.g. text to speech play an audio file put the communication session in a queue join a conference redirect the call hang up or any suitable action. The telephony instruction retrieval can preferably occur upon initiating or redirecting communication session control as in the system described in U.S. Pat. No. 8 306 021 filed 6 Nov. 2012 which is hereby incorporated in its entirety by this reference. The procedural instructions are preferably contained within a document and more preferably formatted in a markup language document. The procedural instructions are preferably at least partially processed sequentially. The procedural instruction documents are preferably retrieved synchronous to the transactions of a communication session. For example a call may be received resulting in SIP events the application platform then retrieves procedural instructions using HTTP processing the logs results in inviting another endpoint over SIP and the next instruction then redirects application control to another URI in response to some user input e.g. a DTMF key . The retrieval of procedural instruction documents can have an at least partially synchronous order with the SIP events.

The processing of application logic can additionally include the processing of application programming interface communication directives. API requests of outside entities may additionally or alternatively be used in affecting the business logic of a communication session. The API requests are preferably received asynchronous to other events. In other words an API call may be received which causes a call to be ended in the middle of its session. The API is preferably a RESTful API but may alternatively be any suitable API such as SOAP or custom protocol. The RESTful API works according to an application layer request and response model. An application layer request and response model may use HTTP HTTPS SPDY or any suitable application layer protocol. Herein HTTP based protocol is described but it should not be interpreted as being limited to the HTTP protocol. HTTP requests or any suitable request communication to the communication platform preferably observe the principles of a RESTful design. RESTful is understood in this document to describe a Representational State Transfer architecture as is known in the art. The RESTful HTTP requests are preferably stateless thus each message communicated contains all necessary information for processing the request and generating a response. The API service can include various resources which act as endpoints that can act as a mechanism for specifying requested information or requesting particular actions. The resources can be expressed as URI s or resource paths. The RESTful API resources can additionally be responsive to different types of HTTP methods such as GET Put POST and or DELETE. Accessing of these resources can be logged and any mutation of the resource can similarly be logged. In some cases mutating an API resource can alter the processing of one or more communication session. Additionally application layer protocol communication may additionally be used internally in directing media handling.

Processing application instructions can similarly involve multiple internal computing resources. It can be desirable to keep the architecture of the internal resources secret or unexposed. The internal resource addresses the communication and networking protocols the number of resource instances the location and distribution of resources the software or hardware of the resources errors or warnings of internal resources and or other aspects can all be considered confidential or private. An operator of an application platform can want to keep the information private for privacy issues security issues operational advantage issues or for any suitable reason. In one variation the application instructions are executed sequentially and the various involved resources log events and communications as individual instructions are executed. Internally this creates a raw log of actions and reactions when executing the application instructions. This can be useful for debugging optimizing or otherwise reviewing execution of a set of instructions. The method can provide a sanitized version of such debugging information while preserving sensitive information. Additionally the application instructions may be reused in part or whole in additional application instances e.g. executing the application for different users . The method can be used to interpret and understand events across multiple instances of application instructions.

In other various types of application platforms executing an application platform can include transforming media hosting resources or services or any suitable operation. The different resources involved in a communication session e.g. those involved in the communication signaling and application logic related communication can contribute to log information in block S.

Block S which includes capturing internal log information during execution of the application platform functions to record events packet records resource configuration API resource metadata and other raw internal operational information of the application platform. Capturing log information can include a resource communicating log information and storing the log information in a log storage system. During execution of the application platform in Block S the various services and resources can log individual operational information. For example a resource can submit a log for each request received from another resource and or response transmitted from the resource. When executing a communication session involved resources can record signaling packets used to direct and control the media stream of the communication session. For example during a SIP based communication session a public node e.g. a load balancer can capture all packets from the network and sort each call into a pcap record. The pcap records are then stored in a hosted storage system e.g. Amazon S3 . The network packet records can be stored in any suitable format. When interpreting and executing instructions resources perform actions on behalf of a request or communication session. The resources can record their actions status and other suitable metadata when facilitating execution of the instruction. The metadata is preferably logged in association with a responsible request identifier. In one variation the request identifier can be a communication or call identifier. In another variation the request identifier can be a timestamp and account identifier. The request identifier can be used to link or associate a sequence or set of log information.

Block S which includes receiving a request to access log information by an outside entity functions to have an outside party use an established mechanism to access a form of the log information. The outside entity is preferably an account or sub account holder. The request can be issued programmatically by an outside application using a provided set of API calls. The request can alternatively be initiated due to interaction of an account holder or administrator. In one variation a graphical user interface is provided that an account holder can use to access and review log information. A web stack that manages interfacing with browser clients can be configured to use an API e.g. private or public API to contact a log processing service to provide access to a unified public version of the log information. In an alternative implementation an outside application or service can programmatically request log information. A RESTful API can be used to access unified and optionally sanitized log information but the API may alternatively be any suitable API such as SOAP. A request to access log information may be a query for a particular type of log information. Alternatively the request may be a default request wherein the most recent log information or some predefined type of log information is requested.

Block S which includes synthesizing the internal log information of the set of protocols into a unified communication report functions to process the raw log information into a version to expose externally. The unified communication report preferably synthesizes the internal log information of a first protocol and at least a second protocol. The first and second protocol can be substantially independent protocols by design. However the application platform directs use of at least two protocols in an inter connected manner wherein cause and effect of errors or transactions can be traced between the two protocols. In a preferred implementation the two protocols can be SIP for media signaling and HTTP based protocol for application logic control. The method can similarly be applied to an application platform that uses more than two protocols. For example the unified communication report may collect the inter related communication logs for three or more protocols. For example a call from a SIP phone bridged to a proprietary voice over IP protocol and controlled by instructions retrieved from an application server may have events from three different protocols reflected in the unified communication report.

Synthesizing the internal log information into a unified communication report can include collating log information across a collection of log information which functions to collect and organize the log information. The collection is preferably log information of at least two platform used protocols. The collection also defines a set of log information which can be interpreted as a block. Preferably a collection is the set of log information related to a single communication session. For example the SIP packets and HTTP requests responses issued for a single phone call would be included in the collection. Forming a selection can include partitioning log information according to collection definition. In the communication session example a call session identifier property may be used to identify all log information with the same call session identifier. A collection could alternatively be all communication sessions involving a particular endpoint all log information for a sub account all log information for a particular day or any suitable collection. In partitioning log information the time stamp of a log record may be ignored such that log records in sequential order may not be part of the same collection. For example two communication sessions may generate log records with overlapping and intermingled events but partitioning functions to split the log records into two collections. The type of collection may additionally change depending on the request or requirements. For example a log reporting interface may allow a customer to screen individual communication sessions for different types of errors in a given session but the log reporting interface may additionally screen log information for warnings about repeated calls which may use collections of events for a given caller which may allow an administrator to observe how customers perform repeated communications.

Synthesizing the internal log information into a unified communication report can additionally include sequencing can include assigning event dependence order which functions to order the log events. The log events are preferably organized to reflect causality of events. In one variation ordering the log events within a collection by time will achieve a sequenced order. However in some instances the exact time order may not be of as much significance as the causality order. If a first SIP message is received which results in an HTTP request those two messages are preferably represented in the unified communication report as sequentially ordered. In this example even if an API event was triggered in between the SIP and HTTP request the time order of these three events may be broken placing the API event. Different ordering rules may be made. Similarly events may be removed or curated to show the most meaningful events. Additionally the log information may be sanitized as in block S.

Additionally or alternatively the method can include Block S which includes sanitizing the log information functions to store log information for consumption by outside parties. The log information is manipulated processed and otherwise altered to remove private information simplify or abstract internal processes and selectively filter information. Sanitizing log information is preferably performed at a sanitizing service. The sanitization of log information is preferably responsive to outside requests such that information is sanitized on demand. The log information can alternatively be sanitized preemptively wherein the collected log information is sanitized during ingestion. In one alternative embodiment the sanitization may be employed independent of collating and sequencing log events of multiple protocols as shown in . The sanitization may be applied to log information of any type. Sanitized information can additionally be cached for repeated requests. Access to log information can additionally be predicted through a suitable learning algorithm or pattern detection and the predicted log information can be sanitized based on historical patterns. For example an account that routinely accesses daily log information of a particular type can be pre processed.

Sanitizing log information can include various processes to augment raw internal log information for outside consumption. In one process sanitizing log information can include generating artificial log records with altered metadata. In one variation resource identifiers are replaced with fake resources public resources or other suitable replacement identifiers which functions to anonymize resources. Generating artificial log records can be applied to internal resources outside partner resources and or participants of the logged event. Generating artificial log records may be achieved by abstracting communication of multiple internal resources of the platform to a single proxy resource. The proxy resource is a stand in or placeholder representation that hides complexity of events that occur internal to that proxy resource. The proxy resource may be real resource or a generated representation of a resource. In one implementation public resources can be used as stand ins for internal resources which functions to turn the application platform to a logged black box where events and information is attributed to one or more public resources. This can function to create an artificial simplification of what resource of the application platform is performing an action. From the perspective of an outside application the application will connect with a first public resource i.e. the proxy resource of the platform and all the associated events and metadata related to that connection are attributed to the public resource. In the original log information the original raw logs would indicate the underlying internal resources that performed the various actions. When a set of log information is related through an identifier e.g. a communication session identifier externally exposed resources i.e. resources communicating outside of the application platform are used in place of internal resources. For example the IP address of a public node can be used for internal resources facilitating a route. In pcap based sanitation this can additionally include recalculating checksums of packets such that the sanitized packets appear legitimate. Similarly partner resources can be anonymized. For example a communication platform may use outside resources such as a set of different network carriers. Instead of exposing the set of network carriers and possibly their respective private address information the method can include using generic or fake identifiers for sensitive information.

Other aspects can similarly be transformed to protect internal operation and data. For example if log information because of its structure reveals a service protocol or other tool used the records can be reformatted to a generic format or syntax to anonymize internal practices. In some cases instead of replacing information with dummy information sensitive log information can be generalized categorized or otherwise represented in an alternative form which provides informational insight. For example a particular piece of metadata could include detailed location information user identifiable metadata or any specific information. The sanitizer can categorize exact information to a broader description. The location information can be transformed to regionally specific information e.g. city information instead of latitude and longitude and user information can be generalized into a generic descriptor of the user.

Sanitizing log information can additionally or alternatively include condensing log information which functions to simplify logged information. Multiple records can be condensed or simplified into a single event record when returned to an outside entity. In some instances considerably more log information may be kept by a platform than would be of interest to outside entities. For example when a service is establishing communication through some communication channel an outside entity may only be interested in the attempt to communicate and the result of that attempt e.g. success redirection failure etc. while internal logs include requests acknowledgements handshaking and other portions of the event. By abstracting the log information into a high level summary the public version of the log information can be more consumable by outside entities. Condensing log information can additionally function as a form of event folding showing different abstraction layers of information. Additionally condensing log information can include processing log information across multiple instances of an application session or other usage instance. Patterns across multiple instances can be modeled and interpreted into a simplified representation. For example some errors may be evident when viewed across multiple communication sessions on a communication platform. Multiple communication sessions can be processed to identify the error.

In one variation the level of sanitization is determined by a policy engine. Policy can preferably be set based on the requesting account. For example an account with platform administrator privileges such as a customer support agent may be able to control the level of sanitization occurring on the log information. For example a customer support agent may be able to toggle between a raw log information view of a unified communication report and a sanitized and simplified version viewed by a customer. A customer account may view a sanitized unified communication report. A sub account of the customer may have access to a view even further simplified and sanitized. For example a resource of the customer account may be sanitized in the report viewed by the sub account.

Block S which includes transmitting the unified log report functions to respond to a request with log information augmented for outside use. The unified log report can be transmitted as a reply to the request. The transmitted log report may alternatively be delivered or made accessible in an alternative endpoint. For example a request may prompt the generation of the log report but the log report may be made accessible in a second location after the log information is sanitized. As described elsewhere the sanitized log information can be pre processed and automatically organized into info graphics or pre organized data but the log information may alternatively be returned in a data serialization format for handling and processing by the outside entity. In one variation the unified log report is returned in a programmatic format such as in response to an API call or application instruction. In another variation the log report is communicated to a destination endpoint. For example the log report may be automatically delivered to a service health email address which can be configured by the account manager. The unified log report may be embedded in the communication. Alternatively a URL may be included to the related log report or reports. In a third variation the unified log report is converted into rendered user interface element. The unified log report interface element may be static but the report interface is more preferably interactive. In one variation the unified log report is a communication sequence diagram representing the sequential transfer of information and actions between different resources as shown in . As shown in the details of different logged records can preferably be inspected. In another variation the unified log report can be a listed transcription of event records as shown in . As described below the report interface may include replaying the events sharing the report with a customer service agent finding similar log report occurrences exploring error resolutions debugging applications or any suitable use.

The method can additionally include transmitting a communication to a configured destination S which functions to notify an interested party of events. Transmitting a communication can include sending an email sending an HTTP message with log data to a callback URI sending a text notification or sending a communication to any suitable type of endpoint. In one variation a log report summary may be sent in the communication on a periodic basis e.g. hourly daily weekly etc. . In another variation the communication can be responsive to an event and the communication can include one or more specific log reports as shown in . For example a log report associated with an error can be sent when the error is encountered. Transmitting a communication can include embedding a link to a unified communication report. The communication may alternatively include a data representation of the unified communication report.

Preferably a log report interface will include navigation tools to find explore and access log reports of different collections. In one implementation the log report interface will include a time ordered list of relevant log reports. In one variation the log reports may be filtered based on different characteristics as shown in . There could be an all category showing log reports for all calls. There could be an error category or categories for different error types such as application timeout communication error or any suitable type of error. There could be a warning category for log information that didn t encounter an error but have been flagged. For example communications that had low media quality short duration e.g. 

In one variation the log report interface includes a searching tool. Accordingly the method can include indexing properties of the log information S which functions to allow search queries to be made using various properties of the individual log records. Once indexed a request to access log information may provide different search query parameters that define the results of the query. The search is preferably completed using the indexed log information and then the results are returned in a suitable format. For example a user can use the log report interface to search for all log reports that included an instruction to play the mp3 file test.mp3. Events that satisfy this query can be identified and then the appropriate log reports formed. In the user interface the search results may prevent a summary description of the log such as the time and associated endpoints. The search results may additionally show a preview of the log report.

In one particular use case the log report interface is used in conveying errors encountered by the system. Accordingly the method can include detecting an error and classifying the error in a unified communication report. In one variation the error is an event that is logged during execution of the application platform. Error classification may be based on error codes. Additionally error classification may process the actual events in a collection and generate a summary of the error. For example an error may be encountered at one point in a sequence of events but there may be a subset of events that may be involved in resulting in the error. The log report interface may highlight the involved events in the unified log report as an annotation. The event classification can similarly be used in making the log reports more navigable. For example the method may classify errors based on which ones are solvable. Solvable errors may be of interest to an account holder because they may be easily avoided. Unified log report classification can additionally allow similar collections to be grouped. In one variation event sequences within individual log reports are analyzed and related to log reports with substantially similar sequence patterns. These event sequence patterns may be predefined. For example conference call event patterns phone tree event pattern and other common event log patterns may be predefined so that these categories can be easily accessed by a customer. Alternatively the event sequence patterns are automatically processed. Any suitable approach to event sequence pattern comparison may be used. As one simple approach similar log reports may be identified by identifying other log reports where the communication session is controlled by the same application server URI. Identifying similar log reports can be used to show similar log reports for a given log report which functions to provide a simple interface for a customer account to compare the differences between different scenarios.

The method can additionally include annotating a unified log report S as shown in . The annotations can be informational markup which can be conveyed in an API response. However the annotations are more preferably rendered user interface elements that identify and optionally provide information relating to the annotated item. For example errors are preferably annotated. Annotating an error can include marking the error providing an explanation of the error providing a possible resolution or adding any suitable supplemental information. An explanation of the error may use templating to use specific data from that unified log report. Annotation can similarly be used for other reasons such as showing log reports related to a subsection of a particular log report

The log reports may have particular benefits to aiding in the process of providing customer support to users of the platform. Preferably a customer care representative can be enabled to access and view log reports of an account. In one variation a customer care agents is given privileges to view log reports with less sanitization than a customer account. For example internal log information hidden from a customer agent may be viewable by the customer account. Additionally the log report interface of a customer care agent may allow the agent to view the log reports as seen by the customer account. The method may additionally include establishing a synchronized browsing session between an account user and platform agent which functions to allow the log report interface of a customer account to be at least partially controlled by a platform agent as shown in . A synchronized browsing session may be established by the customer account or the platform agent entering a shared code. Alternatively a platform agent may invoke the sharing session by obtaining the account name. The synchronized browsing session may allow a platform agent to pull up appropriate logs mark or annotate a log report or perform any suitable control of the log report to facilitate helping a customer resolve a problem.

The method may additionally include replaying at least a subset of events recorded in a log report. The log report preferably is made up of several events at least some of which are actions originating from the platform e.g. outbound SIP or HTTP communication . The actions that were performed to result in an event record can be replayed in its original format or alternatively in an augmented format e.g. changing a parameter of the action . An event replay debugging tool may be provided to allow any level of action replay such as single action replay stepping through actions or replaying a set of actions from a starting point as shown in . For example if an application encountered an error when the platform talked to an application server of an account holder the account holder could replay the HTTP request made to the application server. The HTTP message originally sent can be resent to the application server URI. The application server will preferably make a response. This response can be compared to the original response. The method preferably additionally includes comparing two log reports as shown in . In the replay version an original version can be compared to the replayed version. Differences can be highlighted revealing what is added and what is missing between at least two versions. The log report comparison can additionally be applied to any two or more log reports.

The system and methods of the preferred embodiment and variations thereof can be embodied and or implemented at least in part as a machine configured to receive a computer readable medium storing computer readable instructions. The instructions are preferably executed by computer executable components preferably integrated with the platform log storage system and an information sanitization engine. The computer readable medium can be stored on any suitable computer readable media such as RAMs ROMs flash memory EEPROMs optical devices CD or DVD hard drives floppy drives or any suitable device. The computer executable component is preferably a general or application specific processor but any suitable dedicated hardware or hardware firmware combination device can alternatively or additionally execute the instructions.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

