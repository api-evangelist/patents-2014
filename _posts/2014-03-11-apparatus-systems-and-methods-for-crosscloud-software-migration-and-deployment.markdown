---

title: Apparatus, systems and methods for cross-cloud software migration and deployment
abstract: Embodiments disclosed facilitate obtaining a cloud agnostic representation of a first Virtual Machine Image (VMI) on a first cloud; and obtaining a second VMI for a second cloud different from the first cloud, wherein the second VMI is obtained based, at least in part, on the cloud agnostic representation of the first VMI.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430213&OS=09430213&RS=09430213
owner: CLIQR TECHNOLOGIES, INC.
number: 09430213
owner_city: San Jose
owner_country: US
publication_date: 20140311
---
The present invention relates to the field of distributed computing and in particular to apparatus systems and methods to facilitate cross cloud migration and deployment of cloud based software including virtual machine images.

The performance of computing applications may often be increased by distributing the computational workload across nodes in a networked cluster of computers. A physical networked cluster of computers with attendant software facilitating virtualization is often referred to as a cloud or cloud infrastructure or simply an infrastructure. The software layer permits the underlying physical hardware associated with clouds which can include servers memory storage and network resources to be viewed as virtualized units. These virtualized units represent some fraction of the underlying computing hardware or resources supported by the cloud infrastructure. Therefore from a logical perspective clouds may be viewed as a collection of virtual machines VMs . Typically a cloud may provide a variety of VM types with different computing CPU memory storage networking and Operating System OS options.

Clouds thus may be viewed as services that provide access to infrastructure remotely including compute storage and network resources so that the resources can be reserved provisioned accessed and released programmatically. For example programmatic interfaces such as Application Programming Interfaces APIs System Development Kits SDKs Web Services etc. may be used to access resources made available by clouds remotely over a wide area network WAN . For example in publicly available clouds or public clouds these resources can be accessed programmatically over the Internet and are made available as VMs on a pay per use basis. On the other hand organizations may have private clouds for use by employees or customers within an enterprise s data center.

VMs are typically software implementations of a computer. VMs often provide a complete system platform which may also support the execution of a complete operating system by the VM in addition to one or more applications. VMs may be instantiated on clouds using images which are typically filesystem images which include an operating system application servers and or application s to be executed by the VM data and a cloud specific portion. The cloud specific portion of the image may include for example cloud specific configuration settings for configuration of storage resources compute resources security access rights etc for the cloud on which the VM is being instantiated.

In addition each cloud provider may use proprietary image formats for virtual machine images. Further each cloud may have differing cloud specific bootstrapping and management mechanisms as part of the image. These bootstrapping mechanisms may specify initialization and other actions to be taken at boot time when the VM is instantiated.

For users who deploy or desire to deploy one or more applications on multiple clouds the process of migrating images between clouds and or creating images tailored to each cloud on which an application is being deployed can be time consuming resource intensive and error prone. In addition users may often lack information about how the image was initially setup and or any image related application configuration thereby making it difficult to recreate a functionally equivalent image on a different cloud. Therefore cost time and expense may be significant impediments to multi cloud deployment of applications and or migrating applications between clouds thereby effectively creating cloud lock in where the user is locked to a specific cloud provider.

Thus there is a need for systems methods and apparatus that facilitate the deployment and migration of application between clouds while maintaining functional equivalence.

Consistent with embodiments disclosed herein apparatus systems and methods for facilitating the deployment and migration of application between clouds.

In some embodiments a processor implemented method may comprise obtaining a cloud agnostic image representation the cloud agnostic image representation being obtained from a first Virtual Machine Image VMI on a first cloud the cloud agnostic image representation being obtained in part by removing a cloud specific layer in the first VMI and obtaining a second VMI for a second cloud different from the first cloud wherein the second VMI is obtained based at least in part on the cloud agnostic image representation.

Embodiments disclosed also pertain to an apparatus comprising at least one processor coupled to at least one cloud wherein the at least one processor is configured to obtain a cloud agnostic image representation the cloud agnostic image representation being obtained from a first Virtual Machine Image VMI on a first cloud the cloud agnostic image representation being obtained in part by removing a cloud specific layer in the first VMI and obtain a second VMI for a second cloud wherein the second VMI is obtained based at least in part on the cloud agnostic image representation.

Additional embodiments pertain to a computer readable medium comprising instructions which when executed by a processor perform steps in a method comprising obtaining a cloud agnostic image representation the cloud agnostic image representation being obtained from a first Virtual Machine Image VMI on a first cloud the cloud agnostic image representation being obtained in part by removing a cloud specific layer in the first VMI and obtaining a second VMI for a second cloud different from the first cloud wherein the second VMI is obtained based at least in part on the cloud agnostic image representation.

In addition in some embodiments apparatus may comprise at least one processing means coupled to at least one cloud means wherein the at least one processing means comprises means for obtaining a cloud agnostic image representation the cloud agnostic image representation being obtained from a first Virtual Machine Image VMI on a first cloud means the cloud agnostic image representation being obtained in part by removing a cloud specific layer in the first VMI and means for obtaining a second VMI for a second cloud means wherein the second VMI is obtained based at least in part on the cloud agnostic image representation.

Embodiments also relate to software firmware and program instructions created stored accessed or modified by processors using computer readable media or computer readable memory. The methods described may be performed on processors various types of computers and computing systems including distributed computing systems such as clouds. The methods disclosed may also be embodied on computer readable media including removable media and non transitory computer readable media such as but not limited to optical solid state and or magnetic media or variations thereof and may be read and executed by processors computers and or other devices.

In accordance with embodiments disclosed herein apparatus systems and methods to facilitate secure communications for cloud based applications are presented.

Further VMI may include cloud specific layer which may specify configuration settings bootstrapping and other initialization routines that are specific to the cloud on which the software VMI is being deployed. Thus cloud specific layer may be viewed as encapsulating activities that are used for cloud specific purposes including cloud settings initialization bootstrapping image packaging drivers hypervisor and or virtual machine monitor related etc. 

For example the VMI may comprise a VM and the bootstrapping mechanisms may specify initialization and other actions to be taken at boot time when the VM is instantiated. As an example the Amazon Web Service Elastic Cloud Computing EC2 Amazon Machine Image AMI relies on a special cloud init daemon to handle initial VM host name change user secure shell SSH key pass in and other VM initialization during boot up time. In contrast a VMware based private cloud will rely on the VMware Tools service to pass in key value pair guest information from the cloud management system.

In addition each cloud provider may use proprietary image formats for virtual machine image packaging. For example Amazon Web Service Elastic Cloud Computing AWS EC2 uses the Amazon Machine Image AMI format but a VMware based private cloud may use VMware s Virtual Machine Disk VMDK format.

Conventional Physical to Virtual P2V techniques for image conversion typically use an existing disk volume as is to build a cloud image. Thus if the image was intended for Cloud then the cloud image built from the disk volume may not work or will not boot up correctly on Cloud because cloud specific layer may be incompatible with Cloud . Further to the extent that cloud providers provide tools these tools typically allow only the conversion of physical machines into virtual machines that are supported by the specific cloud vendor. In addition because virtual machine image formats are often proprietary the tools provided may only support popular formats and may not work with an arbitrary virtual machine image format.

Because applications are constantly evolving users desiring to run an application on multiple clouds are faced with the resource intensive and time consuming task of maintaining multiple changing cloud images with cloud specific layers for each cloud on which the application is to be run. Again to the extent that there are Virtual to Virtual V2V tools to convert a source cloud image to a target cloud image these V2V tools typically work only with a specific source cloud image i.e. for a select cloud provider and further may only permit the source cloud image to be converted to a single target cloud image. Thus while V2V tools may be supplied by a cloud provider to migrate in from a competitor cloud providers do not provide V2V tools to migrate out . At any rate it is impractical for an application provider or user to run a plethora of different tools provided by different entities for P2V or V2V conversion of cloud images while also guaranteeing application integrity and functionality across multiple clouds.

In general in a multi cloud environment a V2V transformation of an image from source to target cloud based on conventional techniques would use a source target cloud specific transform implementation. Accordingly if there are total of n clouds achieving arbitrary cross cloud transformation based on conventional schemes would n n 1 transformation implementations. In addition for each new added cloud e.g. for n 1 clouds there will be an additional 2n transformation implementations n transformations from the other n clouds to the newly added cloud and n transformations from the newly added cloud to the other n clouds . Thus in a system of n clouds each additional cloud supported will result in a net extra 2n transform implementations. Even if V2V support is provided only between a few clouds with the clouds themselves continually evolving and being updated with new functionality maintaining and updating transform implementations may be impractical and infeasible.

Therefore embodiments disclosed facilitate cross cloud VM image deployment and migration. Embodiments disclosed also facilitate VMI migration and deployment from an arbitrary first cloud to an arbitrary second cloud which may be different from the first cloud.

System may also include one or more clouds which are shown as Clouds . . . N and collectively referred to as Clouds . Clouds may communicate with at least one System Manager using communication links . Communication links may permit secure communication between System Manager and one or more of Orchestrator Cloud Standardization Layer Application Deployment Layer and or Cloud Gateway . System Manager may be in communication with one or more clouds at any time.

System may also comprise VMI which may be specific to Cloud . System may facilitate cross cloud software and or VMI transformation and migration in a manner consistent with disclosed embodiments. For example VMI which is specific to Cloud may be obtained from VMI and migrated or deployed to Cloud in a manner consistent with disclosed embodiments.

In some embodiments System Manager may manage application topology information and coordinate various VMIs with Orchestrator . For example System Manager may receive maintain and update user information cloud information application related information e.g. application profile and other data such as job history policies etc. In some embodiments System Manager may provide information about the application being deployed. In some embodiments System Manager may also facilitate user views of application files and data on shared storage may move the application files and data to cloud storage and provide functionality to synchronize the application files and data between clouds.

In some embodiments System Manager may serve as a storehouse and manager of information pertaining to user activities. For example System Manager may act as a management layer to initiate and manage application deployment and monitoring activities.

In addition System Manager may also manage automated tasks which in some embodiments may have been initiated by Orchestrator . System Manager may also call or invoke functions implemented by Orchestrator in order to perform various system related activities. In some embodiments System Manager may maintain a relational database or data repository with information pertaining to system users including user authentication and authorization information a list of clouds . . . N and available cloud configurations for each cloud information pertaining to applications entities policies that a user may have specified etc.

In some embodiments Orchestrator may use a common application representation to deploy and run a given application on any cloud irrespective of implementation differences pertaining to the provisioning and utilization of application resources on the individual clouds in part by using functionality provided by Cloud Standardization Layer .

In some embodiments Cloud Standardization Layer may include functionality to facilitate standardization of library constructs such as shared storage network cluster security etc. across a variety of cloud providers. Although cloud providers may have provider specific Application Programming Interfaces APIs and other infrastructure differences Cloud Standardization Layer may provide applications a cloud agnostic or a cloud infrastructure independent view of resources including compute storage and network resources. For example Cloud Standardization Layer can be a repository for various functional modules that permit applications to utilize various resources including shared storage server types clusters and features such as queues security etc. on each cloud in a cloud agnostic manner.

In some embodiments Cloud Standardization Layer may maintain resource standardizations for various clouds such as exemplary clouds . . . N as well as references to cloud specific implementations of the standardizations for clouds . In some embodiments exemplary Cloud Standardization Layer may also maintain service level agreements SLAs capability information about each cloud resource information pertaining to cloud availability reliability and security and performance and pricing information. Information may be maintained by Cloud Standardization Layer by using metadata XML files or databases which in some implementations may be persistent. In some implementations the capability information can be stored as key value pairs in a database. Because individual clouds may have different capabilities for a standardized resource type capability information may be indexed by cloud.

In some embodiments the common application representation may take the form of application descriptors not shown such as pattern and system primitives which may be input to Orchestrator . The pattern and system primitives may describe the execution patterns as well as node storage communication and network characteristics pattern and system primitives. Exemplary application descriptors can include information such as application software and hardware requirements application profile whether memory intensive Input Output intensive CPU intensive etc. specification of a distributed computing paradigm application steps for workflow style applications . Exemplary embodiments of these primitives Orchestrator and cloud coordinator gateway have also been described in co pending U.S. patent application Ser. No. 13 024 302 filed Feb. 9 2011 entitled Apparatus Systems and Methods for Deployment and Management of Distributed Computing Systems and Applications which has been incorporated by reference in its entirety into the present application.

In some embodiments Orchestrator may facilitate the deployment running and monitoring of applications on various clouds. For example Orchestrator may dynamically launch VM on a selected cloud for application execution in response to an execute command entered by a user.

Orchestrator may also maintain routines and other program code that implement algorithms for deploying optimizing managing and monitoring application runs on clouds. In some embodiments routines and other functions performed by Orchestrator may be managed and initiated by the System Manager . Orchestrator may also report back the status and results of the various orchestration activities to System Manager . In one embodiment Orchestrator may directly query System Manager for information such as application data policies and cloud information.

Tasks performed by Orchestrator on Clouds may be facilitated by Cloud Standardization Layer . For example functionality provided by Cloud Standardization Layer may permit Orchestrator to use infrastructure independent representations of application code to deploy applications. In some embodiments the infrastructure independent or cloud independent or cloud agnostic program code may be common across all clouds because the Cloud Standardization Layer may uses Application Deployment Layer which may comprise cloud specific Plugins APIs and Cloud Specific Libraries to perform tasks for Orchestrator on any given cloud . In some implementations the deployment and running of applications and the dynamic management of clusters and other cloud resources may be facilitated by Cloud Application Deployment Layer .

In some embodiments the dynamic management of VMs clusters and other cloud resources may be facilitated by using a node management service running on a cloud coordinator gateway or cloud gateway or gateway for a specific cloud . Gateway may also maintain Cloud APIs and Cloud specific Libraries.

Cloud Specific Libraries and Cloud APIs may comprise a library of implementations for primitives and composite interfaces respectively for a specific cloud . In some embodiments Cloud APIs and Cloud Specific Libraries may be invoked using Cloud Plugins. For example Cloud Plugins may be used to invoke appropriate Cloud APIs and routines from Cloud Specific Libraries that permit the deployment and running of applications on Clouds where the applications may have been described using application descriptors and standardized primitives from Cloud Standardization Layer .

In some embodiments when an application is to be deployed a gateway may use Cloud APIs and Cloud Specific Libraries to perform deployment and execution tasks for cloud . For example shared storage primitives on Cloud Standardization Layer may lead to instantiation of a DFS shared storage implementation on an Amazon cloud while instantiating the shared storage implementation on a Terremark cloud will set up NAS SAN.

In some embodiments gateway may also launch one or more agents not shown which can be deployed on Cloud . In some embodiments functionality specified or configured by the user may be implemented by gateway Orchestrator and or Cloud Application Deployment Layer which in some implementations may include software agents running on the various clouds . These software agents may monitor application runtime statistics collect cloud related information such as but not limited to cloud load information pricing information security information etc. and or collect information related to VMs and or user actions.

For example the agents may be configured to monitor VMs for example by selectively capturing and or removing one or more cloud specific function calls cloud specific initialization cloud specific bootstrapping etc. In some embodiments the agents may be configured to selectively capture and or selectively remove one or more cloud specific actions prior to VMI launch. For the purposes of the description a VM launched from a VMI is referred to as VM . For example an agent running on cloud and or in VM may capture a subset of actions taken by Cloud Specific layer in VM while removing others. In one embodiment the agents may capture and or remove cloud specific function calls cloud specific initialization cloud specific bootstrapping and or all commands prior to the launch of application s in Application Layer . In some embodiments the agents may capture all information following the launch of VM on cloud .

In some embodiments the agents may report the actions performed as well as other task status back to gateway Orchestrator and or System Manager . For example in one embodiment the agent s may collect and or remove cloud specific VM information such as cloud initialization bootstrapping other cloud specific configuration actions selectively when VM is launched on a first cloud and may report the collected information pertaining to Cloud Specific layer to one or more of gateway Cloud Standardization Layer Orchestrator and or System Manager . In some embodiments the agents may provide the collected information to one or more modules in Cloud Standardization Layer which may obtain a cloud agnostic representation of the collected information.

As shown in in some embodiments to convert a VMI for an application that runs on cloud provider to VMI that runs on cloud provider the OS layer and Application layer may be maintained but cloud specific layer may be removed prior to conversion of VMI to a portable image which may then be run on cloud provider . In some embodiments the portable image may take the form of a cloud agnostic representation. For example if VM is being run on an Amazon cloud Amazon specific settings and configurations may be removed. For example Amazon settings such as the cloud init daemon which is used to handle initial VM host name change user secure shell key pass in and other VM initialization during boot up time may be removed. Next orchestrator which may be associated with gateway and or Cloud Abstraction Layer on cloud may retrieve the image data derived from VMI from the cloud agnostic representation insert the cloud specific settings for cloud and create VMI on cloud . For example if VM is being run on a VMware cloud then the VMware Tools service which is used to perform corresponding functions in a VMware private cloud may be inserted to obtain VMI .

In some embodiments a cloud specific implementation VMI for a cloud i may be used to obtain a cloud agnostic representation by Cloud Standardization Layer by removing cloud specific settings. Next a cloud specific implementation VMI may be obtained from the cloud agnostic representation by adding cloud specific settings for cloud j to obtain VMI for a cloud j by Application Deployment Layer . For example the infrastructure independent representation of cloud specific layer may be used at least in part to obtain VMI for one of various target clouds j such as on one or more of Amazon EC2 Terremark vCloud Rackspace Cloudserver Microsoft Azure Savvis or private clusters which may be different from the first cloud .

In some embodiments to facilitate creating of VMI after launching VM volume data for VM on cloud may be copied and output in a lossless compressed raw format and or another data format compatible with data representation in Cloud Standardization Layer . In some embodiments a cloud agnostic representation of volume data for VM may be maintained in Cloud Standardization Layer .

Further in some embodiments based in part on the functionally equivalent cloud agnostic representation of cloud specific layer a new VM not shown in may be launched on cloud . In some embodiments the new VM may be launched based on any operating system compatible with the OS in OS layer . For example based on the operating system type in VMI the new VM may take the form of a helper VM with a compatible OS. Accordingly the new and or helper VM may be launched on second cloud . For example if VM is based on CentOS 6.2 but the second cloud supports a base image of CentOS 6.3 a helper VM may be launched with OS layer based on a CentOS 6.3. Further the cloud agnostic and or lossless compressed raw representation of volume data for VM as stored in Cloud Standardization Layer may be downloaded to cloud for the newly launched VM on cloud .

In some embodiments based on the volume data size information a new persistent volume may be created and attached to the new VM. For example commands specific to cloud may be used to create and attach the volume to the new VM. In some embodiments these commands may be provided by Cloud Abstraction Layer and implemented by Application Deployment Layer in second cloud . Next the downloaded volume data may be unbundled to the attached volume as volume data . In some embodiments the unbundling process may use Application Deployment Layer on cloud to convert a cloud agnostic representation of the data in Cloud Standardization Layer to a format compatible with or supported by cloud .

Further during the launch of the new VM the cloud specific layer may be obtained with initialization and configuration settings specific to cloud . In some embodiments Application Deployment Layer on cloud may be used to obtain and add cloud specific settings for cloud to the newly launched VM. For example if cloud is a VMware implementation then VMware specific settings and configuration such as a VMware Tools daemon may be added.

In some embodiments volume may then be detached. In some embodiments the routines to detach volume in cloud may be derived from instructions in Cloud Standardization Layer and implemented using Application Deployment Layer on cloud .

Next a bootable virtual machine image VMI may be obtained from detached volume . For example instructions commands to obtain VMI may be obtained from Cloud Standardization Layer and implemented using Application Deployment Layer on cloud .

Thus system may facilitate cross cloud VMI deployment and migration in a manner consistent with embodiments disclosed herein. System is merely exemplary and various additional functional modules not shown in and or a different architecture may be used to facilitate cross cloud VM image deployment and migration in a manner consistent with embodiments disclosed herein.

Exemplary User Interface Layer may also include various end user modules that permit user customization and configuration of system . Exemplary Application Importer Module may facilitate the importation of new applications and or the migration of applications and or images in system . In some embodiments imported applications may be displayed to users using a desktop style view where icons representing the various applications are shown to the user in a window or browser tab. In some embodiments pre published applications in a marketplace associated with system for example applications in an application library or app store associated with or supported by system may be imported by users directly onto their desktop view. In some embodiments Application Importer Module may allow users to license or buy one or more of pre published applications. In general any software application may be imported using exemplary Application Importer Module in User Interface Layer

In some embodiments Policy Settings Module may provide appropriate graphical user interfaces and other features to permit users to set modify and or delete policies which may be implemented using a policy engine. For example users may set policies that limit the clouds and or configurations that specific user s and or application s may use migrate to limit the monetary budget available for an application run or a series of runs etc.

In some embodiments Execute Module may provide user interfaces to permit users to select an application and or a first source VMI a cloud from available clouds . . . N specify a second cloud for the second target VMI . In some embodiments VMI may then be obtained from VMI on first cloud in a manner consistent with disclosed embodiments. In some embodiments the VMI may be launched on the selected second cloud 

In addition as indicated by the dashed lines User Interface Layer may include several other modules not shown to allow users to specify system functionality related to reporting auditing billing and permit viewing of application files and data on shared storage. For example Reporting may provide analytical reports and runtime statistics over and or other information. The reports may be diced and sliced based on user application and or other criteria. Auditing may use agent monitoring to track user actions and report them. Billing may track the price of each job for invoicing to the customer. Modules in User Interface Layer may also allow users to set permissions and other attributes on application and storage files in order to facilitate sharing and collaboration with other users.

Exemplary System Manager may manage user information and coordinate various user tasks with Orchestrator . For example System Manager may receive maintain and update user information cloud information application information and other data such as job history housekeeping information etc. In some embodiments System Manager may also facilitate user views of application files and data on shared storage may move the application files and data to cloud storage and synchronize the application files and data between clouds.

In some embodiments based on user input such as actions in Execute module System Manager may communicate with Orchestrator to begin the process of migration deployment and or execution of the selected VM on a target cloud . Orchestrator may then use techniques described herein including cloud agnostic representations based in part on functionality provided by Cloud Standardization Layer to obtain deploy and run VM on cloud 

In some embodiments System Manager may serve as a storehouse and manager of information pertaining to user activities. For example System Manager may act as a management layer to initiate and manage application deployment and monitoring activities. In one embodiment System Manager may interact with modules in User Interface Layer in order to facilitate the performance of management tasks on applications that may have been initiated by the user through User Interface Layer . Management tasks facilitated by System Manager may include for example initiating application deployment facilitating secure communications configuring user and cloud accounts specifying policies for application runs and specifying base metrics around desired application price and performance.

In addition System Manager may also manage automated tasks which in some embodiments may have been initiated by Orchestrator . System Manager may also call or invoke functions implemented by Orchestrator in order to perform various system related activities. For example System Manager may invoke a secure communications module to facilitate secure communication with a new VM. In some embodiments System Manager may maintain a relational database or data repository with information pertaining to system users including user authentication and authorization information a list of clouds . . . N and available cloud configurations for each cloud policies that a user may have specified etc.

In some embodiments Orchestrator may use a common application or cloud agnostic representation to deploy and run specified software and or applications on any cloud irrespective of implementation differences pertaining to the provisioning and utilization of application resources on the individual clouds in part by using functionality provided by Cloud Standardization Layer .

In some embodiments the common application or cloud agnostic representation may take the form of application descriptors not shown which may be input to Orchestrator . In some embodiments a user may specify applications to import using Application Importer module and application descriptors which may include various primitives such as pattern and system primitives may be used to describe applications to Cloud Standardization Layer .

In some embodiments Orchestrator may facilitate the deployment running and monitoring of applications on various clouds. For example Orchestrator may dynamically invoke functionality to build VMI on selected cloud from VMI on cloud in response to an execute command entered by a user using an interface presented by Execute module . In some embodiments an automatic trigger may be set by the user to migrate or deploy a VM across clouds when some condition which may be cloud specific is met. In some embodiments a user interface may permit selection of a first cloud a first VMI and the second cloud where the first and second clouds are selected from a plurality of available clouds and the methods consistent with disclosed embodiments may be used obtain a VMI for the second cloud.

Orchestrator may maintain routines and other program code that implement algorithms for deploying optimizing managing and monitoring application and VM runs on clouds. In some embodiments routines and other functions performed by Orchestrator may be managed and initiated by the System Manager . Orchestrator may also report back the status and results of the various orchestration activities to System Manager . In one embodiment Orchestrator may directly query System Manager for information such as application data policies and cloud information.

Tasks performed by Orchestrator on Clouds may be facilitated by Cloud Standardization Layer . For example functionality provided by Cloud Standardization Layer permits Orchestrator to use infrastructure independent or cloud agnostic representations of application code to deploy applications. In some embodiments the infrastructure independent or cloud independent or cloud agnostic program code may be common across all clouds because the Cloud Standardization Layer may use functionality provided by Application Deployment Layer to perform tasks for Orchestrator on any given cloud . For example Cloud Standardization Layer may use functionality provided cloud specific Plugins APIs and Cloud Specific Libraries to perform tasks for Orchestrator on any given cloud 

In some embodiments the dynamic management of cloud resources may be facilitated by using a service such as a node management service running on gateway for a specific cloud . Gateway may also maintain Cloud APIs such as Cloud APIs Cloud APIs . . . Cloud N APIs N. In addition gateway may also maintain Cloud specific Libraries such as Cloud Specific Libraries Cloud Specific Libraries Cloud N Specific Libraries N etc. The node management service may act as an intermediate layer between the cloud provider and the cloud orchestrator and facilitate the addition or removal of nodes.

Cloud Specific Libraries and Cloud APIs may comprise a library of implementations for primitives and composite interfaces respectively for a specific cloud . In some embodiments Cloud APIs and Cloud Specific Libraries may be invoked using Cloud Plugins . For example Cloud Plugins may be used to invoke appropriate Cloud APIs and routines from Cloud Specific Libraries that permit the deployment and running of applications on Clouds where the applications may have been described using application descriptors and standardized primitives from Cloud Standardization Layer .

In some embodiments when a VM is to be deployed on a cloud gateway may use Cloud APIs and Cloud Specific Libraries library to perform deployment and execution tasks for that cloud . For example shared storage primitives on Cloud Standardization Layer may lead to instantiation of a DFS shared storage implementation on an Amazon cloud while instantiating the shared storage implementation on a Terremark cloud will set up NAS SAN. In some embodiments gateway may also launch one or more agents which can be deployed on nodes on Clouds to monitor and report task status back to gateway and or to perform other functions.

In some embodiments functionality specified or configured by the user in User Interface Layer may be implemented by one or more modules in Cloud Application Deployment Layer which in some implementations may include software agents running on a server and or on the various clouds. These software agents may perform specific actions monitor application runtime statistics collect cloud related information such as but not limited to cloud load information pricing information security information etc. and or collect information related to VM and or user actions.

In some embodiments the software agents may run on each VM and may monitor cloud specific actions including initialization routines bootstrapping and other configuration performed by the VM. As another example the software agents may collect data for each application or VM run which may include but is not limited to the time of the run cloud name cloud configuration for the run the pricing of that configuration machine type OS type cluster size storage size memory size network backbone type storage implementation data pertaining to success failure abnormal termination and cause latency length of an application run throughput number of transactions or requests cost etc.

For example an agent on each node of a cluster may monitor application VM runs. The data gathered and reported by the agent at a cluster node may be aggregated and used at the gateway level to monitor to track performance and costs across applications VMs for a user and or client. In some embodiments System Manager may aggregate data across users and or applications by cloud and store the data in a form that may be used for analytics and recommendation purposes.

In step VM may be launched on source first cloud using VMI . For example a user may select the first cloud the first VMI and the second cloud from a plurality of available clouds and one or more modules in system may be used to launch selected VMI on selected cloud 

Next in step cloud specific settings for first cloud may be removed. For example an agent and or one or more modules associated with gateway and or Application Deployment Layer may remove cloud specific layer . For example if VM is being run on an Amazon cloud Amazon specific settings and configurations may be removed and or reported. For example in one embodiment Amazon settings such as a cloud init daemon may be removed.

In step in some embodiments volume data after removal of cloud specific layer associated with the first VM may be copied and output as a cloud agnostic representation of volume data in a lossless compressed raw format and or a another data format compatible with data representation in Cloud Standardization Layer . For example exemplary volume data after removal of cloud specific layer associated with the first VM on cloud may be copied and output as a cloud agnostic representation of volume data In some embodiments the data may be output in a lossless compressed raw format and or another data format compatible with data representation in Cloud Standardization Layer . For example exemplary volume data after removal of cloud specific layer associated with the first VM on cloud may be copied and output in an appropriate format. In some embodiments a cloud agnostic representation of volume data after removal of cloud specific layer may be stored and maintained using functionality provided by Cloud Standardization Layer .

Thus in some embodiments in steps through a cloud agnostic image representation may be obtained from a first VMI on a first cloud in part by removing a cloud specific layer in the first VMI. The cloud agnostic representation of the first VMI may be stored and maintained using functionality provided by Cloud Standardization Layer .

In step in some embodiments based in part on the cloud agnostic representation obtained from VM in Cloud Standardization Layer a new second VM may be launched on cloud . In some embodiments the new VM may be launched based on any operating system compatible with the OS in OS layer . For example based on the operating system type in VMI the new VM may take the form of a helper VM with a compatible OS. Accordingly for example if the new and or helper VM is launched on second cloud and VMI is based on CentOS 6.2 but cloud supports a base image of CentOS 6.3 a helper VM may be launched with a corresponding OS layer based on a CentOS 6.3.

Further in step the cloud agnostic and or lossless compressed raw representation of volume data associated with VMI VMI as represented in Cloud Standardization Layer may be downloaded to cloud for the newly launched VM on cloud . For example the cloud agnostic representation of volume data e.g. volume data after removal of cloud specific layer as represented in Cloud Standardization Layer may be downloaded to cloud .

Next in step in some embodiments based on the volume data size information a new persistent volume may be created and attached to the new VM. For example commands specific to cloud may be used to create and attach the volume to the new VM. In some embodiments these commands may be provided by Cloud Abstraction Layer and implemented by Application Deployment Layer in cloud . For example commands specific to cloud may be used to create and attach the volume to the new VM based on cloud agnostic commands provided by Cloud Abstraction Layer and implemented by Application Deployment Layer in cloud .

Next in step the downloaded volume data may be unbundled or restored to the attached volume as volume data . In some embodiments the unbundling process may use Application Deployment Layer on cloud to convert a cloud agnostic representation of the data in Cloud Standardization Layer to a format compatible with or supported by cloud . For example the downloaded volume data may be unbundled to the attached volume as volume data by converting the cloud agnostic representation of the volume data in Cloud Standardization Layer to a format compatible with or supported by cloud 

Further in step in some embodiments volume data may be augmented with the addition of VM initialization and configuration settings specific to cloud . In some embodiments Application Deployment Layer on cloud may be used to obtain and add cloud specific settings for cloud to the newly launched VM. For example if the newly launched VM is on a cloud which is a VMware implementation then VMware specific settings and configuration such as a VMware Tools daemon may be added.

In step in some embodiments volume may then be detached. In some embodiments the routines to detach volume in cloud may be derived from instructions in Cloud Standardization Layer and implemented using Application Deployment Layer on cloud . For example if the new VM was launched on cloud then volume may be detached.

Next a bootable virtual machine image may be obtained from detached volume . which has been augmented with the addition of VM initialization and configuration settings specific to cloud . For example instructions commands to obtain VMI may be obtained from Cloud Standardization Layer and implemented using Application Deployment Layer on cloud . For example VMI may be obtained from detached volume 

In some embodiments steps through may be used to obtain a second VMI e.g. for a second cloud different from the first cloud i j and the second VMI may be obtained based at least in part on the stored cloud agnostic image representation obtained in steps through .

In some embodiments method may be used for example to transform a cloud specific VMI for a first cloud to VMI for a second cloud based in part on an infrastructure independent or cloud agnostic representation of cloud specific layer . In some embodiments the infrastructure independent representation of cloud specific layer may be maintained by Cloud Standardization Layer . For example a first VMI for first cloud may be transformed to obtain and run a second VMI on various target clouds such as on one or more of Amazon EC2 Terremark vCloud Rackspace Cloudserver Microsoft Azure Savvis and or various other clouds including private clouds which may be different from the first cloud . Thus for example a cloud specific implementation VMI which is functionally equivalent to VMI and which corresponds to cloud configuration may be obtained using method in a manner consistent with disclosed embodiments. VMI may then be launched or deployed on cloud .

Note that method is exemplary and for descriptive purposes only and functionality disclosed in one or more steps may be disclosed may be rearranged re ordered combined and or deleted in a manner consistent with disclosed embodiments as would be apparent to one of ordinary skill in the art.

In some embodiments in step a cloud agnostic image representation may be obtained. In some embodiments the cloud agnostic image representation may be obtained from a first Virtual Machine Image VMI on a first cloud wherein the cloud agnostic image representation may be obtained in part by removing a cloud specific layer in the first VMI.

In some embodiments the cloud agnostic image representation may be obtained by launching a first virtual machine VM on the first cloud based in part on the first VMI modifying volume data associated with the first VM by removing cloud specific settings for the first VM obtaining bundled volume data by bundling the modified volume data and storing a cloud agnostic representation of the bundled volume data.

Next in some embodiments in step a second VMI for a second cloud different from the first cloud may be obtained. The second VMI may be obtained based at least in part on the cloud agnostic image representation obtained in step .

In some embodiments the second VMI may be obtained in part by obtaining a cloud specific layer corresponding to the second cloud where the cloud specific layer corresponding to the second cloud may be obtained by augmenting the cloud agnostic image representation with cloud specific settings for the second cloud. In some embodiments the cloud specific layer corresponding to the second cloud may be obtained by launching on the second cloud a second virtual machine obtained from the cloud agnostic image representation. Further a stored cloud agnostic representation of volume data may be downloaded to the second cloud in a format compatible with the second cloud. The cloud agnostic representation of the volume data may be associated with cloud agnostic image representation obtained from the first VMI. Further a volume comprising the downloaded volume data to the second cloud may be i created and attached to the second VM ii augmented with cloud specific configuration settings for the second cloud and iii detached. In some embodiments the second VMI may be created based on the volume comprising the augmented volume data.

In some embodiments the second VMI may be obtained by i launching a second virtual machine VM on the second cloud based in part on the cloud agnostic image representation ii obtaining in a format compatible with the second cloud volume data for the second VM from the stored cloud agnostic representation of volume data associated with the cloud agnostic image representation iii augmenting the obtained volume data with cloud specific settings for the second cloud and iv creating the second VMI based on the augmented volume data. In some embodiments the stored cloud agnostic representation of volume data may be obtained by removing cloud specific settings for the first VM from volume data associated with the first VM. In some embodiments the second VM may be launched using an operating system that is compatible with but different from an operating system associated with the first VMI.

The VMI may then be launched or deployed on cloud . For example VMI may be launched or deployed on cloud .

Note that although the description above uses exemplary cloud infrastructures to describe possible implementations alternate implementations are envisaged and the methods described could be extended to other cloud infrastructures as would be apparent to one of ordinary skill in the art. Further although primitives composite interfaces and templates have been described as exemplary intermediate infrastructure independent representations other infrastructure independent intermediate representational schemes may also be used. In some embodiments software to facilitate conducting the processes described above can be recorded on computer readable media or computer readable memory. These include but are not limited to hard drives solid state drives optical media non volatile storage of various kinds removable media and the like.

In some embodiments the methods and modules described herein may be implemented using a variety of wired and or wirelessly networked processors various computers and computing devices including mobile devices such as smartphones notebooks and handheld computers and various distributed computing systems.

Other embodiments will be apparent to those skilled in the art from consideration of the specification and practice of one or more embodiments of the disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

