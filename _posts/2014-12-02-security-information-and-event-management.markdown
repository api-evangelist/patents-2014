---

title: Security information and event management
abstract: Systems and methods for universal interception of events. The methods involve: intercepting functions performed by an OS object manager which specify Physical Events (“PEs”) occurring therein, each PE comprising a real-time event occurring in an OS in runtime; obtaining PE information indicating which PEs are specified by the intercepted functions being performed by the OS object manager; analyzing the PE information to identify Virtual Events (“VEs”) which are associated with each PE, where each VE comprises an event occurring when one of a plurality of operations is performed by an OS subsystem which facilitates an occurrence of a respective PE; filtering VE information specifying the VEs identified as being associated with the PEs so as to generate filtered information specifying only select ones of the VEs; and placing the filtered information is a queue for subsequent processing to detect malware threats to a computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509708&OS=09509708&RS=09509708
owner: Wontok Inc.
number: 09509708
owner_city: Palm Beach Gardens
owner_country: US
publication_date: 20141202
---
The inventive arrangements relate to Security Information and Event Management SIEM . More particularly the inventive arrangements concern implementing systems and methods for universal interception of events in a computing system using a novel Universal Interception Manager UIM .

Various SIEM systems are employed for facilitating protection of computing devices from malware threats thereto. These SIEM systems comprise a plurality of SIEM sensors for detecting occurrences of events in network nodes. Data loggers are provided for logging information associated with each of the detected events occurring in the respective network node. A centralized data processor periodically accesses the data logs and retrieves the information therefrom. The retrieved information is aggregated from many sources such that operations of the whole system can be monitored. The sources include serves databases and applications. The information may then be subsequently processed to identify common attributes of events correlate the information based on the common attributes of the events issue alarms based on the correlated information and or generate charts with event data such that patterns of activity within the system can be detected.

The invention concerns implementing systems and methods for universal interception of events in a computing system. The methods involve intercepting a plurality of functions being performed by an Operating System OS object manager which specify physical events occurring therein. Each physical event comprises a real time event occurring in an OS at any point in runtime. Physical event information is obtained that indicates which physical events are specified by the intercepted functions being performed by the OS object manager.

The physical event information is then analyzed to identify a plurality of virtual events which are associated with each physical event. Notably in some scenarios different portions of the physical event information are analyzed simultaneously concurrently or asynchronously by at least two event handlers at any given time. Each virtual event comprises an event occurring when one of a plurality of operations is performed by an OS subsystem which facilitates an occurrence of a respective physical event.

Virtual event information is then filtered to generate filtered information specifying only select ones of the virtual events. The virtual event information specifies 1 the virtual events identified as being associated with the physical events and or 2 at least one attribute that characterizes a specific context of at least one operation requested by either a user mode program or a kernel mode program during runtime of the OS. In some scenarios the virtual event information is filtered based on previously specified security relevance of physical event types or virtual event types.

The filtered information is then serialized such that the information identifies the virtual events in an order defined by times at which corresponding ones of the physical events occurred. The serialized filtered information is placed in a queue for subsequent processing to detect malware threats to a computing device. Sometime thereafter the filtered information is dispatched to a data logger software program a malware detection software program or an intrusion detection software program.

In some scenarios the computing system may be part of a Security Information and Event Management SIEM based network. As such the methods may further involve logging the filtered information in at least one log file and providing a remote centralized data processor access to the log file. Operations are then performed by the remote centralized data processor for aggregating filtered information from a plurality of network nodes. The aggregated filtered information can be analyzed to detect said malware threats.

It will be readily understood that the components of the embodiments as generally described herein and illustrated in the appended figures could be arranged and designed in a wide variety of different configurations. Thus the following more detailed description of various embodiments as represented in the figures is not intended to limit the scope of the present disclosure but is merely representative of various embodiments. While the various aspects of the embodiments are presented in drawings the drawings are not necessarily drawn to scale unless specifically indicated.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by this detailed description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

Reference throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus discussions of the features and advantages and similar language throughout the specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize in light of the description herein that the invention can be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the indicated embodiment is included in at least one embodiment of the present invention. Thus the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

As used in this document the singular form a an and the include plural references unless the context clearly dictates otherwise. Unless defined otherwise all technical and scientific terms used herein have the same meanings as commonly understood by one of ordinary skill in the art. As used in this document the term comprising means including but not limited to .

The present invention generally concerns systems and methods for universal interception of events in a computing system using a novel Universal Interception Manager UIM . The UIM is a system level sensor cable of intercepting and handling virtually an unlimited number of asynchronous events with a very high degree of granularity while running concurrently with an Operating System OS object manager and with minimal performance degradation impact. Operations of the UIM will become evident as the discussion progresses. Notably the UIM can be implemented in hardware software and or both. Also OS object managers e.g. the Windows object manager are well known in the art and therefore will not be described herein.

Referring now to there is provided a schematic illustration of an exemplary architecture for a system that is useful for understanding the present invention. System is generally configured to identify and respond to security threats thereto. Notably the response time of system is faster as compared to that of conventional SIEM based systems such as that disclosed in the background section of this paper . In this regard system implements the novel UIM technology discussed herein for event detection within each network node.

As shown in system comprises a client computer a server computer and a Centralized Data Processor CDP . Each of the computers can operate as a single standalone device or can be connected e.g. using the network to other computing devices to perform various tasks in a distributed fashion. Each of the computers can comprise various types of computing systems and devices including a Personal Computer PC a tablet PC a laptop computer a desktop computer or any other device capable of executing a set of instructions sequential or otherwise that specifies actions to be taken by that device. It is to be understood that a device of the present disclosure also includes any electronic device that provides voice video or data communication. Further while a single client computer is illustrated in the phrases client computer and computer system shall be understood to include any collection of computing devices that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies herein.

The computers are communicatively coupled to one another through respective connections to network . The network includes an Internet a Local Area Network LAN a Wide Area Network WAN or any other suitable network for connecting computers. As such data can be transferred between the computers .

In some scenarios system is a SIEM based system. As such computers implement SIEM technology. More specifically computers implement the novel UIM technology of the present invention and data logging technology. The UIM technology is implemented via a UIM or software program. The data logging technology is implemented via a data logger or software program. Notably the UIM technology can be used by any network node running an Operating System OS . As such system may include any number of computers having UIM software installed thereon. Thus the present invention is not limited to the particular system architecture shown in .

Each computer comprise a data logger for logging information regarding events occurring therein referred to herein as event related data . The events specify operations being performed by an object manager of the OS or e.g. the Windows OS . Such information is acquired by the UIM or running on the computer . These logs are then made accessible to the CDP .

CDPs are well known in the art and therefore will not be described in detail herein. Still it should be understood that the CDP performs data aggregation operations data correlation operations alerting operations and or dashboard operations. The data aggregation operations generally involve aggregating event related data from many sources such as from the client computer and the server computer . The correlation operations involve identifying common attributes of a plurality of events and linking events into groups based on their common attributes. The alerting operations involve performing an automated analysis of correlated events and producing alerts specifying which events need to be investigated prior to other events. The dashboard operations comprise generating and presenting charts showing patterns in the event related data.

Referring now to there is provided a schematic illustration of an exemplary architecture for the client computer shown in . Server computer is the same as or similar to client computer . Therefore the following discussion of client computer is sufficient for understanding server computer .

As shown in client computer comprises a system interface a user interface a Central Processing Unit CPU a system bus a memory connected to and accessible by other portions of client computer through system bus and hardware entities connected to system bus . At least some of the hardware entities perform actions involving access to and use of memory which may be a Random Access Memory RAM a disk driver and or a compact disc Read Only Memory CD ROM .

User interface is comprised of input devices output devices and software routines configured to allow a user to interact with and control software applications installed on the client computer . Such input and output devices include but are not limited to a display screen not shown a speaker not shown a keypad not shown a directional pad not shown a directional knob not shown and a microphone not shown . As such user interface can facilitate a user software interaction for launching software applications e.g. a web browser installed on client computer .

System interface allows the client computer to communicate directly or indirectly with other remotely located computers e.g. server and or CDP of . If the client computer is communicating indirectly with a remote computer then the client computer is sending and receiving communications through the common communications network e.g. network of .

Hardware entities may include microprocessors Application Specific Integrated Circuits ASICs and other hardware. Hardware entities may include a microprocessor programmed for providing SIEM related functionality and more specifically UIM functionality. In this regard it should be understood that the microprocessor can access and run a UIM software program installed on the client computer . Alternatively the microprocessor can have the UIM software program installed thereon. The UIM will be described below in relation to .

As shown in the hardware entities can include a disk drive unit comprising a computer readable storage medium on which is stored one or more sets of instructions e.g. software code configured to implement one or more of the methodologies procedures or functions described herein. The instructions can also reside completely or at least partially within the memory and or within the CPU during execution thereof by the client computer . The memory and the CPU also can constitute machine readable media.

While the computer readable storage medium is shown in an exemplary embodiment to be a single storage medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure.

The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories such as a memory card or other package that houses one or more read only non volatile memories RAMs or other re writable volatile memories magneto optical or optical medium such as a disk or tape carrier wave signals such as a signal embodying computer instructions in a transmission medium and or a digital file attachment to e mail or other self contained information archive or set of archives considered to be a distribution medium equivalent to a tangible storage medium. Accordingly the disclosure is considered to include any one or more of a computer readable medium or a distribution medium as listed herein and to include recognized equivalents and successor media in which the software implementations herein are stored.

Referring now to there is provided a schematic illustration that is useful for understanding operations of the UIM shown in . The UIM of is the same as or similar to UIM . As such the following discussion of UIM is sufficient for understanding UIM .

Generally the UIM is configured to detect operations being performed by an OS object manager and provide information concerning the detected operations to a UIM client e.g. data logger or of an intrusion prevention system and or an anti rootkit prevention system . OS object managers are well known in the art and therefore will not be described herein. Still it should be understood that the OS object manager is a centralized resource broker of the OS which keeps track of the resources allocated to processes.

In some scenarios the OS object manager comprises a Windows object manager. The Windows object manager is a subsystem implemented as part of a Windows Executive i.e. low level kernel mode software program which manages Windows resources. Each resource which is surfaced as logical objects resides in a namespace for categorization. Resources can include but are not limited to physical devices files folders registry entries and running processes. All objects representing resources have an object type property and other metadata about the resource. The Windows object manager is a shared resource and all subsystems that deal with the resources have to pass through the OS object manager. These subsystems include a cache manager a configuration manager an Input Output I O manager a local procedure call a memory manager and a process structure and security reference monitor. All of these listed subsystems and the OS object manager comprise the services of the Windows Executive.

The OS object manager is implemented as a kernel mode component of an underlying OS. The phrase kernel mode a used herein refers to a state in which a process runs kernel code e.g. device driver code platform service code and other kernel code that allows full access to the client computer . The OS object manager provides different services implementing different types of filters. Notably the core of the OS is based on an object oriented model. Thus the OS object manager is a system wide architectural convergence point in the OS intended for coherent and uniformed management of the resources that are being represented as objects. For example in Windows OS applications the OS object manager manages the objects in the OS by providing a common uniform mechanism for managing and using system resources providing a common uniform mechanism for managing the creation and destruction of system objects providing a common uniform extensible method based model for building and using system objects supporting handle based access of system objects performing memory management based on reference counting keeping an object namespace database for tracking object information keeping track of resources assigned to each process providing a common uniform and centralized security model and tracking access rights for specific objects to provide security.

Various standard facilities of the OS create their own unique object types to represent their internal data and to provide sets of services associated with each individual object type. A unique object type describes the properties that are common for all instances of this class of objects system wide. For example an I O facility of the Windows object manager creates a file object type which includes all copies of open files or all copies of open I O devices. In other words the objects inside the OS are specific kernel mode data structures requiring shared access by multiple applications components modules and system services of the OS. Virtually nothing meaningful or useful could happen inside the OS without the OS manager facility being involved.

For each type of object in the OS there are OS services and data structures associated therewith. Such OS services and data structures are programmatically accessible via designated OS Application Programming Interface API functions that are specific to each individual OS object manager facility. For example in order to create a file the OS exports a system function e.g. a CreateFile function that is part of a particular OS facility e.g. a Windows user mode Win32 facility . The function invokes the appropriate OS service e.g. Windows kernel mode Executive facility that creates and represents an open file. In Windows applications the Executive facility as an integral part of handling of the whole CreateFile request internally invokes an appropriate Windows Object Manager s method that in its own turn creates system compound object of a specific file type.

The OS object manager may also be considered as a special purpose dispatcher implementing universal services and methods that in their own turn manage the lifetime of some shared resources of an abstract type. As mentioned above the OS is a logical point of convergence at which all OS services provide a consistent unified and secure access to shared resources in the OS which are being represented as objects. To access a specific instance of an object a user mode application system service and or kernel mode driver invoke s the open operation during which access rights are checked and a special descriptor is being created. The phrase user mode as used herein refers to a state in which a process runs application code e.g. end user application code rather than kernel code e.g. device driver code and platform service code .

A set of object types implemented by the OS object manager depends on the version of the OS employed by the client computer . The following list identifies some of the basic objects of the OS object manager that can be available through the OS API adaptor callback controller debugobject desktop device directory driver event eventpair file iocompletion job key keyedevent mutant port process profile section semaphore symboliclink thread timer token type waitableport windowstation and wmiguide. Each of these listed objects is well known in the art and therefore will not be described herein.

Referring again to the UIM is communicatively integrated with the OS object manager such that it can filter calls to the OS system services and dispatch the filtered call to a UIM client . In this regard the UIM comprises event handlers an events filter and a Virtual Events Dispatcher VED . The event handlers are generally configured to detect and intercept functions being performed by the OS object manager which specify physical events occurring therein.

In some scenarios the event handlers implement a technique for detecting and intercepting events in a computing system which is described in U.S. Pat. No. 7 765 558 to Kouznetsov the 558 patent . The entire disclosure of the 558 patent is incorporated herein by reference.

The term physical event as used here refers to a real time event occurring in the OS at any particular point in runtime. For example a physical event may include a call to an OS system service creation or closure of an object or a modification of an object s state. Physical events occur asynchronously independently and regardless of the UIM s action or inaction.

The event handlers are also configured to identify a plurality of virtual events which are associated with each physical event stated differently map each physical events to a plurality of virtual events and communicate information to the event filter specifying the identified virtual events for each physical event and an order in which the virtual events should be placed during a subsequent serialization process. The term virtual event as used here refers to an event that occurs when one of a plurality of operations is performed by an OS subsystem which facilitates an occurrence of a respective physical event. Accordingly a physical event could result in the identification and selection of a variety and plurality of virtual events based on the contents of pre stored Look Up Tables LUTs . For example a Windows OS uses the same system service to create the following three different types of objects files named pipes and mail slots. The physical essence of a newly created object is determined by the parameters of the call to this specific system service. From a logical stand point of view the call to the system service could be composed of several different operations each of which in its own turn can map to a corresponding one of a plurality of different virtual events.

Each virtual event can be associated with a set of attributes that characterize the specific context of the operation requested. This set of attributes is defined by each individual event handler in accordance with its internal logic of handling and processing physical events. In this regard each event handler has access to a data structure containing the unique identifier of the virtual event and information specifying at least one attribute of the virtual event. The data structure can include but is not limited to a LUT. An attribute of a virtual event could include but is not limited to the back trace function which is being represented as call back status of various functions that were invoked by the OS in order to handle the virtual event as well as other arbitrary data associated with the virtual event in question such as an identifier of a calling thread process etc. . . . .

In some scenarios the event handlers are configured to process information associated with respective ones of a plurality of physical events. Thus the event handlers do not process the same physical event information. Accordingly the event handlers process different physical event information simultaneously concurrently asynchronously at any time. This notion is very important because it allows minimization of unwanted system wide performance degradation impact that could be induced by multiple UIM clients .

The specifics of each event handler and the logic of the internal implementation depends on the particular type of physical event assigned to the event handler along with the context and objective of how such physical event could be used and for what purpose. The overall objectives for the event handlers is to a perform a real time conversion or mapping of each physical event into virtual events and b make virtual events available for further handling by multiple asynchronously and concurrently running UIM clients . Such real time conversion or mapping implies getting the contextual information that is available only at the time of occurrence of each individual physical event while packaging information about it into an abstract and context independent data stream. Such information can be made available to the event handlers via LUTs.

Some types of event handlers can include but are not limited to Executive Event Handlers EEHs and Object Event Handlers OEHs . The EEHs handle information associated with high level system services of the OS s kernel. In contrast the OEHs handle information associated with private events generated by the OS object manager .

Virtual events are generated by the OEHs when the OS system services are being invoked that manage objects residing at the kernel level of the OS object manager e.g. the Windows Executive facility . The OEHs intercept physical events while offering the following functionality and features to multiple UIM clients low level filtering of calls issued to the method of type objects also referred to herein as object type methods high level filtering of calls to the basic services provided by the OS object manager and acquisition of context dependent information associated with a given physical event. The object type methods are invoked asynchronously at various stages of the life cycle of an object s instance. The stages include but are not limited to open creating a descriptor of the object close closing a descriptor of the object delete deleting the object query name querying the name of the object in a secondary namespace parse lookup of the name of an object in a secondary namespace and security reading or modifying the security attributes and settings of the object. The basic services include but are not limited to open by name opening of the object by its name reference by name searching of the object by its name create object creating an instance of the object that is accessible within the OS object manager create object type creating a new object of a specific type find handle searching previously opened descriptor of the object and insert object inserting the object of a certain type which makes the object accessible through its handle or name . The context dependent information is acquired using the following services caller ID a unique identifier of the process and thread in context of which physical event did occur name and address of the main module of the process in context of which physical event did occur and stack based back tracing of the calls that were invoked during handling and processing of the physical event. In view of the forgoing the OEHs act as providers of virtual events allowing tracking of each and every attempt to access manipulate and work with objects known to the OS object manager.

Referring again to the event handlers communicate virtual event information specifying the virtual events to the events filter . Notably physical events occur in the OS during run time in response to specific requests issued by either a user mode program or a kernel mode program. Such physical events must be handled with minimal delay in order to avoid clearly unwanted system wide performance degradation impact. Certain types of physical events could be generated quite intensively and therefore such physical events could cause the generation of overwhelmingly large amounts of virtual event data by the event handlers that must be serialized within the UIM . Such serialization of the virtual event data is performed by the events filter . After said serialization the events filter dynamically filters the real time virtual events such that virtual event information associated with select physical events is passed to the VED . In this regard the virtual event information is dynamically filtered by the events filter based on previously specified security relevance of various virtual event types previously specified security relevance of physical event types and or the type of physical events with which the UIM clients are concerned. For example certain UIM clients are interested in filtering and monitoring only select physical events where the context of which is related to the opening of events of a particular file group of files a particular branch of the registry or group of such branches a particular process or group of processes a particular thread or group of threads and so on.

Filtered virtual event information is generated as a result of the dynamic filtering performed by the events filter . The filtered virtual event information comprises information specifying the occurrence of events which have relevance to the protection of a computing system against malware threats. Such information is then forwarded to the VED where it is temporarily stored in a queue. The queue may include a circular buffer of a predefined length. The VED dispatches the information to the UIM client e.g. data logger of for further processing e.g. data logging . The information is output from the queue based on a First In First Out FIFO methodology. Notably functionality provided by the VED is available for both kernel mode and user mode components.

The physical event information is then analyzed in step to identify a plurality of virtual events which are associated with each physical event. Notably in some scenarios different portions of the physical event information are analyzed simultaneously concurrently or asynchronously by at least two event handlers e.g. event handlers of at any given time. Each virtual event comprises an event occurring when one of a plurality of operations is performed by an OS subsystem which facilitates an occurrence of a respective physical event.

Virtual event information is then filtered in step to generate filtered information specifying only select ones of the virtual events. The virtual event information specifies 1 the virtual events identified as being associated with the physical events and or 2 at least one attribute that characterizes a specific context of at least one operation requested by either a user mode program or a kernel mode program during runtime of the OS. In some scenarios the virtual event information is filtered based on previously specified security relevance of physical event types or virtual event types.

The filtered information is then serialized in step such that the information identifies the virtual events in an order defined by times at which corresponding ones of the physical events occurred. The serialized filtered information is placed in a queue for subsequent processing to detect malware threats to a computing device as shown by step . Sometime thereafter step is performed where the filtered information is dispatched to a data logger software program or a malware detection software program. Thereafter step is performed where method ends or other processing is performed.

In some scenarios the computing system may be part of a Security Information and Event Management SIEM based network. As such the methods may further involve logging the filtered information in at least one log file and providing a remote centralized data processor access to the log file. Operations are then performed by the remote centralized data processor for aggregating filtered information from a plurality of network nodes. The aggregated filtered information can be analyzed to detect said malware threats.

Notably services and methods provided by the Windows Object Manager facility are not readily accessible for interception and monitoring to any standard filtering and event management mechanisms provided by Windows that other malware detection or SIEM sensor solutions and similar employ and rely upon. In other words informally other solutions are blind low resolution compared to the proposed method of high resolution SIEM sensor. Thus such other conventional solutions do in fact miss a lot of security sensitive and even security critical events and activities in OS that happen in real time. Consequently these convention solutions by design are inadequate and destined to greatly degrade hinder the quality of any subsequent security related decision making process such as detection of stealth malware and so on. For example a lot of malware attacks and anomalies go simply undetected as a direct result of said blindness low resolution of the other malware detection or SIEM sensor solutions to begin with one cannot fight threats that one cannot see and one by definition will never be able to see well enough if by design one has low resolution capabilities to begin with .

All of the apparatus methods and algorithms disclosed and claimed herein can be made and executed without undue experimentation in light of the present disclosure. While the invention has been described in terms of preferred embodiments it will be apparent to those of skill in the art that variations may be applied to the apparatus methods and sequence of steps of the method without departing from the concept spirit and scope of the invention. More specifically it will be apparent that certain components may be added to combined with or substituted for the components described herein while the same or similar results would be achieved. All such similar substitutes and modifications apparent to those skilled in the art are deemed to be within the spirit scope and concept of the invention as defined.

