---

title: Model-driven tooltips in excel
abstract: In various embodiments, methods, systems, and non-transitory computer-readable media are disclosed that allow developers to place tooltips on components and columns headers using a desktop integration framework. The tooltips can be tied to translatable resources or model metadata. In one aspect, the tool tip metadata is provided separately from the document to which the tool tip will eventually be tied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09524287&OS=09524287&RS=09524287
owner: Oracle International Corporation
number: 09524287
owner_city: Redwood Shores
owner_country: US
publication_date: 20140716
---
U.S. Provisional Application No. 61 880 756 filed Sep. 20 2013 and entitled MODEL DRIVEN TOOL TIPS IN EXCEL 

U.S. Provisional Application No. 61 880 762 filed Sep. 20 2013 and entitled AUTOMATIC COLUMN RESIZING 

U.S. Provisional Application No. 61 880 764 filed Sep. 20 2013 and entitled PROMPT FOR WORKBOOK PARAMS 

U.S. Provisional Application No. 61 908 897 filed Nov. 26 2013 and entitled MODEL DRIVEN LIST PICKER the disclosures of which are incorporated by reference herein for all purposes.

U.S. patent application Ser. No. 14 333 105 filed Jul. 16 2014 and entitled MODEL DRIVEN DESKTOP INTEGRATION FRAMEWORK 

U.S. patent application Ser. No. 14 333 146 filed Jul. 16 2014 and entitled AUTOMATIC COLUMN RESIZING 

U.S. patent application Ser. No. 14 333 205 filed Jul. 16 2014 and entitled MODEL DRIVEN LIST PICKER .

An application refers to a software program which on execution performs specific desired tasks. In general several applications are executed in a run time environment containing one or more of operating systems virtual machines e.g. supporting Java programming language device drivers etc. as is well known in the relevant arts.

Developers often use Application Development Frameworks ADFs which are by themselves applications for implementing developing desired applications. An ADF provides a set of pre defined code data modules that can be directly indirectly used in the development of an application. An ADF may also provide tools such as an IDE integrated development environment code generators debuggers etc. which facilitates a developer in coding implementing the desired logic of the application in a faster simpler manner.

In general an ADF simplifies development of applications by providing re usable components and integrated development environments which application developers can use to define user interfaces and application logic by for example selecting components to perform desired tasks and defining the appearance behavior and interactions of the selected components. Some ADFs are based on a model view controller design pattern that promotes loose coupling and easier application development and maintenance. Oracle Application Development Framework is one example of an ADF that utilizes this design pattern.

Oracle ADF includes libraries of standards based Java Server Faces JSF components with built in HTML5 and Ajax functionality. With these components web deployed user interfaces can be developed with a level of functionality and interactivity previously reserved for thick client applications. The components offer data interaction data visualization and encapsulated browser side operations in a set of easy to use components that makes rich client application development easier than ever. Oracle ADF further provides a data binding framework that simplifies binding UI to business services through a simple drag and drop operations in the IDE. This is done while still keeping the independence of the business service from consuming interfaces. With the framework the UI developer is insulated from the underlying implementation of the business service layer. This makes the process of building the UI truly decoupled from the implementation of the business service layer better positioning the application for implementation in a service oriented architecture.

Accordingly what is desired is to solve problems relating to building application user interfaces using application development frameworks some of which may be discussed herein. Additionally what is desired is to reduce drawbacks relating to building user interfaces using application development frameworks some of which may be discussed herein.

The following portion of this disclosure presents a simplified summary of one or more innovations embodiments and or examples found within this disclosure for at least the purpose of providing a basic understanding of the subject matter. This summary does not attempt to provide an extensive overview of any particular embodiment or example. Additionally this summary is not intended to identify key critical elements of an embodiment or example or to delineate the scope of the subject matter of this disclosure. Accordingly one purpose of this summary may be to present some innovations embodiments and or examples found within this disclosure in a simplified form as a prelude to a more detailed description presented later.

In various embodiments methods systems and non transitory computer readable media are disclosed that allow developers working within desktop applications to create application specific documents that integrate with web based applications. Using a desktop integration framework a developer can design documents having components that provide user interfaces to data associated with data models of the web based applications. In one aspect how a component looks and is configured can be dynamically driven at runtime based on aspects of its underlying data model.

In various embodiments methods systems and non transitory computer readable media are disclosed that allow developers to place tooltips on components and columns headers using a desktop integration framework. The tooltips can be tied to translatable resources or model metadata. In one aspect the tool tip metadata is provided separately from the document to which the tool tip will eventually be tied.

In one embodiment a method for creating documents of desktop applications that act as user interfaces for web based applications includes creating contents of a document in a native application format associated with a first application. A user interface element is associated with a portion of the contents of the document. The user interface element is a component of a second application and provides a link between the portion of the contents of the document and data associated with data models provided by web based applications in communication with the second application. The user interface element is mapped to one or more data models provided by a web based application wherein the user interface element contributes at least a portion of data associated with the one or more data models provided by the web based application to a user interface within the first application at runtime to provide tooltip information. Metadata associated with the document is generated based on the associating of the user interface element with the portion of the contents of the document and the mapping of the user interface element to the one or more data models provided by the web based application.

In one aspect mapping the user interface element to the one or more data models provided by the web based application includes configuring the user interface element to provide the tooltip information based on a type of the data determined at runtime. Mapping the user interface element to the one or more data models provided by the web based application may include configuring the user interface element with specific functionality allowing the user to interact with the tooltip information at runtime. Mapping the user interface element to the one or more data models provided by the web based application may include configuring the user interface element to provide hints derived from an entity modeled by the one or more data models at runtime. Mapping the user interface element to the one or more data models provided by the web based application may include configuring the user interface element to provide a help interface enabling a user to review the tooltip information.

In some embodiments associating the user interface element with the portion of the contents of the document includes associating a text box label button list table radio button checkbox input widget or output widget. Creating the contents of the document in the native application format associated with the first application may include creating a spreadsheet using a spreadsheet desktop application. Creating the contents of the document in the native application format associated with the first application may include creating a word processing document using a desktop publishing application.

In various embodiments the document and the metadata associated with the document is published to the web based application such that the document becomes usable as a user interface to the web based application. The document can then be retrieved from the web based application. The retrieved document is rendered based on the document and the metadata associated with the document at runtime to determine the tooltip information.

In one embodiment rendering the document includes generating functionality that displays an interface in response to a user interaction that expands the tooltip information from a first view to a second view.

In one embodiment a non transitory computer readable medium storing code that when executed by one or more processors associated with one or more computer systems configures the one or more processors for creating documents of desktop applications that act as user interfaces for web based applications includes code for creating by a computer system contents of a document in a native application format associated with a first application code for associating by a computer system a user interface element with a portion of the contents of the document the user interface element being a component of a second application and providing a link between the portion of the contents of the document and data associated with data models provided by web based applications in communication with the second application code for mapping by a computer system the user interface element to one or more data models provided by a web based application wherein the user interface element contributes at least a portion of data associated with the one or more data models provided by the web based application to a user interface within the first application at runtime to provide tooltip information and code for generating by a computer system metadata associated with the document based on the associating of the user interface element with the portion of the contents of the document and the mapping of the user interface element to the one or more data models provided by the web based application.

In one embodiment a system includes a processor and a memory storing a set of instructions which when execute by the processor configure the processor to create contents of a document in a native application format associated with a first application associate a user interface element with a portion of the contents of the document the user interface element being a component of a second application and providing a link between the portion of the contents of the document and data associated with data models provided by web based applications in communication with the second application map the user interface element to one or more data models provided by a web based application wherein the user interface element contributes at least a portion of data associated with the one or more data models provided by the web based application to a user interface within the first application at runtime to provide tooltip information and generate metadata associated with the document based on the associating of the user interface element with the portion of the contents of the document and the mapping of the user interface element to the one or more data models provided by the web based application.

A further understanding of the nature of and equivalents to the subject matter of this disclosure as well as any inherent or express advantages and improvements provided should be realized in addition to the above section by reference to the remaining portions of this disclosure any accompanying drawings and the claims.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However it will be apparent that various embodiments may be practiced without these specific details. The figures and description are not intended to be restrictive.

Java EE is a standard robust scalable and secure platform that forms the basis for many of today s enterprise applications. Java EE provides a set of specifications for building multi tier applications using the Java language. In the past there was a direct correlation between the robust nature of an application to the complexity required to achieve it. However with the advent of ADFs such as Oracle ADF the implementation of extremely rich Java EE applications can be provided by adhering to standard patterns and practices with greatly reduced effort.

With the increased need for organizations to build composite applications that utilize Service Oriented Architecture SOA principles developers are forced to create applications that are extremely agile. Implementing these best practices in agile applications usually involves writing a significant amount of infrastructure code adding another obstacle for developers building their first Java EE application. In addition to providing robust performant and maintainable applications Oracle ADF provides the infrastructure code to implement agile SOA based applications thereby removing the effort involved in an organization rolling their own. 

Oracle ADF further provides a visual and declarative approach to Java EE development through the Oracle JDeveloper 11g development tool. Oracle ADF implements the Model View Controller design pattern and offers an integrated solution that covers all the layers of this architecture with solution to such areas as Object Relational mapping data persistence reusable controller layer rich Web user interface framework data binding to UI security and customization. Extending beyond the core Web based MVC approach ADF also integrates with the Oracle SOA and WebCenter Portal frameworks simplifying the creation of complete composite applications.

For example Oracle ADF makes it easy to develop agile applications that expose data as services by coupling a service interface to the built in business services in ADF. This separation of business service implementation details is performed in Oracle ADF via metadata. Use of this metadata driven architecture enables application developers to focus on the business logic and user experience rather than the details of how services are accessed.

Oracle ADF stores the implementation details of these services in metadata in the ADF Model layer. This enables developers to exchange services without modifying the user interface making the application extremely agile. Additionally the developer creating the user interface does not need to bother with business service access details. Instead developers can focus on developing the application interface and interaction logic. Creating the user experience can be as simple as dragging and dropping the desired business services onto a visual page designer and indicating what type of component should represent that data.

ADF may be embodied as Oracle ADF is one example. Accordingly ADF is based on a Model View Controller MVC design pattern. An MVC application is separated into 1 a model layer that handles interaction with data sources and runs the business logic 12 a view layer that handles the application user interface and 3 a controller that manages the application flow and acts as the interface between the Model and the View layers. Separating applications into these three layers simplifies maintenance and reuse of components across applications. The independence of each layer from the others results in a loosely coupled Service Oriented Architecture SOA .

In this embodiment modules forming an enterprise application are shown as being within ADF to represent that the modules are developed using ADF and then executed within the context of ADF . For conciseness the various internal details of ADF are not shown assuming that the application is developed using the JAVA programming language and Oracle ADF available as part of JDeveloper 10.1.3 a development tool available from Oracle Corporation. However the features of the present invention described below may be implemented using any desired combination of programming language and application development framework as will be apparent to one skilled in the relevant arts by reading the disclosure provided herein.

In various embodiments ADF an application to be developed in the form of multiple layers each layer containing code modules files implementing desired logic according to pre defined specification. Thus in one embodiment ADF enables the application to be developed as four layers view layer containing code modules files that provide the user interface of the application controller layer containing code modules that control the flow of the application model layer containing data code modules that provide an abstraction layer for the underlying data and business services layer containing code modules that provide access to data from various sources and handles business logic.

Oracle ADF lets developers choose the technology they prefer to use when implementing each of the layers. shows various options available for developers when building Oracle ADF applications. The glue that integrates the various components of Java EE applications and makes development so flexible is the Oracle ADF model layer. EJB Web Services JavaBeans JPA EclipseLink TopLink objects and many others can all be used as Business Services for the Oracle ADF Model. View layers can include Web based interfaces implemented with JSF Desktop Swing applications and MS Office front ends as well as interfaces for mobile devices.

It may be appreciated that the development of the application using such a layered approach often simplifies maintenance and reuse of components code modules across various applications. Further the independence of each layer from the other layers results in a loosely coupled service oriented architecture SOA which may be desirable when deploying the developed business enterprise application on multiple different systems.

In one aspect view layer represents the user interface of the application being developed. View layer is shown with desktop mobile and browser based views each of which provides all or a portion of the user interface and is accessible in a variety of manners corresponding to view type. For example web pages may be sent by the application in response to receiving client requests containing corresponding URLs. The web pages may then be displayed by a browser on a display unit not shown associated with a requesting client system thereby enabling users of the requesting client system to interact with the enterprise application. Oracle ADF support multi channel access to business services allowing reuse of business services and access from a Web client a client server swing desktop based application Microsoft Excel spreadsheets mobile devices such as a smart phone or the like.

The code files modules forming the view layer such as web pages may be implemented using one or more of hypertext markup language HTML Java server pages JSP and Java Server Faces JSF . Alternatively the user interface may be implemented using Java components such as Swing and or extensible markup language XML . As further noted the user interface may leverage a user s experience and familiarity with desktop applications such as Word and Excel by Microsoft.

As noted above the relevant user developed code data modules are provided in each of the layers. However each layer typically contains other pre defined code data modules provided by ADF . Some of the pre defined modules may be used during development for example as templates for developing the web pages for including desired functionality in the developed code etc. Other pre defined modules such as a URL rewriting module may be deployed along with the developed application and may provide additional functionalities mapping of requested URLs to internal names to the user during execution of the enterprise application.

Controller layer contains code modules files that control the flow of the application. Each controller object contains software instructions and or data implemented according to a desired manner of presenting information in view layer . The desired manner may include the specific web pages to be displayed when links in another web page are clicked selected by the user the page to be displayed when errors occur during execution indicating the specific data to be stored retrieved etc.

In one aspect controller layer manages the applications flow and handles user input. For example when a Search button is clicked on a page the controller determines what action to perform do a search and where to navigate to the results page . There are two controller options for web based applications in JDeveloper the standard JSF controller or the ADF Controller that extends the JSF controller functionality. Whichever controller is used application flow is typically designed by laying out pages and navigation rules on a diagram. An application s flow can be broken into smaller reusable task flows include non visual components such as method calls and decision points in a flow and create page fragment flows that run inside a region of a single containing page.

The code modules files forming controller layer are often implemented as Java servlets receiving the client requests and sending desired web pages as corresponding responses. Controller objects may also be implemented for example as Apache Jakarta Struts controllers or according to the JSF standard.

Model layer contains data code modules that connect various business services to the objects that use them in the other layers such as to the controller objects discussed above or directly to desktop applications as shown. Each abstract data objects of model layer provides a corresponding interface that can be used to access any type of business service executing in underlying business service layer . The data objects may abstract the business service implementation details of a service from a client and or expose data control methods attributes to view components providing a separation of the view and data layers.

In one aspect model layer consists of two components data controls and data bindings which utilize metadata files to define the interface. Data controls abstract the business service implementation details from clients. Data bindings expose data control methods and attributes to UI components providing a clean separation of the view and model. Due to the metadata architecture of the model layer developers get the same development experience when binding any type of Business Service layer implementation to the View and Controller layers.

Oracle ADF emphasizes the use of the declarative programming paradigm throughout the development process to allow users to focus on the logic of application creation without having to get into implementation details. At a high level the development process for a Fusion web application usually involves creating an application workspace. Using a wizard libraries and configuration needed for technologies selected by a developer are automatically added and an application is structured into projects with packages and directories.

By modeling database objects an online database or offline replica of any database can be created definitions edited and schemas updated. Using an UML modeler use cases can then be created for the application. Application control and navigation can also be designed. Diagrammers can be used to visually determine the flow of application control and navigation. Then an underlying XML file describing the flow can be automatically created. A resource library can be used to allow a developer to view and use imported libraries by simply dragging and dropping them into the application. From database tables entity objects can be created using wizards or dialogs. From those entity objects view objects are created to be used by pages in the application. Validation rules and other types of business logic can be implemented.

In this example business services layer manages interaction with a data persistence layer. It provides such services as data persistence object relational mapping transaction management and business logic execution. The Business Services layer in Oracle ADF can be implemented in any of the following options As simple Java classes EJB Web services JPA objects and Oracle ADF Business Components. In addition data can be consumed directly from files XML or CSV as well as REST.

Thus each business service manages interaction with a corresponding data persistence layer and also provides such services as object relational mapping transaction management business logic execution etc. The business services layer may be implemented using one or more of simple Java classes Enterprise Java Beans web services etc.

Business components represent a business service implemented using for example Oracle ADF Business Components to provide interaction with databases web services legacy systems application servers and the like. In one embodiment business components of business services layer contain a mixture of application modules view query objects and entity objects which cooperate to provide the business service implementation. An application module can be a transactional component code module that UI clients communicate with for working with application transaction data. The application module may provide an updatable data model and also procedures functions commonly referred to as service methods related to user transactions.

An entity object may represent a corresponding row in a database table and simplifies the manipulation update deletion etc. of the data stored in the corresponding row. An entity object often encapsulates business logic for the corresponding row to ensure that the desired business rules are consistently enforced. An entity object may also be associated with other entity objects to reflect relationships existing between rows stored in the underlying database.

ADF Desktop Integration ADFdi extends the Oracle Application Development Framework into the world of desktop applications like Microsoft Excel. Application developers can rapidly develop integrated documents such as spreadsheets and documents of other desktop based applications to allow users to access and edit critical business data. This framework integrates seamlessly with each web application s security and business logic infrastructure. It also allows end users to edit their data without a live connection to the network. Once reconnected ADF Desktop Integration can transparently upload and validate all user changes against the application s backend. Thus ADF Desktop Integration allows developers to extend functionality provided by web based applications to desktop applications. End users may also prefer ADF Desktop Integration because it provides a familiar user interface in the user s preferred desktop application to undertake information management tasks such as performing complex calculations or uploading a large amount of data easily and seamlessly.

In this example desktop integration framework includes client computer system and server computer system . Client computer system is representative of hardware and or software elements configured to provide access to and or host application . Client computer system may be embodied as a personal computer system a laptop a tablet a mobile device and the like. Client computer system may include one or more operating systems applications browsers and the like executing on one or more computers. Client computer system is merely illustrative of an embodiment or implementation of an invention disclosed herein should not limit the scope of any invention as recited in the claims. One of ordinary skill in the art may recognize through this disclosure and the teachings presented herein other variations modifications and or alternatives to those embodiments or implementations illustrated in the figures.

Application is representative of one or more software elements that allow users to generate edit or otherwise interact with documents. Some examples of application are text editors word processing applications spreadsheet applications image editing and manipulation programs and the like. In various embodiments desktop integration framework operates with configurations specific to desktop applications such as Microsoft Office products like Microsoft Word and Microsoft Excel.

Application further includes or is otherwise in communication with ADF DI client component and creates document . ADF DI client component is representative of one or more software elements that extend the functionality provided by web based or other network accessible applications to application . For example ADF DI client component allows end users to avail themselves of a familiar user interface associated with application to undertake information management tasks using document that are normally performed by accessing server computer system . These tasks may be performed by or handled by web based or other network accessible applications hosted by server computer system . In various embodiments data manipulated by such information management tasks performed in application is synchronized with server computer system .

Document is representative of one or more computer data files or units of electronic information. Document may include text images audio video and other multimedia information. Document may further be associated with metadata specific to application . Document or application may provide native functionality for creating interacting and managing content associated with document . In various aspects application provides one or more interfaces for interacting with functionality of application or content of document .

Server computer system is representative of hardware and or software elements configured to provide access to and or host application server . Server computer system may be embodied as local server computer system a cloud service and the like. Server computer system may include one or more operating systems servers services applications and the like executing on one or more computers. Server computer system is merely illustrative of an embodiment or implementation of an invention disclosed herein should not limit the scope of any invention as recited in the claims. One of ordinary skill in the art may recognize through this disclosure and the teachings presented herein other variations modifications and or alternatives to those embodiments or implementations illustrated in the figures.

Application server is representative of one or more software elements that allow users to interact with web based or network based applications. Some examples of application server are either a software framework that provides a generalized approach to creating an application server implementation without regard to what the application functions are or the server portion of a specific implementation instance. In various embodiments application server operates with configurations specific to Java Platform Enterprise Edition or Java EE that defines a core set of API and features of Java Application Servers. Application server may include servlets and JavaServer Pages Enterprise JavaBeans and the like. Application server is merely illustrative of an embodiment or implementation of an invention disclosed herein should not limit the scope of any invention as recited in the claims. One of ordinary skill in the art may recognize through this disclosure and the teachings presented herein other variations modifications and or alternatives to those embodiments or implementations illustrated in the figures.

ADF DI server component is representative of one or more server components such as part of application server . In general ADF DI client component acts as both view layer and controller layer and communicates with ADF DI server component acting in part as model layer to synchronize data and execute business logic in applications hosted by application server or in communication with application server using ADF model . As discussed above model layer represents the data values related to a current view presented by ADF DI client component within application along with model level business rules security and application logic used against the data values. In this example ADF DI client component and ADF DI server component allows end users to avail themselves of a familiar user interface associated with application to undertake View Controller tasks using document to access ADF model .

In one aspect a developer utilizes a design mode of ADF DI client component to work within application to create document . The developer can structure and format document in a desired manner utilizing native tools of application . The developer can also add components to document using ADF DI client component to integrate document with application server . Some examples of components or ADFdi components are input components e.g. form components output components labels lists buttons images tables and the like.

In various embodiments the developer maps components that are added to document to corresponding data or models associated with application server . The data or models can be provided by or through ADF DI server component . In various embodiments each component added to document is mapped to data or an attribute of a data model exposed by model layer to provide an input output mechanism within document . In this example a text box component can be added to document and mapped to an attribute of ADF model provided by or exposed through ADF DI server component to ADF DI client component .

In one aspect a component is a reusable entity one having functionality that can be used by many applications or that can be used multiple times by the same application. Components can be embedded within document . A component generally provides one or more interfaces such as a programming interface a data binding interface or a visual interface. In one embodiment a component having no visual representations added to document is rendered or but not otherwise displayed at runtime and can provide some additional functionality. A component may have zero or more visual representations. As described further below a component can have a visual representation driven by an underlying model.

In one aspect a component can specify any number of views at design time any of which can be displayed at runtime. A view assembly is the set of views that are actually displayed at runtime. The view assembly for an application or a component consists of views in the view composition that is selected for display at a certain point in time.

Once all desired components are included and mapped to data and or model metadata accessible to application server and ADF model document can be published or otherwise made available on application server . Application server may provide a download link to published documents enabling users to access the documents via a browser and begin working within application to view create and or manipulate data such as that stored in a database accessible to server computer system . In various embodiments published documents are stored separately from the document metadata that defines components data mappings and any logic a developer associated with a document. In some embodiments a published document includes all document metadata.

In step a document is created. In various embodiments documents are created by a user or developer by using an application that natively creates such documents or by using a software library that creates documents in their native format. According to a user can open an existing document or create a new document in application . For example the user may create a new spreadsheet in Microsoft Excel and populate the spreadsheet with various workbooks sheets tables graphs or the like. The user may edit structure or format the document in any desired manner using native and non native tools.

In step document metadata is generated. The document metadata includes information utilized by an integration component of an application e.g. ADF DI client component to render contents of an associated document. In one aspect the document metadata identifies each component included in the document. In another aspect the document metadata identifies how a component is bound to specific data or to attribute metadata of one or more models. The document metadata can further provide access information static data other logic or data manipulation information or references to where such may be obtained.

As discussed above with respect to a developer can add components to document using ADF DI client component to integrate document with application server . In various embodiments ADF DI client component provides an expression builder allowing a developer to specify values for one or more properties of documents or components that may be added to the documents. In one aspect a property defines an aspect of the behavior of its corresponding component. For example a property may specify a model or object that is mapped to the component and or one or more attributes of the model or object corresponding to the component. In another aspect a property may specify aspects of a document such as table column headers worksheet ribbon commands native document functionality and the like.

In step the document and the document metadata are published. As discussed above published documents can be stored separately from the document metadata. In various embodiments the document is uploaded to a web based application and made available to users of the application. The document metadata can be uploaded to a metadata repository associated with the application. In some embodiments a published document may include all or part of the document metadata.

In the example of a published document includes at least enough metadata that enables ADF DI client component to initialize the document and request additional information from ADF DI server component to render the contents of document for the user at runtime. ends in step .

During runtime a user downloads published document and opens it with application . In one embodiment ADF DI client component has been installed as an application plugin or module. ADF DI client component can then detect that document has been authored to include framework components. ADF DI client component contacts ADF DI server component to request document metadata actual data and any logic that needs to be performed to render document . For example ADF DI client component may first retrieve from or through from ADF DI server component document metadata defining which components are to be included and where to include them. ADF DI client component may retrieve from or through from ADF DI server component data from ADF model for which selected components will use or otherwise operate on. ADF DI client component may further retrieve from or through from ADF DI server component any logic associated with document . Finally ADF DI client component may then render contents of document utilizing the document metadata actual data and logic.

Accordingly a user may retrieve a document template and have the document content automatically updated and formatted based on processing performed by ADF DI client component and data obtained from application server . The users can then avail themselves of the familiar user interface associated with application to undertake tasks using document .

In various aspect as the user interacts with or manipulates document ADF DI client component and ADF DI server component may remain in communication to send and receive updates accordingly. Changes made within one or more components of document to data of a corresponding model in model layer may be persisted in ADF model .

In step a document is received. As discussed above documents are published enabling users to access the documents via a browser and begin working within an application e.g. application . In various embodiments a user selects a document from a web based application to use as an interface to data provided by the web based application. The user downloads the document to the user s computer and opens the document using its native application. A plugin of the native application or other software of the client device e.g. ADF DI client component detects that the document is an integrated document and begins the rendering process. According to a user can interact with application server to retrieve a desired document such as by clicking a document link. The document may be downloaded or otherwise communicated to client computer system and opened in application .

In step document metadata is received and processed. In various embodiments the document metadata is received separately from the document being rendered. For example an integration component of the native application can detect that a document being opened is an integrated document and begin the rendering process by requesting appropriate document metadata. In some embodiments all or part of the document metadata is integrated into the document being rendered. The document metadata includes information utilized by the integration component to render contents of the document. Accordingly based on the document metadata ADF DI client component can determine which components are to be added to document and where. ADF DI client component further determines what data or model is used by each component as well as applies any logic defined by a developer.

In optional step model metadata is received and processed. In various embodiments the model metadata is received separately from the document being rendered and the document metadata. For example an integration component of the native application can detect during the rendering process that one or more components have properties that are driven by attributes of one or more models. In one aspect the model metadata identifies how a component is bound to metadata of various models. Accordingly based on the model metadata ADF DI client component can update or augment the document metadata associated with document . ADF DI client component further determines what data is referenced by or otherwise used by the metadata of the various associated models.

In step the document is rendered based on the document metadata and the optional model metadata. As discussed above ADF DI client component may retrieve from or through from ADF DI server component data from ADF model for which selected components will use or otherwise operate on. ADF DI client component may further retrieve from or through from ADF DI server component any logic associated with document . Finally ADF DI client component may then render contents of document utilizing the document metadata actual data and logic.

In step a determination is made whether an update to the document exists. There may be a variety of reasons why an update to the document may exist. As a user interacts with or manipulates document ADF DI client component and ADF DI server component may remain in communication to send and receive updates accordingly. Changes made within one or more components of document to data of a corresponding model in model layer may be persisted in ADF model . In some embodiments an interaction by a user may require a new dataset. As such the flow of method returns to step to process any additional document data and optional model metadata. The document can then be rendered or a portion re rendered in step . ends in step .

In various embodiments desktop integration framework allows a developer to include components document whose view and data are driven by corresponding models or model attributes. In one aspect component may be rendered or have their behavior defined dynamically at runtime based on data or logic of corresponding models or model attributes. Data defined via a model or object can automatically configure components of the document when rendered. For example elements of a list component may be populated with preexisting values associated with one or more attributes of a model or object. Accordingly a developer is not required to specify the values in each view that a component presents when the document is rendered.

In one aspect an underlying data model or attribute of an employee object associated with component is labeled Hiredate. The data model or attribute is configured to store a date value associated with the date that a given employee was hired by an organization. In various embodiments the view or behavior of component may be driven by the fact that the attribute stores a date value absent further configuration by a developer. For example at the time that ADF DI client component renders an Excel workbook having a cell corresponding to component that stores a value representing the date of the employees hire the cell is automatically formatted for date information. ADF DI client component can also configure the cell such that when a user selects the cell a date popup is provided within or outside of the native features of Excel allowing the user to select a new date of hire or modify an existing date of hire.

In another aspect an underlying data model or attribute of an employee object associated with component is labeled Deptno. The data model or attribute is configured to store an identifier for a department or team associated with an employee. In various embodiments the view or behavior of component may be driven by the fact that the attribute stores one of a plurality of predetermined values specified in the data model absent further configuration by a developer. For example at the time that ADF DI client component renders an Excel workbook having a cell corresponding to component ADF DI client component may configure the cell such that when a user selects the cell that stores a value representing the department or team to which the employee is assigned a drop down list is provided within or outside of the native features of Excel allowing the user to select from a predetermined list of departments or teams derived from the data model.

In step a component specification is received. In general a component specification refers to information that specifies how the component is defined. According to a developer can open an existing document or create a new document in application such as creating a new spreadsheet in Microsoft Excel. The developer then may edit structure or format the document in any desired manner using native and non native tools. Additionally the developer may select from a plurality of predetermined components and add those components to document .

In step a data binding specification is received. In general a data binding specification refers to information that specifies how the component interacts with data such as its source and the like. In various embodiments ADF DI client component utilizes this information to further configure the component in addition to the component specification. In one aspect ADF DI client component identifies how each component will present one or more views based on one or more models or objects associated with the component. ADF DI client component may interact with ADF DI Server component to retrieve model aspects values and the like to configure the component any associated views as well as associated behaviors. In various embodiments ADF DI client component may receive a component specification and data binding specification in response to a user using the expression builder discussed above.

In step a model driven aspect of the component is determined. ADF DI client component may interact with ADF DI Server component to retrieve model aspects values and the like know as attribute properties or hints in ADF model to configure the component any associated views as well as associated behaviors. The configuration information may be stored in the document metadata that may be associated with a published document.

In one example a label that is presented to a user is often different than the name of a data object corresponding to the label. For example if an attribute called EmpName exists but in the UI a developer desires to display Employee Name. Most UI frameworks allow the developer to specify a user friendly label. However it is not efficient to specify the user friendly label in each place it needs to appear. The model driven approach is to associate the user friendly label with the EmpName attribute at the model level. Then each UI element page worksheet etc that wants to render EmpName will refer to EmpName s label indirectly at design time and fetch it dynamically at runtime. The approach applies to various different potential properties of a data object. Other examples include read only mandatory etc. ends in step .

In some embodiments a model driven aspect of a component is determined at runtime rather than at design time. ADF DI client component may interact with ADF DI Server component to retrieve model aspects values and the like know as attribute properties or hints in ADF model to update or augment configuration information for a component associated with document being rendered.

In various embodiments methods systems and non transitory computer readable media are disclosed that allow developers to place tooltips on components and columns headers using a desktop integration framework. The tooltips can be tied to translatable resources or model metadata. In one aspect the tool tip metadata is provided separately from the document to which the tool tip will eventually be tied.

In one aspect desktop integration framework allows a developer to provide tool tips associated with elements of document that provide information to a user interacting with application . A tool tip may include a useful hint about the content of an element and may appear when a user s mouse is over the element or when the element is selected.

In one aspect a document designer may desire to include tool tips for given columns rows or cells of a spreadsheet application such as Microsoft Excel. In another aspect a document designer may desire to include tool tips for a particular form component or a menu command such as a ribbon interface of Microsoft Office . ADF DI client component can provide an expression builder that enables a document creator to easily include a tooltip property for attributes of a component inserted into document . The tool tip property is defined during document creation separately and independently of any tool tip functionality natively provided by application . When document is rendered at run time ADF DI client component may leverage the native tool tip functionality of application to provide tooltips that appear together with predetermined labels or hints. Because the tool tips are defined separately from document tool tip information may be dynamically obtained by ADF DI client component from a variety of sources such as from a static mapping a resource bundle or model attribute metadata allowing a developer to associate tool tips with an attribute of a model.

In step a component is selected. As discussed a document is created using an application that natively creates such documents or using a library that creates the document in a native format. According to a user can open an existing document or create a new document in application such as creating a new spreadsheet in Microsoft Excel. A document developer may edit structure or format the document in any desired manner using native and non native tools. In various embodiments a developer selects one or more components from a list of pre provided components to add the components to the document under design.

In step a data binding is provided. The data binding includes information utilized by ADF DI client component to render contents of the document based on data obtained from application server . In one aspect the document metadata identifies each component included in the document and how each is bound to one or more objects in ADF model . Document metadata may further provide access information static data and other logic or data manipulation information provided by the developer.

In step tool tip information is associated with the component. In various embodiments ADF DI client component provides and expression builder that includes a tooltip property for some or all components that may be added to a document. Some examples in the spreadsheet example above include table column headers form components such as Input Texts Output Texts Labels Lists of Values and worksheet ribbon commands. In one aspect when a component or column is created from a binding element a tooltip is automatically set to the model driven tooltip as illustrated in the following example bindings 

In various embodiments tooltips are defined on components rather than utilizing native tooltip aspects of application . In one aspect document contents are rendered during document design to determine how one or more tooltips defined on one or more components behave. In one aspect a test mode feature can allow document contents to be rendered to test one or more tooltips and when stopping the test mode ADF DI client component returns to design time. At this point all tooltips created from components are removed to return each component to its design time appearance.

At runtime if the tooltip property of a component is non empty the expression is evaluated and the resulting text is added to the document. In one aspect text may be trimmed of whitespace and if the final value is non empty inserted into a target cell as an Excel comment. If the target cell already contained an Excel comment the old comment is removed and replaced with the new one. If the expression evaluation fails no action is taken. The tooltips for form components follow the same rules as labels. Namely they are calculated and rendered once only. When the user places the mouse over the ribbon command without clicking a multi part tooltip appears. The command label appears first in bold followed by the text from the tooltip property. Below this text the add in name appears. The tooltips for column headers are evaluated and rendered whenever the table column headers are rendered. ends in step .

Accordingly a document designer may include tool tips for given columns rows or cells of a spreadsheet application such as Microsoft Excel. In another aspect a document designer may desire to include tool tips for a particular form component or a menu command such as a ribbon interface of Microsoft Office . ADF DI client component can provide an expression builder that enables a document creator to easily include a tooltip property for attributes of a component inserted into document . The tool tip property is defined during document creation separately and independently of any tool tip functionality natively provided by application . When document is rendered at run time ADF DI client component may leverage the native tool tip functionality of application to provide tooltips that appear together with predetermined labels or hints. Because the tool tips are defined separately from document tool tip information may be dynamically obtained by ADF DI client component from a variety of sources such as from a static mapping a resource bundle or model attribute metadata allowing a developer to associate tool tips with an attribute of a model.

In various aspects tooltip information is delivered separately from the published document. Tooltip information may be transmitted with the actual data to be rendered as the contents of document . In one embodiment ADF DI client component renders tooltip information utilizing native features of application . For example ADF DI client component may insert tooltip information as comments help text and the like utilizing APIs or other functionality native to application .

In step a document and its corresponding metadata are received. According to a user can interact with application server to retrieve a desired document such as by clicking a document link. The document and metadata may be downloaded or otherwise communicated to desktop and opened in application .

In step tooltip information is determined based on the document metadata. As discussed above the document metadata includes information utilized by ADF DI client component to render contents of the document based on data obtained from application server . Accordingly ADF DI client component determines which components are to be added to the document and where and what data is used by each component as well as applies any logic defined by a developer. ADF DI client component further determines whether any components have associated tool tips of other associated help information.

In step document data is processed. As discussed above published documents can be stored separately from the document metadata and the actual data used by the document. In general the published document includes at least enough metadata that enables ADF DI client component to initialize the document and request additional information from ADF DI server component to render the contents of document for the user.

In step the document is rendered using any associated tooltip information. As discussed above ADF DI client component may retrieve from or through ADF DI server component data from ADF model or other logic associated with document . ADF DI client component may further retrieve from or through from ADF DI server component any metadata that includes tooltip information or other associated information. Finally ADF DI client component may then render contents of document utilizing the associated tooltip information. ends in step .

In various embodiments methods systems and non transitory computer readable media are disclosed that allow developers to provide automatic column resizing in spreadsheet software using a desktop integration framework. The width of a column usually can only be set to hard wired widths or manually adjusted to fit even with a manually triggered auto adjustment function . This feature adds the ability to control column widths in tables at run time.

In one aspect desktop integration framework allows a developer to provide automatic resizing of elements of document for a user interacting with application according to aspects of the data being rendered in document . A document designer may desire to adjust for example dimensions of columns rows or cells of a spreadsheet application such as Microsoft Excel. ADF DI client component can provide an expression builder that enables a document creator to easily include a column width or display width property of attributes whose data a component will insert into document . This dimension property is defined during document creation separately and independently of the dimensions of any elements natively provided by application . When document is rendered at run time ADF DI client component may leverage the native functionality of application to manipulate the dimensions of the data within the user interface automatically. Because the dimensions are defined separately from document dimension specifications may be dynamically obtained by ADF DI client component from a variety of sources such as from a static mapping a resource bundle or model attribute metadata allowing a developer to associate dimensions with an attribute of a model.

In various embodiments desktop integration framework allows a developer to provide automatic column resizing associated with elements of document for a user interacting with application . In one aspect a document designer may desire that certain columns of a spreadsheet application such as Microsoft Excel have a specified width. ADF DI client component can provide an expression builder that enables a document creator to easily provide column resizing for a component inserted into document . In one aspect ADF DI client component provides the ability to configure a table so that all columns widths are set using at runtime with an AutoFit feature of application .

In another aspect ADF DI client component provides the ability to include exclude the table columns header cells when determining the best fit. ADF DI client component may provide the ability to specify an explicit column width in the ADF table column configuration. ADF DI client component further may provide the ability to bind the column width property to Model level metadata properties e.g. UI Hint displayWidth . In another aspect ADF DI client component may provide the ability to bind the width property of a dynamic column to Model level properties and obtain a distinct column size for each expanded column at runtime. ADF DI client component may provide the ability for dynamic columns to participate in AutoFit and obtain a distinct column size for each expanded column at runtime. ADF DI client component may further include the ability to inherit override table level column resizing behavior on a column by column basis a subset of columns in a given table use AutoFit and or Explicit sizing leaving other columns alone . ADF DI client component may also provide the ability to configure when the table s columns are resized.

Accordingly a workbook developer can choose to configure a table component so that the widths of columns are set at run time. Columns can be set to explicit sizes based on an Expression Language EL expression or they can use Excel s AutoFit Column Size capability to achieve the best fit for the current data values. Resizing behavior can be set at the table level and then overridden at the column level. At runtime the resizing behavior can be invoked via a new table component method allowing the developer to control when the resizing occurs if the contents of the document change.

In step a component is selected. As discussed a document is created in an application that natively creates such documents or using a library that creates the document in a native format. According to a user can open an existing document or create a new document in application such as creating a new spreadsheet in Microsoft Excel. A document developer may edit structure or format the document in any desired manner using native and non native tools. Furthermore the developer may select from a list of pre provided components or the developer may create one or more components to add to the document.

In step data binding is provided. The data binding includes information utilized by ADF DI client component to render contents of the document based on data obtained from application server . In one aspect the document metadata identifies each component included in the document and how each component is bound to one or more objects in ADF model . Document metadata may further provide access information static data and other logic or data manipulation information provided by the developer.

As discussed above a workbook developer can choose to configure a table component so that the widths of columns are set at run time. Columns can be set to explicit sizes based on an EL expression or they can use Excel s AutoFit Column Size capability to achieve the best fit for the current data values. Resizing behavior can be set at the table level and then overridden at the column level. At runtime the resizing behavior can be invoked via a new table component method allowing the developer to control when the resizing occurs if the contents of the document change.

In step dimension information is associated with the component. In various embodiments ADF DI client component provides and expression builder that includes a column size property for some or all components that may be added to a document. In one aspect a ResizeColumnsMode property is provided that controls whether and how columns in an entire table are resized. A Width property can be applicable when a ResizeMode property governing how the size of a column changes at runtime is SpecifiedWidth and when Table.ResizeColumnsMode is UseColumnValue . In one embodiment Excel interprets the Width value N as representing the space needed to display N 0 zero characters when formatted with the font used by the Normal style. An example EL expression for Width that makes use of the UI Hint displayWidth for an attribute 

Accordingly a workbook developer can choose to configure a table component so that the widths of columns for example are set at run time. ends in step .

In step a document and its corresponding metadata are received. As discussed above documents are published enabling users to access the documents via a browser and begin working within an application e.g. application . In various embodiments a user selects a document from a web based application to use as an interface to data provided by the web based application. The user downloads the document to the user s computer and opens the document using its native application. A plugin of the native application or other software of the client device e.g. ADF DI client component detects that the document is an integrated document and begins the rendering process.

In various embodiments the document metadata is received separately from the document being rendered. In some embodiments all or part of the document metadata is integrated into the document being rendered. The document metadata includes information utilized by the integration component to render contents of the document. In one aspect model metadata may optionally be fetched and the document metadata can be updated or augmented based on the model metadata.

In step dimension information is determined based on the document metadata. For example ADF DI client component can determine that some components are to be added to the document and are associated with dimension information. In various aspects dimension or resizing information can be fetched as model metadata. Dimension or resizing information can also be transmitted with the actual data to be rendered as the contents of document .

In step document data is processed. As discussed above published documents can be stored separately from the document metadata and the actual data used by the document. In general the published document includes at least enough metadata that enables ADF DI client component to initialize the document and request additional information from ADF DI server component to render the contents of document for the user.

In step the document is rendered using any associated dimension information. As discussed above ADF DI client component may retrieve from or through from ADF DI server component data from ADF model or other logic associated with document . ADF DI client component may further retrieve from or through from ADF DI server component any metadata that includes dimension information or other associated resizing information. Finally ADF DI client component may then render contents of document utilizing the associated dimension information. ends in step .

In one embodiment ADF DI client component resizes column widths utilizing native features of application based on values in the Table.ResizeColumnsMode and Column.ResizeMode properties. In another embodiment ADF DI client component resizes column widths utilizing native features of application based on values in the Table.ResizeColumnsMode and Column.ResizeMode properties to fit to the data utilizing auto fit functionality of application .

In one aspect a table component may be configured to use column values of document . In this case no automatic resizing of the entire table takes place. If individual columns have ResizeMode properties set to a value other than InheritFromTable those columns will be resized accordingly. In another aspect a table component may be configured such that contents are automatically fit with a header. Accordingly all columns within table boundaries that have Column.ResizeMode set to InheritFromTable are resized using Excel s native AutoFit support. In this mode the column header cells are included when finding the best fit. Values in the column s cells above or below the table are not considered when finding the best fit. In another aspect a table component may be configured such that contents are automatically fit without reference to a header. This is the same as above except that only the data cells in the table columns are included and the header cells are excluded when finding the best fit.

Depending on settings a column may inherit its resizing behavior from the Table override the Table level behavior or not resize at all. If a manual configuration is provided the column is not resized and any column width is left at the current setting. InheritFromTable specifies that a column be resized using the AutoFit setting from Table.ResizeColumnsMode but if Table.ResizeColumnsMode is UseColumnValue then no resizing occurs . As above AutoFitWithHeader allows a column to be resized using Excel s native AutoFit support. In this mode the column header cell is included when finding the best fit. AutoFitWithoutHeader provides the same as AutoFitWithHeader except that the header cell is excluded when finding the best fit.

In some embodiments SpecifiedWidth uses a Width property to determine the desired width of the column. If the expression cannot be evaluated or if the expression evaluates to a number outside a min max range e.g. 1 255 a ResizeMode of Manual mode is used no resizing .

In some embodiments the displayWidth UI Hint metadata is retrieved when the worksheet is first initialized and cached for the lifetime of the workbook. For dynamic columns the displayWidth UI hint is re retrieved and re cached whenever the expanded column structure changes detected as part of a Download operation or Table.Initialize execution. Other cases where the worksheet s page definition metadata is re cached can include Clear All Data detection of a metadata schema change.

2. Adds the Table.ResizeColumns component action into the action set for downloading data into the table following the Table.Download action.

This will have the effect at runtime that after data is downloaded into the table all table columns with be resized using the best fit based on the width of the data and header label text

3. On the same columns uses the Expression Builder to paste in the expression referencing the UI Hint from the model metadata eg.

4. Adds the Table.ResizeColumns component action into a new action set exposed as a Button labeled Resize Table 

At runtime all worksheet columns will stay at their DT widths even after a Download. When the end user clicks the Resize Table button those columns altered in step will be resized according to their UI Hint displayWidth values if those hints are configured and valid .

Consider the case of a worksheet with form components above a table. The table resizes the Excel worksheet columns as needed without any regard to the effect on the form components located in the same Excel columns.

Consider the case of a worksheet with two or more ADFdi table components. Each table attempts to resize the Excel worksheet column independently. The last one wins. The order is determined by the calls to the table actions. Developers with multiple tables might choose a manual width mode for less important table in order to allow a specific table to dominate the Excel column sizing.

In various embodiments methods systems and non transitory computer readable media are disclosed that allow developers to place a date picker within a spreadsheet using a desktop integration framework. The date picker can be tied to model metadata. In one aspect the date picker metadata is provided separately from the document to which the date picker will eventually be tied.

Sometimes a developer may need to preformat a portion of a document to specify what type of data will be received by end users. For example a cell of a spreadsheet or workbook typically does not know how to format data entered into the cell until either the data is received or a developer explicitly formats the cell.

In various embodiments desktop integration framework allows a developer to add components to a document that provide date pickers associated with elements of document . Accordingly a user interacting with application can quickly provide date and time information outside of any native features of the application. Therefore the developer does not need to explicitly format cells as date cells in a workbook. A date picker may include one or more calendar views clocks or other date and time picker elements and may appear when a user s mouse is over an element or when the element is selected.

In one aspect a document designer may desire to include date pickers for given columns rows or cells of a spreadsheet application such as Microsoft Excel. In another aspect a document designer may desire to include a date picker for a particular form component or a menu command. ADF DI client component can include a date picker component that may be inserted into document . The date picker component is defined during document creation separately and independently of any date picker functionality natively provided by application . When document is rendered at run time ADF DI client component may leverage native date picker functionality of application to provide date pickers leverage separate operating system elements or functionality to provide date pickers or leverage custom library functionality to provide date pickers. Because date pickers are defined separately from document date pickers may be dynamically rendered by ADF DI client component for a variety of targets such as for form component input date columns and a model driven column with date attribute model allowing a developer to associate a date picker with an attribute of a model.

In step a component is selected. As discussed a document is created in an application that natively creates such documents or using a library that creates the document in a native format. According to a user can open an existing document or create a new document in application such as creating a new spreadsheet in Microsoft Excel. A document developer may edit structure or format the document in any desired manner using native and non native tools. Furthermore the developer may select from a list of pre provided components or the developer may create one or more components to add to the document. In one example a date component or date picker component is selected. In another example a component for a model driven column type is selected that provides a date picker.

In step data binding is provided. The data binding includes information utilized by ADF DI client component to render contents of the document based on data obtained from application server . In one aspect the document metadata identifies each component included in the document and how each component is bound to one or more objects in ADF model . Document metadata may further provide access information static data and other logic or data manipulation information provided by the developer.

In step date picker information is generated. In various embodiments ADF DI client component provides an expression builder that includes a date picker property for some or all components that may be added to a document. In one aspect when a component or column is created from a binding element a date picker is automatically set as illustrated in the following example bindings 

A model driven component may include an action set property. If a column is bound to a date type attribute the DatePickerEnabled property may be used to determine the behavior. If DatePickerEnabled is true the subcomponent type of date column is InputDate and the action set is ignored. If DatePickerEnabled is false the subcomponent type is determined as before and the action set is used.

At runtime an end user can select a cell column row or other element of application bound to an date picker component triggering a modeless dialog to appear. The dialog may contain an appropriately sized calendar or other date and time information selector. The user can pick a date from the month currently displayed. The user can also navigate to other months in the past and in the future and then pick a date. The user may further pick a time from the time currently displayed. The user can also change the time to a different value and then pick that time. In one aspect a single click on a date closes the date picker dialog and updates the cell with that date. In another aspect a click on a button labeled OK or APPLY closes the date picker dialog and updates the cell with any selected date and or time information.

In various embodiments date pickers may be defined as components or on components rather than utilizing native tooltip aspects of application . In one aspect document contents are rendered during document design to determine how one or more date pickers defined as or on one or more components behave. In one aspect a test mode feature can allow document contents to be rendered to test one or more date pickers and when stopping the test mode ADF DI client component returns to design time. At this point all date pickers created as or from components are removed to return each component to its design time appearance. ends in step .

Accordingly a document designer may include date pickers for given columns rows or cells of a spreadsheet application such as Microsoft Excel. In another aspect a document designer may desire to include date picker components or a menu command. ADF DI client component can provide an interface and or an expression builder that enables a document creator to easily include one or more date picker components or set a date picker property for attributes of a component inserted into document . The date picker is defined during document creation separately and independently of any functionality natively provided by application or existing data. When document is rendered at run time ADF DI client component may leverage the native or non native functionality of application to provide date pickers that enable a user to select date and time information.

In step a document and its corresponding metadata are received. According to a user can interact with application server to retrieve a desired document such as by clicking a document link. The document and metadata may be downloaded or otherwise communicated to desktop and opened in application .

In step date picker information is determined based on the document metadata. As discussed above the document metadata includes information utilized by ADF DI client component to render contents of the document based on data obtained from application server . Accordingly ADF DI client component determines which components are to be added to the document and where and what data is used by each component as well as applies any logic defined by a developer. ADF DI client component further determines whether any components have associated date picker information. In various aspects date picker information is delivered separately from the published document. Date picker information may be transmitted with the actual data to be rendered as the contents of document .

In step document data is processed. As discussed above published documents can be stored separately from the document metadata and the actual data used by the document. In general the published document includes at least enough metadata that enables ADF DI client component to initialize the document and request additional information from ADF DI server component to render the contents of document for the user.

In step the document is rendered using any associated date picker information. As discussed above ADF DI client component may retrieve from or through from ADF DI server component data from ADF model or other logic associated with document . ADF DI client component may further retrieve from or through from ADF DI server component any metadata that includes date picker information or other associated time and date selection information. Finally ADF DI client component may then render contents of document utilizing the associated date picker information.

In one embodiment ADF DI client component renders date picker dialogs utilizing non native or native features of application . For example ADF DI client component may insert date pickers utilizing APIs or other functionality native to application . In another example ADF DI client component may insert date pickers utilizing APIs or other functionality external to application . One or more transfer or translation mechanisms may be used to insert information obtained using external APIs into application such as operating system clipboards and the like. ends in step .

In this example date picker only allows a user to select date information as displayed. Date picker may provide the user the opportunity to select either or both date and time information. When a user selects or otherwise interacts with date picker date information may be displayed or otherwise conveyed to the user as illustrated in by being entered into the cell.

In general there may be 3 ways in which an input date may appear Form component Input date column and Model driven column with date attribute. In all cases the runtime behavior is the same when an end user selects a cell bound to an input date component a small modeless dialog appears. The dialog may contain small calendar or other date and time information input control. The user can pick a date from the month currently displayed. The user can also navigate to other months in the past and in the future and then pick a date. A single click on a date closes the date picker dialog and updates the cell with that date. If the cell is empty or contains any non date value the calendar may default to today. If the cell contains a valid date value the calendar may default to that date.

In various embodiments methods systems and non transitory computer readable media are disclosed that allow developers to place model driven list pickers as components of a document using a desktop integration framework. The model driven list pickers can be tied to model metadata allowing a pick list to be dynamically generated using model data when the document is rendered. This allows workbook developers to leverage existing model layer metadata combined with simple workbook configuration to easily create powerful search and select user interfaces for choosing values cells.

In various embodiments desktop integration framework allows a developer to provide model driven list pickers associated with elements of document that enable a user interacting with application to pick from a list of values. A model driven list may include a search interface view that appears when a user s mouse is over the element or when the element is selected. Typically workbook developers that want to display a list of choices to a user take one of two approaches. First for lists with relatively few choices a component is provided that establishes a drop down choice list UI using native built in validation list features. This component is usually targeted at lists with up to about 20 choices. There can be a maximum list of for example 250 choices allowed for performance reasons. Second the developer can create a custom web page and display it from a component s double click action set using a Dialog action. The custom web page is feasible but tedious. In practice workbook developers avoid the development cost of the custom web pages.

In one aspect a document designer may desire to include a model driven list picker for given columns rows or cells of a spreadsheet application such as Microsoft Excel. In another aspect a document designer may desire to include a model driven list picker for a particular form component or a menu command such as a ribbon interface of Microsoft Office . ADF DI client component enables a document creator to easily specify a model driven list picker property for attributes of a component inserted into document . The model driven list picker property is defined during document creation separately and independently of any popup picking or list searching functionality natively provided by application . When document is rendered at run time ADF DI client component may provide one or more model driven list picker dialogs that help a user search and enter information. Because the model driven list picker is defined separately from document list information that populates the picker may be dynamically obtained and search by ADF DI client component from a variety of sources such as from a static mapping a resource bundle or model driven allowing a developer to associate source list data for model driven list pickers with an attribute of a model.

In step a component is selected. As discussed a document is created in an application that natively creates such documents or using a library that creates the document in a native format. According to a user can open an existing document or create a new document in application such as creating a new spreadsheet in Microsoft Excel. A document developer may edit structure or format the document in any desired manner using native and non native tools. Furthermore the developer may select from a list of pre provided components or the developer may create one or more components to add to the document.

In step data binding is provided. The data binding includes information utilized by ADF DI client component to render contents of the document based on data obtained from application server . In one aspect the document metadata identifies each component included in the document and how each component is bound to one or more objects in ADF model . Document metadata may further provide access information static data and other logic or data manipulation information provided by the developer.

In step a model driven list picker is associated with the component. In various embodiments ADF DI client component provides a model driven list picker component or a component property for some or all components that may be added to document . In one aspect when a component or column is created from a binding element a model driven list picker interface can be automatically set to a list of choices that are model driven.

A model driven component may include an action set property. If a column is bound to a list type attribute the EnabledInputListOfValues property may be used to determine the behavior. If EnabledInputListOfValues is true the action set of the component will launch the list picker.

In various embodiments model driven list pickers may be defined as components or on components rather than utilizing native search and selection aspects of application . In one aspect document contents are rendered during document design to determine how one or more list pickers defined as or on one or more components behave. In one aspect a test mode feature can allow document contents to be rendered to test one or more list pickers and when stopping the test mode ADF DI client component returns to design time. ends in step .

Accordingly a document designer may include a model driven list picker for given columns rows or cells of a spreadsheet application such as Microsoft Excel. In another aspect a document designer may desire to include model driven list pickers for a particular form component or a menu command such as a ribbon interface of Microsoft Office . ADF DI client component can provide a subcomponent selection UI that enables a document creator to easily include a model driven list picker subcomponent for attributes of a component inserted into document . The model driven list picker property is defined during document creation separately and independently of any popup or list functionality natively provided by application . When document is rendered at run time ADF DI client component may leverage native model driven list picker functionality of application or alternative model driven list pickers to provide users with a list of selectable choices. Because selection choices for model driven list pickers can be defined separately from document list information may be dynamically obtained by ADF DI client component from a variety of sources such as from a static mapping a resource bundle or model driven allowing a developer to associate a popup with an attribute of a model and source lists information from the model.

In step a document and its corresponding metadata are received. According to a user can interact with application server to retrieve a desired document such as by clicking a document link. The document and metadata may be downloaded or otherwise communicated to desktop and opened in application .

In step model driven list picker information is determined based on the document metadata. As discussed above the document metadata includes information utilized by ADF DI client component to render contents of the document based on data obtained from application server . Accordingly ADF DI client component determines which components are to be added to the document and where and what data is used by each component as well as applies any logic defined by a developer. ADF DI client component further determines whether any components have associated model driven list picker information. In various aspects model driven list picker information is delivered separately from the published document. Model driven list picker information may be transmitted with the actual data to be rendered as the contents of document .

In step document data is processed. As discussed above published documents can be stored separately from the document metadata and the actual data used by the document. In general the published document includes at least enough metadata that enables ADF DI client component to initialize the document and request additional information from ADF DI server component to render the contents of document for the user.

In step the document is rendered using any associated model driven list picker information. As discussed above ADF DI client component may retrieve from or through from ADF DI server component data from ADF model or other logic associated with document . ADF DI client component may further retrieve from or through from ADF DI server component any metadata that includes model driven list picker information or other associated list selection information. Finally ADF DI client component may then render contents of document utilizing the associated model driven list picker information.

In one embodiment ADF DI client component renders model driven list picker dialogs utilizing non native or native features of application . For example ADF DI client component may insert model driven list pickers utilizing APIs or other functionality native to application . In another example ADF DI client component may insert model driven list pickers utilizing APIs or other functionality external to application . One or more transfer or translation mechanisms may be used to insert information obtained using external APIs into application such as operating system clipboards and the like. ends in step .

When a user selects or otherwise interacts with a portion of a document associated with a model driven list picker picker may be displayed or otherwise conveyed to the user as illustrated in . In this example search interface allows the user to search for a desired value to be inserted in the document. Results interface provides a list of results that match one or more conditions specified in search interface . Results interface may further provide a list of all values from which a user may select. Accordingly a user may select from a preconfigured list of values a dynamically generated list of values driven by a data model a pre generated list of search results as well as a dynamically generated list of search results.

In this example search interface is modal such that it must be closed via the OK or Cancel button. The end user may resize the dialog using standard Windows UI gestures e.g. grabbing the border and dragging . The initial position of search interface may be close to a launching cell leaving the launching cell visible if possible . The title of search interface may be derived from an attribute label. The content area of search interface shows one or more UI elements. For example when a picker dialog first opens a search form is visible.

An end user may type paste a desired value directly into a worksheet cell bound to a ModelDrivenColumn component. In this case a picker does not appear. No web app session is needed for this manual entry case. Alternatively a picker dialog may require a valid user session. If no session exists when a picker is invoked a login sequence may be triggered. For web applications that enforce authentication a Login dialog appears. After the user successfully logs in the picker dialog appears. However if the end user does not successfully establish a session e.g. they cancel out of the login dialog then the picker dialog does not appear and there are no changes to the launching cell.

This feature provides a simple and easy approach for workbook developers to present a standard search select UI via a picker dialog to their end users. Developers that wish to provide a custom search select UI may use the existing popup Dialog action feature.

Systems depicted in some of the figures may be provided in various configurations. In some embodiments the systems may be configured as a distributed system where one or more components of the system are distributed across one or more networks in a cloud computing system.

In various embodiments server may be adapted to run one or more services or software applications provided by one or more of the components of the system. In some embodiments these services may be offered as web based or cloud services or under a Software as a Service SaaS model to the users of client computing devices and or . Users operating client computing devices and or may in turn utilize one or more client applications to interact with server to utilize the services provided by these components.

In the configuration depicted in the figure the software components and of system are shown as being implemented on server . In other embodiments one or more of the components of system and or the services provided by these components may also be implemented by one or more of the client computing devices and or . Users operating the client computing devices may then utilize one or more client applications to use the services provided by these components. These components may be implemented in hardware firmware software or combinations thereof. It should be appreciated that various different system configurations are possible which may be different from distributed system . The embodiment shown in the figure is thus one example of a distributed system for implementing an embodiment system and is not intended to be limiting.

Client computing devices and or may be portable handheld devices e.g. an iPhone cellular telephone an iPad computing tablet a personal digital assistant PDA or wearable devices e.g. a Google Glass head mounted display running software such as Microsoft Windows Mobile and or a variety of mobile operating systems such as iOS Windows Phone Android BlackBerry 10 Palm OS and the like and being Internet e mail short message service SMS Blackberry or other communication protocol enabled. The client computing devices can be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows Apple Macintosh and or Linux operating systems. The client computing devices can be workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems such as for example Google Chrome OS. Alternatively or in addition client computing devices and may be any other electronic device such as a thin client computer an Internet enabled gaming system e.g. a Microsoft Xbox gaming console with or without a Kinect gesture input device and or a personal messaging device capable of communicating over network s .

Although exemplary distributed system is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

Network s in distributed system may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP transmission control protocol Internet protocol SNA systems network architecture IPX Internet packet exchange AppleTalk and the like. Merely by way of example network s can be a local area network LAN such as one based on Ethernet Token Ring and or the like. Network s can be a wide area network and the Internet. It can include a virtual network including without limitation a virtual private network VPN an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the Institute of Electrical and Electronics IEEE 802.11 suite of protocols Bluetooth and or any other wireless protocol and or any combination of these and or other networks.

Server may be composed of one or more general purpose computers specialized server computers including by way of example PC personal computer servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing described above according to an embodiment of the present disclosure.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP hypertext transport protocol servers FTP file transfer protocol servers CGI common gateway interface servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM International Business Machines and the like.

In some implementations server may include one or more applications to analyze and consolidate data feeds and or event updates received from users of client computing devices and . As an example data feeds and or event updates may include but are not limited to Twitter feeds Facebook updates or real time updates received from one or more third party information sources and continuous data streams which may include real time events related to sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like. Server may also include one or more applications to display the data feeds and or real time events via one or more display devices of client computing devices and .

Distributed system may also include one or more databases and . Databases and may reside in a variety of locations. By way of example one or more of databases and may reside on a non transitory storage medium local to and or resident in server . Alternatively databases and may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases and may reside in a storage area network SAN . Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases and may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple buses. Bus subsystem may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. For example such architectures may include an Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus which can be implemented as a Mezzanine bus manufactured to the IEEE P1386.1 standard.

Processing unit which can be implemented as one or more integrated circuits e.g. a conventional microprocessor or microcontroller controls the operation of computer system . One or more processors may be included in processing unit . These processors may include single core or multicore processors. In certain embodiments processing unit may be implemented as one or more independent processing units and or with single or multicore processors included in each processing unit. In other embodiments processing unit may also be implemented as a quad core processing unit formed by integrating two dual core processors into a single chip.

In various embodiments processing unit can execute a variety of programs in response to program code and can maintain multiple concurrently executing programs or processes. At any given time some or all of the program code to be executed can be resident in processor s and or in storage subsystem . Through suitable programming processor s can provide various functionalities described above. Computer system may additionally include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

I O subsystem may include user interface input devices and user interface output devices. User interface input devices may include a keyboard pointing devices such as a mouse or trackball a touchpad or touch screen incorporated into a display a scroll wheel a click wheel a dial a button a switch a keypad audio input devices with voice command recognition systems microphones and other types of input devices. User interface input devices may include for example motion sensing and or gesture recognition devices such as the Microsoft Kinect motion sensor that enables users to control and interact with an input device such as the Microsoft Xbox 360 game controller through a natural user interface using gestures and spoken commands. User interface input devices may also include eye gesture recognition devices such as the Google Glass blink detector that detects eye activity e.g. blinking while taking pictures and or making a menu selection from users and transforms the eye gestures as input into an input device e.g. Google Glass . Additionally user interface input devices may include voice recognition sensing devices that enable users to interact with voice recognition systems e.g. Siri navigator through voice commands.

User interface input devices may also include without limitation three dimensional 3D mice joysticks or pointing sticks gamepads and graphic tablets and audio visual devices such as speakers digital cameras digital camcorders portable media players webcams image scanners fingerprint scanners barcode reader 3D scanners 3D printers laser rangefinders and eye gaze tracking devices. Additionally user interface input devices may include for example medical imaging input devices such as computed tomography magnetic resonance imaging position emission tomography medical ultrasonography devices. User interface input devices may also include for example audio input devices such as MIDI keyboards digital musical instruments and the like.

User interface output devices may include a display subsystem indicator lights or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as that using a liquid crystal display LCD or plasma display a projection device a touch screen and the like. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system to a user or other computer. For example user interface output devices may include without limitation a variety of display devices that visually convey text graphics and audio video information such as monitors printers speakers headphones automotive navigation systems plotters voice output devices and modems.

Computer system may comprise a storage subsystem that comprises software elements shown as being currently located within a system memory . System memory may store program instructions that are loadable and executable on processing unit as well as data generated during the execution of these programs.

Depending on the configuration and type of computer system system memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. The RAM typically contains data and or program modules that are immediately accessible to and or presently being operated and executed by processing unit . In some implementations system memory may include multiple different types of memory such as static random access memory SRAM or dynamic random access memory DRAM . In some implementations a basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up may typically be stored in the ROM. By way of example and not limitation system memory also illustrates application programs which may include client applications Web browsers mid tier applications relational database management systems RDBMS etc. program data and an operating system . By way of example operating system may include various versions of Microsoft Windows Apple Macintosh and or Linux operating systems a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems the Google Chrome OS and the like and or mobile operating systems such as iOS Windows Phone Android OS BlackBerry 10 OS and Palm OS operating systems.

Storage subsystem may also provide a tangible computer readable storage medium for storing the basic programming and data constructs that provide the functionality of some embodiments. Software programs code modules instructions that when executed by a processor provide the functionality described above may be stored in storage subsystem . These software modules or instructions may be executed by processing unit . Storage subsystem may also provide a repository for storing data used in accordance with the present invention.

Storage subsystem may also include a computer readable storage media reader that can further be connected to computer readable storage media . Together and optionally in combination with system memory computer readable storage media may comprehensively represent remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information.

Computer readable storage media containing code or portions of code can also include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information. This can include tangible computer readable storage media such as RAM ROM electronically erasable programmable ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other tangible computer readable media. This can also include nontangible computer readable media such as data signals data transmissions or any other medium which can be used to transmit the desired information and which can be accessed by computing system .

By way of example computer readable storage media may include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM DVD and Blu Ray disk or other optical media. Computer readable storage media may include but is not limited to Zip drives flash memory cards universal serial bus USB flash drives secure digital SD cards DVD disks digital video tape and the like. Computer readable storage media may also include solid state drives SSD based on non volatile memory such as flash memory based SSDs enterprise flash drives solid state ROM and the like SSDs based on volatile memory such as solid state RAM dynamic RAM static RAM DRAM based SSDs magnetoresistive RAM MRAM SSDs and hybrid SSDs that use a combination of DRAM and flash memory based SSDs. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for computer system .

Communications subsystem provides an interface to other computer systems and networks. Communications subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . For example communications subsystem may enable computer system to connect to one or more devices via the Internet. In some embodiments communications subsystem can include radio frequency RF transceiver components for accessing wireless voice and or data networks e.g. using cellular telephone technology advanced data network technology such as 3G 4G or EDGE enhanced data rates for global evolution WiFi IEEE 802.11 family standards or other mobile communication technologies or any combination thereof global positioning system GPS receiver components and or other components. In some embodiments communications subsystem can provide wired network connectivity e.g. Ethernet in addition to or instead of a wireless interface.

In some embodiments communications subsystem may also receive input communication in the form of structured and or unstructured data feeds event streams event updates and the like on behalf of one or more users who may use computer system .

By way of example communications subsystem may be configured to receive data feeds in real time from users of social networks and or other communication services such as Twitter feeds Facebook updates web feeds such as Rich Site Summary RSS feeds and or real time updates from one or more third party information sources.

Additionally communications subsystem may also be configured to receive data in the form of continuous data streams which may include event streams of real time events and or event updates that may be continuous or unbounded in nature with no explicit end. Examples of applications that generate continuous data may include for example sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like.

Communications subsystem may also be configured to output the structured and or unstructured data feeds event streams event updates and the like to one or more databases that may be in communication with one or more streaming data source computers coupled to computer system .

Computer system can be one of various types including a handheld portable device e.g. an iPhone cellular phone an iPad computing tablet a PDA a wearable device e.g. a Google Glass head mounted display a PC a workstation a mainframe a kiosk a server rack or any other data processing system.

Due to the ever changing nature of computers and networks the description of computer system depicted in the figure is intended only as a specific example. Many other configurations having more or fewer components than the system depicted in the figure are possible. For example customized hardware might also be used and or particular elements might be implemented in hardware firmware software including applets or a combination. Further connection to other computing devices such as network input output devices may be employed. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

In the foregoing specification aspects of the invention are described with reference to specific embodiments thereof but those skilled in the art will recognize that the invention is not limited thereto. Various features and aspects of the above described invention may be used individually or jointly. Further embodiments can be utilized in any number of environments and applications beyond those described herein without departing from the broader spirit and scope of the specification. The specification and drawings are accordingly to be regarded as illustrative rather than restrictive.

Various embodiments of any of one or more inventions whose teachings may be presented within this disclosure can be implemented in the form of logic in software firmware hardware or a combination thereof. The logic may be stored in or on a machine accessible memory a machine readable article a tangible computer readable medium a computer readable storage medium or other computer machine readable media as a set of instructions adapted to direct a central processing unit CPU or processor of a logic machine to perform a set of steps that may be disclosed in various embodiments of an invention presented within this disclosure. The logic may form part of a software program or computer program product as code modules become operational with a processor of a computer system or an information processing device when executed to perform a method or process in various embodiments of an invention presented within this disclosure. Based on this disclosure and the teachings provided herein a person of ordinary skill in the art will appreciate other ways variations modifications alternatives and or methods for implementing in software firmware hardware or combinations thereof any of the disclosed operations or functionalities of various embodiments of one or more of the presented inventions.

The disclosed examples implementations and various embodiments of any one of those inventions whose teachings may be presented within this disclosure are merely illustrative to convey with reasonable clarity to those skilled in the art the teachings of this disclosure. As these implementations and embodiments may be described with reference to exemplary illustrations or specific figures various modifications or adaptations of the methods and or specific structures described can become apparent to those skilled in the art. All such modifications adaptations or variations that rely upon this disclosure and these teachings found herein and through which the teachings have advanced the art are to be considered within the scope of the one or more inventions whose teachings may be presented within this disclosure. Hence the present descriptions and drawings should not be considered in a limiting sense as it is understood that an invention presented within a disclosure is in no way limited to those embodiments specifically illustrated.

Accordingly the above description and any accompanying drawings illustrations and figures are intended to be illustrative but not restrictive. The scope of any invention presented within this disclosure should therefore be determined not with simple reference to the above description and those embodiments shown in the figures but instead should be determined with reference to the pending claims along with their full scope or equivalents.

