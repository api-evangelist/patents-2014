---

title: Method and system of continuous contextual user engagement
abstract: In one exemplary aspect, a contextual user engagement system for automatically engaging in a conversation with a user is provided. A context manager manage, with at least one processor, the context of the conversation with a user. The context manager receives a user utterance, wherein the context manager calls the other modules of the contextual user engagement system to obtain information with respect to the user utterance. The context manager maintains a context object for a conversation with a user. The context manager automatically updates the context object based on an information detected by the other modules of contextual user engagement system. A content knowledge database stores a content knowledge of the contextual user engagement system. The content knowledge includes a history of interactions with the user. An information extraction engine extract information from a specified source based on a set of rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460155&OS=09460155&RS=09460155
owner: 
number: 09460155
owner_city: 
owner_country: 
publication_date: 20140305
---
This application claims priority to U.S. provisional patent application No. 61 773 145 filed on Mar. 6 2013. This application also claims priority to U.S. provisional patent application No. 61 948 489 filed on Mar. 5 2014. These applications are incorporated herein by reference.

This application relates generally to natural language user interfaces for domains such as expense management enterprise mobility and e commerce and more specifically to a system article of manufacture and method of continuous contextual user engagement.

The increasing functionality of electronic devices such as smart phones is leading to a significant increase in their popularity. In turn these trends are leading to an increase in the number and types of software applications that are available for use on these electronic devices. Users often utilize electronic devices to request services from applications. Increasingly natural language user interfaces are available to interact with various applications. Natural language user interfaces can perform such functions as recommendations and delegate requests to a set of services e.g. search queries of databases or the Internet . Accordingly a contextual user engagement system for automatically engaging in a conversation can increase user satisfaction with natural language user interfaces.

In one aspect a contextual user engagement system for automatically engaging in a conversation with a user is provided. A context manager manages with at least one processor the context of the conversation with a user. The context manager receives a user utterance wherein the context manager calls the other modules of the contextual user engagement system to obtain information with respect to the user utterance. The context manager maintains a context object for a conversation with a user. The context manager automatically updates the context object based on information detected by the other modules of contextual user engagement system. A content knowledge database stores a content knowledge of the contextual user engagement system. The content knowledge includes a history of interactions with the user. An information extraction engine extracts information from a specified source based on a set of rules. A contextual topic engine extract topics and entities from text provided by a user based on a specified semantic model. A discourse manager provides an interactive dialog with the user. A natural language generation module generates an explanation for results and appropriate utterances to be communicated to the user. An inference engine infers a fact or a user intent based on at least one of an inference rules the specified semantic model or a set of information in the context object. An Execution Engine creates a query plan for the query engine to execute. The query engine contains connectors for SQL NoSQL databases Enterprise Systems such as Oracle and ERP an API engine and an engine for analyzing unstructured data.

The Figures described above are a representative set and are not an exhaustive with respect to embodying the invention.

Disclosed are a system method and article of continuous contextual user engagement. The following description is presented to enable a person of ordinary skill in the art to make and use the various embodiments. Descriptions of specific devices techniques and applications are provided only as examples. Various modifications to the examples described herein may be readily apparent to those of ordinary skill in the art and the general principles defined herein may be applied to other examples and applications without departing from the spirit and scope of the various embodiments.

Reference throughout this specification to one embodiment an embodiment one example or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Furthermore the described features structures or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art can recognize however that the invention may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

The schematic flow chart diagrams included herein are generally set forth as logical flow chart diagrams. As such the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more steps or portions thereof of the illustrated method. Additionally the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams and they are understood not to limit the scope of the corresponding method. Indeed some arrows or other connectors may be used to indicate only the logical flow of the method. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.

It is noted that data may be sampled in various locations and different time periods according there are several methods which may be used to select a proper sample size and or use a given sample to make statements within a range of accuracy determined by the sample size about a specified population. These methods may include for example 

1. Classical Statistics as for example in Probability and Statistics for Engineers and Scientists by R. E. Walpole and R. H. Myers Prentice Hall 1993 Chapter 8 and Chapter 9 where estimates of the mean and variance of the population are derived.

2. Bayesian Analysis as for example in Bayesian Data Analysis by A Gelman I. B. Carlin H. S. Stem and D. B. Rubin Chapman and Hall 1995 Chapter 7 where several sampling designs are discussed.

3. Artificial Intelligence techniques or other such techniques as Expert Systems or Neural Networks as for example in Expert Systems Principles and Programming by Giarratano and G. Riley PWS Publishing 1994 Chapter 4 or Practical Neural Networks Recipes in C by T. Masters Academic Press 1993 Chapters 15 16 19 and 20 where population models are developed from acquired data samples.

A system and method that continuously engages the user to accomplish a wide range of tasks e.g. refining search queries to find of information of interest refining a plan to be executed such as party planning filling complex expense forms finding meeting rooms querying enterprise systems such as expense management financial systems and customer relationship management etc. . The system can utilize rule based and statistical natural language processing NLP natural language understanding NLU approaches to parse and understand the user s requests in natural language. As used herein NLP functionalities can include machine learning functionalities e.g. statistical machine learning functionalities to process natural language information.

As used herein NLU can include various methods of machine reading comprehension. For example the system can include a lexicon of the language and a parser and or grammar rules to break sentences into an internal representation. The system can also include semantic theory functionalities to guide comprehension and interpretation capabilities. Semantic theory functionalities can include inter alia naive semantics stochastic semantic analysis and or pragmatics to derive meaning from context.

Rich semantic models and ontologies can also be utilized to reason about and infer additional context and information left implicit by the user. Discourse management techniques to guide the engagement with the user by asking questions in natural language to obtain clarification and or additional information e.g. not communicate to perform the task at hand. System modules can communicate with and maintain facts based on ongoing dialog with the user in a context knowledge base.

Information extraction engine can extract information from various sources based on a set of rules and or patterns. For example probabilistic information extraction rule engine can extract complex attributes and or facets from text based on specified information extraction rules and or patterns. Key features can include the ability of users to extend the probabilistic information extraction rule engine with domain specific rules and or patterns . Users can also extend the probabilistic information extraction rule engine by providing software code instructions for complex patterns. Probabilistic information extraction rule engine can assign a probability to each extracted attribute feature based on such factors as number of occurrences dealing with negation etc. Information extraction engine can extract complex attributes and facets from text e.g. user input based on information extraction rules and patterns. Key features can include the ability of users to extend information extraction engine with domain specific rules and or patterns. Users can also extend information extraction engine by writing code for complex patterns. Information extraction engine can assign a probability to each extracted attribute feature e.g. a confidence value as provided in infra based on number of occurrences dealing with negation etc.

Contextual topic engine can extract topics and or entities from text based on semantic ontologies and models. Key features can include the concept of semantic breadcrumbs . Semantic breadcrumbs can leverage the information in the context object to determine a most likely entity to be extracted and or deal with negation. In one example a user utterance can include a generic word which can map to more than one candidate concepts. The contextual topic engine can use semantic matching between the context object and the candidate topics to identify the most likely topic. For example the user may say I want helmets . The contextual topic engine can determine a number of candidate topics e.g. baseball helmet football helmet bike helmet etc. . The contextual topic engine can utilize semantic similarity between the context object and the candidate topics to determine a most likely topic. If the user had mentioned I like football in an earlier statement the contextual topic engine can select football helmet from the candidate topics. However in the event no semantic match is determine then all the topics can be returned.

Discourse manager can provide an interactive dialog with the user. Discourse manager can be configured by specifying a set of states and rules . Discourse manager can be used to generate and manage and interactive dialog with the users. In one example discourse manager can follow a mixed initiative dialog paradigm. For example discourse manager can starts with asking questions but users can change the dialog direction. Discourse manager can understand the user even when the user enters input about details he was not asked about yet. The system designer can configure discourse manager by specifying a set of states and scripts. At every query from the user discourse engine can check to see whether there are any states whose triggers evaluate to true by evaluating the facts in the context knowledge base. If there are any such states of one of them is executed and the appropriate dialog is shown to the user. If the state being executed has a response verify construct then the discourse engine stays in the same state until it verifies the response otherwise it goes back to evaluating which state to next evaluate. Discourse manager can also include a help of a script specifies a set of states to be executed when a certain trigger evaluates to true. A discourse state can be of form trigger t dialog d responseVerify rv standalone T F repeat T F . The discourse state can become ready to be executed if all assertions in trigger t are true in the context knowledge base. Dialog d is used to specify a set of equivalent alternative dialogues to be shown to the user when the state is executed. responseVerify variable rv can specifies a set of patterns for each specific response that the discourse manager can be expecting from the user. standAlone variable can be used to specify the state can be executed outside a script. repeat can be used to specify whether a state can be repeated if the trigger still evaluates to true after the state has been executed once signifying that the user did not provide the appropriate response.

An example of a trigger construct of discourse manager is now provided. The trigger construct can include a set of assertions which evaluate to true for an assertion to be executed. Each assertion can be of form attr value min conf pair with confidence at least min conf value e.g. as specified by a system administrator . Each trigger consists of a set of assertions and each assertion can a three tuple consisting of attribute attr e.g. a name of the attribute value val e.g. the value of the attribute and or minimum confidence min conf e.g. the assertion can have at least min conf confidence in the context knowledge base . In one example the trigger can evaluate to true when both the assertions also evaluate to true 

An example of a response verify construct of discourse manager is now provided. The response verify construct can include a set of responses which discourse manager can expect after a state is executed. Each response can be a three tuple such as . This example three tuple can include pattern p e.g. the pattern of the response. Pattern p can be as the pattern construct in a rule based NL engine. Action a can include a set of assertions asserted in the context knowledge base when the state executes. Action a can be the same as the action construct in a rule based NL engine. Chain chain can be the next state to be executed when the response is verified. In the example below discourse manager can expect a user to respond with either romantic or honeymoon . When the user as expected the vacation type romantic can be asserted with confidence 1.0 and discourse manger can transition to a subsequent state such as romantic 01.

 response pattern romantic honeymoon action valType None valXform None attr vacation type val romantic confidence 1.0 chain romantic 01 .

Information and function NLG module can generate explanations for results and appropriate utterances to be shown to the user NLG module can generate natural language from a machine representation system such as a knowledge base or a logical form. NLG module can convert a computer based representation into a natural language representation.

Inference engine can infers new facts and or user intent based on inference rules and or semantic models ontologies as well as all the information in a context object. In some embodiments inference engine can be included in a semantic engine that also includes a semantic reasoner not shown .

Query engine can include connector s for such entities as SQL NoSQL databases an application programming interface API engine an enterprise system connector such as Oracle and or ERP and or an engine for analyzing unstructured data . The query engine can generate a query plan based on the context object for the conversation and the configured data sources for that domain. The query plan can be represented using web services business process execution language WS BPEL . Query engine can contain a rich set of connectors that allows it to connect to variety of data sources inside and outside the enterprise. The SQL NoSQL connector can leverage open source technologies such as Hibernate Apache Tomcat and or PyMongo to connect to relational databases and or non relational databases. The SQL NoSQL databases connector can provide the following capabilities inter alia declarative approach of specifying mappings ability to assess data quality and automatically generate data quality rules ability to detect similar columns in relational databases. API engine can provide various capabilities for API based services such as inter cilia calling both RESTful and SOAP based services. APIs can be added for each domain either as a list or in a proprietary semantic registry. APIs are ranked based on automated feedback from system. For example for a category jewelry if there are five 5 APIs then these can be ranked using various factors such as the number of results clicked by user and or number of results returned. APIs can be bound at run time to execution plans created by execution engine by querying the semantic registry. Results from different APIs for same node can be combined based on the query plan created by execution engine . These results can include results ranked by API rank results ranked by match to query results for top three 3 ranked APIs for a particular category etc. An example of an API semantic registry is provided in infra.

The engine for analyzing unstructured data can implement the extraction of attributes from unstructured data. For a corpus point wise mutual information is used to find terms that occur in each other s context exclusively with four 4 words of each other . If a certain term pair has a certain frequency it can be flagged as a potential attribute. For example unstructured data can be matched to user queries. Term frequency inverse document frequency TF IDF vectors can be created from unstructured data such as restaurant reviews. Terms that occur in semantic model are given higher weights. TF IDF vectors can be created from user queries and or cosign similarity can be used to find reviews that are semantically close to the user query.

Enterprise system connector can be based on creating semantic models for commonly used artifacts in enterprise systems. These models can have specific connectors for different existing enterprise systems including but not limited to SAP ERP Oracle ERP SalesForce CRM Microsoft Exchange and or Sharepoint . The semantic models can provide integrated access to various enterprise systems. The models can include the ability to capture constraints in a dynamic fashion. For example the connector can automatically extract policies for each type of expense and makes it available to downstream applications. The system of can be used for interacting with e commerce systems and enterprise systems such as expense management and customer relationship management.

An example of an information extraction rule is now provided by way of example and not of limitation. It is noted that a pattern construct in an information extraction rule can have the following example operators 

The action construct can include a set of actions. Each action can asserts an attribute value C pair with a confidence C in the context knowledge base when it is executed. Each action can be a five tuple such as . The attribute attr can have a value that is asserted when the action is executed. The value val of the attribute can be a primitive value such as a string or Boolean. The value can also be the value of variable e.g. VAL x from the pattern construct. The value type valType can be a variable. The value type can be used to denote the type of the variable for the action to execute. For example when the value type is Money then the action is executed only the actual value of the variable is Money. When the value is a primitive then value type can have the value None . When the value is a variable then a value transform function valXform can be written to transform the value. Confidence conf can provide the confidence of the value.

In a user input s such as string under three years old can be received by rule based natural language engine . Rule based natural language engine can apply rule to user input s . KidAge can be a function that returns true if the value of the variable that denotes a kids age in number or words e.g. 2 or twelve . kid x age words can be a function that converts the child s age either in numerical digits or words to the child s age in numerical digits. Rule assertion can be generated by rule based natural language engine using rule . For example in the present example any of the input strings of user input s rule assertion can be included in the context knowledge base as s kids age 3 1.0 .

The same information may be extracted multiple times by the same rule over consecutive rounds of interaction with the user or by different IE rules over the same NL input. Some of them may be in positive context and others may be in negative context. The Statistical IE Rule Engine calculates confidence score for each variable. Confidence score for a variable f I vi is defined as follows 

The elements of this equation can be defined as follows. C can be the confidence in the information extraction rule that extracted the attribute value pair from the user s NL input can be an indicator function for whether a particular value occurred within a negated context.

I vi is the collection of all occurrences of the value vi extracted from the user s NL input. Moreover when a value occurs within a negated context the confidence of the IE rule used to extract the value can be adjusted accordingly based on the following equation 

As provided supra a discourse manager e.g. discourse manger can be used for interactive dialog with the users.

Although the present embodiments have been described with reference to specific example embodiments various modifications and changes can be made to these embodiments without departing from the broader spirit and scope of the various embodiments. For example the various devices modules etc. described herein can be enabled and operated using hardware circuitry firmware software or any combination of hardware firmware and software e.g. embodied in a machine readable medium .

In addition it may be appreciated that the various operations processes and methods disclosed herein can be embodied in a machine readable medium and or a machine accessible medium compatible with a data processing system e.g. a computer system and can be performed in any order e.g. including using means for achieving the various operations . Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. In some embodiments the machine readable medium can be a non transitory form of machine readable medium.

