---

title: Generic control layer in a cloud environment
abstract: A computing system implemented method, in one embodiment, can include a cloud control module receiving a constraint for cloud architecture. In addition, the method can include the cloud control module receiving a plurality of cloud service provider capabilities. Furthermore, the method can include the cloud control module filtering the plurality of cloud service provider capabilities to identify a cloud service provider capable of satisfying the constraint. Moreover, the method can include the cloud control module outputting an instruction for a resource from the cloud service provider.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09215190&OS=09215190&RS=09215190
owner: Accenture Global Services Limited
number: 09215190
owner_city: Dublin
owner_country: IE
publication_date: 20141009
---
This application is a continuation and claims the benefit of priority under 35 USC 120 of U.S. application Ser. No. 13 071 442 filed Mar. 24 2011 now allowed which claims the benefit to U.S. Provisional Application No. 61 321 761 filed Apr. 7 2010 entitled Generic Control Layer in a Cloud Environment. Both of these prior applications are hereby incorporated by reference in their entirety.

Cloud computing is appealing to most enterprises because of its promise of commodity and on demand utility computing. However cloud computing faces key barriers to adoption. For example key policy issue barriers can include legal indemnity and compliance. In addition key technology issue barriers can involve security reliability and performance. Furthermore what makes navigating these issues difficult is that cloud based application architecture is confusing. First the term cloud is overloaded and used by many vendors each with vastly differing offerings. Second the on demand and scalability features of cloud computing are new and architects are still working to understand how to leverage these capabilities.

A computing system implemented method in one embodiment can include a cloud control module receiving a constraint for cloud architecture. In addition the method can include the cloud control module receiving a plurality of cloud service provider capabilities. Furthermore the method can include the cloud control module filtering the plurality of cloud service provider capabilities to identify a cloud service provider capable of satisfying the constraint. Moreover the method can include the cloud control module outputting an instruction for a resource from the cloud service provider. Note that in various embodiments the instruction for a resource can be implemented as but is not limited to a number of appliances to provision from the cloud service provider a selection of a vendor provided platform from the cloud service provider and or a selection of a vendor provided software application from the cloud service provider.

While particular embodiments in accordance with the disclosure have been specifically described within this Summary it is noted that the disclosure and the claimed subject matter are not limited in any way by these embodiments.

Reference will now be made in detail to various embodiments in accordance with the disclosure examples of which are illustrated in the accompanying drawings. While the disclosure will be described in conjunction with various embodiments it will be understood that these various embodiments are not intended to limit the disclosure. On the contrary the disclosure is intended to cover alternatives modifications and equivalents which may be included within the scope of the disclosure. Furthermore in the following detailed description of various embodiments in accordance with the disclosure numerous specific details are set forth in order to provide a thorough understanding of the disclosure. However it will be evident to one of ordinary skill in the art that the disclosure may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail as not to unnecessarily obscure aspects of the disclosure.

Some portions of the detailed descriptions that follow are presented in terms of procedures logic blocks processing and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. In the present application a procedure logic block process or the like is conceived to be a self consistent sequence of operations or steps or instructions leading to a desired result. The operations or steps are those utilizing physical manipulations of physical quantities. Usually although not necessarily these quantities can take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system or computing device. It has proven convenient at times principally for reasons of common usage to refer to these signals as transactions bits values elements symbols characters samples pixels or the like.

It is noted that in one embodiment in accordance with the disclosure a general description of cloud is a collection of network hosted services accessible from almost anywhere with the following attributes elastically scalable illusion of infinite capacity available on demand and consumption based charges with no upfront commitment but is not limited to such. This description can apply to all levels of the cloud e.g. process software application compute platform or virtual machine hosting .

In various embodiments one or more of the operations of the cloud management system can be performed by software by firmware by hardware or by any combination thereof but is not limited to such. The cloud management system can include processes of embodiments of the disclosure which can be carried out by a processor s and electrical components under the control of computer or computing device readable and executable instructions or code . The computer or computing device readable and executable instructions or code may reside for example in data storage features such as computer or computing device usable volatile memory computer or computing device usable non volatile memory and or computer or computing device usable mass data storage. However the computer or computing device readable and executable instructions or code may reside in any type of computer or computing device readable medium.

Within in one embodiment the cloud transformation layer transforms user generated application program and or data representation into the cloud consumable representation. Example transformations can include but are not limited to data encryption encoding for error correction formatting code recompiling code augmentation with the cloud provider specific Application Programming Interface API segmenting large data objects into smaller units reformatting data structures into XML Extensible Markup Language or applying business logic to structure data. Likewise example transformations applied to code can include but are not limited to recompiling translating into a different language or augmenting with additional code and or cloud provider specific API e.g. replacing a general get or put statement requesting storage and retrieval with the API specific to the cloud service provider s storage service . The processing by the transformation layer can complete the program for execution on the specific compute environment of the cloud.

Within the cloud control layer in an embodiment can prescribe the best possible or appropriate composition of an existing vendor provided platform and or set of virtual machine appliances needed to form the desired compute platform. The control layer can determine the quantity type and location of virtual appliances to create the desired compute platform. More than one time provisioning the control layer can determine how and when to scale the compute platform to meet guarantees around service level agreements SLAs compliance cost and capability. Note that the control layer can assign the formatted content from the transformation layer across the prescribed deployment. The control layer can ultimately determine how the cloud compute platform is fulfilled.

The cloud Instantiation Layer in one embodiment can execute the specification output by the cloud control layer e.g. automation of scripts provision maintain and tear down the prescribed deployment of virtual appliances . It is noted that as part of provisioning the scripts can add the assigned content software data configurations and connectivity to form the application platform. For example in an embodiment the cloud Instantiation Layer can apply the Internet Protocol IP address and update the Domain Name System DNS . Working with the Control Layer the Instantiation Layer can pass monitored statistics and then implement the updates when sourcing arrangements are recomputed. The Instantiation Layer can also govern how provisioning and configuration occurs specific to the cloud based service provider e.g. data center EC2 or GoGrid .

Within the Control Layer in an embodiment can determine the source scale and types of cloud and data center services needed in order to meet platform guarantees. As such the Control Layer can be dynamic and responsive to either changes in demand or conditions e.g. it is able to respond to a longer than expected processing times or shortened turn around window .

Within an embodiment the scaling algorithms or procedures of the cloud Control Layer can be generic and independent of application or platform. In networking the Transmission Control Protocol TCP can provide reliable end to end delivery of a packet stream regardless of the content being delivered or the network implementation. In a similar manner the cloud Control Layer algorithms or procedures can source and possibly scale the compute platform without knowledge of the content e.g. the application program and data or the details of the instantiation or implementation of the virtual machine appliances or vendor packaged platform. The sourcing algorithm or procedure works to prioritize preferred providers and filter out non compliant providers that do not fulfill application requirements then the scaling algorithm or procedure works to meet availability and performance objectives. The instantiation of the outputs prescribed by the Control Layer are left to other orchestration mechanisms e.g. provision and configure the virtual machine appliances .

In an embodiment logic or functionality of the Cloud Control Layer of the cloud management system can consider various desired attributes like but not limited to performance availability desired cost and compliance and chooses the best set and number of resources based on the offered capability of providers or vendors with defined terms like but not limited to capability average capacity maximum capacity start up time availability published cost and or location. It is pointed out that a provider s values for these terms may be based on published metrics or values or estimated from monitored and measured metrics collected over time or collected measurements of the provider or any combination thereof. Note that a provider s vector of values for performing a given capability is enough to summarize the application constraints for the Control Layer . Knowledge of the specific implementation within the virtual machine appliance or vendor packaged platform is not needed. In addition note that when the capability is summarized the algorithms or functions or procedures of the cloud Control Layer do not deal directly with virtual machine appliance implementation.

Within given the above application attributes and provider capability the cloud Control Layer can filter the providers or vendors by their ability to satisfy constraint and capability. From these preferred vendors the logic of the cloud Control Layer can determine scale and size to source from each vendor. This determination by the cloud Control Layer can include the assignment of roles e.g. primary and redundant or worker and aggregator. The output of the cloud Control Layer can be an instruction or instructions for one or more resources from the preferred vendors to the cloud Instantiation Layer . Note that in various embodiments the instruction s for a resource s can be implemented as but not limited to a number and type of virtual machine appliances from each vendor for the cloud Instantiation Layer to provision a selection of a vendor provided platform from the cloud service provider and or a selection of a vendor provided software application from the cloud service provider. Therefore the output of the cloud Control Layer may prescribe a vendor package platform that serves the functionality the details of building the platform a vendor pre bundled software application and or a number of virtual machine appliances that augment or replicate this functionality but is not limited to such.

When determined to build a platform the logic of the cloud Control Layer can stipulate the scaling to meet performance and availability. For example in an embodiment the cloud Control Layer chooses a number of primary active nodes needed to meet performance constraints. Then a number of additional redundant nodes needed to guarantee availability is determined by the cloud Control Layer . The Cloud Control Layer can take these numbers along with a cost calculation that multiplies the number of resources and their cost thereby resulting in a system of equations or procedures for determining the required resources.

Or instead of or in addition to building a platform the logic of the cloud Control Layer can stipulate a vendor packaged platform to meet performance and availability. For example in an embodiment the cloud Control Layer compares the price of a vendor packaged cloud based software application service that satisfies SLA constraints with that of a self sourced version. Then the cloud Control Layer can determine the vendor packaged platform self sourced platform or any combination that minimizes costs needed to guarantee performance and availability.

Within in one embodiment controller logic of the Cloud Control Layer can determine the number and location of the virtual appliances needed to service the compute prepared by the cloud Transformation Layer . Logic of the Cloud Control Layer can filter the provided appliances and packaged platforms based on capability to serve and on constraints e.g. remaining within the country or the data center . Then the logic of the Cloud Control Layer selects the appropriate number and type of appliances or packaged platforms based on preferences and to meet desired guarantees. With the help of constant monitoring from the cloud Instantiation Layer algorithms of the Cloud Control Layer can assign the files to be processed scale the number of virtual appliances and re assign files in case of delay or failure to meet time constraints. For example in an embodiment if the processing is taking longer than expected the logic of the Cloud Control Layer signals that an additional virtual appliance is required. By implementing the logic at the Cloud Control Layer there is control over the placement of the compute as well as the time constraint and availability.

Based on the determination of the Cloud Control Layer the cloud Instantiation Layer automates the appropriate scripts to provision the appliances or packaged platform connect the resulting appliances or platforms and tear down appliances or platforms when finished. It is noted that in one embodiment the cloud Instantiation Layer can use a script that installs a pre defined image of the appliances but is not limited to such. Implementation of logic at the Cloud Control Layer can determine the best possible or appropriate sourcing in terms of the quantity and placement of the appliances or packaged platforms and allows realization of custom attributes.

Within the cloud Instantiation Layer can provision and manage the deployment specified by the Cloud Control Layer . Functions at the cloud Instantiation Layer can determine what configuration settings are applied. In an embodiment the cloud Instantiation Layer can use application programming interfaces APIs and scripts for each data center or cloud provider or vendor to set up and configure the requested virtual machines or packaged platforms. The cloud Instantiation Layer can also consolidate the monitoring across service providers or vendors that is passed back to the Cloud Control Layer . In one embodiment for these actions service automation products may be leveraged like Rightscale or Appistry but is not limited to such. Note that changes in these actions e.g. update Amazon credentials can result in a change in the script used at the cloud Instantiation Layer without impacting the Cloud Control Layer .

Within the cloud management system in one embodiment security presents different concerns at each of the Cloud Transformation Layer the Cloud Control Layer and the Cloud Instantiation Layer . For example the Cloud Instantiation Layer can apply network port configurations to minimize intrusion can constantly monitor against compromise or network flooding and can signal the Cloud Control Layer for updates when adverse conditions are detected. In addition the Cloud Transformation Layer can provide encryption. As such each layer adds a different level of protection.

Within it is pointed out that in an embodiment scripts of the Cloud Instantiation Layer can check the health of provisioned machines and automatically re provision in the case of failures. Or in the case of vendor packaged platforms the Instantiation Layer checks on the health and automatically switches to a pre determined back up platform when needed. Logic of the Cloud Control Layer can act on real time monitoring to update the prescribed deployment with adequate backup capability. Additionally the Cloud Transformation Layer can apply error correction codes.

At operation of the cloud management system the cloud control layer can receive business service level agreements SLAs . It is noted that operation can be implemented in a wide variety of ways. For example in one embodiment the business service level agreements can be received by the cloud control layer at operation from a user interface of a computing device or system. In an embodiment the business service level agreements can be read in at operation from a file from the configuration management database. Note that operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation of the cloud Instantiation Layer can continuously monitor one or more service providers or vendors based on the received business service level agreements and then pass or send those monitored statistics to the cloud control layer . Note that operation can be implemented in a wide variety of ways. For example operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation the cloud control layer can determine whether each of the monitored statistics of the service level agreements is satisfying their corresponding defined threshold. If each threshold is satisfied no action is taken at operation by the cloud control layer . However if it is determined at operation that one or more thresholds are not satisfied the cloud control layer can proceed to operation . It is pointed out that operation can be implemented in a wide variety of ways. For example operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation of the cloud control layer can determine the bottleneck or obstacle causing the one or more service level agreements to not satisfy their corresponding defined threshold. It is noted that operation can be implemented in a wide variety of ways. For example in an embodiment the determination at operation can include analyzing the received monitored statistics to identify one or more virtual machine appliances and or worker nodes that are causing the bottleneck but is not limited to such. Operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation the cloud control layer can determine whether scaling the compute platform capacity will potentially eliminate the one or more bottlenecks determined at operation . If so the cloud control layer can proceed to operation . However if it is determined at operation that scaling the compute platform capacity will not eliminate the one or more bottlenecks the cloud control layer can proceed to operation . Note that operation can be implemented in a wide variety of ways. For example operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation of the cloud transformation layer can receive and transform code and data which are then transmitted by the cloud transformation layer to the cloud control layer . It is pointed out that operation can be implemented in a wide variety of ways. For example operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation of the cloud control layer utilizes the transformed code and data together with sizing and sourcing information in order to assign workload across the prescribed deployment. In addition the cloud control layer can transmit at operation the workload assignment information to the cloud instantiation layer . It is noted that operation can be implemented in a wide variety of ways. For example operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation after receiving the workload assignment information from the cloud control layer the cloud instantiation layer can distribute the workload across the prescribed deployment based on the workload assignment. Furthermore as part of the workload distribution at operation the cloud instantiation layer can provision and configure script in order to distribute the workload across the prescribed deployment based on the workload assignment. It is pointed out that operation can be implemented in a wide variety of ways. For example operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation of the cloud control layer can receive one or more cost constraints for service providers or vendors. It is noted that operation can be implemented in a wide variety of ways. For example in one embodiment the one or more cost constraints for service providers can be received by the cloud control layer at operation from a user interface of a computing device or system. Note that operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation the cloud control layer can receive one or more compliance requirements for service providers or vendors. Note that operation can be implemented in a wide variety of ways. For example in an embodiment the one or more compliance requirements for service providers can be received by the cloud control layer at operation from a user interface of a computing device or system. It is pointed out that operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation of the cloud control layer can receive one or more capability requirements for service providers or vendors. Note that operation can be implemented in a wide variety of ways. For example in one embodiment the one or more capability requirements for service providers can be received by the cloud control layer at operation from a user interface of a computing device or system. It is noted that operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation the cloud instantiation layer can acquire and transmit capability information for one or more service providers to the cloud control layer . It is pointed out that operation can be implemented in a wide variety of ways. For example operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation of the cloud control layer can utilize the received compliance requirements for service providers the received capability requirements for service providers and the received capability information for one or more service providers in order to filter out allowable service providers that are able to satisfy the requirements. R is noted that operation can be implemented in a wide variety of ways. For example operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation in order to scale the compute platform capacity to potentially eliminate the one or more bottlenecks determined at operation the cloud control layer can utilize the received one or more cost constraints and the allowable service providers to determine sizing and sourcing from each service provider or vendor. Additionally the cloud control layer can transmit or output at operation sizing and sourcing information to the cloud instantiation layer . It is pointed out that operation can be implemented in a wide variety of ways. For example in one embodiment the sizing and sourcing determination at operation by the cloud control layer can include the assignment of roles e.g. primary and redundant or worker and aggregator but is not limited to such. In addition the output of the cloud control layer at operation can be a number and type of virtual machine appliances from each vendor for the cloud instantiation layer to provision but is not limited to such. Furthermore the output of the cloud control layer at operation may prescribe a vendor provided platform that serves the basic functionality or the details of building the platform or a number of virtual machine appliances that augment or replicate this basic functionality. Operation can be implemented in any manner similar to that described herein but is not limited to such.

At operation of after receiving the sizing and sourcing information from the cloud control layer the cloud instantiation layer can provision and configure script in order to implement the sizing and sourcing from each service provider or vendor. Moreover the cloud instantiation layer at operation can also output or transmit the received sizing and sourcing information to the cloud control layer for use at operation . Note that operation can be implemented in a wide variety of ways. For example operation can be implemented in any manner similar to that described herein but is not limited to such.

Below is described the formulation by the Cloud Control Layer for scaling virtual appliances to meet performance and availability. For example in an embodiment first a number is chosen of primary active nodes needed to meet performance constraints. Then a determination is made of the number of additional redundant nodes needed to guarantee availability. Taking these numbers along with a cost calculation that multiplies the number of resources and their cost the result is a system of equations for the Cloud Control Layer to determine the required resources.

In one embodiment a determination is first made by the Cloud Control Layer of the number of primary nodes needed to meet performance constraints. At the highest level the Cloud Control Layer can in an embodiment consider a virtual machine appliance or when horizontally scalable a group of virtual machine appliances each fulfilling different roles e.g. load balancer and worker node . Note that the functionality of each role is not interchangeable so the composite performance is based on the performance of each role. For example the bottleneck can be the minimum capacity between the roles. Note that if there is a vendor packaged platform already in existence it can be considered on its own by the Cloud Control Layer . For example the Cloud Control Layer can consider the maximum capacity it can receive from that vendor packaged platform. It is noted that the vendor capacity can then be augmented by other vendors or from a sourcing of virtual appliances.

In an embodiment the focus can be on the determination of each role separately. In the case where the appliance does not horizontally scale then the number of nodes can be fixed by the Cloud Control Layer . For example if the load balancer appliance does not scale there can be one active node.

In one embodiment one case is horizontally scalable where appliances perform the same functionality in parallel. Generally this case is additive in capacity by increasing the number of primary nodes N the capacity increases linearly with N. The performance constraint varies based on the type of workload events sessions or batch items which are considered below . The number of active primary worker nodes N can be scaled by the Cloud Control Layer to meet performance constraints. For example if a maximum or average capacity is associated per node a scheme or technique scales N so that the sum of the maximum or average capacity of the N nodes is bounded by some number. Another scheme or technique by the Cloud Control Layer is described below in which the probability that the capacity of N nodes not being able to fulfill demand.

Within in an embodiment event based appliances replicate code so that all worker nodes offer the same service. The events to be processed can arrive within the same queue and then are load balanced across N worker nodes. The number of workers N can be determined by the Cloud Control Layer to provide the desired performance.

In one embodiment the cloud control layer can let T be the time to process one event. Guarantees around T determine the performance of event based systems. For example find the smallest N so that the probability of exceeding delay threshold Tis bounded by P in notation that is 

This system can be modeled by the cloud control layer as an M M N queue with arrival rate where arrivals experience exponential service time and are served by N similar and independent servers. The cloud Instantiation Layer can provide estimates of these parameters by monitoring the average inter arrival time of events 1 and the average time for a unit to be processed 1 .

In addition within the cloud control layer can let W t denote cumulative distribution function CDF of the waiting time in the system that includes time in the queue and the service time. This CDF gives 1 . In one embodiment the cloud control layer can select N minn W T 1 P the smallest non negative integer N that meets the constraint.

It is noted that in an embodiment session based appliances load balance worker nodes by sessions. Each appliance has a known capacity C number of sessions. In one embodiment the cloud control layer can provision N so that at any time the available system capacity NC is greater than the number of desired active sessions N is chosen to bound the probability of session blocking to be less than P.

Within the desired number of sessions can be modeled by the cloud control layer as an M M queue wherein sessions arrive with exponential rate depart at an exponential rate . In one embodiment the cloud control layer can assume that and vary slowly enough for the cloud Instantiation Layer to estimate. The cloud control layer can let Xbe the number of session requests at time t.

Note that in an embodiment the cloud control layer can suppose N is periodically chosen with period T Tthe start up time of a new machine. At the start of the period time 0 X n. Then N can be updated so that for the hitting time min0 

In an embodiment the cloud control layer can assume in batch jobs that the items to be processed are already collected as part of a separate process. In addition the worker nodes can process their items in parallel and present a summarized result for aggregation.

In one embodiment of the cloud control layer can let T be the time to process all items. Furthermore the number of worker nodes N can be evaluated to meet some bound T on the time to complete. For example in an embodiment the cloud control layer can re evaluate N continuously to guarantee that the probability the batch is completed within the allotted time.

The cloud control layer can assume in an embodiment the work is evenly partitioned so that with N worker nodes and a total workload W items that each node processes about k W N jobs. It is noted that for a given worker the time to process k events is X X . . . Xfor the cloud control layer where the sequence Xis the time to process items i is independent and identically or similarly distributed with mean d and variance . Then for one worker the probability that it finishes in T is approximately 

In one embodiment given the primary nodes N the number and sourcing of redundant nodes can be determined by the cloud control layer that are needed to meet availability guarantees. Note that in an embodiment the cloud control layer can be given the appliance and provider availability. As such the cloud control layer can let qdenote the availability of an appliance of type i. Furthermore qcan be independent across providers. The cloud control layer can let Pdenote the availability of provider j. Note that Pcan account for the availability of the network and of the provider so that appliances located in the same data center region are dependent and subject to the same availability e.g. EC2 regions . It is noted that resources across regions can be independent. It is pointed out that like performance described above the availability of a vendor package platform can be considered on its own by the cloud control layer . Or the vendor package platform can be considered by the cloud control layer as a companion with other vendors or from the platform derived from a self sourced collection of virtual appliances.

Within an embodiment two cases can be considered by the cloud control layer . The first case deals with appliances serving the same function. Then the desired redundancy can be obtained by the cloud control layer by limiting the maximum number of failures from a set of indistinct components. Otherwise the second case deals with appliances that serve distinct functions and the composite availability is the product of the availability of each of the components. A nested formulation can be generated of these compositions by the cloud control layer by conditioning on the availability of the providers.

More specifically the application A can be deployed with three appliances e.g. and on cloud and two appliances e.g. and in data center and the application B has two appliances e.g. and on the cloud and one appliance e.g. in the data center . It is noted that each of appliances and is an appliance of type 1 that is active which has an availability of q . Moreover each of appliances and is an appliance of type 2 that is stand by which has an availability of q while appliance is an appliance of type 2 that is active which has an availability of q .

Within the providers e.g. and can be conditioned on by the cloud control layer so that the number of appliances m is known. Then the number of failures is a Binomial Distribution with parameters m and 1 q. The cloud control layer can let F x be the CDF for this Binomial. Within the present embodiment each appliance in an application can be interchangeable so the availability of the application A can be determined by the cloud control layer using 3 1 1 0 1 . Similarly the availability of the application B can be determined by the cloud control layer using 2 2 1 0 1 . Since the applications A and B are distinct the availability of the Composite Application A and B can be determined by the cloud control layer using 3 2 1 2 1 0 0 1 .

It is noted that the automated algorithms of the cloud control layer can leverage cloud s scalability to create a platform that meets user defined reliability objectives. Note that the separation of concerns allows the cloud control layer to remain generic. Scaling algorithms may be reused by the cloud control layer for applications and platforms based on but not limited to specified application requirements published or estimated provider values and broad categorizations along with handling of events sessions or batch.

In an embodiment cloud can be on demand elastic and pay per use. Note that in one embodiment the cloud control layer sources a combination of basic external and internal computing satisfying this cloud definition to meet custom service level agreements SLAs . Therefore for one time provisioning and for real time use the cloud control layer can leverage cloud s dynamics to address reliability concerns.

Specifically illustrates different embodiments wherein the cloud control layer can be application generic regarding but not limited to a storefront portal which can be dependent on order system an order system wherein the constraint can remain internal and analytics wherein the constraint can remain internal . It is pointed out that the same cloud control layer can be implemented for each of the different applications and . In addition the cloud control layer can be platform generic.

It is noted that the present embodiment illustrates that the cloud control layer can be application generic since it operates in a similar manner while handling different cloud applications. For example the storefront portal application the order system application and the analytics application can each involve different performance criteria or requirements from the cloud control layer . For example in one embodiment the storefront portal application can include but is not limited to an access availability of 99.99 a maximum latency of 300 milliseconds ms and an average latency of 150 ms which can all be dependent on an order system. Furthermore the order system application can include but is not limited to an access availability of 99.999 a maximum latency of 300 ms and an average latency of 150 ms herein a constraint is that things remain internal. In addition the analytics application can include but is not limited to a turn around of less than 24 hours hr and a cost within 800 wherein a constraint is that things remain internal. Given the differences of the storefront portal application the order system application and the analytics application it is pointed out that the cloud control layer can operate in a similar manner while handling these different cloud applications.

Within it is noted that within the present embodiment the cloud control layer can be platform generic. Specifically the logic and or functionality of the cloud control layer remains unchanged while it manages as one or more different cloud platforms. For example in one embodiment the cloud control layer can operate in combination with but is not limited to a data center a data center a Windows Azure platform and AWS Amazon Web Services platform wherein each can involve different type of platform.

More specifically within the present embodiment the one or more completion metrics can include but are not limited to a turn around time in 4 hours and a less than 1 error with 95 confidence. In addition the availability metric can include but is not limited to a 99.999 uptime while the performance metric can include but is not limited to user requests responded to in less than 350 ms. Furthermore the one or more constraints can include but is not limited to records remain on premise and costs within 800 per day.

Within the cloud control layer can include one or more mechanisms or functions . Moreover the cloud control layer can receive one or more cloud variables and one or more demand variables . It is pointed out that the one or more mechanisms or functions of the cloud control layer can include a wide variety of mechanisms or functions. For example in the present embodiment the mechanisms of the cloud control layer include but are not limited to sourcing scaling scheduling along with assignment and flow control which can include job partitioning and data replication of cloud and data center service needed in order to meet the desired input requirements . Note that the mechanisms or functions allow the cloud control layer to be dynamic and responsive to changes in demand or conditions e.g. able to respond to a longer than expected processing times or shortened turn around window .

In one embodiment it is pointed out that the mechanisms or functions of the cloud control layer can be based on the received cloud variables and the received demand variables . As such the received cloud variables and the received demand variables can be taken into consideration by the mechanisms or functions of the cloud control layer . The one or more cloud variables can include but are not limited to machine and provider elements or variables such as but not limited to failure capacity throughput time to start cost and capability. Additionally the one or more demand variables can include but are not limited to active sessions current processing time and job sizes.

Within the cloud control layer can output e.g. to the cloud instantiation layer one or more scaling and assignments . The one or more scaling and assignments can include a wide variety of information and or instructions. For example within the present embodiment the one or more scaling and assignments can include but are not limited to what to buy when to buy and what to do with it .

More specifically within the present embodiment the what to buy can include but are not limited to buying five Amazon Web Servers plus two data centers. Additionally the when to buy can include but is not limited to once the threshold is at 80 start two additional Amazon Web Servers. Moreover the what to do with it can include but is not limited to bad balance across five primary nodes and duplicate two. It is understood that the what to buy the when to buy and the what to do with it can be implemented with any number and or values of elements and are not limited in anyway to those shown in the present embodiment.

In one embodiment the user interface can be implemented to include multiple tabs. For example within the present embodiment the user interface can include a Specify Traffic tab a Specify Deployment tab a View Traffic SLA Status tab a View Deployment SLA Status tab and an Update Settings tab but is not limited such. Note that the Specify Traffic tab is shown selected within the user interface . In addition the example contents of the Specify Traffic tab can include but is not limited to a TrafficSLAs sub tab and a Traffic Application sub tab . It is noted that the TrafficSLAs sub tab is shown selected and its example contents can include but is not limited to a New TrafficSLA activation button an Update TrafficSLA activation button and a Delete TrafficSLA activation button .

Within when a user selects the Update TrafficSLA activation button the Choose TrafficSLA to update selection area can be displayed thereby enabling the user to select the application he or she desires to update and or view. For example within the present embodiment of the Choose TrafficSLA to update selection area the user can select to update the service level agreements of All the applications the Web application or a DB application. Once an application is selected within the Choose TrafficSLA to update selection area one or more service level agreements can be displayed which can enable the user to update the one or more displayed service level agreements. For example within the present embodiment when the Web application is selected within the Choose TrafficSLA to update selection area as indicated by the highlighting of the word Web one or more service level agreement fields can be displayed. Specifically the one or more service level agreement fields can include but are not limited to a label a cost an availability a latency a capacity and or a blocking probability associated with the selected application or applications of the Choose TrafficSLA to update selection area .

Note that the user interface may not include all of the elements illustrated by . Additionally the user interface can be implemented to include one or more elements not illustrated by . It is pointed out that the user interface of can be utilized or implemented in any manner similar to that described herein but is not limited to such.

Within the present embodiment the example contents of the Traffic Application sub tab can include but is not limited to a role identifier drop down menu selector a Current Application List display area an Available Application List display area an Add activation button and a Remove activation button . It is pointed out that the role identifier drop down menu selector can be utilized by a user to assign or associate one or more selected roles to a particular application. For instance within the present embodiment the Web application listed within the Current Application List display area currently has a web role as indicated by the role identifier drop down menu selector .

Within it is pointed out that if the Add activation button is selected by a user while the LoadBalance application is highlighted as shown within the Available Application List display area the LoadBalance application will be associated or assigned a web role while its label or name or identifier will be added to the Current Application List display area . Note that the Remove activation button can be utilized by a user to remove and disassociate an application identifier from the Current Application List display area . For example in an embodiment after a user selects or highlights the identifier of an application listed within the Current Application List display area the Remove activation button is displayed active and usable while the Add activation button is displayed inactive and unusable. Thereafter the user can select the Remove activation button resulting in the highlighted application identifier being removed from the Current Application List display area . In addition the removed application is disassociated or unassigned from its web role.

Within the present embodiment the example contents of the Specify Deployment tab can include but is not limited to a Get Optimal Deployment activation button an Update Deployment activation button an Optimize All Deployment activation button a Primary Deployment information fields a Backup Deployment information fields and a Choose Deployment to update selection area . Note that the Get Optimal Deployment activation button can also be referred to as the Get Best Possible Deployment activation button or the Get Appropriate Deployment activation button but is not limited to such. Furthermore the Optimize All Deployment activation button can also be referred to as the Enhance Effectiveness of All Deployment activation button or Get Appropriate Deployment for All activation button but is not limited to such. It is pointed out that when the Update Deployment activation button is selected by a user the user interface displays the Choose Deployment to update selection area along with the Primary Deployment information fields and Backup Deployment information fields that correspond to the highlighted application within the Choose Deployment to update selection area .

Within note that the Choose Deployment to update selection area can be utilized by a user to select a particular application to update and or view its corresponding primary deployment and backup deployment. For example within the present embodiment the Web application label is highlighted or selected within the Choose Deployment to update selection area thereby resulting in the display of its corresponding Primary Deployment information fields and Backup Deployment information fields . It is noted that the grayed out provider fields shown within the Primary Deployment information fields and the Backup Deployment information fields have been filtered out by the control layer .

It is pointed out that if the Optimize All Deployment activation button is selected by a user the user interface applies the optimum e.g. minimum cost or best possible or appropriate deployment that satisfies the service level agreements. Additionally if the Get Optimal Deployment activation button is selected by a user the user interface determines and highlights the application listed within the Choose Deployment to update selection area that currently has the optimal e.g. minimum cost or best possible or appropriate deployment.

Within the present embodiment the example contents of the View Traffic SLA Status tab can include but is not limited to an application identifier drop down menu selector a Cost graph a Capacity graph a Latency graph and an Availability graph . It is noted that the application identifier drop down menu selector can be utilized by a user to select which composite application service level agreements to view. For example within the present embodiment the Web application is currently selected within the application identifier drop down menu selector . As such the Cost graph Capacity graph Latency graph and Availability graph display the composite service level agreements for the Web application.

Specifically within it is pointed out that the black bar shown within each of the Cost graph Capacity graph Latency graph and Availability graph represents the user defined application service level agreement value while the gray bar within each graph represents the actual or measured service level agreements based on deployed cloud components. More specifically the X axis of the Cost graph represents the United States Dollars USD per hour hr service level agreement while the X axis of the Capacity graph represents the capacity for user sessions service level agreement. Furthermore the X axis of the Latency graph represents the latency in milliseconds ms service level agreement while the X axis of the Availability graph represents the percent of time the application is available e.g. 99.999 of the time service level agreement.

Within the present embodiment the example contents of the View Deployment SLA Status tab can include but is not limited to an application identifier drop down menu selector a service level agreement attribute drop down menu selector a first role graph and a second role graph . Note that the application identifier drop down menu selector can be utilized by a user to select which application service level agreements to view. In addition the service level agreement attribute drop down menu selector can be utilized by the user to select which service level agreement attribute to view of the selected application.

Within the present embodiment of it is pointed out that the All application is currently selected with the application identifier drop down menu selector . Furthermore the service level agreement attribute drop down menu selector is currently selected to the Cost attribute. Given the above user selections within the present embodiment the user interface displays the DB role graph and the Web role graph which illustrate that the cost of the All application is split between the DB role and the Web role.

Specifically within the present embodiment the contents of the Update Settings tab includes but is not limited to a Providers sub tab an Application sub tab and a Reset Simulation sub tab . It is noted that the Providers sub tab is shown selected thereby enabling a user to update and view one or more settings associated with one or more cloud providers. The example contents of the Providers sub tab can include but is not limited to a Clear Provider activation button an Update Provider activation button a Choose Provider to update selection area and Cloud Provider information fields .

Within it is pointed out that when the Update Provider activation button is selected by a user the user interface can display the Choose Provider to update selection area along with one or more Cloud Provider information fields that correspond to the highlighted or selected provider within the Choose Provider to update selection area . In one embodiment the Cloud Provider information fields can include but are not limited to a provider label field a provider cost field a provider availability field a provider latency field and a provider capacity field. It is noted that the metrics of a provider shown within the Cloud Provider information fields can be obtained either via estimated values from actual measurements of the provider or from published or known values but is not limited to such.

Within the present embodiment the example contents of the Application sub tab can include but is not limited to a New Application activation button an Update Application activation button and a Delete Application activation button . Note that when a user selects the Update Application activation button a Choose Application to update selection area can be displayed thereby enabling the user to select the application settings he or she desires to update and or view. For example within the present embodiment of the Choose Application to update selection area the user can to update the settings of the Web application the DB application a Batch application or a LoadBalance application. Once an application is selected within the Choose Application to update selection area one or more application provider capacity fields can be displayed thereby enabling the user to view and or update one or more of them. R is noted that the capacity of a provider may be updated utilizing either estimated values from actual measurements of the provider or from published or known values but is not limited to such.

Specifically within the present embodiment of when the Web application is selected within the Choose Application to update selection area as indicated by the highlighting of the word Web one or more provider capacity fields corresponding to the Web application can be displayed by the user interface . For example in one embodiment the Web application has a capacity of 500 sessions for the amazon ec2 east provider a capacity of 500 sessions for the amazon ec2 west provider a capacity of 200 sessions for the data center1 provider and a capacity of 200 sessions for the data center2 provider. It is pointed out that the grayed out provider fields shown within the provider capacity fields have been filtered out by the control layer .

Note that the user interface may not include all of the elements illustrated by . Moreover the user interface can be implemented to include one or more elements not illustrated by . It is pointed out that the user interface of can be utilized or implemented in any manner similar to that described herein but is not limited to such.

Computer system can include an address data bus for communicating information one or more central processors coupled with bus for processing information and instructions. Central processor unit s may be a microprocessor or any other type of processor. The computer can also include data storage features such as computer usable volatile memory e.g. random access memory RAM static RAM dynamic RAM etc. coupled with bus for storing information and instructions for central processor s computer usable non volatile memory e.g. read only memory ROM programmable ROM flash memory erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM etc. coupled with bus for storing static information and instructions for processors .

System of can also include one or more signal generating and receiving devices coupled with bus for enabling system to interface with other electronic devices. The communication interface s of the present embodiment may include wired and or wireless communication technologies. For example in one embodiment the communication interface is a serial communication port but could also alternatively be any of a number of well known communication standards and protocols e.g. a Universal Serial Bus USB an Ethernet adapter a FireWire IEEE 1394 interface a parallel port a small computer system interface SCSI bus interface an infrared IR communication port a Bluetooth wireless communication adapter a broadband connection and the like. In an embodiment a cable or digital subscriber line DSL connection may be employed. In such a case the communication interface s may include a cable modem or a DSL modem.

Optionally computer system can include an alphanumeric input device including alphanumeric and function keys coupled to the bus for communicating information and command selections to the central processor s . The computer can also include an optional cursor control or cursor directing device coupled to the bus for communicating user input information and command selections to the processor s . The cursor directing device can be implemented using a number of well known devices such as but not limited to a mouse a track ball a track pad an optical tracking device a touch screen etc. Alternatively it is appreciated that a cursor can be directed and or activated via input from the alphanumeric input device using special keys and key sequence commands. The present embodiment is also well suited to directing a cursor by other means such as for example voice commands.

Within the system can also include an optional computer sable mass data storage device such as a magnetic or optical disk and disk drive e.g. hard drive or floppy diskette coupled with bus for storing information and instructions. The system can include an optional display device coupled to bus for displaying video and or graphics. Note that the optional display device may be implemented with different technologies. For example the optional display device may be implemented with but is not limited to a cathode ray tube CRT flat panel liquid crystal display LCD field emission display FED plasma display light emitting diode LED display or any other display device suitable for displaying video and or graphic images and alphanumeric characters recognizable to a user.

Note that the volatile memory may store a cloud management system or module in accordance with various embodiments of the disclosure. The cloud management system or module may include instructions to cause the system to operate or function in any manner similar to that described herein but not limited to such. It is pointed out that in various embodiments the cloud management system or module or one or more of its components may be stored by the volatile memory or the non volatile memory or the mass data storage device or any combination thereof. In various embodiments the cloud management system or module can be an implementation of the cloud management system or module of or the cloud management system or module of but is not limited to such.

Within it is noted that the components associated with system described above may be resident to and associated with one physical computing device. However one or more of the components associated with system may be physically distributed to other locations and be communicatively coupled together e.g. via one or more networks .

Note that the system may not include all of the elements illustrated by . Furthermore the system can be implemented to include one or more elements not illustrated by . It is pointed out that the system can be utilized or implemented in any manner similar to that described herein but is not limited to such.

The foregoing descriptions of various specific embodiments in accordance with the disclosure have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the disclosure to the precise forms disclosed and many modifications and variations are possible in light of the above teaching.

