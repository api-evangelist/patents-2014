---

title: Systems and methods for authorizing attempts to access shared libraries
abstract: The disclosed computer-implemented method for authorizing attempts to access shared libraries may include (1) detecting an attempt by a process to access a shared library, (2) identifying a call stack of the process, (3) inspecting the call stack to determine whether a method that initiated the attempt is authorized to access the shared library, and (4) causing the attempt to be allowed if the method is authorized to access the shared library or blocked if the method is not authorized to access the shared library. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509697&OS=09509697&RS=09509697
owner: Symantec Corporation
number: 09509697
owner_city: Mountain View
owner_country: US
publication_date: 20140915
---
On many computing platforms e.g. the ANDROID platform shared libraries may be used to provide various resources and functionalities to multiple programs. A shared library may use various application programming interface API methods to expose the resources and functionalities that it provides to programs and a program that loads a shared library may access a resource or functionality provided by the shared library by calling the API method that exposes the resource or functionality. In some cases a provider of a shared library may wish to limit access to certain API methods to only authorized callers.

Using traditional methods a provider of a shared library may be able to limit access to an API method to a set of authorized programs. Unfortunately limiting access to an API method to a set of authorized programs may be problematic in a variety of situations. For example some computing platforms may enable an unauthorized program to cause an authorized program to access an API method of a shared library on behalf of the unauthorized program. As a result a call to an API method that is initiated by the unauthorized program may appear to be from the authorized program and allowed by the shared library. In other situations an authorized program may be injected with malicious code. As a result a call to an API method that is initiated by the malicious code may appear to be from the authorized program and allowed by the shared library. Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for authorizing attempts to access shared libraries.

As will be described in greater detail below the instant disclosure describes various systems and methods for authorizing attempts to access shared libraries. In one example a computer implemented method for authorizing attempts to access shared libraries may include 1 detecting an attempt by a process to access a shared library 2 identifying a call stack of the process 3 inspecting the call stack to determine whether a method that initiated the attempt is authorized to access the shared library and 4 causing the attempt to be allowed if the method is authorized to access the shared library or blocked if the method is not authorized to access the shared library.

In some examples the step of inspecting the call stack may include 1 identifying the method that initiated the attempt by identifying a stack frame of the method within the call stack 2 identifying a policy e.g. a blacklist that indicates that the method is not authorized to access the shared library and 3 determining that the method is not authorized to access the shared library based on the policy.

In some examples the step of inspecting the call stack of the process may include 1 identifying the method that initiated the attempt by identifying a stack frame of the method within the call stack 2 identifying a policy e.g. a whitelist that indicates that the method is authorized to access the shared library and 3 determining that the method is authorized to access the shared library based on the policy.

In some examples the step of inspecting the call stack may include 1 identifying the method that initiated the attempt by identifying a stack frame of the method within the call stack 2 determining that the method is used to perform inter process communications and 3 determining that the method is not authorized to access the shared library based on determining that the method is used to perform inter process communications.

In some examples the step of inspecting the call stack may include 1 identifying the method that initiated the attempt by identifying a stack frame of the method within the call stack 2 determining that the method is used to perform task delegations and 3 determining that the method is not authorized to access the shared library based on determining that the method is used to perform task delegations.

In some examples the step of inspecting the call stack may include 1 identifying the method that initiated the attempt by identifying a stack frame of the method within the call stack 2 determining that the method initiated the attempt via reflection and 3 determining that the method is not authorized to access the shared library based on determining that the method initiated the attempt via reflection.

In some examples the step of inspecting the call stack may include 1 inspecting the call stack of the process to identify a call order of two or more methods that initiated the attempt and 2 determining that the method is not authorized to access the shared library based on the call order of the two or more methods that initiated the attempt.

In some examples the step of inspecting the call stack may include 1 inspecting the call stack of the process to identify a call order of two or more methods that initiated the attempt 2 determining that the call order of the methods is different than a previous call order of the methods and 3 determining that the method is not authorized to access the shared library based on determining that the call order of the methods is different than the previous call order of the methods.

In some examples the step of inspecting the call stack may include 1 identifying the method that initiated the attempt by identifying a stack frame of the method within the call stack 2 determining that the method has been designated as untrustworthy and 3 determining that the method is not authorized to access the shared library based on determining that the method has been designated as untrustworthy.

In some examples the step of inspecting the call stack may include 1 identifying the method that initiated the attempt by identifying a stack frame of the method within the call stack 2 determining that the method has been designated as trustworthy and 3 determining that the method is authorized to access the shared library based on determining that the method has been designated as trustworthy.

In one embodiment the computer implemented method may further include 1 assigning a token to the process if the method is authorized to access the shared library 2 receiving the token as part of a subsequent attempt by the process to access the shared library and 3 causing in response to receiving the token the subsequent attempt to be allowed without inspecting a call stack associated with the subsequent attempt.

In one embodiment a system for implementing the above described method may include 1 a detection module stored in memory that detects an attempt by a process to access a shared library 2 an identification module stored in memory that identifies a call stack of the process 3 an inspection module stored in memory that inspects the call stack to determine whether a method that initiated the attempt is authorized to access the shared library 4 an access module stored in memory that causes the attempt to be allowed if the method is authorized to access the shared library or blocked if the method is not authorized to access the shared library and 5 at least one physical processor configured to execute the detection module the identification module the inspection module and the access module.

In some examples the above described method may be encoded as computer readable instructions on a non transitory computer readable medium. For example a computer readable medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 detect an attempt by a process to access a shared library 2 identify a call stack of the process 3 inspect the call stack to determine whether a method that initiated the attempt is authorized to access the shared library 4 cause the attempt to be allowed if the method is authorized to access the shared library or blocked if the method is not authorized to access the shared library.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for authorizing attempts to access shared libraries. As will be described in greater detail below by inspecting the call stacks of the processes that are attempting to access shared libraries the disclosed systems and methods may determine whether to allow the attempts to access the shared libraries. In one example the disclosed systems and methods may detect an attempt by a process to access a shared library and may determine whether the attempt to access the shared library should be allowed or blocked by 1 inspecting a call stack of the process to identify the methods that initiated the call to the shared library 2 determining whether the methods are or are not authorized to access the shared library and 3 determining that the attempt should be allowed if each method is authorized or blocked if any method is not authorized. By determining whether an attempt by a process to access the shared library should be allowed or blocked based on whether the methods of the process that initiated the attempt are authorized to access the shared library the systems and methods disclosed herein may prevent certain methods of the process from accessing the shared library and or may prevent the process from accessing the shared library in certain contexts e.g. an inter process communication task delegation or reflection context . Embodiments of the instant disclosure may also provide various other advantages and features as discussed in greater detail below.

The following will provide with reference to detailed descriptions of exemplary systems for authorizing attempts to access shared libraries. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or server computing system in and or portions of exemplary network architecture in . In one example one or more of modules in may represent all or a portion of authorization system in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include one or more databases such as database . In one example database may be configured to store one or more policies that indicate whether methods are authorized to access shared libraries. Database may represent portions of a single database or computing device or a plurality of databases or computing devices. For example database may represent a portion of computing device or server in computing system in and or portions of exemplary network architecture in . Alternatively database in may represent one or more physically separate devices capable of being accessed by a computing device such as computing device or server in computing system in and or portions of exemplary network architecture in .

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device in communication with a server via a network . In one example computing device may be programmed with one or more of modules and or may store all or a portion of the data in database . Additionally or alternatively server may be programmed with one or more of modules and or may store all or a portion of the data in database .

In one embodiment one or more of modules from may when executed by at least one processor of computing device and or server enable computing device and or server to authorize attempts to access shared libraries. For example and as will be described in greater detail below detection module may detect an attempt by a process to access a shared library by detecting that process has called API Method . Identification module may identify a call stack of process . Inspection module may inspect call stack to determine whether a method that initiated the attempt e.g. methods in is authorized to access shared library . Access module may cause the attempt to be allowed if the method is authorized to access shared library or blocked if the method is not authorized to access shared library .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets smartphones desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems wearable devices e.g. smart watches smart glasses etc. gaming consoles combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Server generally represents any type or form of computing device that is capable of reading computer executable instructions. Examples of server include without limitation application servers and database servers configured to provide various database services and or run certain software applications.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between computing device and server .

As illustrated in at step one or more of the systems described herein may detect an attempt by a process to access a shared library. For example detection module may as part of computing device in detect an attempt by process to access shared library .

As used herein the term process refers generally to an instance of a computer program that is being executed on a computing device to cause the computing device to perform useful tasks. In some examples a process may use a shared library to access resources and functionalities maintained by the shared library. To do so the process may load the shared library at runtime and access the resources and functionalities of the shared library exposed through an API method of the shared library. Using as an example process may load shared library at runtime and access a resource or functionality of shared library exposed through API method .

As used herein the term shared library refers generally to a collection of precompiled functionalities and or resources stored in a format that is accessible by multiple processes. By loading a shared library a process may use the resources and or functionalities of the shared library without having to implement the resources and or functionalities itself. Examples of resources and or functionalities that may be provided by a shared library include without limitation file system functionalities such as the ability to read a file system network functionalities such as the ability to scan traffic on a network data access functionalities such as the ability to block copy paste events and or administrative functions such as the ability to block applications from being installed on a computing device .

Returning to detection module may detect an attempt by a process to access a shared library in a variety of contexts. In one example detection module may detect an attempt by a process to access a shared library as part of the shared library. Using as an example detection module may as part of shared library detect the attempt to access shared library made by process at step . In these examples detection module may detect the attempt to access the shared library when the process attempts to access the shared library.

Additionally or alternatively detection module may detect an attempt by a process to access a shared library as part of a local authorization system e.g. authorization system in that executes on the same computing device as the process. In this example detection module may as part of the authorization system perform authorization functions for one or more shared libraries and may detect an attempt by a process to access a shared library by receiving a request from the shared library to authorize the attempt. For example as illustrated in step of process may attempt to access shared library . In response as shown at step shared library may send a request to authorize the attempt to authorization system . In this example detection module may as part of authorization system detect the attempt by receiving the request from shared library .

In some examples detection module may detect an attempt by a process to access a shared library as part of a remote authorization system e.g. authorization system in that executes on a computing device that is remote from the computing device executing the process. Using as an example detection module may detect an attempt by process to access shared library as part of an authorization system on server .

In some examples detection module may also detect the API method of a shared library that a process is attempting to access such as API method in . As will be discussed in greater detail below by detecting the API methods of a shared library that processes are attempting to access the systems and methods disclosed herein may determine when a particular process is or is not authorized to access a particular API method. In some examples this may allow a provider of a shared library to protect some resources or functionalities of a shared library more than others.

Returning now to at step one or more of the systems described herein may identify a call stack of the process. For example identification module may as part of computing device in identify call stack of process .

As used herein the term call stack refers generally to a data structure that stores information about the active methods of a process. In some examples a call stack may store a record of methods called at the run time of a process and the order in which the methods were called. As such when a call to an API method of a shared library is made and after control has passed to the API method of the shared library the call stack of a process may include a record of the methods that initiated the call to the API method and the order in which the methods were called. As will be explained in greater detail below the systems and methods described herein may use the call stack of a process to identify individual methods within the process that initiated an attempt to access a shared library. The term method as used herein refers generally to a sequence of program instructions that perform a specific task. In some examples the term method may refer to an active subroutine of a process initiating an attempt to access a shared library.

Returning to identification module may identify a call stack in a variety of contexts. In some examples identification module may identify the call stack as part of a shared library. Identification module may as part of a shared library identify a call stack using any suitable stack introspection functionality provided by the platform on which the shared library is running. For example identification module may as part of a shared library running on the ANDROID platform identify a call stack by calling the JAVA method Thread.getCurrent .getStackTrace . 

Additionally or alternatively identification module may identify a call stack as part of an authorization system e.g. authorization system in that performs authorization functions for one or more shared libraries by receiving a representation of the call stack from a shared library as part of an authorization request. Using as an example shared library may at step send a representation of a call stack to authorization system as part of a request to authorize the attempt made by process at step . In this example identification module may as part of authorization system identify the call stack by receiving the request from shared library .

Returning to at step one or more of the systems described herein may inspect the call stack to determine whether a method that initiated the attempt is authorized to access the shared library. For example inspection module may as part of computing device in inspect call stack to determine whether or not one or more of methods in is authorized to access shared library .

Inspection module may inspect the call stack to determine whether the method that initiated the attempt is authorized to access the shared library in a variety of ways. In one example inspection module may 1 use the call stack to identify one or more of the methods that initiated the attempt and then 2 determine whether one or more of the identified methods are authorized to access the shared library.

Inspection module may use a call stack to identify one or more of the methods that initiated an attempt to access a shared library in a variety of ways. In one example inspection module may use the stack frames within a call stack to identify the one or more methods. A call stack may include several stack frames. Using as an example call stack may include stack frames . Each stack frame within a call stack may contain information about the currently executing methods of a process. As such when a call to an API method of a shared library is made by a method of a process and after control has passed to the API method of the shared library the call stack of the process may include a stack frame of the API method and one or more additional stack frames of the methods that initiated the call to the API method.

Using as an example when a call to API method is made by a method of process and after control has passed to API method call stack may include stack frames . In this example stack frame may contain information about API method stack frame may contain information about method the method that called API method stack frame may contain information about method the method that called method stack frame may contain information about method the method that called method and stack frame may contain information about method the method that called method .

In some examples inspection module may use a call stack to identify one or more methods that initiated a call to a shared library by iterating through the stack frames of the call stack. Using as an example inspection module may use call stack to identify methods that initiated a call to API method of shared library by iterating through stack frames . On some platforms e.g. the ANDROID platform the inspection module may be able to identify the method name class name and or package name associated with the method represented by a stack frame.

Once inspection module has identified one or more of the methods that initiated an attempt to access a shared library inspection module may determine whether the methods are authorized to access the shared library. In one example inspection module may determine whether a method is authorized to access a shared library based on a policy associated with the shared library e.g. a blacklist of unauthorized methods or a whitelist of authorized methods . In some examples inspection module may generate such policies by enabling a provider of a shared library to specify certain method names class names and or package names associated with the methods that the provider would like to be authorized or unauthorized to access the shared library. In some examples inspection module may enable a provider of a shared library to specify certain method names class names and or package names of inter process communication task delegation and or reflection methods that the provider would like to be unauthorized to access the shared library. In this way the systems and methods described herein may allow the provider to prevent the shared library from being accessed via an inter process communication task delegation and or reflection mechanism.

As used herein the term task delegation refers generally to an inter process communication mechanism whereby a first process may compel a second process to perform a task on behalf of the first process. An example of a method that may be used to perform task delegation on the ANDROID platform may include the method android.os.Binder.execTransact The term reflection as used herein refers generally to a mechanism that enables a method to identify and call discoverable methods of the process within which the method executes. In some examples reflection may be used by malicious code to identify and call shared library methods. For example when malicious code has been loaded into an executing process the malicious code may function as part of the executing process and may use reflection to identify and call discoverable methods of the executing process. An example of a method that may be used to perform reflection on the ANDROID platform may include the method java.lane.reflection.Method.invoke In general if an attempt to access a shared library was performed via an inter process communication task delegation or reflection mechanism inspection module may use the call stack of the shared library to identify the inter process communication task delegation or reflection method that initiated the attempt e.g. as described above .

In some examples inspection module may generate policies by enabling a provider of a shared library to select a type of method that the provider would like to be authorized or unauthorized to access the shared library. For example inspection module may enable a provider to select to make inter process communication task delegation and or reflection methods authorized or unauthorized to access a shared library. In one example inspection module may generate a policy based on a provider s selection by adding to the policy some or all of the method names class names and or package names associated with the type of method selected by the provider. For example if a provider of a shared library that runs on the ANDROID platform chooses to make task delegation methods unauthorized to access a shared library inspection module may add the method android.os.Binder.execTransact to a blacklist associated with the shared library. Similarly if a provider of a shared library that runs on the ANDROID platform chooses to make reflection methods unauthorized to access the shared library inspection module may add the method java.lane.reflection.Method.invoke to a blacklist associated with the shared library.

Inspection module may use a policy associated with a shared library to determine whether a method is authorized to access the shared library by determining whether the method name class name package name or method type of the method matches the method name class name package name or method type contained within the policy. For example inspection module may determine that a method is authorized to access a shared library if the method name class name package name or method type of the method matches a method name class name package name or method type contained in a whitelist associated with the shared library. Similarly inspection module may determine that a method is unauthorized to access a shared library if the method name class name package name or method type of the method matches a method name class name package name or method type contained in a blacklist associated with the shared library.

In at least one example inspection module may use a policy associated with a particular API method of a shared library to determine whether a method is authorized to access the API method of the shared library. In this way API methods of a shared library that are associated with protected resources and or functionalities may have policies with more stringent prerequisites for authorization than API methods associated with resources and or functionalities that are not protected.

In addition or as an alternative to using policies inspection module may determine whether the methods that initiated an attempt to access a shared library are authorized to access the shared library based on a call order of the methods. In one example inspection module may identify a call order of the methods that initiated an attempt to access a shared library by determining the order of the method s associated stack frames within a call stack associated with the attempt. Inspection module may then compare the identified call order of the methods with a previous call order of the same methods and determine that the methods are not authorized to access the shared library if the identified call order differs from the previous call order of the same methods. In some examples a difference in call orders may indicate that an attempt to access the shared library was initiated by malicious code.

Using as an example inspection module may determine that call order of methods does not indicate that methods are not authorized to access shared library by comparing call order to previous call order and by determining that the order of methods in call order is the same as the order of methods in previous call order . Using as another example inspection module may determine that call order of methods indicates that methods are not authorized to access shared library by comparing call order to previous call order and by determining that the order of methods in call order is different than the order of methods in previous call order e.g. previous call order does not include method . In this example method may represent a malicious method that initiated the attempt associated with call stack .

In addition to or as an alternative to using policies or call orders inspection module may determine whether a method that initiated an attempt to access a shared library is authorized to access the shared library based on whether the method has been designated as untrustworthy or trustworthy. In these examples inspection module may determine that a method that has been designated as untrustworthy is unauthorized and or that a method that has been designated as trustworthy is authorized. The method may have been designated as untrustworthy or trustworthy in a variety of ways. In some examples the method may have been designated as untrustworthy or trustworthy by a third party designator and or a remote system. In at least one example a method may have been designated as untrustworthy or trustworthy by a third party designator and or a remote system using reputation based security technology such as e.g. SYMANTEC s INSIGHT technology . In these examples inspection module may determine that a method is untrustworthy or trustworthy by querying the third party designator and or the remote system.

Returning now to at steps or one or more of the systems described herein may cause the attempt to be allowed if the method is authorized to access the shared library or blocked if the method is not authorized to access the shared library. For example access module may as part of computing device in cause the attempt associated with call stack in to be allowed if inspection module has determined that methods are authorized to access shared library . Alternatively access module may as part of computing device in cause the attempt associated with call stack in to be blocked if inspection module has determined that any of methods are not authorized to access shared library .

Access module may cause attempts to access shared libraries to be allowed or blocked in a variety of contexts. In one example access module may cause an attempt to be allowed or blocked as part of a shared library. For example access module may cause an attempt to be allowed or blocked by directly allowing the attempt to access the shared library or by directly blocking the attempt to access the shared library. In at least one example access module may allow or block an attempt based on a response received from an authorization system such as authorization system in . Using as an example at step access module may as part of shared library allow or block the attempt to access shared library made by process at step based on the authorization response received from authorization system at step .

Additionally or alternatively access module may cause an attempt to be allowed or blocked as part of a local or remote authorization system e.g. authorization system in that has received an authorization request from a shared library. In these examples access module may as part of the authorization system cause an attempt to be allowed or blocked by sending a response to the shared library indicating that 1 the attempt is authorize and should be allowed or 2 the attempt is not authorized and should be blocked. In these examples the shared library may allow or block the attempt based on the response. Using as an example authorization system may at step send an authorization response to shared library and shared library may at step allow or block the attempt by process made at step based on the authorization response.

In some examples if an attempt by a process to access a shared library is determined to be authorized access module may enable one or more subsequent attempts by the process to access the shared library to be allowed in a way that does not cause the call stacks associated with the subsequent attempts to be inspected. In one example access module may enable one or more subsequent attempts by a process to access a shared library to be allowed by assigning a token to the process. The process may present the token as part of a subsequent attempt to access the shared library and access may cause in response to receiving the token as part of the subsequent attempt the subsequent attempt to be allowed without inspecting the call stack associated with the subsequent attempt.

As described above by inspecting the call stacks of the processes that are attempting to access shared libraries the disclosed systems and methods may determine whether to allow the attempts to access the shared libraries. In one example the disclosed systems and methods may detect an attempt by a process to access a shared library and may determine whether the attempt to access the shared library should be allowed or blocked by 1 inspecting a call stack of the process to identify the methods that initiated the call to the shared library 2 determining whether the methods are or are not authorized to access the shared library and 3 determining that the attempt should be allowed if each method is authorized or blocked if any method is not authorized. By determining whether an attempt by a process to access the shared library should be allowed or blocked based on whether the methods of the process that initiated the attempt are authorized to access the shared library the systems and methods disclosed herein may prevent certain methods of the process from accessing the shared library and or may prevent the process from accessing the shared library in certain contexts e.g. an inter process communication task delegation or reflection context .

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of physical processing unit e.g. a hardware implemented central processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example database from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The term computer readable medium as used herein generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives tape drives and floppy disks optical storage media e.g. Compact Disks CDs Digital Video Disks DVDs and BLU RAY disks electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for authorizing attempts to access shared libraries.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example the modules and or data described herein may reside and or execute within a virtual machine. As used herein the term virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the term virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the term information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the term information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the term endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive a call stack of a process that is attempting to access a shared library transform the call stack of the process into a determination that the attempt by the process to access the shared library is authorized or is not authorized and use the transformation to allow or block the attempt. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms connected to and coupled to and their derivatives as used in the specification and claims are to be construed as permitting both direct and indirect i.e. via other elements or components connection. In addition the terms a or an as used in the specification and claims are to be construed as meaning at least one of. Finally for ease of use the terms including and having and their derivatives as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

