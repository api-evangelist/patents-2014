---

title: Systems and methods for generating catalogs for snapshots
abstract: A computer-implemented method for generating catalogs for snapshots may include (1) identifying an initial snapshot and a subsequent snapshot for a protected volume, (2) providing identifiers of the initial snapshot and the subsequent snapshot to a storage vendor application programming interface (API), (3) receiving, from the storage vendor API, an indication of at least one difference between the initial snapshot and the subsequent snapshot, and (4) synthetically generating a catalog for the subsequent snapshot based on a preexisting catalog for the initial snapshot such that the synthetically generated catalog reflects the difference between the initial snapshot and the subsequent snapshot indicated by the storage vendor API. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612910&OS=09612910&RS=09612910
owner: Veritas Technologies
number: 09612910
owner_city: Mountain View
owner_country: US
publication_date: 20140204
---
Persons and organizations often perform backup operations to protect important data. In some cases these backup operations may create snapshots which may record and preserve the state of data at a single point in time. The backup operations may also create a catalog that tracks metadata about files and data within the snapshot. The catalog may enable the tracking searching browsing locating editing and or restoration e.g. granular or selective restoration of the files and data within the snapshot. For example in some conventional systems access to the catalog may be needed to restore files and data within a snapshot.

In these conventional systems generating a catalog may consume large amounts of time and storage. For example generating a catalog may involve mounting a snapshot on a client traversing an entire file hierarchy within the snapshot and while traversing the file hierarchy generating the catalog and then dismounting the snapshot from the client. In this example the time consumed generating the catalog may be directly proportional to the number of files and or directories in the snapshot. A typical snapshot may include a large number of files e.g. millions of files and generating a catalog for such a snapshot may involve a significant amount of time and resources. What is needed therefore is a more efficient and effective way to generate catalogs for snapshots.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for generating catalogs for snapshots by 1 identifying an initial snapshot and a subsequent snapshot for a protected volume 2 providing identifiers of the initial snapshot and the subsequent snapshot to a storage vendor application programming interface API 3 receiving from the storage vendor API an indication of at least one difference between the initial snapshot and the subsequent snapshot and 4 synthetically generating a catalog for the subsequent snapshot based on a preexisting catalog for the initial snapshot such that the synthetically generated catalog reflects the difference between the initial snapshot and the subsequent snapshot indicated by the storage vendor API.

In one example synthetically generating the catalog for the subsequent snapshot may be performed without mounting the subsequent snapshot on a client. Receiving from the storage vendor API the indication of the difference between the initial snapshot and the subsequent snapshot may be performed in response to a request for the indication of the difference. The request for the indication of the difference may include a request for all files that were at least one of modified deleted and created between the initial snapshot and the subsequent snapshot.

In some embodiments the indication of the difference between the initial snapshot and the subsequent snapshot indicates a change in file metadata. In some examples the indication of the difference indicates a file path of a file that was created modified and or deleted. The identifier of the initial snapshot may include an identifier of a most recent snapshot and the identifier of the subsequent snapshot may include a command to create a new snapshot.

In some embodiments synthetically generating the catalog for the subsequent snapshot may include conserving storage space by omitting the creation of data in the catalog for the subsequent snapshot that is unchanged from the preexisting catalog for the initial snapshot. In some examples synthetically generating the catalog for the subsequent snapshot may include associating the indication of the difference between the initial snapshot and the subsequent snapshot with the preexisting catalog for the initial snapshot.

In some embodiments synthetically generating the catalog for the subsequent snapshot may include modifying the preexisting catalog for the initial snapshot such that the synthetically generated catalog reflects the difference between the initial snapshot and the subsequent snapshot indicated by the storage vendor API. The method may also include directing requests for data in the synthetically generated catalog that is unchanged from the preexisting catalog to the preexisting catalog.

In one embodiment a system for implementing the above described method may include 1 an identification module stored in memory that identifies an initial snapshot and a subsequent snapshot for a protected volume 2 a provisioning module stored in memory that provides identifiers of the initial snapshot and the subsequent snapshot to a storage vendor API 3 a reception module stored in memory that receives from the storage vendor API an indication of at least one difference between the initial snapshot and the subsequent snapshot 4 a generation module stored in memory that synthetically generates a catalog for the subsequent snapshot based on a preexisting catalog for the initial snapshot such that the synthetically generated catalog reflects the difference between the initial snapshot and the subsequent snapshot indicated by the storage vendor API and 5 at least one physical processor that executes the identification module the provisioning module the reception module and the generation module.

In some examples the above described method may be encoded as computer readable instructions on a non transitory computer readable medium. For example a computer readable medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify an initial snapshot and a subsequent snapshot for a protected volume 2 provide identifiers of the initial snapshot and the subsequent snapshot to a storage vendor API 3 receive from the storage vendor API an indication of at least one difference between the initial snapshot and the subsequent snapshot and 4 synthetically generate a catalog for the subsequent snapshot based on a preexisting catalog for the initial snapshot such that the synthetically generated catalog reflects the difference between the initial snapshot and the subsequent snapshot indicated by the storage vendor API.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for generating catalogs for snapshots. As will be explained in greater detail below the disclosed systems and methods may dramatically increase the speed of generating a catalog for a snapshot in comparison to other conventional methods. For example the disclosed systems and methods may enable the generation of a catalog for a snapshot without mounting the snapshot on a client. Moreover these systems and methods may also conserve storage space by omitting the storage of catalog information that is redundant to information within a previous catalog for a previous snapshot.

The following will provide with reference to detailed descriptions of exemplary systems for generating catalogs for snapshots. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . Moreover detailed descriptions of exemplary snapshots catalogs and differences between snapshots will be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In addition and as will be described in greater detail below exemplary system may include a reception module that receives from the storage vendor API an indication of at least one difference between the initial snapshot and the subsequent snapshot. Exemplary system may also include a generation module that synthetically generates a catalog for the subsequent snapshot based on a preexisting catalog for the initial snapshot such that the synthetically generated catalog reflects the difference between the initial snapshot and the subsequent snapshot indicated by the storage vendor API. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include one or more databases such as database . In one example database may be configured to store snapshots catalogs and or differences . As used herein the phrase snapshot may generally refer a data structure that records and preserves the state of data e.g. on a volume at a particular point in time. Similarly the phrase catalog may generally refer to a data structure that enables tracking of contents of media created during a backup or archive operation such as a snapshot operation. In some embodiments restoration of backup data may involve a catalog. As a third item within database differences may generally indicate differences between initial and subsequent snapshots on the same volume of data as discussed further below.

Database may represent portions of a single database or computing device or a plurality of databases or computing devices. For example database may represent a portion of server in computing system in and or portions of exemplary network architecture in . Alternatively database in may represent one or more physically separate devices capable of being accessed by a computing device such as server in computing system in and or portions of exemplary network architecture in .

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device in communication with a server via a network . In one example computing device may be programmed with one or more of modules and or may store all or a portion of the data in database . Additionally or alternatively server may be programmed with one or more of modules and or may store all or a portion of the data in database .

In general computing device may provide access to a protected volume . Computing device may serve as a client through which a user or program may access and or modify protected volume . In contrast server may provide a storage vendor API that may receive requests for data from computing device and generate results through generation module . Server may also manage and maintain data in a storage which may optionally include database . Generation module may generate results of the API query and or further results based on the initial results from the API query. In some embodiments most or all of modules may reside within a single one of computing device server and or another device.

In one embodiment one or more of modules from may when executed by at least one processor of computing device and or server enable computing device and or server to generate catalogs for snapshots. For example and as will be described in greater detail below one or more of modules may cause computing device and or server to 1 identify an initial snapshot and a subsequent snapshot for protected volume 2 provide identifiers of initial snapshot and subsequent snapshot to storage vendor API 3 receive from storage vendor API an indication of at least one difference between initial snapshot and subsequent snapshot and 4 synthetically generate a synthetic catalog for subsequent snapshot based on a preexisting catalog for initial snapshot such that synthetic catalog reflects the difference between initial snapshot and subsequent snapshot indicated by storage vendor API .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Server generally represents any type or form of computing device that is capable of managing storage generating catalogs for snapshots and or providing storage vendor API . Examples of server include without limitation application servers and database servers configured to provide various database services and or run certain software applications.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between computing device and server .

As illustrated in at step one or more of the systems described herein may identify an initial snapshot and a subsequent snapshot for a protected volume. For example identification module may as part of computing device in identify initial snapshot and subsequent snapshot for protected volume .

Identification module may identify the initial snapshot and the subsequent snapshot in a variety of ways. Identification module may identify the snapshots by receiving a command that instructs the creation of one or both snapshots. Identification module may receive user input that designates one or both snapshots. Identification module may also receive a backup policy that specifies a predetermined schedule for creating one or both snapshots. In some cases identification module may receive alphanumeric textual or other identifiers for one or both snapshots. In other cases identification module may receive a command or other indication that identifies a snapshot as the currently generated snapshot and or as the previously generated snapshot. In some embodiments identification module may receive a backup policy that specifies predetermined defaults for identifying one or both snapshots. In these cases reception of a command without an explicit reference to one or both snapshots may identify the corresponding snapshot s according to the predetermined defaults.

At step one or more of the systems described herein may provide identifiers of the initial snapshot and the subsequent snapshot to a storage vendor API. For example provisioning module may as part of computing device in provide identifiers of initial snapshot and subsequent snapshot to storage vendor API . As used herein the phrase storage vendor application programming interface generally refers to any programming interface provided by or associated with an individual or organization that provides or facilitates data storage. As used herein the phrase application programming interface or API generally refers to any specification of how some computer and or software components interact with each other. In primary embodiments API generally refers to a software component that provides an interface for receiving and processing requests for data.

Provisioning module may provide identifiers of the initial snapshot and the subsequent snapshot to a storage vendor API in a variety of ways. In general provisioning module may provide identifiers by providing any data bit or bytes that enables API to identify and or complete an identification e.g. designation of the snapshots. Provisioning module may provide identifiers of the snapshots in any manner parallel to how identification module identifies these snapshots. Provisioning module and identification module may provide the identifiers and identify the snapshots as part of the same integral command or as part of different discrete commands in sequence. In some cases provisioning module may provide an alphanumeric textual or other identifier and or pointer for one or both snapshots to the storage vendor API. In some embodiments provisioning module may provide identifiers for the snapshots by providing a command that requests a comparison between two snapshots. If the request command does not explicitly specify one or both snapshots by name provisioning module may provide the identifiers by providing the request command using one or more default rules. For example a command to compare two snapshots may include a parameter to generate a new snapshot and the command may default to comparing the most recently created snapshot with the newly created snapshot. In that case the identifier of the initial snapshot may include an identifier of a most recent snapshot. Similarly the identifier of the subsequent snapshot may include a command to create a new snapshot.

At step one or more of the systems described herein may receive from the storage vendor API an indication of at least one difference between the initial snapshot and the subsequent snapshot. For example reception module may receive from storage vendor API an indication of at least one difference between initial snapshot and subsequent snapshot .

Reception module may receive the indication of at least one difference between the initial snapshot and the subsequent snapshot in a variety of ways. Reception module may receive from the storage vendor API the indication of the difference between the initial snapshot and the subsequent snapshot in response to a request for the indication of the difference. The request for the indication of the difference may include a request for all files that were modified deleted and or created between the initial snapshot and the subsequent snapshot. The indication of the difference may indicate a file path of a file that was created modified and or deleted. Alternatively the request may include a request for some designated or all deleted files some designated or all changed files some designated or all new files and or some designated or all files having a change of a particular type or satisfying a specified condition e.g. any specified change in any of the types of metadata discussed below . In other words the request may include a Boolean or other formulaic query that narrows search results to a specific type of change difference and or file.

As shown in API may respond by generating a differences set which may indicate the requested differences. Differences set may include new files which shows file D . Differences set may also include deleted files which shows file C . Similarly differences set may include changed files which may show file B and or file B . Although differences set only includes one file in each of new files deleted files and changed files these lists may show more than one file. Moreover although shows differences in files the disclosed systems and methods may equally apply to differences between directories. Furthermore although reception module in receives an indication of all differences between initial snapshot and subsequent snapshot reception module may similarly receive an indication of just a single difference and or a proper subset of differences defined according to a request policy and or default rule as further discussed above . As shown in differences set may indicate that file D is new in subsequent snapshot that file C has been deleted since initial snapshot and that file B has been modified since initial snapshot .

The indication of the difference between the initial snapshot and the subsequent snapshot may indicate a change in file metadata. In general API may indicate any difference between initial snapshot and subsequent snapshot that may improve benefit and or enable generation of synthetic catalog . The difference may indicate a change in file name file location e.g. absolute or relative directory system path and or disk block start and or end and or virtual and or physical locations for one some and or all file blocks partial or complete file hash or fingerprint file size file last modified date time and or type security status encryption status virtualization status change status of specified file blocks or segments new and or deleted file content file type and or file extension etc.

At step one or more of the systems described herein may synthetically generate a catalog for the subsequent snapshot based on a preexisting catalog for the initial snapshot such that the synthetically generated catalog reflects the difference between the initial snapshot and the subsequent snapshot indicated by the storage vendor API. For example generation module may synthetically generate synthetic catalog for subsequent snapshot based on preexisting catalog for initial snapshot such that synthetic catalog reflects the difference between initial snapshot and subsequent snapshot indicated by storage vendor API . As used herein the phrase synthetically generate generally refers to incremental generation of a catalog based at least in part on a previous catalog as opposed to entirely generating a new catalog without reference to a previous catalog.

Generation module may generate the synthetic catalog for the subsequent snapshot in a variety of ways. Notably generation module may synthetically generate the catalog for the subsequent snapshot without mounting the subsequent snapshot on a client. Omitting the mounting and or file hierarchy traversal of the snapshot may reduce the time consumed for generating the catalog by one or more orders of magnitude.

Generation module may also synthetically generate the catalog for the subsequent snapshot in part by conserving storage space by omitting the creation of data in the catalog for the subsequent snapshot that is unchanged from the preexisting catalog for the initial snapshot. Generation module may also synthetically generate synthetic catalog for subsequent snapshot in part by associating the indication of the difference between initial snapshot and subsequent snapshot with preexisting catalog for initial snapshot .

As further shown in generation module may synthetically generate synthetic catalog based on preexisting catalog . In some examples generation module may synthetically generate synthetic catalog by associating preexisting catalog with differences set thereby linking them. Generation module may associate and or link preexisting catalog and differences set by unifying them in a single file and or single data structure and or creating a relationship or correlation between them in a database or other data structure.

Moreover generation module may associate and or link preexisting catalog and differences set in a manner that enables a restoration system to access search and or restore e.g. granularly or selectively restore subsequent snapshot by dynamically and or selectively providing access to unchanged data in initial snapshot and unchanged metadata in preexisting catalog or applying differences set to preexisting catalog to enable access to changed data. For example the restoration system may direct requests for data in synthetic catalog that is unchanged in preexisting catalog to preexisting catalog . Changes in snapshot data may correspond to changes in catalog metadata so that redundancies in snapshot data may correspond to redundancies in catalog data e.g. when parts of the snapshot do not change then corresponding parts of the catalog also do not need to change . The restoration system may direct requests to preexisting catalog using pointer . Similarly generation module may synthetically generate synthetic catalog by including a pointer to and or copy of differences set within synthetic catalog or otherwise associating synthetic catalog with differences set .

In some embodiments generation module may synthetically generate synthetic catalog in part by modifying preexisting catalog for initial snapshot such that synthetic catalog reflects the difference between initial snapshot and subsequent snapshot indicated by API . For example instead of merely associating and or linking preexisting catalog and differences set generation module may modify a copy of preexisting catalog and or selectively copy from preexisting catalog to update the copy to reflect one or more differences detected by API since initial snapshot . In the case where generation module applies all existing desired and or designated differences from differences set to preexisting catalog generation module and or another module may discard and or delete differences set . Generation module may also generate a new file or data structure in a format that parallels preexisting catalog but includes one or more applied changes from differences set . Moreover generation module may similarly format and or alter one or both of preexisting catalog and or differences set to enable facilitate and or improve the ability of a restoration system to use their combination as a synthetic catalog for subsequent snapshot e.g. to dynamically and or selectively access data within one or both of preexisting catalog and differences set .

The above discussion of provided a detailed overview of the disclosed systems and methods. The following provides a higher level overview of these systems and methods with a focus on primary embodiments.

Storage array vendors may provide APIs that specify differences between two backup snapshots. The disclosed systems and methods may leverage one or more of these APIs to obtain file and or directory names that have been modified between two snapshots. The disclosed systems and methods may then reflect those differences into the catalog for the subsequent snapshot. The disclosed systems and methods may also thereby enable incremental scheduling for snapshots. Snapshots may still be performed on a volume but the disclosed systems and methods may store only the differences in the catalog. Storing only the differences in the catalog may minimize the time involved in cataloging the snapshot. Storing only the differences may also save disk space to store catalog information since the systems and methods may store only the incremental part of the snapshot.

As in greater detail above the disclosed systems and methods may dramatically increase the speed of generating a catalog for a snapshot in comparison to other conventional methods. For example the disclosed systems and methods may enable the generation of a catalog for a snapshot without mounting the snapshot on a client. Moreover these systems and methods may also conserve storage space by omitting the storage of catalog information that is redundant to information within a previous catalog for a previous snapshot.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of physical processing unit e.g. a hardware implemented central processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example database from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium as used herein generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives tape drives and floppy disks optical storage media e.g. Compact Disks CDs Digital Video Disks DVDs and BLU RAY disks electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for generating catalogs for snapshots.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example the modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the phrase information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the phrase information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the phrase endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive A requests and or commands for snapshots and or snapshot differences B snapshots and or C indications of differences between snapshots to be transformed transform the requests commands snapshots and or indications of differences output a result of the transformation to a storage device output device monitor and or display use the result of the transformation to synthetically generate a catalog for a snapshot and store the result of the transformation to a storage medium. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms connected to and coupled to and their derivatives as used in the specification and claims are to be construed as permitting both direct and indirect i.e. via other elements or components connection. In addition the terms a or an as used in the specification and claims are to be construed as meaning at least one of. Finally for ease of use the terms including and having and their derivatives as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

