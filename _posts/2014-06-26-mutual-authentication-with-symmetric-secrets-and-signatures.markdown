---

title: Mutual authentication with symmetric secrets and signatures
abstract: A client and server negotiate a secure communication channel using a pre-shared key where the server, at the time the negotiation initiates, lacks access to the pre-shared key. The server obtains the pre-shared key from another server that shares a secret with the client. A digital signature or other authentication information generated by the client may be used to enable the other server to determine whether to provide the pre-shared key.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09258117&OS=09258117&RS=09258117
owner: Amazon Technologies, Inc.
number: 09258117
owner_city: Seattle
owner_country: US
publication_date: 20140626
---
The security of computing resources and associated data is of high importance in many contexts. As an example organizations often utilize networks of computing devices to provide a robust set of services to their users. Networks often span multiple geographic boundaries and often connect with other networks. An organization for example may support its operations using both internal networks of computing resources and computing resources managed by others. Computers of the organization for instance may communicate with computers of other organizations to access and or provide data while using services of another organization. In many instances organizations configure and operate remote networks using hardware managed by other organizations thereby reducing infrastructure costs and achieving other advantages. With such configurations of computing resources ensuring that access to the resources and the data they hold is secure can be challenging especially as the size and complexity of such configurations grow.

Many techniques have been developed to enhance data security. For example transport layer security TLS and other protocols allow secure communications over a network between computer systems using symmetric cryptographic keys. Such protocols however are often avoided because of the difficulty of storing and distributing the symmetric cryptographic keys in a secure manner. Asymmetric cryptography provides mechanisms for two computer systems to share symmetric cryptographic keys. However techniques utilizing asymmetric cryptography often rely on certificate authorities which are often operated outside of the control of the entities forming a secure communication. As a result a compromise to the security of a certificate authority can compromise the security of communications transmitted over communication channels created in reliance on the certificate authority.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein relate to the establishment of secure communication channels using symmetric secrets. In an embodiment a client computer system client uses a symmetric cryptographic key to establish a secure communication channel with a server computer system server . At initiation of a process to establish the secure communication channel with the server the client and the server do not share the secret that is used to establish the secure communication channel. When the client contacts the server to establish the secure communication channel the server communicates with another server that has access to the cryptographic key. The server with access to the cryptographic key provides the cryptographic key to the server that initially lacked access to the cryptographic key thereby enabling the server that initially lacked access to the cryptographic key to establish the secure communication channel with the client.

In some embodiments the client digitally signs a message using a cryptographic key thereby resulting in a digital signature of the message. The client then transmits the message and the digital signature to a server that lacks access to the cryptographic key. For example the server lacks access to the cryptographic key because the server does not have available e.g. in volatile or non volatile memory the cryptographic key and or another cryptographic key necessary to derive the cryptographic key. As the server lacks access to the cryptographic key the server is unable to verify the digital signature of the message.

Accordingly in an embodiment the server transmits the message and the digital signature to an authentication server that does have access to the cryptographic key. The authentication server having access to the cryptographic key e.g. either by having available the cryptographic key or being able to derive the cryptographic key is able to obtain the cryptographic key and use the obtained cryptographic key to verify the digital signature. Contingent on successful verification of the digital signature the authentication server provides the server a cryptographic key to which the client has access. Once the server shares a cryptographic key with the client the client and server can establish a secure communication channel

Various techniques may be applied to enhance security in a system such as described above. For example in some embodiments the authentication server uses a cryptographic key shared with the client i.e. a cryptographic key to which the client has access by either having available the cryptographic key or being able to derive the cryptographic key to derive another cryptographic key that the client is also able to derive or has already derived. The client and authentication server may each have access to a set of parameters used in deriving the other cryptographic key. For example a message from the client to the server may encode or otherwise specify an ordered set of derivation parameters also referred to as a key path or a key derivation path and that message may be forwarded to the authentication server thereby ensuring that the client and the authentication server have access to the same set of derivation parameters. In some embodiments the message specifies multiple key paths each for a different cryptographic key to be derived from the same root key. As another example the client and the authentication server may each be configured e.g. with executable code to utilize the same set of parameters. In other words the client and authentication server may operate in accordance with a canonical system that multiple devices in a distributed system are configured to utilize. As yet another example the client and or authentication server may obtain the key derivation parameters from another entity. Other variations are also considered as being within the scope of the present disclosure.

By providing the server with a derived cryptographic key that is derived from a cryptographic key shared as a secret between the client and the authentication server numerous technical advantages are achieved. For example by providing the server with the derived cryptographic key the server lacks access to the cryptographic key shared between the authentication server and the client. As a result if the server is compromised and unauthorized access to and or use of the derived cryptographic key is achieved by an unauthorized entity the effect of the compromise does not extend to the cryptographic key used to derive the derived cryptographic key. In a distributed system where a single cryptographic key may be used to derive multiple derived cryptographic keys used in different divisions of the distributed system compromise of a single key affects only that those division s of the distributed system that utilize s that key. As another example in some embodiments a server that is able to obtain from another server a symmetric key usable to establish a secure communication channel with a client is able to establish the secure communication channel without use of a digital certificate used with asymmetric cryptography. Consequently additional precautions needed to protect the integrity of the digital certificate need not be taken. Other advantages will also be apparent to those with skill in the art.

In an embodiment the client establishes a secure communication channel with the frontend server . As an illustrative example the secure communication channel may be established using transport layer security protocol such as defined in Request for Comments RFC 5246 RFC 2246 RFC 4279 and RFC 6176 which are incorporated herein by reference. Other protocols such as secure sockets layer SSL and other protocols implemented below the application layer of the Open Systems Interconnect OSI model may also be used and or adapted to utilize techniques described herein. To establish the secure communication channel the client and the frontend server may utilize a shared cryptographic key that is a cryptographic key accessible to both the client and the frontend server . However when the client initiates communication with the frontend server the frontend server may lack access to such a cryptographic key. Accordingly as illustrated in the authentication server may provide a cryptographic key to the frontend server. The cryptographic key may be accessible to the client . Thus upon having been provided the cryptographic key the frontend server is able to use the cryptographic key to establish the secure communication channel . As discussed in more detail below the authentication server may perform additional operations such as operations related to authentication of the client .

As illustrated in individual customer computing devices may include one or more root keys which may be symmetric cryptographic keys e.g. keys used in symmetric cryptographic algorithms . One or more root keys accessible to a customer computer device may also be accessible to the authentication server . As noted in the authentication server may have multiple root keys for multiple customers of a computing resource service provider for which the frontend server and or authentication server operate. For a particular customer computing device the authentication server may share all the root keys accessible to the customer computing device or a proper subset thereof. It should be noted that by cryptographic keys being accessible to both a customer computing device and the authentication server the customer computing device and the authentication server do not necessarily need to store copies of the same cryptographic key. As noted for example accessibility to a cryptographic key may be the ability to access another cryptographic key from which another cryptographic key can be derived. As illustrated in the frontend server does not have access to the root keys . In some embodiments the frontend server never has access to the root keys but only cryptographic keys derived from the root keys . In this manner a security compromise of the frontend server does not compromise the root keys .

Various information may be provided in the ClientHello and ServerHello messages. For example in some embodiments the ClientHello message specifies a set of cybersuites supported by the client . Similarly the ServerHello message may specify a set of cybersuites supported by the frontend server . In this manner the client and frontend server may agree to a ciphersuite mutually supported by both the client and the frontend server . In some embodiments the ClientHello message specifies a ciphersuite corresponding to an embodiment of the present disclosure. In some embodiments a server supporting such a ciphersuite is configured to utilize the specified ciphersuite if included in a set of ciphersuites specified in a ClientHello message. Selection of the ciphersuite or a different ciphersuite may be specified to the client in the ServerHello message.

Upon receipt of the ServerHello message the client may transmit a communication to the frontend server that comprises a message specifying a key path. In an embodiment the key path specifies a set of key derivation parameters usable to derive a pre shared key such as described in more detail below where the key path may specify an ordering of multiple parameters so that as described below a different computer system also deriving the pre shared key will derive the same pre shared key when output of algorithm for key derivation is dependent on the ordering of the parameters. The communication may also include a digital signature generated by the client generated so as to be verifiable by the authentication server . In some embodiments the digital signature is a digital signature of the message. In other embodiments the digital signature is generated over multiple messages such as all messages between the client and the frontend server beginning with the ClientHello message. In embodiments where the digital signature is calculated over multiple messages such messages may be stored by the frontend server and provided to the authentication server to enable the authentication server to verify the digital signature .

Having received the communication with the key path and digital signature the frontend server may forward the communication or information otherwise based at least in part thereon to the authentication server . The authentication server may verify the digital signature and contingent on successful verification of the digital signature may derive one or more cryptographic keys where derivation of one or more keys may be made in accordance with one or more key paths specified by the client where a key path may be used to generate a cryptographic key such as described in more detail below. In this example the authentication server derives a request key and a pre shared key. One or more cryptographic keys used to derive the request key and the pre shared key may be shared with the client . That is the one or more cryptographic keys used to derive the request key and the pre shared key may be mutually available to both the client and the authentication server . The authentication server may also perform other operations such as by generating a forward access session FAS and obtaining a set of policies applicable to an entity associated with the client . A forward access session may be a credential usable by the frontend server to make application programming interface API requests to other services on behalf of a customer associated with the client . In some embodiments the forward access session comprises an encrypted set of information that is cryptographically verifiable to enable another system to determine that the frontend server is authorized to submit API requests on behalf of the customer. For example the forward access session may be sufficient to prove authorization to perform one or more operations on behalf of the customer associated with the client .

Policies may be encodings of permissions which may be generalized to conditions and effects of fulfillment of conditions with respect to a system where access is controlled at least in part by the authentication server . The policies may be encoded in any suitable manner such as in a declarative access control policy language such as eXtensible Access Control Markup Language XACML Enterprise Privacy Authorization Language EPAL Amazon Web Services Access Policy Language Microsoft SecPol or any suitable way of encoding one or more conditions e.g. by encoding an access control list ACL or portion thereof that must be satisfied for a data storage operation to be performed.

The request key derived by the authentication server may be a cryptographic key usable to verify digital signatures generated by the client with a copy of the request key. In other words the request key may be a symmetric cryptographic key although asymmetric digital signature generation and verification is also considered as being within the scope of the present disclosure. The pre shared key denoted K may be a cryptographic key usable to establish a secure communication channel between the client and the frontend server . For example the pre shared key may be used to generate a premaster secret which may be used to generate a master secret that is usable to determine a session key in accordance with the TLS protocol which contains a record protocol and a handshake protocol . In some embodiments the pre shared key itself is used as a session key. Generally using the pre shared key to establish a secure communication channel may include encrypting data using the pre shared key or another key derived at least in part from the pre shared key. Generally any cryptographic key discussed as usable used etc. to perform a cryptographic operation e.g. digital signature generation and or verification denotes that the cryptographic key itself or another cryptographic key derived at least in part from the cryptographic key is used as input into a cryptographic algorithm for performing the cryptographic operation.

It should be noted that the operations performed by the authentication server are illustrative in nature and variations are considered as being within the scope of the present disclosure. For example as illustrated in the authentication server derives both a request key and a pre shared key. In some embodiments however a single cryptographic key may be usable as both a request key and a pre shared key. Similarly in some embodiments an authentication server does not generate a forward access session and or does not obtain policy applicable by the frontend server. Generally however as illustrated in the information determined by the authentication server such as cryptographic keys forward access sessions and or policies are provided to the frontend server .

In the illustrative embodiment shown in the authentication server provides to the frontend server an authentication determination which indicates explicitly or implicitly whether the digital signature has been successfully verified and if the authentication decision indicates successful verification of the digital signature the authentication server provides the request key the pre shared key any obtained policies and the forward access session. Upon receipt of the information from the authentication server the frontend server may utilize the information for various purposes. For example as illustrated in the frontend server may use the pre shared key to establish a secure communication channel with the client . The request key may be used by the frontend server to verify digital signatures received from the client in future requests such as future requests submitted by the client to the server to establish a secure communication channel after a previous secure communication channel has ended and or to sign API requests to access one or more computing resources although in some embodiments API requests may be unsigned once a secure communication channel has been established and is in use. In this manner by having available the request key the frontend server is able to verify digital signatures without additional communications with the authentication server until for example the request key expires where expiration may be triggered by ending of a session that uses the pre shared key. The policy may be used by the frontend server to evaluate whether to fulfill requests submitted by the client and a forward access session may be used as part of fulfillment of requests submitted by the client such as by using the forward access session to submit requests to other servers on behalf of the client .

Turning to the illustrated embodiment as shown in the process may include receiving from the server a ClientHello response ServerHello message specifying the service information such as information that describes a service in which the server is a component. The service information may for example identify a service that is one of multiple services operated by a computing resource service provider. Other information such as a region in which the server operates may also be included in the service information. While specific details are not illustrated in the flowchart of the service information may be used by a system performing the process in its operations. For example as illustrated in the process may include determining a signing key and a pre shared key. In some embodiments the service information is used to determine at least part of a key path used to derive the signing key and pre shared key as the key path may be determined by the client using the service information. In some embodiments the service information is the key path and variations of such embodiments include ones in which the server provides the key path to the client and the client does not provide the key path to the server. In some examples both the signing key and the pre shared key are derived from the same root key although in other examples different root keys are used to respectively generate the signing key and the pre shared key. Further in some examples one of the signing key and pre shared key is derived from the other of the signing key and pre shared key while in other examples neither the signing key nor the pre shared key is derived from the other of the signing key or pre shared key. Yet further in some embodiments a root key is used as the signing key or pre shared key. It should be noted that to determine a cryptographic key in accordance with any of the processes described herein a computer system may derive or otherwise generate the cryptographic key itself or otherwise obtain the cryptographic key such as by retrieving a pre generated cryptographic key from storage or receiving the cryptographic key from another computer system that derived the cryptographic key either on demand or as a pre generated cryptographic key that was stored for later access.

As noted above a single key may be used as a signing key and pre shared key in some embodiments. As illustrated in the process includes generating a message with a key path used to generate the pre shared key. In some embodiments the message also includes a key path used to generate a signing key although executable code of the system performing the process and another system that will verify the digital signature may be configured such that transmission of the key path is unnecessary. For example a client may execute code of a client library of a service provider where the client library is configured to cause the client to utilize key paths so as to derive cryptographic keys usable in communicating with the server.

The determined signing key may be used to digitally sign the generated message. In some embodiments for example a digital signature is generated as output of a hash based message authentication code algorithm HMAC applied to the message and the signing key although other digital signature techniques are considered as being within the scope of the present disclosure. As another example another keyed cryptographic hash e.g. message authentication code MAC of the message may be generated using the message and the signing key. Generally the signing key and generated message may be used to generate information sufficient for verification of authenticity and integrity of the message. Further as noted the message may include information such as previous messages that were transmitted in a sequence of communications such as in accordance with variations of TLS.

The message with the key path and the digital signature may be transmitted to the server which as described above and in more detail below may obtain the pre shared key such that the system performing the process is able to use the pre shared key to establish a secure communication channel with the server. As with all processes described herein variations are considered as being within the scope of the present disclosure. For instance shows the signing key and the shared key being determined at a particular point during performance of the process . The signing key and pre shared key may be determined in different places during performance of the process in various embodiments and generally determination of the signing key and pre shared key may be done separately or together before the keys are later used.

Accordingly the process may include determining from the message received from the authentication server whether the digital signature has been verified. If it is determined the digital signature has been verified the process may include obtaining a pre shared key from the message that was received from the authentication server. The pre shared key may be used to establish an encrypted communication channel with the client such as described above. For example the encrypted communication channel may be established in accordance with the TLS protocol when both client and server have a pre shared key. The pre shared key may for instance be used to determine a premaster secret then a master secret from which a session key is derived. As noted in some embodiments the pre shared key is used as a session key. Further with respect to client operations in alternate embodiments the authentication server may perform some or all of the computations involved in generating a session key from the pre shared key and in some examples the system performing the process does not receive a pre shared key but a session key and or information derived based at least in part on the pre shared key where the information is usable e.g. sufficient to generate the session key.

If however it is determined that the digital signature has not been successfully verified by the authentication server the process may include taking action corresponding to an unverified signature. In some examples the action that is taken may include ceasing further communication with the client that submitted the ClientHello message that was received . As another example a communication may be made to the client that indicates that the digital signature was unsuccessfully verified or generally indicates that an error has occurred. In yet other examples the action taken may be a fallback to another mode of operation. For example other methods of exchanging a pre shared key such as those specified in TLS such as a Diffie Hellman key exchange may be used to exchange a cryptographic key with the client so that the client and server may each have available a pre shared key and may establish the encrypted communication channel. Other variations are also considered as being within the scope of the present disclosure.

A referenced digital signature may be calculated using the signing key and a determination may be made whether the digital signature is verified. For example a determination whether the digital signature is verified may be determined based on whether the referenced digital signature is equal to or otherwise matches the digital signature received with the message. If it is determined that the digital signature is verified a pre shared key may be determined . Determining the pre shared key may include using some or all of the key path that was received to derive the pre shared key from a cryptographic key shared with a client that purportedly generated the digital signature. The pre shared key may then be provided to the frontend server from which the message was received .

As noted above a system performing the process may perform additional operations such as generating a request key generating a forward access session and or determining one or more applicable policies and such additional information may be provided to the frontend server with the pre shared key. If however it is determined that the digital signature is not verified such as if the referenced digital signature does not match the digital signature that was received an indication of an unverified digital signature may be transmitted to the frontend server thereby enabling the frontend server to operate accordingly.

As noted variations of all processes are considered as being within the scope of the present disclosure. For example performance of the process may also include digitally signing communications to a system performing the process . Accordingly the process may include verifying a digital signature generated by the frontend server and performance of various operations described in connection with may be contingent on successful verification of the digital signature of the frontend server. Similarly the authentication server may digitally sign its communications to enable the frontend server to determine that such communications are authentic and that the communications originate from the authentication server. Other variations are also considered as being within the scope of the present disclosure.

As noted above the techniques described herein are usable in a variety of computing environments. accordingly shows an illustrative example of an environment in which various embodiments may be implemented. In this example the environment includes a frontend server and an authentication server . The frontend server may be implemented to provide an application programming interface for accessing a service where resources of the service may be hosted using the computing device and or other computing devices not pictured . For example the frontend server may be a member of a fleet of client computing nodes each node comprising a computing device. Similarly the authentication server may be a computing device configured to verify digital signatures using cryptographic keys provided to the authentication server. For example the authentication server may be a member of a fleet of authentication devices each configured to perform various operations in connection with authentication such as digital signature checking cryptographic key derivation and forward access session generation.

In various embodiments the frontend server and authentication server are under the control of the same entity. In some examples the frontend server and authentication server communicate over an isolated network that is under the control of the entity. The frontend server in some embodiments includes a web server that processes web service API requests to perform various operations in accordance with a service provider associated with the frontend server .

As discussed in more detail below the frontend server may communicate with the authentication server for the purpose of verifying digital signatures of requests received by the frontend server . For example in some embodiments a service client transmits a digitally signed API request to the frontend server . The API request may for example be a web service request configured to cause a service of the service provider to perform one or more corresponding operations. As the API request is digitally signed the API request may be transmitted by the service client with a digital signature which may be verified by the authentication server such as described above. The frontend server may process the API request in various ways in accordance with various embodiments and the manner by which the frontend server processes API requests may vary in accordance with the type of service being provided and the particular type of request that is submitted. In some examples the frontend server performs some or all of fulfillment of the request itself. In other examples the frontend server causes one or more other computing devices to perform a role in fulfillment of the request. In some embodiments a request is fulfilled by the frontend server triggering a workflow comprising operations performed by one or more other computing devices. Other variations are also considered as being within the scope of the present disclosure.

In various embodiments a authentication request from the frontend server to the authentication server is digitally signed using a cryptographic key corresponding to the frontend server and therefore the frontend server transmits the authentication request with a digital signature of the authentication request . The authentication server may verify the digital signature using a key associated with the frontend server e.g. a symmetric cryptographic key corresponding to the frontend server or a public cryptographic key corresponding to a private cryptographic key of the frontend server and operate with successful verification of the digital signature as a condition for providing a verification response indicating whether the digital signature of the service client is valid.

As noted above the keys used to verify digital signatures and generate digital signatures may be provided to the systems that performed digital signature verification and generation. Accordingly as illustrated in the environment includes a first key management system and a second key management system . In some embodiments the first key management system has access to cryptographic keys shared with various service clients who may be customers of a computing resource service provider that provides the service.

As illustrated in the first key management system may provide a cryptographic key to the service client and store the cryptographic key or another cryptographic key from which the cryptographic key is derivable. The first key management system and service client may share the cryptographic key in other ways such as by the service client providing the cryptographic key to the first key management system or by another system not pictured providing both the service client and the first key management system the cryptographic key . The transfer of cryptographic keys between entities may be performed in various ways such as by transmission over an encrypted channel by encrypting cryptographic key s to a public key of a recipient entity and transmitting the encrypted cryptographic key s to the entity by physically transferring a computer readable medium storing the cryptographic keys from one entity to the other and the like.

The first key management system may transmit keys derived from those shared cryptographic keys to second key management system . In one example the first key management system is a central key management system used to provide cryptographic keys to various subsystems of a distributed computing environment that is distributed among multiple regions. The second key management system may comprise a key management system in a particular region i.e. a regional key management system and the keys provided from the first key management system to the second key management system may be generated i.e. derived from the clients of the service so as to only be usable within the particular region of the second key management system . The second key management system may use one or more of the received keys to derive keys that are provided to the frontend server and the authentication server to enable the frontend server and the authentication server to perform signature verification and or generation. The keys may be generated from the keys so as to have a smaller scope of use that is to be useable for a smaller set of uses for which the keys are usable such as described in more detail below. Generally a first cryptographic key may have a larger scope of use than a second cryptographic key derived from the first cryptographic key because in some embodiments the second cryptographic key is sufficient to cause a first set of operations the first cryptographic key is also usable to derive a third cryptographic key that the second cryptographic key is usable to derive and the third cryptographic key is usable to cause at least one operation that the second cryptographic key is insufficient to cause. Additional details are discussed below.

It should be noted that is illustrative in nature and that fewer or more key management systems may be used in various embodiments. For example in some embodiments a central key management system for each of multiple regions derives cryptographic keys and transmits the derived cryptographic keys to a key management system in a region. The regional key management system may use the derived cryptographic keys to derive keys for each of a plurality of services and provide the derived cryptographic keys to the service. Individual services may further derive cryptographic keys e.g. for host computing devices of the service and the like. Generally the levels of cryptographic key derivation may vary in accordance with various embodiments.

Accordingly as illustrated in the first key may be used to derive a second key having a second key scope labeled as Key Scope 2 . While omitted from the drawing to avoid obscuring the illustration the first key may be used to derive multiple second keys each with a different second key scope. This second key may be used to derive a third key which may be used to derive another key and so on. To derive a series of keys one from another the following formula or variations thereof may be used where Kis the Nth derived key N being a positive integer Fis a one way function or otherwise based at least in part on a one way function such as a cryptographic hash function message authentication code algorithm or a key derivation function described above and Ris an encoding of a restriction. It should be noted that the phrase one way function includes functions that are not necessarily one way in the strict mathematical sense but that exhibit properties such as collision resistance preimage resistance and second preimage resistance that render the function useful in contexts in which the various techniques of the present disclosure are applied. Thus the allowable scope of use for Kis the scope of use of Krestricted by the restriction corresponding to R. Each encoding of a restriction Rmay be an encoding of a different restriction such as described above and below. Each function Fmay be the same function or different functions F for some or all different values of i may be different. Values for R are considered restrictions because due to the mathematical properties of the function s F access to the values of R and output of F without a cryptographic key used to generate the output of Fdoes not provide access to the cryptographic key. As a result access to one or more resources may be managed by distributing derived cryptographic keys in according to the restrictions corresponding to the values of R. For example a key management system may manage keys for multiple regions. A single root key may be used to derive multiple regional keys each derived with a different value of R corresponding to a different region. Regional keys may be transferred to regional systems. In this manner because of the manner in which regional keys are generated a regional system or other entity with a corresponding regional key without access to the root key used to generate the regional key is unable to determine a regional key of another region without for instance extraordinary expenditure of computational resources necessary for a cryptographic e.g. brute force attack.

As discussed above numerous types of restrictions may be used to scope cryptographic keys. accordingly shows an illustrative example of a diagram illustrating one way in which a cryptographic key may be scoped. In this particular example a series of boxes appears where each box represents a scope of use of a cryptographic key. The boxes are arranged in a Venn diagram so that if a first box is contained in a second box set of uses for which a first cryptographic key is usable is a proper subset of a set of uses for which a second cryptographic key is usable where the first cryptographic key is directly or indirectly derived from the second cryptographic key.

In this illustrative figure a customer key may be a key shared between a computing resource service provider and a customer of the computing resource service provider. The customer key may be usable to validly digitally sign requests that the customer is authorized to make i.e. requests that the customer is able to submit and cause to be fulfilled . It should be noted that to be usable for all uses for which the customer is authorized it may be necessary to use the key to derive another key that is used as a signing key. In various embodiments the encodings of restrictions are public or otherwise available to the customer so that the customer through an appropriate computing device is able to derive a key appropriate for a particular use. For instance to sign an API request to be transmitted to a particular region of the service provider the customer may derive a signing key based at least in part on the encoding for the region. Such may be necessary for example when devices used to verify signatures in the region lack access to the customer key and therefore are unable to verify digital signatures generated directly using the customer key.

As illustrated the customer key may be used to derive a region key usable only within a particular region. The region key may be used to derive a service key usable only to submit requests to a particular service operated in the region. The service key may be used to derive a host key which may be a key usable only on a particular computing device host . The host key may be used to derive an instance key which may be a key usable only on a particular virtual machine instance supported by the host. The instance key may be used to derive a database key which may be a key usable only for operations on a particular database. The database key may be a key usable only for operations on a particular table of the database in embodiments where the database utilizes table structures . The particular restrictions and order in which keys are derived are illustrative in nature and various embodiments may utilize fewer restrictions and or may perform key derivations in a different order than illustrated in the figure. Other restrictions may also be used such as time based restrictions identity based restrictions and generally any way by which a set of uses of a cryptographic key is restrictable.

The various keys and scopes represented in and variations thereof may be derived in various ways in accordance with various embodiments. For example different devices of different computer systems may perform the various derivations that ultimately result in a signing key being derived. For instance a key management system may perform one derivation and transmit the result to another system which performs further derivation. In some examples a device performing digital signature generation and or digital signature verification may perform one or more derivations to obtain a signing verifying key. Features of a request and or command may be used to determine which restrictions e.g. which customer which database which table which host etc. need to be used to perform one or more key derivations. Other variations are also considered as being within the scope of the present disclosure.

The above description mentions numerous cryptographic operations e.g. encryption decryption digital signature generation digital signature verification that may be performed. Cryptographic operations that may be performed in various embodiments include but are not limited to digital signature generation digital signature verification encryption decryption and random number generation. Operations that utilize cryptographic keys include but are not limited to public key and or private key cryptographic algorithms. For example as discussed numerous variations utilize symmetric and or asymmetric cryptographic primitives. Symmetric key algorithms may include various schemes for performing cryptographic operations on data including block ciphers stream ciphers and digital signature schemes. Example symmetric key algorithms include but are not limited to the advanced encryption standard AES the data encryption standard DES triple DES 3DES Serpent Twofish blowfish CASTS RC4 and the international data encryption algorithm IDEA . Example modes of block ciphers include but are not limited to the cipher block chaining CBC mode propagating cipher block chaining PCBC mode cipher feedback mode CFB output feedback OFB mode counter CTR mode and other modes such as authenticated encryption modes such as eXtended Ciphertext Block Chaining XCBC mode Integrity Aware CBC IACBC mode Integrity Aware Parallelizable IAPM mode Offset Codebook OCB mode EAX and EAX Prime modes Carter Wegman CTR CWC mode Counter with CBC MAC CCM mode Galois Counter GCM mode. Symmetric key algorithms may also include those used to generate output of one way functions and include but are not limited to algorithms that utilize hash based message authentication codes HMACs message authentication codes MACs in general PBKDF2 and Bcrypt.

Asymmetric key algorithms may also include various schemes for performing cryptographic operations on data. Example algorithms include but are not limited to those that utilize the Diffie Hellman key exchange protocol the digital signature standard DSS the digital signature algorithm the ElGamal algorithm various elliptic curve algorithms password authenticated key agreement techniques the pallier cryptosystem the RSA encryption algorithm PKCS 1 the Cramer Shoup cryptosystem the YAK authenticated key agreement protocol the NTRUEncrypt cryptosystem the McEliece cryptosystem and others. Elliptic curve algorithms include the elliptic curve Diffie Hellman ECDH key agreement scheme the Elliptic Curve Integrated Encryption Scheme ECIES the Elliptic Curve Digital Signature Algorithm ECDSA the ECMQV key agreement scheme and the ECQV implicit certificate scheme. Other algorithms and combinations of algorithms are also considered as being within the scope of the present disclosure and the above is not intended to be an exhaustive list.

As discussed variations of the techniques discussed above are considered as being within the scope of the present disclosure. For instance the techniques described above include using a handshake protocol to establish a secure communication channel wherein messages are encrypted for communication over the channel. The secure communication channel can be used to wrap other protocols such as by generating a message in accordance with a first protocol encrypt that message and transmit the encrypted message over the secure communication channel. When received the encrypted message can be decrypted and the message may be further processed in accordance with the first protocol. Other variations are also considered as being within the scope of the present disclosure.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

