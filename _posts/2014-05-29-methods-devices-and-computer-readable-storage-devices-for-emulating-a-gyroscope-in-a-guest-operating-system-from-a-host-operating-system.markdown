---

title: Methods, devices and computer readable storage devices for emulating a gyroscope in a guest operating system from a host operating system
abstract: A guest operating system, launched by executing an application associated with a host operating system, is provided with access to a gyroscope associated with a computing device including a processor executing the host operating system. A first application associated with the guest operating system generates a request for gyroscope data. The request is received at a hardware abstraction layer associated with the guest operating system, and the request is sent from the hardware abstraction layer to a second application associated with the host operating system. The request is sent from the second application to a driver executing within a kernel of the host operating system. The driver retrieves the requested gyroscope data from the gyroscope. The retrieved gyroscope data is provided to the first application via the second application and the hardware abstraction layer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378038&OS=09378038&RS=09378038
owner: AMERICAN MEGATRENDS, INC.
number: 09378038
owner_city: Norcross
owner_country: US
publication_date: 20140529
---
This application claims priority to U.S. Provisional Appl. No. 61 832 300 filed Jun. 7 2013 and herein incorporated by reference. In addition this application claims priority as a Continuation in part of U.S. patent application Ser. No. 14 155 471 filed Jan. 15 2014 and herein incorporated by reference.

The present disclosure relates generally to computing systems and more particularly to providing a guest operating system with access to a gyroscope on a computing device.

A tablet computer which may be simply referred to as a tablet is a one piece mobile computer. Tablet computers typically offer a touchscreen with finger or stylus gestures acting as the host means of user interface control. The tablet may be supplemented with one or more physical context sensitive buttons or the input from one or more sensors e.g. gyroscopes as a means for control. An on screen hideable virtual keyboard is generally offered as the principal means of data input. Though available in a variety of sizes tablets customarily offer a screen diagonal greater than 7 inches 18 cm differentiating the tablets through size from functionally similar smart phones or personal digital assistants.

Most tablets have built in sensors that measure motion orientation and various environmental conditions. These sensors are capable of providing raw data with high precision and accuracy and are useful for monitoring three dimensional device movement or positioning or monitoring changes in the ambient environment near a device. For example a game running on a tablet might track readings from the tablet s gravity sensor and or other sensors e.g. a gyroscope to infer complex user gestures and motions such as tilt shake rotation or swing. Likewise a weather application might use the tablet s temperature sensor and humidity sensor to calculate and report the dew point or a travel application might use the tablet s geomagnetic field sensor and gyroscope to report a compass bearing.

In today s world having dual mobile operating systems in devices such as laptops has become more common as people want to have access to features of multiple operating systems. Windows has been the host operating system for most laptops along with Linux based operating systems. Recently with the increase in popularity of Android in smartphones a trend is emerging pushing Android as a guest operating systems in tablets notebooks and netbooks. Since Android has the advantage of a mature application market along with developer support there is an increasing push from the market to run Android in parallel with Windows.

The Android OS platform supports three broad categories of sensors environmental sensors position sensors and motion sensors. Environmental sensors measure various environmental parameters such as ambient air temperature and pressure illumination and humidity. Environmental sensors include e.g. barometers photometers and thermometers. Position sensors measure the physical position of a device. Position sensors include e.g. orientation sensors and magnetometers. Motion sensors measure acceleration forces and rotational forces along three axes. Motion sensors include e.g. gyroscopes gravity sensors gyroscopes and rotational vector sensors.

A Dual Operating System DUOS allows an Android OS to work alongside a host OS e.g. a Windows OS in a tablet and other types of computing devices e.g. mobile communication devices personal digital assistants and personal computers. DUOS enables the user of a Windows OS computing device to run an Android OS in the same computing device and to use the thousands of applications available in Android. Details of exemplary DUOS devices are provided in U.S. patent application Ser. No. 13 233 473 filed Sep. 2 2011 and U.S. patent application Ser. No. 14 155 471 filed Jan. 15 2014 herein incorporated by reference.

In an Android operating system that is not part of a DUOS computing device an Android application sends requests for access to the hardware and the requests are fulfilled by the Linux drivers.

However in existing DUOS computing devices in which the Android OS is executed as a guest of the Windows OS when the Window OS boots the computing device the Windows OS enumerates and takes over the hardware. Later when DUOS is launched from within the Windows OS the Android OS is run in the Windows OS as a process. An attempt by an Android application to access the hardware through Linux drivers in such a device would fail as it would be transparent to the Windows OS because such access is outside of the scope of the Windows OS.

It is with respect to these and other considerations that the disclosure presented herein has been made.

It should be appreciated that this Summary is provided to introduce a selection of concepts in a simplified form the concepts being further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of this disclosure nor is it intended to limit the scope of the disclosure.

According to an illustrative embodiment a method is provided for providing a guest operating system with access to a gyroscope associated with a computing device including a processor executing a host operating system. The method includes generating a request for gyroscope data by a first application associated with the guest operating system. The guest operating system is launched as a virtual operating system and executed as a guest of the host operating system. The method further includes receiving the request at a hardware abstraction layer associated with the guest operating system and sending the request from the hardware abstraction layer associated with the guest operating system to a second application executed by the processor in a user mode layer associated with the host operating system. The method further includes ending the request from the second application to a driver executing within a kernel of the host operating system. The driver retrieves the requested gyroscope data from the gyroscope. The method further includes providing the requested gyroscope data to the first application via the second application and the hardware abstraction layer.

According to another embodiment a computing device includes a processor and a memory. The memory has instructions stored thereon which when executed by the processor cause the processor to perform operations. The operations include executing a host operating system and executing an application for launching a guest operating system. The guest operating system is a virtual operating system and is executed as a guest of the host operating system. The operations further include generating a request for gyroscope data by a first application associated with the guest operating system. The operations further include receiving the request at a hardware abstraction layer associated with the guest operating system and sending the request from the hardware abstraction layer associated with the guest operating system to a second application executed by the processor in a user mode layer associated with the host operating system. The operations further include sending the request from the second application to a driver executing within a kernel of the host operating system. The driver retrieves the requested gyroscope data from the gyroscope. The operations further include providing the requested gyroscope data to the first application via the second application and the hardware abstract layer.

According to another embodiment a computer readable storage device has instructions stored thereon which when executed by a processor cause the processor to perform operations. The operations include executing a host operating system and executing an application for launching a guest operating system. The guest operating system is a virtual operating system and is executed as a guest of the host operating system. The operations further include generating a request for gyroscope data by a first application associated with the guest operating system. The operations further include receiving the request at a hardware abstraction layer associated with the guest operating system and sending the request from the hardware abstraction layer associated with the guest operating system to a second application executed by the processor in a user mode layer associated with the host operating system. The operations further include sending the request from the second application to a driver executing within a kernel of the host operating system. The driver retrieves the requested gyroscope data from the gyroscope. The operations further include providing the requested gyroscope data to the first application via the second application and the hardware abstract layer.

Detailed illustrative embodiments are disclosed herein. It must be understood that the embodiments described and illustrated are merely examples that may be embodied in various and alternative forums and combinations thereof. As used herein the word illustrative is used expansively to refer to embodiments that serve as examples or illustrations. The figures are not necessarily to scale and some features may be exaggerated or minimized to show details of particular components. Specific structural and functional details disclosed herein are not to be interpreted as limiting.

Although this disclosure refers to a tablet it should be appreciated that the embodiments described herein may be applicable to any mobile computing device having built in sensors such as a gyroscope. A gyroscope measures a rate of rotation of a device such as a mobile computing device in rad s around each of the three physical axes x y and z . A gyroscope may be used by a rotation detection application to detect spin turn etc. of the mobile computing device.

The Windows architecture operates in two modes. These two modes are represented in as the kernel mode and the user mode . The user mode includes user applications such as Win32 applications Windows 3.1 MS DOS POSIX OS 2 applications etc. The applications may also include various other user applications e.g. applications to read data from sensors built into the computing device such as an application to read gyroscope data. Although shown as being separate from the user mode for ease of understanding it should be appreciated that the applications are included in the user mode .

The user mode may also include a Windows Application Programming Interface API not shown for simplicity of illustration . The Windows API may provide access to services such as sensor services control services and metro shortcut services.

In the user mode software is not able to access the hardware directly. Access to hardware is provided to the user mode via the kernel mode . In the kernel mode software is able to access the hardware and system data as well as access all other system resources including sensors.

The kernel mode may include exported driver support routines including the operating system kernel also referred to as the microkernel file system drivers other kernel mode drivers such as a sensor driver and a Windows hardware abstraction layer HAL . The file system drivers and the other kernel mode drivers enable the kernel layer to interact with the hardware layer via the Windows hardware abstraction layer.

Although not shown in the interest of simplicity of illustration it should be appreciated that the kernel mode may also include additional components e.g. executive layer components. These components may include components that implement memory management process and thread management security I O interprocess communication and other base operating system services.

The Windows hardware abstraction layer includes code associated with the Windows operating system that changes with the hardware that the operating system is being run on. Thus it is compatible with multiple processor platforms. The Windows hardware abstraction layer manipulates the hardware directly.

The hardware layer includes physical hardware including e.g. a hard drive for storing data a processor for executing applications and a memory which may include an operating system which controls scheduling of tasks and access to system resources. The physical hardware also includes sensors such as a gyroscope.

The Android architecture depicted in represents a virtual operating system that is launched by executing be a Windows application which may be referred to as virtual software or a hypervisor. Executing the hypervisor creates an instance of a virtual machine on which a guest operating system e.g. an Android OS can be run in a manner that is transparent to the end user. The hypervisor operates in the user mode and cannot access hardware directly. Thus a hypervisor driver is included in the kernel mode to provide low level hardware access for the Android OS for execution of machine level instructions.

As shown in the Android OS includes a software stack including an applications layer an application framework layer a libraries layer a hardware abstraction layer HAL and a kernel layer . The applications layer includes various applications which may be written in JAVA.

The application framework is used by developers to access framework application programming interfaces APIs and manage the basic functions of a mobile device laptop or tablet on which Android is executed such as resource allocation switching between processes or programs phone applications and keeping track of the physical location of the phone laptop tablet. The application framework includes various managers including an activity manager a window manager a content provider manager a view system manager a package manager a telephony manager a resource manager a location manager and a notification manager.

The library layer includes libraries written e.g. in C C etc. and is used by various systems. The libraries instruct the device executing Android how to handle different kinds of data and are exposed to Android developers via the application framework . Libraries may include e.g. a surface manager a media framework library an SQLite library an Open GL ES library a Free Type library a WebKit library an SGL library an SSL library and an libc library.

An Android runtime layer which includes a set of core libraries and a Dalvik Virtual Machine DVM may also be located in the library layer . The runtime layer includes the set of base libraries that are required for JAVA libraries.

The hardware abstraction layer provides a standard way to create software hooks in between the Android platform stack and the hardware . The hardware abstraction layer also acts as an abstraction layer between the hardware and the rest of the software stack.

The Linux kernel layer includes Android memory management programs security settings power management software and several drivers such as the device driver for hardware file system access networking and inter process communication.

According to an illustrative embodiment a request from a Windows application e.g. application is routed to the driver in the kernel mode which accesses the hardware . In general an Android application running on an Android device that uses a sensor reads the sensor data using the Linux drivers of the Android device.

However as noted above when DUOS is launched from within the Windows OS the Android OS is run in the Windows OS as a process. Any attempt by an Android application to access the hardware through the Linux drivers in such a device would be transparent to the Windows OS because such access is outside of the scope of the Windows OS. Thus a request for data from an Android application would not be sent from the HAL to the Linux kernel as represented by the X in and the Linux kernel drivers would be unable to fulfill the request. This would result in an undefined state or malfunctioning of the hardware 

According to an illustrative embodiment a request for access to the hardware by an Android application such as a request from the motion detection application or other Android application to read gyroscope data is not routed to the Linux kernel . Rather the request is routed to the Windows application via the application framework the libraries the HAL and a data channel . The data channel may be implemented with a bus a pipe a message queue a file a shared memory a socket etc. The data channel enables a request from an Android application to be relayed to the application .

The application is an application associated with the Windows OS which is executed by the processor in a user mode layer associated with the host Windows OS. Through the application applications of the Android operating system are able to access the hardware and system data of the Windows OS including a built in sensor such as n gyroscope.

The request received via the data channel is forwarded from the Windows application to a driver in the kernel mode such as the gyroscope driver . The driver in turn accesses the hardware including e.g. the accelerator via a hardware abstraction layer of the Windows OS. The gyroscope data is read and sent back to the Windows application via the driver in the kernel mode . The gyroscope data is in turn sent to the Android application that requested the gyroscope data via the data channel the HAL the libraries and the application framework . Once the gyroscope data is made available to the HAL the other higher level layers including the libraries and the application framework work as expected.

As noted above the architecture may be included in a device such as a tablet. However the architecture may also be included in other devices e.g. a workstation a telephone a desktop computer a laptop a notebook computer a server a handheld computer a media playing device a gaming system a mobile computing device or any other type and or form of computing telecommunications or media device that is capable of communication.

The computing device also includes a physical hard drive . The processor communicates with the memory and the hard drive via e.g. an address data bus not shown . The processor can be any commercially available or custom microprocessor. The memory is is representative of the overall hierarchy of memory devices containing the software and data used to implement the functionality of the device . The memory can include but is not limited to the following types of devices processor registers processor cache RAM ROM PROM EPROM EEPROM flash memory SRAMD DRAM other volatile memory forms and non volatile semi permanent or permanent memory types excluding propagating signals. For example the memory may include tape based media optical media solid state media hard disks combinations thereof and the like.

As shown in the memory may include several categories of software and data used in the device including applications a database an operating system OS and input output I device drivers . The applications include various programs that implement the various features of the device including e.g. a hypervisor for emulating physical hardware to a virtual operating system acting a guest operating system e.g. the Android OS. The applications may also include user applications e.g. an application for requesting gyroscope data and other applications. The memory may also include services which may be considered a special category of applications .

As will be appreciated by those skilled in the art the OS may include code for any operating system for use with a data processing system e.g. a Windows OS. According to an illustrative embodiment the Windows OS is the run as the host operating system while an Android OS is run as a virtual operating system acting as a guest of the host operating system. The Android OS is launched by executing a hypervisor application. The Android OS may be stored as a file within the memory . The Android OS file is emulated as a hard disk for the guest operating system. Running the Android OS using virtualization ensures that portions of the Android OS that need to run in a system mode e.g. the kernel and the device driver are run in the system mode of the host OS in this case the Windows OS .

The I O device drivers may include various routines accessed through the OS by the applications to communicate with devices and certain memory components. According to an illustrative embodiment the device drivers may include e.g. a driver for accessing a gyroscope not shown in for simplicity of illustration .

The applications can be stored in the memory and or in a firmware not shown as executable instructions and can be executed by the processor . The database represents the static and dynamic data used by the applications the OS the I O device drivers and other software programs that may reside in the memory.

It should be understood that and the description above are intended to provide a brief general description of a suitable environment in which the various aspects of some embodiments of the present disclosure can be implemented. While the description refers to computer readable instructions the present disclosure also can be implemented in combination with other program modules and or as a combination of hardware and software in addition to or instead of computer readable instructions. The term application or variants thereof is used expansively herein to include routines program modules programs components data structures algorithms and the like. Applications can be implemented on various system configurations including single processor or multiprocessor systems minicomputers mainframe computers personal computers hand held computing devices microprocessor based programmable consumer electronics combinations thereof and the like. The terminology computer readable media computer readable storage device and variants thereof as used in the specification and claims can include storage media. Storage media can include volatile and or non volatile removable and or non removable media such as for example RAM ROM EEPROM flash memory or other memory technology CDROM DVD or other optical disk storage magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store information excluding propagating signals.

Referring to a request for gyroscope data is generated at step by an application associated with the guest operating system e.g. the rotation detection application . The guest operating system is a virtual operating system executing as a guest of the host operating system. At step the request is sent to hardware abstraction layer associated with the guest operating system e.g. the hardware abstraction layer . At step the request is sent from the hardware abstraction layer to an application associated with the host operating system e.g. the application . The request may be sent via a data channel . At step the request is sent from the application associated with the host operating system to a driver executing within a kernel of the host operating system e.g. the driver . At step the requested gyroscope data is retrieved from a gyroscope associated with the hardware .

At step the retrieved gyroscope data is provided to the driver e.g. the driver . At the retrieved gyroscope data is provided from the driver to the application associated with the host operating system e.g. the application . At step the retrieved gyroscope data is sent from the application associated with the host operating system to the hardware abstraction layer associated with the guest operating system e.g. the hardware abstraction layer . At step the retrieved gyroscope data is sent to the application of the guest operating system that sent the request e.g. the rotation detection application .

Although not shown it should be appreciated that a request from an application associated with the host operating system e.g. the Windows OS for accessing resources associated with the host operating system may be fulfilled in a conventional way e.g. by routing the request from a driver to the hardware via the Windows hardware abstraction layer and fulfilling the request via the hardware abstraction layer and the driver.

The law does not require and it is economically prohibitive to illustrate and teach every possible embodiment of the present claims. Hence the above described embodiments are merely exemplary illustrations of implementations set forth for a clear understanding of the principles of the invention. Variations modifications and combinations may be made to the above described embodiments without departing from the scope of the claims. All such variations modifications and combinations are included herein by the scope of this disclosure and the following claims.

