---

title: Dynamic web services system and method
abstract: A Dynamic Web Service server may facilitate custom Enterprise Application interface development with little or no developer input by dynamically creating a web service for performing a particular transaction according to a transaction map. An Enterprise Application client device may create a transaction map by “recording” a transaction between an Enterprise Application client and an Enterprise Application server and mapping transaction fields to a custom interface generated to collect data for re-performing the recorded transaction. The Enterprise Application client device may call the dynamic web service, and the Dynamic Web Service server may then perform the recorded transaction using input data collected in the custom interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09373094&OS=09373094&RS=09373094
owner: Winshuttle, LLC
number: 09373094
owner_city: Bothell
owner_country: US
publication_date: 20140217
---
This application is a continuation of U.S. patent application Ser. No. 13 016 704 filed Jan. 28 2011 titled DYNAMIC WEB SERVICES SYSTEM AND METHOD and naming inventors Vishal Chalana et al. application Ser. No. 13 016 704 claims the benefit of priority to U.S. Provisional Application No. 61 334 099 filed May 12 2010 titled DYNAMIC WEB SERVICES SYSTEM AND METHOD and naming inventors Vishal Chalana et al. The above cited applications are incorporated herein by reference in their entireties for all purposes.

The present invention relates to databases and more particularly to methods of defining and providing dynamic web services for automating database transactions.

Enterprise resource planning ERP systems are designed to coordinate some or all of the resources information and activities needed to complete business processes. An ERP system may support business functions including some or all of manufacturing supply chain management financials projects human resources customer relationship management and the like.

Many ERP systems provide a native application programming interface API that developers may use to read write update and or remove data objects on the database level. Some ERP systems may also provide a native API that developers may use for observing automating and or emulating user interactions with the ERP system such as through a graphical user interface GUI . For example ERP Servers provided by SAP AG of Weinheim Germany typically expose a native API via remote function calls RFC . An RFC is a procedure for data interchange typically via a TCP IP connection between a client typically an SAP client and a server typically an SAP server .

In addition some ERP systems may expose some or all of a native API as a general purpose static web service which can be accessed over a network such as the Internet and executed on a remote system hosting the requested services. When using such a web service clients and servers commonly communicate over the Hypertext Transfer Protocol HTTP protocol.

There are several web service variants. In one variant which has been popular with traditional enterprise clients and servers communicate via Extensible Markup Language XML messages that follow the Simple Object Access Protocol SOAP standard. In such systems there is often a machine readable description of the operations offered by the service written in the Web Services Description Language WSDL .

Another web service variant conforms to Representational State Transfer REST constraints and uses HTTP methods such as PUT GET DELETE and POST instead of SOAP messages. RESTful web services may or may not use WSDL definitions and or XML or JavaScript Object Notation JSON messages.

Using native APIs such as those described above it is often possible for developers to create custom forms and or program custom clients to enable users to perform specific transactions with the ERP system. However it can be difficult and or expensive to have developers implement custom interfaces for interacting with an ERP system via a native API even an API that is exposed via a web service. Consequently many businesses must maintain an expensive information technology department and or use expensive outside consultants to facilitate custom ERP interface development.

The detailed description that follows is represented largely in terms of processes and symbolic representations of operations by conventional computer components including a processor memory storage devices for the processor connected display devices and input devices. Furthermore these processes and operations may utilize conventional computer components in a heterogeneous distributed computing environment including remote file Servers computer Servers and memory storage devices. Each of these conventional distributed computing components is accessible by the processor via a communication network.

Reference is now made in detail to the description of the embodiments as illustrated in the drawings. While embodiments are described in connection with the drawings and related descriptions there is no intent to limit the scope to the embodiments disclosed herein. On the contrary the intent is to cover all alternatives modifications and equivalents. In alternate embodiments additional devices or combinations of illustrated devices may be added to or combined without limiting the scope to the embodiments disclosed herein.

According to various embodiments as described below a Dynamic Web Service DWS server may facilitate custom Enterprise interface development with little or no developer input by dynamically creating a web service for performing a particular transaction according to a transaction map created by recording a transaction between an ERP client and an ERP server.

In various embodiments network may include the Internet a local area network LAN a wide area network WAN and or other data network. In other embodiments DWS Server and ERP Server may communicate with one another via a channel other than network . For example DWS Server and ERP Server may be connected via a SAN a high speed serial bus and or via other suitable communication technology. In many embodiments there may be multiple client devices . In some embodiments DWS Server and ERP Server may communicate with one another via a private network a secure network and or a secure portion of network .

The DWS Server also includes a processing unit a memory and an optional display all interconnected along with the network interface via a bus . The memory generally comprises a random access memory RAM a read only memory ROM and a permanent mass storage device such as a disk drive. The memory stores program code for dynamic web service publish routine and dynamic web service routine . In addition the memory also stores an operating system . These software components may be loaded from a computer readable storage medium into memory of the DWS Server using a drive mechanism not shown associated with a computer readable storage medium such as a floppy disc tape DVD CD ROM drive memory card or the like. In some embodiments software components may also be loaded via the network interface rather than via a computer readable storage medium .

DWS Server also communicates via bus with DWS data store . In various embodiments bus may comprise a storage area network SAN a high speed serial bus and or via other suitable communication technology. In some embodiments DWS Server may communicate with DWS data store via network interface .

Although an exemplary DWS Server has been described that generally conforms to conventional general purpose computing devices an DWS Server may be any of a great number of devices capable of communicating with the network and or ERP Server for example a personal computer a game console a set top box a handheld computer a cell phone or any other device that is capable of providing web services and communicating via a native API with ERP Server .

The Client Device also includes a processing unit a memory and a display all interconnected along with the network interface via a bus . The memory generally comprises a random access memory RAM a read only memory ROM and a permanent mass storage device such as a disk drive. The memory stores program code for record map publish routine and dynamic web service consumption routine . In addition the memory also stores an operating system as well as an ERP client a DWS client and a custom Transaction client see discussed below . These software components may be loaded from a computer readable storage medium into memory of the Client Device using a drive mechanism not shown associated with a computer readable storage medium such as a floppy disc tape DVD CD ROM drive memory card or the like. In some embodiments software components may also be loaded via the network interface rather than via a computer readable storage medium .

Although an exemplary Client Device has been described that generally conforms to conventional general purpose computing devices an Client Device may be any of a great number of devices capable of communicating with the network and or ERP Server for example a personal computer a game console a set top box a handheld computer a cell phone or any other device that is capable of accessing a accessing web services.

For example as illustrated in a user may in one embodiment define and perform a transaction using an SAP client such as SAPgui . In the exemplary transaction illustrated in the user is updating SAP data using a Material Number field a Material Description field a Gross Weight field a Weight Unit field and a Net Weight field . Although the exemplary transaction illustrated herein uses SAP s ERP system in other embodiments equivalent procedures may be used to implement equivalent functionality in other ERP systems.

Referring again to once the transaction is defined ERP client performs the transaction sending one or more transaction requests to ERP Server using a native API provided by the ERP Server . In response ERP Server returns one or more transaction results e.g. a list of updated fields status message s log data responsive data and the like . For example in one embodiment ERP client e.g. SAPgui communicates with ERP Server e.g. an SAP server via one or more RFCs. In other embodiments ERP Server may expose a native API as a web service in which case ERP client may communicate with ERP Server via SOAP messages XML messages data JSON data or the like.

As the user defines and performs the transaction DWS client monitors the user s activities in ERP client and or monitors the ERP client s communications with ERP Server . Using data thereby collected DWS client records and maps the transaction that was defined and performed in ERP client .

For example as illustrated in in one embodiment a DWS client such as transactionSHUTTLE provided by Winshuttle Inc. of Bothell Wash. the assignee of this application may record and map the transaction. As illustrated in transactionSHUTTLE has recorded the exemplary transaction as defined according to and the user has mapped the Material Number field the Material Description field the Gross Weight field the Weight Unit field and the Net Weight field to XML sources indicating that when the recorded transaction is re played at a later time values for these fields will be provided by XML data. In other embodiments one or more of the fields may be mapped to an alternate data source such as a spreadsheet column or database field.

Referring again to once the transaction is recorded and mapped DWS client sends a publish transaction request to DWS Server . In response DWS Server creates a dynamic web service for the recorded transaction including automatically generating a description of the dynamic web service and returns an identifier for the created dynamic web service.

For example as illustrated in transactionSHUTTLE has requested that the exemplary transaction as defined according to be published as a dynamic web service. The publication request includes a unique method name for the dynamic web service an SAP authentication file and a publish request URL at the DWS Server . Also illustrated is the dynamic web service identifier here an URL for a WSDL XML schema corresponding to the newly created dynamic web service that was returned by DWS Server .

Referring again to once the transaction has been published as a dynamic web service DWS client provides the dynamic web service identifier to a custom Transaction client which uses the identifier to request a description of the identified dynamic web service from DWS Server . DWS Server returns the requested description . Using the received dynamic web service description Transaction client generates a custom interface for providing input data for the recorded transaction.

For example as illustrated in a forms authoring tool such as LiveCycle Designer provided by Adobe Systems Incorporated of Mountain View Calif. can parse the WSDL XML schema describing the exemplary recorded transaction as defined according to and automatically generate a form having fields linked to the appropriate inputs used by the dynamic web service. For example the form illustrated in has automatically generated fields for the Material Number field the Material Description field the Gross Weight field the Weight Unit field and the Net Weight field . The form illustrated in also has an automatically generated control for performing the transaction and an automatically generated field for displaying output from performing the transaction if any . In many embodiments a user may further customize the automatically generated form such as by providing user friendly names rearranging and or resizing form fields and the like.

In other embodiments other forms authoring tools may be employed to at least partially automatically generate a form having fields linked to the appropriate inputs used by the dynamic web service. For example in various embodiments a form may be generated using a tool such as Microsoft InfoPath forms provided by Microsoft Corporation of Redmond Wash. a Windows Forms application such as Microsoft Visual Studio also provided by Microsoft Corporation of Redmond Wash. a mobile forms builder such as Canvas provided by Canvas Solutions Inc. of Herndon Va. and or a web form builder such as Oracle Application Express APEX provided by Oracle Corporation of Redwood Shores Calif.

Referring again to once the custom Transaction client has generated a custom interface for providing input data for the recorded transaction Transaction client obtains input data from a user and sends a dynamic web service invocation to DWS Server . DWS Server identifies the recorded transaction corresponding to the dynamic web service invocation transforms the dynamic web service invocation into one or more transaction requests and sends the one or more transaction requests to ERP Server via a native ERP API. ERP Server returns transaction results if any via the native ERP API and DWS Server sends the transaction results if any to Transaction client .

For example as illustrated in a form presentation tool such as Acrobat Reader or Acrobat Pro provided by Adobe Systems Incorporated of Mountain View Calif. can obtain data from a user for fields in a form automatically generated as described herein. For example as illustrated in a user has filled in the form entering values for the Material Number field the Material Description field the Gross Weight field the Weight Unit field and the Net Weight field . The user has invoked control for performing the transaction and the form invoked the corresponding dynamic web service sending appropriately formatted XML data to DWS Server which transformed the dynamic web service request into one or more native API transactions with ERP Server . Transaction results are displayed in field .

Although the exemplary Transaction client is illustrated as a Portable Document Format PDF form in other embodiments any client that supports web services can be used including Microsoft InfoPath forms provided by Microsoft Corporation of Redmond Wash. a Windows Forms application such as Microsoft Visual Studio also provided by Microsoft Corporation of Redmond Wash. and or a HyperText Markup Language Adobe Flash or other web based front end that can be called from a web enabled computer or mobile device. In some embodiments a Transaction client may be deployed on a mobile device such as a mobile phone PDA tablet game console or the like which may or may not be the same device on which the transaction was originally recorded.

In block routine maps data sources and or data sinks if any involved in the recorded transaction. For example in some embodiments ERP Server may return a list of fields involved in the transaction or other metadata about the transaction. In some embodiments routine may observe the user interacting with particular fields in the ERP client process . In some embodiments routine may solicit mapping information from a user accepting user input to create mappings between particular input and or output fields involved in the transaction and external data sources and or data sinks e.g. XML data spreadsheet data database data and the like . In some embodiments one or more of the fields involved in the transaction may not be mapped to an external source but the data provided during the original transaction recording is treated as static data for that field.

In called routine block routine calls a remote publish routine see discussed below at DWS Server to have the recorded and mapped transaction published as a dynamic web service. For example in one embodiment DWS Server may provide a static Publish web service that routine can use to have the recorded mapped transaction published as a dynamic web service.

In some embodiments called routine returns a dynamic service description and or a dynamic service description identifier e.g. a WSDL XML schema describing the dynamic web service and or an URL for such a WSDL file and in block routine stores at least transiently the dynamic service description and or a dynamic service description identifier. Routine ends in block .

Using the recorded transaction map in block routine automatically generates a description framework for a new dynamic web service corresponding to the recorded transaction. For example in one embodiment routine generates a framework for a WSDL XML schema such as that partially illustrated in discussed above. In some embodiments routine may store the description framework in DWS data store . In block routine determines if need be and stores a new service identifier for the dynamic web service that will correspond to the recorded transaction map. In some embodiments routine may store the service identifier in DWS data store . For example for the exemplary transaction illustrated in discussed above routine may store the unique dynamic web service identifier ChangeMaterial see field above .

In block routine identifies one or more input fields that have been mapped to one or more external data sources. Beginning in block routine processes each identified mapped input field. In block routine defines an input for the dynamic web service corresponding to the current mapped input field. In block routine stores the defined input in the service description framework. In block routine cycles back to block to process the next mapped input field if any .

For example for the exemplary transaction illustrated in discussed above routine may identify an input field mapped to a Material Number data source e.g. field in and generate and store a corresponding input element in a WSDL XML schema e.g. element in . Similarly for the exemplary transaction routine may further identify mapped input fields as illustrated in and generate elements as illustrated in .

Having generated and stored an identifier and description for a new dynamic web service corresponding to a recorded transaction map in block routine stores completed dynamic web service description for example in DWS data store . In some embodiments routine may also obtain and store additional data and or files such as ERP authentication credentials see e.g. field .

Routine ends in bock making available at least one of the identifier and the description e.g. to the calling routine which may be a remote process on a client device e.g. Client . For example in one embodiment routine may return an URL containing the unique dynamic web service identifier. In one embodiment this URL simply returns the dynamic web service description stored in block e.g. a WSDL XML Schema to a requestor. For example if the unique dynamic web service identifier is CreateMaterial then in one embodiment the returned URL may take the following form http abc.com winshuttleserver Service.svc CreateMaterial WSDL . Since the dynamic web service identifier is unique this URL is also unique and specific to the published service.

In block routine determines one or more service inputs mapped to one or more external data sources in the dynamic service description. Beginning in block routine processes each identified service input. In block routine obtains input data corresponding to the current service input. In block routine cycles back to block to process the next service input if any .

For example for the exemplary transaction illustrated in discussed above routine may identify a service input mapped to a Material Number data source e.g. element in obtain corresponding input from a user e.g. via form field in . Similarly for the exemplary transaction routine may further identify service inputs as illustrated in and obtain inputs via corresponding form fields as illustrated in .

In block routine packages the obtained input data according to the obtained dynamic service description. For example in one embodiment routine packages the input data into XML according to the WSDL service description. In some embodiments routine packages the input data into an XML SOAP message according to the WSDL service description.

In called routine block see discussed below routine passes the packaged data to the dynamic web service corresponding to the obtained dynamic web service description. In some embodiments called routine is a remote process that routine invokes on DWS Server by calling a static Run web service passing in as parameters a dynamic web service identifier and the corresponding packaged data.

In block routine receives output from the invoked dynamic web service if any . For example in some embodiments the dynamic web service may return log information and or requested data structures. Routine ends in block .

In block routine determines an identifier corresponding to the indicated dynamic web service. For example in one embodiment routine may determine a dynamic web service identifier passed in as a parameter to a static web service.

In block routine obtains metadata corresponding to the identified dynamic web service. For example in one embodiment routine obtains metadata from a metadata library in DWS data store . In some embodiments the obtained metadata includes information from a recorded transaction map. In some embodiments the obtained metadata may also include ERP authentication credentials.

In block routine obtains a package of input data in a first data format. For example in one embodiment routine obtains XML and or SOAP data corresponding to one or more input fields.

In block routine parses the input data package according to the obtained dynamic web service metadata and if necessary in block routine repackages the input data into a second data format according to the dynamic web service metadata. For example in one embodiment routine repackages XML and or SOAP data structures into one or more packages of data structured so as to comply with an RFC calling mechanism used to communicate via a native API with ERP Server .

In block using the obtained dynamic web service metadata routine determines one or more remote native ERP API calls corresponding to the invoked dynamic web service. For example in one embodiment routine may determine one or more RFC calls that were recorded between an ERP client and ERP Server .

In block routine invokes the one or more remote native ERP API calls on ERP Server using the repackaged input data in place of the input data originally provided in the recorded transaction. In some embodiments routine may essentially mimic the behavior of the ERP client from which the transaction was originally recorded using RFC to invoke the ERP Server s native ERP API. In other embodiments routine may use a native ERP web service API to perform the recorded transaction with the newly provided input data.

In block routine receives output data from the remotely invoked native ERP API calls if any . In block routine packages the output data into one or more output structures if any identified in the dynamic web service metadata. In block routine ends making available the packaged output structures if any e.g. to the calling remote process.

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that a whole variety of alternate and or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. For example although the description above refers to embodiments involving enterprise resource planning systems other embodiments may be similarly used in other types of enterprise application systems in which a transaction between an enterprise client and an enterprise server may be recorded and mapped as variously described above. For example the systems and methods described herein may be used in connection with enterprise systems such as customer relationship management CRM systems accounting systems supply chain management systems and the like. This application is intended to cover any adaptations or variations of the embodiments discussed herein.

