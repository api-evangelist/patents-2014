---

title: Providing a security mechanism on a mobile device
abstract: Disclosed are methods, apparatus, systems, and computer program products for providing a security mechanism on a mobile device before performing an action on a database record in an on-demand database service. The action to be performed can be identified for requesting third-party information. When the third-party information is provided by a user who does not have authorization to access data locally or remotely from the mobile device, the action is performed on the database record but the security mechanism can be activated for display on the mobile device. When the security mechanism is traversed, the mobile device can be unlocked and a user can access the database record in the on-demand database service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09544307&OS=09544307&RS=09544307
owner: salesforce.com, inc.
number: 09544307
owner_city: San Francisco
owner_country: US
publication_date: 20141029
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

This patent document relates generally to data security and more specifically to techniques for activating a security mechanism on a mobile device prior to performing an action on a database record in a database system associated with an on demand database service.

 Cloud computing services provide shared resources software and information to computers and other devices upon request. In cloud computing environments software can be accessible over the Internet rather than installed locally on in house computer systems. Cloud computing typically involves over the Internet provision of dynamically scalable and often virtualized resources. Technological details can be abstracted from the users who no longer have need for expertise in or control over the technology infrastructure in the cloud that supports them.

Database resources can be provided in a cloud computing context. However using conventional database management techniques it is difficult to know about the activity of other users of a database system in the cloud or other network. For example the actions of a particular user such as a salesperson on a database resource may be important to the user s boss. The user can create a report about what the user has done and send it to the boss but such reports may be inefficient not timely and incomplete. Also it may be difficult to identify other users who might benefit from the information in the report.

Examples of systems apparatus devices and methods according to the disclosed implementations are described in this section. These examples are being provided solely to add context and aid in the understanding of the disclosed implementations. It will thus be apparent to one skilled in the art that implementations may be practiced without some or all of these specific details. In other instances certain process method operations also referred to herein as blocks have not been described in detail in order to avoid unnecessarily obscuring implementations. Other applications are possible such that the following examples should not be taken as definitive or limiting either in scope or setting.

In the following detailed description references are made to the accompanying drawings which form a part of the description and in which are shown by way of illustration specific implementations. Although these implementations are described in sufficient detail to enable one skilled in the art to practice the disclosed implementations it is understood that these examples are not limiting such that other implementations may be used and changes may be made without departing from their spirit and scope. For example the blocks of methods shown and described herein are not necessarily performed in the order indicated. It should also be understood that the methods may include more or fewer blocks than are indicated. In some implementations blocks described herein as separate blocks may be combined. Conversely what may be described herein as a single block may be implemented in multiple blocks.

Various implementations described or referenced herein are directed to different methods apparatus systems devices and computer readable storage media for providing a security mechanism on a mobile device. More and more computing devices are moving from the desktop environment to mobile device environments. Mobile devices are increasingly relied upon for accessing information and getting work done. Mobile devices may store large amounts of data and may be capable of accessing greater amounts of data across a network. However because such devices are more mobile and have a small form factor mobile devices may be vulnerable to theft or unauthorized access. Accordingly providing adequate data security against theft or unauthorized access is increasingly becoming more important.

Users may perform actions to create or update database records in a database system associated with an on demand database service. The on demand database service may be part of a platform and each of the actions may perform certain functions within the platform. An example of a platform with suitable capabilities can include Salesforce1 . The platform can integrate various services and APIs where each action may be performed using the platform s API and the action s associated method call without having to be redefined for each user system e.g. mobile phone laptop tablet etc. .

In some implementations the action to be performed can be identified for receiving third party information where the third party information can include information provided from a user not associated with the mobile device. The action is performed on the database record using the third party information. In such instances the mobile device may be given to a user not authorized to access data on the mobile device or data stored in a database system of an on demand database service where the database system is associated with an authorized user. Access to such local or network data may be disabled by activating a security mechanism. The security mechanism restricts access to data on the mobile device.

By way of an example a field agent may be deployed to a customer site. The field agent may desire to update the status of a service request but completion of the service request may require a signature from the customer. The field agent can hand her mobile phone to the customer and the customer can enter her signature. The status of the service request can be updated with the signature. If the customer wishes to advance to another screen by exiting the signature interface a security mechanism on the mobile phone can be activated. The security mechanism can require an alpha numeric password a graphical password a motion based password or a biometric input. That way local and network data on the mobile phone may be secured against unauthorized access during the process of collecting the customer s signature.

In some implementations an on demand database service can include an enterprise social networking system. One example of an enterprise social networking system is Chatter provided by salesforce.com inc. of San Francisco Calif. Online social networks are increasingly becoming a common way to facilitate communication among people and groups of people any of whom can be recognized as users of a social networking system. Some online social networks can be implemented in various settings including organizations e.g. enterprises such as companies or business partnerships academic institutions or groups within such an organization. For instance Chatter can be used by employee users in a division of a business organization to share data communicate and collaborate with each other for various purposes.

In some online social networks users can access one or more information feeds which include information updates presented as items or entries in the feed. Such a feed item can include a single information update or a collection of individual information updates. A feed item can include various types of data including character based data audio data image data and or video data. An information feed can be displayed in a graphical user interface GUI on a display device such as the display of a computing device as described below. The information updates can include various social network data from various sources and can be stored in an on demand database service environment. In some implementations the disclosed methods apparatus systems and computer readable storage media may be configured or designed for use in a multi tenant database environment.

In some implementations an online social network may allow a user to follow data objects in the form of records such as cases accounts or opportunities in addition to following individual users and groups of users. The following of a record stored in a database as described in greater detail below allows a user to track the progress of that record. Updates to the record also referred to herein as changes to the record are one type of information update that can occur and be noted on an information feed such as a record feed or a news feed of a user subscribed to the record. Examples of record updates include field changes in the record updates to the status of a record as well as the creation of the record itself. Some records are publicly accessible such that any user can follow the record while other records are private for which appropriate security clearance permissions are a prerequisite to a user following the record.

Information updates can include various types of updates which may or may not be linked with a particular record. For example information updates can be user submitted messages or can otherwise be generated in response to user actions or in response to events. Examples of messages include posts comments indications of a user s personal preferences such as likes and dislikes updates to a user s status uploaded files and hyperlinks to social network data or other network data such as various documents and or web pages on the Internet. Posts can include alpha numeric or other character based user inputs such as words phrases statements questions emotional expressions and or symbols. Comments generally refer to responses to posts such as words phrases statements answers questions and reactionary emotional expressions and or symbols. Multimedia data can be included in linked with or attached to a post or comment. For example a post can include textual statements in combination with a JPEG image or animated image. A like or dislike can be submitted in response to a particular post or comment. Examples of uploaded files include presentations documents multimedia files and the like.

Users can follow a record by subscribing to the record as mentioned above. Users can also follow other entities such as other types of data objects other users and groups of users. Feed tracked updates regarding such entities are one type of information update that can be received and included in the user s news feed. Any number of users can follow a particular entity and thus view information updates pertaining to that entity on the users respective news feeds. In some social networks users may follow each other by establishing connections with each other sometimes referred to as friending one another. By establishing such a connection one user may be able to see information generated by generated about or otherwise associated with another user. For instance a first user may be able to see information posted by a second user to the second user s personal social network page. One implementation of such a personal social network page is a user s profile page for example in the form of a web page representing the user s profile. In one example when the first user is following the second user the first user s news feed can receive a post from the second user submitted to the second user s profile feed also referred to herein as the user s wall which is one example of an information feed displayed on the user s profile page.

In some implementations an information feed may be specific to a group of users of an online social network. For instance a group of users may publish a news feed. Members of the group may view and post to this group feed in accordance with a permissions configuration for the feed and the group. Information updates in a group context can also include changes to group status information.

In some implementations when data such as posts or comments input from one or more users are submitted to an information feed for a particular user group object or other construct within an online social network an email notification or other type of network communication may be transmitted to all users following the user group or object in addition to the inclusion of the data as a feed item in one or more feeds such as a user s profile feed a news feed or a record feed. In some online social networks the occurrence of such a notification is limited to the first instance of a published input which may form part of a larger conversation. For instance a notification may be transmitted for an initial post but not for comments on the post. In some other implementations a separate notification is transmitted for each such information update.

A publisher may be displayed in a GUI of a display device and configured to publish information to a feed. Typically a publisher may be capable of posting messages and attaching files to the feed. The feed may be associated with an entity such as a user group organization or record. The publisher may provide a user with an operable interface for receiving data entry and performing actions on a record. Thus the publisher also may be capable of creating new records updating existing records or otherwise interacting with records associated with a parent record. For example a publisher can include one or more publisher actions configured to create update or otherwise interact with a record. The publisher may include one or more data fields for entering information to perform any of the aforementioned actions on the record. In some implementations the record can be a customer relationship management CRM object such as a lead a case an account an opportunity a task a contact a campaign a contract an event a custom object and a Visualforce page. For example a new contact record can be created from the publisher and published to a feed for an account record where the contact record is a child record and account record is a parent record. In some implementations the publisher can include one or more publisher actions configured to interact with an application such as an application hosted on a third party platform.

In some instances a feed item is created upon performing an interaction with the record and the feed item may include one or more selectable links. The one or more selectable links may provide a reference to the record. In some implementations selection of one of the selectable links may cause the publisher to be operable to receive additional information and or perform additional operations on the record. This can be useful in efficiently advancing CRM as well as non CRM lifecycles through the publisher and feed.

The feed item may be presented for inclusion in a feed such as a feed of a parent record of the child record being acted upon. The feed item may be characterized as a child of the parent entity in a hierarchical data model. Applying some of the disclosed techniques the feed item can be propagated and cross referenced for display not only in the feed of the parent entity but also in other related feeds. Identification of such related feeds can occur by for example a user defining values in a payload or a system administrator hard coding the values. In addition or in the alternative cross referencing rules can be embodied in code. Potential entities for cross referencing may be provided in a database table indicating record relationship information with respect to the parent entity. Once a feed of another entity other than the parent entity is identified a database can be accessed to indicate the entity as being cross referenced with the feed item. As used herein this process of identification and indication can be referred to as cross referencing. In some instances any interactions performed on a given feed item such as commenting or liking the item are also presented on every other related feed including a feed item which is cross referenced so that a single conversation thread is preserved and replicated across feeds. In some implementations the feed item parented by the parent entity can be propagated and cross referenced for access by followers of a cross referenced entity.

Some of the publisher actions can be custom actions configured to interact with a record. The custom action may be defined in accordance with custom action instructions declaratively or programmatically. The custom action instructions may define the record and the interaction to be performed with the record. The custom action instructions may also define attributes of the custom action including data fields associated with the record validation rules associated with the one or more data fields the page layout of the custom action in the publisher and the action layout of the one or more data fields in the publisher. In some instances the custom action instructions may be defined using a customization tool such as Visualforce. This allows a user or organization to make customized user interfaces to meet their business needs.

Not only can the publisher interact with records the publisher may also be configured to interact with applications. Such applications may be hosted natively in the on demand service environment or hosted on a third party platform. Custom actions may be defined to interact with the application via an API. Regardless of whether the application is hosted natively or on a third party platform the API can enable integration of the application into the on demand service environment. Interactions with the application can be updated to an information feed. Such updates may occur without refreshing the user interface.

As more and more users and organizations move toward more collaborative sharing models to communicate and conduct business there is a desire to better expose enhance and utilize information. Conventionally accessing information and interacting with information in an online social network can involve navigating and switching among several different applications and interfaces. This can be cumbersome time consuming and unproductive.

As noted above some of the implementations described herein are directed at mechanisms to provide a unified user interface that enables a user to interact with a data object or application in an online social network. Such interactions can include for example a request to create the data object a request to delete the data object a request to update the data object a request to convert the data object a request to download data from the data object a request to upload data to the data object a request to attach a file to the data object a request to view information associated with the data object and a request to otherwise perform an operation having a reference to the data object. A unified user interface may include a feed and a publisher with a custom action where the custom action is configured to perform one of the aforementioned interactions with the data object or application. Such interactions may occur via an API and published to an information feed in the form of a feed item. The feed item may be cross referenced in other related feeds to provide a single conversation thread and the feed item may have actionable selections to perform further operations on the data object. As such the publisher and the feed item become the main interface to interact with and view relevant information without the need to switch among different applications and interfaces.

These and other implementations may be embodied in various types of hardware software firmware and combinations thereof. For example some techniques disclosed herein may be implemented at least in part by computer readable media that include program instructions state information etc. for performing various services and operations described herein. Examples of program instructions include both machine code such as produced by a compiler and files containing higher level code that may be executed by a computing device such as a server or other data processing apparatus using an interpreter. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media and hardware devices that are specially configured to store program instructions such as read only memory ROM devices and random access memory RAM devices. These and other features of the disclosed implementations will be described in more detail below with reference to the associated drawings.

The term multi tenant database system can refer to those systems in which various elements of hardware and software of a database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows of data such as feed items for a potentially much greater number of customers. The term query plan generally refers to one or more operations used to access information in a database system.

A user profile or user s profile is generally configured to store and maintain data about a given user of the database system. The data can include general information such as name title phone number a photo a biographical summary and a status e.g. text describing what the user is currently doing. As mentioned below the data can include messages created by other users. Where there are multiple tenants a user is typically associated with a particular tenant. For example a user could be a salesperson of a company which is a tenant of the database system that provides a database service.

The term record generally refers to a data entity such as an instance of a data object created by a user of the database service for example about a particular actual or potential business relationship or project. The data object can have a data structure defined by the database service a standard object or defined by a user custom object . For example a record can be for a business partner or potential business partner e.g. a client vendor distributor etc. of the user and can include information describing an entire company subsidiaries or contacts at the company. As another example a record can be a project that the user is working on such as an opportunity e.g. a possible sale with an existing partner or a project that the user is trying to get. In one implementation of a multi tenant database system each record for the tenants has a unique identifier stored in a common table. A record has data fields that are defined by the structure of the object e.g. fields of certain data types and purposes . A record can also have custom fields defined by a user. A field can be another record or include links thereto thereby providing a parent child relationship between the records.

The terms information feed and feed are used interchangeably herein and generally refer to a combination e.g. a list of feed items or entries with various types of information and data. Such feed items can be stored and maintained in one or more database tables e.g. as rows in the table s that can be accessed to retrieve relevant information to be presented as part of a displayed feed. The term feed item or feed element refers to an item of information which can be presented in the feed such as a post submitted by a user. Feed items of information about a user can be presented in a user s profile feed of the database while feed items of information about a record can be presented in a record feed in the database by way of example. A profile feed and a record feed are examples of different information feeds. A second user following a first user and a record can receive the feed items associated with the first user and the record for display in the second user s news feed which is another type of information feed. In some implementations the feed items from any number of followed users and records can be combined into a single information feed of a particular user.

As examples a feed item can be a message such as a user generated post of text data and a feed tracked update to a record or profile such as a change to a field of the record. Feed tracked updates are described in greater detail below. A feed can be a combination of messages and feed tracked updates. Messages include text created by a user and may include other data as well. Examples of messages include posts user status updates and comments. Messages can be created for a user s profile or for a record. Posts can be created by various users potentially any user although some restrictions can be applied. As an example posts can be made to a wall section of a user s profile page which can include a number of recent posts or a section of a record that includes multiple posts. The posts can be organized in chronological order when displayed in a graphical user interface GUI for instance on the user s profile page as part of the user s profile feed. In contrast to a post a user status update changes a status of a user and can be made by that user or an administrator. A record can also have a status the update of which can be provided by an owner of the record or other users having suitable write access permissions to the record. The owner can be a single user multiple users or a group. In one implementation there is only one status for a record.

In some implementations a comment can be made on any feed item. In some implementations comments are organized as a list explicitly tied to a particular feed tracked update post or status update. In some implementations comments may not be listed in the first layer in a hierarchal sense of feed items but listed as a second layer branching from a particular first layer feed item.

A feed tracked update also referred to herein as a feed update is one type of information update and generally refers to data representing an event. A feed tracked update can include text generated by the database system in response to the event to be provided as one or more feed items for possible inclusion in one or more feeds. In one implementation the data can initially be stored and then the database system can later use the data to create text for describing the event. Both the data and or the text can be a feed tracked update as used herein. In various implementations an event can be an update of a record and or can be triggered by a specific action by a user. Which actions trigger an event can be configurable. Which events have feed tracked updates created and which feed updates are sent to which users can also be configurable. Messages and feed updates can be stored as a field or child object of the record. For example the feed can be stored as a child object of the record.

A group is generally a collection of users. In some implementations the group may be defined as users with a same or similar attribute or by membership. In some implementations a group feed also referred to herein as a group news feed includes one or more feed items about any user in the group. In some implementations the group feed also includes information updates and other feed items that are about the group as a whole the group s purpose the group s description and group records and other objects stored in association with the group. Threads of information updates including group record updates and messages such as posts comments likes etc. can define group conversations and change over time.

An entity feed or record feed generally refers to a feed of feed items about a particular record in the database such as feed tracked updates about changes to the record and posts made by users about the record. An entity feed can be composed of any type of feed item. Such a feed can be displayed on a page such as a web page associated with the record e.g. a home page of the record. As used herein a profile feed or user s profile feed is a feed of feed items about a particular user. In one example the feed items for a profile feed include posts and comments that other users make about or send to the particular user and status updates made by the particular user. Such a profile feed can be displayed on a page associated with the particular user. In another example feed items in a profile feed could include posts made by the particular user and feed tracked updates initiated based on actions of the particular user.

Systems apparatus and methods are provided for implementing enterprise level social and business information networking. Such implementations can provide more efficient use of a database system. For instance a user of a database system may not easily know when important information in the database has changed e.g. about a project or client. Implementations can provide feed tracked updates about such changes and other events thereby keeping users informed.

By way of example a user can update a record e.g. an opportunity such as a possible sale of 1000 computers. Once the record update has been made a feed tracked update about the record update can then automatically be provided e.g. in a feed to anyone subscribing to the opportunity or to the user. Thus the user does not need to contact a manager regarding the change in the opportunity since the feed tracked update about the update is sent via a feed right to the manager s feed page or other page.

Next mechanisms and methods for providing systems implementing enterprise level social and business information networking will be described with reference to several implementations. First an overview of an example of a database system is described and then examples of tracking events for a record actions of a user and messages about a user or record are described. Various implementations about the data structure of feeds customizing feeds user selection of records and users to follow generating feeds and displaying feeds are also described.

Environment is an environment in which an on demand database service exists. User system may be implemented as any computing device s or other data processing apparatus such as a machine or system that is used by a user to access a database system . For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of such computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is implemented in the example of as database system .

An on demand database service implemented using system by way of example is a service that is made available to outside users who do not need to necessarily be concerned with building and or maintaining the database system. Instead the database system may be available for their use when the users need the database system i.e. on the demand of the users. Some on demand database services may store information from one or more tenants into tables of a common database image to form a multi tenant database system MTS . A database image may include one or more database objects. A relational database management system RDBMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In some implementations application platform enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level also called authorization.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. Network can include a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I. The Internet will be used in many of the examples herein. However it should be understood that the networks that the present implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP signals to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the network interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least for users accessing system each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one implementation system shown in implements a web based customer relationship management CRM system. For example in one implementation system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms web pages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object in tenant data storage however tenant data typically is arranged in the storage medium s of tenant data storage so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain implementations system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. The term computing device is also referred to herein simply as a computer . User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user input devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. of the computing device in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above implementations are suitable for use with the Internet although other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one implementation each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of its components might be operator configurable using application s including computer code to run using processor system which may be implemented to include a central processing unit which may include an Intel Pentium processor or the like and or multiple processor units. Non transitory computer readable media can have instructions stored thereon in that can be executed by or used to program a computing device to perform any of the methods of the implementations described herein. Computer program code implementing instructions for operating and configuring system to intercommunicate and to process web pages applications and other data and media content as described herein is preferably downloadable and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any other type of computer readable medium or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for the disclosed implementations can be realized in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to some implementations each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to refer to a computing device or system including processing hardware and process space s an associated storage medium such as a memory device or database and in some instances a database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database objects described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to communicate with tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage spaces which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage space user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage space . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language implementations is discussed in commonly assigned U.S. Pat. No. 7 730 478 titled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE by Craig Weissman issued on Jun. 1 2010 and hereby incorporated by reference in its entirety and for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server N might be coupled via a direct network link and another application server N might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain implementations each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one implementation therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one implementation the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain implementations three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner by way of example system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain implementations user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may involve sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to some implementations. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for case account contact lead and opportunity data objects each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. Commonly assigned U.S. Pat. No. 7 779 039 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. issued on Aug. 17 2010 and hereby incorporated by reference in its entirety and for all purposes teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain implementations for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

As shown in accessing an on demand database service environment may involve communications transmitted among a variety of different hardware and or software components. Further the on demand database service environment is a simplified representation of an actual on demand database service environment. For example while only one or two devices of each type are shown in some implementations of an on demand database service environment may include anywhere from one to many devices of each type. Also the on demand database service environment need not include each device shown in or may include additional devices not shown in .

Moreover one or more of the devices in the on demand database service environment may be implemented on the same physical device or on different hardware. Some devices may be implemented using hardware or a combination of hardware and software. Thus terms such as data processing apparatus machine server and device as used herein are not limited to a single hardware device but rather include any hardware and software configured to provide the described functionality.

The cloud is intended to refer to a data network or plurality of data networks often including the Internet. Client machines located in the cloud may communicate with the on demand database service environment to access services provided by the on demand database service environment. For example client machines may access the on demand database service environment to retrieve store edit and or process information.

In some implementations the edge routers and route packets between the cloud and other components of the on demand database service environment . The edge routers and may employ the Border Gateway Protocol BGP . The BGP is the core routing protocol of the Internet. The edge routers and may maintain a table of IP networks or prefixes which designate network reachability among autonomous systems on the Internet.

In one or more implementations the firewall may protect the inner components of the on demand database service environment from Internet traffic. The firewall may block permit or deny access to the inner components of the on demand database service environment based upon a set of rules and other criteria. The firewall may act as one or more of a packet filter an application gateway a stateful filter a proxy server or any other type of firewall.

In some implementations the core switches and are high capacity switches that transfer packets within the on demand database service environment . The core switches and may be configured as network bridges that quickly route data between different components within the on demand database service environment. In some implementations the use of two or more core switches and may provide redundancy and or reduced latency.

In some implementations the pods and may perform the core data processing and service functions provided by the on demand database service environment. Each pod may include various types of hardware and or software computing resources. An example of the pod architecture is discussed in greater detail with reference to .

In some implementations communication between the pods and may be conducted via the pod switches and . The pod switches and may facilitate communication between the pods and and client machines located in the cloud for example via core switches and . Also the pod switches and may facilitate communication between the pods and and the database storage .

In some implementations the load balancer may distribute workload between the pods and . Balancing the on demand service requests between the pods may assist in improving the use of resources increasing throughput reducing response times and or reducing overhead. The load balancer may include multilayer switches to analyze and forward traffic.

In some implementations access to the database storage may be guarded by a database firewall . The database firewall may act as a computer application firewall operating at the database application layer of a protocol stack. The database firewall may protect the database storage from application attacks such as structure query language SQL injection database rootkits and unauthorized information disclosure.

In some implementations the database firewall may include a host using one or more forms of reverse proxy services to proxy traffic before passing it to a gateway router. The database firewall may inspect the contents of database traffic and block certain content or database requests. The database firewall may work on the SQL application level atop the TCP IP stack managing applications connection to the database or SQL management interfaces as well as intercepting and enforcing packets traveling to or from a database network or application interface.

In some implementations communication with the database storage may be conducted via the database switch . The multi tenant database storage may include more than one hardware and or software components for handling database queries. Accordingly the database switch may direct database queries transmitted by other components of the on demand database service environment e.g. the pods and to the correct components within the database storage .

In some implementations the database storage is an on demand database system shared by many different organizations. The on demand database system may employ a multi tenant approach a virtualized approach or any other type of database approach. An on demand database system is discussed in greater detail with reference to .

In some implementations the app servers may include a hardware and or software framework dedicated to the execution of procedures e.g. programs routines scripts for supporting the construction of applications provided by the on demand database service environment via the pod . In some implementations the hardware and or software framework of an app server is configured to execute operations of the services described herein including performance of the blocks of methods described with reference to In alternative implementations two or more app servers may be included and cooperate to perform such methods or one or more other servers described herein can be configured to perform the disclosed methods.

The content batch servers may handle requests internal to the pod. These requests may be long running and or not tied to a particular customer. For example the content batch servers may handle requests related to log mining cleanup work and maintenance tasks.

The content search servers may provide query and indexer functions. For example the functions provided by the content search servers may allow users to search through content stored in the on demand database service environment.

The file force servers may manage requests for information stored in the Fileforce storage . The Fileforce storage may store information such as documents images and basic large objects BLOBs . By managing requests for information using the file force servers the image footprint on the database may be reduced.

The query servers may be used to retrieve information from one or more file systems. For example the query system may receive requests for information from the app servers and then transmit information queries to the NFS located outside the pod.

The pod may share a database instance configured as a multi tenant environment in which different organizations share access to the same database. Additionally services rendered by the pod may call upon various hardware and or software resources. In some implementations the ACS servers may control access to data hardware resources or software resources.

In some implementations the batch servers may process batch jobs which are used to run tasks at specified times. Thus the batch servers may transmit instructions to other servers such as the app servers to trigger the batch jobs.

In some implementations the QFS may be an open source file system available from Sun Microsystems of Santa Clara Calif. The QFS may serve as a rapid access file system for storing and accessing information available within the pod . The QFS may support some volume management capabilities allowing many disks to be grouped together into a file system. File system metadata can be kept on a separate set of disks which may be useful for streaming applications where long disk seeks cannot be tolerated. Thus the QFS system may communicate with one or more content search servers and or indexers to identify retrieve move and or update data stored in the network file systems and or other storage systems.

In some implementations one or more query servers may communicate with the NFS to retrieve and or update information stored outside of the pod . The NFS may allow servers located in the pod to access information to access files over a network in a manner similar to how local storage is accessed.

In some implementations queries from the query servers may be transmitted to the NFS via the load balancer which may distribute resource requests over various resources available in the on demand database service environment. The NFS may also communicate with the QFS to update the information stored on the NFS and or to provide information to the QFS for use by servers located within the pod .

In some implementations the pod may include one or more database instances . The database instance may transmit information to the QFS . When information is transmitted to the QFS it may be available for use by servers within the pod without using an additional database call.

In some implementations database information may be transmitted to the indexer . Indexer may provide an index of information available in the database and or QFS . The index information may be provided to file force servers and or the QFS .

An example of an interface for the publisher is shown in . The publisher may include a plurality of publisher actions a publisher space a message body a publishing button and a share dropdown menu . Each of the publisher actions may be in the form of GUI buttons links tabs channels or menu items. Publisher actions may be enabled by the API for the publisher . Moreover publisher actions may be configured to perform a create or update operation for or with reference to a record. Such publisher actions may be able to perform more functionality than posting a message or attaching a file to a feed. Such publisher actions may be capable of creating or updating a database record to associate with a parent record.

Selection of one of the publisher actions may cause the publisher space to display data associated with the publisher action . By way of example the publisher space can include a form having a plurality of data fields for creating a new contact as illustrated in . The data fields may permit entry of data to create or update the database record to associate with the parent record. In another example the publisher space may include content from one or more data sources such as a web page. In still another example the publisher space may expose data from an application hosted on a third party platform such as Heroku .

Data provided in the publisher space may be published into a feed associated with the parent record. In the plurality of data fields allows a user to input information related to the creation of a new contact. Some of the data fields may be greyed out with default values provided. Some of the data fields may be starred to indicate that they are required fields. Some of the data fields may be subject to validation rules. Information in the data fields may be published along with a message provided in the message body . The message can include any alpha numeric or other character based user inputs such as words phrases statements questions emotional expressions and or symbols. Selection of the publishing button publishes the information provided in the data fields and the message body to appropriate feeds. What entities the user wishes to share such information with can be provided by selection of entities from the share dropdown menu .

In a user interface for a mobile device may include a publisher button and a feed . The publisher button enables a user to access a publisher or actions menu shown in . The publisher may cover over a portion of the feed in the user interface of the mobile device. The user may select from among a plurality of publisher actions in the publisher . Publisher actions include Post Photo Files Task Contact and Check In . Selection of a publisher action may cause the publisher to display content and or data fields associated with the publisher action . As shown in selection of the contact publisher action causes the publisher to display a text box for posting a message and a plurality of data fields for creating a new contact. The newly created contact may be associated with the parent record of the feed . In some implementations of mobile device applications selection of the publisher action causes the user interface to display a keyboard . After populating the data fields and or text box with information as shown in a user may select the share button to publish the information to one or more appropriate feeds.

A publisher may be configured to publish information to one or more feeds by creating a visual feedback element such as a feed item. shows an example of a feed item according to some implementations. The feed item may include data submitted from a publisher. The feed item may appear as part of a feed in a user interface. Here the feed item includes the identity of the entity updating or creating the database record a message accompanying data from the publisher the name of the database record being updated or created an attachment and topics . Other data from the publisher may also be presented in the feed item . In some implementations the name of the database record may be an actionable selection or selectable link that causes the user interface to display a page layout for the database record . What information is displayed in the feed item may depend on contextual factors such the profile of the entity viewing the feed item and the page layout on which the feed item is displayed.

The updated or created database record can be related to a parent record stored in the database system. Here the parent child relationship refers to a hierarchical relationship among database records in a database system. For example an opportunity can be a child in relation to an account while the account is the parent. In another example a task can be a child in relation to a lead while the lead is the parent.

In some implementations updates to the database record can include conversion of the database record deletion of the database record attaching a file to the database record logging information to the database record downloading data from the database record uploading data to the database record and modifying data in data fields associated with the database record. Examples of updates to a database record can include but is not limited to approving or rejecting a workflow approval logging a call logging a task logging a bug adding a link adding a Thanks etc. In some implementations the database record may be a customer relationship management CRM object. A CRM object can include but is not limited to a lead a case an account an opportunity a task a contact a campaign a contract an event a custom object and a Visualforce page.

A determination can be made that a user has permission to perform the action on the database record to associate with the parent record. Conventionally CRM systems limit the interaction with parent records to system administrators and owners of the parent records. As such other users or groups cannot directly interact with a parent record without the assistance or permission of an owner or system administrator.

Determining whether an entity has permission to interact with the parent record can at least include identifying one or more entity attributes of a profile of the entity. Attributes of the profile of an entity can include for example an entity s role or definition an entity s relationship information an entity s preferences an entity s usage patterns and other metadata associated with an entity s profile. For example an entity s role can indicate membership to a team that collaborates on a certain account record and permission to interact with a parent record can be determined if the entity is a collaborator to that account record. In another example an entity s role can indicate a job title in an organizational hierarchy. Depending on where the entity stands in the organizational hierarchy the entity may or may not have permission to interact with a certain record.

Additionally determining whether an entity has permission to interact with the parent record can at least include identifying one or more record attributes of the parent record. Attributes of the parent record can indicate the type of record such as whether the parent record is a lead a case an account an opportunity a task an event a contact or a custom object. Attributes of the parent record can also provide other metadata about the parent record. For example a type of record can be a case and the case can also be a technical issue case e.g. bug or an order processing case e.g. deal for an account. One entity may be permitted to interact with the technical issue case but not the order processing case and vice versa.

Moreover determining whether an entity has permission to interact with the parent record can at least include comparing the one or more entity attributes with the one or more record attributes. For example if an entity is identified as Vice President of Sales then he can access and interact with all cases for an account. If an entity is identified as a Sales Associate then he can access and interact with limited types of cases for an account such as cases involving a particular product for example.

In some implementations even if an entity has permission to interact with the parent record the types of interactions can be limited. Such limitations can be established for example by a system administrator an owner of the parent record or an organization s security permissions policy among others. In some implementations an entity may be restricted to perform only certain actions for interacting with the parent record. Thus a publisher in the user interface may disable hide or otherwise not display at least some publisher actions from the entity. For example one entity may be able to view update and create opportunities related to an account and another entity may be able to only view and update opportunities related to the same account. In some implementations an entity may be restricted to view only certain types of information or options for interacting with a parent record. For example one entity may be able to update all the terms for a contract and a different entity may be able to update only certain terms for the same contract. In another example one entity may be able to view public and private information related to an account and a different entity may be able to only view publicly available information related to the same account.

In some implementations data fields in the publisher may be configured to receive data from a user. The data may be communicated to one or more computing devices performing the method for instance as a signal network in . For example an event record may include field data such as date and time of the event the names of invitees and the venue. In another example a task may include field data such as the name of the task name or names of the assignee to the task and a due date. The values in each of the data fields may be used to perform the requested action to create or update the database record to associate with the parent record. The database record may be stored or configured to be stored in the database system associated with the on demand database service. Upon receiving the data one or more servers associated with the on demand database service can create or update a row representing the database record in the database system. For example in logging an action to the database record an update may be performed after an email is sent and then logged to the database record or after a post is submitted to an online social network like Twitter or Facebook and then logged to the database record. In effect the publisher can perform actions that have behaviors outside of the network domain of the database record.

A feed item associated with the performed action is presented for inclusion in a feed in the user interface. The feed item includes one or more actionable selections or selectable links providing a reference to the database record. The reference to the database record can be a display component such as a menu link or graphical button. In some implementations the reference to the database record can open a page in the user interface for the database record. In this way a user can navigate to the database record directly from the feed item. It is not necessary for a user to navigate between database records by switching between different user interfaces.

In some implementations the reference to the first record can perform further actions with respect to the database record. In addition to opening the database record such actions may include but is not limited to creating a second database record deleting the database record updating the database record converting the database record attaching a file to the database record downloading data from the database record and uploading data to the database record. More specifically examples of actions may include creating a task updating a task creating an opportunity updating an opportunity creating a contact updating a contact creating a case updating a case creating an account updating an account creating an event updating an event logging a call logging a task logging a bug approving a workflow approval rejecting a workflow approval creating an email writing a note creating a poll closing a case completing a task closing a bug sending an email submitting an email for approval posting to a portal posting to a social network adding a link and adding a Thanks . Thus actions may be performed directly from the feed item to associate with the database record without navigating to another page.

In some implementations selecting the one or more actionable selections or selectable links may cause the publisher to be operable to receive second information. The second information may be used to perform an action to associate with the database record. For example the action may include creating a second database record to associate with the first database record. The second database record may have a parent child relationship with the database record. In some implementations the second database record is a child of the database record.

At block a request to perform an action on a database record is received from the publisher. The database record is associated to a parent record stored in a database system. A user input selection can cause the action to be initiated via the platform s API and method call associated with the action. The user input selection can launch an action for interacting with the database record such as creating the database record or updating the database record.

At block first information associated with the database record is received from the publisher. In some implementations a user may provide the first information via data fields associated with the database record. The first information may be communicated to one or more computing devices performing the method for instance as a signal network in . The first information may represent entries of data in the data fields and the first information is used in performing the action on the database record.

At block the requested action is performed on the database record using the first information where the performed action includes creating or updating the database record to associate with the parent record. Rather than simply posting messages or attaching files through a publisher in a user interface to a feed of a parent record the publisher can also perform actions on database records to associate with the parent record. The performed actions can be represented as a feed item on the feed of the parent record. The performed action can create a database record such as a CRM object. Or the performed action can update a database record including approving or rejecting a workflow approval logging a call logging a task logging a bug adding a link adding a Thanks etc.

At block a feed item regarding the performed action is presented for inclusion in a feed of the parent record in the user interface. The feed item may provide a visual feedback element representing the first information from the publisher in the feed of the parent record. While the feed item may be presented for inclusion in a number of different feeds as will be discussed in more detail below the feed item may be at least presented for inclusion in the feed of the parent record. In some implementations the feed item may include one or more selectable links providing a reference to the database record. In other words the one or more selectable links can be selected by a user to reference the newly created or updated database record. As a result a user can navigate to the database record directly from the feed item. For example when a user creates a contact record such as Chuy Santiago as illustrated in a selectable link to the contact record is displayed in the feed item. The contact record of Chuy Santiago is automatically associated with the account record of Cirrus Inc. where the account record is a parent record and the contact record is a child record. Selection of the selectable link may permit the user to perform additional actions either on the contact record itself or on a second database record.

In some implementations the reference to the database record can perform further actions with respect to the database record. Such actions may include creating a second database record deleting the database record updating the database record converting the database record attaching a file to the database record downloading data from the database record uploading data to the first record viewing information associated with the database record and otherwise performing an action on the database record e.g. logging a call creating an email approving or rejecting a workflow approval etc. . In some instances selecting the one or more selectable links may cause the publisher to be operable to receive second information.

In some implementations one or more entities cross referenced with the feed item are identified. The feed item can be propagated and cross referenced for display not only in the feed of the parent record but also in other related feeds. Identification of such related feeds can occur by for example a user defining values in a payload or a system administrator hard coding the values. In addition or in the alternative cross referencing rules can be embodied in code. Potential entities for cross referencing may be provided in a database table indicating record relationship information with respect to the parent record. Once a feed of another entity other than the parent record is identified a database can be accessed to indicate the entity as being cross referenced with the feed item. As used herein this process of identification and indication can be referred to as cross referencing. In some instances any interactions performed on a given feed item such as commenting or liking the item are also presented on every other related feed including a feed item which is cross referenced so that a single conversation thread is preserved and replicated across feeds. This can allow users or organizations to view and interact with the same feed item from multiple and different page layouts. In some implementations the feed item parented by the parent record can be propagated and cross referenced for access by followers of a cross referenced entity. For example depending on whether the feed item is relevant or of interest the feed item can be provided in news feeds of users who follow a cross referenced entity.

In some implementations cross referenced feed items may be rendered differently depending on context. A context can refer to a screen that the user is currently viewing on the display. This can include for example a feed a user s profile a feed comment a detailed information page etc. A server API can be invoked with a set of parameters that describe the context. For example the preamble of the cross referenced feed item or the auxiliary body of the cross referenced feed item may present different information in different feeds.

In some implementations the feed item regarding the performed action e.g. created or updated database record is provided in one or more feeds of the one or more entities cross referenced with the feed item. Thus the same feed item as displayed in the feed of the parent record may be propagated and displayed across multiple users groups organizations and records. Cross referencing of a feed item across multiple users groups organizations and records may be preferred over copying or re posting the feed item in different places. For example collaborators for a particular database record can interact with the feed item from their news feed the record feed of the parent record or the record feed of the database record if the feed item is cross referenced with such entities.

In some implementations a user input may be received selecting a selectable link in the feed item. Selection of the selectable link can cause the publisher to display in response to the user input data fields capable of receiving second information to update the database record or create a second database record. The database record can have a hierarchical relationship with the second database record where the database record can be a parent record and the second database record can be a child record of the database record and a grandchild of the parent record. The data fields displayed in the publisher can be different than the data fields displayed in the publisher for performing the action on the database record.

In in one example an app server in the on demand service environment of includes one or more processors configured to perform part or all of blocks . In other instances additional servers cooperate with app server to perform the blocks. When first information for example is received at block such information can be received by a server over a data network from a user operating a user system as shown in . In other instances such data is received from a proxy server on behalf of a user or other data source. Various implementations of method are possible such that any of the servers described above with reference to or other computing devices disclosed herein can be configured to receive and process user inputs and information updates in accordance with method .

Actions associated with the selectable links may be provided programmatically or declaratively. The actions may be configured to interact with database records according to custom action instructions. The custom action instructions may be provided using an API. In some implementations the custom action instructions may be provided in for example Javascript Java Apex or any other programming language. In some implementations a customization tool such as Visualforce allows users to build custom user interfaces that can be hosted natively in an on demand service environment. Rather than declaratively defining the user interface a customization tool allows users to programmatically customize the user interface. For example a user may customize the user interface components that should be included on a page and how they should appear. The user can edit Visualforce tags HTML Javascript or other Web enabled code. Examples of custom actions that a user may add to the user interface may include by way of example only instant messenger knowledge articles live chat twitter virtual bulletin boards email log a call portal answer or the like.

The user interface may be defined by custom action instructions either declaratively utilizing an API such as one provided by salesforce.com or programmatically utilizing a customization tool such as Visualforce which may be provided with its own API and set of pre defined instructions. Users with less technical skills may develop user interfaces declaratively while users or organizations with more complex data management needs may prefer a customization tool in customizing user interfaces.

Accordingly the user interface for the Visualforce page layout can include a publisher and an information feed. The user can customize the publisher to be able to be an email publisher a call log publisher and a portal answer publisher. In other words the publisher may include custom actions configured to email a customer to log a call and to answer inquiries through a web portal. The layout and dimensions of the publisher and other frames in the page layout hosting components such as the feed may be defined in the custom action instructions according to the user s preferences.

In some implementations the publisher can expose content from an application via an API. The application can be exposed within a publisher space and interactions can be performed on the application through the publisher space via the API. The application can be integrated with the API provided by a database service provider such as salesforce.com.

In some implementations the application is hosted natively in the on demand service environment. In some implementations the application is hosted on a third party platform. The third party platform may include one or more database systems outside of the on demand service environment. The application can be hosted on a platform service including but not limited to site.com Heroku force.com and AppExchange .

While the actual code for running the application may be hosted on the third party platform the application is configured to communicate with the API provided in the on demand service environment. This API may enable integration of an application such as a third party application into the on demand service environment. For example the API may consist of a set of tools and Javascript APIs that enables integration with the third party application into the on demand service environment. The Javascript APIs provide a communication bridge so that the third party application can communicate with a browser page.

Content as exposed in the publisher space can originate from any number of data sources. In some implementations such data sources can include analytics external data sources feeds and direct events among other data sources. For example the exposed content can be a video stream provided from a videoconferencing service. In another example the exposed content can be a map provided from a web mapping service application. The publisher space provides a frame or window by which the content can be viewed in the user interface and the content from the data source can interface with the API to communicate with the browser page. For example one of the publisher actions can be an API enabled action that can interface with the API and cause the API to display content from an external data source.

In some instances exposure of the application in the publisher may be performed using a force.com Canvas application. The Canvas application serves as an iFrame or a window for displaying the content from the application. The application itself may be hosted on a third party platform such as Heroku .

From a user interface a user can communicate with an application such as a third party application via the API. Even if the application is hosted on a third party platform the application directly interfaces with the API to implement updates with the hosting page. In some implementations an interaction occurs within the browser page of the user interface. For example the application can be a mortgage calculator exposed in the publisher where the interaction outputs directly into the publisher. In some implementations the interaction does not occur with the browser page of the user interface. Instead the interaction occurs with the API and the third party application that avoids opening or refreshing a page in the browser. In other words the browser page is unaware of the updates made to the application hosted on the third party platform. In some implementations the feed directly interfaces with the API to update information in the feed. As the API communicates with the application the API links back information from the application to the browser page. Such information is rendered in the feed of the parent record. In some implementations the feed is updated without refreshing the user interface. In fact each of the steps performed in interacting with the application may occur without refreshing the user interface. For example updating the feed can involve updating one or more data fields in the feed based on the user input by toggling changes to one or more data fields. Therefore the API can enable interactions between a user and an exposed application such as an application hosted on a third party platform such that updates occur seamlessly between a publisher and a feed in a user interface.

In some implementations a feed item in the feed can include one or more actionable selections. The one or more actionable selections may perform further operations on the application from the feed item. By way of an example various itineraries from a travel service application may be exposed in a publisher and a user may select one or more of the itineraries. In response to a user input requesting approval for a selected itinerary information regarding the selected itinerary can be rendered in a feed item. The feed item can further include approval controls where an appropriate entity can approve or deny the selected itinerary.

In another example a user interface can include a publisher and a feed where the publisher includes a selectable action for initiating a videoconference with a customer. The customer can use a video recording device and have a real time conversation with the user through a publisher space of the publisher. Moreover the user can perform an action on the exposed data stream by saving the videoconference from the publisher and the saved video can be published to the feed.

In yet another example a pharmaceutical company can develop a customized user interface for sales agents to sell free drug samples to doctors. When a sales agent pulls up an account for a particular doctor in the user interface the sales agent can view the doctor s account and input new orders into the publisher. The sales agent can communicate with an application such as a third party application to fulfill the order request and a feed item can be posted in a feed indicating the placement of the order request.

In yet another example a gaming company can develop a customized user interface to submit a mass email to customers. If a flood of cases come in at a rapid rate regarding a bug in a video game the gaming company can utilize a publisher to communicate with a mass email web service such as VerticalResponse Inc. or Constant Contact Inc. The gaming company can import or select all the recipients compose the email and submit the email through the mass email web service. Upon completion a feed can be updated by presenting a feed item indicating that an email was sent out.

A publisher can be an interface that interacts with one or more records with information regarding the interaction being published to one or more feeds. In some implementations the publisher can be the interface that handles the creation of one or more records. For example the publisher can be a composer that handles the creation of objects such as a poll a contact a task etc. The publisher may be part of a framework for creating various composers such as a poll composer a contact composer a task composer etc. Such a framework may be referred to as a publisher framework. The publisher framework may be a native framework for any one or more operating systems including but not limited to Android iOS and Windows.

In some implementations the publisher framework may be configured to automatically discover any composer class. Thus upon loading the publisher in the operating system the publisher can automatically discover one or more classes of composers without having to register each of the classes of composers. In some implementations one or more protocols and or base classes can provide support for the publisher in one or more mobile devices including the iPad and iPhone. Each of these mobile devices can have a form factor that the publisher can be adapted for.

In some implementations a mobile device may be configured to perform part or all of the computer implemented method . The mobile device can include the hardware and software of a user system as described above with reference to . By way of example the mobile device can be a smartphone a tablet a laptop computer or a wearable display device such as Google Glass.

At block of a user interface is provided on a display of a mobile device. The user interface includes selectable links associated with actions capable of being performed on a database record stored or configured to be stored in a database system of an on demand database service. In some implementations the database system is an online social networking database system. The user interface may include a publisher for publishing information to a feed as described earlier herein. The publisher may include each of the selectable links for performing the actions on the database record. In some implementations the action performed on the database record associates or is associated with a parent record of the database record. Each action can perform a type of transaction on the platform using the platform s API and the action s associated method call. For example the action can update a database record create a database record log a call send an email approve reject a workflow etc.

When a user selects any of the selectable links an action can be initiated. The action can interact with a database record stored or configured to be stored in a database system of the on demand database service. For example the action may perform one of the following creating a database record or updating a database record for storing in a database system of the on demand database service. In some implementations updating the database record can include modifying data associated with the database record deleting the database record converting the database record or advancing a workflow associated with the database record.

What selectable links are presented in the user interface can depend on a context in which the user is navigating in. A context can refer to a screen that the user is currently viewing on the display. This can include for example a feed a user s profile a feed comment a detailed information page etc. A server API can be invoked with a set of parameters that describe the context. Based on the parameters provided by the server API the server API can provide a list of actions filtered based on that context. Any actions that are not applicable in that context are not provided in the user interface.

From a feed for example a user may see selectable links for global publisher actions. Global publisher actions can create database records or perform other functions independent of any database record in the on demand database service. From a record page however a user may see selectable links for object specific publisher actions. Object specific publisher actions may update a database record create a database record or otherwise perform a function related to a specific database record in the on demand database service. For example an object specific create action can create a database record that is automatically associated with the parent database record. To illustrate an example of context awareness if a user s context is a detailed information page for a contact record then the server API can filter the object specific actions to include at least logging a call and sending an email for that contact record. The server API can filter object specific actions or global actions that are not applicable for the user s context such as posting a comment on a feed converting a lead to an opportunity etc.

In some implementations selection of the selectable link can cause the publisher or user interface to be capable of receiving information to use with the performance of the action on the database record. In some implementations the user interface may include data fields for receiving entry of data to associate with the database record. The user interface may include a publisher space for receiving information to associate with the database record. In some implementations the user interface may expose an application such as a third party application for receiving information to associate with the database record. A third party application can be exposed using a set of tools and APIs such as force.com Canvas to integrate the third party application with the on demand database service. Content can be exposed from the third party application and a user may interact with the third party application as if it were hosted natively on the on demand database service.

Access to such data may be permitted when the user is authorized to the database system of the on demand database service. Authorization may occur when the user s access credentials are validated. When the user s access credentials are validated then the user may be provided with read write access to data stored in the database system of the on demand database service. For example the user may have read write access to the plurality of contracts in . The user may access the plurality of contracts through an application associated with the on demand database service.

The selection of the selectable icon can cause a modal or other interface to be displayed in the user interface . shows an example of a user interface on the mobile device including an actions menu with an action for entering a third party signature according to some implementations. The action may be a selectable link button or icon arranged in an array of tiles in the actions menu . The user may return to a previous page or interface by selecting a cancel or back button.

What selectable links are displayed in the actions menu can depend on the context in which the user was navigating. This means that whether the selectable link is displayed in the actions menu or not can depend on whether the selectable icon in was selected from a feed a user s profile a feed comment a detailed information page etc. In the selectable link is an object specific action that is a result of being accessed from a detailed information page corresponding to the selected contract record. Other actions not suitable for interacting with the contract record may be filtered out. The object specific actions may perform an action on a database record to automatically associate with a parent database record. In addition or in the alternative what selectable links are displayed in the actions menu can depend on a customization of the actions menu . For example what selectable links are displayed in the actions menu can depend on whether a user such as an administrator chose to make such selectable links available in the actions menu .

In some implementations what actions are provided in the user interface can depend on one or more attributes of the database record. In some implementations the database record is a CRM object the CRM object being one of a lead a case an account an opportunity a task a contact a campaign a contract an event a custom object and a Visualforce page. One or more attributes of the database record can include but is not limited to a record identification ID a record type a record relationship metadata stored in association with the database record and a context associated with the database record. As illustrated in a selectable link for creating a signature is displayed in the actions menu where the actions menu is accessed from a contract record. In some implementations a server API can determine the selectable link for creating a signature to be displayed in the actions menu based on the attribute of the database record e.g. record type being a contract . In some implementations the selectable link for creating a signature can be displayed in the actions menu according to a customization of a user.

Some actions may be customized by users. In some implementations users can select what type of action to create including create actions log a call actions and update actions. Create actions allow users to create records log a call actions permit users to record details of phone calls or other interactions and update actions permit users to make changes to a record. In some implementations the user can define what data fields are included in such actions according to a desired layout and according to any desired validation rules. The action can cause certain data fields to be displayed in the user interface where the data fields may be formatted for receiving information according to the formats of the database system. For example the formats of the database system may organize the database records in database tables where data fields of a database record may correspond to columns in a database table.

At block of a first user input from a first user is identified via the user interface selecting one of the selectable links to request an action to be performed on the database record. The requested action is identified for requesting third party information from a second user. The second user is different from the first user. The first user may be an authorized user with permission to access data in the database system of the on demand database service. The accessed data can include database record. Thus the first user may be an authorized user for interacting with the database record. In some implementations the first user may be an owner of the mobile device. In some implementations the first user may be associated with authorized login credentials for logging into an application associated with the on demand database service. In some implementations the second user may not be authorized to access data in the database system of the on demand database service. In other words the authorized login credentials for accessing the data in the database system do not correspond to the second user.

The selectable link can be one of a button icon image or other selectable item on the user interface. On a mobile device for example a user can select one of the selectable links by tapping or pressing on a display to request the action to be performed. The user input selection can cause the action to be initiated via the API and the method call associated with the action. In some implementations the user input selection can launch an action for interacting with the database record such as creating or updating the database record to associate with a parent record.

The action to be performed on the database record may be identified for requesting third party information from a second user. Third party information can represent information from any party i.e. the second user other than the first user where the first user is associated with the mobile device. One or more attributes may indicate that the action requires entry of third party information from a second user. In some implementations data fields in the database record may be flagged or otherwise identified for receiving third party information. In some implementations a user such as an administrator or developer may define that the action is associated with receiving third party information. In one example the third party information can include a signature such as a signature to confirm a transaction. In another example the third party information can include data collection such as entry of personal data for completion of a form.

In some implementations the selectable link can be associated with an action for obtaining third party information to advance a workflow. Also third party applications can be integrated with actions in the on demand database service. In some implementations the selectable link can be associated with launching an application such as a document signing application like DocuSign or Adobe. A plugin for providing a signature such as in can be linked or otherwise associated with the document signing application. In some instances an agreement can be included as part of the plugin so that a user may read what they are signing. The document signing application can then store a signature with the record.

In the selectable link for creating a signature can be identified for requesting third party information. Thus attributes associated with the signature action such as an attribute defined by a developer can identify that the signature is to be received from a third party. Therefore once the selectable link is selected a user in possession of the mobile device may pass the mobile device to another user to obtain a signature.

Returning to at block a second user input is identified via the user interface to provide the third party information. In some implementations the second user input is associated with the second user. The second user input may correspond to various kinds of input actions. In one example the input action can include keystrokes to enter characters. In another example the input action can include a voice activated command. In another example the input action can include a touch based action such as a pressing action a sliding action a drag action or a flick action on a touch sensitive screen. These actions can be performed with reference to one or more fingers a stylus or other object.

The second user input can provide third party information to be uploaded to the database system. In some implementations the third party information may be uploaded as an attachment to the database record. In some implementations the third party information may provide data to data fields of the database record. In some implementations second user input may be subject to validation rules or other restrictions. For example geo fencing may restrict where a signature or other information may be collected.

By way of an example a prospective patient may visit a dentist s office and complete a form regarding her personal information such as her contact information insurance information medical history etc. A receptionist at the dentist s office may hand the patient a mobile device displaying data fields for completion of the form. The patient may enter her contact information insurance information medical history and other information into the data fields. Once the patient enters the information a database record can be created for the patient and entered into a database system.

In another example a delivery service agent may deliver a package to a home or office of a customer. The delivery service agent may choose a selectable link on her mobile device to obtain a signature to associate with the delivery record. The delivery service agent may hand off her mobile device to the customer for her signature to confirm receipt of the delivery. The display of the mobile device may include a user interface configured for receiving a signature. The customer can provide her signature. A signature can be rendered on the user interface using techniques for generating a smooth signature. For example a smooth signature can be generated using cubic spline interpolation and velocity based stroke width variance.

At block of the requested action can be caused to be performed on the database record using the third party information. In some implementations the requested action can be performed and the database record can be updated or created in accordance with the requested action before activation of a security mechanism. In some implementations the requested action can be performed and the database record can be updated or created after activation and traversal of a security mechanism. The performance of the requested action can create a database record or update a database record for storing in the database system of the on demand database service. For example updating the database record can advance a workflow associated with the database record. In some implementations a child database record can be created or updated to associate with a parent database record through performance of the requested action. The third party information may be stored with the database record in the database system. In some implementations the third party information may be associated with one or more data fields of the record. In some instances each database record can include metadata where the metadata can describe the data fields associated with the database record. In some implementations a feed item may be published in a feed of a parent database record where the feed item can indicate performance of the requested action on the database record.

At block of a security mechanism is caused to be activated where the security mechanism disables access to data stored in the database system of the on demand database service. The data stored in the database system may be associated with the first user. Such data can include data that the first user has permission to access. In some implementations the security mechanism can require input of some kind of passcode or biometric input. The security mechanism may be displayed on the display of the mobile device following the second user input. In some implementations the security mechanism may cause the mobile device to be locked so that the mobile device cannot be used until the security mechanism is bypassed. For example the security mechanism may further disable access to an operating system of the mobile device. In some implementations the security mechanism may further disable access to the user interface and to data stored on the mobile device.

Hence the security mechanism may disable 1 the entire mobile device 2 only the application associated with the on demand database service for performing the action on the database record or 3 the application and other additional functions programs on the mobile device. The extent to which access to data may be restricted on the mobile device can depend on the operating system of the mobile device. For example mobile devices using Android may implement a security mechanism that locks the entire mobile device whereas mobile devices using iOS may implement a security mechanism that locks only the application associated with the on demand database service.

Providing the security mechanism before performing the action on the database record can increase data security with respect to data accessible from the mobile device. There can be any number of ways that an unauthorized user can attempt to access the first user s data on the application associated with the on demand database service or data stored locally on the mobile device. If the unauthorized user attempts to gain access to any such data the security mechanism may be activated to restrict such access. For example the security mechanism may be activated at any point after the mobile device is handed to the second user. In some implementations a triggering input can be identified. The triggering input can cause the security mechanism to be activated. The triggering input can include a selection indicating one of the following canceling the third party information posting the third party information and exiting an application associated with the on demand database service. In other words if the second user attempts to proceed to the next screen e.g. post return to the previous screen e.g. cancel or background the application the security mechanism can be activated to prevent unauthorized access to data. Other triggering inputs may also cause the activation of the security mechanism such as a timeout operation.

When a user triggers the security mechanism the state of the application associated with the on demand database service may be stored. That way the third party information and other information for performing the requested action may be stored locally or remotely. When the security mechanism is traversed the mobile device may return to the stored state of the application. In some implementations for example the state of the application of may be stored in a SQLite database. The state of the application including the third party information may be retrieved following traversal of the security mechanism.

Returning to at block a third user input is identified. The third user input may be identified for traversing the security mechanism. In some implementations the third user input may provide one of an alpha numeric password a graphical password a motion based password and a biometric input. A graphical password can require a user to draw a specific pattern. A motion based password can require detection of a particular motion by the mobile device. Examples of biometric inputs can include a fingerprint scan voice recognition face recognition gait recognition heartbeat detection and an iris scan among others.

At block of the third user input is determined to satisfy an attribute of the security mechanism for traversing the security mechanism. In some implementations the attribute of the security mechanism can be stored locally on the mobile device. In some implementations the attribute of the security mechanism can be stored remotely such as in a database system of an on demand database service. The attribute of the security mechanism can be a user defined passcode or biometric identification for authenticating the user to the mobile device. When the third user input matches the user defined passcode or biometric identification then the user is authenticated to the mobile device and the security mechanism is traversed. After the security mechanism is traversed the mobile device can return to the stored state of the application. In some implementations if the database record has not been updated or created according to the requested action already then the database record can be updated or created after the security mechanism is traversed.

Additional information can be provided with the third party information in the process of performing the requested action on the database record. In some implementations such additional information may supplement the third party information to validate the third party information. In some implementations one or more of a geolocation a timestamp and a photograph may be stored with the third party information in the database system of the on demand database service. To illustrate a geolocation can be used to verify where the receipt of the third party information took place and a photograph can be used to verify the identity of the second user providing the third party information.

Returning to earlier examples a prospective patient filling out a form on a mobile device at a dentist s office may be prevented from accessing data including data stored locally on the mobile device and data stored remotely in a database system and accessible through an application associated with an on demand database service. When the prospective patient submits her information to update or create the patient s contact record or otherwise tries to exit the screen a passcode security mechanism may appear. When the receptionist or some other authorized user of the mobile device enters the correct passcode the mobile device may be unlocked so that the user can access the application associated with the on demand database service.

When a delivery service agent seeks to confirm delivery of a package to a customer by obtaining a signature of the customer the customer may be prevented from accessing data on the mobile device. The customer may provide her signature to update a delivery record with the signature and a passcode security mechanism may appear after entry of the signature. In some instances the signature can be provided with a geolocation to verify the correct location of the delivery. When the delivery service agent enters the correct passcode the mobile device is unlocked so that the delivery service agent can access data on the mobile device.

In at block a user device sends a request to access a record stored or configured to be stored in a database of the on demand database service. The user device can be for example a mobile display device. The database can be an online social networking database system and the record can be a database record. The request can include a signal providing a unique record ID for identifying the record in the on demand database service. The user device can communicate with one or more server devices in a cloud environment. As shown in for example the user system can send the request via network to the network interface of a database system . The request may be sent in response to a user input on an application associated with the on demand database service. Details regarding the database record including metadata may be provided in a user interface for display on the user device.

One or more server devices can process the request from the user device. At block of in response to receiving the request from the user device a selectable link is identified for performing an action on the record and configured to receive third party information. One or more attributes of the action may indicate that the action is configured to receive third party information. For example the action may be programmed to receive third party information such as a third party signature. The action can cause the one or more server devices to invoke a unique method call. Upon identifying the record based on the record ID selectable actions or selectable links can be identified at the one or more server devices in the on demand database service. The one or more server devices can include server devices in pod or in communication with pod of . Such server devices can include but is not limited to content batch servers content search servers query servers file force servers ACS servers batch servers app servers database instances indexers and load balancers . The selectable link can be provided in the user interface of the display of the user device.

Once the selectable link is provided in the user interface a user input can select the selectable link. At block a request to perform the action on the record is sent. A request can be sent to the one or more server devices to perform an action on the record and associated with the selectable link. Such a request can be sent via network to the network interface of the database system in . In some implementations the request can be sent responsive to the user device receiving a user input selecting the selectable link. Hence the request can be sent in response to a user interacting with the application associated with the on demand database service.

At block data to generate a user interface for receiving third party information is provided based on the request. In some implementations the third party information may be associated with information from a user not associated with the user device or not associated with the database of the on demand database service. The one or more server devices can send data to the user device to provide a user interface including a space configured for receiving third party information. For example the user interface can include data fields formatted for receiving third party information according to formats of the database. The data fields in the user interface may be associated with data fields of the record. In some implementations the user interface can include a space for receiving a signature. The one or more server devices can send the data via network to the user device as shown in .

When the user interface is generated the user device is capable of receiving third party information. At block the third party information is received from a user input. The user input may be associated with a user not associated with the user device or not associated with the database of the on demand database service. The user may not be authorized to access information in the database of the on demand database service. Such access may be limited to the owner of the user device or to another user logged into the application associated with the on demand database service. However the user is permitted to enter the third party information at the user interface. Receipt of the third party information can occur from any suitable input action. Input actions can include keystrokes a voice activated command and a touch based action such as a pressing action a sliding action a drag action or a flick action.

After the third party information is received at the user device a signal can be sent to perform the requested action with the third party information. Hence at block a signal is sent requesting performance of the action on the record. The signal requesting performance of the action can be sent to the one or more server devices to perform the action on the record. Such a request can be sent via network to the network interface of the database system in . The signal can be sent from the user device. However the signal requesting performance of the action can also trigger a security mechanism to be activated on the user device.

At block the requested action is performed on the record using the third party information. The one or more server devices can receive the signal from the user device to perform the requested action. The database that stores or is configured to store the record can be updated based on the third party information. Examples of actions that can be performed on the database record can include creating the record and updating the record. In some implementations updating the record can include advancing a workflow associated with the record. In some implementations the one or more server devices can provide a feed item in a feed associated with the record the feed item indicating performance of the action on the record with the third party information. In some implementations the third party information can be provided in one or more data fields associated with the record.

At block a security mechanism is caused to be activated where the security mechanism disables access to data stored in a database of the on demand database service. The security mechanism can lock the user device or at least the application associated with the on demand database service. The security mechanism can require a passcode or other input to authenticate the user to the user device. In some implementations the security mechanism can restrict access to data stored on the user device. In some implementations the security mechanism can restrict access to the user interface. In some implementations the security mechanism can restrict access to the operating system of the user device. What restrictions the security mechanism can place on the user device can depend on the operating system of the user device and or the user preferences of the user device. Thus the security mechanism verifies that the authorized user is in possession of the user device.

At block an input for traversing the security mechanism is provided. The input can be one of an alpha numeric password a graphical password a motion based password and a biometric input.

At block the input is determined to satisfy an attribute of the security mechanism to traverse the security mechanism. In some implementations the attribute of the security mechanism can be a user defined passcode. In some implementations the attribute of the security mechanism can be a biometric identification such as a fingerprint. The attribute of the security mechanism can be stored locally on the user device or remotely on a database of the on demand database service. When the input matches the attribute of the security mechanism the security mechanism is traversed. As a result the user device or at least the application associated with the on demand database service is no longer locked.

The specific details of the specific aspects of implementations disclosed herein may be combined in any suitable manner without departing from the spirit and scope of the disclosed implementations. However other implementations may be directed to specific implementations relating to each individual aspect or specific combinations of these individual aspects.

While the disclosed examples are often described herein with reference to an implementation in which an on demand database service environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present implementations are not limited to multi tenant databases nor deployment on application servers. Implementations may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the implementations claimed.

It should be understood that some of the disclosed implementations can be embodied in the form of control logic using hardware and or using computer software in a modular or integrated manner. Other ways and or methods are possible using hardware and a combination of hardware and software.

Any of the software components or functions described in this application may be implemented as software code to be executed by a processor using any suitable computer language such as for example Java C or Perl using for example conventional or object oriented techniques. The software code may be stored as a series of instructions or commands on a computer readable medium for storage and or transmission suitable media include random access memory RAM a read only memory ROM a magnetic medium such as a hard drive or a floppy disk or an optical medium such as a compact disk CD or DVD digital versatile disk flash memory and the like. The computer readable medium may be any combination of such storage or transmission devices. Computer readable media encoded with the software program code may be packaged with a compatible device or provided separately from other devices e.g. via Internet download . Any such computer readable medium may reside on or within a single computing device or an entire computer system and may be among other computer readable media within a system or network. A computer system or other computing device may include a monitor printer or other suitable display for providing any of the results mentioned herein to a user.

While various implementations have been described herein it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present application should not be limited by any of the implementations described herein but should be defined only in accordance with the following and later submitted claims and their equivalents.

