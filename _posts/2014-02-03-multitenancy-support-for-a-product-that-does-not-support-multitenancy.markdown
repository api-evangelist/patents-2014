---

title: Multi-tenancy support for a product that does not support multi-tenancy
abstract: Enterprise software is computer software used to satisfy the needs of an organization and/or multiple individual users. Methods, systems and/or computer program product are described for providing, to a plurality of tenants, access to an enterprise software that is accessible by only a single tenant. At least one of the tenants accessing the enterprise software includes a plurality of users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436813&OS=09436813&RS=09436813
owner: CA, Inc.
number: 09436813
owner_city: New York
owner_country: US
publication_date: 20140203
---
Various embodiments described herein relate to computer systems methods and program products and more particularly to enterprise systems methods and computer program products.

Enterprise software also known as an enterprise software application or as an enterprise level software is computer software used to satisfy the needs of an organization and or multiple individual users. Such organizations can include businesses schools interest based user groups retailers and or governments. Enterprise software may be an integral part of a computer based information system of an organization.

Services provided by enterprise software are typically business oriented tools such as online shopping and online payment processing interactive product catalogs automated billing systems security enterprise content management IT service management customer relationship management enterprise resource planning business intelligence project management collaboration human resource management manufacturing enterprise application integration and or enterprise forms automation.

Presently due to the cost of building or buying specialized enterprise software only large enterprises may have the resources to deploy enterprise software. However smaller organizations or individual users may desire to use enterprise software. Managed Service Providers MSPs may want to provide cost effective solutions including access to enterprise software to these smaller organizations or individual users.

Various embodiments described herein provide access to enterprise software that supports multiple users. Specifically some embodiments described herein provide a plurality of tenants access to an enterprise software that is accessible by only a single tenant. At least one of the tenants supports a plurality of users.

Various embodiments described herein also can provide to the plurality of tenants access to the enterprise software by constructing a wrapper around the enterprise software. Some embodiments provide a Managed Service Provider MSP access to the wrapper to provide the plurality of tenants with access to the enterprise software.

Some embodiments may also provide access to the enterprise software by receiving a request for a tenant to use the enterprise software. Some embodiments may determine if the enterprise software has capacity to support the tenant. Access to the enterprise software is provided to the tenant in response to determining that the enterprise software has the capacity to support the tenant.

In some embodiments determining if the enterprise software has capacity to support the tenant may include determining based on the request received for the tenant that a data entity is associated with the tenant. The data resources required by the data entity that is associated with the tenant may be determined. A check may be performed to determine if the enterprise software has capacity to support the data resources required by the tenant.

Various embodiments described herein also can provide access to the enterprise software to the tenant in response to determining that the enterprise software has capacity to support the tenant by provisioning data resources related to the enterprise software to be associated with the data entity. Information related to the data entity may be stored. One or more users associated with the tenant may be authorized to access the data resources. The data entity may be added to a collection that allows the data resources to be accessed by the one or more users associated with the tenant.

In some embodiments determining if the enterprise software has capacity to support the tenant may include determining based on the request received for the tenant a number of prospective users associated with the tenant. A number of provisioned users configured to access the enterprise software may be determined. Additionally it may be determined if the enterprise software has capacity to support the number of prospective users associated with the tenant in addition to the number of provisioned users configured to access the enterprise software.

Various embodiments described herein also can provide access to the enterprise software to the tenant in response to determining that the enterprise software has capacity to support the tenant by assigning resources related to the enterprise software to the tenant. Information related to the tenant may be stored. User authorization for one or more users associated with the tenant may be performed.

Further embodiments herein may include segregating data associated with an administrative function of the enterprise software for the tenant from data associated with the administrative function of other tenants. An administrative user authorized to access the administrative function of the enterprise software may be identified. Access may be provided for the administrative user to access the administrative function of the enterprise software based on the data that was segregated.

In any of the above described embodiments the enterprise software may be accessed by the one or more users associated with the tenant.

It will also be understood that various embodiments have been described above in connection with methods of providing multi tenancy support for enterprise software. However various other embodiments described herein can provide computer program product that can provide multi tenancy support for enterprise software according to any of the embodiments described herein.

Moreover various other embodiments described herein can provide a software accessing system for enterprise software. The software accessing system may comprise a processor and a software application that runs on the processor and is configured to provide multi tenancy support for the enterprise software according to any of the embodiments described herein.

It is noted that aspects described herein with respect to one embodiment may be incorporated in different embodiments although not specifically described relative thereto. That is all embodiments and or features of any embodiments can be combined in any way and or combination. Moreover other systems methods and or computer program products according to embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional systems methods and or computer program products be included within this description be within the scope of the present disclosure and be protected by the accompanying claims.

As was noted above enterprise software is computer software used to satisfy the needs of an organization and or multiple individual users. Typically enterprise software may be accessible by only a single customer or tenant that includes a single user or multiple individual users. Yet heretofore mechanisms do not appear to have been available to provide a plurality of tenants access to an enterprise software that is accessible by only a single tenant. Historically in order to support multiple customers with an enterprise level software product a separate version of the enterprise software would need to be hosted for each tenant or customer.

According to various embodiments described herein access to an enterprise software accessible by only a single tenant is provided to a plurality of tenants where at least one of the tenants includes a plurality of users. Various embodiments described herein may layer on top of an existing enterprise level software to turn the existing enterprise software into a multi tenant solution. In some embodiments a wrapper may be constructed around the enterprise software. A Managed Service Provider MSP may be provided with access to the wrapper in order to provide a plurality of tenants with access to the enterprise software.

The orchestration process may also act as a controller to ensure that the order is handled successfully. If an error occurs during processing reasons for the error are identified such that the orchestration process acts as a link for a delivery team to troubleshoot a failed order. After resolution of errors a restart of the orchestration process may follow to allow the order to proceed. The application layer includes business logic for data and user entities since the application layer may analyze the order and direct activities to the correct RESTful APIs or Java Services necessary to complete the order.

Further referencing the data layer may include enterprise software APIs solution APIs and a core APIs . The enterprise software APIs may include a combination of RESTful APIs and SOAP APIs available through the enterprise software products. The solution APIs may include APIs to abstract command line and database calls and other non API functions in the enterprise software. For example these solution APIs may include RESTful APIs and Java Services created for the solution to abstract the data interaction for those enterprise software products that do not have sufficient APIs available to support the solution. Core APIs may include access to a solution data storage in order to store information. Access to data may abstracted through combinations of enterprise APIs solution APIs and core APIs to aide in driving consistency and the accuracy of the solution. Block includes one or more instances of the enterprise software. The enterprise software may be used as a resource of the multi tenancy solution.

Further referencing if the order is determined to be for a data entity at Block enterprise software products associated with data entity are examined at Block . The enterprise software products are associated to the customer record. Then at Block the data entity is assigned to one or more resources that will store or collect data about the entity. This assignment will depend upon the enterprise software products associated with the data entity. Moreover at Block the data entity information is added to the solution data store. Then at Block the data entity is provisioned into the one or more resources that will collect and or store the data associated with the data entity. If necessary the collection of data may also be triggered at this point. At Block the data entity is added to a customer specific collection that will allow the data to be accessed by the users assigned to the customer. Only a subset of users of the customer tenant may be authorized to access the collected data. This data may be separated by enterprise software product or aggregated as desired by the customer. Then at Block the order may be closed out such that the enterprise software may operate in a normal running mode.

Further referencing the order will be evaluated if it is a user entity at Block . If the order includes a user entity flow proceeds to Block where the user entity and user customer and enterprise software product assignments are recorded in the solution data store . Then at Block user authentication and or user authorization permission assignments are performed. Moreover at Block the user is assigned to the reporting resources necessary to report on the data for the customer and enterprise software products associated with the user. Then at Block the order may be closed out such that the enterprise software may operate in a normal running mode.

Additional discussion of various embodiments described herein will now be provided. It will be understood that these examples are non limiting and may be simplified compared to an actual multi tenant system in order to effectively illustrate their operation.

Various embodiments described herein can take enterprise level software and layer on top of it a product that will turn that enterprise software into a multi tenant solution. In order to accomplish this goal the enterprise level software must support the ability to separate data in a way that it can be delivered succinctly to specific users. The enterprise level software also needs to support multiple simultaneous users. This product will not add multi user capability to an enterprise level software product. Instead an enterprise level product is expanded into a multi tenant product that may support more than one distinct customer within the same instance as other customers.

Typically in order to support multiple customers with an enterprise level software product a separate version of that enterprise software must be hosted for each customer. In contrast various embodiments described herein can act as a multi tenant engine for the enterprise level software product and allow for more than one customer tenant to access one instance of the enterprise software product. Additionally the individual capability of the enterprise product is not necessarily expanded. If a single individual customer has too much data and or too many users for a stand alone version of the enterprise product then they will continue to have too much data and or users as per various embodiments described herein. In other words the capacity of a single instance of the enterprise software may not be expanded but an ability to run many versions of the enterprise software product within a homogeneous environment will be provided so that it appears as one large installation of the enterprise software product. While various embodiments described herein may not be able to handle a customer who cannot fit in one normal instance of the enterprise software an environment may be created that enables this customer to be broken down into smaller instances such that the collection of smaller instances would provide a homogenous environment for using the enterprise software product.

The following constructs of various embodiments described herein may be created to supply a multi tenant solution for enterprise software will be discussed in greater detail. Even if the enterprise level software has a basic construct that matches these concepts it may be limited to that particular instance of the enterprise level software. Coverage may be extended to cover a solution that binds together many enterprise level instances into one contained solution.

Once again referring to the top level pieces of an example embodiment of multi tenancy solution may be referred to as a domain . A domain is a logical structure that contains the resources that will be consumed by the product. The solution will contain one or more domains . A theoretical limit on the amount of domains the software can support is not imposed. Resources are the instances of the enterprise level software that are being serviced by the solution at a minimum. These resources may include physical and or virtual hardware necessary to run the enterprise software and or the enterprise software itself. In some embodiments domain features that improve the solution may be optionally added. An example feature added to the domain would include a Single Sign On SSO solution. A domain in this context is not necessarily an IP routing domain but can contain one or more IP routing domains depending on the enterprise products being supported by the multi tenancy solution.

A domain may include one or more customers . A customer may define a distinct entity. This entity may belong to a single domain and may consume resources from one or more enterprise software instances in that domain . A customer may include two types of entities user entity and or data entity .

Data may be a key ingredient to the multi tenancy solution. Data can take many forms and will be different depending on the enterprise software product being supported. Data may include files data supplied by the customers users themselves information about entities that need to be contacted and or data gathered from those entities such that the data can then be displayed to the users. The data aspect of the multi tenancy solution gives users a reason to log into the system. The data for each customer is formed into collections that are made available to users. These collections may include distinct file systems created explicitly for a particular customer a set of data stored in a database that is keyed to belong to a particular customer or a complex reporting group arrangement that the multi tenancy solution created in the enterprise software explicitly for that customer . The type of collection will depend on the enterprise software product. Examples will be discussed below that include SNMP data that has been collected from network hardware that has been provisioned into the system as one or more data entities by the customer . The data collected and stored from these data entities by the enterprise software may be stored in collections that were made for this customer only.

User entities are another entity type that may exist in a customer . User entities may have their own attributes that may be used to authenticate individual users and to serve as the basic information used to authorize access to any particular piece of data.

While each instance of the enterprise software supports access and control of users and data a multi tenancy solution is created according to various embodiments described herein to lay on top of this framework that allows data to be associated with a customer entity . This concept generally may not be supported by enterprise level software. The customer entity may have access to multiple products if they are supported in this instance of the solution. Data available to the users may be segregated at the individual product level. Users may be allowed to access data they are authorized to access. This data authorization may span multiple customers and multiple enterprise software products or may span multiple users. In the case of a Managed Service Provider administrators may need to access multiple customers. However the administrators may not have permission to view all customers data. Additionally the case of the third party administrator needs to be handled where the third party administrator may need access to their customers while the individual customers only have access to their individual data. In the case of multiple customer support this need may span many instances of the enterprise software but to the end user it may be desired for the solution to appear as a black box. In other words end users may not know that these separate instances exist. To each customer and or user data may be reported on in a similar manner and their access to this data is handled through a central process that hides the complexity of the solution.

Generally the administrative functions of enterprise software are handled in a manner that does not allow for the segregation of data so administrative functions may not be easily exposed to a customer s user entities. Lack of exposure to the administrative functions of the enterprise software breaks the multi tenant model. In these cases the multi tenancy solution may create an abstraction of the administrative function or functions and acts as a third party to protect the segregation of data and maintain a multi tenant environment. This segregation would allow the customer to control certain administrative aspects of the enterprise software that are important to delivering the data in a manner that adds value to the users.

Still referring to the multi tenancy solution sits at the top of relationship structure. There may be a one to many relationship of the solution to the domain . Each domain may have one to many relationship to customers . Each domain may have dedicated resources that will run the enterprise software. Each customer may have one or more data entities . Each customer may have one or more user entities associated with that customer . User entities potentially may belong to one or more customers in a domain . Customers may be assigned to one or more resources depending on the enterprise software products associated with that customer .

The multi tenancy solution depends on this structure of data to enact the multi tenancy aspect that it will deliver. The solution is created around three API layers the display layer the application layer and the data layer. The display layer is the input output layer of the solution. Interaction is handled through this display layer. The display layer the application layer and the data layer will each now be described in further detail.

The display layer is an input output layer or a Business Support Systems BSS layer that allows outside agencies to interact with the solution. Requests for data and input of data into the solution may occur through this layer. The display layer may be for example a combination of RESTful APIs and Java Web Services that accept validate and then start the processing or retrieval activities necessary to complete the request.

Referring once again to the flow of data through the application layer starts with the display layer requesting an orchestration process based on the type of order being processed add modify delete or a get request for information and the resources effected by the request provisioned devices users solution configuration etc . The orchestration process acts as the controller ensuring that many aspects of the order are handled successfully. If an error occurs these are identified such that the orchestration process acts as a link for a delivery team to troubleshoot a failed order. After resolution of the error the process may be restarted to allow the order to proceed. The orchestration layer has some business logic that analyses the order and directs activities to the correct RESTful API s or Java Services necessary to complete the order.

The data layer may be comprised of a combination of RESTful APIs and SOAP APIs available through the enterprise software products. Additionally RESTful APIs and Java Services may be created for the solution to abstract the data interaction for those enterprise software products that do not have sufficient APIs available to support the solution. Access to data is abstracted through these combinations of APIs to help drive consistency and the accuracy of the solution.

Reference is once again made to . The basic entry point into the system is a customer order . Most entries into the display layer are on behalf of a customer. A customer will perform a create read update and or delete operation on one or more data entities. A user entity will have the same functions available create read update and or delete. The user entity order may also contain customer information. There are informational APIs and APIs around the deployment of resources that are not entirely customer focused but one focus of the multi tenancy solution is on the concept of the customer.

The three tier classic model for data may be applied to the multi tenancy solution. However the display layer and the data layer may be API layers and not necessarily functional layers. Both layers may be viewed as fairly standard API layers. Various aspects of the multi tenancy solution may be embodied in the application layer which has two major sections the orchestration process and the Business Logic that is implemented with Java Services.

The application layer starts with the orchestration process. The orchestration process takes each order breaks it down to its pieces and processes each piece through the business logic that is custom for each enterprise software product. While an order may contain many data entities or user entities these will be processed one at a time through the business logic. Each data entity or user entity is treated as an individual component and may contain information unique to it.

Reference is now made once again to . According to some embodiments the multi tenancy solution may be creating a Tenant layer by defining a customer object. This is accomplished the first time an order is received for a customer who has never been encountered before as in Block . At this time the customer object is created in the solution s data store the solution may be database agnostic . The customer object may be assigned to a reporting resource in the domain associated with the customer as in Block . If the multi tenancy solution only has one domain then the default assignment is that single domain.

Enterprise software products that are associated with data will have methods of storing and collecting that data and to then report on the data stored or collected. The storage collection resources are not necessarily always the same as the reporting resources. These resources may be dependent on the enterprise software itself. There is however an assumed relationship between these components that may have to exist for the enterprise software to function. A customer object is concerned with where that customer will see the data and where the reporting resources are located. A data entity is concerned with the resource that will collect and or store the data. These can be the same resources that report on the data but that depends on the enterprise software.

Users are associated with customers and enterprise software is associated with a given customer. It is not assumed by the multi tenancy solution that by simply being assigned to a customer that a user will have access to all enterprise software associated with that customer. Users may be controlled by a combination of authorization and or authentication. Authorization will be tied into a system that will verify the identity of the user. For example authorization could be a Single Sign On SSO environment that encompasses the solution or authorization may be accomplished by setting up passwords in different enterprise software instances authorized for that particular user. Authorization may define what the user can do in the solution. This would apply to the enterprise software reporting collections the user is given permission to access and also the roles and abilities the user will have when they access the enterprise software direction. Authorization will also play a role in which users can utilize which portions of the abstracted administrative tools that will be made available to users of the multi tenancy solution.

Additional discussion of various embodiments described herein will now be provided in connection with in which specific examples are provided. It will be understood that these examples are non limiting and may be simplified compared to an actual multi tenant system in order to effectively illustrate their operation.

A detailed example of a multi tenancy solution will now be discussed. For this example there will be a customer Generic Telco Company CGT who is using the enterprise software product to fully utilize their investment in enterprise software. CGT is now either a Managed Service Provider MSP or a Communication Service Provider CSP with a MSP service. This product will be of value to the MSP marketplace where the MSP is managing a collection of resources for a customer such as servers switches routers firewalls load balancers and other infrastructure equipment. This management of resources in this example is the main role of the MSP. However the MSP either as a value add or as a source of additional income will want to supply network reporting to their customers. At this point in time this is not practical with the enterprise level software generally available for this purpose.

CA provides products according to various embodiments described herein. These products will be referred to as multi tenancy products. Enterprise products can cost hundreds of thousands of dollars and only the largest customers of the MSP will be given this value add and or optional uplift. The multi tenancy products will allow the MSP to offer these services associated with Enterprise products to many of their customers by taking the enterprise software and turning it into a multi tenant supported product. So instead of having a one to one relationship between enterprise software product and customer the multi tenancy solution will enable a one to many relationship. For example the enterprise level product in question may be a CA Technologies product such as CA Performance Management CA PM which is a network performance monitoring product. This product allows for the creation of collections creation of call groups that can then be assigned to specific users and supports multiple user access thereby meeting pre requisite needs in a enterprise level product. According to some embodiments described herein CA may provide a multi tenancy product to an MSP that will provide a wrapper around an enterprise product such as CA PM so that it may be offered to many customers.

Continuing with the ongoing example CGT will access the product through the display layer RESTful APIs and will place create read update and delete orders through this API. As part of the installation the product pieces will be installed along with all the CA Performance Management instances to meet the needs of the customer base. In this example case all of the demands may be handled with one domain and one installation of the CA Performance Management instance. Once the product is installed the basic configurations are defined in the product data store including information about the domain and the enterprise software contained in the domain. The multi tenancy product may need this information to know how to reach the resources during its provisioning process.

The customer order accesses the display layer through a RESTful API and this layer validates that required fields are populated. In some cases the raw order is stored in the solution data store as in Block . At Block if the order is invalid then execution may end here. However if the order is valid then the application layer is triggered and the orchestration process adds the order to its queue at Block . The orchestration process will pull the order from the queue at Block . Then at Block a check to see if a customer object exists in the solution data store is performed that matches the customer credentials that are included in the customer order. If a customer object does not exist then it is created before any further processing takes place at Block . The customer object is assigned to a reporting engine for the products being ordered. In this case the device is ordering performance management reporting so the customer is assigned to the CA Performance Center resource that is accepting new customers in a domain at Block . The CA Performance Center is a part of the performance management that reports on data. The concept of a customer is of importance to the solution. As such until the customer object is created processing may not progress. Then at Block once the customer object is identified and or created then each device in the order is stored in the Solution database and the device is associated with its customer. There is now a relationship between the device and the customer. Then at Block the device may be associated with the performance management resource that will collect data. The performance management resource also may be associated with the CA Performance Center that was assigned to the customer.

Now that the device and customer information are in the solution database and that entity is up to date processes may be started that add the device to the enterprise software product and start collecting data that will later be reported on as user entities are assigned to the customer. A first step in performance management is to create a discovery profile and then execute the discovery so that performance management may identify the one or more devices as in Block . Performance management may verify that it can connect to the one or more devices and extract information. At the end of discovery the performance management product may have identified a status for each of the devices just discovered as being manageable unreachable or pingable as in Block . The multi tenancy solution may update its database with this status information for each device. In some embodiments manageable devices may be of greater interest since they are the only devices from which data can be collected and reported on. Pingable and unreachable devices may need to be serviced by for example supplying the solution with the correct connection information and or updating security aspects of the network to allow the solution to have access to the devices.

Still referencing at Block manageable devices may need to be configured to collect data requested in the customer order. To do this performance management may assign these devices to collections that were pre created and associated with monitoring profiles. The monitoring profiles may define exactly what data the performance management software will attempt to collect from the device. Once the device is assigned to a method of collecting data then it is assigned to a reporting group that the solution creates explicitly for this particular customer at Block . This could include one or more groups but these groups may be controlled by the multi tenancy solution and may contain devices and device information that belongs to a specific customer. By automating this process a layer of customer awareness is on top of the enterprise software. When a user is assigned to this customer and is given permission to use the performance management product the multi tenancy solution may assign the groups created in the earlier step to that user. This will allow the user to report on the data being collected for this particular customer.

In the above processes the underlying enterprise software is unaware of the multi customer logic that is being applied to its structures. For the performance management product one group is the same as another at the same level of hierarchy. As this order system processes a set of orders for a second customer 2 the end result is a new set of reporting groups that are explicitly associated with customer 2. However these groups are explicitly associated with that customer in the multi tenancy product that sits on top of the enterprise software. Performance management may have no knowledge of this relationship and does not need this knowledge to operate. The solution create keeps track of all of these relationships. In this foregoing example customer 2 could be assigned to a different instance of performance management in the same domain. The multi tenancy product not only adds a multi tenancy feature to enterprise software but it groups all of the enterprise software into a resource bucket and then knows how to use the available resources to most fully utilize them. A user assigned to customer 1 customer 2 and customer 3 would just see an instance of the enterprise software when they access reports for any of these three customers. These three customers however could be on different instances of the enterprise software and unless the user examines the URL closely they may be unaware that these customers are on the same or different enterprise software instances.

Embodiments of the present disclosure were described herein with reference to the accompanying drawings. Other embodiments may take many different forms and should not be construed as limited to the embodiments set forth herein. Like numbers refer to like elements throughout.

It will be understood that although the terms first second etc. may be used herein to describe various elements these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example a first element could be termed a second element and similarly a second element could be termed a first element without departing from the scope of the various embodiments described herein. As used herein the term and or includes any and all combinations of one or more of the associated listed items.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting to other embodiments. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises comprising includes and or including have and or having when used herein specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof. Elements described as being to perform functions acts and or operations may be configured to or other structured to do so.

Unless otherwise defined all terms including technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which various embodiments described herein belong. It will be further understood that terms used herein should be interpreted as having a meaning that is consistent with their meaning in the context of this specification and the relevant art and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein.

As will be appreciated by one of skill in the art various embodiments described herein may be embodied as a method data processing system and or computer program product. Furthermore embodiments may take the form of a computer program product on a tangible computer readable storage medium having computer program code embodied in the medium that can be executed by a computer.

Any combination of one or more computer readable media may be utilized. The computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable signal medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Scala Smalltalk Eiffel JADE Emerald C C VB.NET Python or the like conventional procedural programming languages such as the C programming language Visual Basic Fortran 2003 Perl COBOL 2002 PHP ABAP dynamic programming languages such as Python Ruby and Groovy or other programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider or in a cloud computer environment or offered as a service such as a Software as a Service SaaS .

Some embodiments are described herein with reference to flowchart illustrations and or block diagrams of methods systems and computer program products according to embodiments. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create a mechanism for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that when executed can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions when stored in the computer readable medium produce an article of manufacture including instructions which when executed cause a computer to implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable instruction execution apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatuses or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

It is to be understood that the functions acts noted in the blocks may occur out of the order noted in the operational illustrations. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality acts involved. Although some of the diagrams include arrows on communication paths to show a primary direction of communication it is to be understood that communication may occur in the opposite direction to the depicted arrows.

Many different embodiments have been disclosed herein in connection with the above description and the drawings. It will be understood that it would be unduly repetitious and obfuscating to literally describe and illustrate every combination and subcombination of these embodiments. Accordingly all embodiments can be combined in any way and or combination and the present specification including the drawings shall support claims to any such combination or subcombination.

In the drawings and specification there have been disclosed typical embodiments and although specific terms are employed they are used in a generic and descriptive sense only and not for purposes of limitation the scope of the disclosure being set forth in the following claims.

