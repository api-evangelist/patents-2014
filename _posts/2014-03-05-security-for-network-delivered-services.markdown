---

title: Security for network delivered services
abstract: A computer-implemented method for accessing a hosted service on client devices is described. The client devices include client software that uses a remotely delivered policy to redirect network requests for hosted services to a server to enforce visibility, policy and data security for network delivered services. The method can be used in conjunction with existing VPN and proxy solutions, but provides distinct additional functionality, particularly suited to corporate needs. Policies allow entities to centralize enforcement of service-specific restrictions across networks and communication channels, e.g. only certain users can download client records from a serviceâ€”irrespective of the network used to access the service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09398102&OS=09398102&RS=09398102
owner: Netskope, Inc.
number: 09398102
owner_city: Los Altos
owner_country: US
publication_date: 20140305
---
The application claims the benefit of U.S. provisional Patent Application No. 61 773 633 entitled SECURITY FOR NETWORK DELIVERED SERVICES filed on Mar. 6 2013. The provisional application is hereby incorporated by reference for all purposes.

This application is related to U.S. patent application entitled SECURITY FOR NETWORK DELIVERED SERVICES Ser. No. 14 198 508 filed contemporaneously. The related application is incorporated by reference for all purposes.

This disclosure is generally related to providing visibility control and data security for network delivered services.

The use of hosted services for a number of corporate functions is now common. Thus instead of installing servers within a corporate network to run a customer relationship management CRM software product a software as a service SaaS solution such as Salesforce.com s offerings can be used. The IT and network architecture approaches that could log and protect access to a classic solution provide limited control. The sprawl of BYOD and the need haul that traffic back to the enterprise make it less attractive. For example VPN solutions are used to control access to the protected corporate network. Proxies both transparent and explicit may be used to filter or limit access to undesirable web sites when the client is accessing the web sites from within the corporate network. Similar filtering software can be installed on client computers e.g. safe browsing software to enforce limits on access. A viable solution should provide consistent centrally administered control e.g. enforce the same policy across multiple devices network services and networks including corporate networks.

The discussion is organized as follows. First an introduction describing some of the problems addressed by various embodiments will be presented followed by an explanation of terminology that will be used throughout the discussion. Then a high level description of one embodiment will be discussed at an architectural level. Next the algorithms used by some embodiments to provide security are discussed. Lastly more detailed architectures for implementing the system together with filtering rules models and application definitions are discussed.

We describe a system and various embodiments for providing security for network delivered services. Consider the problems faced primarily by corporations seeking to protect their data at the intersection of a bring your own device BYOD environment and the proliferation of hosted services. The company may be using Salesforce.com for CRM Dropbox for storage and Google Apps for collaboration. While users devices are using the corporate network the corporation may have some ability to log and monitor usage of these hosted services with existing network monitoring tools. However if a user uses the Salesforce.com application with their mobile device over the cellular network the user s activity is not trackable. Additionally the trend towards BYOD may also increase the likelihood of enterprise traffic bypassing corporate networks completely.

Further the activity that is tracked with traditional approaches is very much at the network level. What if you want to log data exports activity from the application Track large downloads Only allow users to access certain data or services while their location is within the European Union Additionally the system is compatible with existing VPNs proxies firewalls and filtering systems. Thus one policy could require that access to a particular hosted service by a particular user must be from client devices that are logged into the corporate VPN. For business applications developed by combining components from multiple web application services sometimes called mash ups one embodiment provides a consistent enterprise wide application level control and policy enforcement.

Some individual hosted services may offer differing levels of security and access controls one is limited to the specific items implemented by the hosted services as opposed to a uniform programmable set of controls across multiple hosted applications. This enables the system to provide access controls and event logging that exceed the native capabilities of the hosted service.

One workaround companies use is to require hosted service vendors to deploy into private clouds within the corporate network. Aside from the previously discussed limitations private clouds require that the company backhaul data to your corporate network for monitoring. In contrast embodiments provide for centralized client corporate analytics across hosted services. Secondly some embodiments provide for intentionally allowing one more access by a computer that is believed compromised. This approach may allow for better recovery of lost or stolen client devices because the access can be logged. Other embodiments assist in identifying hosted services that should be deactivated for individual users e.g. user attempts to access service are reported even if the user should no longer have access. Embodiments can also interoperate with single sign on SSO solutions and or corporate identity directories e.g. Microsoft s Active Directory. Such embodiments may allow policies to be defined in the directory e.g. either at the group or user level using custom attributes.

Also it should be mentioned that another feature of embodiments is that hosted services configured with the system are also configured to require traffic via the system. This can be done through setting IP range restrictions in the hosted service to the IP range of the system and or integration between the system and SSO systems. For example integration with a SSO solution can enforce client presence requirements before authorizing the sign on. Other embodiments may use proxy accounts with the SaaS vendor e.g. a dedicated account held by the system that holds the only credentials to sign in to the service. In other embodiments the client may encrypt the sign on credentials before passing the login to the hosted service this means that the networking security system owns the password.

Hosted Service A hosted service refers to a network hosted service or application accessed via a uniform resource locator URL . Examples include both software as a service SaaS offerings platform as a service PaaS offerings infrastructure as a service IaaS offerings as well as internal enterprise applications that are exposed via URLs. Examples of common hosted services today include Salesforce.com Box.net Dropbox Google Apps Amazon AWS Microsoft Office 365 Workday Oracle on Demand Taleo Yammer and Concur. Hosted services provide functionality to users that is implemented in the cloud and that is the target of policies e.g. logging in editing documents downloading bulk data reading customer contact information entering payables deleting documents in contrast to the offerings of a simple website and ecommerce sites. Note that some consumer facing websites e.g. Facebook can be quite complex however they lack the concept of a managed corporate grouping of users and or data that could be subject to custom policies. Thus Yammer which offers a social network for corporations is the type of hosted service considered here while the current consumer oriented Facebook is not. Some services e.g. Google s Gmail can be a hybrid with some free users using the application generally while other corporations use it as a hosted service. Note that embodiments can support both web browser clients and application clients that use URL based APIs. Thus using Dropbox as an example user activity on the Dropbox website as well as activity of the Dropbox client on the computer could be monitored.

User Identity User identity or user identification in the context of this specification refers to an indicator that is provided by the network security system to the client device. It may be in the form of a token a unique identifier such as a UUID a public key certificate or the like. In some embodiments the user identity may be linked to a specific user and a specific device thus the same individual may have a different user identity on their mobile phone vs. their computer. The user identity may be linked to an entry or userid corporate identity directory but is distinct from it. In one embodiment a cryptographic certificate signed by the network security is used as the user identity. In other embodiments the user identity may be solely unique to the user and be identical across devices.

Policy The term policy sometimes also referred to as a policy definition or policy data refers to a machine readable representation of flow control and logging requirements for hosted services. Typically a policy is defined by one or more administrators at a corporation or other entity and is enforced upon users within that corporation or entity. It is possible for individuals to define policies for their own usage that are enforced upon them however corporate usage is the more common case. It is also possible for a policy to be enforced on visitors or customers of a hosted service e.g. where a corporation hosts a service and requires visiting customers to adhere to the policy for use. Of particular note is that the policies considered herein are capable of being sensitive to the semantics of a hosted application which is to say a policy can differentiate between logging in to a hosted service from say editing documents on the hosted service. Context is important for understanding usage for an entity the collection of dozens or hundreds of individual policies e.g. log bulk downloads prohibit editing documents on the service only allow bulk downloads for users who are in the Vice President group is referred to singularly as one policy or one policy definition. Thus a system supporting multiple entities will generally have one policy per entity each made up of dozens or hundreds of individual flow control and logging policies. Similarly as discussed infra the policy that is transferred to individual computers may be a subset of a full corporate policy e.g. solely a machine readable representation of the URLs of interest as opposed to the full policy specification for each URL describing the flow control and or logging behaviors.

Mobile and Tablet vs. Computer Portions of the specification may make distinctions between two types of client devices used by users to access hosted services. The primary distinction is between the mechanisms for coupling the client device to the network security system. In relation to client devices the term computer will refer to more open systems where the network security system can more directly install software and modify the networking stack. Similarly in relation to client devices the terms mobile or tablet will refer to more closed systems where the network security system options for modifying the network stack are more limited. This terminology mirrors the situation today where computer client devices running Mac OS X Windows desktop versions and or Linux can be more easily modified than mobile or tablet devices running iOS Android and or Windows Mobile. Thus the terminology refers to how third party operating system vendor limitations are addressed to provide access to the network security system as opposed to a fundamental technical difference between the types of client devices. Further if mobile OS vendors open their systems further it is likely that the distinction could be eliminated with more classes of client devices using the embodiment described in the computer client discussions. Additionally it may be the case that certain server computers and other computing devices within an organization may have the client installed to cover machine to machine communications.

A closely related point is that some clients interface with the network security system differently. The browser add on clients for example redirect the browsers to an explicit proxy. Only the traffic needed to apply the policy to is rerouted and it is done so within the application. The traffic arriving at the network security system can have the user identity embedded in the data or within the secure tunnel headers e.g. additional headers or SSL client side certificates in some embodiments. Other clients redirect select network traffic through transparent proxies. For these connections some traffic beyond exactly those requests needed by the policy may be routed to the network security system. Further the user identity information is generally not within the data itself but rather established by the client in setting up a secure tunnel to the network security system.

We describe a system and various embodiments for providing security for network delivered services. The system and processes will be described with reference to showing an architectural level schematic of a system in accordance with an embodiment. Because is an architectural diagram certain details are intentionally omitted to improve the clarity of the description. The discussion of will be organized as follows. First the elements of the figure will be described followed by their interconnections. Then the use of the elements in the system will be described in greater detail.

The interconnection of the elements of system will now be described. The network couples the tablet the mobile the mobile the computer the hosted service the hosted service and the network security system in communication indicated by solid lines . The actual communication path can be point to point over public and or private networks. Some items such as AppWrapper might be delivered indirectly e.g. via an application store not shown . All of the communications may occur over a variety of networks e.g. private networks VPN MPLS circuit or Internet and may use appropriate APIs and data interchange formats e.g. REST JSON XML SOAP and or JMS. All of the communications can be encrypted. This communication is generally over a network such as the internet inclusive of the mobile internet via protocols such as EDGE 3G LTE Wi Fi and WiMAX. Additionally a variety of authorization and authentication techniques such as username password OAuth Kerberos SecureID digital certificates and more can be used to secure the communications.

Controller and storage can include one or more computers and computer systems coupled in communication with one another. They can also be one or more virtual computing and or storage resources. For example controller may be one or more Amazon EC2 instances and storage may be an Amazon S3 storage. Other computing as service platforms such as Force.com from Salesforce Rackspace or Heroku could be used rather than implementing network security system on direct physical computers or traditional virtual machines. Additionally to implement the functionalities one or more points of presence POPs may be established. For example the data plane POPs may be distributed geographically and or co hosted with particular hosted services. Similarly the management plane POPs may be distributed geographically. The two types of POPs may be either separately hosted or co hosted as well.

Having described the elements of and their interconnections elements of the figure will now be described in greater detail. The network security system provides a variety of functionalities including providing a management plane and a data plane . Other functionalities e.g. control plane may also be provided. These functionalities collectively provide secure network access to the hosted services by client devices . Although we use the term network security system to describe network security system more generally the system provides application visibility and control functions as well as security.

The management clients according to one embodiment are computing devices with a web browser with a secure web delivered interface provided by the network security system to define and administer policies . The network security system according to some embodiments is a multi tenant system so a user of a management client can only change policies associated with her organization. In some embodiments APIs may be provided for programmatically defining and or updating policies. In such embodiments the management clients might include one or more servers e.g. a corporate identities directory such as a Microsoft Active Directory pushing updates and or responding to pull requests for updates to the policies . Both systems may co exist for example some companies may use a corporate identities directory to automate identification of users within the organization while using a web interface for tailoring policies to their needs. Management clients are assigned roles and access to the network security system data is controlled based on roles e.g. read only vs. read write.

The function of the network security system with respect to client devices is easier to describe in conjunction with shows the virtual network topology of a system in accordance with an embodiment shows a more detailed network topology and data flow of a system in accordance with an embodiment. For both figures an attempt by a user of computer to access hosted service is shown. shows a conceptual view of the communication path with the network security system and the data plane serving to create a virtual network intermediating communications between the computer and the hosted service . shows one possible network topology for the same communication with the computer coupled to an ISP network optional which is in turn coupled to a corporate network optional which is in turn coupled to the public network . The public network is in turn coupled to the hosted service and the network security system and the data plane . Although is one possible network topology it remains a simplified architectural view rather than a direct network layout. For example the networks that the hosted service and the network security system operate on are not shown e.g. the service providers also ISPs for both are omitted. includes time stamps tto tthat highlight the sequential routing order that the client causes requests to the hosted service to take. Of particular note is that requests such as a web browser HTTP GET request for a URL of a hosted service are routed atypically. Specifically the client identifies the request and causes the route to go tto tand into the network security system rather than to the hosted service . The network security system analyzes the user identity and the applicable policy before routing the request to the hosted service tto t. Notably from the perspective of the hosted service the request will go back to the network security system tto t rather than directly to the computer . The network security system can analyze the returned data apply further policies in a user identity dependent fashion and then return the response from the hosted service to the computer tto t. also highlights that the client is compatible with and distinct from existing VPN proxy and network monitoring solutions. In the network access of computer is being routed using a VPN solution onto the private corporate network . This also means that corporate proxy firewall and content filtering policies can generally be applied. The corporate proxy should be configured with appropriate rules to forward chain requests to the network security system . Additionally while focus on a primarily hosted network security system it is possible to have an on premise or enterprise hosted private solution. In such an embodiment all or portions of the network security system may be completely within the corporate network.

As discussed the corporate administrator should have previously configured the hosted service to service requests for users of the corporation from the network security system . This prevents client devices that are lacking the client or the counterparts for mobile from bypassing the policies enforced by the network security system . As noted other approaches to ensuring that hosted services are only accessed through the network security system can be employed.

Returning to a general view of how the network security system functions has been provided. Companies or more generally any individual or entity wishing to better secure their use of network hosted services sign up with the network security system . Using a web based interface and a computer device the company can establish a policy in policies for their users. For each user and optionally each device a user identity e.g. user identity stored with user identities is generated by the network security system . The user identity together with an appropriate client e.g. client selected from clients are installed into the user s client device s . For example for a computer such as computer a client with the user identity included is loaded. For a mobile device multiple approaches can be used a VPN on demand can be installed included in clients and or wrapped applications such as AppWrapper can be installed. These approaches will both be discussed now in greater detail.

The onboarding process and hosted service access provided by the network security system will be described first by focusing on computer style client devices.

Consider a user s first access with computer . First an administrator must enroll the user via the management interface. In one embodiment after enrollment by administrators email provisioning is provided. The email includes a hyperlink or similar mechanism for the user to download and install a client that is either a browser add ons and or b secure tunneling agents. Additionally a user identity e.g. user identity and a policy e.g. policy will be provided either embedded into the downloaded client or as standalone items. The browser add on or extension the terms will be used interchangeably functions in an analogous fashion to existing web browser PAC files however because the specific routing is dynamic based on the policy and client certificates representing the user identity are used the browser add on extension embodiment is chosen in one embodiment. In another embodiment the add on regularly updates the proxy auto config PAC file for the browser that contains the appropriate URLs for routing to the network security system and applies the appropriate user identity information.

If a user has multiple web browsers installed add ons may be installed for each browser or only for certain browsers depending on the policies set by the administrator. Here the policy is a machine readable representation of the URLs that should be routed through the network security system . As discussed supra this is a subset of the full policy itself a collection of dozens or hundreds of individual policies that are defined on the network security system by the user s company. Thus the policy would indicate that URLs like Yahoo Finance would likely not be routed to the network security system while a hosted service like the corporate SaaS CRM solution Salesforce.com would be. Because the URLs affected by the policy are kept client side the policy can also be periodically updated from the network security system by the client . As noted according to one embodiment the user identity is a certificate that is used to sign the packets routed to the network security system . In other embodiments the certificate is provided on connection with the SSL TLS connection establishment and then packets are transmitted normally.

The secure tunneling agent client is a more traditional standalone application. Whether or not it is installed is similarly configured by the administrator e.g. in the policy for that user. The secure tunneling agent helps secure hosted services that operate outside the web browser e.g. a Dropbox that has an application client. One embodiment divides the secure tunneling agent into two components i a network driver loaded into the kernel that performs packet analysis combined with ii a user service that provides a secure tunnel for the packets to the network security system . Embodiments cache DNS results and perform reverse DNS lookups or sniffing to identify network requests targeted for URLs covered by the policies and to re target those requests to the network security system after signing the requests with the client certificate.

In the browser add on case the network security system serves as an explicit proxy. In contrast in the secure tunneling agent computer client embodiments the network security system serves a transparent proxy to the hosted service. The mobile clients similarly divide with the VPN on demand approach working like an explicit proxy while the AppWrapper approach working like a transparent proxy. The primary distinction between the process flow of and that of is that focuses on the more client focused generally explicit proxy case while focuses on the more server focused generally transparent proxy case.

Process continues at step with a request for a URL of a hosted service being received. In the browser add on context the URL is directly received and subject to analysis. This may also allow for subtle differentiation e.g. handling subdomain.domain.tld differently from www.domain.tld. In contrast in the case of the secure tunneling agent network packets destined to IP addresses that match the DNS resolution of a URL controlled by the policy are identified. Thus if subdomain.domain.tld and www.domain.tld share the same network address both will be routed even if the policy only applies to one and not the other. This type of failure will generally lead to over inclusion on the client side. The over inclusion is handled appropriately on the server side.

In some embodiments the network security system performs application signature generation to assist companies in generating policies that describe hosted services easily. Signature generation includes periodically crawling a predefined list of domains of hosted services. For each hosted service the URLs referred to by the pages crawled that do not need an account or login are identified. This is a whitelist of URLs associated with a hosted service that are generally outside of the policies. Similarly a list of domains and associated URL formats that correspond to a given hosted service can be provided this becomes a blacklist of URLs. In one embodiment the blacklist is manually maintained. Thus for a policy definition that applies to hosted service X would include URLs and or a signature in the client side policy of the browser add on to make a decision about whether or not the policy applies as follows.

First extract the domain name and URL are extracted from the HTTP request. Second if the domain name or URL is on the blacklist or contains a variation of the company identifier e.g. if company identifier is netskope or exampleco look for hostedservice.com netskope or exampleco.hostedservice.com treat the request as a request for the application. Note in some embodiments the administrator for a company can identify the company specific identifier used for each hosted service via the management interface. Similarly if the domain name or URL is present on the whitelist the request can be bypassed.

This approach can also be used on the server side to limit the application of policies to relevant URLs. Additionally in some embodiments the crawling process identifies a list of URLs corresponding to login events for various hosted services. This list can assist in identifying hosted service login events.

In other embodiments operators of hosted services may provide information to the operator of the network security system to assist in policy definition and identifying whitelists blacklists.

Next at step the URL is selectively routed according to the policy. For URLs that are not covered by the policy the normal host operating routing system is applied not shown . For those that are covered by the policy the request is signed using the user identity and routed to the network security system .

At step the policy is applied based on the user identity . Counterintuitively even prohibited hosted services and their corresponding URLs generally reach step to enable server side logging. In a similarly counterintuitive vein deactivated user identities including for stolen lost devices can be set to a compromised state on the network security system . This allows one use or perhaps more of the computer but denies access. Thus a user identity that has been marked as compromised appears to connect to the network specifically network security system but is rebuffed by the policy at step from accessing the hosted service. However the activity and other information about the compromised client device can be logged and or reported out. Still other embodiments may download computer programs and or trigger programs in the client to deactivate the client device and or to indicate to the user that that device is lost or stolen.

Returning to process and step a typical policy will log certain events see infra associated with the request and generate a new request to the hosted service see and tto t . When the hosted service responds to that request optionally further policy filtering can occur.

Normally though at step the response from the hosted service is received using the client identity and sent back with the client device from the network security system . Note as discussed infra this response is typically inspected and subjected to policy before being sent back to the client device.

Notably process reinforces the points made in discussing conceptually there is a virtual network between the computer and the hosted service and it is implemented with requests from the computer for the hosted service going to the network security system instead of to the hosted service.

Application definitions discussed infra allow fine grained control. Thus if graphics resources for a service are hosted at a distinct URL they can be exempted from the application definition and thus excluded from the policy.

Turning the discussion to mobile clients as noted the primary distinction is the flexibility provided by operating system vendors to modify applications and or install software. As noted supra the rationales for these restrictions are not generally technical limitations of the operating system but rather contractual and or embodiment decisions of the operating system vendor. For example although the Google Chrome web browser for desktop operating systems can support an add on client Google Chrome for Android has add ons turned off. Similarly contractual rules set by Apple for the App Store limit the ability of an installed piece of software to install network drivers or modify other applications.

Thus for mobile two primary client embodiments are used at present. Both achieve a similar effect of providing traffic to the network security system for more detailed analysis. The first embodiment is to custom wrap the application e.g. AppWrapper . Thus instead of installing the general Dropbox client from the Apple App Store you would install a version of the client wrapped in the mobile device management MDM mobile application management MAM policies to tunnel traffic to the network security system . This approach relies on the corporate administrators capability to wrap applications corresponding to one or many hosted service. Depending on the client platform the corporate administrator may have to wrap each application individually or alternatively leverage an application sandboxing solution to wrap multiple applications. The other embodiment is to install a VPN on demand . On certain platforms most noticeably iOS the VPN on demand embodiment would tunnel all traffic or all traffic on certain ports to the network security system when the VPN is active. On iOS for example this second embodiment is analogous to the approach used for network accelerators. In some other embodiment a VPN on demand may support split tunneling forwarding only select traffic to the system. In the split tunnel case this second embodiment is functionally analogous to the secure tunneling agent client . Either approach ensures that the mobile client is configured to trust the SSL certificate used by the network security system across multiple domains to allow something analogous to the behavior of certain proxy interception and analysis techniques.

The server focused handling used by secure tunneling approaches is discussed in . includes process which starts at step with the network security system receiving an encrypted request for analysis. At step the encrypted request is received and analyzed the user identity is determined and the packet is prepared for handling by the rest of the network security system . More specifically the encrypted request is decrypted analyzed to identify applicable policies which are applied . Then prior to transmission to the hosted service the communication is re encrypted. As noted above whereas in the computer client case the network security system was functioning more analogously to an explicit proxy step must handle the request in an analogous fashion to a transparent proxy. Additionally user identity is typically identified in this case from the tunnel set up information this is in contrast to step where at least for the explicit proxy case the user identity information is embedded into the request that goes to the network security system itself. This dual operation of the network security system is notable as are the dual mechanisms for the system to retrieve user identity information from client transmissions.

Next at step analogous to step the policy is applied. Note that in contrast to step it is more likely if over tunneling is occurring that non covered services e.g. Yahoo Finance as opposed to covered services are being routed through the network security system for analysis. For services covered by the policy appropriate event logging and policy enforcement occurs. If appropriate the request is sent to the hosted service or the other website and when the response is received the policy can optionally be applied again. Finally at step the response is sent back to the mobile client. As at step precautions need to be made to handle the return response so that it is accepted by the mobile clients similarly to those made by a transparent proxy.

Having discussed the functionality the embodiment architecture used by one embodiment will be discussed in connection with . As discussed supra the functionalities of the network security system divide into two primary groups management plane and data plane . Additionally a control plane may be used. The specific division of functionality between these planes is an embodiment choice. Similarly the functionality can be highly distributed across a number of points of presence POPs to improve locality performance and or security. For example either management plane or data plane POPs can be co located with hosted services or with corporate networks.

The data plane POP also includes a configuration agent for receiving configuration and policy information from the management plane an event queue for recording and or storing events to be sent to the management plane and a monitoring agent for monitoring the performance and status of the data plane POP . These items are generally coupled in communication with one or more management plane POPs e.g. management plane POP of as well as the other elements of the data plane not shown in order to focus on the data flow . Similarly the configuration systems are not shown here. The difference between configuration and policy is that configuration information is information provided by the operator of the network security system e.g. how many data plane POPs to have active what version of the proxy software to load etc. while policy information is provided by administrative users of the system e.g. corporate IT personnel.

Also shown in is an example of the secure tunnel used by mobile and other mobile clients. In contrast the data from computer is routed directly from the firewall to the load balancer . As discussed some client types use secure tunnels here one is being used for mobile and others do not here one without a secure tunnel is being used for the computer .

Management plane POP includes summary data raw event data configuration policies web management interface provisioning service configuration service event storage service monitoring service and report generator . The services bridge the management data planes configuration service communicates with configuration agent event storage service communicates with event queue monitoring service communicates with configuration agent . The report generator is a management plane only item in this embodiment combing the raw event data to generate summary data for reporting. The web management interface enables administration and reporting via web browsers. The provisioning service provides client devices with the appropriate client e.g. client or VPN on demand from clients as discussed supra for configuration. The provisioning service may also be responsible for providing policy updates to client devices . In other embodiments event storage service and or monitoring service may accept data directly from hosted services and or other sources for unified logging and reporting.

Embodiments may support two primary types of individual policies logging policies e.g. events and flow step policies e.g. what happens to the user s request . The two types are related but administrators may conceptualize them differently. Accordingly they may be distinctly administered in some embodiments while in other embodiments a single policy type exists with configuration options to indicate whether a given policy is one or the other type. Customers can establish defaults for what types of events are logged note that in some embodiments event tracking occurs but is not shown to users based on their log level. Thus a user might only want to see certain security violations but the operator of the system may want to track all secure tunnels e.g. secure tunnel created for mobile devices. Thus the event services would capture the event but record it in such a way that it might not be visible to the administrator.

For logging policies the default behavior in one embodiment is for the administrator to pick a logging level from a selection of levels defined by the operator of the network security system and only events of that level and more severe are shown. The administrator can then tailor the logging by adding more events under certain conditions. For example log level severe only but add policies for downloads to disk from an application or hosted service. A sample set of logging policies according to one embodiment includes the following 

For flow action policies there is a default to permit or default to deny policy and then administrators supplement the policy with application user and group specific policies. If only one flow action policy matches then a determination is made whether to drop reset or redirect a particular request or entire flow of requests responses . If multiple policies match different rules can be used by the system to pick the priority e.g. most specific policy to least specific policy most conditions matched first policy tested in sequence that matches administrator can re order most restrictive policy outcome selected drop wins over reset wins over redirect . Generally a policy can be considered as testing a set of match conditions and the performing one or more actions. The most common actions are permit block or deny redirect asks client to go to another site might prompt user to request permissions from the administrator log reset drops the TCP connection and encrypt data within application payload . Another action could be to invoke another external service integrated in the network security server or outside to process the data further. We will use block as a common example of a policy action in the below descriptions but more generally any action can be applied.

Condition variables are used to determine policy matches for both logging and flow actions. The policy itself can define a match in terms of condition variables tested for a simple direct match hierarchical parent child matches and or more complex logical matches.

Turning to the condition variables time windows can be specified window types may also include time date information to narrow the window 

Additionally geolocation mapping is supported and depending on the library libraries used e.g. maxmind geoip library different condition variables may be available e.g. city country region postal code latitude longitude.

Application variables are linked to the application definitions which provide the signatures for specific applications. Thus as discussed infra in connection with specific resources and even custom condition variables can be exposed on a per application basis. Also matches may be any of literal matches pattern matches and or regular expression matches.

Lastly device and client platform condition variables are available such as browser family e.g. Chrome Internet Explorer Safari OS family e.g. Windows iOS MacOS Linux Android OS subfamily e.g. for Windows 7 vs. Vista device type e.g. desktop mobile device subtype e.g. for desktop PC vs. Mac for mobile tablet vs. smartphone .

Application definitions of hosted services define how interactions with hosted services should be used. The language to represent application definitions is related to the Web Application Definition Language WADL with significant additions for purposes of providing network security systems.

The first example is shown in and includes application definition for Google Documents. As the short example shows this is a relatively simple service to define with the identity XML tags determined by simple XML matching. Next resources are defined and an example of how a parameter URL can be parsed and parameters extracted to assign to variables is shown with and XML tags. No triggers are used in this example since the URLs are sufficient for identifying the flow actions of concern e.g. document access file upload etc. Also in this example a custom variable for the document id is established.

Since the application definitions are defined in a simple XML markup language they can also be provided by administrators of a corporation. For example if the corporation has a custom hosted service they could provide their own application definition.

A typical user interaction with a hosted service like Salesforce.com consists of a sequence of events that occur in the context of a session. The main events of note are a login provide user credentials to hosted service to authenticate the user b application transactions execute a set of application level transactions e.g. add leads or define new campaigns and c log out this event terminates the session with the server. In this context an application session connects these interactions for the network security system. Deep packet inspection logic can identify these events and link policy evaluations to each transaction boundary enabling actions to be taken. Most commonly the application session is identified by a session cookie in the HTTP header. The network security system can use the session cookie to define the session.

The trigger here in this embodiment requires each valid status to be spelled out e.g. separate match tests are required for 200 status and for 302 status. However some embodiments may include shortcuts for matching HTTP responses e.g. SUCCESS and or accept regular expressions for matching e.g. 200 302 .

Having discussed the key condition variables additional elements of policy enforcement will be considered. This section provides additional details for one embodiment of implementing step of process and step of process discussed supra.

For flow action policies enforcement points may occur at multiple junctures. For example a source IP range or country code geolocation enforcement can be applied when the connection is established but a policy to block specific file uploads to an application would likely only be enforceable when HTTP POST data becomes available when the application identifier and resource identifier condition variables are set. Thus key points for policy enforcement within the network security system include 

Now we present a more detailed process view of the filtering performed at step or step in conjunction with . In terms of embodiment could be carried out by the proxies e.g. proxy or or the control plane portion of the data plane not shown directing the proxies. includes process and also context is shown with dotted lines to emphasize the ongoing dynamic updates of information. The context includes connection specific information note process is performed separately for each connection. Thus if a single client device has two connections to the same hosted service simultaneously each would be handled by a separate instance of process according to one embodiment.

The list of items in context is exemplary rather than exhaustive and includes the user including late binding resolution based on application behaviors see account name condition variable supra group similarly potentially late binding a session identifier an application identifier and other condition variables. Many of these items are not available initially and are updated or refined as the connection continues.

The process starts at step with the connection commencing and the initial context being established. Next at step a determination of whether the full user identity is available is made. Generally the identity is available e.g. from the client certificate. But for many hosted services and policies additional information may be necessary. For this reason step is revisited periodically to allow for updated actions based on late binding e.g. information from subsequent data in the connection.

At step a determination is made whether any static policies e.g. policies not requiring deep packet inspection or application specific triggers denial match. A large percentage of policies can be enforced without needing to perform the dynamic analysis. This can reduce the processing needs. For static denial matches the flow continues at step where the static policy is enforced and the data is not transmitted onward to the hosted service if appropriate suitable error messages responses are transmitted back to the client device. Process flow will continue at step if additional data arrives for the same connection. Given that the policies are fine grained and linked to application semantics e.g. editing downloading it is entirely possible that denials can be followed by subsequent allowances.

Returning to step if none of the static policies matched for denial then the flow continues at step with dynamic analysis of the data packets of the requests responses within the connection. Multiple packets may need to be consumed to carry out the analysis e.g. if a policy limits downloads to 100 kilobytes kB multiple response packets from the hosted service may need to be received to test the policy. At step the context is also updated see e.g. and tags of the application definitions. When a policy denial matches flow continues to step with the denial enforced see discussion of step and flow will continue from step to step . Additionally flow will continue from step to step if all policy conditions have been tested and the flow is permitted.

The policy enforcement framework is also extensible to allow policy actions to be expanded beyond the described items. In some embodiments for example custom policy actions can include selective in line scanning of data in transition to detect and prevent data leakage. In other embodiments a policy action can invoke an anti virus module to scan data in transit for malware and viruses. Still other embodiments dynamically to perform operations such as selective data encryption or decryption. In one embodiment the goal can be to ensure that sensitive data uploaded or stored in hosted services is encrypted. Thus encryption can occur on the network security system when data moves from the client to the hosted service and decryption can occur similarly occur on the network security system when data moves from the hosted service to the client. Still other embodiments may aid with compliance with corporate policies and government regulations e.g. HIPAA that require local copies of data to be encrypted. Thus a download of records e.g. patients customers could be automatically encrypted by a policy triggered by the network security system before it is provided to the requesting client. The encryption and decryption keys or passwords can be specified in the policy and or the third party system. For example all draft tax returns that are downloaded could be automatically encrypted with the last four characters of a user identifier. In still other embodiments the encryption system may have a default password for the user that is provided to the network security system. In another embodiment the encryption is based on a key or password based on the user identity. For example the password based on the user identity could be a corporate encryption password for a common group of users. In another embodiment the key could be a common token e.g. a group certificate.

In another embodiment encryption could be performed down at the field level. For example only encrypting social security numbers or credit card number columns in a spreadsheet. Similarly in another embodiment the message contents of emails might be encrypted but headers could be left alone.

The network security system generates logging information e.g. raw event data with information gleaned from the data passing through the system. is an exemplary event log entry including event log entry in a JSON style representation. Event log entry is not exhaustive of the fields that are logged but rather highlights key fields.

Additionally event logs from external sources can also be provided to the network security system . Mining of the event data can thus accomplish several key tasks 

According to one embodiment the raw event data is analyzed using machine learning techniques to establish the baseline. Both supervised rules based and unsupervised clustering methods can be employed. The baseline data and anomalies can be presented in a human manageable format through the management interface. For example access patterns based on geo location could be presented using a map interface with points representing users and hosted services and connective arcs showing the usage. According to another embodiment there is an API available to mine the raw data . This API can be used by partners to build value added applications using the data collected by the system. Notably the anomalies can be tracked across multiple hosted services. For example a download of data from one service followed by an upload to a second could be an anomaly policy that is automatically detected. Other cross service policies having to do with data integrity and security can similarly be established with suitable conditions.

We describe a system and various embodiments for providing security for network delivered services. As discussed this provides for a type of virtual network between clients and hosted services with fine grained filtering and steering linked to user identities and application level semantics.

Any data structures and code described or referenced above are stored according to many embodiments on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. This includes but is not limited to volatile memory non volatile memory application specific integrated circuits ASICs field programmable gate arrays FPGAs magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

The preceding description is presented to enable the making and use of the invention. Various modifications to the disclosed embodiments will be apparent and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention. Thus the invention is not intended to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein. The scope of the invention is defined by the appended claims.

