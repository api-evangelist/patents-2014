---

title: Method and system for tracking information transferred between storage systems
abstract: Methods and systems for tracking information that is transferred from a source to a destination storage system are provided. The source storage system maintains a first data structure for indicating that a storage block has been transferred. The destination storage system receives the storage block and updates a second data structure to indicate that the storage block has been received. The first data structure and the second data structure are compared to determine that the storage block was successfully transferred from the source storage system and received by the destination storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09513999&OS=09513999&RS=09513999
owner: Netapp, Inc.
number: 09513999
owner_city: Sunnyvale
owner_country: US
publication_date: 20140113
---
The present disclosure relates to storage systems and tracking information that is transferred from a source storage system to a destination storage system.

Various forms of storage systems are used today. These forms include direct attached storage network attached storage NAS systems storage area networks SANs and others. Storage systems are commonly used for a variety of purposes such as providing multiple users with access to shared data backing up data and others.

A storage system typically includes at least one computing system may also be referred to as a server or storage server which is a processing system configured to store and retrieve data on behalf of one or more client computing systems clients . The storage system may be presented to a client system for storing information.

Often information from a source storage system is transferred to a destination storage system using a network link for disaster recovery or any other reason. However information may not be successfully transferred due to errors involving network links and or due to various modules that may be involved with a transfer. For reliable disaster recovery it is desirable to confirm that after a transfer is initiated at the source storage system the information is actually successfully transferred and received by the destination storage system.

As a preliminary note as used in this disclosure the terms component module system and the like are intended to refer to a computer related entity either software executing general purpose processor hardware firmware and a combination thereof. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computing device. By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. Also these components can execute from various computer readable media having various data structures stored thereon.

The components may communicate via local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems via the signal .

Computer executable components can be stored for example at non transitory computer readable media including but not limited to an ASIC application specific integrated circuit CD compact disc DVD digital video disk ROM read only memory floppy disk hard disk EEPROM electrically erasable programmable read only memory memory stick non transitory storage media or any other storage device type in accordance with the claimed subject matter.

The various aspects of the present disclosure provide methods and system for tracking information that is transferred from a source storage system to a destination storage system. The source storage system maintains a first data structure for indicating that a storage block has been transferred. The destination storage system receives the storage block and updates a second data structure to indicate that the storage block has been received. The first data structure and the second data structure can be compared to determine that the storage block was successfully transferred from the source storage system and received by the destination storage system.

Each storage system may include or interface with a storage subsystem shown as A N having multiple mass storage devices A N may also be referred to as storage device or storage devices . The mass storage devices may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magneto optical MO storage or any other type of non volatile storage devices suitable for storing structured or unstructured data.

The storage system executes a storage operating system for managing storage space within storage subsystem and presenting storage space to clients . As an example storage operating system maybe the DATA ONTAP storage operating system available from NetApp Inc. that implements a Write Anywhere File Layout WAFL storage system or any other suitable storage operating system.

Storage operating system and applications running on the client systems . .N communicate according to well known protocols such as the NFS protocol or the CIFS protocol to make data stored on storage device appear to users and or application programs as though the data were stored locally on the client systems . .N. CIFS means the Common Internet File System Protocol an access protocol that client systems use to request file access services from storage systems over a network. NFS means a Network File System a protocol that allows a user to access storage over a network.

Storage operating system can present or export data stored at storage devices as a volume may also be referred to as a storage volume or one or more qtree sub volume units to each of the client systems . .N. In one aspect a volume is a logical data set which is an abstraction of physical storage combining one or more physical mass storage devices or parts thereof into a single logical storage object. From the perspective of a client system each volume can appear to be a single storage drive. However each volume can represent the storage space in one storage device an aggregate of some or all of the storage space in multiple storage devices a RAID group or any other suitable set of storage space. Each volume may be configured to store data containers for example data files scripts word processing documents executable programs structured and unstructured data and the like. Specifically each volume can include a number of individually addressable files.

The storage operating system may implement a high level module such as a file system to logically organize the information stored at storage devices as a hierarchical structure of directories files blocks structured and un structured data may be referred to as data containers . For example each on disk data container may be implemented as set of data structures i.e. blocks configured to store information such as the actual data for storage volumes. These data blocks are organized within a logical volume block number vbn space that is maintained by the file system. The file system organizes the storage data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system. The file system typically consists of a contiguous range of vbns from zero to n for a file system of size n 1 blocks.

In a typical mode of operation one of the client systems . .N transmits one or more I O input output commands such as an NFS or CIFS request over network to the storage system to read or write information. The storage system issues one or more I O commands to storage device to read or write the data on behalf of the client system. The storage system also issues an NFS or CIFS response containing the requested data over network to the client system.

In some instances operating system may present storage system to clients as virtual storage systems may also be referred to as a vserver and also referred to as virtual storage system . The virtual storage system is addressable by the client systems and handles input output commands just like storage system . This allows one to present a physical storage system as multiple virtual storage systems to various clients.

Each virtual storage system is assigned a unique access address that is used by a client to access the storage system. For example each virtual storage system is assigned an Internet Protocol IP address that is used by client to send I O commands. The IP address may be assigned when a virtual storage system is configured using a management application executed by management console .

The management console may be for example a conventional PC workstation or the like. The storage management application can be a software application typically used by a storage network administrator to manage a pool of storage devices and other modules of system .

Communication between the storage management application and storage system may be accomplished using any of the various conventional communication protocols and or application programming interfaces APIs the details of which are not germane to the technique being introduced here. This communication may be enabled by network or via a direct link not shown between the management console and one or more of the storage systems.

The storage blocks or data stored at the storage blocks managed by source storage system for example A may be transferred to a destination storage system for example N for disaster recovery or any other reason. The term block storage block or storage unit are used interchangeably throughout this specification. The various aspects described herein provide a mechanism to track and confirm that storage blocks are successfully transferred from the source system and received by the destination storage system.

The adaptive aspects described herein can be implemented in a cluster based system that has a distributed architecture unlike the monolithic architecture of the non clustered environment. depicts an illustrative aspect of a clustered storage environment including a plurality of client systems . . similar to clients . .N a clustered storage system and at least one computer network communicably connecting the client systems . . and the clustered storage system . The clustered storage system includes a plurality of nodes . . a cluster switching fabric and a plurality of mass storage devices . ..

Each of the plurality of nodes . . may be configured to operate as a source storage system or a destination storage system. Each node may include an N module a D module and an M host each of which can be implemented as a separate processor executable or machine implemented module. Specifically node . includes an N module . a D module . and an M host . node . includes an N module . a D module . and an M host . and node . includes an N module . a D module . and an M host ..

The N modules . . include functionality that enables the respective nodes . . to connect to one or more of the client systems . . over the computer network while the D modules . . connect to one or more of the storage devices . ..

The M hosts . . provide management functions for the clustered storage system . Accordingly each of the plurality of server nodes . . in the clustered storage server arrangement provides the functionality of a storage server.

A switched virtualization layer including a plurality of virtual interfaces VIFs is provided below the interface between the respective N modules . . and the client systems . . allowing storage . . associated with the nodes . . to be presented to the client systems . . as a single shared storage pool. For example the switched virtualization layer may implement a virtual interface architecture. depicts only the VIFs at the interfaces to the N modules . . for clarity of illustration.

The clustered storage system can be organized into any suitable number of vservers in which each virtual storage system represents a single storage system namespace with separate network access. Each vserver has a user domain and a security domain that are separate from the user and security domains of other virtual storage systems. Client systems can access storage space via a VServer from any node of the clustered system .

Each of the nodes . . may be defined as a computer adapted to provide application services to one or more of the client systems . .. The nodes . . are interconnected by the switching fabric which for example may be embodied as a Gigabit Ethernet switch or any other interconnect type.

Although depicts three N modules . . the D modules . . and the M Hosts . . any other suitable number of N modules D modules and M Hosts may be provided. There may also be different numbers of N modules D modules and or M Hosts within the clustered storage system . For example in alternative aspects the clustered storage system may include a plurality of N modules and a plurality of D modules interconnected in a configuration that does not reflect a one to one correspondence between the N modules and D modules.

The client systems . . of may be implemented as general purpose computers configured to interact with the respective nodes . . in accordance with a client server model of information delivery. In the presently disclosed aspect the interaction between the client systems . . and the nodes . . enable the provision of network data storage services. Specifically each client system . . may request the services of one of the respective nodes . . . and that node may return the results of the services requested by the client system by exchanging packets over the computer network which may be wire based optical fiber wireless or any other suitable combination thereof. The client systems . . may issue packets according to file based access protocols such as the NFS or CIFS protocol when accessing information in the form of files and directories.

Node . may manage a plurality of storage volumes that are transferred from a source node to a destination node. The system and processes for tracking the transferred storage blocks corresponding to the storage volumes are described below in more detail.

The cluster access adapter comprises a plurality of ports adapted to couple node . to other nodes of cluster . In the illustrative aspect Ethernet or any other protocol may be used as the clustering protocol and interconnect media although it will be apparent to those skilled in the art that other types of protocols and interconnects may be utilized within the cluster architecture described herein. In alternate aspects where the N modules and D modules are implemented on separate storage systems or computers the cluster access adapter is utilized by the N D module for communicating with other N D modules in the cluster .

Each node . is illustratively embodied as a dual processor storage system executing a storage operating system similar to that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories and files on storage .. However it will be apparent to those of ordinary skill in the art that the node . may alternatively comprise a single or more than two processor systems. Illustratively one processor A executes the functions of the N module on the node while the other processor B executes the functions of the D module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing programmable instructions and data structures. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the programmable instructions and manipulate the data structures. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the present disclosure.

The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node . by inter alia invoking storage operations in support of the storage service implemented by the node.

The network adapter comprises a plurality of ports adapted to couple the node . to one or more clients . . over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network a Fibre Channel network or any other network type. Each client . . may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing at node . to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on storage device .. The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the storage devices over an I O interconnect arrangement such as a conventional high performance FC link topology.

One common technique used for transferring information is snapshot and SnapMirror technologies Without derogation of any trademark rights of NetApp Inc. A snapshot is a point in time copy of a storage volume for example Vol A . A base snapshot of a source storage volume is typically taken at any given time and transferred via link . Subsequent changes to the storage volume are transferred using SnapMirror technology where the changed storage blocks are periodically sent to the destination. The updated snapshots can be used for disaster recovery. For proper disaster recovery the blocks at the destination should be identical to the source blocks.

Sometimes information stored at storage blocks at the destination storage system and the source storage system may be different. This may be because one or more data blocks may be present at the source but not at the destination. For example data blocks D D D . . . Dn storing information may be present at a source volume but not all the blocks may be written at the destination storage system.

The disparity between the source storage system and destination storage system may be due to various reasons. For example the source storage system may have failed to transfer a block the network link may have gone down information may have been delivered but not written at the destination and so forth. The various aspects described below provide a mechanism where all the information transferred from the source storage system is logged and all the information that is received at the destination storage system is logged.

Referring back to the storage operating system at the source storage system manages a plurality of storage volumes A N associated with storage space at a storage sub system similar to . Data associated with the volumes is stored using logical storage blocks that are managed by logical block numbers within a vbn space. The logical block numbers are shown as VVBN VVBNn. The data associated with the logical blocks is stored at the physical storage devices.

The source storage system also executes a block replication engine BRE A to transfer storage blocks for a storage volume to the destination storage system . Any reference to transfer of storage blocks or information means transfer of information stored at physical storage devices represented by logical storage blocks. BRE A uses a block replication protocol that is used to transfer information via the network link . One example of a block replication protocol is the SpinNp protocol provided by NetApp Inc the assignee of the present application and without derogation of any trademark rights of NetApp Inc. Details of SpinNp are not germane to the aspects disclosed herein and the aspects disclosed herein are not limited to any particular block replication protocol.

In one aspect BRE A includes a source logger A also referred to as logger A that maintains a source log transfer file a first data structure source log data structure and may be referred to as source log file to track storage blocks that are transferred from the source storage system . The source log file may be a sparse file for which actual physical storage space is allocated when it is needed as described below in detail.

The source log file includes a bitmap having a plurality of bits. Each bit within the bitmap corresponds to a storage block from among the transferred storage blocks . A bit value indicates if a storage block from among storage blocks has been transferred by BRE A.

In one aspect source logger A uses a memory cache not shown for storing multiple blocks for the source log file . When a bit needs to be set in a block that is not in the cache then the least recently used block is flushed to a persistent storage device to provide space for the block that is needed.

The destination storage system executes the storage operating system and includes a storage sub system similar to . The destination storage system also maintains storage volumes A N similar to storage volumes A N. The destination storage system executes a BRE B that interfaces with BRE A via link . The storage blocks transferred from BRE A are received by BRE B. The received storage blocks are shown as and written to a destination storage volume for example A N .

BRE B also executes a destination logger B also referred to as logger B according to one aspect. The destination logger B maintains a destination log transfer file a second data structure destination log data structure and may be referred to as destination log file that is similar to the source log file . The destination log file also includes a bitmap with a plurality of bits where each bit corresponds to a storage block received by BRE B. The destination log file is also a sparse file like the source log file .

In one aspect the source log file and the destination log file are generated at different time intervals. For example at time T the source log file may be designated as Ls for a given transfer. When the transfer is complete Ls may be moved to persistence storage as Ls old and a new log file Ls may be created.

The log files can be compared after a transfer operation to determine if all the storage blocks were successfully transferred from the source storage system and received at the destination storage system . If the bitmaps at the source and destination log files don t match then an error can be generated for the storage management application so that corrective action can be initiated.

If a transfer operation is aborted for some reason and re started then the log files can be used to determine which storage blocks were successfully transferred before the operation was aborted. This allows one to only transfer storage blocks that did not get transferred before the transfer operation was aborted.

Metadata is used to describe the source log file . Metadata may include size of the source log file a pointer to the storage location where the data is stored and other attributes.

A bitmap similar to is also used by the destination log file to track storage blocks that are successfully received. By comparing the bitmaps at the source and destination one is able to determine if storage blocks were successfully transferred.

In one aspect bitmap is stored at an assigned physical storage block of certain size for example a block size of 4k. Since one bit is used to track one transferred storage block for example of 4k size the physical space used by the log files is very efficient. For example one 4k physical storage block used by the log file source or destination includes 32k bits. The 32k bits can be used to track 32 1024 storage blocks that are transferred. Thus a first log file block can keep track of 0 32 1024 1 transferred storage blocks while a second log file block can keep track of 32 1024 32 1024 2 1 transferred storage blocks and so on.

Physical storage space for a block in the log files is allocated only if at least one bit needs to be set at a bitmap for that block. For example in the actual physical space for bitmap is not allocated until a bit from among A N is ready to be set indicating that one of the blocks A N has been transferred. Thus this sparse file approach only commits or uses physical storage space when the physical storage space is needed. This optimizes the use of physical storage space.

In B source logger A initializes the source log file at a memory location for example . Actual physical storage blocks for the source log file are not allocated until a bit associated with a transferred storage block is ready to be set

In B BRE A determines if a storage block can be transferred. If there is no storage block or a storage block cannot be transferred the process simply waits.

If a storage block is ready to be transferred then in B the logger A determines if a storage block is within a current range or a plurality of current ranges . BRE A transfers a set of storage blocks at any given time. The storage blocks that are being transferred are within a range for example when storage Block Block are being transferred then storage Block is within the current range for example R. When a storage block B is ready to be transferred then storage block B is not in the current range R. It is noteworthy that BRE A may maintain a plurality of ranges for which it may be transferring information.

If the storage block is not within one of the current ranges then in block B the bitmap associated with a least recently used current range is flushed from memory to a persistence storage device similar to the local storage described above with respect to . Thereafter in B a bit associated with the transferred storage block is set at the source log file .

If in B the process determines that the storage block is within one of the current ranges then in B a bit for the transferred storage block is set at a bitmap of the source log file . The process then reverts back to B until the transfer operation is completed.

In B a storage block is received at BRE B. In B logger B updates a bit associated with the received storage block in a bitmap of the destination log file . In B the destination log file is saved at a storage device for comparison with the source log file . The comparison is performed to determine if all the storage blocks from the source storage system have been successfully received at the destination storage system .

In B when a storage block is transferred then a bit associated with the storage block is set at the source log file . When the storage block is received by the destination storage system then a bit at the destination log file is set.

In B after the transfer is completed the source and the destination log files are compared to determine if there were any errors during the transfer. In one aspect bit values associated with individual storage blocks are compared to determine which storage blocks may not have been transferred successfully. If there are any inconsistencies in the source and destination file for example if a bit value at the source log file indicates that a storage block was transferred but the same bit value at the destination log file indicates that it was not received then the storage administrator may be notified so that the affected storage blocks can be resent.

In one example storage operating system may include several modules or layers executed by one or both of N Module and D Module . These layers include a file system manager that keeps track of a directory structure hierarchy of the data stored in storage devices and manages read write operations executes read write operations on storage in response to client . . requests.

Operating system may also include a protocol layer and an associated network access layer to allow node . to communicate over a network with other systems such as clients . .. Protocol layer may implement one or more of various higher level network protocols such as NFS CIFS Hypertext Transfer Protocol HTTP TCP IP and others as described below.

Network access layer may include one or more drivers which implement one or more lower level protocols to communicate over the network such as Ethernet. Interactions between clients . . and mass storage devices . are illustrated schematically as a path which illustrates the flow of data through operating system .

The operating system may also include a storage access layer and an associated storage driver layer to allow D module to communicate with a storage device. The storage access layer may implement a higher level storage protocol such as RAID while the storage driver layer may implement a lower level storage device access protocol such as FC or SCSI.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node . implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the various inventive aspects described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this disclosure can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and a storage device directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present disclosure may be utilized with any suitable file system including a write in place file system.

The processing system includes one or more processor s and memory coupled to a bus system . The bus system shown in is an abstraction that represents any one or more separate physical buses and or point to point connections connected by appropriate bridges adapters and or controllers. The bus system therefore may include for example a system bus a Peripheral Component Interconnect PCI bus a HyperTransport or industry standard architecture ISA bus a small computer system interface SCSI bus a universal serial bus USB or an Institute of Electrical and Electronics Engineers IEEE standard 1394 bus sometimes referred to as Firewire .

The processor s are the central processing units CPUs of the processing system and thus control its overall operation. In certain aspects the processors accomplish this by executing software stored in memory . A processor may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs or the like or a combination of such devices.

Memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. Memory includes the main memory of the processing system . Instructions which implement the process steps described above may reside in and execute by processors from memory .

Also connected to the processors through the bus system are one or more internal mass storage devices and a network adapter . Internal mass storage devices may be or include any conventional medium for storing large volumes of data in a non volatile manner such as one or more magnetic or optical based disks. The network adapter provides the processing system with the ability to communicate with remote devices e.g. storage servers over a network and may be for example an Ethernet adapter a Fibre Channel adapter or the like.

The processing system also includes one or more input output I O devices coupled to the bus system . The I O devices may include for example a display device a keyboard a mouse etc.

The system and techniques described above are applicable and useful in the upcoming cloud computing environment. Cloud computing means computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. The term cloud is intended to refer to the Internet and cloud computing allows shared resources for example software and information to be available on demand like a public utility.

Typical cloud computing providers deliver common business applications online which are accessed from another web service or software like a web browser while the software and data are stored remotely on servers. The cloud computing architecture uses a layered approach for providing application services. A first layer is an application layer that is executed at client computers. After the application layer is a cloud platform and cloud infrastructure followed by a server layer that includes hardware and computer software designed for cloud specific services. In this example a source storage system and a destination storage system may be presented in a cloud for storing information.

Thus a method and apparatus for tracking information transferred from a source system to a destination system have been described. Note that references throughout this specification to one aspect or an aspect mean that a particular feature structure or characteristic described in connection with the aspect is included in at least one aspect of the present disclosure. Therefore it is emphasized and should be appreciated that two or more references to an aspect or one aspect or an alternative aspect in various portions of this specification are not necessarily all referring to the same aspect. Furthermore the particular features structures or characteristics being referred to may be combined as suitable in one or more aspects of the present disclosure as will be recognized by those of ordinary skill in the art.

While the present disclosure is described above with respect to what is currently considered its preferred aspects it is to be understood that the disclosure is not limited to that described above. To the contrary the disclosure is intended to cover various modifications and equivalent arrangements within the spirit and scope of the appended claims.

