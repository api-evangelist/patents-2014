---

title: Acoustic receiver for underwater digital communications
abstract: A system and method and system for receiving communications signals coded at transmission in a frequency hopping waveform includes a sensor that receives acoustic data. A detector joined to the sensor receives the data and separates signals from background noise. Logic determines when the signal ends. Clusters of signals are processed and grouped into combinations of symbols. A computer translates these symbols into messages using a codebook. When multiple possibilities exist, the message is selected from the codebook that maximizes a similarity score. Additional logic is provided to handle situations where unwanted signals are mixed into an otherwise valid symbol sequence, to find the best subset of signals forming a valid message. Selected messages are provided as output to users. In further details, the detector filters the acoustic data and transforms it to the frequency domain. A power spectrum is calculated for detecting signals in specific frequency bands. Integrations are performed over groups of frequencies. A detection is indicated when one integrator has a large variation from the expected background level.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424858&OS=09424858&RS=09424858
owner: The United States of America as represented by the Secretary of the Navy
number: 09424858
owner_city: Washington
owner_country: US
publication_date: 20140418
---
The invention described herein was made in the performance of official duties by one or more employees of the department of the navy and the invention herein may be manufactured practiced used and or licensed by or for the government of the United States of America without the payment of any royalties thereon or therefor.

The present invention generally relates to methods of detecting frequency hopping communications signals in the presence of clutter.

Acoustic communication between underwater platforms is often desirable. and the ensuing text provide a brief explanation of this type of communication. A signal source is joined to a transducer to produce an encoded acoustic signal through water . The acoustic signal A B and C travels through the water to a sensor such as a hydrophone joined to a receiver .

As shown the acoustic signal can follow several paths. A direct path A through an acoustic channel is preferred. Acoustic channel is the region of water defined by thermal boundaries A and B. The acoustic signal can also travel in path B where it bounces off water surface or in path C where it bounces off water bottom . Other paths are also possible. Each of these paths will arrive at sensor at a different time. Some paths may interfere with later transmitted acoustic signals.

The acoustic signal can be spread across multiple acoustic frequencies in a technique known as frequency hopping. In this technique a signal is transmitted at several different frequencies. For example four fixed length signals positioned sequentially in time at frequencies 1000 Hz 1040 Hz 1020 Hz and 1010 Hz are detected and values are assigned to represent the numbers 0421 by sequence of transmission and frequency variation. The numbers correspond to a message in a codebook shared between the transmitter and the receiver.

A standard method for decoding messages transmitted by frequency hopping is by correlating the entire data sequence with replicas of all possible time frequency combinations that represent possible messages. The method then picks the time frequency combination that best corresponds with a message. Best correspondence can be determined by correlation magnitude signal strength or some other metric. Distortion from source receiver motion and complex acoustic propagation can be handled by estimation of channel properties and pre filtering with inverse transfer functions. Under benign circumstances such as with white noise this approach may allow message decoding at a low signal to noise ratio. However performance can be limited in the presence of interference from other sources that may overlap with communications waveforms.

As can be seen there is a need for an acoustic receiver for underwater digital communications that provides robust performance in the presence of multipath signal propagation and clutter.

In one aspect of the present disclosure a system of detecting communications signals can include a sensor configured to detect a plurality of individual communication signals and a processing device attached to the sensor. The processing device can be configured to separately filter each of the individual signal detections such that they are within a specified bandwidth range a duration range a frequency range and time separation range. Here the term filter indicates a selection process where signals within the specified ranges are kept and all others outside the range are rejected from further processing. The processing device can be configured to assign one of a plurality of predetermined values to each of the filtered individual detections based upon the estimated frequency of the signal that is associated with each detection. For example four fixed length signals positioned sequentially in time at frequencies 1000 Hz 1040 Hz 1020 Hz and 1010 Hz are detected and values are assigned to represent the numbers 0421 by sequence of transmission and frequency variation. Combinations of the assigned values may be compared with a codebook of predetermined messages. These values can be associated with a sequence of symbols. The comparison process involves exhaustive enumeration of all possible combinations of values in sets equal to a symbol sequence length and detected within a specified time window to each of the messages in the codebook. The comparison is complete when at least one message matches a combination of assigned values. If multiple messages in the codebook match the message with the highest similarity score is selected.

In one other aspect of the present disclosure a method includes detecting a plurality of individual communication signals. Each of the individual signal detections may be separately filtered based on the signals associated with the detections being within a specified bandwidth range a time duration range a frequency range and a time separation range. One of a plurality of predetermined values can be assigned to each of the detected individual communication signals based on the estimated frequency of the signal. Upon detection of an expected set of values the set may be compared with a collection of predetermined messages in a codebook. The set of newly detected values corresponding to a specified time period can include extra bits generated by detection of overlapping clutter signals. In this instance the method may compare all possible combinations of bits making up candidate messages against the message templates in the code book and select the message that produces the highest similarity score.

These and other features aspects and advantages of the present invention will become better understood with reference to the following drawings description and claims.

The following detailed description is of the best currently contemplated modes of carrying out the invention. The description is not to be taken in a limiting sense but is made merely for the purpose of illustrating the general principles of the invention since the scope of the invention is best defined by the appended claims.

The present disclosure relates generally to detecting and decoding received acoustic communication signals in the presence of clutter. Received signals may be processed while rejecting interference from man made or biologic clutter that may overlap in time and frequency with the received communication signals.

The present disclosure more specifically relates to methods of detecting and decoding low bit rate acoustic communication signals received in the presence of clutter. Undesirable signal detections within a sequence of received signals may be rejected using parametric filters based on bandwidth duration frequency and time separation of incoming signals. Decoding the signal may involve evaluating all combinations of expected signal sets and selecting a bit sequence with a highest similarity score to an optimum quantity.

The invention may be implemented with either hardware such as a computer processor computer application specific chip or other processing device or with software on a general purpose computing device. The invention may further be implemented with a combination of hardware and software.

Referring now to the figures wherein the drawings are for purposes of illustrating embodiments of the present disclosure only and not for purposes of limiting the same. is a block diagram of an acoustic receiver for underwater digital communications. Acoustic communications receiver can include a sensor a sensor beamformer and a processing device . The sensor can be for example an array of hydrophones. The sensor beamformer provides acoustic data received on sensor and related acoustic data received at known bearings from sensor . Beamformed acoustic data can include both signals and noise. This data can originate from an acoustic projector such as transducer from and can arrive at sensor through an underwater channel such as of . Acoustic data can be for example an array of data channels that respond best to certain directions of arrival and attenuate noise arriving from other directions.

The processing device is configured to detect individual incoming communication signals contained in the beamformed acoustic data. Processing device can be for example a computer processor a signal processor a computer or another device that includes a computer processor.

Processing device can be configured to separately filter each beam of beamformed acoustic data such that individual communication signals within the acoustic data are within a predetermined bandwidth range a time duration range a frequency range and time separation range. Filtering the individual communication signals may include measuring the number of signals at discrete frequencies found in each of the individual communication signals and measuring a time separation between the start of signals at each frequency. Filtering can also compare a number of the individual communication signals with a predefined expected number of individual communication signals. Filtering can further be performed by choosing detection parameters that support a processing gain required for particular sender receiver geometries. Frequencies of the individual communication signals can be measured or estimated. Estimation could be necessary because of frequency changes that can occur because of the Doppler effect when sources and or receivers are in motion. In the case when more than the expected number of individual communication signals are detected within a certain time window the decoding process is based on the evaluation of all combinations of the plurality of individual communication signals and comparison of symbol sets associated with the detected signals to a codebook of messages. Examples of the predetermined symbols may include hexadecimal symbols numeric sequences letters of the English alphabet and symbols or characters of other languages or cryptographic systems.

When the number of symbols associated with detected signals exceeds an expected amount within a specified time period all combinations of the symbols may be compared to a codebook of symbol sets to identify the message with the highest similarity score. The similarity score may be calculated based on a similarity of the bandwidth frequency duration and start time separation of the detected signals to values expected for the predetermined symbols in the codebook. A symbol sequence with a highest similarity score may be selected as the decoded message corresponding to the received communication signals. In addition an optional parity value can be transmitted received and used to validate correct reception of the individual communication signals by comparing the parity value frequency with an expected frequency determined by the message portion of the communication signals.

In more particular detail the first stage is signal processing and predetection logic. The input time series data are partitioned into frames represented by as shown in equation 1a 1a where t discrete digital samples from a sensor i time index within a frame 0 1 2 . . . N 1 N number of time samples in each input frame n chronological index of time series vectors.

The input data are band shifted filtered and decimated to match the band of the transmit sequence and reduce the computational load. Thus 

Then the infinite impulse response IIR filter is applied per equation 1c resulting in the vector of the bandpass filtered complex time series in equation 1d .

The variables represent the input data after arranging to provide a specified window overlap. For example if N 512 and L 220 and the desired overlap ratio is 0.57 then 4 

where the variables in brackets represent the last part of and r N 2L. Next in step the power of the complex spectrum vis computed in accordance with equation 5 . Here we modified the meaning of the sample index i to represent frequency bins instead of time samples. 1 . . . and 5 where n start spectral bin to process and n end spectral bin to process.

The short time power spectra are then preferably normalized by a split window two pass mean estimate of the noise background across frequency. The process begins in step by compensating for edge effects by creating a new vector that contains the original sequence plus additional data samples appended to the beginning and end of the original vector. The appended data are effectively a circularly wrapped version of the original . The new vector is defined as 6a where 6b . 6c 

Notice that there is not a gap in the integration window on the second pass i.e. g 0 because any significant bias from signals was presumably minimized by truncation after the first pass. Also the truncation performed after applying the shearing threshold test in the first pass creates a multiplicative bias in the noise estimate. This can be corrected by multiplying the u vector by a correction term known in the prior art as shown in equation 11 1.0 . 11a 11b 

Next in step a second stage of normalization is performed with an estimate of the long term average of the background noise. To avoid contamination of the long term background by yet undetected signal energy the first stage spectral frames are stored in a ring buffer. Specifically 

With the above notation the long term averaged noise background estimate is computed using the delayed power series data as represented in equation 14 1 14 where yis the background noise spectrum in the ifrequency bin at the n 1 time update xis the normalized in frequency power spectrum in the ifrequency bin at the n 2 time update and a is the noise averaging smoothing coefficient e.g. 0.995 .

It is assumed that the noise background is unknown and can change slowly with time. The value of in equation 14 can range from 0 to 1. A larger value for reduces the asymptotic variance of the noise background estimate but has the deleterious effect of slowing adaptation to a changing background. Therefore the value for should be chosen to represent a compromise between these factors. The coefficient can be defined by its desired time constant . This time constant is analogous to the time it takes a single pole resistive capacitive filter to decay to 1 e of its value when stimulated with an impulse of unity amplitude. The relationship between the time constant and the normalizer coefficient is defined by 1 1n . Finally the default delay for noise estimation is two frames because any signal loud enough to affect the background estimate will presumably be detected in at least two frames. Equation 14 is initiated at system startup by setting the first estimate equal to the sample mean of the first several frames.

After a noise background estimate is obtained an incremental detection statistic is computed by a second stage normalization mean removal and negative clipping as shown in equations 15a and 15b 

The normalization factor denominator in equation 15a is a bin by bin copy of the long term background estimate except when a bin is in the process of being detected i.e. its detection statistic is above the threshold. Specifically 

This logic freezes the background estimate when a signal is present by virtue of its detection statistic meeting the required criteria thereby minimizing contamination of the detection statistic by signal energy.

A maximum likelihood detector of a constant amplitude monochromatic signal with an unknown receive frequency and an unknown duration in a Gaussian noise background can be approximated by concurrently processing the parallel outputs of short time Fourier power spectra followed by a bank of integrators each normalized to a discrete domain of duration hypotheses. The Gaussian assumption is nearly true after normalization because a background estimate effectively whitens the measurements when signal is not present. Moreover integration of many nearly independent data variables forces a summation to be closely Gaussian by the central limit theorem. This will occur if the transmitted signal is sufficiently long e.g. more than 10 spectral frames . The Gaussian assumption is valid as long as the signals being detected are more than just a few spectral frames in length and the selected Fourier transform window is not too long.

With these constraints in mind integration is performed as follows. The values in z z . . . zare referred to as the detection increments produced by sequential frame updates across all processed frequency bins. Similar to the notation used in equation 14 the individual elements in zare also identified as zwhere i is the frequency bin index and n is the running time frame index. Prior to the actual detection test the increments are input to a bank of energy detectors matched to a successive set of increasing signal durations. The energy detectors represent normalized partial sums of the increments. The index n indicates the most recent detection increment and n k 1 indicates an increment that is k frames old. Then let the unnormalized partial sum P i k be defined as the numerical integration of the last k detection increments relative to time frame n for each frequency bin i. This is represented by equation 17 

where k 1 2 . . . N and Nis the number of partial sums. The default number of partial sums for our application is 25.

A detector formed from a bank of integrators can be implemented in step . Using a bank of integrators to detect temporary changes in the statistics of a Gaussian time series is known in the art. An intuitively appealing aspect of the decision logic is that it is based on recognizing when the second order statistics of a new set of measurements have significantly changed compared with the measurement history leading up to the event. Since we have the opportunity to estimate the statistics mean and variance of the noise the detector can take the form of a test that measures how many standard deviations the prospective signal energy is away from the noise After normalization the measurements z from equation 15b are zero mean and unit variance. For any partial sum the mean will be zero because the mean was removed in equation 15a . In the noise only case normalization of each partial sum k by its standard deviation yields a simple measure of deviation from the expectation. The final set of statistics can be maximized in step across a set of duration hypotheses and compared with a threshold as in step . A threshold exceedance indicates the onset of a signal. The specific peak location k indicates the duration of the signal so far.

Specifically for accumulated normalized spectral powers can be simply approximated as 18 This can be derived by realizing that the statistics of the original spectral powers can be approximated by an exponential probability distribution i.e. f x e . After normalization both the mean and the standard deviation 1 should be approximately unity. Because the measurements are assumed to be independent and identically distributed the variance of the sum is the sum of their individual variances. Therefore the standard deviation is ordinarily square root over k . However in our case the power spectra are created by overlapping and weighting the input data with a window function prior to the Fourier transform. By the convolution theorem of the Fourier transform the window function applied in the time domain can be analogously interpreted as a local weighted average of adjacent frequency bins. This slightly reduces the variance and requires a scale factor to align the model with actual data. It was found that 0.8 worked best for the particular purposes of the testing.

With the standard deviations defined the successive partial sums are normalized according to equation 19 

Step determines if the updated detection statistic is greater than the previous statistic or if the received signal detection statistic is greater than a predetermined threshold. If so a step can increment the duration estimate of the signal. Step determines if the duration of the signal is greater than a predetermined maximum length. If so step performs termination functions and returns to the beginning of the post detection logic . If the duration of the signal is not greater than the maximum length step resets an old version of the detection statistic to the newest value and returns to the beginning of the post detection logic.

If in block the normalized detection statistic is not increasing and the signal detection statistic is not greater than a specified threshold then a step increments a termination count which counts a number of terminated frames of signal data. Step determines if the signal has been in a termination state for a minimum number of time frames. Step increments a stored length of the signal vector length and returns to the start of the post detection logic .

If at block the signal has been terminated for the minimum required time step may include termination functions such as calculating the frequency value and signal to noise ratio and resetting counters. Step determines whether the signal vector length is greater than a minimum value and a flag is set in step . Control returns to the start of the post detection logic .

If at step detection of a signal is not in progress step finds a peak value of a partial sum vector of the signal for each frequency cell as described in equations 20a and 20b . The partial sum vector is computed in step as described in equations 19 . This peak value is from step and step . Step determines if a peak value is greater than a specified threshold. If not step replaces an estimate of the noise background with a value that includes the latest frame of data and processing returns to the start of the post detection logic . If at step the peak value of the signal is greater than a specified threshold then step sets a detection flag a time frame starting point is initialized a signal to noise ratio SNR is initialized for the frequency bin associated with the detection and the termination count may be reset. Processing then returns to the start of the post detection logic . The post detection processing is performed independently upon each frequency bin generated by the pre detection processing .

Clustering can also re combine signals from different clusters into a single cluster based on similar time and frequency of the individual signals as potential parts of the same signal group or message. Re clustering may be needed if signals similar in time and frequency have been grouped into different clusters because the signal is close in frequency to more than one cluster.

To account for these cases a clustering algorithm is provided that receives the outputs of the detector and combines the parameters from adjacent detections in time and frequency into a single detection cluster. The procedure processes the detection outputs as a batch list and makes the first detection in the list a seed cluster. It then loops through all of the remaining detections in the batch to find other detections with adjacent times and frequency bins where adjacent is predefined by different separation thresholds for both time and frequency. As detections are linked to a cluster they are deleted from the active list so that each original detection is associated with only one cluster. A separate cluster list is created that stores the global start and end points for time and frequency as well as the composite signal to noise ratio SNR for the clustered events. The composite SNR is the peak average SNR across the clustered detections.

In Tis the number of seconds before or beyond a cluster time boundary that is still acceptable to meet the linking criteria. Fis the number of Hz to the left or the right lower or higher frequency respectively that is still acceptable to meet the linking criteria. Given these parameters the criteria for linking detections into clusters can be segmented into three situations as illustrated in . In the first situation with original cluster A and new detection A the start of the detection A is inside the cluster time boundaries extended by T but the end of the detection is outside the cluster end. In the second case with original cluster B and new detection B the end of the detection B is inside the cluster time boundaries extended by T but the start of the detection B is outside the beginning boundary of the cluster. Finally in the third case cluster C and new detection C both the start and the end of the detection C boundaries are inside the extended boundaries of the cluster C. Also in all cases the frequencies of the detection in a single frequency bin must be inside the extended start and end frequencies of the cluster. shows extended boundaries A for cluster A and new detection A extended boundaries B for cluster B and new detection B and extended boundaries C for cluster C and new detection C. Extended boundaries create revised clusters.

Step performs the comparison of detection parameters to existing cluster parameters. If the parameters of a cluster are found to be sufficiently near the parameters of a detection step updates the cluster parameters. Then the detected signal parameters are removed from the active list in step so that it cannot influence another cluster. If a detection is not near the current cluster step includes checking the other previously established clusters. If there are more clusters processing returns to step . If no more clusters are available step checks for more detections in an incoming batch of signal detections. If more detections are found processing returns to step . If no more detections are found step initializes a new cluster list that includes all current clusters and any newly updated clusters of signal detections.

Referring now to clusters can be created from remaining signal detections. These remaining signal detections are the detections that weren t matched with pre existing clusters. Step loops on remaining signal detections. Step sets a next new cluster to correspond to a next unassigned signal detection. Step loops through the other remaining unassigned signal detections to determine if these signal detections should be assigned to the new cluster.

Step determines if the detection is similar in frequency and signal detection time to the new cluster. If the detection is near the cluster step updates cluster parameters with the associated detection parameters and removes the detected signal parameters from an active list of detections in step . If a detection isn t near the new cluster step checks the remainder of the unassigned signal detections. If more unassigned signal detections are found processing returns to step . Once all of the remaining unassigned signal detections have been tested against the new cluster step checks again for more unassigned signal detections to create additional new clusters. If more unassigned signal detections are found processing returns to step . If no more unassigned signal detections are found step provides a new cluster list as output that incorporates all the input batch of detections.

Groups of clustered detections are next provided to a decoder that searches for patterns corresponding to one of the discrete transmit sequences listed in a codebook. The codebook is simply the list of permutations ordered combinations with repetition of the number of states transmitted multiplied by the number of bits in a message.

The primary purpose of the decoder logic is to identify a sequence of detected pulses that matches one of the messages in a predefined codebook. A secondary purpose is to minimize the impact of detected clutter on the decoder accuracy. Time and frequency oriented background cancellation provides inherent robustness to clutter but it is possible for other signals to be received with durations and bandwidth characteristics that are similar to the transmitted waveforms. If these signals are detected within the receive band of the communications pulses it is possible for the message to be misread. However the logic described below attempts to deal with this possibility.

The decoder function begins by collecting the parameters from a group of clusters into a batch. The number of clusters is governed by a time constraint. Typically this time constraint is about 30 seconds greater than the duration of the transmit sequence which accounts for possible latencies in the detector due to integration times. The cluster history buffer is defined as

To address the concern that the list of clusters might be greater than the number expected for a particular communication mode determined by the number of bits and the parity option the decoding is performed in two steps. In the first step entries in the H matrix are collected in groups of size Sas determined by the transmit parameters according to equation 22 

A diagram of the second step in the decoder is given in . From this point on the batch history refers to the subset of clusters selected from the original batch. The comparison logic first defines the following parameters 24a and 24b where N number of states as defined above.

Equation 24a gives the set of frequencies associated with the cluster group. Equation 24b gives the frequency set associated with the parity bit. The parity bit is represented by another pulse following the data bit pulses with a frequency that is also quantized to a discrete set of states. The value of the parity bit frequency gives the decoder a method of validating correct reception of the message sequence. The number of possible parity state frequencies is equal to the number of message bit frequencies. However the values of parity bit frequencies are offset from the message bit frequencies so that the last message bit cannot end next to the start of the parity bit. In our case 1 2 . . . 25 where

 f f f 3 maximum deviation between measured frequency of the pulse and its expectation from either or 

As illustrated in the decoder logic loops on all clusters contained in the input cluster set. Each cluster is first checked against the duration and bandwidth criteria. Clusters that do not meet these constraints are removed from further consideration. Specifically T t tis the duration of the next cluster i where tand tare defined by equation 21 . Then the only clusters kept are those where T T t. Also bw f fis defined using equation 21 and the only clusters kept are those where bw bw. Next the frequency of a cluster is checked against the Nbit state possibilities. First f f defined as the average frequency of the cluster. Then the clusters are identified that match one of the state frequencies within a specified tolerance. Specifically the decoder finds the index k where f f and k 1 2 . . . N and begins counting the number of matches identified throughout the batch of input clusters. The decoder also saves the index in a vector identifying the bit sequence.

If a matched cluster is not the first in the sequence the time separation between the start of the most recently matched cluster and the start of the previously matched cluster is checked to determine whether this separation is less than the tolerance t . If this condition is satisfied the index k representing the matched frequency state is stored in a running list as bcc k where cc is the location in the bit sequence. Clusters in the batch history will continue to be evaluated until the number of expected bits is found i.e. cc N.

When the data bit pulses have been identified the remaining clusters are checked against the parity expectation. Specifically this check requires that f f where k 1 2 . . . NS. If the remaining cluster satisfies the frequency check it is again verified that the time separation between the start of the parity bit cluster and the start of the last data bit cluster is less than the tolerance t . If this condition is satisfied the frequency index of the parity bit k is checked to verify that it is the modulo sum of the data bit frequency indexes. Specifically let

As also shown in while the various parametric conditions are being validated a numeric similarity score is produced according to equation 28 below 

Beginning at step a cluster group is assembled from received clusters. This cluster group can be the data bits of a message. Step checks for additional clusters to add to the cluster group. If more clusters of signals are not received then processing returns in step to the beginning of processing of the signals step . If more clusters of signals are received step increments a cluster index which specifies the number of clusters received.

Step determines if the cluster index meets duration limits. For example clusters of signals that last less than a specified time limit are determined not to be acceptable signals. If the cluster index does not meet duration limits processing returns to the beginning of the message decoding step . Step determines if the signal meets bandwidth limits such as for example an unstable signal with changing frequency over time resulting in an excessive bandwidth. If not processing returns to step .

If the signal meets bandwidth limits step determines if all data bits in the cluster group for an expected signal sequence are found. If all the data bits in the signal are not found step calculates an average frequency of the cluster. Step checks an average cluster frequency against all allowable data bit frequencies. In step if the average cluster frequency is outside the boundaries of all of the data bit frequencies processing can return to step . If the comparison of the average cluster frequency is within the boundaries of a data bit frequency then step saves a frequency of a data cluster that has been matched with one of the expected signal frequencies.

Step saves a cluster identifier and saving the bit number of the message sequence detected so far. Step calculates an initial similarity score that represents how similar the data cluster frequency parameter is to the expected values of a possible message and returns to step to determine if all data bits in a received data cluster group are found. If all data bits are found at step a step checks that each signal start time in the message sequence is separated by the expected amount. If any of the start time differences in the sequence are outside required bounds the process will return to step . If the start time differences are all within acceptable bounds the similarity score is further updated in step to represent how similar the measured start time differences of clusters are to expectations.

Step checks the remaining clusters for a parity bit. The parity bit can have a specific expected frequency that is based upon the modulo summation of all frequencies of the data bit frequencies. The value of the parity bit frequency gives the decoder a method of validating correct reception of the message sequence. The value of a parity bit frequency is offset from frequencies in the data bit signals to minimize interference from multipath arrivals. A detected cluster group that arrives after the data bit signals with the proper start time difference and other expected signal characteristics such as duration and bandwidth is a candidate parity bit. The signal sequence is accepted if the frequency of a parity bit matches the value expected by modulo summing the indexes of data bit frequencies. In this way the parity bit may validate correct reception of the cluster group.

Step checks an average frequency of signals in a candidate parity bit cluster against all the allowed parity bit frequencies. Step returns to step if the candidate parity bit cluster does not match any expectations.

Otherwise step saves a frequency and frequency index of the cluster identified as the parity bit. Step checks if the difference between the parity bit cluster start time and the last data bit cluster group start is within the specified time difference bounds. If not control is transferred to step . If so then step computes an expected parity bit value may be stored in a buffer memory. Step determines if the parity bit value corresponds to a value expected from the modulo sum of frequency indexes of the data bits. If so then a step returns to the message decoding logic at step . If the parity bit value equals the expected value then step updates a similarity score which previously represented similarity of frequency and start time values of the clusters in the cluster group.

After assembly of the cluster group the group must be translated into a symbol. In step a message table is searched for a symbol similar to a received bit sequence or cluster group. Step checks to see if a message has been completely decoded. If so a message may be formatted and output in step . In step a flag may be set indicating that the message has not been decoded and processing can return to the beginning of the pre detection logic .

It should be understood of course that the foregoing relates to preferred embodiments of the invention and that modifications may be made without departing from the spirit and scope of the invention as set forth in the following claims.

