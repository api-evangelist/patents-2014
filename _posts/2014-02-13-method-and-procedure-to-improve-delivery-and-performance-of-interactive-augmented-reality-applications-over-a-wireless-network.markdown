---

title: Method and procedure to improve delivery and performance of interactive augmented reality applications over a wireless network
abstract: A system for improving performance of an interactive augmented reality application over a wireless network. The system comprises at least one client side gateway configured to establish and adjust timing and synchronization with a client application based on measurements and predicted performance of a network between the client application and the client side gateway before a predefined period of time expires, transmit timing and synchronization decision to the controller, execute server side application programming interfaces determined by the controller based on the network quality measurements and the predicted network performance, and transmit execution results of the server side application programming interfaces to the controller.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09451051&OS=09451051&RS=09451051
owner: Sprint Communications Company L.P.
number: 09451051
owner_city: Overland Park
owner_country: US
publication_date: 20140213
---
Wireless networks are becoming increasingly prevalent in our daily lives with the rapid development and popularization of portable network capable devices. Additionally more and more electronic devices that did not have wireless network capabilities are getting wireless network capable. More and more volume and more and more types of content are transmitted through wireless networks for example text emails audio and video. Online gaming through wireless network capable devices is also becoming more and more popular.

In an embodiment a system for improving performance of an interactive augmented reality application over a wireless network is disclosed. The system comprises at least one server side gateway at least one client side gateway and a controller. The at least one server side gateway is configured to establish and adjust timing and synchronization with an application server based on measurements and predicted performance of a network between the application server and the server side gateway before a predefined period of time expires. The at least one server side gateway is further configured to transmit timing and synchronization decision to a controller and execute client side application programming interfaces APIs determined by a controller based on network quality measurements and predicted network performance. The at least one server side gateway is further configured to transmit execution results of the application programming interfaces to the controller. The at least one client side gateway is configured to establish and adjust timing and synchronization with a client application based on measurements and predicted performance of a network between the client application and the client side gateway before a predefined period of time expires. The at least one client side gateway is further configured to transmit timing and synchronization decision to the controller and execute server side application programming interfaces determined by the controller based on the network quality measurements and the predicted network performance. The at least one client side gateway is further configured to transmit execution results of the server side application programming interfaces to the controller. The controller is configured to initialize establish and dynamically determine timing and synchronization for the system based on measurements and predicted performance of different networks in the system. The controller is further configured to dynamically determine which application programming interfaces to be executed on the client side gateway the server side gateway the controller or a separate server based on the network quality measurements and the predicted network performance. The controller is further configured to adjust thresholds of time periods for the client side gateway and the server side gateway to autonomously make timing and synchronization decisions and transmit execution results and data between the client side gateway and the server side gateway with proper timing and synchronization.

In an embodiment a method of improving performance of a real time application over a wireless network is disclosed. The method comprises initializing a system with timing and synchronization information based on data accessed from a data store keeping records of the timing and synchronization information and adjusting timing and synchronization for the system by a controller based on network quality measurements and predicted network performance. The method further comprises establishing and adjusting a tickrate with an application server by a server side gateway based on measurements and predicted performance of a network between the application server and the server side gateway before a predefined period of time expires wherein a tickrate is a rate of ticks per unit of time and during each tick the application server processes client commands runs a physical simulation step checks application rules and updates object states. The method further comprises establishing and adjusting a tickrate with a client application by a client side gateway based on measurements and predicted performance of a network between the client application and the client side gateway before a predefined period of time expires wherein the tickrate with the client application can be different from the tickrate between the server side gateway and the application server. The method further comprises transmitting tickrate decisions to the controller and adjusting by the controller thresholds of time periods for the client side gateway and the server side gateway to autonomously make timing and synchronization decisions. The method further comprises dynamically determining which application programming interfaces APIs to be executed on the client side gateway the server side gateway the controller or a separate server based on the network quality measurements and the predicted network performance. The method further comprises executing client side application programming interfaces by the server side gateway as determined by the controller based on the network quality measurements and the predicted network performance. The method further comprises executing server side application programming interfaces by the client side gateway as determined by the controller based on the network quality measurements and the predicted network performance. The method further comprises transmitting execution results of the locally executed application programming interfaces to the controller by the client side gateway and the server side gateway. The method further comprises compressing execution results and data by the controller for delivery between the client side gateway and the server side gateway with proper timing and synchronization.

In an embodiment a method of improving performance of a real time application over a wireless network is disclosed. The method comprises establishing timing and synchronization for the system by a controller based on network quality measurements and predicted network performance. The method further comprises establishing and adjusting a timing and synchronization rate with an application server by a server side gateway based on measurements and predicted performance of a network between the application server and the server side gateway before a predefined period of time expires. The method further comprises establishing and adjusting a timing and synchronization rate with a client application by a client side gateway based on measurements and predicted performance of a network between the client application and the client side gateway before a predefined period of time expires wherein the timing and synchronization rate with the client application can be different from the timing and synchronization rate between the server side gateway and the application server. The method further comprises transmitting timing and synchronization decisions to the controller and determining which application programming interfaces to be executed on the client side gateway the server side gateway the controller or a separate server based on local environment. The method further comprises executing client side application programming interfaces APIs by the server side gateway as determined by the controller based on the network quality measurements and the predicted network performance. The method further comprises executing server side application programming interfaces by the client side gateway as determined by the controller based on the network quality measurements and the predicted network performance. The method further comprises transmitting execution results of the locally executed application programming interfaces to the controller by the client side gateway and the server side gateway.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although illustrative implementations of one or more embodiments are illustrated below the disclosed systems and methods may be implemented using any number of techniques whether currently known or not yet in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below but may be modified within the scope of the appended claims along with their full scope of equivalents.

Current interactive augmented reality applications for example online augmented reality games depend on a traditional client server streaming mechanism. The paradigm may be subject to issues of lag. Online augmented reality games simulate real world experience with illusion of contemporaneous play and illusion of contemporaneous play depends on low time lag of information sharing. A client may receive the current world state from the server and generates video and audio output based on these updates. The client may sample data from input devices microphone keyboard mouse etc. and send these input samples to the server for further processing. With multiple clients the server may process updates from different clients and update the current world state with those updates. Thus low time lag of information sharing may be desirable in online augmented reality games for real world simulation.

Most lag reducing solutions simulate the effects of real time content delivery via methods such as synchronization interpolation prediction or time compensation. Bandwidth limitations network latencies or packet loss may cause information loss and cause a laggy gameplay feeling and make it more difficult to hit other players or interact with moving objects. Wireless networks are vulnerable to quality fluctuation for example throughput fluctuation jitter or another type of quality fluctuation and may suffer from bandwidth limitations network latencies or packet loss. Jitter is the variation in time between packets arriving in communication networks caused by network congestion time drift route changes or another reason. Thus wireless networks may amplify lag problems to online augmented reality game players. Game players with poor network quality for example with a poor wireless network connection may experience a laggy gameplay feeling and may even be kicked out of the game by a gaming server.

Current gaming devices may set up a fixed synchronization rate for example a tickrate with a gaming server at initialization without changing the rate later. A game server may send updates to gaming device s with the fixed tickrate. With poorer network conditions for example a longer ping period lower tickrate may be more desirable. A ping period is the round trip time for messages sent from the originating host to a destination computer to return to the originating host. For example for an online augmented reality game a ping is the time between a client sending a user command the server responding to it and the client receiving the server s response. A game server may simulate the game in discrete time steps called ticks. A tickrate is a rate of ticks and during each tick the application server processes client commands runs a physical simulation step checks application rules and updates object states. For example the application server may advance the state of the game environment by one cycle one iteration or one tick time period. The application server processes all inputs from game players during a recent cycle or tick time period and updates all players with the next state of the game.

Most current online gaming providers base timing and synchronization only on ping but a network communication service provider or a carrier can base it on network quality measurements and predictions of network state that only a carrier may know. Also if some application programming interfaces APIs relevant to the online augmented reality game can be executed intercepted and interpreted by servers deployed in the wireless carrier internet protocol IP network latency and lag issues may be better solved and a faster more realistic user experience may be achieved. An application programming interface function may be a function provided by an application programming interface. Application programming interfaces and application programming interface functions may be interchangeable herein. The present disclosure teaches a system and method for monitoring network quality and moving synchronization and application programming interface execution to the edge of a wireless carrier internet protocol network.

For example a client side server gateway and a server side server gateway may be deployed at the edge of a wireless carrier internet protocol network. The client side gateway may be physically close in the wireless carrier internet protocol network to a device executing a client application or an online augmented reality game player and the server side gateway may be physically close to an application server or the online augmented reality game server. A controller may also be deployed in the wireless carrier internet protocol network and may be coupled to a data store. The controller may determine and oversee timing and synchronization between different nodes in the system and dynamically determine which application programming interfaces may be executed locally. The controller may further determine which application programming interfaces may be executed on the client side gateway the server side gateway the controller or a separate server equidistant from the client side gateway the server side gateway and the controller.

The data store may keep records for timing and synchronization for the online augmented reality game system. The controller may initialize timing and synchronization for example a tickrate with timing and synchronization information obtained from the data store. The client side gateway may establish timing and synchronization between the client and the client side gateway in response to a request from the controller. The server side gateway may establish timing and synchronization between the application server and the server side gateway in response to a request from the controller.

The client server side gateway may adjust the local timing and synchronization based on local environment for example local network quality network delay network load or network traffic before a predefined period of time expires. The predefined period of time or a threshold may be different for the client side gateway and the server side gateway. The client server side gateway may send the timing and synchronization decisions to the controller. After the threshold expires the client server side gateway may return the right to determine on the timing and synchronization to the controller.

The controller may determine which application programming interfaces are to be executed on the client side gateway the server side gateway the controller or a separate server. The client server side gateway may compress and transmit execution results of locally executed application programming interfaces to the controller. The controller may transmit the execution results to the other end of the path of the client server side gateway. The server client side gateway may decompress the execution results and update their internal state accordingly.

For application programming interface functions that can only be executed and then transmitted end to end for example application programming interface functions that can only be executed on the mobile device and then transmitted from the mobile device to the application server the client server side gateway may compress data from the application programming interfaces and deliver to the other end with proper timing and synchronization for example with the lowest tickrate of the different segments of the online augmented reality game system network. A library of application programming interfaces can support multiple users multiple application servers and multiple independent threads of execution although one user one application server and one thread of execution is discussed in this disclosure.

Turning now to a communication system is described. In an embodiment the communication system comprises a server side gateway an application server a client side gateway and a controller . The server side gateway may comprise a server synchronization application and a plurality of client side application programming interfaces APIs . An application programming interface function may be a function provided by an application programming interface. Application programming interfaces and application programming interface functions may be interchangeable herein. The client side gateway may comprise a client synchronization application and a plurality of server side application programming interfaces APIs . The controller may be coupled to a data store and may comprise a controller synchronization application and a plurality of controller application programming interfaces . The data store the server side gateway the application server the client side gateway and the controller are coupled to a wireless carrier internet protocol IP network . The wireless carrier IP network may be a network provided by a network communication services provider or a carrier.

The communication system further comprises a plurality of mobile communication devices . The mobile communication device may comprise a radio transceiver and a client application . The client application may be client application s of an interactive augmented reality application for example an online augmented reality game. The application server may be a server from the interactive augmented reality application services provider for example an online gaming services provider that runs server side application s for the online augmented reality game. The mobile communication device is configured to use the radio transceiver to establish a wireless communication link with a base transceiver station BTS and the base transceiver station provides communications connectivity of the mobile communication device to the wireless carrier IP network .

It is understood that the communication system may comprise any number of mobile communication devices any number of client side gateways any number of application servers any number of base transceiver stations and any number of server side gateways . The mobile communication devices may be any of a mobile phone a personal digital assistant PDA a media player a laptop computer a tablet computer a game console a notebook computer or another wireless network communications capable device. In an embodiment the mobile communication device may be a gaming device. It is understood that a gaming device may not be communicatively coupled to the wireless carrier IP network through a wireless link but may instead access the wireless carrier IP network through a wired link. The client side gateway the application server the server side gateway or the controller may be any of a desktop computer a server computer or another network capable device. The client side gateway the server side gateway or the controller may be part of the wireless carrier IP network . For example the client side gateway the server side gateway or the controller may be servers from a network communication services provider.

The client side gateway the application server the server side gateway or the controller may access the wireless carrier IP network through a wired access network. The mobile communication device may access the wireless carrier IP network through a wireless access network. The wired access network may be abstracted in different ways and may comprise cable modems and Ethernet routers switches or hubs. The wireless access network may also be abstracted in different ways and may comprise wireless access points cable modems Ethernet or wireless routers switches or hubs servers and data storages such as home location registers HLRs or servers that implement the functionality of home location registers visitor location registers VLRs or servers that implement the functionality of visitor location registers base transceiver stations base station controllers BSCs mobile switching centers MSCs and other network nodes that are specifically associated with providing wireless access and connectivity to the mobile devices and the server computers.

In an embodiment the data store may keep records for compression rate timing and synchronization information and historical information on network traffic. For example the data store may store information to initialize the timing and synchronization of the online augmented reality game system. The controller may access the data store for the initialization timing and synchronization information to initialize the timing and synchronization of the online augmented reality game system. The data store may update the records for timing and synchronization when timing and synchronization rates are adjusted by different components of the communication system for example the server side gateway the client side gateway or the controller . The data store may update the data store with compression rates when compression rates are changed by the server side gateway or the client side gateway . Additionally the data store may send historical information on network traffic to the server side gateway the client side gateway or the controller and future network state may be predicted based on the historical information on the network traffic. Gaming parameters such as timing and synchronization rates may be adapted based on the prediction.

The client side gateway may be at the edge of the wireless carrier IP network close to a mobile communication device for example physically close to the mobile communication device . The client side gateway may monitor the network between the client side gateway and the mobile communication device . For example the client side gateway may monitor the network load network traffic and network delay of the local network. For example wireless network delay between the client side gateway and the mobile communication device may be measured for example with a loopback measurement technique. As another example the client side gateway may take quality measurements of the network between the client side gateway and the mobile communication device . For instance signal to noise ratio SNR received signal strength RSS quality of service QoS class of service CoS channel quality indicator CQI or another type of network quality parameter may be measured at the base transceiver station s and or at the mobile communication device for adapting the timing and synchronization. The network measurements from the base transceiver station s and or the mobile communication device may be obtained by the client side gateway . Additionally the client side gateway may predict network performance based on historical network performance and or the measured network quality parameters. The client side gateway may obtain receive historical network traffic information from the data store and predict future network performance. For example the client side gateway may predict a higher traffic load on a Friday night based on historical Friday night busy traffic on the network between the client side gateway and the mobile communication device . Based on the measured network quality parameters and predicted network performance the client synchronization application on the client side gateway may determine the timing and synchronization rate between the client side gateway and the mobile communication device for example a tickrate from the client side gateway to the mobile communication device based on predefined rules.

The client synchronization application may establish and or adjust timing and synchronization between the client side gateway and the mobile communication device . For example the client synchronization application may establish the timing and synchronization between the client side gateway and the mobile communication device at initialization for example when the mobile communication device started the online augmented reality game. The client synchronization application may first request timing and synchronization information from the controller . Based on the requested timing and synchronization information the client synchronization application may set the timing and synchronization rate between the client side gateway and the mobile communication device for example the tickrate from the client side gateway to the mobile communication device . Additionally the client synchronization application may adjust the timing and synchronization rate based on the measured network quality parameters and predicted network performance information. For example the client synchronization application may increase or decrease the tickrate by one step or proportionally based on the measured network quality parameters and predicted network performance information. Also the carrier may promote service upgrade to the user if the wireless signal quality is insufficient to support the application via sending a prompt message to the user by the client side gateway . The server synchronization application may establish and or adjust timing and synchronization between the server side gateway and the application server similarly to how the client synchronization application establishes and or adjusts timing and synchronization between the client side gateway and the mobile communication device .

The server side gateway may be at the edge of the wireless carrier IP network close to an application server for example physically close to the application server . The network between the server side gateway and the application server may be a wired network. The server side gateway may monitor the network between the server side gateway and the application server . For example the server side gateway may take quality measurements of the network between the server side gateway and the application server . For example techniques may be used to characterize network quality for example a time domain reflectometry TDR to measure a wired network delay between the server side gateway and the application server for determining the timing and synchronization. For example a ping may be sent from the server side gateway to the application server to determine the round trip time for messages sent from the server side gateway to the application server and to return to the server side gateway .

Additionally the server side gateway may predict network performance based on historical network performance and or the measured network quality parameters. The server side gateway may obtain receive historical network traffic information from the data store and predict future network performance. For example the server side gateway may predict a higher traffic load based on increasing traffic load on a Saturday night. Based on the measured network quality parameters and predicted network performance the server synchronization application on the server side gateway may determine the timing and synchronization rate between the server side gateway and the application server for example a tickrate from the server side gateway to the application server . Different tickrates for different segments of the online augmented reality game system may concurrently be suggested by the client side gateway the server side gateway and or the controller . For example the tickrate from the server side gateway to the application server the tickrate from the client side gateway to the mobile communication device the tickrate from the controller to the client side gateway and the tickrate from the controller to the server side gateway may be different from each other.

The autonomous decision on the local timing and synchronization by the client server side gateway may be conducted within a predefined period of time for example within a threshold. The threshold for the client side gateway and the server side gateway may be different. After the threshold expires the client server side gateway may return the right to determine the local timing and synchronization to the controller .

Some application programming interface functions that are executed on the application server relevant to the online augmented reality game may be executed locally for example on the server side gateway on the client side gateway on the controller or on a separate server not shown in . The separate server may be equidistant from the server side gateway the client side gateway and the controller . By executing at least some of the application programming interface functions locally network resources and or computing resources may be better utilized lag and or jitter may be reduced and thus better overall performance of the online augmented reality game may be achieved. The allocation of application programming interface function execution may be adapted dynamically. For example one application programming interface function may be executed at the server side gateway at the beginning of an online augmented reality game session and then executed at the client side gateway when some change occurs to the online augmented reality game system.

The server side application programming interfaces may be preloaded on the client side gateway . For example at least some server side application programming interfaces that can be executed on the client side gateway may be preloaded on the client side gateway . The preloaded server side application programming interfaces may not be activated unless under some circumstances. For example when network quality of either of the network between the server side gateway and the application server and the network between the server side gateway and the controller is below a predefined threshold some of the preloaded server side application programming interfaces may be executed locally. The execution results may be transmitted to the controller . For example the execution results may be bundled and or compressed and transmitted from the client side gateway to the controller . Some application programming interfaces may only be executed on either the mobile communication device or the application server . The data from the application programming interfaces that can only be executed on the mobile communication device may be compressed by the client side gateway and transmitted to the application server with proper timing and synchronization.

Similarly the client side application programming interfaces may be preloaded on the server side gateway and some of the preloaded client side application programming interfaces may be executed locally under certain circumstances. For example client side application programming interfaces that can be executed on the server side gateway may be preloaded on the server side gateway . The preloaded client side application programming interfaces may not be activated except under some circumstances. For example when network quality of either of the network between the client side gateway and the mobile communication device and the network between the client side gateway and the controller is below a predefined threshold some of the preloaded client side application programming interfaces may be executed locally on the server side gateway . The execution results may be transmitted to the controller . For example the execution results may be bundled and compressed and transmitted from the server side gateway to the controller . The data from the application programming interfaces that can only be executed on the application server may be compressed by the server side gateway and transmitted to the mobile communication device with proper timing and synchronization.

The controller may oversee timing and synchronization and or execution of some of application programming interfaces. The controller may be notified of any change that the client server side gateway makes to the online augmented reality game system. In an embodiment the controller may initialize establish and dynamically determine timing and synchronization for the online augmented reality game system. The controller may dynamically determine which application programming interfaces can be executed locally for example on the server side gateway on the client side gateway on the controller and on a separate server. For example the controller may be preloaded with application programming interfaces that can be executed on the controller . The preloaded controller application programming interfaces may not be activated except under some circumstances. When the controller determines which controller application programming interfaces may be executed locally on the controller the corresponding controller application programming interfaces may be activated and executed.

For example the controller may initialize the timing and synchronization of the controller the gateways the mobile communication device and the application server based on the timing and synchronization information stored in the data store . For example the controller may access the data store for the timing and synchronization initialization information. The controller may initialize the timing and synchronization for different components. For example the controller may initialize the timing and synchronization between different nodes. Timing and synchronization rates between different nodes may vary. For example timing and synchronization rate between the client side gateway and the client application may be different from timing and synchronization rate between the server side gateway and the application server . For example the controller may initialize the timing and synchronization between the controller and the server side gateway . The controller may initialize the timing and synchronization between the controller and the client side gateway . Additionally the controller may initialize end to end timing and synchronization between the client application and the application server .

The controller may initialize the timing and synchronization between the client side gateway and the client application or send a notification to the client side gateway with initial timing and synchronization information. The client side gateway may then initialize the timing and synchronization between the client application and the client side gateway the initial timing and synchronization information. Similarly the controller may initialize the timing and synchronization between the server side gateway and the application server or send a notification to the server side gateway with initial timing and synchronization information. The server side gateway may then initialize the timing and synchronization between the client application and the client side gateway with the initial timing and synchronization information.

The controller may adjust the timing and synchronization based on network measurements and or predicted network performance for example via the controller synchronization application . The controller may obtain receive historical network traffic information from the data store and predict future network performance. For example if more wireless clients join the same interactive space the controller may dynamically determine the synchronization between the client side gateway and the server side gateway . As another example when network quality changes in any of the networks between all nodes the controller may be notified. The controller may adjust the timing and synchronization accordingly. For example when the network quality between the server side gateway and the application server falls below a predefined threshold the server side gateway may send a notice to the controller with the updated network quality information. The controller may adjust the timing and synchronization rate between the server side gateway and the application server by directly changing the rate with the server synchronization application and or by sending a notice with the updated rate. Additionally the controller may calculate a synchronization and timing error between all nodes and correct accordingly for example by adjusting synchronization and timing rate s .

The controller may first determine which application programming interfaces can be executed locally in general for example on the server side gateway on the client side gateway on the controller and on a separate server. The controller may further determine which application programming interfaces may be executed on each of the nodes based on a variety of reasons for example based on measured network quality and or predicted network performance. The controller may dynamically determine which application programming interfaces may be executed on each of the nodes under certain circumstances. For example if more wireless clients join the same interactive space the controller may dynamically determine which application programming interfaces may be executed on the server side gateway on the client side gateway on the controller or on a separate server.

Execution results of the locally executed application programming interfaces that can be executed on either the server side gateway or the client side gateway may be transmitted back to the controller . For example client execution results from the server side application programming interfaces may be transmitted from the client side gateway to the controller . The controller may transmit the client results to the server side gateway . The server side gateway may unbundle and decompress the client results from the controller . Similarly application server execution results from the client side application programming interfaces may be transmitted from the server side gateway to the controller . The controller may transmit the application server results to the client side gateway . The client side gateway may unbundle and decompress the application server results from the controller . The client server side gateway may send an updated compression rate to the controller . The controller may then update the data store with the compression rates. Additionally state of the locally executed application programming interfaces may be updated by the controller to match internal state at the other end. For example the state of the server side application programming interfaces may be updated by the controller to match the internal state of the client side application programming interfaces . The state of the client side application programming interfaces may be updated by the controller to match the internal state of the server side application programming interfaces .

For application programming interfaces that can only be executed on one side and may desire to be transmitted end to end the controller may bundle and compress data from the application programming interfaces and deliver from end to end with proper timing and synchronization.

Turning now to and a method is described. At block a system is initialized with timing and synchronization information based on data accessed from a data store. For example an online augmented reality game system may be initialized with timing and synchronization information based on data accessed from a data store . In an embodiment the controller may access the data store for the timing and synchronization initialization information and initialize the system with the acquired information. At block records of the timing and synchronization information are kept. For example records of the timing and synchronization information are kept in the data store . For example when any of the timing and synchronization rates in the online augmented reality game system is changed the controller may send a notice to the data store with the updated timing and synchronization rate. The data store may then update the record for that timing and synchronization rate.

At block timing and synchronization is adjusted for the system by a controller based on network quality measurements and predicted network performance. For example the controller may adjust timing and synchronization for the online augmented reality game system based on network quality measurements and predicted network performance. The network quality measurements and predicted network performance may be obtained from the client side gateway and the server side gateway .

At block a tickrate is established and adjusted with an application server by a server side gateway based on measurements and predicted performance of a network between the application server and the server side gateway before a predefined period of time expires wherein a tickrate is a rate of ticks per unit of time and during each tick the application server processes client commands runs a physical simulation step checks application rules and updates object states. For example a tickrate may be established by the server side gateway based on measurements and predicted performance of the network between the application server and the server side gateway . Before a predefined period of time a threshold expires the server side gateway may autonomously make decisions on the tickrate. When the predefined period of time expires the server side gateway may return the right to the controller to make decisions on the tickrate.

At block a tickrate is established and adjusted with a client application by a client side gateway based on measurements and predicted performance of a network between the client application and the client side gateway before a predefined period of time expires wherein the tickrate with the client application can be different from the tickrate between the server side gateway and the application server. Similar to the tickrate between the application server and the server side gateway a tickrate between the mobile communication device and the client side gateway may be determined by the client side gateway before a predefined period of time a threshold expires. The threshold for the client side gateway may be different from the threshold for the server side gateway . Also when the predefined period of time expires the client side gateway may return the right to the controller to make decisions on the tickrate.

At block tickrate decisions are transmitted to the controller. For example tickrate decisions made by the client side gateway and the server side gateway may be transmitted to the controller so that the controller may oversee the tickrates for the online augmented reality game system. The controller may then update the data store with the timing and synchronization information accordingly. At block thresholds of time periods are adjusted by the controller for the client side gateway and the server side gateway to autonomously make timing and synchronization decisions. For example the controller may adjust the threshold for the server side gateway or the client side gateway to autonomously determine a tickrate when the network at the server side gateway or the client side gateway fluctuates at a frequency higher than a predefined amount. At block which application programming interfaces APIs to be executed on the client side gateway the server side gateway the controller or a separate server based on the network quality measurements and the predicted network performance are dynamically determined. For example the controller may dynamically determine which application programming interfaces are to be executed on the client side gateway the server side gateway the controller or a separate server based on the network quality measurements and the predicted network performance. For example during the process of a user playing the online augmented reality game the controller may reassign the application programming interfaces to be executed on the client side gateway the server side gateway the controller or the separate server to accommodate the online augmented reality game system to network quality change.

At block client side application programming interfaces are executed by the server side gateway as determined by the controller based on the network quality measurements and the predicted network performance. For example the server side gateway may execute the client side application programming interfaces that are determined by the controller to be executed locally on the server side gateway . At block server side application programming interfaces are executed by the client side gateway as determined by the controller based on the network quality measurements and the predicted network performance. Similarly the client side gateway may execute the server side application programming interfaces that are determined by the controller to be executed locally on the client side gateway . At block execution results of the locally executed application programming interfaces are transmitted to the controller by the client side gateway and the server side gateway. For example execution results of the application programming interfaces that are executed on the client side gateway and the server side gateway may be transmitted to the controller . At block execution results and data are compressed by the controller for delivery between the client side gateway and the server side gateway with proper timing and synchronization. For example the controller may compress execution results and data from one of the client side gateway and the server side gateway to send to the other.

Turning now to a method is described. At block timing and synchronization for the online augmented reality game system is established by a controller based on network quality measurements and predicted network performance. At block a timing and synchronization rate with an application server is established and adjusted by a server side gateway based on measurements and predicted performance of a network between the application server and the server side gateway before a predefined period of time expires. At block a timing and synchronization rate with a client application is established and adjusted by a client side gateway based on measurements and predicted performance of a network between the client application and the client side gateway before a predefined period of time expires wherein the timing and synchronization rate with the client application can be different from the timing and synchronization rate between the server side gateway and the application server .

At block timing and synchronization decisions are transmitted to the controller . At block which application programming interfaces to be executed on the client side gateway the server side gateway the controller or a separate server are determined based on local environment. At block client side application programming interfaces APIs are executed by the server side gateway as determined by the controller based on the network quality measurements and the predicted network performance. At block server side application programming interfaces are executed by the client side gateway as determined by the controller based on the network quality measurements and the predicted network performance. At block execution results of the locally executed application programming interfaces are transmitted to the controller by the client side gateway and the server side gateway .

The DSP or some other form of controller or central processing unit operates to control the various components of the mobile device in accordance with embedded software or firmware stored in memory or stored in memory contained within the DSP itself. In addition to the embedded software or firmware the DSP may execute other applications stored in the memory or made available via information carrier media such as portable data storage media like the removable memory card or via wired or wireless network communications. The application software may comprise a compiled set of machine readable instructions that configure the DSP to provide the desired functionality or the application software may be high level software instructions to be processed by an interpreter or compiler to indirectly configure the DSP .

The DSP may communicate with a wireless network via the analog baseband processing unit . In some embodiments the communication may provide Internet connectivity enabling a user to gain access to content on the Internet and to send and receive e mail or text messages. The input output interface interconnects the DSP and various memories and interfaces. The memory and the removable memory card may provide software and data to configure the operation of the DSP . Among the interfaces may be the USB port and the infrared port . The USB port may enable the mobile device to function as a peripheral device to exchange information with a personal computer or other computer system. The infrared port and other optional ports such as a Bluetooth interface or an IEEE 802.11 compliant wireless interface may enable the mobile device to communicate wirelessly with other nearby handsets and or wireless base stations.

The keypad couples to the DSP via the input output interface to provide one mechanism for the user to make selections enter information and otherwise provide input to the mobile device . Another input mechanism may be the touch screen LCD which may also display text and or graphics to the user. The touch screen LCD controller couples the DSP to the touch screen LCD . The GPS receiver is coupled to the DSP to decode global positioning system signals thereby enabling the mobile device to determine its position.

It is understood that by programming and or loading executable instructions onto the computer system at least one of the CPU the RAM and the ROM are changed transforming the computer system in part into a particular machine or apparatus having the novel functionality taught by the present disclosure. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally a design that is still subject to frequent change may be preferred to be implemented in software because re spinning a hardware implementation is more expensive than re spinning a software design. Generally a design that is stable that will be produced in large volume may be preferred to be implemented in hardware for example in an application specific integrated circuit ASIC because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed by well known design rules to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus likewise a computer that has been programmed and or loaded with executable instructions may be viewed as a particular machine or apparatus.

The secondary storage is typically comprised of one or more disk drives or tape drives and is used for non volatile storage of data and as an over flow data storage device if RAM is not large enough to hold all working data. Secondary storage may be used to store programs which are loaded into RAM when such programs are selected for execution. The ROM is used to store instructions and perhaps data which are read during program execution. ROM is a non volatile memory device which typically has a small memory capacity relative to the larger memory capacity of secondary storage . The RAM is used to store volatile data and perhaps to store instructions. Access to both ROM and RAM is typically faster than to secondary storage . The secondary storage the RAM and or the ROM may be referred to in some contexts as computer readable storage media and or non transitory computer readable media.

I O devices may include printers video monitors liquid crystal displays LCDs touch screen displays keyboards keypads switches dials mice track balls voice recognizers card readers paper tape readers or other well known input devices.

The network connectivity devices may take the form of modems modem banks Ethernet cards universal serial bus USB interface cards serial interfaces token ring cards fiber distributed data interface FDDI cards wireless local area network WLAN cards radio transceiver cards such as code division multiple access CDMA global system for mobile communications GSM long term evolution LTE worldwide interoperability for microwave access WiMAX and or other air interface protocol radio transceiver cards and other well known network devices. These network connectivity devices may enable the processor to communicate with the Internet or one or more intranets. With such a network connection it is contemplated that the processor might receive information from the network or might output information to the network in the course of performing the above described method steps. Such information which is often represented as a sequence of instructions to be executed using processor may be received from and outputted to the network for example in the form of a computer data signal embodied in a carrier wave.

Such information which may include data or instructions to be executed using processor for example may be received from and outputted to the network for example in the form of a computer data baseband signal or signal embodied in a carrier wave. The baseband signal or signal embedded in the carrier wave or other types of signals currently used or hereafter developed may be generated according to several methods well known to one skilled in the art. The baseband signal and or signal embedded in the carrier wave may be referred to in some contexts as a transitory signal.

The processor executes instructions codes computer programs scripts which it accesses from hard disk floppy disk optical disk these various disk based systems may all be considered secondary storage ROM RAM or the network connectivity devices . While only one processor is shown multiple processors may be present. Thus while instructions may be discussed as executed by a processor the instructions may be executed simultaneously serially or otherwise executed by one or multiple processors. Instructions codes computer programs scripts and or data that may be accessed from the secondary storage for example hard drives floppy disks optical disks and or other device the ROM and or the RAM may be referred to in some contexts as non transitory instructions and or non transitory information.

In an embodiment the computer system may comprise two or more computers in communication with each other that collaborate to perform a task. For example but not by way of limitation an application may be partitioned in such a way as to permit concurrent and or parallel processing of the instructions of the application. Alternatively the data processed by the application may be partitioned in such a way as to permit concurrent and or parallel processing of different portions of a data set by the two or more computers. In an embodiment virtualization software may be employed by the computer system to provide the functionality of a number of servers that is not directly bound to the number of computers in the computer system . For example virtualization software may provide twenty virtual servers on four physical computers. In an embodiment the functionality disclosed above may be provided by executing the application and or applications in a cloud computing environment. Cloud computing may comprise providing computing services via a network connection using dynamically scalable computing resources. Cloud computing may be supported at least in part by virtualization software. A cloud computing environment may be established by an enterprise and or may be hired on an as needed basis from a third party provider. Some cloud computing environments may comprise cloud computing resources owned and operated by the enterprise as well as cloud computing resources hired and or leased from a third party provider.

In an embodiment some or all of the functionality disclosed above may be provided as a computer program product. The computer program product may comprise one or more computer readable storage medium having computer usable program code embodied therein to implement the functionality disclosed above. The computer program product may comprise data structures executable instructions and other computer usable program code. The computer program product may be embodied in removable computer storage media and or non removable computer storage media. The removable computer readable storage medium may comprise without limitation a paper tape a magnetic tape magnetic disk an optical disk a solid state memory chip for example analog magnetic tape compact disk read only memory CD ROM disks floppy disks jump drives digital cards multimedia cards and others. The computer program product may be suitable for loading by the computer system at least portions of the contents of the computer program product to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system . The processor may process the executable instructions and or data structures in part by directly accessing the computer program product for example by reading from a CD ROM disk inserted into a disk drive peripheral of the computer system . Alternatively the processor may process the executable instructions and or data structures by remotely accessing the computer program product for example by downloading the executable instructions and or data structures from a remote server through the network connectivity devices . The computer program product may comprise instructions that promote the loading and or copying of data data structures files and or executable instructions to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system .

In some contexts the secondary storage the ROM and the RAM may be referred to as a non transitory computer readable medium or a computer readable storage media. A dynamic RAM embodiment of the RAM likewise may be referred to as a non transitory computer readable medium in that while the dynamic RAM receives electrical power and is operated in accordance with its design for example during a period of time during which the computer system is turned on and operational the dynamic RAM stores information that is written to it. Similarly the processor may comprise an internal RAM an internal ROM a cache memory and or other internal non transitory storage blocks sections or components that may be referred to in some contexts as non transitory computer readable media or computer readable storage media.

While several embodiments have been provided in the present disclosure it should be understood that the disclosed systems and methods may be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

Also techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein.

