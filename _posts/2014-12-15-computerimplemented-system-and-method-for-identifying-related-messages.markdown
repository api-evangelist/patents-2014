---

title: Computer-implemented system and method for identifying related messages
abstract: A system and method for identifying related messages are provided. A set of messages, each having a header, sender and transmission time, is obtained. A message is selected from the set. A body of the selected message is compared to a body of a further message in the set. The further message is labeled as a duplicate of the selected message when the bodies match. The duplicate labeling of the further message is verified when the header, sender, and transmission time of the further message matches the header, sender, and transmission time of the selected message. The duplicate messages are removed from the set. The remaining messages are sorted in order of message length. A shorter message is compared with a longer message and is marked as a near duplicate of the longer message when the body of the shorter message is included in the body of the longer message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384250&OS=09384250&RS=09384250
owner: FTI TECHNOLOGY LLC
number: 09384250
owner_city: Annapolis
owner_country: US
publication_date: 20141215
---
This patent application is a continuation of U.S. Pat. No. 8 914 331 issued Dec. 16 2014 which is a continuation of U.S. Pat. No. 8 626 767 issued Jan. 7 2014 which is a continuation of U.S. Pat. No. 8 458 183 issued Jun. 4 2013 which is a continuation of U.S. Pat. No. 8 108 397 issued Jan. 31 2012 which is a continuation of U.S. Pat. No. 7 836 054 issued Nov. 16 2010 which is a continuation of U.S. Pat. No. 7 577 656 issued Aug. 18 2009 which is a continuation of U.S. Pat. No. 7 035 876 issued Apr. 25 2006 which is a continuation of U.S. Pat. No. 6 820 081 issued Nov. 16 2004 which is a continuation in part of U.S. Pat. No. 6 745 197 issued Jun. 1 2004 the priority dates of which are claimed and the disclosures of which are incorporated by reference.

The present invention relates in general to stored message categorization and in particular to a computer implemented system and method for identifying related messages.

Presently electronic messaging constitutes a major form of interpersonal communications complimentary to and in some respects replacing conventional voice based communications. Electronic messaging includes traditional electronic mail e mail and has grown to encompass scheduling tasking contact and project management and an increasing number of automated workgroup activities. Electronic messaging also includes the exchange of electronic documents and multimedia content often included as attachments. And unlike voice mail electronic messaging can easily be communicated to an audience ranging from a single user a workgroup a corporation or even the world at large through pre defined message address lists.

The basic electronic messaging architecture includes a message exchange server communicating with a plurality of individual subscribers or clients. The message exchange server acts as an electronic message custodian which maintains receives and distributes electronic messages from the clients using one or more message databases. Individual electronic messaging information is kept in message stores referred to as folders or archives identified by user account within the message databases. Generally by policy a corporation will archive the message databases as historical data storing during routine backup procedures.

The information contained in archived electronic messages can provide a potentially useful chronology of historically significant events. For instance message conversation threads present a running dialogue which can chronicle the decision making processes undertaken by individuals during the execution of their corporate responsibilities. As well individual message store archives can corroborate the receipt and acknowledgment of certain corporate communications both locally and in distributed locations. And the archived electronic message databases create useful audit trails for tracing information flow.

Consequently fact seekers are increasingly turning to archived electronic message stores to locate crucial information and to gain insight into individual motivations and behaviors. In particular electronic message stores are now almost routinely produced during the discovery phase of litigation to obtain evidence and materials useful to the litigants and the court. Discovery involves document review during which all relevant materials are read and analyzed. The document review process is time consuming and expensive as each document must ultimately be manually read. Pre analyzing documents to remove duplicative information can save significant time and expense by paring down the review field particularly when dealing with the large number of individual messages stored in each of the archived electronic messages stores for a community of users.

Typically electronic messages maintained in archived electronic message stores are physically stored as data objects containing text or other content. Many of these objects are duplicates at least in part of other objects in the message store for the same user or for other users. For example electronic messages are often duplicated through inclusion in a reply or forwarded message or as an attachment. A chain of such recursively included messages constitutes a conversation thread. In addition broadcasting multitasking and bulk electronic message mailings cause message duplication across any number of individual electronic messaging accounts.

Although the goal of document pre analysis is to pare down the size of the review field the simplistic removal of wholly exact duplicate messages provides only a partial solution. On average exactly duplicated messages constitute a small proportion of duplicated material. A much larger proportion of duplicated electronic messages are part of conversation threads that contain embedded information generated through a reply forwarding or attachment. The message containing the longest conversation thread is often the most pertinent message since each of the earlier messages is carried forward within the message itself. The messages comprising a conversation thread are near exact duplicate messages which can also be of interest in showing temporal and substantive relationships as well as revealing potentially duplicated information.

In the prior art electronic messaging applications provide limited tools for processing electronic messages. Electronic messaging clients such as the Outlook product licensed by Microsoft Corporation Redmond Wash. or the cc mail product licensed by Lotus Corporation Cambridge Mass. provide rudimentary facilities for sorting and grouping stored messages based on literal data occurring in each message such as sender recipient subject send date and so forth. Attachments are generally treated as separate objects and are not factored into sorting and grouping operations. However these facilities are limited to processing only those messages stored in a single user account and are unable to handle multiple electronic message stores maintained by different message custodians. In addition the systems only provide partial sorting and grouping capabilities and do not provide for culling out message with duplicate attachments.

Therefore there is a need for an approach to processing electronic messages maintained in multiple message stores for document pre analysis. Preferably such an approach would identify messages duplicative both in literal content as well as with respect to attachments independent of source and would grade the electronic messages into categories that include unique exact duplicate and near duplicate messages as well as determine conversation thread length.

There is a further need for an approach to identifying unique messages and related duplicate and near duplicate messages maintained in multiple message stores. Preferably such an approach would include an ability to separate unique messages and to later reaggregate selected unique messages with their related duplicate and near duplicate messages as necessary.

There is a further need for an approach to processing electronic messages generated by Messaging Application Programming Interface MAPI compliant applications.

The present invention provides a system and method for generating a shadow store storing messages selected from an aggregate collection of message stores. The shadow store can be used in a document review process. The shadow store is created by extracting selected information about messages from each of the individual message stores into a master array. The master array is processed to identify message topics which occur only once in the individual message stores and to then identify the related messages as unique. The remaining non unique messages are processed topic by topic in a topic array from which duplicate near duplicate and unique messages are identified. In addition thread counts are tallied. A log file indicating the nature and location of each message and the relationship of each message to other messages is generated. Substantially unique messages are copied into the shadow store for use in other processes such as a document review process. Optionally selected duplicate and near duplicate messages are also copied into the shadow store or any other store containing the related unique message.

An embodiment provides a system and method for identifying related messages. A set of messages each having a header sender and transmission time is obtained. A message is selected from the set. A body of the selected message is compared to a body of a further message in the set. The further message is labeled as a duplicate of the selected message when the bodies match. The duplicate labeling of the further message is verified when the header sender and transmission time of the further message matches the header sender and transmission time of the selected message. The duplicate messages are removed from the set. The remaining messages are sorted in order of message length. A shorter message is compared with a longer message and is marked as a near duplicate of the longer message when the body of the shorter message is included in the body of the longer message.

Still other embodiments of the present invention will become readily apparent to those skilled in the art from the following detailed description wherein is described embodiments of the invention by way of illustrating the best mode contemplated for carrying out the invention. As will be realized the invention is capable of other and different embodiments and its several details are capable of modifications in various obvious respects all without departing from the spirit and the scope of the present invention. Accordingly the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.

Electronic messages particularly electronic mail email are exchanged between the various systems interconnected via the distributed computing environment . Throughout this document the terms electronic message and message are used interchangeably with the same intended meaning. In addition message types encompass electronic mail voice mail images scheduling tasking contact management project management workgroup activities multimedia content and other forms of electronically communicable objects as would be recognized by one skilled in the art. These systems include a server providing a message exchange service to a plurality of clients interconnected via the intranetwork . The clients can also subscribe to a remote message exchange service provided by a remote server interconnected via the internetwork . Similarly a remote client can subscribe to either or both of the message exchange services from the server and the remote server via the internetwork .

Each of the systems is coupled to a storage device. The server clients and remote client each maintain stored data in a local storage device . The remote server maintains stored data in a local storage device not shown and can also maintain stored data for remote systems in a remote storage device that is a storage device situated remotely relative to the server clients and remote client . The storage devices include conventional hard drives removable and fixed media CD ROM and DVD drives and all other forms of volatile and non volatile storage devices.

Each of the systems also maintains a message store either on the local storage device or remote storage device in which electronic messages are stored or archived. Each message store constitutes an identifiable repository within which electronic messages are kept and can include an integral or separate archive message store for off line storage. Internally each message store can contain one or more message folders not shown containing groups of related messages such as an Inbox message folder for incoming messages an Outbox message folder for outgoing messages and the like. For clarity of discussion individual message folders will be treated alike although one skilled in the art would recognize that contextually related message folders might be separately processed.

In a workgroup computing environment the server collectively maintains the message stores as a workgroup message store WMS for each subscribing client and remote client . In a distributed computing environment each client and remote client might maintain an individual message store either in lieu of or in addition to a workgroup message store . Similarly the remote server could maintain a workgroup message store for remote clients.

Over time each of the message stores unavoidably accumulates duplicates at least in part of other electronic messages stored in the message store for the same user or for other users. These duplicate and near duplicate electronic messages should be identified and removed during document pre analysis. Thus the server includes a message processor for efficiently processing the electronic messages stored in the various message stores as further described below beginning with reference to . Optionally an individual client could also include the message processor . The actual homing of the message processor is only limited by physical resource availability required to store and process individual message stores and workgroup message stores .

The electronic messages are retrieved directly from the individual message stores the workgroup message stores or consolidated from these message stores into a combined message store. For document pre analysis the message stores can include both active on line messages and archived off line messages maintained in a local storage device or remote storage device .

The individual computer systems including the server clients remote server and remote client are general purpose programmed digital computing devices consisting of a central processing unit CPU random access memory RAM non volatile secondary storage such as a hard drive CD ROM or DVD drive network interfaces and peripheral devices including user interfacing means such as a keyboard and display. Program code including software programs and data are loaded into the RAM for execution and processing by the CPU and results are generated for display output transmittal or storage.

The server includes the messages processor and optionally operates a messaging application . The messaging application provides services with respect to electronic message exchange and information storage to individual clients remote servers and remote clients shown in . On an application side these services include providing electronic mail scheduling tasking contact and project management and related automated workgroup activities support. On a system side these services include message addressing storage and exchange and interfacing to low level electronic messaging subsystems. An example of a message exchange server is the Exchange Server product licensed by Microsoft Corporation Redmond Wash. Preferably the message exchange server incorporates a Messaging Application Programming Interface MAPI compliant architecture such as described in R. Orfali et al. Client Server Survival Guide Ch. 19 John Wiley Sons Inc. 1999 3d ed. the disclosure of which is incorporated by reference. The messaging application is not a part of the present invention but is shown to illustrate a suitable environment in which the invention may operate.

The message processor processes the message stores shown in to efficiently pre analyze the electronic messages as further described below with reference to . The message stores are processed to create one or more constructs stored into a shadow store . A point to point keyed collection stores cross references between the identifier of the original message store or folder in the original message store and the identifier of the newly created corresponding folder or subfolder in the shadow store . During processing the electronic messages are graded into duplicate near duplicate and unique categories and tagged by longest conversation thread.

The results of message processing are chronicled into a log to identify unique messages and to create a processing audit trail for allowing the source and ultimate disposition of any given message to be readily traced. As well a cross reference keyed collection allows unique message identifiers to be submitted and the source location information of those messages that are duplicates or near duplicates of the unique message to be retrieved. The retrieval information allows the optional reaggregation of selected unique messages and the related duplicate and near duplicates messages at a later time such as by inclusion into the shadow store at the end of the document review process. Optionally the duplicate and near duplicate messages can be rejoined with their related unique messages for completeness. The log records not only the disposition of each message but in the case of duplicate and near duplicate messages indicates the unique message with which each duplicate and near duplicate message is associated thereby permitting specific duplicate and near duplicate messages to be located and optionally reaggregated with selected unique messages at a later time. In the described embodiment the cross reference keyed collection is maintained as part of the log but is separately identified for purposes of clarity. The unique messages are copied into the shadow store for forwarding to the next stage of document review.

The messages in the master array are sorted by topic to identify unique messages and conversation threads as reflected by ranges of multiple occurrences of the same topic. The identification information metadata for those messages having identical topics is extracted into a topic array as each new topic is encountered within the master array .

The topic array functions as a working array within which topically identical messages are processed. The identification information extracted from the master array is used to copy into the topic array further information from messages sharing a common topic including their plaintext. At any point in processing the topic array contains only those messages sharing a common topic. These topically identical messages are sorted by plaintext body and analyzed. Exact duplicate messages containing substantially duplicated content are removed from the topic array . The remaining non exact duplicate messages in the topic array are searched for thread markers indicating recursively included content and conversation thread lengths are tallied. The messages in the topic array are compared and near duplicate messages are identified. The unique messages are marked for transfer into the shadow store .

The message processor includes four primary modules exact duplicate message selector thread length selector near duplicate message selector and unique message selector . Prior to processing the message stores are logically consolidated into the master array . At each stage of message processing a log entry is created or an existing entry modified in a log to track messages and record message identification information. The exact duplicate message selector identifies and removes those exact duplicate messages containing substantially duplicative content from the topic array . The thread length selector tallies the conversation thread lengths and maintains an ordering of thread lengths preferably from shortest to longest conversation thread length. The near duplicate message selector designates as near duplicate messages those whose content is recursively included in other messages such as those messages generated through a reply or forwarding sequence or as an attachment. The unique message selector designates as unique messages those messages that have been extracted out of the master array as not being topically identical and those messages remaining after the exact duplicate messages and near duplicate messages have been identified. The unique messages are forwarded to the shadow store for use in subsequent document review. The unique near duplicate and exact duplicate messages as well as thread counts are regularly recorded into the log as the nature of each message is determined. As well the location information permitting subsequent retrieval of each near duplicate message and exact duplicate message is regularly inserted into the cross reference keyed collection relating the message to a unique message as the relationship is determined.

The example message includes two recursively included messages an original e mail message and a reply e mail message . The original e mail message was sent from a first user user1 aol.com to a second user user2 aol.com. In reply to the original e mail message the second user user2 aol.com generated the reply e mail message sent back to the first user user1 aol.com. Finally the first user user1 aol.com forwarded the reply e mail message which also included the original e mail message as a forwarded e mail message to a third user user3 aol.com.

Each of the e mail messages respectively includes a message body recursively included and a message header . The original e mail message and the reply e mail message are recursively included messages. The original e mail message is recursively included in both the reply e mail message and forwarded e mail message while the reply e mail message is recursively included only in the forwarded e mail message .

Each successive reply forwarding or similar operation increases the conversation thread length of the message. Thread lengths are indicated within the messages themselves by some form of delimiter. In the example shown the inclusion of the original e mail message in the reply e mail message is delimited by both a separator and a RE indicator in the subject line . Likewise the inclusion of the reply e mail message is delimited by a separator and a FW indicator in the subject line . The message separators and subject line indicators constitute thread markers that can be searched identified and analyzed by the message processor in determining thread lengths and near duplicate messages .

During initialization the message stores shown in are opened for access by the message processor block and the shadow store is created block as further described below with reference to . In the described embodiment the message processor has a finite program capacity presenting an upper bound on the maximum number of electronic messages to be processed during a single run. Consequently multiple processing passes may be required to process all of the messages stored in the aggregate of the message stores .

In the described embodiment assuming that the aggregate number of messages exceeds the program bounds the processing is broken down into a series of passes n during each of which a portion of the aggregate message stores is processed. The number of passes n required to process the source message stores is determined block by an appropriate equation such as the following equation 

In the described embodiment the aggregate selection of messages from the message stores is processed by overlapping partition i preferably labeled by dividing the alphabet into partitions corresponding to the number of passes n. For example if two passes n are required the partitions would be less than M and greater than L. Similarly if passes n were required the partitions would be less than Am and greater than Al and less than Ba. 

During operation the partitions if required are processed in an iterative processing loop blocks . During each pass n block the messages are processed block as further described below beginning with reference to . Upon the completion of the processing block the message stores are closed block . As an optional operation the exact duplicate messages and the near duplicates messages are reinserted into the shadow store block . The method terminates upon the completion of processing.

During the outer processing loop blocks a folder corresponding to each source message store is created in the shadow store block . Next each of the folders in the current selected source message store is iteratively processed in the inner processing loop blocks as follows. First the message counter is incremented by the number of messages in the folder being examined in the source message store block and a corresponding folder in the shadow store is created block . An entry is made in a point to point keyed collection block that constitutes a cross reference between a pointer to the original message store or folder in the original message store and a pointer to the newly created corresponding folder or subfolder in the shadow store . When unique messages are later copied into the shadow store this keyed file allows the copying to proceed point to point rather than requiring that the folders in the shadow store be iteratively searched to find the correct one. Processing of each folder in the current source message store continues block for each remaining folder in the source message store. Similarly processing of each of the source message stores themselves continues block for each remaining source message store after which the routine returns block providing a count of all the messages in all the source message stores so that the number of passes required can be determined.

The messages are processed in a processing loop blocks . During each iteration block each message in the selected folder is checked for membership in the current partition i of the source message stores block . If the message is in the current partition i block the message is logically transferred into the master array block by extracting the topic and location information including message identification information and pointers to the source message store the source message folder and to the individual message metadata . Using metadata rather than copying entire messages conserves storage and memory space and facilitates faster processing. Processing continues for each message in the selected folder block .

When all folders have been processed and the metadata for those messages found to be within the partition has been transferred into the master array message processing begins. The messages are sorted by topic block and the master array is processed block as further described below with reference to . Last the log is processed block after which the routine returns.

If the topics do not match block the preceding topic range is ending and a new topic range is starting. If the current message was not the first message with that topic block the range of messages with the same topic which began with the message marked at block is processed block . If the current message is the first message with the matching topic block the message is extracted as a unique message block and processing continues with the next message block . If the topic range has ended block each topically identical message plus message transmission time is logically extracted into the topic array block . In the described embodiment the messages are not physically copied into the topic array rather each message is logically transferred using metadata into the topic array to provide message source location information which is used to add a copy of the plaintext body of the message into the topic array. The topic array is sorted by plaintext body block and processed block as further described below with reference to . Processing continues with the next message block . The routine returns upon the processing of the last message in the master array .

During the first processing loop blocks each message in the topic array is examined. The plaintext body of the current message is compared to the plaintext body of the next message block . If the plaintext bodies match block an exact duplicate message possibly exists pending verification. The candidate exact duplicate is verified by comparing the header information shown in the sender of the message block and the transmission times of each message. If the match is verified block the first message is marked as an exact duplicate of the second message and the identification information for the first and second messages and their relationship is saved into the log block and cross reference keyed collection shown in . The processing of each subsequent message in the topic array block continues for the remaining messages.

Next the messages marked as exact duplicate messages are removed from the topic array block and the remaining non exact duplicate messages in the topic array are processed in the second processing loop blocks as follows. First each message is searched for thread markers including separators and subject line indicators shown in block . If thread markers are found block the number of thread marker occurrences m is counted and recorded block . Otherwise the message is recorded as having zero thread markers block . In the described embodiment the data entries having zero thread markers are included in the sorting operations. These messages have message content but do not include other messages. Recording zero thread markers allows these first in time messages to be compared against messages which do have included messages. Processing continues for each of the remaining messages block until all remaining messages in the topic array have been processed.

The topic array is next sorted in order of increasing thread markers m block and the messages remaining in the topic array are iteratively processed in the third processing loop block . During each processing loop block the first and subsequent messages are selected blocks and the plaintext body of the messages compared block . In the described embodiment a text comparison function is utilized to allow large text blocks to be efficiently compared. If the plaintext body of the first selected message is included in the plaintext body of the second selected message block the first message is marked as a near duplicate of the second message and identification information on the first and second messages and their relationship is saved into the log and cross reference keyed collection shown in block . If the plaintext body of the first selected message is not included in the plaintext body of the second selected message and additional messages occur subsequent to the second message in the topic array block the next message is selected and compared as before blocks . Each subsequent message in the topic array is processed block until all remaining messages have been processed after which the routine returns.

The production server maintains an archived message store AMS on a storage device and a database . The production server preferably functions as an off line message processing facility which receives individual message stores and workgroup message stores for document review processing as the archived message stores . The database abstracts the contents of individual messages extracted from the archived message stores into structured message records as a form of standardized representation for efficient processing and identification of duplicative content including attachments as further described below with reference to .

The production message server includes five primary modules message extractor message de duper parser digester and comparer . Prior to processing the production message processor logically assembles the archived message stores by first importing each individual message store and workgroup message store from the physical storage media upon which the message store is maintained. The archived message stores provide a normalized electronic storage structure independent of physical storage media. Consequently importing each individual message and workgroup message store can include converting the message store from a compressed or archival storage format into a standardized working message store format for message access and retrieval. In the described embodiment the formats used for individual messages and message stores as used in the Outlook family of messaging applications licensed by Microsoft Corporation Redmond Wash. and cc mail family of messaging applications licensed by Lotus Corporation Cambridge Mass. are supported and other messaging application formats could likewise be supported as would be recognized by one skilled in the art. At each stage of message processing a log entry can be created or an existing log entry modified in a log for tracking messages and recording message identification information.

The message extractor retrieves each individual message from the archived message stores . The parser parses individual fields from each extracted message and identifies message routing identification information and literal content within each field. The parsed metadata and message body are then stored in message records maintained in the database as further described below with reference to . Each message record includes a hash code associated with the message which is calculated by the digester exclusive of any attachments. Each attachment also includes a separately calculated attachment hash code . Each hash code is a sequence of alphanumeric characters representing the content also referred to as a digest.

The hash codes are calculated using a one way function to generate a substantially unique alphanumeric value including a purely numeric or alphabetic value associated with the message or attachment. The hash codes are calculated over at least part of each message header plus the complete message body. If the message includes attachments separate attachment hash codes are calculated over at least part of each attachment. For each message the hash code can be calculated over at least part of the header plus the complete message body. In addition the demarcation between the data constituting a header and the data constituting a message body can vary and other logical grouping of data into headers message bodies or other structures or groupings are possible as would be recognized by one skilled in the art.

In the described embodiment the MD5 hashing algorithm which stands for Message Digest No. 5 is utilized and converts an arbitrary sequence of bytes having any length into a finite 128 bit digest such as described in D. Gourley and B. Totty HTTP the Definitive Guide pp. 288 299 O Reilly and Assocs. Sebastopol Calif. 2002 the disclosure of which is incorporated by reference. Other forms of cryptographic check summing one way hash functions and fingerprinting functions are possible including the Secure Hash Algorithm SHA and other related approaches as would be recognized by one skilled in the art.

Once the message records in the database have been populated with the extracted messages the message de duper identifies unique messages exact duplicate messages and near duplicate messages as further described below with reference to . The messages are grouped by message hash codes and each group of matching hash codes is analyzed by comparing the content and the hash codes for each message and any associated attachments to identify unique messages exact duplicate messages and near duplicate messages. A hash code appearing in a group having only one message corresponds to a unique message. A hash code appearing in a group having two or more messages corresponds to a set of exact duplicate messages with either no attachments or with identical attachments. Optionally the exact duplicate messages and near duplicate messages can be maintained in a shadow store for data integrity and auditing purposes.

The files table stores one record for each individual message extracted from the archived message stores . Each record in the files table shares a one to one relationship with an extracted message. Each record is assigned a unique monotonically increasing identification number id . The files table includes fields for storing the extracted message name type type confirmation path length modified date created date description owner key and Bates tag . In addition the hash code for the extracted message exclusive of any attachments is stored in a hash code field .

The mail properties table contains the message routing identification information and literal content associated with each extracted message. Each record in the mail properties table shares a one to one relationship with an associated record in the files table . Each record in the mail properties table is identified by a file identifier FileId . The mail properties table includes fields for storing message unique ID sent from sent to sent cc sent bcc sent date subject thread subject and message . The hash code is calculated by the digester using select fields of each record which include all of the fields except the file identifier and message unique ID fields although one skilled in the art would recognize that other combinations and selections of fields could also be used to calculate the hash code .

The compound documents table and compound members table share a one to many relationship with each other. The records in the compound documents table and compound members table store any attachments associated with a given extracted message stored in a record in the file table . Each record in the compound documents table contains a root file identifier routeFileId . The compound documents table includes fields for storing marked category and the hash code is stored in a hash code field . Each record in the compound documents table shares a one to many relationship with each attachment associated with an extracted message. Similarly each record in the compound members is uniquely identified by a file ID FileId field and a compound document key field .

During the second phase individual messages are extracted from the archived message stores block as further described below with reference to . Briefly individual messages are extracted from the archived message stores digested into hash codes and and stored as message records in the database .

During the third phase the extracted messages as stored in message records in the database are de dupped that is processed to identify unique messages exact duplicate messages and near duplicate messages block . Finally the routine terminates.

The messages in each of the archived message stores are iteratively processed in a pair of nested processing loops blocks and blocks respectively . Each of the archived message stores is processed during an iteration of the outer processing loop block . Each message stored in an archived message store is processed during an iteration of the inner processing loop block . Each message is extracted from an archived message store block and each extracted message is digested into a hash code over at least part of the header plus the complete message body exclusive of any attachments block . Each hash code is a sequence of alphanumeric characters representing the content also referred to as a digest. The hash codes are calculated using a one way function to generate a substantially unique alphanumeric value including a purely numeric or alphabetic value associated with message or attachment. In the described embodiment the MD5 hashing algorithm is used to form a fixed length 128 bit digest of each extracted message and routing information. Next the metadata for each extracted message is parsed and stored into records in the files table and mail properties table along with the hash code and indexed by a unique identifier block .

If the extracted message contains one or more attachments block each attachment is iteratively processed blocks as follows. At least part of each attachment is digested by the digester into a hash code block . Each remaining attachment is iteratively processed block . The message hash code and each attachment hash code are concatenated into a compound hash code and are stored as a compound document record in the compound documents table and the compound members table block . Note the message hash code and each attachment hash code could also be logically concatenated and stored separately as would be recognized by one skilled in the art. Each message in the archived message store is iteratively processed block and each archived message store is iteratively processed block after which the routine returns.

The messages stored in records in the database are iteratively processed in a processing loop blocks . Each message is processed during an iteration of the processing loop block . First the file record corresponding to each message is retrieved from the database block . If the message is not a compound message that is the message does not contain attachments block the message hash code is obtained block and processing continues with the next message block . Otherwise if the message is a compound message block the compound hash code is obtained block and processing continues with the next message block .

Next the messages are grouped by matching hash codes block and each group of matching hash codes is iteratively processed in a processing loop blocks . Any groups with more than one message are processed to identify exact duplicates based on matching hash codes. A randomly selected message in the group is marked as a unique message block and the remaining messages in the group are culled that is marked as exact duplicates messages block . Other methodologies for selecting the unique message can be used as would be recognized by one skilled in the art. Processing continues with the next group block .

Next all non exact duplicate messages are now iteratively processed for near duplicates. The messages are grouped by conversation thread block . In the described embodiment the messages are sorted in descending order of message body length block although the messages could alternatively be sorted in ascending order as would be recognized by one skilled in the art. The threads messages and shorter messages are then iteratively processed in a series of nested processing loops blocks and respectively . Each thread is processed during an iteration of the outer processing loop block . Each message within the thread is processed during an iteration of an inner processing loop block and each message within the thread having an equal or shorter length that is each shorter message is processed during an iteration of an innermost processing loop block . The message bodies of the first message and the shorter message are compared block . If the message bodies are not contained within each other block the shorter message is left marked as a unique message and the processing continues with the next shorter message block .

Otherwise if the message body of the shorter message is contained within the message body of the first message block the attachment hash codes are compared block to identify unique messages and near duplicate messages as follows. First if the message does not include any attachments the shorter message is culled that is marked as a near duplicate of the first message block . If the message includes attachments block the individual attachment hash codes are compared to identify a matching or subset relationship block . If the attachment hash codes indicate a matching or subset relationship between the first message and the shorter message block the shorter message is culled that is marked as a near duplicate message of the first message block . Otherwise the shorter message is left marked as a unique message . Processing continues with the next shorter message in the thread block . After all shorter messages have been processed block processing continues with the next message block and next thread block respectively. The routine then returns.

While the invention has been particularly shown and described as referenced to the embodiments thereof those skilled in the art will understand that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention.

