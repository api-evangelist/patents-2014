---

title: Framework for early congestion notification and recovery in a virtualized environment
abstract: The congestion notification system of some embodiments sends congestion notification messages from lower layer (e.g., closer to a network) components to higher layer (e.g., closer to a packet sender) components. When the higher layer components receive the congestion notification messages, the higher layer components reduce the sending rate of packets (in some cases the rate is reduced to zero) to allow the lower layer components to lower congestion (i.e., create more space in their queues by sending more data packets along the series of components). In some embodiments, the higher layer components resume full speed sending of packets after a threshold time elapses without further notification of congestion. In other embodiments, the higher layer components resume full speed sending of packets after receiving a message indicating reduced congestion in the lower layers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09621471&OS=09621471&RS=09621471
owner: VMware, Inc.
number: 09621471
owner_city: Palo Alto
owner_country: US
publication_date: 20140630
---
Some current data centers and private enterprise networks run server virtualization software on compute nodes. These compute nodes generate large amounts of network traffic that includes traffic originating from the virtual machines as well as infrastructure traffic. Infrastructure traffic is traffic that originates from the host machine layer rather than a particular virtual machine implemented on the host machine.

Currently some networks send traffic as individual packets of data. A data item larger than an individual packet is broken down into multiple packets each packet is then sent over a network to a destination system e.g. a computer or virtual machine . When the packets reach their destination the data in the packets is reassembled to recreate the original data item. In current systems a packet is not guaranteed to reach its destination. Therefore for each packet successfully received the destination system sends an acknowledgement message back to the source address of the packet. The acknowledgement message alerts the original sender that that packet has been received. When a source system sends a packet that is lost in transmission e.g. the packet is sent to a malfunctioning or busy intermediate system the destination system does not send an acknowledgement message for that packet. The sending system is set up under the assumption that an unacknowledged packet was lost in transmission. Accordingly when a threshold amount of time passes after a packet is sent without the sending system receiving an acknowledgement message the sending system re sends the packet. In some network systems the threshold time is based on the round trip time between the sending and receiving systems. That is in some cases the allowable threshold is the time for the packet to travel from the source system to the destination system plus the time for the acknowledgement message to be generated and travel back to the source system plus some buffer time to account for reasonable delays.

When a source system and destination system are geographically distant the round trip time could be hundreds or thousands of milliseconds. The round trip time is great enough that it would be very inefficient to send one packet and then wait for acknowledgement of that packet before sending the next packet. Accordingly many packets are sent while waiting for the acknowledgement message for the first packet to arrive. The sending of many packets while waiting for an acknowledgement message to arrive causes problems when part of the transmission path between the systems is congested. Various networking links between systems have a limited memory capacity and serve as part of the path for multiple source and destination systems. When the memory capacity of an intermediary system is full or too close to full the intermediate system will start to drop packets or refuse new packets in some cases causing other intermediate systems to drop packets. In some cases an intermediary system refusing packets causes a great enough delay that a source system re sends the packets. The re sent packets can further increase congestion making the original problem worse.

In some networking systems when a threshold number of acknowledgement messages are missed within a particular amount of time the source system determines that there is congestion on the path the packets are taking. The source system then slows down the rate of packet transmission in order to allow the congestion to clear. However when the round trip time for packet and acknowledgement message is long many packets can be sent out before the source system recognizes that congestion is an issue. This causes inefficient retransmission of packets that will be stopped by congestion and or make the congestion worse. The inefficiency is particularly great when the point of congestion is within the same host machine as the source system e.g. the congestion is at one or more layers of a set of network transmission layers on a kernel of the host machine and the destination machine is far away. That is the traffic congestion is at the beginning of the transmission path but the round trip time is long and therefore the threshold for determining that packets are being lost is correspondingly long. In such cases it takes a long time to identify that there is congestion and many packets are sent at a high rate during that time.

Some embodiments provide a congestion notification system for a computer virtualization networking stack. The computer virtualization networking stack of some embodiments is a series of software and or hardware processes and or components that pass data in packets along the series of processes ultimately to a network. Although the term component is used herein one of ordinary skill in the art will understand that in some embodiments processes are used instead of components. In some embodiments some or all of the components include queues for storing data packets until the data packet can be sent to the next component in the series. These queues have finite capacity for data packets. When a queue of a component is full any additional data packets arriving at that component will be dropped. The packet sender will then have to resend the packets in order for the data in them to be received by the destination computer machine or virtual machine.

The congestion notification system of some embodiments sends messages from lower layer e.g. closer to the network in the series of components components to higher layer e.g. closer to the packet sender components. When the higher layer components receive the congestion notification messages the higher layer components reduce the sending rate of packets in some cases the rate is reduced to zero to allow the lower layer components to lower congestion i.e. create more space in their queues by sending more data packets along the series of components . In some embodiments the higher layer components resume full speed sending of packets after a threshold time elapses without further notification of congestion. In other embodiments the higher layer components resume full speed sending of packets after receiving a message indicating reduced congestion in the lower layers.

The preceding Summary is intended to serve as a brief introduction to some embodiments of the invention. It is not meant to be an introduction or overview of all inventive subject matter disclosed in this document. The Detailed Description that follows and the Drawings that are referred to in the Detailed Description will further describe the embodiments described in the Summary as well as other embodiments. Accordingly to understand all the embodiments described by this document a full review of the Summary Detailed Description and the Drawings is needed. Moreover the claimed subject matters are not to be limited by the illustrative details in the Summary Detailed Description and the Drawing but rather are to be defined by the appended claims because the claimed subject matters can be embodied in other specific forms without departing from the spirit of the subject matters.

Some embodiments of the invention provide early notification of congestion to a packet sender in order to allow the packet sender to reduce the rate at which it sends packets. By reducing the rate of sending packets earlier than would be possible in prior art systems the present invention reduces wasted time and further congestion delays caused by additional packets and re sent packets from the packet sender.

The congestion notification system of some embodiments sends congestion notification messages from lower layers of a computer virtualization network stack to higher layers of the stack. In response to the congestion messages the higher layer components reduce the rate of sending packets to allow the congestion to clear. conceptually illustrates a system of congestion notification in a multiple transmission layer host sending data to a network. The figure includes three stages a packet sender network stack layers and a physical network interface card pNIC a network congestion notification CN messages and congestion indicators and data packets .

The packet sender is a source of data to be sent over the network . The network stack layers represent different processes on a host machine that each receive packets from the packet sender or a previous network stack layer process the packets and send the packets to the next network stack layer or the pNIC . As indicated by the ellipsis between layers and in some embodiments additional network stack layers are provided. In the illustrated embodiment some network stack layers include queues to store packets before passing the packets on to the following network stack layer. If a new packet comes in to a particular network stack layer while the queue of that network stack layer is full the network stack layer drops the packet.

The congestion notification system is implemented by some embodiments in order to reduce the number of additional packets sent by the higher layers layers farther from the network to the lower layers layers closer to the network while the queues of the lower layers are full or nearly full . In stage the queues of network stack layers and are nearly full as indicated by congestion indicators and respectively. The congestion indicators and occupy a portion of their network stack layers proportional to the percentage of the queues are full. Even though the queues are not entirely full if the network stack layers and receive too many more packets before the congestion of the queues can be reduced e.g. by sending packets to the lower layers or the pNIC will cause the queues to fill completely. When the queues fill completely network stack layers and will start dropping packets.

To alert the process that manages network stack layer to the status of the queues as fuller than a threshold percentage in stage the processes that manage network stack layers and send CN messages and respectively to the process that manages network stack . The CN messages and indicate a need to reduce the rate of sending packets. Accordingly in response to the CN messages and the network stack layer reduces the rate of sending packets in some embodiments the rate is reduced to zero in some circumstances . Also in stage packets are about to be sent from packet sender and packets are arriving at network stack layer .

In stage the network stack layer stores packets in its queue as indicated by congestion indicator . Because of the CN messages and the process managing network stack layer does not send any packets to network stack layer . Meanwhile the processes managing network stack layers and send out packets and from their respective queues. Sending out packets and reduces the congestion in network stack layer and as indicated by congestion indicators and which are smaller in this stage than indicators and respectively in stage . In stage network stack layer stores packets making the queue of network stack layer fuller as indicated by congestion indicator . Network stack layers and send out packets and respectively further reducing their queues as indicated by congestion indicators and respectively while packets and continue to be passed toward the network .

The congestion notification system of some embodiments is implemented to solve problems caused by sending data over long distances on a conventional IP network. When sending data over a long distance there is a long delay between a point on the network becoming congested and a sender of data packets determining that there is congestion on the network. During this long delay the data packet sender sends out many more packets worsening the congestion. In systems without congestion notification the long delay occurs even when the congestion in the network is within the same host machine as the data packet sender.

The hosts and implement virtual machines not shown . For various reasons it is sometimes advantageous to move virtual machines from one host to another host. VM migrators transfer virtual machines between one host and another. The virtual machines are transferred as multiple packets sent over a network. When the host machines are distant from each other the round trip time for a packet and an acknowledgement message can be hundreds of milliseconds. Because of the long round trip time the expected time between sending a packet and receiving an acknowledgement message is correspondingly long. Therefore the amount of time it takes to determine from the absence of acknowledgement messages that the connection is congested is also correspondingly long. In that time many additional packets can be sent out causing further congestion and being blocked. Furthermore in some network systems the higher the delay between the sender and the receiver the higher the number of packets that the sender has to send without receiving acknowledgements in order for the sender and or other network components to determine that the connection is congested.

Some embodiments provide a congestion notification system that works within a particular host to allow network stack layers to identify and respond to local congestion quickly resulting in less packet loss and less overall congestion. For example in some embodiments if there is congestion on a host between a virtual switch and a pNIC the congestion notification system alerts the VM migrator the TCP IP stack or some other packet generating or transmitting element about the congestion. The element that receives the notification then reduces the transmission rate of the packets e.g. by storing packets in its own buffer in the case of packet transmitters or not generating packets in the case of packet generators . The reduced transmission rate of packets allows the lower layer to deal with the congestion before receiving too many additional packets.

The congestion notification system of some embodiments is implemented on host machines of a data center or private enterprise networking system. illustrates a host computer with multiple network stack layers. The figure shows a system in which the congestion notification system of some embodiments is implemented. The figure includes a host machine that implements a user space and a kernel . In the user space the host implements virtual machines with virtual network interface cards vNICs . In the kernel the host implements multiple network processes TCP IP stack with vNICs virtual switch and uplink manager . The host machine includes a physical network interface card pNIC . The kernel is conceptually divided into multiple layers representing different processes or sets of processes that implement network stack layers.

Host machine could be a host machine on a multi tenant datacenter or a host machine on a single tenant enterprise network. The user space and kernel are divisions of the computing capabilities of the host machine and may be implemented using different sets of application programming interfaces APIs . Accordingly processes running in the user space may have different restrictions on them and or have access to different resources than processes running in the kernel . The virtual machines simulate separate computers. The virtual machines can be virtual machines controlled by a single entity e.g. a single tenant or can be controlled by multiple entities e.g. multiple tenants . The virtual network interface cards vNICs are software constructs that the virtual machines use to connect to a virtual switch in the kernel of the host .

TCP IP stack is a software construct that manipulates data received from various network processes converting the data into IP packets that can be sent through the vNICs to virtual switch through the virtual and then out to a network e.g. a public datacenter an enterprise network the Internet etc. . Virtual switch is a software construct that receives IP packets from within the host and routes them toward their destinations inside or outside the host . The virtual switch also receives packets from outside the host and routes them to their destinations in the host . The uplink manager processes packets going from the virtual switch to the pNIC . The uplink manager stores the packets in an uplink queue until the pNIC is available to send the packets out. The pNIC is a hardware element that receives packets from within the host that have destinations outside the host and forwards those packets toward their destinations over a network. The pNIC also receives packets from outside the host e.g. from a local network or an external network such as the Internet and forwards those packets to the virtual switch for distribution within the host .

The TCP IP stack is a stack of protocols that together translate data from the various processes into IP packets that can be sent out on an IP network e.g. the Internet . The TCP IP stack does not send the packets directly to their destinations. Instead the TCP IP stack sends the IP packets through the vNICs . The vNICs store the packets in a virtual adapter dispatch queue until the virtual switch is ready to send the packets further. The virtual switch is a next hop in the direction of the ultimate destination of the IP packets. The virtual switch examines each IP packet individually to determine whether the destination of the packet is to a process running on the host or to a process or machine outside of the host . When an IP packet is addressed to a destination on the host the virtual switch sends the IP packet to the destination process on the host . When an IP packet is addressed to a destination not on the host the virtual switch forwards the IP packet to the uplink manager to be queued for pNIC . The pNIC sends the IP packet to a network not shown for further forwarding to its destination.

The kernel is shown as conceptually divided into multiple layers . The layers are not physical layers on the host but are shown to represent the order in which data passes from network processes to the pNIC . Layer is a TCP IP layer including the TCP IP stack that converts data from network processes into TCP IP packets. In some embodiments the TCP IP stack includes a TCP buffer for storing packets. Layer is a virtual interface layer including the vNICs which provide a virtual adapter dispatch queue. Switch port layer includes virtual switch . In some embodiments virtual switch passes packets from the vNICs to the uplink manager but does not include a packet queue. In other embodiments the virtual switch does include a packet queue. Uplink layer includes uplink manager . Uplink manager in some embodiments includes an uplink queue. The pNIC layer includes pNIC . In some embodiments the pNIC does not include a packet queue. In other embodiments the pNIC does include a packet queue.

In some embodiments any layer that includes a queue can be a potential choke point where packets can be dropped when the queue is full. Accordingly in some embodiments processes included in any or all layers with a queue provide congestion notification messages. Although the layers are shown with a single component each in the network stack in some embodiments a particular layer could include multiple components. For example in some embodiments the switch packet layer between the vNIC and the virtual switch could include multiple components such as firewalls virus scanners queue shaping applications and or any other applications associated with the networking software or by third parties etc. Any or all of these components could include queues that can become congested. Such queues create multiple chokepoints between the vNIC and the virtual switch. Therefore these components in some embodiments send congestion notification messages. Furthermore in some embodiments any or all of the additional components mentioned above are implemented between any other two identified layers e.g. between the virtual switch and the uplink manager instead of or in addition to being implemented between the vNIC and the virtual switch.

The congestion notification system of some embodiments is implemented to allow congestion notification between multiple components in a series of components in a computer virtualization networking stack. In some embodiments some or all of the components of the computer virtualization networking stack are controlled by separate entities e.g. separate computer processes components and or hardware on a host . illustrates a set of packets passing through a computer virtualization networking stack of some embodiments. In addition to various packet sending and transmitting elements from includes network and packets in stages . The figure shows the ideal progression of packets under ideal conditions with no congestion from a data sending process here the VM migrator to a network . In the bandwidth of each component and and network is represented by the height of the component. Under ideal conditions each component has the same bandwidth so none of the components becomes a bottleneck when packets are being sent. Because illustrates a computer virtualization networking stack under ideal conditions each component has the same bandwidth in this figure. However in subsequent figures with less ideal conditions the bandwidths of the components and the illustrated heights of the components in those figures vary.

The packets start from the VM migrator in stage . In some embodiments the VM migrator generates the packets in other embodiments the VM migrator provides raw data to another process which divides the raw data into packets. The packets are then transmitted to TCP IP stack in stage . The TCP IP stack translates the data into TCP IP packets. The packets are then transmitted to vNIC in stage . The packets are then transmitted to virtual switch in stage . The packets are then transmitted to uplink manager in stage . The packets are transmitted to pNIC in stage and then sent out onto network in stage .

In stage packets are being sent from VM migrator to TCP IP stack . Packets are being sent from vNIC to virtual switch . Packets are being sent from virtual switch to uplink manager . The uplink manager already has packets in its uplink queue as indicated by congestion indicator but in this stage pNIC is busy so no packets can be sent from the uplink queue to the pNIC by the uplink manager . In stage the uplink queue of the uplink manager is almost full as indicated by congestion indicator . In this figure congestion indicators occupy a portion of their corresponding component in a given stage that is proportional to how full the queue is during that stage.

In stage packets arrive at uplink manager . The packets finish filling up the uplink queue of the uplink manager as indicated by congestion indicator which covers the entire uplink manager . Meanwhile packets arrive at TCP IP stack ready to be sent to vNIC Packets arrive at the virtual switch ready to be sent to uplink manager with its full uplink queue .

In stage pNIC is no longer busy so uplink manager sends an individual packet from the uplink queue to pNIC . In the illustrated example the uplink manager has only enough bandwidth to send one packet per stage to the pNIC . In the same stage the packets arrive at the uplink manager . Since only one packet has left the uplink queue of the uplink manager there is only enough room in the uplink queue for one of the 4 packets . Accordingly one of the packets is stored in the uplink queue leaving the uplink queue full again and the uplink manager drops the other three packets represented as dropped packets . Additionally packets are transferred to vNIC ready for transfer to virtual switch .

In stage pNIC is also not busy so uplink manager sends an individual packet from the uplink queue to pNIC . Similarly pNIC sends individual packet out to the network. As mentioned above in the illustrated example the uplink manager has only enough bandwidth to send one packet per stage to the pNIC . In the same stage no packets arrive at the uplink manager leaving the uplink queue with one packet s worth of space as indicated by congestion indicator which covers most of uplink manager . Additionally packets are transferred from vNIC to virtual switch . In the next stage not shown the packets will reach the uplink manager overflowing the uplink queue again and forcing the uplink manager to again drop packets. With no congestion notification system in place packets will be dropped from two groups of packets.

In stage packets are being sent from VM migrator to TCP IP stack . Packets are about to be sent from vNIC to virtual switch . Packets are being sent from virtual switch to uplink manager . The uplink manager already has packets in its uplink queue as indicated by congestion indicator but in this stage pNIC is busy so no packets can be sent from the uplink queue to the pNIC by the uplink manager . In stage the uplink queue of the uplink manager is almost full as indicated by congestion indicator . In this figure congestion indicators occupy a portion of their corresponding component in a given stage that is proportional to how full the queue is during that stage.

In contrast to the computer virtualization networking stack of the computer virtualization networking stack of implements a congestion notification system. As the uplink queue of uplink manager is more than a threshold amount full the uplink manager sends a congestion notification message to the vNIC . This message alerts the vNIC to the congested status of the uplink queue. Although the uplink queue is not completely full when the congestion notification message is sent the message is sent in stage because packets that are already past vNIC e.g. packets could use up the rest of the space in the uplink queue of uplink manager .

In stage the packets arrive at uplink manager . The packets finish filling up the uplink queue of the uplink manager as indicated by congestion indicator which covers the entire uplink manager . Meanwhile packets arrive at TCP IP stack ready to be sent to vNIC . The vNIC in response to the congestion notification message has stored packets rather than sending the packets to virtual switch as happened to packets in . The storage of these packets in the vNIC queue of vNIC is shown by congestion indicator . The results of storing these packets rather than sending them to the virtual switch are shown in stage . While the embodiment of stores all the packets of packets in some embodiments some fraction of the packets e.g. based on the bandwidth of the uplink manager are sent while the rest are queued. For example in some embodiments the vNIC would send as many packets per stage as the uplink manager can send to the pNIC here one packet per stage when the pNIC is not busy.

In stage pNIC is no longer busy so uplink manager sends an individual packet from the uplink queue to pNIC . In the illustrated example the uplink manager has only enough bandwidth to send one packet per stage to the pNIC . In the same stage the packets having been stored in the vNIC queue of vNIC in stage do not arrive at the uplink manager . As the packets have not reached the uplink manager the packets do not overflow the uplink queue of the uplink manager as was the case with packets in stage of . Accordingly no packets are dropped. Furthermore the uplink queue is left with space for a packet as indicated by congestion indicator which covers most but not all of uplink manager .

Additionally packets are transferred to vNIC ready for transfer to virtual switch . However because of the previously received congestion notification message the vNIC will store the packets in the vNIC queue rather than sending them to virtual switch in stage . In stage pNIC is also not busy so uplink manager sends an individual packet from the uplink queue to pNIC . Similarly pNIC sends individual packet out to the network. As mentioned above in the illustrated example the uplink manager has only enough bandwidth to send one packet per stage to the pNIC . In the same stage no packets arrive at the uplink manager leaving the uplink queue with two packet s worth of space as indicated by congestion indicator which covers most of uplink manager . As mentioned above packets are not transferred from vNIC to virtual switch . Therefore in the next stage not shown no packets will reach the uplink manager. The uplink queue will not overflow and the uplink manager will not have to drop any packets. With the congestion notification system in place no packets are dropped from packets and .

The congestion notification system of includes a single component the uplink manager that notifies a higher component about congestion and a single component the vNIC that receives notifications about congestion. However other embodiments provide multiple components that notify higher components about congestion and or multiple components that receive notification about congestion. illustrates a congestion notification system of some embodiments with multiple components that notify higher components about congestion. The figure includes kernel VM migrator other network management application TCP IP stack with vNIC virtual switch uplink manager pNIC chokepoints and congestion notification system message bus congestion notification messages and threshold reached notification messages .

The VM migrator and other network management application are network management processes running on kernel . These and other network management processes not shown produce data that is sent as packets through various computer virtualization networking stack processes such as the TCP IP stack vNIC virtual switch and uplink manager . The data packets are then passed on to the pNIC for transmission to a network not shown . The computer virtualization networking stack processes of some embodiments include multiple chokepoints. In the embodiment of there are three chokepoints and . Each chokepoint represents a packet queue administered by a component of the computer virtualization networking stack processes. The packet queues are used to store packets until the packets can be sent along to the next component in the stack. For example chokepoint conceptually illustrates an uplink queue implemented by uplink manager . In some embodiments each component in the computer virtualization networking stack has a queue. In other embodiments some components have a queue and other components do not.

In the illustrated embodiment the vNIC is the sole component that receives notification of congestion further down the computer virtualization networking stack. In some embodiments the component responsible for a queue notifies the vNIC when congestion reaches a threshold level. That is when the queue is a threshold percentage full. In some embodiments each queue has an independent threshold setting. For example in some embodiments a first threshold level could be set for the queue represented by chokepoint e.g. a threshold at 90 a second threshold could be set for the queue represented by chokepoint e.g. a threshold at 70 etc. In some embodiments there is a default threshold setting for each chokepoint. In some such embodiments the default thresholds for the chokepoints can be overridden by configuration of the component managing the queue.

When the queue of a particular component reaches the threshold fullness the component sends a congestion notification message to the higher layer component here vNIC through a congestion notification system message bus . The congestion notification message of some embodiments includes more data than the fact that the threshold has been reached. For example the congestion notification message of some embodiments includes the actual percentage of congestion e.g. if the threshold level is 70 but the queue is actually 85 full the congestion notification message will indicate that the congestion level is 85 .

The congestion notification message of some embodiments includes the source of the packets e.g. the source IP address and or MAC address of the packet that are congesting the queue. In some embodiments the identified source is the source of the last packet to enter the queue. In some embodiments the identified source is source of the last packet received before the congestion message is sent e.g. the top packet in the queue or the last dropped packet . In other embodiments the identified source is based on a most common source of a sampling of packets e.g. a fraction or all of the packets in the queue. In some embodiments by the congestion notification system identifying the source of the congestion the higher component can selectively reduce the rate of sending packets only of those slow down packets from the source of the congestion without reducing the rates of sending packets from other sources. In some embodiments the congestion notification messages include other data relating to one or more packets in the queue e.g. the destination size a hash of the contents etc. . In some embodiments when the packets are TCP packets the congestion notification messages include TCP flow information e.g. source address destination address source port and destination port protocol in use a hash of the data in the message etc. .

The congestion notification message is then sent to the higher component e.g. vNIC as a threshold reached notification message . In some embodiments the threshold reached notification message is a copy of the congestion notification message . In other embodiments the threshold reached notification message is a summary or an aggregate of congestion notification messages. In some embodiments the threshold reached notifications for a particular chokepoint are sent only to components that subscribe to the message bus to receive congestion notifications about that particular chokepoint. In some embodiments a component subscribes by sending a subscription message for a chokepoint to a congestion notification system message bus. In other embodiments a component is subscribed by its configuration e.g. the subscription or non subscription for each chokepoint is set in a configuration setting of the subscribing component .

This figure also illustrates that in some embodiments that provide congestion notification options not all chokepoints have to be monitored. Furthermore different chokepoints can be monitored to send congestion notifications to different higher components. Here VM migrator is subscribed to receive congestion notifications about chokepoint e.g. from the uplink manager through the message bus . Because the VM migrator is not subscribed to receive notification about any other chokepoints the only threshold reached notification messages that the VM migrator will receive identify congestion at the queue of the uplink manager i.e. chokepoint . The vNIC is subscribed to receive congestion notifications about chokepoint . Because the vNIC is not subscribed to receive notification about any other chokepoint the only threshold reached notification messages that the vNIC will receive identify congestion at a queue of the virtual switch .

In addition to the chokepoints monitored for congestion in this figure the pNIC sends congestion notification messages when its queue represented by chokepoint is above its threshold value. However the congestion notification messages are not sent from the congestion notification system message bus to any higher layer components because no higher layer components are subscribed to monitor congestion of the chokepoint . In some such embodiments the congestion notification system message bus then discards the congestion messages from that chokepoint. In alternate embodiments the component managing the queue of the chokepoint does not send congestion messages to a congestion notification system message bus when no higher layer component is monitoring the congestion at that chokepoint. In some embodiments the congestion notification message includes an indicator of which higher component should receive the congestion notification message.

In some embodiments each queue has multiple independent threshold settings e.g. one for each higher component receiving congestion notifications . In the embodiment of the VM migrator and vNIC subscribe to receive configuration notification messages about separate queues. However in some embodiments each queue can be independently monitored by each higher component. For example the VM migrator could subscribe to be notified when the uplink queue represented by chokepoint is above its threshold while the vNIC could also subscribe to be notified when the uplink queue represented by chokepoint is above its threshold.

As described with respect to when the queue of a particular component reaches the threshold fullness the component sends a congestion notification message to the higher layer component here vNIC and VM migrator through a congestion notification system message bus . The congestion notification message of some embodiments includes more data than the fact that the threshold has been reached. For example the congestion notification message of some embodiments includes the actual percentage of congestion e.g. if the threshold level is 70 but the queue is actually 85 full the congestion notification message will indicate that the congestion level is 85 . The congestion notification message of some embodiments includes the source of the packets e.g. the source IP address and or MAC address of the packet that are congesting the queue. In some embodiments the identified source is the last packet to enter the queue. In other embodiments the identified source is based on a most common source of a sampling of packets e.g. a fraction or all of the packets in the queue. In some embodiments by the congestion notification system identifying the source of the congestion the higher component can selectively reduce the rate of sending packets only of those slow down packets from the source of the congestion without reducing the rates of sending packets from other sources. In some embodiments the congestion notification messages include other data relating to one or more packets in the queue e.g. the destination size a hash of the contents etc. .

Some embodiments provide a separate congestion notification system message bus for each higher component to be notified of congestion. For example some embodiments provide a separate congestion notification system message bus for each of multiple vNICs on a TCP IP stack of a kernel. illustrates a congestion notification system of some embodiments in which multiple vNICs are notified of congestion through multiple congestion notification system message buses. The figure includes the same components and processes as with the addition of a second vNIC chokepoint and congestion notification system message bus . The congestion notification system message bus of this embodiment sends threshold reached notifications to the second vNIC . In both the vNICs and receive notifications of congestion.

In this figure vNIC is subscribed to receive congestion notifications about chokepoints actually to the virtual switch that manages the queue represented by chokepoint and . Accordingly the vNIC receives threshold reached notification messages to identify congestion at the queues of the uplink manager the pNIC and the port of the virtual switch represented by chokepoint . The threshold reached notification messages for vNIC are sent from congestion notification system message bus .

The vNIC is subscribed to receive congestion notifications about chokepoints actually to the process e.g. the virtual switch that manages the queue represented by chokepoint and . Accordingly the vNIC receives threshold reached notification messages to identify congestion at the queues of the uplink manager the pNIC and the port of the virtual switch represented by chokepoint . The threshold reached notification messages for vNIC are sent from congestion notification system message bus .

As described with respect to when the queue of a particular component reaches the threshold fullness the component sends a congestion notification message to the higher layer component here vNICs through a congestion notification system message bus and the vNIC through a congestion notification system message bus . The congestion notification message of some embodiments includes more data than the fact that the threshold has been reached. For example the congestion notification message of some embodiments includes the actual percentage of congestion e.g. if the threshold level is 70 but the queue is actually 85 full the congestion notification message will indicate that the congestion level is 85 . The congestion notification message of some embodiments includes the source of the packets e.g. the source IP address and or MAC address of the packet that are congesting the queue. In some embodiments the identified source is the last packet to enter the queue. In other embodiments the identified source is based on a most common source of a sampling of packets e.g. a fraction or all of the packets in the queue. In some embodiments by the congestion notification system identifying the source of the congestion the higher component can selectively reduce the rate of sending packets only of those slow down packets from the source of the congestion without reducing the rates of sending packets from other sources. In some embodiments the congestion notification messages include other data relating to one or more packets in the queue e.g. the destination size a hash of the contents etc. .

In some embodiments various processes are implemented by components of the computer virtualization networking stack in order to set thresholds at which lower layer components should provide congestion notification messages and in order to properly respond to congestion by notifying higher layer components. In some embodiments a particular component both receives congestion notifications from relatively lower layer components and sends congestion notifications to relatively higher layer components.

In order to receive congestion notifications from a lower network layer the higher layer component subscribes to receive congestion notifications about a lower layer queue managing component. A threshold congestion setting of the chokepoint e.g. a default setting or a setting set in the configuration of the component managing the queue determines what level of congestion i.e. fullness of the queue managed by the queue managing component will result in a congestion notification message being sent to the congestion notification system message bus.

The higher layer component continues to send packets at the set rate until it receives a notification of new or increased congestion e.g. a threshold reached notification message or a congestion notification message from a lower layer component either directly or through a message bus . When the higher layer component receives such a notification the state transitions to state which reduces the packet rate assuming the packet rate is not already sufficiently low as a result of previous congestion notification messages . If the rate is above zero the higher layer component then transitions back to state and continues to send packets at the new reduced rate. In some embodiments the reduced packet rate could be zero in which case the higher layer component transitions to state and stops sending packets until a threshold time has passed since the last congestion notification.

When a threshold time has passed since the last received congestion notification the higher layer component transitions from state or to state . In state the higher layer component increases the packet sending rate and returns to state .

In some embodiments the packet rate is lowered by a particular amount each time a congestion notification is received. In some embodiments the rate of sending packets from the higher layer is lowered to zero when the congestion notification is received and the packets are stored in a queue of the higher layer component see e.g. . In other embodiments the higher layer component rejects requests from even higher layer components to generate data packets e.g. a vNIC or TCP IP stack will slow down generation or not generate packets for a VM migrator while there is congestion in the lower layer components . In some embodiments the packet sending rate is lowered by an amount based on the level of congestion. For example the packet sending rate could be half of a maximum rate when the congestion in a queue is 70 full a quarter of maximum rate when the congestion in the queue is 85 full and zero when the congestion in the queue is 100 full.

After operation the process determines at whether the queue is above the threshold congestion setting for sending congestion notification messages. When the queue is not above the threshold the process proceeds to operation to send out packets. When the queue is above the threshold the process reports the queue congestion level i.e. how full the queue is to the higher layer component through a congestion notification system message bus. The process then sends at packets to the next lower layer at the best possible rate. In some embodiments the best possible rate is the highest rate at which the next lower component will accept packets. In other embodiments the best possible rate is lowered in response to congestion notification messages from even lower layers e.g. in some embodiments a pNIC sends congestion notification messages to an uplink manager either instead of or in addition to the uplink manager sending congestion notification messages to a vNIC . In some embodiments the best possible rate under some circumstances e.g. when there is congestion below or when the next component not accepting packets may be zero in which case the process does not send out packets in operation .

The process then determines at whether the system has been shut down e.g. after receiving a shutdown command . When the system has not been shut down the process returns to operation to receive the next packet. When the system has been shut down the process ends.

Many of the above described features and applications are implemented as software processes that are specified as a set of instructions recorded on a computer readable storage medium also referred to as computer readable medium . When these instructions are executed by one or more processing unit s e.g. one or more processors cores of processors or other processing units they cause the processing unit s to perform the actions indicated in the instructions. Examples of computer readable media include but are not limited to CD ROMs flash drives RAM chips hard drives EPROMs etc. The computer readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.

In this specification the term software is meant to include firmware residing in read only memory or applications stored in magnetic storage which can be read into memory for processing by a processor. Also in some embodiments multiple software inventions can be implemented as sub parts of a larger program while remaining distinct software inventions. In some embodiments multiple software inventions can also be implemented as separate programs. Finally any combination of separate programs that together implement a software invention described here is within the scope of the invention. In some embodiments the software programs when installed to operate on one or more electronic systems define one or more specific machine implementations that execute and perform the operations of the software programs.

The bus collectively represents all system peripheral and chipset buses that communicatively connect the numerous internal devices of the electronic system . For instance the bus communicatively connects the processing unit s with the read only memory the system memory and the permanent storage device .

From these various memory units the processing unit s retrieve instructions to execute and data to process in order to execute the processes of the invention. The processing unit s may be a single processor or a multi core processor in different embodiments.

The read only memory ROM stores static data and instructions that are needed by the processing unit s and other modules of the electronic system. The permanent storage device on the other hand is a read and write memory device. This device is a non volatile memory unit that stores instructions and data even when the electronic system is off. Some embodiments of the invention use a mass storage device such as a magnetic or optical disk and its corresponding disk drive as the permanent storage device .

Other embodiments use a removable storage device such as a floppy disk flash drive etc. as the permanent storage device. Like the permanent storage device the system memory is a read and write memory device. However unlike storage device the system memory is a volatile read and write memory such a random access memory. The system memory stores some of the instructions and data that the processor needs at runtime. In some embodiments the invention s processes are stored in the system memory the permanent storage device and or the read only memory . From these various memory units the processing unit s retrieve instructions to execute and data to process in order to execute the processes of some embodiments.

The bus also connects to the input and output devices and . The input devices enable the user to communicate information and select commands to the electronic system. The input devices include alphanumeric keyboards and pointing devices also called cursor control devices . The output devices display images generated by the electronic system. The output devices include printers and display devices such as cathode ray tubes CRT or liquid crystal displays LCD . Some embodiments include devices such as a touchscreen that function as both input and output devices.

Finally as shown in bus also couples electronic system to a network through a network adapter not shown . In this manner the computer can be a part of a network of computers such as a local area network LAN a wide area network WAN or an Intranet or a network of networks such as the Internet. Any or all components of electronic system may be used in conjunction with the invention.

Some embodiments include electronic components such as microprocessors storage and memory that store computer program instructions in a machine readable or computer readable medium alternatively referred to as computer readable storage media machine readable media or machine readable storage media . Some examples of such computer readable media include RAM ROM read only compact discs CD ROM recordable compact discs CD R rewritable compact discs CD RW read only digital versatile discs e.g. DVD ROM dual layer DVD ROM a variety of recordable rewritable DVDs e.g. DVD RAM DVD RW DVD RW etc. flash memory e.g. SD cards mini SD cards micro SD cards etc. magnetic and or solid state hard drives read only and recordable Blu Ray discs ultra density optical discs any other optical or magnetic media and floppy disks. The computer readable media may store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code such as is produced by a compiler and files including higher level code that are executed by a computer an electronic component or a microprocessor using an interpreter.

While the above discussion primarily refers to microprocessor or multi core processors that execute software some embodiments are performed by one or more integrated circuits such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs . In some embodiments such integrated circuits execute instructions that are stored on the circuit itself

As used in this specification the terms computer host machine server processor and memory all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification the terms display or displaying means displaying on an electronic device. As used in this specification the terms computer readable medium computer readable media and machine readable medium are entirely restricted to tangible physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals wired download signals and any other ephemeral signals.

While the invention has been described with reference to numerous specific details one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. In addition conceptually illustrates a process. The specific operations of the process may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations and different specific operations may be performed in different embodiments. Furthermore the process could be implemented using several sub processes or as part of larger macro processes.

