---

title: Systems and methods for medical diagnostic collaboration
abstract: Certain examples provide systems and methods for medical diagnostic collaboration. An example system includes a conversation manager to facilitate a first conversation between a first device and a second device. The conversation manager manages a plurality of conversations based on respective conversation identifiers assigned to each of the plurality of conversations. The example system also includes a collaboration session manager to facilitate, via the first conversation, a collaboration session between the first and second devices, which allows a user of the first device and a user of the second device to view, share, and comment on a medical study. In addition, the example system includes a context manager to manage context information to describe a state of the medical study as it is displayed on the first device to synchronize a state of the medical study displayed on each of the first and second devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09648060&OS=09648060&RS=09648060
owner: General Electric Company
number: 09648060
owner_city: Schenectady
owner_country: US
publication_date: 20140304
---
This patent claims the benefit of priority to Indian Patent Application No. 5453 CHE 2013 filed on Nov. 27 2013 which is hereby incorporated herein by reference in its entirety.

This disclosure relates generally to medical diagnostic collaboration and more particularly to systems and methods for medical image and information collaboration.

Prior to the rapid onset of digital imaging patient images were printed to film. The film was hung and viewed by radiologists who would then dictate a report. Reports were transcribed by individuals ranging for administrative staff to medical transcriptionists and sent to ordering physicians via mail or fax. Critical results were delivered by phone or pager and business statistics were managed via paper reports and spreadsheets. Diagnostic collaboration was facilitated during face to face meetings or teleconferences.

As information systems for radiology came to market the first commercially available solutions addressed the needs of the radiologist and the radiology department. These included Radiology Information Systems RIS and dictation transcription systems. RIS systems managed the ordering scheduling patient and management reporting processes while radiologists were still reading from film.

As modalities started to support the digital display of images on workstations connected to the acquisition device Picture Archiving and Communications Systems PACS came to market. These centrally store images and provide radiologists with the tools to read studies on networked computer monitors replacing both film and modality workstations.

Over time the needs of the market have evolved from supporting specialized radiologist workflows to supporting the open and dynamic needs of the enterprise and the community. The vendor community has added systems to manage the need for advanced technologies for improving diagnosis sharing images between providers and organizations and supporting collaboration between radiologists physicians and teams providing care for the patient. These systems ultimately improve care by closing the loop on the reporting of critical results while managing the growing storage requirements. Often these are disparate best of breed systems that may or may not interoperate increasing cost and decreasing productivity.

In a healthcare workflow healthcare providers often consult or otherwise interact with each other. Such interaction typically involves paging or telephoning another practitioner. Thus interaction between healthcare practitioners may be time and energy consuming. Therefore there is a need for a system and method to simplify and improve communication and interaction between healthcare practitioners.

Furthermore healthcare practitioners may want or need to review diagnoses and or reports from another healthcare practitioner. For example a referring physician may want to review a radiologist s diagnosis and report with the radiologist and or a technician. As another example an emergency room physician may need to review results of an emergency room study with the radiologist and or a family physician. Thus there is a need for a system and method to facilitate medical diagnostic collaboration to provide safe and effective treatment.

Certain examples provide systems methods and computer readable media for medical diagnostic collaboration.

Certain examples provide a system including a conversation manager to facilitate a first conversation between a first device and a second device. The first conversation includes an exchange of data between the first device and the second device over a network. The first conversation is assigned a first conversation identifier that is maintained throughout the first conversation and the conversation manager manages a plurality of conversations based on respective conversation identifiers assigned to each of the plurality of conversations. The example system also includes a collaboration session manager to facilitate via the first conversation a collaboration session between the first device and the second device. The collaboration session allows a user of the first device and a user of the second device to view share and comment on a medical study. In addition the example system includes a context manager to manage context information to describe a state of the medical study as it is displayed on the first device. The collaboration session comprises sharing context information between the first device and the second device to synchronize a state of the medical study displayed on each of the first device and the second device.

Certain examples provide a tangible computer readable storage medium including computer program code to be executed by a processor to implement a medical collaboration system. The example system includes a conversation manager to facilitate a first conversation between a first device and a second device. The first conversation includes an exchange of data between the first device and the second device over a network. The first conversation is assigned a first conversation identifier that is maintained throughout the first conversation and the conversation manager manages a plurality of conversations based on respective conversation identifiers assigned to each of the plurality of conversations. The example system also includes a collaboration session manager to facilitate via the first conversation a collaboration session between the first device and the second device. The collaboration session allows a user of the first device and a user of the second device to view share and comment on a medical study. In addition the example system includes a context manager to manage context information to describe a state of the medical study as it is displayed on the first device. The collaboration session comprises sharing context information between the first device and the second device to synchronize a state of the medical study displayed on each of the first device and the second device.

Certain examples provide a method including receiving from a first device a request to initiate a collaboration session with a second device the collaboration session including a medical study. The example method includes receiving from the second device an acceptance of the request. The example method includes establishing the collaboration session between the first device and the second device over a messaging pipeline. The example method includes sharing context information between the first device and the second device to synchronize a state of the medical study displayed on each of the first device and the second device.

The foregoing summary as well as the following detailed description of certain examples of the present invention will be better understood when read in conjunction with the attached drawings. For the purpose of illustrating the invention certain examples are shown in the drawings. It should be understood however that the present invention is not limited to the arrangements and instrumentality shown in the attached drawings.

Example methods systems and apparatus disclosed herein facilitate medical diagnostic collaboration between medical practitioners.

Although the following discloses example methods systems and apparatus including among other components software executed on hardware it should be noted that such methods systems and apparatus are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in any combination of hardware software and or firmware. Accordingly while the following describes example methods systems and apparatus the examples provided are not the only way to implement such methods systems and apparatus.

Also although the methods systems and apparatus disclosed herein are described in regards to healthcare applications including but not limited to radiology information systems it is to be understood that the present methods systems and apparatus can also be used to distribute information in any other industry application.

The medical diagnostic collaboration tools disclosed and described herein include 1 messaging and presence 2 screen share and video collaboration 3 Smartlink 4 real time collaboration and 5 interrupt workflow. Messaging and presence functionality is integrated into medical diagnostic tools to facilitate communication between clinicians within and across healthcare enterprises. Screen share and video collaboration enables collaboration between clinicians by transmitting video such as a video capture of a user interface to collaborating clinicians. Smartlink facilitates sharing discrete states of medical studies as modified by a clinician by creating and sharing bookmarks including meta information that describes the current state of a study. Real time collaboration synchronizes in real time or near real time medical studies shared between clinicians by automatically applying event actions and states performed on one device to all collaborating devices. Interrupt workflow facilitates seamless transitions between active studies and studies launched through collaboration tools.

The medical diagnostic collaboration tools disclosed herein virtually connect care teams on complex patient cases and help radiologists become care partners in the diagnosis and treatment of patients. Example use cases for the medical collaboration systems include collaboration between multiple radiologists for consultation to improve the quality of a diagnostic report between radiologists and referring physicians for consultation regarding a diagnostic report or patient history between multidisciplinary teams MDTs such as tumor review boards for complex diagnoses and between pathologists and clinical laboratory physicians and referring physicians among many other cases. The collaboration tools provide numerous benefits to healthcare enterprises such as improved communication within and between healthcare enterprises increased confidence in diagnostic findings and improved access to sub specialty reading among others. Ultimately these advantages result in improved patient care and reduced cost.

In an example the system facilitates medical diagnostic collaboration on a medical study which can include one or more medical images of a patient anatomy lab results and or other medical information. Medical images are acquired by one or more modalities which can be any device capable of capturing an image of a patient anatomy. Example modalities include an x ray system computed tomography CT system magnetic resonance MR system ultrasound system digital radiography DR system positron emission tomography PET system single photon emission computed tomography SPECT system nuclear imaging system and or other modalities.

In an example the first device includes a user interface . The user interface is a platform through which a medical practitioner can retrieve and view medical studies including medical images such as Digital Imaging and Communications in Medicine DICOM images for example. In certain examples the user interface includes various tools to facilitate image manipulation and annotation workflow management and reporting among other things.

The imaging desktop e.g. GE HEALTHCARE CENTRICITY RIS i eRADCockpit is a platform through which a radiologist can manage workflow retrieve medical studies create reports and initiate collaboration events among other things by utilizing a radiologist workflow manager a collaboration workflow manager and an IM Presence application . The radiologist workflow manager controls organization prioritization and selection of a radiologist s work. In certain examples the radiologist workflow manager includes intelligent workflow management features to automatically assign work based on availability expertise and resources among other factors.

The collaboration workflow manager includes tools through which a user of the first device can initiate and carry out collaboration between other devices such as with the second device . For example the collaboration workflow manager can include tools to facilitate instant messaging IM and presence through the IM Presence application as well as viewport sharing screen sharing collaboration workflow and interrupt workflow among others.

The viewer of the first device can display medical images such as DICOM images for example on one or more viewports . The viewer can be launched from the imaging desktop or can be launched independently of the imaging desktop . Additionally the viewer is used to create and update annotations create and process imaging models and communicate within a system and or across computer networks at distributed locations. The viewers of the system can utilize various application programming interfaces APIs . In an example the viewer is a universal viewer UVx e.g. GE HEALTHCARE Universal Viewer for CENTRICITY PACS and PACS IW that utilizes for example C and the Microsoft Foundation Class MFC library.

The second device is an example a device that can be used by a referring physician. The user interface of the second device includes an integrated thin client viewer . The viewer includes a collaboration workflow manager and an IM Presence application to manage collaboration and instant messaging and one or more viewports for displaying medical images. In an example the viewer is a zero footprint ZFP e.g. GE HEALTHCARE Universal Viewer Zero Footprint Client viewer that utilizes for example JavaScript JS with Hyper Text Markup Language 5 HTML5 . Zero footprint medical image viewers allow medical clinicians to display and manipulate medical images on a client device via a client browser without requiring particular configurations of the client device. Zero footprint and zero or silent deployment can be facilitated by server side rendering of images. For example image processing of advanced applications can occur on a server rather than the client.

In certain examples the medical collaboration system facilitates collaboration between devices within a healthcare enterprise i.e. intra enterprise collaboration . An enterprise refers to a healthcare organization such as a hospital that utilizes a common network framework. In other examples the medical collaboration system facilitates collaboration between devices across different healthcare enterprises i.e. inter enterprise or cross enterprise collaboration .

Turning to functional services of a medical diagnostic collaboration system e.g. system or other systems are shown in a radiology context and include collaboration services collaboration infrastructure core services and messaging services . The functional services described in connection with can be utilized by the system of for example or by other systems.

The collaboration services which in certain examples are an implementation of the collaboration services include a conversation manager a collaboration session manager and collaboration APIs . A conversation can span multiple collaboration sessions each of which can leverage different systems within the collaboration infrastructure which in certain examples is an implementation of the collaboration infrastructure .

The collaboration infrastructure is a suite of tools that are leveraged to facilitate various forms of collaboration. In an example the collaboration infrastructure includes XMPP e.g. OPENFIRE XMPP infrastructure to facilitate instant messaging CISCO instant messaging IM and Presence and or CISCO TelePresence Video Communication Server VCS and CISCO Unified Communications Manager CUCM to facilitate audio and or video chat VSEE WEBEX or CITRIX to facilitate screen sharing and or video chat and a WebSocket manager to manage real time collaborations. In other examples alternative third party and or custom tools are utilized.

The conversation manager manages active session threads and corresponding server processes and backing infrastructure for the various systems within the collaboration infrastructure that are utilized by collaboration sessions within a conversation. The collaboration session manager manages the initiation and lifecycle of each of the collaboration sessions within a conversation.

The conversation manager and the collaboration session manager utilize various collaboration APIs to provide an interface for message negotiation and transmission. For example the collaboration APIs utilize a Representational State Transfer REST interface a Simple Object Access Protocol SOAP interface and or a Java Messaging Service JMS interface .

The conversation manager and the collaboration session manager utilize various tools to facilitate conversations and collaboration sessions. Those tools include instant messaging presence roster list Smartlink interrupt workflow document sharing desktop sharing voice video payload transformers context state manager and or a GSPS translator .

Instant messaging and presence allow clinicians to clinicians locate and discover other clinicians with whom they can engage in conversations and collaboration sessions within and across healthcare enterprises. The roster list allows users to conveniently access contact lists to easily initiate collaboration sessions. In certain examples collaboration sessions are initiated through instant messaging sessions. These tools are described in further detail below.

The conversation manager and the collaboration session manager utilize additional collaboration tools within instant messaging sessions or independent of instant messaging sessions. The Smartlink tool enables users to share a snapshot of a study and is described in detail below. The interrupt workflow operates in conjunction with a collaboration tool e.g. the Smartlink tool to manage active studies upon acceptance of a collaboration request e.g. a Smartlink request and is also described in further detail below.

The document sharing tool the desktop sharing tool and the voice video tool operate within an instant messaging session or independent of an instant messaging session. These tools provide alternate collaboration mediums between users. The document sharing tool allows users to share documents such as medical diagnostic reports or medical charts for example. The desktop sharing tool allows an initiating user to share his her computer desktop with a receiving user such that any content viewable on the computer desktop of the initiating user is also viewable on the computer desktop of the receiving user. In certain examples the desktop sharing tool allows an initiating user to pass control of his desktop to a receiving user. The voice video tool allows users to share audio and or video therebetween thereby facilitating teleconferencing or video conferencing capabilities.

The payload transformers manage serializing information into a payload type e.g. eXtensible Markup Language XML or JavaScript Object Notation JSON for transmission to the collaboration server e.g. the collaboration server and de serializing information received from the collaboration server e.g. the collaboration server . These elements are described in further detail below.

The context state manager describes the current state of a viewer in several ways including for example viewport context information e.g. study series and image information hanging protocol and presentation state such as Grayscale Softcopy Presentation State GSPS information among other things.

Viewport context information includes general information about a particular state of a viewer. A study identifier is a number or indicator of a particular study which can include an image or series of images acquired by a modality. Study information further includes patient information and a workflow associated with the study. Series information describes a particular series of medical images within a study. Image information describes the particular image or images within a series that are presently displayed.

Hanging protocol is a set of display rules for presenting formatting and otherwise organizing images on a viewer e.g. the viewers . A display rule is a convention for presenting one or more images in a particular temporal and or spatial layout or sequence. For example a hanging protocol can include a set of computer readable instructions or display rules for example that direct a computer to display a plurality of images in certain locations on a viewer and or display the plurality of images in a certain sequence or order. In another example a hanging protocol can include a set of computer readable instructions that direct a computer to place a plurality of images in multiple screens and or viewports on a viewer. In general a hanging protocol can be employed to present a plurality of images for a diagnostic examination of a patient anatomy featured in the images.

A presentation state such as a GSPS is an independent DICOM service object pair SOP Instance that includes information regarding how a particular image is to be displayed. For example a presentation state can include label information e.g. label type position etc. windowing value zoom value scrolling e.g. panning value rotation and or other visual display element defined within the DICOM standard. A presentation state can be applied to an image so that the image is displayed with the visual specifications defined by the presentation state. Using a presentation state an image can be displayed in a certain way but is not modified thereby allowing a program or other user to revert back to the original image if desired. The GSPS translator receives data describing GSPS and translates that data for presentation on a viewer e.g. the viewers .

Core services are tools that facilitate the underlying functionality of the devices such as the workspaces and viewers and the underlying collaboration services and provider infrastructure. Core services include services for user management authentication data access service identity logging and federation .

User management authentication data access service and identity tools manage individual user e.g. radiologist and or clinician identities their authentication authorization roles and privileges within or across system and enterprise boundaries. These tools enhance system security with respect to access controls and authorization privileges to ensure patient safety and confidentiality. In certain examples users e.g. radiologists and clinicians can have established identities across various service providers that comprise a collaboration infrastructure. For example each of the users can have an enterprise identity which is typically used to login to users individual workspaces or imaging desktops along with a collaboration specific identity stored in a database e.g. a default XMPP provider such as OPENFIRE database . In addition each of the users can have a different identity in a third party communication database e.g. CISCO Unified Communication Manager DB . In such cases the core services manage users principal identity information and provide user authentication and authorization to other service providers within a federation. In an example this is accomplished by a combination of WS Trust security tokens and a Security Assertion Markup Language SAML based single sign on SSO mechanism for communicating user authentication entitlement and attribute information.

User management includes a software development kit SDK to add users and a user provisioning tool to manage information about users. Authentication ensures that only authorized users can access the system and the respective collaboration services. In an example each clinician has an associated username and password. In an example usernames and passwords are established and stored in an enterprise Lightweight Directory Access Protocol LDAP or database based on an identity store. Upon launching the user interface e.g. the user interfaces clinicians are prompted to login by inputting their username and password which is compared to a database to determine if the clinician is certified to access the user interface and the respective collaboration services contained therein. In an example upon authentication against the principal identity store a SAML based access token is created and returned which is then used to grant single sign on access for the principal to the various collaboration services and underlying infrastructure. In addition a declarative access control eXtensible Access Control Markup Language based XACML based policy implementation can be used to evaluate and authorize access requests. Furthermore data access service is a handle to the contextually abstracted data model for the respective collaboration services. Identity manages patient identity and ensures that studies and diagnostic reports are associated with the proper patient.

Logging maintains an audit record including a list of collaboration sessions collaboration participants and specific actions performed on a device for later retrieval. Federation enables remote users e.g. cross enterprise e.g. single sign on users to use the system.

Messaging APIs include AMQP and Camel DDS . AMQP stands for the Advanced Message Queuing Protocol. AMQP is an open standard application layer protocol for message oriented middleware. The defining features of AMQP are message orientation queuing routing including point to point and publish and subscribe reliability and security. Furthermore AMQP enables interoperability between different systems such as cross enterprise interoperability.

APACHE Camel is an open source integration framework and consists at the core a powerful routing mediation engine. Camel enables the use of Enterprise Integration Patterns EIPs to implement integration solutions utilizing mediation and routing rules with Java or XML based Domain Specific Language DSL constructs. Camel provides an extensible model to create components that function as protocol level connectors and provide a uniform endpoint interface for use with the DSL constructs. Camel DDS refers to the DDS component of Camel that acts as a connector to the Object Management Group s Data Distribution Service OMG DDS protocol standard implementation. Camel DDS allows an integration solution to be built atop the core Camel engine to leverage DDS s performance scalability Quality of Service QoS and discovery features which are discussed in further detail below. DDS is a middleware standard to facilitate data exchanges between publishers and subscribers. Camel DDS takes advantage of Camel s ability to mediate across different middleware technologies as well as its transformation engine.

Messaging services include adapters endpoint discovery and DDS . Message adapters allow sending and receiving of discrete units of information typically identified by a unique name. Endpoint discovery facilitates dynamic automatic discovery of messaging publishers and subscribers.

Adapters and endpoint discovery work with DDS . DDS is a data communications standard that describes low latency data communications for distributed applications. The DDS standard includes support for type safe application defined data types dynamic discovery of publishers subscribers and topics rich quality of service policy configuration and on the wire interoperability. DDS implementations provide high performance data communications which are suitable for real time and near real time systems. Several commercial and open source implementations of the DDS standard are available for use. The DDS standard contains an easy to use well defined API which allows developers to write portable code that will work with any compliant DDS implementation. The DDS standard references the Real Time Publish Subscribe RTPS wire protocol standard which defines the wire protocol for DDS communications. In general DDS is a peer to peer communication model requiring no gateways servers or daemons that must be run or configured.

Messaging and presence functionality allows clinicians to engage in conversations within and across healthcare enterprises. Messaging and presence includes the instant messaging tool the presence tool and the roster list tool .

The instant messaging tool is a type of online chat tool that offers text transmission over a network such as over a local area network LAN or over the Internet. Short messages are typically transmitted bi directionally between two or more parties when each user chooses to complete a thought and select send. Additionally or alternatively the instant messaging tool uses push technology to provide real time text which transmits messages character by character as they are composed. The instant messaging tool can also facilitate file transfer clickable hyperlinks Voice over Internet Protocol VoIP and or video chat.

In an example the instant messaging tool facilitates instant messaging via a collaboration server e.g. the collaboration server leveraging a communications protocol such as Extensible Messaging and Presence Protocol XMPP . XMPP is a communications protocol for Message oriented Middleware MOM based on XML. In other examples alternate or custom communications protocols are utilized.

In operation for example the instant messaging tool facilitates message transfer via an application on the first device or the second device such as the IM Presence application . In an example the first device and the second device operate on servers in different domains. The collaboration server facilitates collaboration between cross domain servers such as between the first device and the second device by federating messaging e.g. XMPP traffic therebetween.

The instant messaging tool works in conjunction with the presence tool and the roster list tool . The presence tool manages the presence of users in the system e.g. the systems or other systems . Presence is a status indicator that conveys ability and willingness of a potential communication partner e.g. a user of the first or second devices to communicate. The presence tool provides presence information e.g. presence state via a network connection to the collaboration server e.g. the collaboration server which is stored in a personal availability record and is made available for distribution to other users to convey availability for communication.

The presence tool indicates user presence by displaying an indicator icon next to the user on the instant messaging tool typically from a choice of graphic symbols with easy to convey meanings e.g. green yellow or red circles and or a list of corresponding text descriptions of each of the states. Common states of the user s availability are available busy inactive away do not disturb in a call etc.

In certain examples users can have established identities across various messaging e.g. XMPP service providers e.g. CISCO IM Presence MICROSOFT LYNC GOOGLE TALK etc. . In these examples implementation of messaging protocols e.g. XMPP by the presence tool facilitates presence by broadcasting a user presence of users in an enterprise and or broadcasting a federated user presence of users in a cross domain e.g. multi site enterprise.

The roster list tool manages one or more contact lists of each user in a system e.g. the system . In an example the roster list tool allows users to search by various fields such as name location hospital specialty presence and fees among other fields. In certain examples the roster list tool facilitates a federated cross domain search of all users in an enterprise. For example a collaborating radiologist can execute a search to provide a consolidated list of all users e.g. fellow radiologists and or specialists referring physicians subject matter experts etc. in an enterprise which can have multiple sites. In addition contact lists can be pre populated according to organizations and or specialty areas or can be customizable for each user such that a user can add or remove contacts including cross domain users.

In certain examples the roster list tool can intelligently pre populate contact lists depending on particular studies that are loaded. For example an active study might involve consultation with a sub specialist with experience in a particular specialty area. The roster list tool could for example populate the contact list with all sub specialists that have experience in the particular specialty area involved in the study. In certain examples the roster list tool prioritizes the order of contacts based on availability preferred contact status or other characteristics. These features are particularly useful for teleradiology e.g. remote radiology services among other things. For example the roster list tool can pre populate contact lists with preferred teleradiologists and can prioritize their order based on availability cost etc. Furthermore the roster list tool supports searching contacts by various fields such as location healthcare organization credentials certifications education resources cost availability among other fields.

In certain examples the roster list tool also facilitates the discovery of clinicians e.g. radiologists based on the above mentioned fields e.g. location healthcare organization credentials certifications education resources cost availability among other fields . In effect the roster list tool provides a virtual marketplace for collaborating clinicians e.g. radiologists . The roster list tool can further support ratings and comments for its users e.g. radiologists so that users can develop their reputation and goodwill within the system which also provides an indication of the quality of work that certain users tend to provide. In certain examples a healthcare organization can pre approve certain users with whom a clinician e.g. a radiologist can collaborate.

At the instant messaging tool receives a conversation request from a first user to initiate a conversation with a second user.

At the instant messaging tool establishes a messaging pipeline e.g. an XMPP pipeline between the first and second users.

At the instant messaging tool assigns a conversation identifier to the conversation between the first and second users. The conversation identifier is maintained throughout the conversation.

At the instant messaging tool transmits over the messaging pipeline e.g. XMPP Pipeline messages sent by the first or second users. The instant messaging tool the presence tool and the roster list tool leverage the collaboration infrastructure via a collaboration server e.g. the collaboration server to facilitate seamless communications.

Screen share and video collaboration provide alternate mediums to facilitate medical collaboration between users. In certain examples WebRTC Web Real Time Communication CISCO WEBEX collaboration infrastructure CITRIX ICA Web Client VSEE or other peer to peer tools can be used to facilitate medical collaboration.

In certain examples WebRTC is used to capture and transfer remote desktop screen streaming data in real time or near real time. WebRTC is an open framework for the web to enable browser to browser applications for voice calling video chat and peer to peer P2P file sharing without plugins. WebRTC was built atop pioneering work done by GOOGLE in GMAIL Video Chat. The initial work by Google has been followed by ongoing work to standardize the relevant protocols in the Internet Engineering Task Force IETF and browser APIs in the World Wide Web Consortium W3C .

To acquire and communicate streaming media such as from multiple user desktops WebRTC implements 1 MediaStream to provide access to data streams such as a user s desktop screen captured as a video input stream 2 RTCPeerConnection to facilitate video calling between multiple client peers with facilities for encryption and bandwidth management and 3 RTCDataChannel to facilitate peer to peer communication of streaming data between browsers e.g. peers .

In operation the first WebRTC client of the first device captures a media stream such as a desktop screen captured as a video InputStream for example. In an example the first and second WebRTC clients are implemented as JavaScript libraries utilizing a WebRTC browser implementation and integrated within the first and second collaboration module which in other examples are implemented as the collaboration workflow managers of of the first and second devices respectively. In an example the first and second WebRTC clients include plugins to be installed on the collaborating devices e.g. the first and second devices .

In an example a collaboration session is initiated between the first device and the second device by establishing a conversation through the IM Presence application of the first device . Desktop screen sharing is initiated by clicking a Share Screen button within a chat window . A signaling channel is established between the first device and the second device via the collaboration server and the desktop screen of the first device is shared with the second device .

Signaling over the signaling channel via the collaboration server is used to coordinate communication and send control messages and also to exchange network information such as IP addresses and ports between the collaborating WebRTC peer clients e.g. the first device and the second device to transfer public keys certificates and or to initiate or close sessions among other things. In addition the signaling channel enables the exchange of peer information about media and client capability such as resolution and codecs. Furthermore signaling communicates the streaming of desktop screen capture data by maintaining a steady peer to peer media stream connection which allows the traversal of Network Address Translation NAT and firewalls .

At the first collaboration module of the first imaging desktop of the first device captures a local MediaStream e.g. desktop screen as a video InputStream.

At the first collaboration module of the first device instantiates an implementation of the first WebRTC client .

At the first WebRTC client uses messaging services e.g. XMPP services such as presence roster and messaging via the collaboration server to discover other users and initiate conversations. User authentication user lookup and logging are performed through these and other services.

At a messaging session e.g. a conversation is established between the first device and the second device and the second device instantiates an implementation of the second WebRTC client .

At the collaboration server a signaling channel is established between the first device and the second device via the collaboration server to facilitate signaling process therebetween.

At the collaborating clients e.g. the first device and the second device utilize a messaging protocol e.g. XMPP via the signaling channel established via the collaboration server to exchange 1 peer network IP addresses and ports 2 peer session keys and public certificates and 3 peer media capability such as resolution and codecs. Using the XMPP infrastructure on the collaboration server enables multiple collaborating peers to establish a channel for exchanging network information codecs media format information and client public keys certificates among other things. In an example a WebSocket manager on the collaboration server could be used instead.

At the collaborating clients e.g. the first device and the second device initiate a peer to peer media transfer session over the signaling channel established via the collaboration server . Thus the first device can share its desktop screen with the second device .

At the collaborating clients e.g. the first device and the second device communicate the streaming desktop screen capture data by maintaining a steady peer to peer media stream connection thereby traversing NAT and firewalls .

In an example an Interactive Connectivity Establishment ICE framework utilizes Session Traversal Utilities for NAT STUN and Traversal Using Relay NAT TURN protocols to enable RTCPeerConnection with NAT traversal. ICE is a framework for connecting peers such as two desktop share collaboration clients e.g. the first device and the second device . WebRTC client implementation enables each client to send media directly to the clients taking part in the screen sharing collaborative call. This mechanism has the distinct advantage that media is not sent through a central server e.g. the collaboration server thereby avoiding latency and performance bottlenecks. In the event that client nodes cannot send User Diagram Protocol UDP packets to each other the UDP packets are sent using an automatic fallback mechanism and media flow is routed through a relay server . WebRTC shields web developers from myriad complexities that lurk beneath peer to peer media transfers. The codecs and protocols used by WebRTC perform a significant amount of work to make real time communication possible even over unreliable networks by using features such as packet loss concealment echo cancellation bandwidth adaptivity dynamic jitter buffering automatic gain control noise reduction and suppression and or image cleaning among others.

In certain examples all network input output I O traffic originating from a peer WebRTC client is encrypted. The encryption layer encrypts all traffic using standards such as the Advanced Encryption Standard AES for example. A session key is generated for each client to client connection. It is assumed that the signaling process between the various participating peers happens over an encrypted WebSocket XMPP pipeline which performs the exchange of public keys between each client. The client generated sessions keys are between client nodes using RSA public private key encryption.

Certain examples facilitate desktop application sharing to allow collaborating users to share one or more application windows or the entire computer desktop. In an example desktop application sharing is facilitated using the VSEE infrastructure. VSEE is a proprietary low bandwidth group video chat and screen sharing software tool. The VSEE client is available as WINDOWS and IDS applications which must be downloaded and installed on each collaboration device. The VSEE client exposes all user facing features such as audio video desktop sharing file transfer presence IM chat and camera control among others. In an example VSEE implementation a WINDOWS directory server handles user authentication encryption key exchange user lookup capability control call setup and logging among other features. In an example an alternate relay server is available as a Multipoint Control Unit MCU box part of the VSEE infrastructure which can be utilized by WINDOWS to handle firewall traversals through UDP and HTTP S if peer to peer links between client nodes are not possible. A networking and encryption layer is common across the directory server relay server and client and handles transmission of messages which can be bit AES encrypted for example between end points. VSEE provides one click application and desktop sharing remote control and live graphical and text annotation. It provides a lossy mode for normal usage along with a lossless mode for special applications demanding highest image quality e.g. via an imaging desktop such as GE HEALTHCARE Universal Viewer for CENTRICITY PACS and PACS IW .

A Smartlink facilitates sharing a snapshot of a current state of a viewport of a first user with a second user. This is accomplished by creating a bookmark describing the current state of a viewport of the first user in connection with a procedure or study identifier and sending the bookmark to the second user as a Smartlink request. Acceptance of the Smartlink request by the second user launches a viewer and injects the bookmark to load the shared study. If the second user has a study open when he receives a Smartlink request an interrupt workflow tool automatically saves the active study into a work queue before injecting the bookmark to load the shared study.

To describe the current state of a viewer a bookmark can include for example a procedure identifier e.g. a RIS i procedure identifier a study identifier viewport context information e.g. study series and image information hanging protocol and Grayscale Softcopy Presentation State GSPS information among other things.

The collaboration system includes a collaboration server that manages a suite of collaboration services which leverage a collaboration infrastructure to facilitate medical diagnostic collaboration between multiple devices such as between a first device and a second device .

The first device includes a user interface including an imaging desktop and a viewer . The imaging desktop is utilized by a radiologist to organize prioritize and select work. The imaging desktop includes task specific modules such as reporting including patient exam history order information clinical information embedded reporting with voice recording etc. multi disciplinary care team MDT collaboration vetting and protocolling. In addition the imaging desktop includes a collaboration module which manages an IM Presence manager among other things.

In an example the first device requests a study from an imaging services manager which retrieves the study from a database and passes the study to the first device . In an example the database is an enterprise archive EA . In another example the database includes a RIS a PACS or an integrated RIS PACS system. Study information such as patient data and exam data is loaded into the imaging desktop and images associated with the study are loaded into the viewer .

Similarly in an example the second device has a user interface including an imaging desktop and a viewer . In another example the second device has a user interface including an integrated viewer such as a ZFP viewer.

In an example a conversation can be initiated by the first device via its IM Presence application . The IM Presence application includes a roster list which includes presence for each of the contacts within the roster list. The user of the first device initiates a conversation with the user of the second device by double clicking the name of the user of the second device within the roster list for example. Upon initiating the conversation a chat window opens on the first device and a corresponding chat window opens on the second device . A messaging pipeline such as an XMPP pipeline is established between the first and second devices and a conversation identifier is assigned to the conversation. The users of the first and second devices can engage in conversation over the messaging pipeline by typing in their respective chat windows . Messages are exchanged for example by passing XML based content over the established messaging pipeline e.g. XMPP pipeline . Cryptographic protocols such as Secure Sockets Layer SSL can be used to encrypt data communicated between the first and second devices .

In certain examples communication between the first device and the second device is facilitated through an integration broker which can utilize Message Oriented Middleware MOM for example. MOM allows application modules to be distributed over heterogeneous e.g. cross enterprise platforms. The integration broker supports sending and receiving messages between distributed systems. In certain examples the integration broker is integrated into the collaboration server . In other examples communication is facilitated using a bus based component.

At the collaboration server receives a request from the first device to share a Smartlink with the second device .

At the first viewer silently creates a bookmark encompassing a current state of the first viewer e.g. including viewport context GSPS state and or viewport hanging protocol . In an example the first viewer includes a native function for bookmark creation.

At in parallel with the collaboration server sends a Smartlink request to the second device . An indicator is displayed on the second device that it has received a Smartlink which it can either accept or reject.

At the collaboration server receives a procedure or study identifier of the study and the bookmark from the first device .

At the collaboration server receives an indication from the second device that it accepted the Smartlink.

At the bookmark and the procedure or study identifier are sent to the second device . The imaging desktop of the second device launches the viewer and injects the bookmark thereby loading the study on the viewer .

The bookmark can be sent from the first device to the second device in various ways. In an example the viewer sends the bookmark back to the imaging desktop of the first device . The imaging desktop sends the bookmark and the study and or procedure identifier to the second device over the established messaging pipeline. In an example the bookmark is sent as raw data over a messaging protocol e.g. XMPP .

In an example the viewer assigns the bookmark a bookmark identifier and saves the bookmark to the imaging services manager or to an external database . The viewer passes the bookmark identifier to the imaging desktop of the first device which relays the bookmark identifier to the second device over the established messaging pipeline. The second device can retrieve the bookmark identifier and the associated study from the imaging services manager or external database and load the study on its viewer .

As mentioned above a MOM broker interface is utilized in certain examples to exchange XML based content. In operation for example upon clicking the Smartlink icon a message is sent from the imaging desktop to the viewer via the MOM broker interface working in a publish subscribe manner to pass an XML payload comprising a set of parameters and a remote command. More specifically the imaging desktop publishes an XML based command message for viewer bookmark creation to a MOM interface integration Topic. The MOM integration broker brokers the message onto the Subscriber for that Topic and the Handler which in this example would invoke a native viewer function for bookmark creation.

In an example a bus based component is used instead of the MOM broker interface . In both examples the viewer receives a command to create a bookmark e.g. createBookmark via invocation of a native viewer function to create a bookmark which returns with a created bookmark and bookmark identifier. The created bookmark can be saved in the imaging services manager .

In an example the created bookmark is sent back to the chat client using a similar Publish Subscribe mechanism over the MOM broker interface . In other words the createBookmark native viewer function is not synchronous. An asynchronous thread picks up the request for bookmark creation creates the bookmark and sends the created bookmark and bookmark identifier back to the chat client using a similar Publish Subscribe mechanism over the MOM broker interface .

Once the current bookmark is silently obtained the chat client sends the procedure or study identifier of the currently loaded study along with the newly created bookmark to the second device across the established messaging pipeline. In certain examples the bookmark is sent as an XML stream or as a raw data attachment over the messaging pipeline e.g. the XMPP pipeline . In another example a bookmark identifier could be sent instead of the bookmark. The communication session e.g. XMPP communication session is SSL enabled at the transport layer so all communication is encrypted.

The chat client of the second device receives the procedure or study identifier and launches its viewer with the identified procedure or study. The viewer is launched for example by invoking an integration engine or IVAPI pipeline to start a new viewer session. The chat client also receives the created bookmark and sends across the MOM broker interface a new command message to invoke a native viewer function to inject the provided bookmark payload into the viewer . In the example in which a bookmark identifier is sent the chat client sends across the MOM broker interface a command message to invoke a native viewer function to obtain the bookmark for the provided bookmark identifier from the database in which it is stored e.g. the imaging services manager or the external database prior to injecting the bookmark payload into the viewer .

Certain examples such as the systems of for example support Smartlink integration for cross enterprise collaboration. illustrates Smartlink integration for cross enterprise collaboration by passing a remote study identifier which is illustrated in the flow diagram of . illustrates Smartlink integration for cross enterprise collaboration by passing a remote bookmark identifier which is illustrated in the flow diagram of .

Turning to a medical diagnostic collaboration system that supports cross enterprise collaboration is illustrated. The system includes a first enterprise and a second enterprise . Each of the first and second enterprises include a plurality of users such as radiologists referring physicians and sub specialists among others. In certain examples the first and second enterprises are located in different logical and physical domains separated by a cross enterprise network .

In certain examples the first enterprise includes a first ISM a first database a first image streaming engine a first image repository e.g. enterprise archive and a first collaboration server . Similarly the second enterprise includes a second ISM a second database a second image streaming engine a second image repository e.g. enterprise archive and a second collaboration server .

In an example each of the first and second collaboration servers runs a local copy of an application server such as OPENFIRE for example. The server name and service name e.g. the OPENFIRE XMPP domain of the collaboration servers are DNS resolvable to a static Internet Protocol IP address.

Application servers e.g. OPENFIRE servers facilitate connections between servers e.g. server to server or s2s connections to allow users of different servers which can reside on different physical domains to communicate or federate traffic e.g. XMPP traffic therebetween. In certain examples s2s communications on a pre configured port e.g. 5269 are enabled between each server e.g. the first and second collaboration servers before messages are communicated between the servers.

In certain examples a connection is established between the first and second collaboration servers on request by the users of the respective servers. The configurations of the respective first and second collaboration servers are limited to security related settings and technical parameters. The s2s connection is started as soon as a contact is added to a client rooster that does not belong to the server to which a user is connected. For example the system includes a first device within the first enterprise and a second device within the second enterprise . The first device includes an IM Presence application which includes a roster list. The roster list includes one or more contacts of the user of the first device . Each of the contacts is managed by server in an enterprise such as the first collaboration server . In an example the user of the first device can add a contact to his her roster list that does not belong to the system of the first collaboration server . For example the added contact can be managed by the second collaboration server . Once the contact is added a connection is established between the first and second collaboration servers .

Once server to server communication is enabled traffic e.g. XMPP traffic is federated therebetween. This allows a user to look up and add a remote user from a remote server e.g. OPENFIRE domain instance. This also allows a user to send and receive presence updates from remote users and the ability to send and receive chat messages from remote users. The s2s communications link e.g. the OPENFIRE communications link enabled by the above mentioned configuration federates traffic e.g. XMPP traffic between multiple distributed servers e.g. OPENFIRE servers .

At the user of the first device initiates a request to share a Smartlink with the user of the second device . This is accomplished for example by clicking a Smartlink icon within a chat window of the first device .

At a bookmark is created upon initiating a Smartlink. The first IM Presence application of the first imaging desktop sends a message to the first viewer to silently create a bookmark. In certain examples this and other messages are sent via an integration broker e.g. the first integration broker . The first viewer returns to the first IM Presence application the created bookmark and a bookmark identifier.

At the chat client within the first IM Presence application of the first device e.g. the local collaborating user passes the enterprise site identifier e.g. of the first enterprise the study identifier and the locally created bookmark over the federated messaging pipeline e.g. XMPP pipeline to the second device .

At the second device receives the enterprise identifier the study identifier and the bookmark from the first device . In an example the enterprise identifier the study identifier and the bookmark are received via an XML stream within the messaging e.g. XMPP pipeline for example or as a raw data attachment.

At the second viewer calls the second ISM . The second ISM which is aware of the context and site of the received identifiers and bookmark is capable of recognizing that the study belongs to a cross enterprise site e.g. the first enterprise . Upon recognition the second ISM makes a remote database lookup via a published Web Services Description Language WDSL interface to the database of the first enterprise to retrieve the study file meta data.

At the second viewer calls the Image Streaming Engine of the first enterprise to stream the subject study series image pixel information from the first database into its respective viewports.

At the chat client of the second device sends e.g. across the second MOM broker interface of the second enterprise a command message to the second viewer to invoke a native viewer function to inject the provided bookmark payload.

At the Smartlink is successfully shared between the first device and the second device . Thus the study as displayed on the first viewer of the first device is replicated in the same state on the second viewer of the second device .

At a user of the first device logs into the first enterprise and loads a study. At the user of the first device initiates a request to share a Smartlink with the user of the second device .

At a bookmark is created upon initiating a Smartlink. The first IM Presence application of the first imaging desktop sends a message to the first viewer to silently create a bookmark. In certain examples this and other messages are sent via an integration broker e.g. the first integration broker .

At the first viewer saves the created bookmark into the first imaging services manager and returns the bookmark identifier to the first IM Presence application .

At the chat client within the first IM Presence application of the first device passes the enterprise site identifier e.g. of the first enterprise and the bookmark identifier over the federated messaging pipeline e.g. XMPP pipeline to the second device .

At the second device receives the enterprise identifier and the bookmark identifier from the first device .

At the second viewer calls the second ISM . The second ISM which is aware of the context and site of the received identifiers and bookmark is capable of recognizing that the study belongs to a cross enterprise site e.g. the first enterprise . Upon recognition the second ISM makes a remote database lookup via a published Web Services Description Language WDSL interface to the database of the first enterprise to retrieve the bookmark by providing the bookmark identifier.

At the second viewer calls the Image Streaming Engine of the first enterprise to stream the subject study series image pixel information from the first database into its respective viewports.

At the chat client of the second device sends e.g. across the second MOM broker interface of the second enterprise a command message to the second viewer to invoke a native viewer function to inject the provided bookmark payload.

At the Smartlink is successfully shared between the first device and the second device . Thus the study as displayed on the first viewer of the first device is replicated in the same state on the second viewer of the second device .

The collaboration system includes a collaboration server that manages a suite of collaboration services which leverage a collaboration infrastructure to facilitate medical diagnostic collaboration between multiple devices such as between a first device a second device and a third device . The first device has a first imaging desktop and a first viewer the second device has a second imaging desktop and a second viewer and the third device has a third imaging desktop and a third viewer . The first viewer has one or more viewports . Likewise each of the second and third viewers have one or more viewports.

In certain examples the medical diagnostic collaboration system facilitates real time collaboration such that N devices can interactively share a viewer session across the viewports of each of the devices by providing a real time communication bus between the N devices thereby facilitating synchronization of their sessions. The real time communication bus harnesses and controls protocol for session screen synchronization of viewers. This is a feature of the collaboration server or of any of the collaboration servers or among others logically abstracted through messaging APIs and services. The real time communication bus supports unidirectional and or bidirectional and full duplex connectivity with API support for various rendering platforms e.g. in certain examples UVx utilizes C MFC and ZFP utilizes JS HTML5 . Real time collaboration can be carried out in a number of ways as discussed below.

In an example real time collaboration can be launched from an instant messaging session between two devices e.g. between the first device and the second device and is assigned a conversation identifier. The real time collaboration session is initiated by sending study context e.g. patient study and image context in connection with the conversation identifier. The conversation identifier is maintained throughout various collaboration sessions between the collaborating devices in order to maintain a consistent conversation state for all mediums of collaboration e.g. instant messaging screen sharing voice video sharing etc. .

A conversation could span multiple sessions including for example chat and instant messaging via e.g. an OPENFIRE XMPP server audio video chat via e.g. CISCO WEBEX screen sharing via e.g. VSEE and or real time messaging via e.g. WebSockets . A conversation manager of the collaboration server manages active session threads on all of the different logical protocol stacks server processes and backing infrastructure for a set of collaborating entities e.g. the first second and third devices . The collaboration session manager is configured to manage the lifecycle for each collaboration session that is created. A conversation can span multiple sessions and the collaboration session manager is configured to manage the initiation and the lifecycle of each session.

Existing Viewers e.g. UVx and ZFP and study image pipelines e.g. EA Dakota connectors are used to retrieve and render the images for all participants. 3D imaging applications e.g. GE HEALTHCARE Advantage Workstation and IDI Mammo Workstation available as a plug in on the smart hanging protocol of the viewer can also be shared.

Viewer capabilities and tools including the collaboration functional services described in connection with mimic the study displayed on the viewers of a single device e.g. unidirectional collaboration or on the viewers of all collaborating devices e.g. bidirectional collaboration . In other words graphic objects annotations spatial transforms window mouse level commands ultrasound cine loops etc. performed on a presenter device for unidirectional collaboration or on any collaborating device for bidirectional collaboration are effected on the viewers of all other collaborating devices. This is referred to as viewport intelligence. Viewport intelligence indicates that the collaboration session is situationally aware of user actions such as scrolling to a particular series or image on a particular viewport of the study and broadcasts the event meta information event actions and states to all recipients to get all shared viewports of the viewers in the collaboration session synchronized and in band. 

The viewer capabilities and tools of each of the devices utilize a vocabulary stanza to translate manipulation e.g. event actions and states on a viewport of a collaborating device into commands that are streamed to other collaborating devices. For example a GSPS translator of the first device captures graffiti information of the first viewer into a structured control protocol using an XML or JSON payload type which is then serialized and streamed to the other collaborating devices via the collaboration server . Viewer capabilities and tools e.g. GSPS translators of the other collaborating devices de serialize the payload and convert the same into a presentation overlay on their respective viewports. Payload transformation services at the collaboration server manage interim translations from XML to JSON or vice versa.

An interim translation from XML to JSON is conducted because the collaboration interface model of the ZFP viewer can only bind to a JSON data source. The collaboration interface model of the ZFP viewer is a ViewModel e.g. in the Model View ViewModel MVVN pattern that is implemented in ZFP using the Knockout JavaScript framework that is essentially a model of the view meaning it is an abstraction of the view that also serves in mediating between the view and the model that is the target of the view data bindings. In other words it is a specialized converter that binds model information into view information and passes commands from the view into the model and vice versa. Updating the collaboration ViewModel using the above mentioned JSON translation would result in the ZFP viewer essentially updating its current state view.

In an example Grayscale Softcopy Presentation State GSPS per Part 6 DICOM encoding is used to capture consistently and render presentation state on each respective collaborating viewer. GSPS Translator services parse and create DICOM GSPS from serialized viewport Consistent Presentation of Images CPI states. CPI maintains the consistency of presentation for grayscale images and their presentation state information including e.g. user annotations shutters flip rotate display area and zoom . In an example the viewport CPI state would be captured upon each event action and serialized into XML. This serialized state can then be streamed to the GSPS translator service running on the collaboration server . The GSPS translator service translates the CPI to DICOM GSPS and sends it onward to the intended collaboration recipient. Such a service is useful if the collaboration technology is used to send source viewport state serialized into a CPI to a third party e.g. SIEMENS or PHILIPS viewer target. Many third party e.g. SIEMENS or PHILIPS viewers support DICOM GSPS. Consistently capturing the source viewer state in a DICOM GSPS standards based manner allows any third party viewer to interpret the source viewer state and inject the source viewer state information e.g. represented as GSPS therein as a graphics overlay for example.

In certain examples the collaboration server maintains the state of a collaboration session by caching data streamed between all collaborating devices within a closed loop collaboration session. For example a first set of devices and corresponding viewers can be involved in a first collaboration session on a study while second set of devices and corresponding viewers are involved in a second collaboration session. The collaboration server maintains the state of each of the first and second collaboration sessions separately in connection with the conversation identifiers of the respective collaboration studies. New devices joining either of the first or second collaboration sessions will be streamed the cached state of the collaboration session that they join to synchronize the new devices to the current state of the collaboration session. Moreover in an example system with unidirectional collaboration collaborating devices can easily change presenter status by clicking a make presenter button in an example. Furthermore in an example system with bidirectional or multidirectional collaboration a user of a device e.g. the initiating user can easily control presenter status of one or more devices such that event actions or states performed on any of the presenter devices will be effected on the viewports of all of the other collaborating devices.

In certain examples the system utilizes Staged Event Driven Architecture SEDA to provide infrastructure to decompose a processing pipeline of the collaboration server into a set of stages connected by queues. By performing admission control on each queue the service can be well conditioned to load thereby preventing resources from being overcommitted when demand exceeds service e.g. GSPS transformation session management conversation management etc. capacity. SEDA enables a default failover mechanism for guaranteed delivery of collaboration communications. This prevents out of band scenarios which could potentially become a patient safety issue and additionally provides high availability and scalability to the system .

At the collaboration server receives a request from the first device for real time collaboration with the second device .

At the collaboration server sends a request to the second device for real time collaboration with the first device . The collaboration server assigns a collaboration identifier to the conversation encompassing the information sent between the first and second devices . The second device receives an indication that it received a collaboration request from the first device and can choose whether to accept or reject the collaboration request.

At the collaboration server receives a context object from the first device describing the current state of the first viewer of the first device. The context object includes the conversation identifier the procedure study identifier and or the patient identifier of the study that is open on the first device .

At the collaboration server receives an indication that the second device accepted the collaboration request from the first device .

At a real time messaging pipeline is established between the first and second devices . In an example the accept indication is picked up by a callback JavaScript function on the first device that invokes a call to a JavaScript function that then uses the current context procedure patient etc. of the first viewer to establish a messaging connection session using the conversation identifier. This involves making a call to a RIS PACS integration component to call the IVAPI passing in the conversation identifier to re direct the first viewer to a WebSocket connection with the collaboration server . The RIS PACS integration component is used for example to enable desktop content sharing between the first imaging desktop e.g. GE HEALTHCARE CENTRICITY RIS i eRADCockpit and the first viewer e.g. GE HEALTHCARE Universal Viewer for CENTRICITY PACS and PACS IW .

At the collaboration server receives a payload from the first and or second devices describing event actions and states of their respective viewers . Business logic at the respective viewers e.g. the viewers capture user interface level events e.g. mouse clicks etc. along with associated graffiti e.g. state information e.g. ROI screen co ordinates in 2 D planar space relative image aspect ratio canvas width height etc. into a structured control protocol using an XML or JSON payload type which is then serialized and streamed to the collaboration server .

At the collaboration server performs interim translations using payload transformation services as described above.

At the collaboration server transmits the translated event action state payload to the other of the first and or second devices e.g. the recipient device . Business logic at recipient device e.g. the first and or second devices de serializes the payload and converts the same into a presentation overlay on its viewport.

Blocks repeat throughout the duration of the real time collaboration session such that any actions or states performed on the first viewer of the first device is effected on the second viewer of the second device and vice versa such that the viewports of the respective viewers are synchronized.

Furthermore although the flow diagram of the example method of real time collaboration of the system is illustrated with respect to real time collaboration between the first and second devices real time collaboration can be extended to N collaboration sessions each of which can include collaboration between N devices which are managed by the collaboration server .

In certain examples collaboration systems e.g. the system utilize the Object Management Group OMG Data Distribution Service for Real Time Systems DDS standard. illustrates a simplified example collaboration system that utilizes DDS for real time collaboration. For brevity and clarity real time collaboration utilizing DDS is explained with respect to the simplified system of however real time collaboration utilizing DDS can be carried out through any example system described herein e.g. the systems or any other systems .

The collaboration system includes a collaboration server that facilitates medical diagnostic collaboration between a first viewer a second viewer and a third viewer over a network . The system utilizes the OMG DDS protocol standard for real time systems or near real time systems using a Publish Subscribe communication pattern wherein streaming viewport data is delivered with real time constraints. DDS provides a flexible Publish Subscribe architecture which the viewers e.g. the first second and third viewers and which can be ZFP or UVx viewers for example utilize to exchange viewport streaming data e.g. action commands and states . Each respective viewer in a collaboration conversation is a publisher of data a subscriber of data or both. The viewers can participate in multi mode collaborations that can include multiple publishers and subscribers. Each viewer in the collaborative conversation would be a source publisher of raw data. This raw data is then streamed by DDS across the network to interested subscribers who are essentially all the other viewers in the collaborative conversation. In an example the raw data is sent to the collaboration server which performs initial processing on the raw data to produce processed data that is then published out to all the viewers that are subscribed to the collaboration conversation. Utilizing the concept of dynamic discovery of publishers and subscribers provided by DDS the collaborating viewers do not have to know of or configure the endpoints for communications because they are automatically discovered by DDS. DDS dynamically discovers endpoint characteristics e.g. status as a publisher and or subscriber data type being published or subscribed to publisher s communication characteristics and the subscriber s requested communications characteristics etc. . All of these attributes are taken into consideration during the dynamic discovery and matching of DDS participants. Complementary to dynamic discovery of endpoints DDS also provides configurable QoS policies on the published and or subscribed viewport data that affect a variety of aspects of communications including reliability performance persistence of data and amount of system resources used among others. DDS is a low latency communication architecture and while different implementations of DDS will have different performance characteristics in general all implementations will exhibit high performance. This is because the DDS and RTPS specifications are written to satisfy the requirements of real time and near real time systems. This low latency communication model is important to prevent out of band scenarios e.g. if the viewer has scrolled to the tenth image in a series but the viewer on the same collaboration conversation has not received the data for that state change yet and is still on the first image in the series . Such a scenario is potentially hazardous and can pose patient safety concerns. DDS by its fundamental characteristic of specifying a compact data encoding on the wire light weight notification mechanisms and the ability for the application to specify QoS policies on the message content itself allows data transfer implementations that are generally reliable efficient low overhead and high performance.

Certain examples utilize OpenDDS an open source implementation of the OMG DDS specification to establish a communication mechanism using e.g. the Corba IIOP protocol between one or many publishers of and subscribers to a Topic. In addition the system can utilize Apache Camel s Routing and Mediation engine complemented by its DDS component adaptor to provide a messaging API connector to DDS.

In certain examples the system utilizes Advanced Message Queuing Protocol AMQP to provide a message oriented communication pipeline with message delivery guarantees for transport of serialized collaboration session information. In addition in certain examples the system utilizes Staged Event Driven Architecture SEDA to enable a default failover mechanism for guaranteed delivery. Utilization of SEDA prevents out of band scenarios which could potentially become a patient safety issue. In addition SEDA provides high availability and scalability of the system .

In certain examples collaboration functions are integrated as a component within the imaging desktops . For example the collaboration functions can be built in as an application development framework e.g. ORACLE ADF component. In an example a user of the first device can sign in to the first imaging desktop which authenticates the user s credentials with a database on the collaboration server .

The first imaging desktop has a worklist view to manage the user s e.g. radiologist s work such as unread studies e.g. exams . The user can launch a study from the worklist to analyze the study and prepare a report including his her diagnostic results.

At the user of the first device launches a study in a reporting screen on the first imaging desktop . The study is identified by a procedure study identifier and is retrieved from a database e.g. an enterprise archive a RIS a PACS or an integrated RIS PACS .

At the first imaging desktop launches the first viewer by invoking the IVAPI and indicating the procedure study identifier of the study that is loaded on the first imaging desktop . The first viewer loads the images e.g. DICOM images associated with the study in its one or more viewports .

At the first imaging desktop captures context of the study. The context includes for example the procedure study identifier a patient identifier image information hanging protocol and presentation state such as Grayscale Softcopy Presentation State GSPS information among other things. The context includes any information that is needed to launch a study on a collaborating device.

The worklist view of the first imaging desktop includes a launcher such as a collaboration button . In an example the collaboration button is labeled Click 2 Collaborate or C2C. Clicking the collaboration button launches the first IM Presence application .

At the user of the first device launches the first IM Presence application by clicking the collaboration button . Upon launching the first IM Presence application a messaging pipeline e.g. XMPP pipeline is established between the first device and the collaboration server . For illustrative purposes depicts messages sent between chat windows of the respective first and second devices . In operation messages are routed through the messaging pipeline e.g. XMPP pipeline established with the collaboration server .

The IM Presence application includes a roster list e.g. contact list of the user of the first device as well as the associated presence of the contacts within the roster list such as a user of the second device for example. The user of the first device e.g. the collaboration initiator can initiate a conversation e.g. an instant messaging session with one or more contacts within his her roster list.

At the user of the first device initiates a conversation with the user of the second device . A conversation is initiated for example by double clicking a contact on the roster list. Upon initiating the conversation with the user of the second device a first chat window opens on the first device and a second chat window opens on the second device . In an example the second imaging desktop includes a messaging icon to indicate the receipt of a message instead of automatically displaying the message. This allows the user of the second device to work uninterrupted unless he affirmatively decides to view a message. In an example multiple messages are queued and the availability thereof is broadcast through the icon.

The user of the first device can initiate a real time collaboration session with a contact within his roster list e.g. the user of the second device to collaborate on a study that is open in the viewer of the first device . In an example a real time collaboration session is initiated by clicking a launcher such as a real time collaboration button within the first chat window . In an example the real time collaboration button is labeled Click 2 Share or C2S. In other examples the launcher is external to the chat window . For example the launcher can be in a contextual menu within the IM Presence application such that the launcher is displayed when the user right clicks a contact within his her roster list.

At the user of the first device initiates a real time collaboration session with the user of the second device by clicking the collaboration button .

At the first IM Presence application transmits a request to the collaboration server to retrieve the conversation identifier. The conversation identifier is unique to the present conversation between the first and second devices . Conversation identifiers are used by a conversation manager on the collaboration server to track different conversations to ensure that all current conversations each having its own unique conversation identifier are synchronized and in a closed loop. 

At a context object including the conversation identifier the procedure study identifier and or the patient identifier is created and transmitted to the second device via the collaboration server. In an example the context object is transmitted as a message e.g. an XMPP message over the messaging pipeline e.g. the XMPP pipeline . Upon receipt of the context object the second device displays a real time collaboration request e.g. an Accept Share Request message which includes options to either Accept or Decline. 

At the user of the second device accepts the real time collaboration request. Acceptance is received by a Callback JS function on the first IM Presence application .

At first IM Presence application sends a command to the first imaging desktop to establish the collaboration session between the first and second devices .

At the first imaging desktop invokes a call to a JS function which uses the current context e.g. procedure study identifier patient identifier etc. of the first viewer to establish a messaging connection session using the conversation identifier. This involves making a call to the first viewer which passes in the conversation identifier to re direct the first viewer to a WebSocket connection with the collaboration server .

At the real time messaging pipeline is thus established between the first viewer and the collaboration server .

At interrupt workflow is invoked upon acceptance of the collaboration request. A JS helper function at the second imaging desktop launches an interrupt workflow event. As discussed above interrupt workflow saves an active study into an active work queue on the collaboration server prior to launching the study in connection with the collaboration request.

At the second imaging desktop receives the study from the collaboration server . At the second imaging desktop loads the study into the second viewer and a call is made to direct the second viewer to a WebSocket connection with the collaboration server .

At the real time messaging pipeline is thus established between the second viewer and the collaboration server . Thus the first and second devices are connected for bi directional full duplex communications. Accordingly graphic objects annotations spatial transforms window mouse level commands ultrasound cine loops etc. performed on either the first or second devices are effected on the viewers of the other collaborating device.

At the first device transmits meta information of event actions and states performed on the first viewer to the collaboration server . As described above viewer capabilities and tools of each of the devices utilize a vocabulary stanza to translate manipulation e.g. event actions and states on a viewport of a collaborating device into commands that are streamed to other collaborating devices.

At the collaboration server manages any interim translations that are necessary and transmits the meta information to the second viewer . The second viewer de serializes the meta information payload and updates the images displayed thereon to synchronize the images with the current state of the first viewer .

Interrupt workflow is a feature of the collaboration systems described herein e.g. the systems etc. to facilitate seamless transitions between active studies and studies launched through collaboration tools such as Smartlink or real time collaboration for example. Essentially if a user has a study open when he receives a collaboration request e.g. a Smartlink or real time collaboration request from another user an interrupt workflow tool automatically saves the active study into a work queue before loading the shared study specified by the collaboration request. Upon closing the shared study the interrupt workflow tool automatically reverts to the study that was saved into the work queue.

At the second device receives a collaboration request from a device such as from the first device . The collaboration request includes for example a study identifier and bookmark for a second study.

At upon acceptance of the collaboration request the second device determines whether a study e.g. the first study is currently open and active on the second device .

At if a study e.g. the first study is currently open the first study is saved to an active work queue. The active work queue can be located in a local or remote database.

At the second device receives the collaboration request including for example a study identifier and bookmark for the second study from the first device .

At the second device e.g. an imaging desktop of the second device injects the bookmark into the second viewer and loads the study.

At the user e.g. a radiologist or clinician of the second device analyzes the study which can include performing diagnoses and drafting reports among other things.

At if the second study has been closed the second device retrieves the first study from the active work queue in which it was saved.

At the second device loads the first study. Thus the user of the second device enjoys a seamless transition between an active study and a shared study without losing any preliminary work performed on the active study.

While an example manner of implementing the medical diagnostic collaboration systems of is illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further example collaboration servers collaboration services collaboration infrastructure devices networks user interfaces imaging desktops viewers and or user interfaces more generally the example systems of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example collaboration servers collaboration services collaboration infrastructure devices networks user interfaces imaging desktops viewers and or user interfaces more generally the example systems of could be implemented by one or more analog or digital circuit s logic circuits programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s . When reading any of the apparatus or system claims of this patent to cover a purely software and or firmware implementation at least one of the example collaboration servers collaboration services collaboration infrastructure devices networks user interfaces imaging desktops viewers and or user interfaces more generally the example systems of are hereby expressly defined to include a tangible computer readable storage device or storage disk such as a memory a digital versatile disk DVD a compact disk CD a Blu ray disk etc. storing the software and or firmware. Further still the example systems of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

Flowcharts representative of example machine readable instructions for implementing the systems and of are shown in . In this example the machine readable instructions comprise a program for execution by a processor such as the processor shown in the example processor platform discussed below in connection with . The program may be embodied in software stored on a tangible computer readable storage medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD a Blu ray disk or a memory associated with the processor but the entire program and or parts thereof could alternatively be executed by a device other than the processor and or embodied in firmware or dedicated hardware. Further although the example program is described with reference to the flowcharts illustrated in many other methods of implementing the example systems and may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a tangible computer readable storage medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable storage medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein tangible computer readable storage medium and tangible machine readable storage medium are used interchangeably. Additionally or alternatively the example processes of and may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a non transitory computer and or machine readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein when the phrase at least is used as the transition term in a preamble of a claim it is open ended in the same manner as the term comprising is open ended.

The processor platform of the illustrated example includes a processor . The processor of the illustrated example is hardware. For example the processor can be implemented by one or more integrated circuits logic circuits microprocessors or controllers from any desired family or manufacturer.

The processor of the illustrated example includes a local memory e.g. a cache . The processor of the illustrated example is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is controlled by a memory controller.

The processor platform of the illustrated example also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a PCI express interface.

In the illustrated example one or more input devices are connected to the interface circuit . The input device s permit s a user to enter data and commands into the processor . The input device s can be implemented by for example an audio sensor a microphone a camera still or video a keyboard a button a mouse a touchscreen a track pad a trackball isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit of the illustrated example. The output devices can be implemented for example by display devices e.g. a light emitting diode LED an organic light emitting diode OLED a liquid crystal display a cathode ray tube display CRT a touchscreen a tactile output device a light emitting diode LED a printer and or speakers . The interface circuit of the illustrated example thus typically includes a graphics driver card a graphics driver chip or a graphics driver processor.

The interface circuit of the illustrated example also includes a communication device such as a transmitter a receiver a transceiver a modem and or network interface card to facilitate exchange of data with external machines e.g. computing devices of any kind via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The processor platform of the illustrated example also includes one or more mass storage devices for storing software and or data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives Blu ray disk drives RAID systems and digital versatile disk DVD drives.

The coded instructions of may be stored in the mass storage device in the volatile memory in the non volatile memory and or on a removable tangible computer readable storage medium such as a CD or DVD.

From the foregoing it will appreciate that the above disclosed methods apparatus and articles of manufacture provide numerous benefits to healthcare enterprises such as improved communication within and between healthcare enterprises increased confidence in diagnostic findings and improved access to sub specialty reading among others. Ultimately these advantages result in improved patient care and reduced cost.

Although certain example methods apparatus and articles of manufacture have been disclosed herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.

