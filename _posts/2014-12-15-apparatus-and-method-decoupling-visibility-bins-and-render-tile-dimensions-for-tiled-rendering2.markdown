---

title: Apparatus and method decoupling visibility bins and render tile dimensions for tiled rendering
abstract: An apparatus and method are described for decoupling visibility bins and render tile dimensions for tiled rendering. In one embodiment of the invention, a single visibility pass over the scene objects is performed and all the visibility bins are generated in parallel. This allows for high performance when the number of render tiles exceeds the number of visibility bins. The regions upon which visibility testing/recording is done is decoupled from the render tile regions in one embodiment of the invention. This allows a given visibility bin to map to multiple render tiles, thus allowing a fixed number of visibility bins to support any number of render tiles.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600926&OS=09600926&RS=09600926
owner: Intel Corporation
number: 09600926
owner_city: Santa Clara
owner_country: US
publication_date: 20141215
---
This invention relates generally to the field of computer processors. More particularly the invention relates to an apparatus and method for decoupling visibility bins and render tile dimensions.

In some tile rendering architectures there is a 1 1 mapping between the visibility bins or regions and the render tiles. This 1 1 mapping could encounter problems when the number of render tiles exceeds the number of visibility bins that the Graphical Processing Unit GPU could generate in parallel. This is because multiple visibility passes are needed and it causes non graceful degradation in performance.

For example illustrates a prior art visibility bin scheme. The visibility bins and are mapped 1 1 to the render tiles and respectively after performing the tile render pass stages and . When the number of render tiles exceeds the number of visibility bins under the prior art visibility bin scheme multiple visibility passes over possibly hierarchical subsets of the render tiles have to be performed for the scene objects . This causes the non graceful degradation in performance.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention described below. It will be apparent however to one skilled in the art that the embodiments of the invention may be practiced without some of these specific details. In other instances well known structures and devices are shown in block diagram form to avoid obscuring the underlying principles of the embodiments of the invention.

An embodiment of the data processing system can include or be incorporated within a server based gaming platform a game console including a game and media console a mobile gaming console a handheld game console or an online game console. In one embodiment the data processing system is a mobile phone smart phone tablet computing device or mobile Internet device. The data processing system can also include couple with or be integrated within a wearable device such as a smart watch wearable device smart eyewear device augmented reality device or virtual reality device. In one embodiment the data processing system is a television or set top box device having one or more processors and a graphical interface generated by one or more graphics processors .

The one or more processors each include one or more processor cores to process instructions which when executed perform operations for system and user software. In one embodiment each of the one or more processor cores is configured to process a specific instruction set . The instruction set may facilitate complex instruction set computing CISC reduced instruction set computing RISC or computing via a very long instruction word VLIW . Multiple processor cores may each process a different instruction set which may include instructions to facilitate the emulation of other instruction sets. A processor core may also include other processing devices such a digital signal processor DSP .

In one embodiment the processor includes cache memory . Depending on the architecture the processor can have a single internal cache or multiple levels of internal cache. In one embodiment the cache memory is shared among various components of the processor . In one embodiment the processor also uses an external cache e.g. a Level 3 L3 cache or last level cache LLC not shown which may be shared among the processor cores using known cache coherency techniques. A register file is additionally included in the processor which may include different types of registers for storing different types of data e.g. integer registers floating point registers status registers and an instruction pointer register . Some registers may be general purpose registers while other registers may be specific to the design of the processor .

The processor is coupled to a processor bus to transmit data signals between the processor and other components in the system . The system uses an exemplary hub system architecture including a memory controller hub and an input output I O controller hub . The memory controller hub facilitates communication between a memory device and other components of the system while the I O controller hub ICH provides connections to I O devices via a local I O bus.

The memory device can be a dynamic random access memory DRAM device a static random access memory SRAM device flash memory device or some other memory device having suitable performance to serve as process memory. The memory can store data and instructions for use when the processor executes a process. The memory controller hub also couples with an optional external graphics processor which may communicate with the one or more graphics processor in the processor to perform graphics and media operations.

The ICH enables peripherals to connect to the memory and processor via a high speed I O bus. The I O peripherals include an audio controller a firmware interface a wireless transceiver e.g. Wi Fi Bluetooth a data storage device e.g. hard disk drive flash memory etc. and a legacy I O controller for coupling legacy e.g. Personal System 2 PS 2 devices to the system. One or more Universal Serial Bus USB controllers connect input devices such as keyboard and mouse combinations. A network controller may also couple to the ICH . In one embodiment a high performance network controller not shown couples to the processor bus .

The internal cache units A N and shared cache units represent a cache memory hierarchy within the processor . The cache memory hierarchy may include at least one level of instruction and data cache within each core and one or more levels of shared mid level cache such as a level 2 L2 level 3 L3 level 4 L4 or other levels of cache where the highest level of cache before external memory is classified as the last level cache LLC . In one embodiment cache coherency logic maintains coherency between the various cache units and A N.

The processor may also include a set of one or more bus controller units and a system agent . The one or more bus controller units manage a set of peripheral buses such as one or more Peripheral Component Interconnect buses e.g. PCI PCI Express . The system agent provides management functionality for the various processor components. In one embodiment the system agent includes one or more integrated memory controllers to manage access to various external memory devices not shown .

In one embodiment one or more of the cores A N include support for simultaneous multi threading. In such embodiment the system agent includes components for coordinating and operating cores A N during multi threaded processing. The system agent may additionally include a power control unit PCU which includes logic and components to regulate the power state of the cores A N and the graphics processor .

The processor additionally includes a graphics processor to execute graphics processing operations. In one embodiment the graphics processor couples with the set of shared cache units and the system agent unit including the one or more integrated memory controllers . In one embodiment a display controller is coupled with the graphics processor to drive graphics processor output to one or more coupled displays. The display controller may be separate module coupled with the graphics processor via at least one interconnect or may be integrated within the graphics processor or system agent .

In one embodiment a ring based interconnect unit is used to couple the internal components of the processor however an alternative interconnect unit may be used such as a point to point interconnect a switched interconnect or other techniques including techniques well known in the art. In one embodiment the graphics processor couples with the ring interconnect via an I O link .

The exemplary I O link represents at least one of multiple varieties of I O interconnects including an on package I O interconnect which facilitates communication between various processor components and a high performance embedded memory module such as an eDRAM module. In one embodiment each of the cores A N and the graphics processor use the embedded memory modules as shared last level cache.

In one embodiment cores A N are homogenous cores executing the same instruction set architecture. In another embodiment the cores A N are heterogeneous in terms of instruction set architecture ISA where one or more of the cores A N execute a first instruction set while at least one of the other cores executes a subset of the first instruction set or a different instruction set.

The processor can be a part of or implemented on one or more substrates using any of a number of process technologies for example Complementary metal oxide semiconductor CMOS Bipolar Junction Complementary metal oxide semiconductor BiCMOS or N type metal oxide semiconductor logic NMOS . Additionally the processor can be implemented on one or more chips or as a system on a chip SOC integrated circuit having the illustrated components in addition to other components.

The graphics processor also includes a display controller to drive display output data to a display device . The display controller includes hardware for one or more overlay planes for the display and composition of multiple layers of video or user interface elements. In one embodiment the graphics processor includes a video codec engine to encode decode or transcode media to from or between one or more media encoding formats including but not limited to Moving Picture Experts Group MPEG formats such as MPEG 2 Advanced Video Coding AVC formats such as H.264 MPEG 4 AVC as well as the Society of Motion Picture Television Engineers SMPTE 421M VC 1 and Joint Photographic Experts Group JPEG formats such as JPEG and Motion JPEG MJPEG formats.

In one embodiment the graphics processor includes a block image transfer BLIT engine to perform two dimensional 2D rasterizer operations including for example bit boundary block transfers. However in one embodiment 2D graphics operations are performed using one or more components of the graphics processing engine GPE . The graphics processing engine is a compute engine for performing graphics operations including three dimensional 3D graphics operations and media operations.

The GPE includes a 3D pipeline for performing 3D operations such as rendering three dimensional images and scenes using processing functions that act upon 3D primitive shapes e.g. rectangle triangle etc. . The 3D pipeline includes programmable and fixed function elements that perform various tasks within the element and or spawn execution threads to a 3D Media sub system . While the 3D pipeline can be used to perform media operations an embodiment of the GPE also includes a media pipeline that is specifically used to perform media operations such as video post processing and image enhancement.

In one embodiment the media pipeline includes fixed function or programmable logic units to perform one or more specialized media operations such as video decode acceleration video de interlacing and video encode acceleration in place of or on behalf of the video codec engine . In on embodiment the media pipeline additionally includes a thread spawning unit to spawn threads for execution on the 3D Media sub system . The spawned threads perform computations for the media operations on one or more graphics execution units included in the 3D Media sub system.

The 3D Media subsystem includes logic for executing threads spawned by the 3D pipeline and media pipeline . In one embodiment the pipelines send thread execution requests to the 3D Media subsystem which includes thread dispatch logic for arbitrating and dispatching the various requests to available thread execution resources. The execution resources include an array of graphics execution units to process the 3D and media threads. In one embodiment the 3D Media subsystem includes one or more internal caches for thread instructions and data. In one embodiment the subsystem also includes shared memory including registers and addressable memory to share data between threads and to store output data.

In one embodiment the GPE couples with a command streamer which provides a command stream to the GPE 3D and media pipelines . The command streamer is coupled to memory which can be system memory or one or more of internal cache memory and shared cache memory. The command streamer receives commands from the memory and sends the commands to the 3D pipeline and or media pipeline . The 3D and media pipelines process the commands by performing operations via logic within the respective pipelines or by dispatching one or more execution threads to the execution unit array . In one embodiment the execution unit array is scalable such that the array includes a variable number of execution units based on the target power and performance level of the GPE .

A sampling engine couples with memory e.g. cache memory or system memory and the execution unit array . In one embodiment the sampling engine provides a memory access mechanism for the scalable execution unit array that allows the execution array to read graphics and media data from memory. In one embodiment the sampling engine includes logic to perform specialized image sampling operations for media.

The specialized media sampling logic in the sampling engine includes a de noise de interlace module a motion estimation module and an image scaling and filtering module . The de noise de interlace module includes logic to perform one or more of a de noise or a de interlace algorithm on decoded video data. The de interlace logic combines alternating fields of interlaced video content into a single fame of video. The de noise logic reduces or remove data noise from video and image data. In one embodiment the de noise logic and de interlace logic are motion adaptive and use spatial or temporal filtering based on the amount of motion detected in the video data. In one embodiment the de noise de interlace module includes dedicated motion detection logic e.g. within the motion estimation engine .

The motion estimation engine provides hardware acceleration for video operations by performing video acceleration functions such as motion vector estimation and prediction on video data. The motion estimation engine determines motion vectors that describe the transformation of image data between successive video frames. In one embodiment a graphics processor media codec uses the video motion estimation engine to perform operations on video at the macro block level that may otherwise be computationally intensive to perform using a general purpose processor. In one embodiment the motion estimation engine is generally available to graphics processor components to assist with video decode and processing functions that are sensitive or adaptive to the direction or magnitude of the motion within video data.

The image scaling and filtering module performs image processing operations to enhance the visual quality of generated images and video. In one embodiment the scaling and filtering module processes image and video data during the sampling operation before providing the data to the execution unit array .

In one embodiment the graphics processing engine includes a data port which provides an additional mechanism for graphics subsystems to access memory. The data port facilitates memory access for operations including render target writes constant buffer reads scratch memory space reads writes and media surface accesses. In one embodiment the data port includes cache memory space to cache accesses to memory. The cache memory can be a single data cache or separated into multiple caches for the multiple subsystems that access memory via the data port e.g. a render buffer cache a constant buffer cache etc. . In one embodiment threads executing on an execution unit in the execution unit array communicate with the data port by exchanging messages via a data distribution interconnect that couples each of the sub systems of the graphics processing engine .

The graphics processor receives batches of commands via the ring interconnect . The incoming commands are interpreted by a command streamer in the pipeline front end . The graphics processor includes scalable execution logic to perform 3D geometry processing and media processing via the graphics core s A N. For 3D geometry processing commands the command streamer supplies the commands to the geometry pipeline . For at least some media processing commands the command streamer supplies the commands to a video front end which couples with a media engine . The media engine includes a video quality engine VQE for video and image post processing and a multi format encode decode MFX engine to provide hardware accelerated media data encode and decode. The geometry pipeline and media engine each generate execution threads for the thread execution resources provided by at least one graphics core A.

The graphics processor includes scalable thread execution resources featuring modular cores A N sometime referred to as core slices each having multiple sub cores A N A N sometimes referred to as core sub slices . The graphics processor can have any number of graphics cores A through N. In one embodiment the graphics processor includes a graphics core A having at least a first sub core A and a second sub core A. In another embodiment the graphics processor is a low power processor with a single sub core e.g. A . In one embodiment the graphics processor includes multiple graphics cores A N each including a set of first sub cores A N and a set of second sub cores A N. Each sub core in the set of first sub cores A N includes at least a first set of execution units A N and media texture samplers A N. Each sub core in the set of second sub cores A N includes at least a second set of execution units A N and samplers A N. In one embodiment each sub core A N A N shares a set of shared resources A N. In one embodiment the shared resources include shared cache memory and pixel operation logic. Other shared resources may also be included in the various embodiments of the graphics processor.

In one embodiment the execution unit array A N is primarily used to execute shader programs. In one embodiment the execution units in the array A N execute an instruction set that includes native support for many standard 3D graphics shader instructions such that shader programs from graphics libraries e.g. Direct 3D and OpenGL are executed with a minimal translation. The execution units support vertex and geometry processing e.g. vertex programs geometry programs vertex shaders pixel processing e.g. pixel shaders fragment shaders and general purpose processing e.g. compute and media shaders .

Each execution unit in the execution unit array A N operates on arrays of data elements. The number of data elements is the execution size or the number of channels for the instruction. An execution channel is a logical unit of execution for data element access masking and flow control within instructions. The number of channels may be independent of the number of physical ALUs or FPUs for a particular graphics processor. The execution units A N support integer and floating point data types.

The execution unit instruction set includes single instruction multiple data SIMD instructions. The various data elements can be stored as a packed data type in a register and the execution unit will process the various elements based on the data size of the elements. For example when operating on a 256 bit wide vector the 256 bits of the vector are stored in a register and the execution unit operates on the vector as four separate 64 bit packed data elements quad word QW size data elements eight separate 32 bit packed data elements double word DW size data elements sixteen separate 16 bit packed data elements word W size data elements or thirty two separate 8 bit data elements byte B size data elements . However different vector widths and register sizes are possible.

One or more internal instruction caches e.g. are included in the thread execution logic to cache thread instructions for the execution units. In one embodiment one or more data caches e.g. are included to cache thread data during thread execution. A sampler is included to provide texture sampling for 3D operations and media sampling for media operations. In one embodiment the sampler includes specialized texture or media sampling functionality to process texture or media data during the sampling process before providing the sampled data to an execution unit.

During execution the graphics and media pipelines send thread initiation requests to the thread execution logic via thread spawning and dispatch logic. The thread execution logic includes a local thread dispatcher that arbitrates thread initiation requests from the graphics and media pipelines and instantiates the requested threads on one or more execution units A N. For example the geometry pipeline e.g. of dispatches vertex processing tessellation or geometry processing threads to the thread execution logic . The thread dispatcher can also process runtime thread spawning requests from the executing shader programs.

Once a group of geometric objects have been processed and rasterized into pixel data the pixel shader is invoked to further compute output information and cause results to be written to output surfaces e.g. color buffers depth buffers stencil buffers etc. . In one embodiment the pixel shader calculates the values of the various vertex attributes that are to be interpolated across the rasterized object. The pixel shader then executes an API supplied pixel shader program. To execute the pixel shader program the pixel shader dispatches threads to an execution unit e.g. A via the thread dispatcher . The pixel shader uses texture sampling logic in the sampler to access texture data in texture maps stored in memory. Arithmetic operations on the texture data and the input geometry data compute pixel color data for each geometric fragment or discards one or more pixels from further processing.

In one embodiment the data port provides a memory access mechanism for the thread execution logic output processed data to memory for processing on a graphics processor output pipeline. In one embodiment the data port includes or couples to one or more cache memories e.g. data cache to cache data for memory access via the data port.

In one embodiment the graphics processor execution units natively support instructions in a 128 bit format . A 64 bit compacted instruction format is available for some instructions based on the selected instruction instruction options and number of operands. The native 128 bit format provides access to all instruction options while some options and operations are restricted in the 64 bit format . The native instructions available in the 64 bit format varies by embodiment. In one embodiment the instruction is compacted in part using a set of index values in an index field . The execution unit hardware references a set of compaction tables based on the index values and uses the compaction table outputs to reconstruct a native instruction in the 128 bit format .

For each format an instruction opcode defines the operation that the execution unit is to perform. The execution units execute each instruction in parallel across the multiple data elements of each operand. For example in response to an add instruction the execution unit performs a simultaneous add operation across each color channel representing a texture element or picture element. By default the execution unit performs each instruction across all data channels of the operands. An instruction control field enables control over certain execution options such as channels selection e.g. predication and data channel order e.g. swizzle . For 128 bit instructions an exec size field limits the number of data channels that will be executed in parallel. The exec size field is not available for use in the 64 bit compact instruction format .

Some execution unit instructions have up to three operands including two source operands src src and one destination . In one embodiment the execution units support dual destination instructions where one of the destinations is implied. Data manipulation instructions can have a third source operand e.g. SRC where the instruction opcode determines the number of source operands. An instruction s last source operand can be an immediate e.g. hard coded value passed with the instruction.

In one embodiment instructions are grouped based on opcode bit fields to simplify Opcode decode . For an 8 bit opcode bits and allow the execution unit to determine the type of opcode. The precise opcode grouping shown is exemplary. In one embodiment a move and logic opcode group includes data movement and logic instructions e.g. mov cmp . The move and logic group shares the five most significant bits MSB where move instructions are in the form of 0000xxxxb e.g. 0x0x and logic instructions are in the form of 0001xxxxb e.g. 0x01 . A flow control instruction group e.g. call jmp includes instructions in the form of 0010xxxxb e.g. 0x20 . A miscellaneous instruction group includes a mix of instructions including synchronization instructions e.g. wait send in the form of 0011xxxxb e.g. 0x30 . A parallel math instruction group includes component wise arithmetic instructions e.g. add mul in the form of 0100xxxxb e.g. 0x40 . The parallel math group performs the arithmetic operations in parallel across data channels. The vector math group includes arithmetic instructions e.g. dp4 in the form of 0101xxxxb e.g. 0x50 . The vector math group performs arithmetic such as dot product calculations on vector operands.

The command streamer directs the operation of a vertex fetcher component that reads vertex data from memory and executes vertex processing commands provided by the command streamer . The vertex fetcher provides vertex data to a vertex shader which performs coordinate space transformation and lighting operations to each vertex. The vertex fetcher and vertex shader execute vertex processing instructions by dispatching execution threads to the execution units A B via a thread dispatcher .

In one embodiment the execution units A B are an array of vector processors having an instruction set for performing graphics and media operations. The execution units A B have an attached L1 cache that is specific for each array or shared between the arrays. The cache can be configured as a data cache an instruction cache or a single cache that is partitioned to contain data and instructions in different partitions.

In one embodiment the graphics pipeline includes tessellation components to perform hardware accelerated tessellation of 3D objects. A programmable hull shader configures the tessellation operations. A programmable domain shader provides back end evaluation of tessellation output. A tessellator operates at the direction of the hull shader and contains special purpose logic to generate a set of detailed geometric objects based on a coarse geometric model that is provided as input to the graphics pipeline . If tessellation is not used the tessellation components can be bypassed.

The complete geometric objects can be processed by a geometry shader via one or more threads dispatched to the execution units A B or can proceed directly to the clipper . The geometry shader operates on entire geometric objects rather than vertices or patches of vertices as in previous stages of the graphics pipeline. If the tessellation is disabled the geometry shader receives input from the vertex shader . The geometry shader is programmable by a geometry shader program to perform geometry tessellation if the tessellation units are disabled.

Prior to rasterization vertex data is processed by a clipper which is either a fixed function clipper or a programmable clipper having clipping and geometry shader functions. In one embodiment a rasterizer in the render output pipeline dispatches pixel shaders to convert the geometric objects into their per pixel representations. In one embodiment pixel shader logic is included in the thread execution logic .

The graphics engine has an interconnect bus interconnect fabric or some other interconnect mechanism that allows data and message passing amongst the major components of the graphics engine. In one embodiment the execution units A B and associated cache s texture and media sampler and texture sampler cache interconnect via a data port to perform memory access and communicate with render output pipeline components of the graphics engine. In one embodiment the sampler caches and execution units A B each have separate memory access paths.

In one embodiment the render output pipeline contains a rasterizer and depth test component that converts vertex based objects into their associated pixel based representation. In one embodiment the rasterizer logic includes a windower masker unit to perform fixed function triangle and line rasterization. An associated render and depth buffer caches are also available in one embodiment. A pixel operations component performs pixel based operations on the data though in some instances pixel operations associated with 2D operations e.g. bit block image transfers with blending are performed by the 2D engine or substituted at display time by the display controller using overlay display planes. In one embodiment a shared L3 cache is available to all graphics components allowing the sharing of data without the use of main system memory.

The graphics processor media pipeline includes a media engine and a video front end . In one embodiment the video front end receives pipeline commands from the command streamer . However in one embodiment the media pipeline includes a separate command streamer. The video front end processes media commands before sending the command to the media engine . In one embodiment the media engine includes thread spawning functionality to spawn threads for dispatch to the thread execution logic via the thread dispatcher .

In one embodiment the graphics engine includes a display engine . In one embodiment the display engine is external to the graphics processor and couples with the graphics processor via the ring interconnect or some other interconnect bus or fabric. The display engine includes a 2D engine and a display controller . The display engine contains special purpose logic capable of operating independently of the 3D pipeline. The display controller couples with a display device not shown which may be a system integrated display device as in a laptop computer or an external display device attached via an display device connector.

The graphics pipeline and media pipeline are configurable to perform operations based on multiple graphics and media programming interfaces and are not specific to any one application programming interface API . In one embodiment driver software for the graphics processor translates API calls that are specific to a particular graphics or media library into commands that can be processed by the graphics processor. In various embodiments support is provided for the Open Graphics Library OpenGL and Open Computing Language OpenCL supported by the Khronos Group the Direct3D library from the Microsoft Corporation or in one embodiment both OpenGL and D3D. Support may also be provided for the Open Source Computer Vision Library OpenCV . A future API with a compatible 3D pipeline would also be supported if a mapping can be made from the pipeline of the future API to the pipeline of the graphics processor.

The client specifies the client unit of the graphics device that processes the command data. In one embodiment a graphics processor command parser examines the client field of each command to condition the further processing of the command and route the command data to the appropriate client unit. In one embodiment the graphics processor client units include a memory interface unit a render unit a 2D unit a 3D unit and a media unit. Each client unit has a corresponding processing pipeline that processes the commands. Once the command is received by the client unit the client unit reads the opcode and if present sub opcode to determine the operation to perform. The client unit performs the command using information in the data field of the command. For some commands an explicit command size is expected to specify the size of the command. In one embodiment the command parser automatically determines the size of at least some of the commands based on the command opcode. In one embodiment commands are aligned via multiples of a double word.

The flow chart in shows a sample command sequence . In one embodiment software or firmware of a data processing system that features an embodiment of the graphics processor uses a version of the command sequence shown to set up execute and terminate a set of graphics operations. A sample command sequence is shown and described for exemplary purposes however embodiments are not limited to these commands or to this command sequence. Moreover the commands may be issued as batch of commands in a command sequence such that the graphics processor will process the sequence of commands in an at least partially concurrent manner.

The sample command sequence may begin with a pipeline flush command to cause any active graphics pipeline to complete the currently pending commands for the pipeline. In one embodiment the 3D pipeline and the media pipeline do not operate concurrently. The pipeline flush is performed to cause the active graphics pipeline to complete any pending commands. In response to a pipeline flush the command parser for the graphics processor will pause command processing until the active drawing engines complete pending operations and the relevant read caches are invalidated. Optionally any data in the render cache that is marked dirty can be flushed to memory. A pipeline flush command can be used for pipeline synchronization or before placing the graphics processor into a low power state.

A pipeline select command is used when a command sequence requires the graphics processor to explicitly switch between pipelines. A pipeline select command is required only once within an execution context before issuing pipeline commands unless the context is to issue commands for both pipelines. In one embodiment a pipeline flush command is is required immediately before a pipeline switch via the pipeline select command .

A pipeline control command configures a graphics pipeline for operation and is used to program the 3D pipeline and the media pipeline . The pipeline control command configures the pipeline state for the active pipeline. In one embodiment the pipeline control command is used for pipeline synchronization and to clear data from one or more cache memories within the active pipeline before processing a batch of commands.

Return buffer state commands are used to configure a set of return buffers for the respective pipelines to write data. Some pipeline operations require the allocation selection or configuration of one or more return buffers into which the operations write intermediate data during processing. The graphics processor also uses one or more return buffers to store output data and to perform cross thread communication. The return buffer state includes selecting the size and number of return buffers to use for a set of pipeline operations.

The remaining commands in the command sequence differ based on the active pipeline for operations. Based on a pipeline determination the command sequence is tailored to the 3D pipeline beginning with the 3D pipeline state or the media pipeline beginning at the media pipeline state .

The commands for the 3D pipeline state include 3D state setting commands for vertex buffer state vertex element state constant color state depth buffer state and other state variables that are to be configured before 3D primitive commands are processed. The values of these commands are determined at least in part based the particular 3D API in use. 3D pipeline state commands are also able to selectively disable or bypass certain pipeline elements if those elements will not be used.

The 3D primitive command is used to submit 3D primitives to be processed by the 3D pipeline. Commands and associated parameters that are passed to the graphics processor via the 3D primitive command are forwarded to the vertex fetch function in the graphics pipeline. The vertex fetch function uses the 3D primitive command data to generate vertex data structures. The vertex data structures are stored in one or more return buffers. The 3D primitive command is used to perform vertex operations on 3D primitives via vertex shaders. To process vertex shaders the 3D pipeline dispatches shader execution threads to graphics processor execution units.

The 3D pipeline is triggered via an execute command or event. In one embodiment a register write triggers command execution. In one embodiment execution is triggered via a go or kick command in the command sequence. In one embodiment command execution is triggered using a pipeline synchronization command to flush the command sequence through the graphics pipeline. The 3D pipeline will perform geometry processing for the 3D primitives. Once operations are complete the resulting geometric objects are rasterized and the pixel engine colors the resulting pixels. Additional commands to control pixel shading and pixel back end operations may also be included for those operations.

The sample command sequence follows the media pipeline path when performing media operations. In general the specific use and manner of programming for the media pipeline depends on the media or compute operations to be performed. Specific media decode operations may be offloaded to the media pipeline during media decode. The media pipeline can also be bypassed and media decode can be performed in whole or in part using resources provided by one or more general purpose processing cores. In one embodiment the media pipeline also includes elements for general purpose graphics processor unit GPGPU operations where the graphics processor is used to perform SIMD vector operations using computational shader programs that are not explicitly related to the rendering of graphics primitives.

The media pipeline is configured in a similar manner as the 3D pipeline . A set of media pipeline state commands are dispatched or placed into in a command queue before the media object commands . The media pipeline state commands include data to configure the media pipeline elements that will be used to process the media objects. This includes data to configure the video decode and video encode logic within the media pipeline such as encode or decode format. The media pipeline state commands also support the use one or more pointers to indirect state elements that contain a batch of state settings.

Media object commands supply pointers to media objects for processing by the media pipeline. The media objects include memory buffers containing video data to be processed. In one embodiment all media pipeline state must be valid before issuing a media object command . Once the pipeline state is configured and media object commands are queued the media pipeline is triggered via an execute command or an equivalent execute event e.g. register write . Output from the media pipeline may then be post processed by operations provided by the 3D pipeline or the media pipeline . In one embodiment GPGPU operations are configured and executed in a similar manner as media operations.

In one embodiment the 3D graphics application contains one or more shader programs including shader instructions . The shader language instructions may be in a high level shader language such as the High Level Shader Language HLSL or the OpenGL Shader Language GLSL . The application also includes executable instructions in a machine language suitable for execution by the general purpose processor core . The application also includes graphics objects defined by vertex data.

The operating system may be a Microsoft Windows operating system from the Microsoft Corporation a proprietary UNIX like operating system or an open source UNIX like operating system using a variant of the Linux kernel. When the Direct3D API is in use the operating system uses a front end shader compiler to compile any shader instructions in HLSL into a lower level shader language. The compilation may be a just in time compilation or the application can perform share pre compilation. In one embodiment high level shaders are compiled into low level shaders during the compilation of the 3D graphics application .

The user mode graphics driver may contain a back end shader compiler to convert the shader instructions into a hardware specific representation. When the OpenGL API is in use shader instructions in the GLSL high level language are passed to a user mode graphics driver for compilation. The user mode graphics driver uses operating system kernel mode functions to communicate with a kernel mode graphics driver . The kernel mode graphics driver communicates with the graphics processor to dispatch commands and instructions.

To the extent various operations or functions are described herein they can be described or defined as hardware circuitry software code instructions configuration and or data. The content can be embodied in hardware logic or as directly executable software object or executable form source code high level shader code designed for execution on a graphics engine or low level assembly language code in an instruction set for a specific processor or graphics core. The software content of the embodiments described herein can be provided via an article of manufacture with the content stored thereon or via a method of operating a communication interface to send data via the communication interface.

A non transitory machine readable storage medium can cause a machine to perform the functions or operations described and includes any mechanism that stores information in a form accessible by a machine e.g. computing device electronic system etc. such as recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. . A communication interface includes any mechanism that interfaces to any of a hardwired wireless optical etc. medium to communicate to another device such as a memory bus interface a processor bus interface an Internet connection a disk controller etc. The communication interface is configured by providing configuration parameters or sending signals to prepare the communication interface to provide a data signal describing the software content. The communication interface can be accessed via one or more commands or signals sent to the communication interface.

Various components described can be a means for performing the operations or functions described. Each component described herein includes software hardware or a combination of these. The components can be implemented as software modules hardware modules special purpose hardware e.g. application specific hardware application specific integrated circuits ASICs digital signal processors DSPs etc. embedded controllers hardwired circuitry etc. Besides what is described herein various modifications can be made to the disclosed embodiments and implementations of the invention without departing from their scope. Therefore the illustrations and examples herein should be construed in an illustrative and not a restrictive sense. The scope of the invention should be measured solely by reference to the claims that follow.

In one embodiment of the invention a Tile Based Deferred Rendering TBDR architecture subdivides the scene image into a grid of rectangular tiles render tiles and renders each tile independently. The render tile dimensions are derived from on chip cache resources e.g. color and depth caches in order to maximize use of the caches and minimize off chip memory accesses in one embodiment of the invention.

In one embodiment of the invention the TBDR architecture employs various schemes to reduce the geometry processing required for each render tile pass in order to avoid repeatedly processing all scene objects. One scheme or technique distributes the scene objects into scene object bins associated with the render tiles where each bin will only contain the scene objects that intersect the corresponding render tile. Each render tile is generated by processing the scene objects in the corresponding scene object bin.

Another scheme employs visibility bins which simply record whether or not each scene object intersects a particular render tile instead of containing copies of the intersecting scene object data. The visibility information is effectively one Boolean per scene object and given typically high temporal locality of scene objects compression techniques can be effectively employed to reduce the memory footprint of the visibility bins.

In one embodiment of the invention a single visibility pass over the scene objects is performed and all the visibility bins are generated in parallel. This allows for high performance when the number of render tiles exceeds the number of visibility bins. This visibility bin scheme is illustrated in and it uses only a single visibility pass which allows for gracefully degradation in performance. The regions upon which visibility testing recording is done is decoupled from the render tile regions in one embodiment of the invention. This allows a given visibility bin to map to multiple render tiles thus allowing a fixed number of visibility bins to support any number of render tiles.

The visibility bin scheme in decouples the granularity of visibility recording from the render tile dimensions. This decoupling allows multiple render tiles to share the same visibility bin and therefore the full set of render tiles can be mapped to the number of visibility bins supported in a single visibility pass. For example in one embodiment of the invention the visibility bin is associated or mapped to the render tiles and via the tile render pass stages and respectively. By allowing the visibility bin to map to multiple render tiles this allows a single visibility pass to be performed on the scene objects even when the number of render tiles required for a scene exceeds the limit on parallel visibility bin generation.

The visibility bin shows another example where it is mapped or associated to more than one render tile. Although the visibility bin scheme in illustrates the mapping of one visibility bin to two render tiles it is not meant to be limiting. In other embodiments of the invention each visibility bin can be mapped to any number of render tiles.

Although the visibility bin scheme in may result in some inefficiencies e.g. more scene objects may be processed for render tiles than if each had its own specific visibility bin this scheme provides a more gradual performance degradation than one having to perform additional visibility passes once the parallel visibility bin generation limit is reached. In one embodiment of the invention each visibility bin can be mapped to a separate arbitrary rectangular arrangement of render tiles. This flexibility allows for both regular mappings and more adaptive mappings.

For example illustrates a regular mapping of 16 visibility bins to 64 render tiles according to an embodiment. illustrates 64 render tiles and each visibility bin is associated with or mapped to a 2 2 grouping of render tiles. As an illustration the four render tiles and are associated or mapped to a single visibility bin. One of ordinary skill in the relevant art will readily appreciate how the other 15 groups are mapped to the visibility bins and shall not be described herein.

In another example illustrates an adaptive mapping of 16 visibility bins to render tiles according to an embodiment. illustrates 64 render tiles and there are 16 groups. However unlike the regular mapping in the mapping is adaptive based on the scene objects or image. For example the regions of the screen image with highly concentrated scene objects have visibility bins that are mapped to fewer render tiles while the less concentrated regions have visibility bins that are mapped to more render tiles.

For example the visibility bin is mapped to a 8 2 grouping of render tiles. The larger grouping of 8 2 is suitable for a less concentrated region in one embodiment of the invention. On the other hand each of the visibility bins and is mapped to a 1 2 grouping of render tiles. The smaller grouping is suitable for regions of the screen image with highly concentrated scene objects. The visibility bins are mapped to 2 2 grouping of render tiles and the visibility bin is mapped to a 8 1 grouping of render tiles. The illustration of the adaptive mapping is not meant to be limiting and only serves as one illustration of how the adaptive mapping can be achieved.

In the flow begins with the visibility detection process for an input object in step . This is illustrated by the object input in . In step the flow performs geometry processing on the input object illustrated by geometry processing in . After the geometry processing is completed the flow computes the bounding box of the processed input object in step illustrated by bounding box computation in .

In step the flow reads the extent of the first visibility bin illustrated by visibility bin extent from the visibility bin extent storage illustrated by visibility bin extent storage in illustrated in . In step the flow compares the processed input object s bounding box to the visibility bin extent. In step the flow determines if the input object s bounding box intersects the extent of the visibility bin. The steps and of are illustrated by the intersection test in .

If yes the flow goes to step and marks the input object as visible in the corresponding visibility bin. If no the flow goes to step and marks the input object as not visible in the corresponding visibility bin. The steps and are illustrated by the visibility bin where it receives the object visibility status visible or not visible .

The flow goes to step and checks if it is the last visibility bin. If no the flow goes to step to read the extent of the next visibility bin from the visibility bin extent storage illustrated by visibility bin extent and the flow continues again to step . If yes the flow ends. The visibility bin N illustrates that there can be any number of visibility bins.

In the flow begins with the start process to render input objects for a given render tile in step . This is illustrated by the object input in . In step the flow looks up or determines the render tile state including the render tile extent and the associated visibility bin number illustrated by render tile state render tile extent and visibility bin number in .

In step the flow accesses the associated visibility bin contents illustrated by the visibility bin number which controls the multiplexer selection among the visibility bins and N and the output is provided to the visibility status sequencer .

In step the flow examines the status of the first input object in the visibility bin contents. In step the flow checks if the input object is marked as visible. The steps and are illustrated by the object visibility test in . If yes the flow renders the input object illustrated by visible objects and object rendering . If not the flow discards the input object illustrated by discarded objects .

The flow checks if the input object is the last object in step . If no the flow examines the status of the next object in the visibility bin contents and the flow goes back to step . If yes the flow ends.

Embodiments of the invention may include various steps which have been described above. The steps may be embodied in machine executable instructions which may be used to cause a general purpose or special purpose processor to perform the steps. Alternatively these steps may be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

As described herein instructions may refer to specific configurations of hardware such as application specific integrated circuits ASICs configured to perform certain operations or having a predetermined functionality or software instructions stored in memory embodied in a non transitory computer readable medium. Thus the techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices e.g. an end station a network element etc. . Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer machine readable media such as non transitory computer machine readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer machine readable communication media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals etc. . In addition such electronic devices typically include a set of one or more processors coupled to one or more other components such as one or more storage devices non transitory machine readable storage media user input output devices e.g. a keyboard a touchscreen and or a display and network connections. The coupling of the set of processors and other components is typically through one or more busses and bridges also termed as bus controllers . The storage device and signals carrying the network traffic respectively represent one or more machine readable storage media and machine readable communication media. Thus the storage device of a given electronic device typically stores code and or data for execution on the set of one or more processors of that electronic device. Of course one or more parts of an embodiment of the invention may be implemented using different combinations of software firmware and or hardware. Throughout this detailed description for the purposes of explanation numerous specific details were set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the invention may be practiced without some of these specific details. In certain instances well known structures and functions were not described in elaborate detail in order to avoid obscuring the subject matter of the present invention. Accordingly the scope and spirit of the invention should be judged in terms of the claims which follow.

