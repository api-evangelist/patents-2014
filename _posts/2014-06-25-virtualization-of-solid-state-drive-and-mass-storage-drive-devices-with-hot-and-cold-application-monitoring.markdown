---

title: Virtualization of solid state drive and mass storage drive devices with hot and cold application monitoring
abstract: Systems and techniques relating to storage technologies include, according to an aspect, a data processing apparatus including: a processor; a controller coupled with the processor; a solid state drive coupled with the controller; and a mass storage drive coupled with the controller; wherein at least a portion of the solid state drive and the mass storage drive are virtualized as a single physical storage drive; wherein multiple applications stored in the virtualized single physical storage drive are configured to run on the processor; wherein one or more applications in a hot application group are stored in the solid state drive, and one or more applications in a cold application group are stored in the mass storage drive; and wherein each of the multiple applications is actively monitored and placed in either the hot application group or the cold application group.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164895&OS=09164895&RS=09164895
owner: Marvell World Trade Ltd.
number: 09164895
owner_city: St. Michael
owner_country: BB
publication_date: 20140625
---
This disclosure is a continuation application of and claims the benefit of priority to U.S. application Ser. No. 12 950 733 filed Nov. 19 2010 and entitled VIRTUALIZATION OF STORAGE DEVICES now U.S. Pat. No. 8 769 241 which claims the benefit of the priority of U.S. Provisional Application Ser. No. 61 266 924 filed on Dec. 4 2009 and entitled Hyper SSD which is incorporated herein by reference in its entirety.

Data processing systems such as computer systems can use one or more storage devices to store and retrieve information. Various examples of storage devices include solid state drives SSDs tape drives and disk drives such as hard disk drives HDDs and optical drives. A SSD can include non volatile memory such as flash memory. A storage device can store files such as operating system files and application files. A SSD may provide lower latency than a HDD whereas a HDD may provide a greater storage capacity than a SSD.

The present disclosure includes systems and techniques related to storage technologies including among other things virtual drives.

According to an aspect of the described systems and techniques a method for use with storage technologies includes operating drives including a solid state drive SSD and a disk drive where the SSD and the disk drive are virtualized as a single logical drive having a logical address space where the logical drive maps logical block addresses to the SSD and to the disk drive. The technique includes determining based on a file to be written to the logical drive a target logical address that corresponds to one of the SSD and the disk drive and writing the file to the logical drive at the target logical address to effect storage on one of the SSD and the disk drive. In some implementations operating drives includes operating a SSD and a mass storage device such as a tape drive. In some implementations operating drives includes operating a first drive that is faster than a second drive where the first drive has a smaller capacity than the second drive. Determining a target logical address can include using a characteristic of a file to select a target logical address. Determining the target logical address can include selecting one of the first address range and the second address range.

According to another aspect of the described systems and techniques a method for use with storage technologies includes operating drives including a SSD and a disk drive virtualizing the SSD and the disk drive to be a single logical drive with a logical address space where the logical drive maps logical block addresses to the SSD and to the disk drive selecting based on a characteristic of a file to be written to the logical drive a target logical address that corresponds to one of the SSD and the disk drive and writing the file to the logical drive at the target logical address to effect storage on one of the SSD and the disk drive. The method can virtualize the SSD and the disk drive to be a single logical drive with a logical address space of 0 to L where L is greater than 0. Virtualizing can include mapping logical block addresses of a first address range of the logical address space to the SSD and logical block addresses of a second different address range of the logical address space to the disk drive.

Implementations can include monitoring usage information of files associated with the logical drive. In some implementations the characteristic of the file is based on the usage information such as a relative usage frequency. Selecting the target logical address can include using the usage information to select one of the SSD and the disk drive. In some cases the file was previously stored on the disk drive. Selecting the target logical address can include selecting a target logical address that corresponds to the SSD. Writing the file to the logical drive can include moving the file from the disk drive to the SSD to decrease a read access latency of the file. In some cases the file is already stored on the SSD. Writing the file to the logical drive can include moving based on respective usage information the file stored on the SSD to the disk drive to increase available space on the SSD. Implementations can include monitoring usage information of files associated with the logical drive. Determining the target logical address can include using the usage information to select one of the SSD and the disk drive.

Implementations can include identifying a type of the file associated with the logical drive. The characteristic of the file can include the type. Selecting the target logical address can include selecting a target logical address that corresponds to the SSD based on a latency requirement of the type of file. Writing the file to the logical drive can include writing the file to the SSD.

Virtualizing the SSD and the disk drive can include mapping logical block addresses of a first address range from 0 to K to the SSD and logical block addresses of a second address range from K 1 to L to the disk drive where L is greater than K and K is greater than 0. Writing the file to the logical drive can include causing a controller to select based on the target logical address one of the SSD and the disk drive and write the file to the selected drive.

The described systems and techniques can be implemented in electronic circuitry computer hardware firmware software or in combinations of them such as the structural means disclosed in this specification and structural equivalents thereof. This can include at least one computer readable medium embodying a program operable to cause one or more data processing apparatus e.g. a signal processing device including a programmable processor to perform operations described. Thus program implementations can be realized from a disclosed method system or apparatus and apparatus implementations can be realized from a disclosed system computer readable medium or method. Similarly method implementations can be realized from a disclosed system computer readable medium or apparatus and system implementations can be realized from a disclosed method computer readable medium or apparatus.

For example one or more disclosed embodiments can be implemented in various systems and apparatus including but not limited to a special purpose data processing apparatus e.g. a wireless communication device such as a wireless access point a remote environment monitor a router a switch a computer system component a medium access unit a mobile data processing apparatus e.g. a wireless client a cellular telephone a smart phone a personal digital assistant PDA a mobile computer a digital camera a general purpose data processing apparatus such as a computer or combinations of these.

Systems and apparatuses can include a first interface to communicate with a SDD a second interface to communicate with a disk drive and processor electronics to communicate with the drives and map logical block addresses in a logical address space of 0 to L where L is greater than 0. The SSD and the disk drive can be virtualized as a single logical drive. In some implementations the processor electronics map logical block addresses of a first address range of the logical address space to the SSD and logical block addresses of a second different address range of the logical address space to the disk drive. In some implementations the processor electronics are configured to perform operations that include determining based on a file to be written to the logical drive a target logical address that corresponds to one of the SSD and the disk drive and writing the file to the logical drive at the target logical address to effect storage on one of the SSD and the disk drive.

These and other implementations can include one or more of the following features. Determining a target logical address can include using a characteristic of a file to select a target logical address. The operations can include monitoring usage information of files associated with the logical drive. In some implementations the characteristic of the file is based on the usage information. Selecting the target logical address can include using the usage information to select one of the SSD and the disk drive. In some cases the file is already stored on the disk drive. Selecting the target logical address can include selecting a target logical address that corresponds to the SSD. Writing the file to the logical drive can include moving the file from the disk drive to the SSD to decrease a read access latency of the file. In some cases the file is already stored on the SSD. Writing the file to the logical drive can include moving based on respective usage information the file stored on the SSD to the disk drive to increase available space on the SSD.

Implementations can include the action of identifying a type of the file associated with the logical drive. The characteristic of the file can include the type. Selecting the target logical address can include selecting a target logical address that corresponds to the SSD based on a latency requirement of the type of file. Writing the file to the logical drive can include writing the file to the SSD.

In some implementations the SSD is partitioned into extents wherein the virtualizing can include virtualizing an extent of the extents and the disk drive to be the single logical drive. In some implementations the first address range includes addresses from 0 to K and the second address range includes addresses from K 1 to L where L is greater than K and K is greater than 0.

In another aspect systems and apparatuses can include a SSD a disk drive and processor electronics to communicate with the drives and map logical block addresses in a logical address space of 0 to L. In some implementations the processor electronics map logical block addresses of a first address range to the SSD and logical block addresses of a second different address range to the disk drive. In some implementations the first address range includes addresses from 0 to K and the second address range includes addresses from K 1 to L where L is greater than K and K is greater than 0. Determining a target logical address can include selecting one of the first address range and the second address range.

Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages may be apparent from the description and drawings and from the claims.

This disclosure provides details and examples of virtual drive storage technologies. Described systems and techniques include mechanisms for virtualizing physical storage devices such as a disk drive and a SSD into a virtual drive. Described systems and techniques include mechanisms for moving files between physical drives of a virtual drive to optimize performance of the virtual drive. Using different types of physical drives can provide advantages such as increased access performance and increased storage.

Based on the mappings the mapping technique maps a logical block address onto one of multiple address ranges. The address ranges are respectively associated with physical drives . The mapping technique is not limited to two physical drives but can be applied to three or more physical drives or partitions thereof that are associated with a virtual drive. Various potential advantages of a virtual drive including a SSD and a disk drive as described can include faster boot up time faster read and write performance and increased storage capacity.

Various examples of physical interfaces between the processor and the controller include Peripheral Component Interconnect PCI PCI Express PCIe Serial Advanced Technology Attachment SATA Small Computer System Interface SCSI Serial Attached SCSI SAS Universal Serial Bus USB and interfaces for memory cards such as MultiMediaCards MMCs . Various examples of host software communication protocols include Advanced Host Controller Interface AHCI Non Volatile Memory Host Controller Interface NVMHCI Integrated Drive Electronics IDE and Intelligent Input Output I2O .

In some implementations a processor uses a mapping technique to control selection of a physical drive to store data to a logical drive. For example a virtualization process running on a processor can maintain the virtualization of the physical drives . An application running on the processor can write to a specific LBA. The virtualization process can transform the LBA into a transformed logical address. The virtualization process can issue a write command to the controller with the transformed logical address and an identification of the target physical drive . The processor can write files to the logical drive. In some cases writing a file to a logical drive includes rewriting the file to the logical drive at a different logical address via a move operation. In some implementations a processor performs a move operation that includes reading a file from one of the physical drives and writing the file to the other drive. In some implementations a move operation includes operating a controller to transfer one or more files between physical drives .

In some implementations the controller uses a mapping technique to control selection of a physical drive when processing a write command from a processor . For example a controller can maintain the virtualization of the physical drives . The controller can receive a write command produced by an application running on the processor . The write command can include a LBA and write data. The controller selects a physical drive based on the LBA included in the write command.

The disk filter driver can communicate with multiple drivers associated with different physical drives. The disk filter driver can communicate with a storage controller driver associated with a physical drive such as a HDD . The disk filter driver can communicate with another controller driver associated with a physical drive such as a SSD . For example the disk filter driver can communicate with a flash controller driver that is operable to interact with flash memory in a SSD .

In some implementations a bridge driver is communicatively coupled with the disk filter driver and the flash controller driver . In some implementations the bridge driver is operable to translate commands between the disk filter driver and the flash controller driver .

In some implementations the disk filter driver includes functionality to create a virtual drive. In some implementations the disk filter driver is aware of a controller that combines two or more drives into a virtual drive. In some implementations one or more drivers such as the OS file system driver are not aware of drives that are virtual and treat such drives as physical drives.

At the process virtualizes the SSD and the HDD to be a single logical drive with a logical address space of 0 to L. In some implementations the process can make the SSD and the HDD appear as a single drive to an operating system. In some implementations a controller can virtualize physical drives. Virtualization can happen each time a controller and a host system are powered up. In some implementations virtualization includes accessing a configuration file that specifies physical drive mappings for a virtual drive during an initialization process after power is turned on.

At the process determines based on a file to be written to the logical drive a target logical address that corresponds to one of the SSD and the HDD. Determining a target logical address can include selecting a target logical address logical within the logical address space of the logical drive based on a characteristic of the file. For example an operating system can write a file to a logical drive. The process can identify a characteristic of a file such as a file type or file usage. The process can select a target logical address based on the type such that the file will be written to the SSD. Alternatively the process selects a different target logical address such that the file will be written to the HDD. In some implementations a target logical address includes a logical block address. In some implementations determining a target logical address can include translating a logical address within the logical address space of the logical drive to a logical address within the logical address space of one of the SSD and HDD.

At the process writes the file to the logical drive at the target logical address to effect storage on one of the SSD and the HDD. In some cases writing the file at can include moving the file from the SSD to the HDD or vice versa. In some implementations the target logical address is based on the logical address space of one of the SSD and HDD. In some implementations the target logical address is based on the logical address space of the virtual drive.

In some implementations an operating system s file system driver does not permit external selection of a target logical address. In such implementations the process can allow the operating system to write to a target logical address that the operating system selects. After an initial write by the operating system the process at can select a different target logical address based on a characteristic of a file. For example if the initial target logical address corresponds to the HDD then the process can select a target logical address that corresponds to the SSD. The process at writes the file to the logical drive to move the file to the new target logical address. An operating system may assign logical addresses e.g. logical block addresses from lower address values to higher address values. Therefore it may be advantageous to map a SSD of a virtual drive to be at a lower address range than a HDD of the virtual drive such that the initial location of files will be on the SSD as space permits. To manage space on the SSD a process can move less frequently used files from the SSD to the HDD.

In some implementations an operating system provides an application programming interface API to move files that have been already written to a drive. For example a storage process can use such an API to move files after an initial write to a drive. In some implementations an operation system can provide an API to control selection of target logical addresses for an initial write of a file to a drive.

At the process selects a target logical address that corresponds to one of the physical drives. The process selects a target logical address based on a characteristic of a file to be written to the logical drive. In some implementations selecting a target logical address includes selecting a target logical address to move a file from one of the physical drives to the other.

At the process causes a controller to select based on the target logical address one of the physical drives. Causing a controller to select can include sending a write command to a controller where the write command includes the target logical address. In some implementations the process includes a driver identifier in the write command. For example the controller can select a drive based on a drive identifier in a write command. In some implementations a portion of the target logical address e.g. the most significant bit of the target logical address acts as a drive identifier. In some implementations the process converts the target logical address into an address that is compatible with an address range associated with the drive. At the process causes the controller to write the file to the selected physical drive. In some implementations sending a write command to a controller can cause the controller to select one of the physical drives and to write a file to the selected physical drive.

At the process selects a target logical address that corresponds to the HDD. Selecting such a target logical address can include using a mapping table that identifies one or more address ranges and one or more physical drives respectively. At the process moves based on the selected target logical address the file from the SSD to the HDD to increase available space on the SSD. Moving a file can include reading the file from the SSD writing the file to the HDD and deleting the file from the SSD. Deleting a file can include marking the file as deleted without requiring an erasure of the file.

At the process selects based on a type of a file to be written to the logical drive a target logical address that corresponds to one of the SSD and the HDD. At the process writes the file to the logical drive at the target logical address to effect storage on one of the SSD and the HDD. In some implementations the process includes moving the file from the SSD to the HDD or from the HDD to the SSD. Moving the file can include the selecting at and the writing at .

A host system can run a hyper drive utility to interact with one or more virtual drives e.g. hyper drives. In some implementations a hyper drive utility can partition a non volatile memory into one or more extents. A hyper drive utility can virtualize a non volatile memory extent and a HDD as a single disk. A hyper drive utility can run as a background process. In some implementations such a utility is included as part of a file system driver.

A hyper drive utility can optimize the storage of files on a hyper drive. The hyper drive utility can place hot e.g. frequently used applications into a hyper extent which resides in a SSD that includes non volatile memory. For example the utility can move an executable application file to a hyper extent. The utility can move cold e.g. rarely used applications from the hyper extent to a HDD extent. For example if an application is not used for a period of time the utility can move files associated with the application from the hyper extent to the HDD extent.

In some implementations a hyper drive utility can identify files to assign to the hyper extent based on one or more characteristics such as file type file usage or both. The utility can cause storage on the hyper extent of operating system files such as a page file or a swap file. The utility can cause storage on the hyper extent of startup application files. The utility can cause the storage of files associated with frequently used applications on the hyper extent. If there is an update of a hot application the utility can move the update to the hyper extent. In some implementations the utility accesses a list of pre defined file types to determine whether to store a file on the hyper extent.

A virtual drive address space such as a hyper drive address space can include the range LBA 0 LBA N being assigned to a SSD and the range LBA N 1 MAX LBA being assigned to a HDD. MAX LBA represents the maximum LBA value associated with the hyper drive address space. In some implementations an operating system is operable to write files starting at the beginning of an address space. If the operating system is agnostic to the physical drive layout of a hyper drive then a hyper drive utility can move files between the physical drives to optimize performance of the hyper drive. Moving files between drives can include reading data of the file using a new LBA to be associated with the file and writing file data to the new LBA. In some implementations the utility can cause the operating system to have pre defined LBA ranges for one or more types of files. Such pre defined ranges can correspond to a SSD of a hyper drive. In some implementations hyper drive address space can include the range LBA 0 LBA N being assigned to a HDD and the range LBA N 1 MAX LBA being assigned to a SSD.

A few embodiments have been described in detail above and various modifications are possible. The disclosed subject matter including the functional operations described in this specification can be implemented in electronic circuitry computer hardware firmware software or in combinations of them such as the structural means disclosed in this specification and structural equivalents thereof including potentially a program operable to cause one or more data processing apparatus to perform the operations described such as a program encoded in a computer readable medium which can be a memory device a storage device a machine readable storage substrate or other physical machine readable medium or a combination of one or more of them .

The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them.

A program also known as a computer program software software application script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

While this specification contains many specifics these should not be construed as limitations on the scope of what may be claimed but rather as descriptions of features that may be specific to particular embodiments. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments.

