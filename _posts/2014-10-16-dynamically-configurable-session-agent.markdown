---

title: Dynamically configurable session agent
abstract: A monitoring system captures the behavior of distributed applications and also provides a framework for augmenting functionality of the application in response to user interactions and different states of the application and network. Network events exchanged between an application and an application server are captured and the local client events on the client device are also selectively captured. The different disparate network events and client events are then combined together during a replay operation to simulate the user experience during the previous application session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09207955&OS=09207955&RS=09207955
owner: International Business Machines Corporation
number: 09207955
owner_city: Armonk
owner_country: US
publication_date: 20141016
---
The present application is a divisional patent application of U.S. patent application Ser. No. 13 972 776 filed on Aug. 21 2013 which issued on Nov. 25 2014 as U.S. Pat. No. 8 898 275 which is a divisional patent application of U.S. patent application Ser. No. 12 904 356 filed on Oct. 14 2010 which issued on Nov. 12 2013 as U.S. Pat. No. 8 583 772 which claims priority to U.S. Provisional Patent Application Ser. No. 61 332 498 filed on May 7 2010 and is also a continuation in part of U.S. patent application Ser. No. 12 191 585 filed Aug. 14 2008 which issued on Feb. 3 2015 as U.S. Pat. No. 8 949 406 which are all herein incorporated by reference in their entirety.

This application incorporates by reference in their entirety U.S. patent application Ser. No. 11 616 616 filed Dec. 27 2006 and U.S. patent application Ser. No. 12 049 245 filed Mar. 14 2008.

Intelligent networked devices like smart phones present new challenges when trying to understand end user experiences and application behavior. The intelligent devices use a new class of applications that leverage distributed code local databases and intermittent network communications. The use of these applications on intelligent phones and the use of fat applications on personal computers have caused an explosion in application complexity.

The majority of occasional use applications previously leveraged web browser technology. The web browser was responsible for rendering content and allowing end user interactivity. However the new distributed applications are downloaded and installed on demand instead of being dynamically referenced by Universal Resource Language URL calls from a web browser.

The data and state in distributed applications is persistent on the client and network connectivity varies based on mode and location. Because these types of applications are not driven through a browser the rendering painting displays etc. on the screen of the device are often performed by proprietary code in the application that is not readily viewable by monitoring devices.

Monitoring systems are used for monitoring and understanding user experiences during web sessions. The monitoring systems typically use extensive application instrumentation that logs key user session events or actions and logs the metadata performance etc of the events. This style of logging might be performed by a client device the server or both. However there are significant challenges bringing together dispersed log files from the client device and the server. The challenges from a physics perspective include moving the different log files into one repository and the challenge from a replay perspective to includes accurately stitching together a user experience from the log files obtained across multiple tiers.

Correctly evaluating a user experience during an application session depends on understanding what the user actually saw on the screen and what actions the user took while particular information was displayed on the screen. Correlating and collecting the different pieces of data associated with the application session still may not clearly illustrate all of the issues associated with the user experience. Distributed applications increase the difficulty of accurately monitoring and understanding web sessions since there is less access to the internal workings of the application software. Distributed applications are also often loaded on handheld wireless devices that have limited processing capabilities.

A monitoring system captures the behavior of distributed applications running on mobile devices personal digital assistants smart phones or any other personal computers or computing devices. The monitoring system also provides a framework for augmenting functionality of the application in response to user interactions and different states of the application and network.

Client events may include but are not limited to data entered into forms displayed on the client device mouse clicks keyboard entries screen scans or any other events generated locally by the application or the user. Network events include the communications exchanged between the application running on the client and an application server on the web server device. The disparate client and network events are captured and combined together during a replay operation to simulate the user experience during the previous application session.

The captured client events include bitmaps of screen images displayed on the client device. The screen images are selectively scanned logged and selectively sent to an archive location. Completed full screen images can be captured or partial selected portions of screen images can also be captured. Partial screenshots can then be overlaid on full screenshots or merged with other partial screenshots using techniques such as tiling.

Capturing an image displayed on the client device scanned bitmap may provide valuable information. However the scanned image by itself may have limited value. For example scanned screen images generally cannot be searched for particular information such as different fields and cannot be drilled down to identify information contained or associated with a particular field. The monitoring system uses special reference identifiers to link together the scanned screen images and the other disparate pieces of data that are to captured during the same application session. The reference identifiers allow the scanned image data to be integrated with other captured events to provide a better understanding of the application session.

The monitoring system may also selectively capture the different client events and network events according to feedback instructions from an application session monitor. Based on previously captured data the session monitor may send feedback instructions for performing different operations. For example the feedback instructions may cause the session agent to drill down and capture specific application states or client events that may not have been normally anticipated or detectable. The feedback instructions can also be used for providing support and incentives during the application sessions. Other operations may include but are not limited to selective test marketing testing solicitations user feedback surveys etc.

The application can be any software and or hardware that operates on the client . For example the application could communicate with a remote server for purchasing items playing video games digital navigation checking stock quotes checking the weather searching the Internet etc. These of course are just examples of any application that may be operated by the client . The client may operate a local database and other local buffers that contain contact information Global Positioning System GPS data and any other data that may be used in conjunction with application . Of course the types of data stored in database and local buffers is almost limitless.

A web server device operates an application server that communicates with application on client . The application server stores data associated with the application in a database . In one example mentioned above the application server identifies items that are selected and purchased by a user via application . The database stores the product information inventory information and the user purchase and credit card information accessed by application server .

In the navigation example the application requests electronic map data from the application server . The application server accesses map data in database and sends the map data to the navigation application on client . The navigation application may store some or all of the received map data in local database or local buffers . These are just examples and any type of electronic communication or data can be exchanged between the application and application server .

The application can communicate with the application server over a wired or wireless connection . For example the connection may be a wired or wireless Internet connection or a wired or wireless telephone connection. In one example the application accesses the application server using the HyperText Transport Protocol HTTP or HTTP over Secure Sockets Layer SSL HTTPS .

An application session monitor monitors and captures network events that are exchanged between the application and the application server during the application session. For example the network events can include requests from the application for product information and the responses back from the application server that contain the to requested product information. The application session monitor may be located on the same web server that operates the application server or may be located on a different server device located either at the same web site as the web server or located at a different intermediate web site location.

A session agent operates locally on the client in conjunction with the application to monitor and capture local client events that may not necessarily be transmitted over the network connection between the application and application server . For example the application may include logic that generates an error message whenever a user enters the wrong information into a particular field. The error message may be displayed locally on a client screen but never sent back to the application server . The client events could include a scanned screen image from client that displays the error message. The client events can also include cursor movements mouse click operations keyboard entries screen scans or any other data generated locally on the client .

Applications that run on web browsers typically transfer web pages from a web server to different remote clients. Other data from the web session is then exchanged through the HTML in the web pages transferred between the web browser and the web server. Thus much of information from a browser based web session can be captured relatively easily. However distributed application does not necessarily operate with web browsers. Also many of the different states operations and data generated by application during an application session may not necessarily involve communications with application server .

The application may also access different data sources other than application server . For example the application may access the local database or local buffers in the client for information. Further the data generated during the application session may not use a textual format such as HTML and may be encoded or encrypted. Thus the primary data sources for capturing a browser web session namely web pages and the textual to data transferred between a web browser and a web server may not exist in application sessions for application .

One possible solution to the reduced transparency of application sessions would be to increase the amount of data captured locally on the client by the session agent . However the session agent would then require more processing bandwidth and memory in the client and could slow down the application . This is an even larger problem when the client is a portable wireless device that has limited processing memory capacity.

To address these issues an application session monitor dynamically adjusts what data is captured by the session agent according to particular application session states. For example based on the captured network events the session monitor may determine that a user is having trouble completing an order for purchasing a product selected through an ecommerce application . The session monitor may send back feedback instructions that cause the session agent to only capture the local client events associated with the final ordering stage of the on line transaction. The feedback instructions cause the session agent to only capture the client events relevant in identifying the cause of the user problem. Based on the captured client events the session monitor may send other feedback instructions that cause the session agent to capture additional client events that further drill down into the state of the application session where the user is currently having problems.

In another embodiment the session agent may continuously capture and store client events in local buffers . If a particular web session state is identified in the network events the application session monitor sends feedback instructions directing the session agent to send the client events previously captured in local buffers . The session agent may continuously keep a few minutes of historic data for the web session in local buffers . If there are no feedback instructions requesting the historical web session data the session agent can automatically delete the data in local buffers and start storing the client events for a next few minutes of the web session.

The session monitor may also determine what applications or application sessions to capture based on a particular user geographic zone where the application session is in operation IP address used in the application session client prior application states of the application session etc. For example particular users may frequently experience problems with application . The session monitor determines when particular users are operating the application based on their login information and send feedback instructions to the session agent to capture client events only for those identified users.

The session monitor in operation determines what particular set of states of the application session should be captured based again on preconfigured criteria or based dynamically on a particular sequence of actions or client events and or network events . Many of the application states may be of no interest or may not be related to problems identified by the session monitor . Accordingly the session monitor may send feedback instructions that direct the session agent to only capture client events for those particular application states.

For example the session monitor may direct the session agent to capture the subsequent client events and states of the application session after a user has electronically selected shopping cart items that have a total price of over 100 dollars. In another example an error message may be generated during a particular state of the application session. If no other error messages are generated during the application session the session monitor may send feedback instructions that direct the session agent to capture the events in the application state associated with the identified error message. For example the feedback instructions may direct the session agent to only capture or provide the previously captured client events associated with the state that generated the error message.

In operation the session monitor determines the length of the capture operation based on size time state etc. For example the session monitor may direct the session agent to capture client events until a particular amount of data is captured. In another example the same network events may be repeatedly sent from application to application server . This could indicate a possible error condition or a confused user. The session monitor may generate feedback instructions instructing the session agent to start capturing client events only during that particular error condition. In another example the network events may contain error messages sent by the application every three minutes. The application session monitor may send feedback instructions to capture the client events for one or two time periods of 3 6 minutes. This would allow the session agent to capture just enough information to identify the source of the error messages without having to capture additional client events or states.

In operation the application session monitor sends the feedback instructions to session agent . Client events and network events are captured by the session agent responsive to the feedback instructions . The captured events are then forwarded to the session monitor and or to an application session archive. The process might be repeated where the session monitor sends additional feedback instructions based on the client events captured responsive to the previously sent feedback instructions.

The feedback instructions provide the advantage that the session agent only has to capture buffer and send client events for selected portions of an application session. The session agent uses less storage and processing bandwidth in the client device and is therefore less likely to slow down the application .

The application displays an image on a screen of the client . The displayed image includes a field A for entering a user name and a field B for entering a credit card number. A user enters information into fields A and B and selects clicks an enter field C that causes the information entered into fields A and B to be sent back as a request A to the application server operating on web server .

The session agent and or the network capture element receive feedback instructions from the session monitor . As described above the feedback instructions identify any application state or any particular client event network event or any other data item for capturing. The feedback instructions may also direct the session agent and network capture element to send back buffered events from a previous state of the application session that happened earlier in time.

For example the session agent or network capture element may have been programmed or directed via feedback instructions to continuously scan the screen images and capture associated client events and network events . The captured events may be temporarily stored in the local database or local buffers in the client shown in . The session agent and network capture element may not transfer the captured events to the session monitor or to a session archive unless directed by feedback instructions .

The different screen displays and other client events occurring during the application session might not be displayed by a web browser on a web page. Therefore the screen image data may need to be captured with a screen scan that captures the displayed screen bit map. However these screen scans are not typically in a format that can be searched and typically do not contain information that associates the scanned screen image with a particular application session. Thus the client events screen images and network events generated during an application session may be disparate pieces of information that are not normally associated with a common application session. This is contrary to HTML web pages that use a common format that is typically easy to search and often contains information that associates the web page with a particular web session.

In order to capture archive and replay the application session the session agent and network capture element generate unique identifiers that associate these disparate pieces of information with a same application session. The network events often have searchable data that can be associated with a particular application session. For example the network events can identify a particular user a particular application a particular start and stop of the application session etc. Other less correlated events such as mouse movements to keyboard entries and screen scans are linked to the network events by session identifiers and time stamp or ordering values so that these disparate events from the application session can be combined and synchronized in a replay session.

Referring to the session agent and or network capture element receive feedback instructions from the session monitor in operation . The session agent and network capture element in operation determines if the events associated with the feedback instructions have been previously captured in associated buffers. If not any previously captured events contained in the buffers of client and network capture element may be cleared in operation .

If the events are not captured in buffers the session agent in operation captures the bitmaps for the screen images or portions of screen images associated with the feedback instructions if any. Any other client events associated with the feedback instructions are captured by the session agent in operation and any network events associated with the feedback instructions are captured by the network capture element in operation .

The session agent may be compiled along with the application . Therefore the session agent can monitor the operations of the application and discover the identifiers and x y pixel locations of fields A B and C displayed on screen . The feedback instructions may then simply contain the identifier for a particular field which would then cause the session agent to scan the x y pixel locations associated with the field identifier. The session agent could also store portions of previously scanned images according to their field identifiers and a time stamp. The feedback instructions could then request particular portions of previously displayed screen images according to the associated field identifier and time stamp.

The session agent and network capture element assign time stamps or a particular ordering to the captured screen images A as well as other captured client events B and captured network events . For example the session agent may use a reference counter or timer that assigns time stamp or sequencing values to the client events in the order or at the time the events are captured. The time stamps or sequencing provide a time line that can then be used during a replay session to replay the application session.

In operation the session agent and network capture element assign common identifiers to all of the captured client events and captured network events respectively associated with the feedback instructions . The feedback instructions then use the unique identifier assigned by the session agent and network capture element to reference particular application sessions or states within the application sessions.

At some later time a replay system may replay the captured events and having the same identifier . For example the first captured event associated with a particular identifier may be the captured screen scan A. The replay system re renders the bit map of the captured screen image. The next time stamp or sequence number may be for a second partial screen scan of field A in that captures characters entered into field A. Accordingly the replay system next displays the partial screen scan B entered into field A.

Thus different disparate data is captured during the application session. The data is assigned a common identifier ordering and then synchronized and interlaced together during a replay operation to discover what events actually took place during the previous application session. By interlacing the captured screen data on a timeline with other client events and network events the session steps screens of the application session become searchable and discoverable.

The client events and network events could also be sent either to the application session monitor or directly to the session analyzer . However for simplicity the client events and network events will be described as being sent to and received by the session monitor . If additional analysis was required the application session monitor could forward any received captured events to the session analyzer . Any analysis of the client events and network events could be performed by either the session monitor or the session analyzer . However for simplicity the session analyzer will be described as creating and analyzing user profiles .

The feedback instructions sent to the session agent may be based on user profiles . The user profiles are generated by the session analyzer according to the client events and network events captured during application sessions. describes one example where user incentives are sent to the session agent based on the user profiles . Of course any variety of different feedback instructions may be initiated based on any variety of different derived user profiles .

Referring to the application session monitor identifies a user entering or browsing a web site. For example the session monitor monitors the network events sent back and forth between the application on client and the application to server in web server . The user can be identified from login information required for entering the web site or from IP address or cookie information contained in the HTTP data in network events .

The session monitor determines if user profiling is enabled in operation . An administrator may configure the session monitor to conduct user profiling for all users a particular random set of users for a particular time period or for any users that reach a particular application state. Other criteria could also be configured into the session monitor for performing user profiling.

User profiling could also be dynamically initiated based on a particular state of the application session or based on a particular user action. For example user profiling may be enabled whenever a user enters a product purchasing stage in the application session. The product purchasing stage can be identified by the session monitor when the application requests purchasing transaction information from application server or when the application server sends the purchasing transaction information back to the application .

If user profiling is enabled the session monitor starts monitoring user browsing selection and or ordering activities in operation . For example the session monitor may detect what items the user views during the application session what items have been selected for purchase when credit card information is entered into field B when the enter button C is selected or when the purchases are completed etc. Other information may also be monitored such as how much time the user spends selecting different items what items are initially selected and then unselected number of aborted purchases etc.

The session analyzer in operation creates or updates any previously created user profile . shows the server operating the session analyzer and storing captured client events captured network events and user profile . However as explained above any of the profiling operations and associated profiling data can be to performed and stored in the web server or any other server or computing device connected to network .

In this example the user profile is used for making a decision whether or not to send an incentive to the user. The user profile may track the number of times a particular user accessed the application or selected items for purchasing but then aborted the application session before completing the purchase by clicking on enter button C. Any other types of profile information can also be tracked. For example the user profile may track the number of times a user reentered information into a particular field A or B. This may indicate a user or application error condition.

The session monitor can use any of the dynamically monitored events described above for generating the user profile . For example the session agent may initially not capture any user events . The session monitor may only capture the network events for particular data sent from the application such as data indicating the user selected a product. The session monitor may then send feedback instructions to the session agent to start capturing additional user events or send back previously buffered user events related to the selection and purchasing of the product. For example the feedback instructions may instruct the session agent to send back cursor movements keyboard entries and or scan images displayed on screen of the client . These additional client events can then be used to create or supplement the user profile .

The session analyzer in operation determines if the monitored user events and network events exceed any profile thresholds. For example the user profile may indicate that the user selected items on three different occasions and never purchased any of the selected items. After three aborted purchases the session analyzer in operation may send a feedback instruction directing the session agent to incentivize the user to complete a purchase. For example the session analyzer may send an electronic 20 off coupon to the session agent . The session agent displays the electronic coupon when the user starts selecting items for a fourth time. The electronic coupon may notify the user that the purchase price will be reduced by 20 if the purchase is completed in the next 10 minutes. This incentive hopefully motivates the user to finally complete an on line purchase.

Web sites often display electronic coupons on web pages for on line purchasers. However the electronic coupons are not dynamically sent to different users according to their particular user profiles as described above.

In operation the session monitor determines if additional profiling is required. If so additional user browsing selection and ordering activities are monitored in operation . For example the session monitor can determine if the electronic coupon resulted in the user purchasing a product. If there was no resulting purchase the session analyzer in operation may send another incentive to the user such as a 25 off electronic coupon. If no additional profiling is needed in operation the session monitor returns to operation for analyzing another application session.

This is just one example of almost limitless types of incentives or messages that may be sent to the user. In another embodiment the feedback instructions could provide on line help information to the user for navigating through a web session. For example the captured client events and or captured network events may indicate a user is having trouble filling in the fields A and B in screen image . Specifically the network events may indicate that the credit card information entered into field B is repeatedly incorrect or rejected by the application server . The session monitor may send feedback instructions that direct the session agent to display a help message or on line chat window in screen image . The feedback instructions could also contain the help message that is then displayed in the screen image by the session agent .

The feedback instructions could also direct the session agent to send previously captured client events and send any subsequent client events to session monitor . The session analyzer could then determine if the credit card use was fraudulent.

The session agent initially provides a generic capture skeleton that can be dynamically configurable to monitor a variety of user events for a variety of different applications. Monitoring configuration files can be loaded into the client along with the generic session agent . The monitoring configuration files can contain code or parameters that determine what application sessions and what information from the application sessions are monitored captured buffered and or forwarded to the session monitor .

Multiple configuration files are shown in for illustrative purposes. However some or all of the configuration information or code could be stored in the same configuration file. The parameters and code in the configuration files can be downloaded along with the session agent or can be dynamically loaded and updated by the session monitor via the feedback instructions . This prevents having to customize each session agent to a particular application . This also allows the session agent to be initially loaded into the client with little or no monitoring and capture functionality and to with little or no significant impact on the performance of the application .

An application session state configuration file identifies which application sessions and application session states to monitor if any. The session agent may remain in a generic non capture mode until a particular web session is identified that matches one of the identified applications in configuration file . The configuration file can also be configured via the feedback instructions to control what application states in an application session are captured. For example the configuration file may direct the session agent to capture user events during the product purchase stage of an ecommerce application used for purchasing clothes.

A client event configuration file identifies specific client events that should be captured by the agent . For example the configuration file may direct the session agent to capture all mouse and keyboard entries. In another example the configuration file may direct the session agent to capture data entered into a particular field such as field A B and or C in . A help incentive configuration file directs the session agent to perform help or incentives operations for particular states of particular application sessions as discussed above.

A screen capture configuration file identifies what screen images to capture what portions of the screen image to capture and how often the screen image should be captured. A data buffering configuration file indicates what data in the application session to buffer in data base or buffers and for how long. For example the configuration file may direct the session agent to continue to buffer client events for the last minute of the application session. This allows the session monitor to send feedback instruction that may request information from a previous application session state. A data forwarding configuration file indicates what data to forward to the session monitor . For example the configuration file may direct the session agent to only to forward client events to session monitor that have a particular value or that happen during a particular application session state.

The session agent in operation sends any captured or buffered client events to the session monitor according to the configuration files . For example the configuration files may direct the session agent to periodically capture certain client events and scan certain screen images and then store the captured events and screen images in the local client database in . The configuration files may also direct the session agent to send some or all of the captured events and screen images to the session monitor when a specific state of the application session is identified.

The session agent monitors for additional feedback instructions from the session monitor in operation . The feedback instructions may direct the session agent in operation to update configuration parameters or code in configuration files . Feedback instructions dynamically enable disable add remove or change the to parameters or code in configuration files that determine how the session agent captures client events according to monitored application session states. If enabled the session agent in operation continues monitoring capture and buffering user events according to the updated configuration files in operation . The session agent in operation also sends any captured or previously buffered data to the session monitor according to the updated configuration files .

The application session monitor in operation identifies a conversion rate for one or more application sessions based on the network events . For example the session monitor may determine the percentage of particular application sessions that result in the purchase of a product. The session monitor identifies the number of application sessions opened by different users and then through purchase confirmation messages sent in the network events determines the number of those application sessions that result in a product purchase.

The percentage of purchases may be within a first low range in operation indicating a relatively small percentage of application sessions resulted in product purchases. The session monitor in operation may send feedback instructions to the session agent to increase the amount of monitoring client event capture support and or incentives. For example the session monitor may send feedback instructions that enable or increase the types or amount of client events that are captured during the web session.

As described above the session monitor in operation could also send feedback instructions that direct the session agent to provide more on line support or incentives such as electronic coupons to the users during the application sessions. The session monitor in operation could also increase the percentage or number of session agents that are enabled or loaded into clients along with applications . For example initially 10 of applications may be enabled or loaded with session agents . The session monitor may increase the number of session agents or number of enabled session agents to 15 if the conversion rate is below some threshold in operation .

If the conversation rate increases in operation the session monitor may continue to increase monitoring capture support and or incentives provided by the session agents or may increase the number of enabled or loaded session agents. For example the session monitor may identify a conversion rate increase after the session agents start capturing client events for a product checkout page of the application session and then automatically open on line help sessions whenever it appears the user is delaying or having trouble completing the on line purchase.

If the conversion rate did not increase in operation the session monitor in operation may send feedback instructions that reduce the number of enabled session agents or reduce the amount of monitoring capture support and or incentives provided by the session agents . If the conversion rate increases in operation the session monitor may send additional instructions to the session agents to further reduce the amount of enabled session agents or reduce the amount of monitoring capture support incentives etc. provided by the session agents . The session monitor may continue to reduce the types to of monitoring or change the types of monitoring support or incentives until the conversion rate stabilizes or increases.

Some conversion rates may increase with more monitoring and support and other conversion rates may decrease with more monitoring and support. For example a particular level of monitoring and client event capture may slow down the application session and cause a user to lose interest and abort the application session. The session monitor not only tracks the impact of the session agents and their application session monitoring on application conversion rates but can also dynamically modify the types and amount of monitoring event capture support and incentives to increase the conversion rate.

As discussed above different information can be monitored and includes the server side network activity associated with network events . The session agent can be implemented with Application Programming Interface API subsystem and programmed to send additional information such as keyboard entries mouse movements and screen shots bitmaps back to the application session monitor or application session archive . The client events can be diagnostic or analytic in nature. Some of the client events can be automated and are the logical equivalent of DOM events for various Software Developer Kits SDK s . The server side activity associated with network events is correlated with the instrumented events and screen shots captured locally on the client and allow for real time eventing searching drill down and replay.

As also explained above the client side monitoring and capture of the instrumented events and screen shots can be controlled using server side feedback instructions . For example during load time of the application the client session agent can contact the application session monitor and query what operations to perform and what events to capture. The session monitor can turn on off client side monitoring and capture or can vary what actions are taken or what events are monitored or captured by the session agent on a per user basis or a per page action basis.

One goal of this monitoring strategy is to do the monitoring capture and any other operations with the least possible impact on the application . However communication bandwidth and storage are limited on the client . The storage constraint is relatively static with generally a predetermined amount of memory and .

The communication bandwidth limitations can change based on phone location good signal bad signal and whether of not an alternative transport such as a WI FI connection is available. In addition communication bandwidth may incur additional cost. For example client may be a smart phone that operates under a purchased data plan.

As explained above the session agent may selectively or continuously capture and store client events in local buffer of the client device . As network events are captured a score of activity can be generated. In one embodiment this is done out of band through passive monitoring of the HTTP stream containing network events . If the score merits attention the session monitor directs the session agent to either send the contents of the buffer delete the contents of the buffer or if possible maintain the contents of buffer for a longer period of time.

The score decision as to whether or not to send the contents of buffer can be influenced by the particular type and speed of connection currently established with client . For example if the client is currently operating on a relatively slow wireless cell phone connection session monitor may send feedback instructions directing the session agent to either delete the contents of the buffer try and maintain the contents of the buffer until a higher connection bit rate is established. On the other hand if the client is currently communicating over to a relatively high hit rate WI FI connection the session monitor may send feedback instructions to the session agent to transmit the data in buffer either to web server or session archive . Transmitting captured data from the client based on the type or speed of the network connection reduces the likelihood of the monitoring system slowing down the application and application session running on client .

Several examples have been described above with reference to the accompanying drawings. Various other examples are also possible and practical. The systems and methodologies may be implemented or applied in many different forms and should not be construed as being limited to the examples set forth above. Some systems described above may use dedicated processor systems micro controllers programmable logic devices or microprocessors that perform some or all of the operations. Some of the operations described above may be implemented in software or firmware and other operations may be to implemented in hardware.

For the sake of convenience the operations are described as various interconnected functional blocks or distinct software modules. This is not necessary however and there may be cases where these functional blocks or modules are equivalently aggregated into a single logic device program or operation with unclear boundaries. In any event the functional blocks and software modules or features of the flexible interface can be implemented by themselves or in combination with other operations in either hardware or software.

As explained above embodiments of this disclosure may be implemented in a digital computing system for example a CPU or similar processor. More specifically the term digital computing system can mean any system that includes at least one digital processor and associated memory wherein the digital processor can execute instructions or code stored in that memory. The memory may store data as well. 

A digital processor includes but is not limited to a microprocessor multi core processor Digital Signal Processor DSP Graphics Processing Unit GPU processor array network processor etc. A digital processor or many of them may be embedded into an integrated circuit. In other arrangements one or more processors may be deployed on a circuit board motherboard daughter board rack blade etc. . Embodiments of the present disclosure may be variously implemented in a variety of systems such as those just mentioned and others that may be developed in the future. In a presently preferred embodiment the disclosed methods may be implemented in software stored in memory further defined below.

Digital memory further explained below may be integrated together with a processor for example Random Access Memory RAM or FLASH memory embedded in an integrated circuit Central Processing Unit CPU network processor or the like. In other examples the memory comprises a physically separate device such as an external disk drive storage array or portable FLASH device. In such cases the memory becomes associated with the digital processor when the two are operatively coupled together or in communication with each other for example by an I O port network connection etc. such that the processor can read a file stored on the memory. Associated memory may be read only by design ROM or by virtue of permission settings or not. Other examples include but are not limited to WORM EPROM EEPROM FLASH etc. Those technologies often are implemented in solid state semiconductor devices. Other memories may comprise moving parts such a conventional rotating disk drive. All such memories are machine to readable in that they are readable by a compatible digital processor. Many interfaces and protocols for data transfers data here includes software between processors and memory are well known standardized and documented elsewhere so they are not enumerated here.

As noted some embodiments may be implemented or embodied in computer software also known as a computer program or code we use these terms interchangeably . Programs or code are most useful when stored in a digital memory that can be read by one or more digital processors. The term computer readable storage medium or alternatively machine readable storage medium includes all of the foregoing types of memory as well as new technologies that may arise in the future as long as they are capable of storing digital information in the nature of a computer program or other data at least temporarily in such a manner that the stored information can be read by an appropriate digital processor. The term computer readable is not intended to limit the phrase to the historical usage of computer to imply a complete mainframe mini computer desktop or even laptop computer. Rather the term refers to a storage medium readable by a digital processor or any digital computing system as broadly defined above. Such media may be any available media that is locally and or remotely accessible by a computer or processor and it includes both volatile and non volatile media removable and non removable media embedded or discrete.

Having described and illustrated a particular example system it should be apparent that other systems may be modified in arrangement and detail without departing from the principles described above. Claim is made to all modifications and variations coming within the spirit and scope of the following claims.

