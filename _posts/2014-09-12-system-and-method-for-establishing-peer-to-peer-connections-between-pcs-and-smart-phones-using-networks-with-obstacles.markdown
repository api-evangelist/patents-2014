---

title: System and method for establishing peer to peer connections between PCS and smart phones using networks with obstacles
abstract: A method of circumventing network obstacles to provide a peer-to-peer communication channel between peers utilizing hypertext transfer protocol (HTTP) includes communicating a HTTP request from a peer device to a relay through a network including an obstacle where the HTTP request is intended for another peer device. The method further includes communicating a HTTP response from the relay to the peer device and establishing a communication channel between the peer device and the another peer device via the relay. The communication channel permits the peer device and the another peer device to send and receive data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09258362&OS=09258362&RS=09258362
owner: Core Wireless Licensing S.A.R.L.
number: 09258362
owner_city: Luxembourg
owner_country: LU
publication_date: 20140912
---
This application is a continuation of U.S. patent application Ser. No. 11 158 710 filed on Jun. 22 2005. U.S. patent application Ser. No. 11 158 710 is incorporated herein by reference.

The present invention relates generally to firewalls and peer to peer connections. More specifically the present invention relates to a system and method for establishing peer to peer P2P connections between PCS and smart phones or other devices including personal computers over a network that obstructs the straightforward establishment of such P2P connections using means such as firewalls and network address translation NAT servers.

This section is intended to provide a background or context. The description herein may include concepts that could be pursued but are not necessarily ones that have been previously conceived or pursued. Therefore unless otherwise indicated herein what is described in this section is not prior art to the claims in this application and is not admitted to be prior art by inclusion in this section.

The majority of devices on the Internet whether stationary e.g. personal computers or mobile e.g. smart phones are connected to the Internet through network connections offered by some Internet Service Provider ISP or some Cellular Network Operator CNO . The traditional model for accessing content over the Internet is centered around Web servers content is placed by content providers on Web servers operated by service providers often ISPs and CNOs assume both roles of content and service provider then users interested in specific content access the corresponding Web server s to obtain it. In this content distribution model the users who may possess some content cannot offer it directly to other users unless they place it on some Web server.

An alternative to this content distribution model centered on Web servers is the peer to peer P2P model. Here the user may directly share with other users the content he or she possesses. Each P2P protocol Napster Gnutella Chord FastTrack etc comes with a content location service centralized or distributed which permits the location of the peer s that contain a specified content. Using such a location service a user looking for some specific content may connect to the device of another user who offers the content in question and retrieve it from there.

In order for P2P protocols to work over the Internet the establishment of a connection between two peers at the edges of the Internet e.g. PCs or smart phones must be possible. It is not a trivial task to satisfy this requirement especially taking into consideration the constraints imposed by firewalls and NAT servers that are used by ISPs and CNOs to protect and control their networks.

Firewalls are used to control the data traffic that goes through them. In practice the great majority of such firewalls allow only solicited HTTP traffic to reach a smart phone or a PC while plain IP traffic over TCP or UDP is blocked. Even if a smart phone has an HTTP server an HTTP request sent by a remote device to that server would not go through these firewalls since the HTTP message is unsolicited by the receiving smart phone. Consequently for such strict firewall policies there is no straightforward way to establish a P2P connection between two peers that lie on different side of such a firewall.

NAT servers also create obstacles to a P2P connection especially for the case where one peer is a smart phone that roams across different CNOs while connected to the Internet. In that case while the smart phone would be connected to a P2P overlay network it will change its IP address and consequently it will lose all socket connections that have been established to its previous IP address.

Previous attempts have been made to provide solutions to the problem of establishing P2P connections in an environment including firewalls and NAT servers both in the fixed and in the mobile Internet cases. In the fixed Internet a peer PC is assigned a possibly different IP address by a NAT server every time it connects to the network. However as long as the peer remains connected to the network the IP address is not changed. Hence the problem of changing IP address while connected to the network does not appear in the fixed Internet and consequently existing P2P protocols do not provide solutions for such cases. However in applications connected to the Internet by way of a mobile device a smart phone that roams may change its IP address while being connected to the network. As such P2P protocols from the fixed Internet cannot operate correctly.

In the fixed Internet corporate networks can include firewalls that implement the strict security policy of allowing only solicited HTTP traffic to reach a PC connected in the corporate network. Similarly many cellular network operator CNO firewalls implement the same strict security policy. A number of solutions to P2P connections despite the presence of CNO firewalls have been proposed in the context of SIP deployment since SIP traffic faces the same constraints from the firewalls as any other unsolicited HTTP traffic. These solutions rely on the dynamic allocation of pinholes on the firewalls to allow SIP traffic to go through. Such solutions create another case of specific traffic similar to the solicited HTTP traffic. They are not a generic solution to the establishment of P2P connections.

There is a need to establish peer to peer P2P connections between PCs and smart phones despite the obstacles imposed by firewalls which allow only solicited HTTP traffic to go though and by NAT servers which change the IP address of roaming smart phones. Further there is a need for a reliable peer to peer communication protocol that works in a network environment including a firewall without relying on special firewall features.

In general exemplary embodiments described herein establish peer to peer connections between personal computers PCs and smart phones despite the obstacles imposed by firewalls which allow only solicited HTTP traffic to go through and by network address translation NAT servers which change the IP address of roaming smart phones. Exemplary embodiments utilize an HTTP based protocol that does message relaying. The purpose of the protocol is to enable a socket connection between two terminals despite firewalls between them. The protocol uses HTTP requests and responses to relay the messages between the peers without expecting any favorable behavior from the firewalls e.g. opening pinholes for specific TCP transmission control protocol or UDP user datagram protocol traffic .

One exemplary embodiment relates to a method of circumventing network obstacles to provide a peer to peer communication channel between peers utilizing hypertext transfer protocol HTTP . This method can include communicating a HTTP request from a peer device to a relay through a network including an obstacle where the HTTP request contains data intended for another peer device. The method further includes communicating data in a HTTP response from the relay to the peer device and establishing a communication channel between the two peer devices via the relay. The communication channel permits the peer device and the another peer device to send and receive data.

Another exemplary embodiment relates to a system for circumventing network obstacles to provide a peer to peer communication channel between peers. The system can include a first peer device communicating with a relay via a network including an obstacle a second peer device communicating with the same relay via a network including another device and a server coupled to the first and second peer devices and including programmed instructions to carry out functions of relaying the communication from the first peer device to the second and vise versa. The server receives a HTTP request from the first peer device. This HTTP request includes data intended for another peer device. The server further relays the aforementioned data to the intended peer device establishing thus a virtual communication channel between the first peer device and the second peer device to enable sending and receiving of data.

Another exemplary embodiment relates to a computer program product to circumvent network obstacles and provide a peer to peer communication channel between peers utilizing hypertext transfer protocol HTTP . The computer program product can include computer code that communicates a HTTP request from a peer device to a relay through a network including an obstacle and on to another peer device computer code that communicates a HTTP response from the relay to the peer device and computer code that establishes a communication channel between the peer device and the another peer device via the relay. The communication channel permits the peer device and the another peer device to send and receive data.

Peer to peer communication in the peer to peer system is carried out using a communication channel established between peers. From the viewpoint of an application on peer device and an application on peer device the communication channel operates as a socket connection. One peer listens for connections another peer establishes a connection with the first one and then both sides of the communication channel can send and receive data on that channel. Applications and on peer devices and respectively can listen for connections establish a connection and send receive data on an established connection. When a peer wants to allow other peers to connect to it and create a communication channel the peer communicates to the server the fact that this peer is listening for connections and the endpoint where the given peer listens for connections. When a peer attempts to establish a connection with a remote peer which presumably listens for connections it must communicate to the server the fact that this peer attempts to establish a connection to a remote peer and the endpoint of the remote peer to which the given peer attempts to establish a connection.

By way of example when a connection between an application on peer device and an application peer device is established each can send data to the other and receive data sent by the other. The data that application intends to send to application travels along the following path application writes the data on a socket connection provided by peer peer packages the data in an HTTP request and sends it to the middlepoint the middlepoint copies the data in the received HTTP request to and HTTP response which is returned to peer peer receives the HTTP response extracts the data and buffers them until the application performs a read operation on the socket that peer provides to it. The server does not buffer data. The server keeps information about the established communication channels and forwards data sent by a peer to the intended recipient.

From the moment a peer has established a communication channel with a remote peer no explicit action needs be taken by the receiving peer in order for sent data to reach it. However the application running on top of the receiving peer may not be able to consume the received data immediately. For this the receiving peer buffers receives data until the received data is consumed by its associated application. Since the receiving buffer of a peer is of finite size it is possible that it overflows e.g. if the associated application consumes data slower than the corresponding peer receives data . In the occasion of such event the receiving peer may notify the server about the overflow. If the server receives such a receiving buffer overflow notification the server informs the peer that sent the data that caused the overflow about the event.

The choice of whether a receiving peer notifies the server about the overflow of its receiving buffer depends on the properties of the established communication channel. If the communication channel is established as a non reliable connection e.g. a UDP datagram connection then no notification need be sent by the peer that experiences the buffer overflow. If the communication channel is established as a reliable stream e.g. a TCP session then notification is produced by the peer that experiences the buffer overflow.

By way of an illustrative example a peer that wishes to listen for connections from other peers informs the relay about this intention by sending a LISTEN REQ message to the relay that indicates the peer s intention to listen for connections. As a response the relay sends a LISTEN RSP message to the peer indicating the success or the reason of failure of the attempted operation.

Once a server side socket is opened with the exchange of LISTEN REQ and LISTEN RSP messages between a peer and the relay the socket server accepts connections on it. To indicate to the relay that a given peer is ready to accept connections from remote peers the given peer sends to the relay an ACCEPT REQ message. Once a remote peer has requested to establish a connection to the given peer the relay responds to the ACCEPT REQ message with an ACCEPT RSP message.

The client side of a socket that wants to establish a connection with a well known server side endpoint must attempt to connect to it. To achieve such a connection a peer sends to the relay a CONNECT REQ message that indicates the peer s intention to connect to a given endpoint. As a response the relay sends a CONNECT RSP message to the peer indicating the success or the reasons of failure of the attempted connection.

Once a connection between two peers is established each of the peers can send data to the other one and receive data from it. The act of sending data is taken by a peer when it has data to send. The data are sent to the relay which forwards them to the other end of the established connection without buffering them. As such the sent data must be delivered to the receiving end of a connection immediately. The act of receiving data is possible at all times at each end of an established connection. The fact that sent data are delivered at the receiving end without buffering at the relay does not mean that the application which uses sockets for remote communication must consume the received data immediately. Rather it is the responsibility of the code at the receiving end to buffer the received data until the application attempts to read them. Then the application at the receiving end must perform a local operation of retrieving data from its incoming buffer. The local operation blocks if the incoming buffer is empty.

To receive data a peer sends to the relay a RECEIVE REQ message which indicates the readiness of the peer to receive data. When data are sent to that peer the relay answers the RECEIVE REQ message with a RECEIVE RSP message which contains the data sent to the peer in question. On the other hand when a peer has data to send over an established connection it sends them to the relay with a SEND REQ message. Upon reception of such a message the relay forwards the received data to the intended recipient and sends back a SEND RSP message to the sending peer.

Following the socket model at the end of the interaction between peers all established connection are closed. In addition when a listening peer is not willing to accept connection anymore it closes the listening connection. To perform these housekeeping actions the peer sends a CLOSE REQ message to the relay and receive a CLOSE RSP as confirmation of the completion of the housekeeping actions.

The techniques described with reference to have several advantages. For example the approach described does not require any changes in the existing infrastructure neither does it conflict with current firewall policies. It delivers peer to peer connection while using standard HTTP and obeying the strictest firewall policies. Moreover it is easy to use allowing the developers to use the technique as an alternative to TCP IP sockets without having to invest any effort in learning a new protocol. Still further the approach has small impact on the peers. The only thing a peer needs to have in order to be able to use the protocol is the midlet that implements the API. This API code does not represent a significant amount of code neither does it represent a significant execution overhead on the peer.

The approach described with reference to provides a robust peer to peer communication protocol despite a number of firewalls that may be placed between two peers. The reliability of the approach stems from the fact that it does not attempt to take advantage of holes in the security policies realized by the firewalls. Neither does it rely on special features implemented by few current firewalls or expected to be implemented by future firewalls. Rather the approach builds on the minimum set of rules that are followed by the majority of the firewalls today such as allowing solicited HTTP traffic to reach terminals inside the firewall protected network.

The approach described herein is different than existing peer to peer socket implementations such as the JXTA peer to peer sockets described in the article Introduction to Peer to Peer Sockets which is available at the web address http www.codinginparadise.org p2psockets 1.html . For example the JXTA P2P socket approach requires the entire JXTA infrastructure to work whereas the approach of the exemplary embodiments requires only HTTP communications. The JXTA P2P sockets cannot circumvent firewalls that are not part of the JXTA framework. The exemplary embodiments can circumvent any firewall that allows as little as only solicited HTTP traffic.

While several embodiments of the invention have been described it is to be understood that modifications and changes will occur to those skilled in the art to which the invention pertains. Accordingly the claims appended to this specification are intended to define the invention precisely.

