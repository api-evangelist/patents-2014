---

title: System and method for triggering on platform usage
abstract: A system and method for triggering on platform usage can include at a platform, receiving and storing a trigger configuration of an account; operating a platform comprising internally executing a process on behalf of an account and publishing at least one event when executing the process; at the platform, incrementing a counter in response to the at least one event and if the stored trigger configuration species a usage key associated with a category of counted events of the at least one event; monitoring counters in a context of an associated trigger; and processing the trigger upon the counter satisfying condition of an associated trigger.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09319857&OS=09319857&RS=09319857
owner: Twilio, Inc.
number: 09319857
owner_city: San Francisco
owner_country: US
publication_date: 20141212
---
This application is a continuation of co pending U.S. patent application Ser. No. 14 054 464 filed 15 Oct. 2013 which claims the benefit of U.S. Provisional application Ser. No. 61 714 113 filed on 15 Oct. 2012 and U.S. Provisional application Ser. No. 61 879 035 filed on 17 Sep. 2013 all of which are incorporated in their entirety by this reference.

This invention relates generally to the application platform field and more specifically to a new and useful system and method for triggering on platform usage in the application platform field.

In application platforms developers using the platform often want to be able to detect when particular events occur. To do so many developers develop polling systems to detect when an event occurs. Building such a system can be time consuming and difficult to maintain. Furthermore some events of the application platform may not be exposed through an API or other programmatic interface. The application platform may have logistical reasons security reasons or business reasons for not exposing all internal events to third party developers. Thus for some events developers may not be able to detect the event. Thus there is a need in the application platform field to create a new and useful system and method for triggering on platform usage. This invention provides such a new and useful system and method.

The following description of the preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

As shown in a system for triggering on platform usage of a preferred embodiment can include a transaction system usage trigger database a trigger monitoring system and a trigger action processor . The system functions to create a simple interface for outside applications to deploy usage based events within a closed platform. An interface to the system preferably enables a user developer to generate a new usage trigger for an application or service platform. During operation of the application platform the system can update and monitor the status of various event counters. When a particular counter satisfies a usage trigger actions corresponding to the usage trigger can be performed. The system can preferably achieve improved efficiency and provide a wider range of trigger options compared to an event polling system from an outside developer when the usage triggers are integrated into the operation of the application platform. Furthermore the system can accommodate the application server of an account holder being separate from the application platform by at least one security layer. The system can be used for general usage and event tracking of internal processing of the application platform but the system can similarly be used for asynchronous error and warning handling.

The system is preferably implemented alongside an application platform. Preferably the application platform is a multitenant distributed computing system providing an HTTP based application programming interface API . The application platform may alternatively be any suitable platform. The application platform preferably provides a service used by outside applications or devices. In one preferred variation the application platform preferably provides a usage based API service. In one variation the usage based API service enables use of communication channels such as the telephony application platform described in patent application Ser. No. 12 417 630 filed 2 Apr. 2009 entitled System and Method for Processing Telephony Sessions which is hereby incorporated in its entirety by this reference. A telephony or communication application platform can enable synchronous communication sessions such as voice sessions video sessions screen sharing sessions or any suitable synchronous form of media communication. The communication can be carried out over PSTN channels SIP channels IP based channels WebRTC or any suitable communication protocol. The communication application platform can similarly facilitate asynchronous communication such as SMS MMS IP based client application messaging proprietary platform messaging e.g. social network messaging or any suitable form of asynchronous communication. The application platform may alternatively provide any suitable service. The system is preferably integrated within an application platform. Alternatively the system may serve as a standalone service and may include an interface to enable at least one application platform or applications to generate events toggle counters generate usage triggers perform responses for a usage trigger and or interact with the system in any suitable manner.

The application platform is preferably a multitenant platform with multiple accounts using the platform to supplement operation of external applications. The application platform is a different system from the external applications and mode of interaction and the security between the application platform and the application of an account can characterize that separation. For example operations and resource of the application platform can be inaccessible by an outside entity e.g. an account holder . Internal computing resources e.g. servers databases routers etc. can be protected through various means such as IP white listing IP black listing firewalls or other forms of isolating access to a restricted set of resources approved by the application platform.

As with the telephony application platform described above the application platform can include characteristics of operating according to responses of an outside developer application. In some instances the application platform submits requests to the client application and the application platform will perform a service according to the response. Such a model can be common in communication based service platforms where the service platform provides significant infrastructure to handle incoming calls. The application platform acts as infrastructure delegate for a particular service. In some instances the application platform will post data to the application server e.g. an HTTP POST . In the telephony application platform the platform detects external events such as an incoming telephone calls. In response to a call associated with an account the application platform requests processing directions instruction from an application server of the account. The application server can be hosted and operated by an outside party independent of the telephony platform. From the perspective of the application server the telephony application platform is a type of client device e.g. a browser session . However unlike a user controlled client device customized client side code may not be created and installed on a client side browser in the same manner. Such client side custom browser code could be used by a developer to catch and responsively relay suitable data to the application server but that option may not exist in such an application platform. Within the telephony application platform application instructions are executed and managed according to the platform infrastructure and logic. In the case of a telephony application platform considerable infrastructure and services are required to provide the calling services. Logistically the complexity of the system can be a barrier to allow customer customization i.e. customization by outside application developers . Unlike a system where an application server communicates with a developer implemented client application the developer cannot modify the platform components beyond the interfaces exposed by the application platform. Additionally or alternatively even when customization would be feasible privacy issues business strategy and security issues can pose other barriers that the system functions to support.

At least one security layer can additionally exist between the application platform and an external application. The application platform can depend on application API requests to include account authentication information. An outside application server can include security to protect access by entities external to the application server. In particular the resources referenced by a callback URI can be secured through an authentication layer a certificate verification layer an IP whitelist blacklist a virtual private network VPN tunnel or any suitable form of security.

A transaction system of a preferred embodiment functions to increment counters of application platform events. The transaction system no is preferably coupled to an application platform. The transaction system is preferably integrated into the operation of the application platform. A variety of different services and resources of an application platform can be configured to notify the transaction system no of events usage updates errors warnings or any suitable usage event of the application platform. The transaction system no can log individual platform events. In some variations a sub set of the stored platform events can be queried and accessed through a platform API or user interface. Another sub set of stored platform events could be internal and include private event information. The internal platform events can contain private information. The internal platform events can be used in combination to initiate a usage trigger. In the case of the telephony application platform call routers SMS servers MMS servers video servers client servers SIP servers and other suitable components can send event information.

The transaction system can have several various configurations. In one variation events are broadcasted and selectively counted if a trigger exists that is dependent on a counter of that event type as shown in . The transaction system preferably includes counter storage and a counter buffer. The counter storage and buffer preferably store the count of particular types of events and facilitate triggering when a counter reaches usage trigger threshold. In another variation the events are individually stored in a log and the individual events can then be processed and added to a counter storage system as shown in . In some situations the transaction system can include a summarizer which functions to process individual event logs and appropriately store a new counter or update an existing counter in the counter storage.

A counter storage module can function as a log of transaction history of an application platform. The counter storage preferably stores a plurality of counters. The counter storage is preferably a database but may be any suitable system for storing counter data. The counters may be tied to a particular account subaccounts and or any suitable entity. The counters preferably include a parameter indicating the number of occurrences or instances for a particular application platform event of the application platform. The counter storage module preferably includes a sparse set of counters. The set of counters does not have to be the full set of all countable events. The spares set of counters can maintain counters for types of events on which triggers depend. Internal logic of the counter storage module can check with the usage trigger database using the event parameters to query for usage triggers of interest to determine if an event should be added to a counter. A counter can alternatively be created through an API or a user interface. In one implementation a REST API is used to create a usage trigger by posting trigger customization parameters to a platform URI resource of usage trigger with daily counter parameter of 365 and hourly counter parameter of 24 and event pattern of a block of particular area codes. In some cases maintaining a counter is associated with some expense either for the application platform and or the associated account. Accordingly the system enables flexibility of creating counters without automatically counting every type of event for all accounts. In some cases the system can include default counters that are created for particular types of events. Triggers stored in the usage trigger database can preferably be attached or associated with a particular counter. As shown in some exemplary counters may include calls inbound or outbound calls to a particular type of destination local toll free specified country codes etc. SMS MMS messages inbound or outbound SMS MMS messages to a particular type of destination phone number or endpoint allocation subaccount creation resource creation recordings or media creation storage space price for all usage billing information events event locations API calls system errors and warnings or any suitable form of usage counter. For example a counter may be maintained for the number of calls made by a particular account on a telephony platform. A counter may alternatively or additionally include a parameter indicating any suitable metric of an event or entity such as timing of events frequency of events properties of events or any suitable metric.

A counter buffer can function as a temporary collection of counters that that are awaiting analysis by the trigger monitoring system . The counter buffer can temporarily store newly incremented counters in the buffer. After the trigger monitoring system has processed a counter in the counter buffer the counter can be deleted or removed from the buffer in a suitable manner.

In one variation of the system the system can include an event buffer which functions as a dirty cache of new event information. The dirty cache is preferably used in combination with an individual event log and optionally a summarizer. Rather than selectively add events to a counter the system can delay counting events until a defined time. The event buffer is a record of events yet to be counted. To avoid constantly updating counters the event bugger can store a pointer to stored events that await processing into a counter storage module. When a counter should be updated according to timing of a usage trigger the summarizer or other suitable component processes unaccounted events into the counter. The system can use other alternative approaches to updating a counter such as recording a timestamp of last update and retrieving events after that timestamp when updating the counter or using any suitable approach to consuming events into a counter.

The summarizer can function as a service to process individual event logs into counters. In some instances a counter may be created for a class of events. Events sharing common properties can be counted together. In a notification counting implementation the events can include a URI source of the processed instructions the notification code which identifies a category of an error warning or acknowledgment and a notification level which can indicate if the notification is an alert a warning an error or a fatal error . The summarizer can group events according to these event parameters. For example an event can be logged for every communication session established on behalf of the account. Those sessions can be directed at different destination endpoints or addresses. All of these events can be counted as a whole to measure total number of calls but the summarizer can alternatively count one subset or multiple subsets of the events. Some events can additionally contribute to the count of multiple counters. For example communication events directed at telephone numbers with a particular area code can be counted in a counter for that area code and with a total outbound call counter. The summarizer pattern matching can be rule based use regular expressions or use any suitable approach to detect patterns. The summarizer can additionally do fuzzy detection of groups to automatically detect events that match patterns of a group of events. In the case of error events multiple events may be logged with the same error code the summarizer can process an error report stored with the error events to further distinguish between the error events. For example an error code could be caused by an internal error of the platform or by malformed instructions from an application server. The summarizer could process the error report and distinguish between these two types of errors based on natural language processing of the code or data leading up to the error.

A usage trigger database of a preferred embodiment functions to store resources characterizing how to monitor usage and actions to perform. The usage trigger database preferably stores a plurality of usage triggers. A usage trigger is preferably a data object characterizing when to trigger and at least one response action. The usage trigger is preferably set for a particular type of counter. Additionally a trigger evaluation interval may be set such that the usage trigger will only constitute a trigger on a periodic basis e.g. hourly daily monthly one time etc for a particular event and or according to any suitable rule. Polling is one variation for implementing the trigger evaluation intervals. The usage trigger preferably additionally includes at least one parameter defining a response when the trigger is satisfied. One parameter could be a callback URI where an HTTP response can be sent. The callback URI preferably references a web application controlled by the developer creating the usage trigger and the web application may perform any suitable action the developer configures. The trigger monitoring system will preferably use the stored callback URI as a destination endpoint for a transmitted message with the counter status. Additionally or alternatively the usage trigger may specify a particular application platform response. For example in a telephony application platform a call can be ended even if the call is in progress. Enabling counter based manipulation of an application can allow applications to respond to events that could otherwise not be possible by outside developers. Private data and platform functions can be performed on behalf of the developer in response to internal counters. Similarly the platform response could include modifying an account a communication session application instance or any suitable response. The usage triggers are preferably set for particular accounts or other groupings. The usage triggers in the usage trigger database can be keyed by application platform accounts or subaccounts or any suitable key. The usage triggers may alternatively be globally set.

A trigger monitoring system functions to monitor the counters in the context of the set usage triggers. The trigger monitoring system is preferably communicatively coupled to the counter buffer of the transaction system no. The trigger monitoring system preferably reads recently updated counters from the counter buffer compares counters to an associated usage trigger if one exists initiates a response by the trigger action processor if required and removes the counter from the counter buffer. The trigger monitoring system may alternatively retrieve counters from the transaction system in any suitable manner. If a particular counter does not have an associated usage trigger or the usage trigger evaluation interval doesn t call for processing then the counter is simply removed from the buffer and no response is triggered.

A trigger action processor of a preferred embodiment functions to initialize or perform the response of an activated usage trigger. The trigger action processor is preferably a subprocess of the trigger monitoring system but may alternatively be an independent module at least a sub portion of an integrated application platform or any suitable component. As described above the response of a usage trigger can include a callback URI. The trigger action processor will preferably make an HTTP request to the callback URI when a usage trigger is processed. The HTTP request may include parameters associated with the usage trigger and or the counter. Additionally or alternatively the trigger action processor may use a component to access an API of an application platform to perform a designated action specified in the usage trigger.

As shown in a method for triggering on platform usage of a preferred embodiment can include operating a platform Silo receiving a trigger configuration and storing the trigger configuration in a usage trigger database S a transaction system incrementing a counter S monitoring counters in context of an associated usage trigger S and processing usage trigger upon a counter satisfying condition of the usage trigger S. The method functions to enable implementation of usage triggers for an application platform. The method is preferably implemented by a system substantially similar to the one described above but may alternatively be implemented in any suitable manner. The method is preferably implemented at a system integrated with an application platform but the method may alternatively be used in operation of a system providing a usage trigger service to outside applications and or platforms. The method preferably enables usage triggers to be set by outside developers or users of an application platform.

Step S which includes operating the platform functions to execute processes of the platform to generate events. As the method can enable multitenant usage triggers controlled by outside entities the triggers enabled by the method may provide insight into events otherwise not viewable from outside entities through an API e.g. for reasons relating to business issues technical limitations security concerns and or other reasons . The method can be particularly beneficial to application platforms that operate according to responses of an outside developer application. While the application platform can be actively prompted to perform an action the application platform preferably includes an operation model where the platform independently processes data information events and communicates requests to outside applications for direction. An outside developer can configure an external application server to direct the application platform through instructions. Such a delegate operational platform model can be useful in infrastructure specialized platforms and or platforms managing secure or private information Telephony and or communication service platforms are one example of an application platform that would have specialized infrastructures there would be numerous business and security reasons why the system architecture and the raw event information could not be exposed to enable outsiders to build such a counter event system. Similarly many application platforms would have access to a large amount of event information which could be pooled from within an account or across multiple accounts in a multitenant environment. Again there would be numerous privacy security competitive advantage and logistical reasons that could prevent directly exposing information enabling a counter event system but the method of the preferred embodiment can accommodate such concerns. One characteristic of a delegate operational platform is that the platform can operate asynchronous to the execution of the outside application that uses the platform. In one embodiment the method can function as an asynchronous try catch feature of a platform for outside developers. In another embodiment the method can function to integrate application business logic of an outside application with unexposed operations of an application platform.

Operating the platform preferably executes a process on behalf of an account and during execution of the process events can be published. The events can be notifications from various services of the platform errors warnings status updates or any suitable event log. Various services and resources of the platform publish the events. The method can work in cooperation with an existing event logging system or alternatively platform resources can directly publish events to the transaction system. Executing the process is preferably performed on resources inaccessible by an account holder i.e. an account holder has limited visibility into events occurring . Executing a process can include processing a request made by an outside resource. Executing a process can alternatively include processing application instructions at least partially supplied by an account holder. In a communication service platform executing the process can include facilitating hosting managing a synchronous communication session e.g. voice video screen sharing or other suitable communication session . Application instructions can additionally be executed during that communication session. Executing the process can additionally or alternatively include a communication service platform sending receiving messages e.g. SMS messages MMS messages .

Step S which includes receiving a trigger configuration functions to configure settings that control trigger events within a system. The trigger configuration is preferably received as a request through an application programming interface API . The API may be used to enable applications to programmatically create read update and or delete trigger configurations. The trigger configuration may alternatively be specified and transmitted through a user interface. For example a user may be able to input usage trigger settings from an account management website. Usage trigger configuration preferably specifies at least one usage key to which the usage trigger relates. The usage key specifies the event resource notification error or item counted and used to trigger a response. Exemplary usage keys can include total sales call time counts of events like sent or received messages counts of particular API calls measure of a particular resource usage or any suitable usage type. The usage keys can be an identifier for pre configured event categories such as calls calls inbound or calls inbound mobile . The usage keys can alternatively be a dynamically generated identifier for dynamically defined event categorization i.e. customized event categorization . An account holder can generate customized event categories by submitting a list of individual event categories. In one implementation such individual event categories can be defined through distinct billable events on the application platform. The system can return a unique identifier that can be used to specify the customized event categorization. The usage triggers are additionally set for a subset of usage of an application platform. The trigger request can additionally specify the type of counter such as an absolute counter that tracks a total number of events a change counter that tracks number of new events from a starting point time counters that track absolute or changes in usage time a percentage counter that can measure ratios or percentage changes rate counters that updates a counter to be the current rate or frequency of a particular event or other suitable approaches of measuring usage. The usage key can include filters or pattern parameters or other specifications to limit the counter and correspondingly the trigger to a subset of types of events. For example the subset of events counted may be phone call events originating from a phone number within a set of area codes. Preferably the subset of usage is defined by the account associated with the usage and the usage trigger. Additionally or alternatively a subset of usage may include usage related to a sub account a type of usage a regional grouping of usage or any suitable subset of usage of an application. A usage trigger configuration is submitted along with an account or sub account identifier. A token or key can be used to authenticate permission to create a usage trigger for the specified account or sub account. The usage trigger will be scoped to apply to usage of the corresponding account or sub account. For example usage triggers are preferably set by an account and the usage triggers are only enforced for counters for that particular account.

The usage trigger parameters may additionally define a callback URI an evaluation interval and or a trigger action.

The callback URI is preferably a resource identifier that can be messaged when the usage trigger is activated. The callback URI can be any URI. The callback URI can be a website URL of an application server operated by the account developer. For example the callback URI can be to the same application server system used to generate application instructions for the application platform the application server can modify subsequent instructions based on state generated in response to a usage trigger. The callback URI can alternatively be a URI of a resource of a third party. For example a developer could setup a usage trigger to send usage triggered events to a third party analytics server where logging and event analysis is performed.

A usage trigger parameters can additionally include security credentials which can enable access to resources specified by a callback URI. In one variation the resource of the callback URI e.g. an application server operated by an account holder may have a security layer isolating the resource from unwarranted traffic. Some security mechanisms may be communicated when receiving a trigger configuration. In one variation an authentication token can be submitted which the application platform can store and use to sign outbound communications to the callback URI.

The security credentials are preferably stored by the application platform and used when acting in response to a usage trigger. In one implementation the security credentials are authentication credentials that are included in transmission from the application platform to the external application. The authentication credentials can be a username password combination a certificate an authentication token or key and or any suitable authentication mechanism. An alternative variation to interfacing with security of an external application can use identifiable resources when accessing the application. Use of the identifiable resources preferably includes transmitting communication to a callback URI from a pre defined IP address. In such a variation the method can further include responding with a communication address of a resource of the platform. The communication address is preferably used when transmitting a communication to the callback URI. The account can use the communication address to configure an IP white list or a black list to selectively allow traffic. Such communication address information can alternatively be pre configured through administrator controls. In another approach virtual private network credentials can be shared between the application platform and an external system of an account and a VPN tunnel is used when accessing a callback URI.

An evaluation interval is preferably the rule specifying when the usage trigger should be checked. In one variation the evaluation interval is a polling interval. The polling interval could be hourly daily monthly yearly one time event or any suitable time interval. In another variation the evaluation interval may be an event based interval. In an event based interval the usage trigger may be checked when a particular event or series of events are detected. The usage trigger is preferably checked in Step S if the evaluation interval deems a check appropriate. The trigger request can additionally or alternatively specify counter thresholds that can define when the usage trigger and or the associated counter are evaluated or acted upon. A threshold of a usage trigger can be used in combination or in place of a polling interval.

A trigger action of a usage trigger is preferably a response taken by the application platform when the usage trigger is enforced activated. Exemplary actions can include suspending an account sending a notification ending a communication session cancelling a message and changing permissions. The trigger action may be used in combination with a callback URI or used as an alternative for the callback URI. The trigger action preferably enables system platform functionality that could be configured in the creation of the usage trigger. In some variations a trigger action can function to enable a response to be made that is not exposed through an API. Some exemplary trigger actions may include suspending an account charging stored value from an account charging a credit card sending a notification or alert message by email SMS phone IM or altering the behavior of an application and or any suitable action. As an example a calling card application may configure a usage trigger with a trigger action that prevents a customer to continue making international calls. Any suitable number and combination of callback URIs and trigger actions may be used.

Step S which includes storing the trigger configuration in a usage trigger database functions to create a repository of usage trigger configurations. The usage triggers may be stored in any suitable manner. The usage triggers are preferably retrievable based on the related counter. For example a usage trigger for the number of messages sent from a particular account can preferably be retrieved using the account and the type of counter e.g. number of messages sent . The application platform can be a multitenant platform. Storing the trigger configuration can include storing a plurality of trigger configurations of multiple accounts. The trigger configurations can be stored as accessible API resources. For example a REST API usage trigger resource can be updated by an account holder submitting API calls to a usage triggers resource or a particular trigger resource within the triggers resource path. Storing of trigger configuration can additionally include updating other suitable resources. The trigger configuration is used in combination with the counters of the transaction system and depending on exact implementation of the transaction system event processing other databases or resources may be update to facilitate appropriately incrementing counters. For example an account record can be updated with any counters required by usage triggers of an account. The transaction system can then use the counter list in the account record to selectively count events.

Step S which includes a transaction system incrementing a counter functions to measure the usage from an application or platform. The transaction system preferably exposes an interface used by an application platform to update counters. Events are preferably published or generated by resources of the platform and submitted to a transaction system that logs and or counts the events. The events can be any suitable type of events such as notifications status updates errors warnings summaries of multiple events or any suitable event notification. In a preferred implementation the platform is a communication service platform managing communication sessions of an account. The communication sessions are preferably telephony communication sessions controlled by telephony instructions managed by an outside account resource. In one variation the communication service platform is used for voice calls such as PSTN SIP or other suitable forms of synchronous communication sessions. The synchronous sessions can alternatively be video screen sharing or other suitable mediums of communication. In another variation the communication services platform can additionally or alternatively be used for asynchronous telephony messaging over SMS MMS proprietary IP protocols or other suitable forms of messaging. Individual events of the application platform are logged and added to the counter. In one variation the events may only be counted if a usage trigger depends on counting such an event which can function to sparsely account for counting events. In a multitenant platform counting all events of every account could incur considerable storage resources. The method preferably selectively counts events if a usage trigger depends on counting the event. The method can include the transaction system receiving an uncounted event searching for associated usage triggers associated with the uncounted event and if a usage trigger is associated with the event counting the event in a corresponding counter. Searching for an associated usage trigger can include querying usage trigger resources of related accounts or sub accounts. Global usage triggers can additionally be queried. The query can search for usage triggers with usage keys that match the event. If no usage triggers are identified then the event is not counted. If a usage trigger is identified then the event is counted. There can additionally be multiple counters that may be updated if for example multiple usage triggers have different usage keys that count the event. For example an inbound mobile call can be counted in a counter for mobile calls and in a counter for inbound calls. If a counter object does not exist a new one is created. If a counter does exist the event is accounted for in the existing counter object.

Counters are preferably any suitable data objects characterizing a metric of the application platform. Counters can be defined for any suitable type of usage. In some implementations default counters can be defined for a plurality of types of events regardless of existence of a related usage trigger. Such counters can be for commonly counted events. Usage triggers can be added and immediately act on the current state of usage with default counters. More preferably counters are sparsely defined according to the active usage triggers stored in the application platform. Sparsely defined describes the property of counter storage where counters are not stored for the full set of countable items for all accounts on the platform. Counters are created or updated if a usage trigger depends on counting a new event. As shown in new events may result in querying for relevant usage triggers before counting the event. If a usage trigger expires or is deleted associated counters can be deleted if no other usage trigger depends on the counter. Counters are preferably stored according to an account and type of counter. Counters may alternatively be keyed or indexed in any suitable manner. Additionally when incrementing a counter the counter is preferably added to a buffer for monitoring. Adding a new counter to the buffer may include temporary storing copying adding a reference or adding any suitable representation of the counter to the buffer.

As shown in the method can include storing individual event records of at least one service of the application platform S summarizing stored event records into a group S and updating a counter according to events in the group. This variation functions to allow resources and services of the application platform to log events to a basic storage or event management service. The counters can be generated from this record. In an alternative approach services and resources of the application platform or alternatively an event logging proxy can communicate events simultaneously to an event log and to a counter transaction system.

Additionally the method can include identifying events satisfying a pattern of a counter type S which functions to allow pattern matching fuzzy grouping or algorithmic identification of event types as shown in . A summarizer as described above or any suitable grouping engine can determine if an event should contribute to a particular group and if so which one. If a usage trigger defines a counter type that depends on pattern detection an event pattern definition can be created and used within a summarizer system when processing events. The summarizer can consume events from a raw event log and if the event satisfies an event pattern definition accounts for the event in the associated counter. Multiple events can additionally be collapsed into a single summary event. In one exemplary use case such pattern event identification can be used in error or warning logging. Errors and warnings can have various properties and similar errors or warnings can be collapsed or collected into a single summarizing event. An event buffer can be used to indicate which events from an event log require processing.

Step S which includes monitoring counters in context of an associated usage trigger functions to determine if a counter requires action by a usage trigger. A trigger monitoring system preferably monitors the status of counters updated by the transaction system. The status of counters is monitored according to usage triggers. In one variation the trigger monitoring system preferably monitors the buffer maintained by the transaction system. The trigger monitoring system can alternatively check counters according to the evaluation time interval of a usage trigger. The monitoring system may use any suitable technique to check the status of the counters. When a counter is updated it is preferably added to a buffer. Once in the buffer the trigger monitoring system will preferably read the counter from the buffer. It can then verify if the account associated with that particular counter has a usage trigger for that type of counter. If there is an associated usage trigger the trigger monitoring system may additionally check if the evaluation interval of the usage trigger is satisfied. When a usage trigger is identified for the counter and any additional conditions such as the evaluation interval are satisfied the usage trigger is processed and acted upon in Step S. The counter is preferably removed from the buffer once the counter is analyzed. In a related approach the usage trigger may be processed according to the timing of the evaluation interval. At a time defined by the evaluation time interval the counter or counters referenced by a usage trigger can be checked. In one variation if any new counter activity occurred since the last check the usage trigger is processed e.g. communicating with a callback URI . The counters are checked for a threshold or an alternative metric condition. The related counters can additionally be updated in response to evaluating a usage trigger. When it is time to process the usage trigger a trigger monitoring system can update associated counters. In one variation a counter buffer is used to record which events have not been accounted for in the current counters and in particular which events that contribute to the counter associated with the currently processed usage trigger. The evaluation interval prompts the counters to be updated. Events referenced in the counter buffer are measured and accounted for in the counters associated with the usage trigger. Such a variation can be used with usage triggers for errors and warnings. A similar variation can prioritize the update of counters with usage triggers with upcoming intervals.

Step S which includes processing usage trigger upon a counter satisfying a condition of the usage trigger functions to perform the response specified by the usage trigger. In a first variation the usage trigger is satisfied when the evaluation interval has expired and the measurement of the counter satisfies a condition. The condition is preferably defined by a threshold limit defined in the usage trigger configuration. The threshold can be a maximum threshold where the usage trigger is processed when the measurement of the counter exceeds the threshold. The threshold can be a minimum threshold where the usage trigger is processed when the measurement of the counter is less than the threshold. The condition can alternatively be a range a function of other properties including at least one measurement of a counter object. Processing a usage trigger preferably invokes the action configured for the usage trigger. The condition can alternatively be a change in the count since a previous processing of the usage trigger such that any changes in a count are acted on at a timing interval specified by the evaluation time interval of the usage trigger.

In one variation the usage trigger configuration includes a callback URI parameter. Processing the usage trigger can include sending a request e.g. HTTP request to the callback URI which functions to alert message or notify a resource of the counter status as shown in . The URI is preferably for an internet accessible resource that can perform any suitable action after receiving the request. The URI is preferably an external resource operated by the account associated with the usage trigger. For example a first application created by a first account can create a usage trigger. When a counter of the usage trigger satisfies a condition the external transmits a message to a resource specified by the callback URI. The callback URI request may additionally include data parameters characterizing properties of the counter and or usage trigger. The data parameters can include the current value of the counter previous value of the counter time stamps of updates to the counter reference identifiers of events accounted for in the count or any suitable information concerning the counter. The application server can then perform any suitable action. Exemplary external application actions of an application server could include updating a database based on the event altering state of a session controlled by the application server sending an alert to a developer or any suitable response. In one implementation an application server can respond by sending a response to the callback URI call. The response can include application platform instructions. The application platform instructions can act similarly to the trigger actions described below in that they alter state of the application platform. In one variation a callback URI could be to a third party application server such as an analytics service operated by a service distinct from the account holder and the application platform operator.

When sending a request to the callback URI the method can additionally include sending the request according to security procedures. The resource referenced by the callback URI can be secured against unwarranted access by the operator of the callback resources e.g. the outside system of the account holder . An open URI or a private URI can be contacted by any outside entity which may be sufficient for some situations. A secured callback URI can include mechanism to limit access of the callback URI. In one variation security credentials of the usage trigger are used to access the callback URI as shown in . The external application can use the security credentials to authenticate or authorize access to the callback URI. The callback communication is preferably cryptographically signed with the security credentials of the account holder. If the security credentials are not validated by the application then the communication directed to the callback URI can be denied otherwise the communication can be accepted and processed by the callback resources. Such communication signing can be used in addition to any of the below alternatives.

In an alternative variation the security procedures can include sending the request from a verified resource of the application server. The verified resource of the application server can include machine with a static IP address a machine with VPN pipe tunnel to an external resource of the account holder or any suitable private communication channel between the application platform and the external application. The verified resource can have a fixed IP address that can be pre arranged as a trusted communication source. As mentioned above the verified resource can be communicated in response to an account creating a usage trigger as shown in . The external application can whitelist or blacklist IP addresses such that the verified resource is permitted to contact the callback URI as shown in . Sending the request according to security procedures can include establishing a VPN pipe and sending the request across the VPN pipe as shown in .

As an additional or alternative variation the usage trigger configuration may include a trigger action. Processing the usage trigger can include performing an action specified by the associated usage trigger as shown in . This variation preferably enables real time response within an application platform. In some situations the actions that may be performed may not be exposed to outside entities through an API thus the action enables responses that in some situations wouldn t be available to outside entities. For example if there is a call being performed over a telephony application platform and the call uses up all pre paid minutes during the call the usage trigger may have a trigger action to end the call. Thus the usage trigger enables an outside entity to build event based functionality without having to maintain an application to cancel the in progress call or even be reliant on that functionality being exposed through an API. Executing a trigger action may additionally or alternatively include suspending an account charging stored value account charging a credit card sending a notification or alert message by email SMS phone IM or altering the behavior of an application and or any suitable action.

Additionally processing the usage trigger can include resetting or removing the usage trigger. In some instances a usage trigger can be configured as a single use usage trigger. After the usage trigger is processed the usage trigger resource can be removed or suitably managed to end use of the usage trigger. A counter associated with the usage trigger can similarly be deleted or closed. In some instances a usage trigger can be configured to reset. Preferably resetting a usage trigger includes creating a new counter or clearing the counter. Resetting a usage trigger can be used to enable actions that are triggered after a specified number of occurrences.

An alternative embodiment preferably implements the above methods in a computer readable medium storing computer readable instructions. The instructions are preferably executed by computer executable components preferably integrated with a usage trigger system. The computer readable medium may be stored on any suitable computer readable media such as RAMs ROMs flash memory EEPROMs optical devices CD or DVD hard drives floppy drives or any suitable device. The computer executable component is preferably a processor but the instructions may alternatively or additionally be executed by any suitable dedicated hardware device.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

