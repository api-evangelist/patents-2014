---

title: Method and system for minimizing or eliminating downtime when updating a website
abstract: Websites, including supporting databases, are updated with little or no downtime. In one aspect, a database is replicated prior to updating, so that updates can be performed on one copy while the other remains operational. In another aspect, the data remains in one location while an application programming interface for interacting with the data using new software code is introduced. Another application programming interface remains operational while the update is taking place. Public and private synonyms are used to direct web traffic to the appropriate application programming interface during the update process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021461&OS=09021461&RS=09021461
owner: Wal-Mart Stores, Inc.
number: 09021461
owner_city: Bentonville
owner_country: US
publication_date: 20140225
---
This application is a continuation of and claims the benefit of and priority to U.S. patent application Ser. No. 11 932 226 now U.S. Pat. No. 8 701 103 entitled Method and System for Minimizing or Eliminating Downtime When Updating a Website filed on Oct. 31 2007 by Jack P. Hsu et al. the entire contents of which are expressly incorporated by reference.

This invention relates generally to website administration and more particularly to techniques for minimizing or eliminating downtime when updating a website.

One aspect of the World Wide Web that has contributed to its vast popularity is the fact that users can access most websites at any time of the day or night. This feature allows users to obtain information do their shopping or banking plan trips and perform many other web enabled transactions and operations at whatever time suits the users wishes or needs. In fact users have developed an expectation that websites should be available twenty four hours a day seven days a week. Websites that fail to meet these expectations can cause inconvenience to users have a negative impact on the user s perception of the underlying company and can cause companies to lose business.

It is often needed or desirable to update a website so as to incorporate new functionality and or information. Such updates may include for example database updates application server updates security updates user interface upgrades and the like. For example for an e commerce website updates may be needed to add delete or change products change descriptions change the operation of the shopping cart and other features and the like. Database schema updates may also be needed for example if fields are to be added deleted or changed within a database table.

Website updates often involve a substantial amount of effort and can take time. Conventionally therefore it is often necessary to take down a website while updates or other maintenance is taking place. Generally website operators try to perform such operations at a time when traffic is at a minimum for example during the very early mornings within the geographic region having the greatest concentration of website visitors or potential visitors . However for websites that are commonly accessed by people around the world it may be difficult to identify such low traffic time periods. In addition even if updates are performed during low traffic time periods some users will still be inconvenienced by the lack of availability of the website during these time periods.

Furthermore any users who are in the midst of an online session such as for example making a purchase on an e commerce site will be particularly disrupted when the website is taken down. In some cases valuable session data may be lost and the user may have to re enter the data at such time as the website is made available again. In other cases the user may be unsure as to whether the transaction was completed. Users experiencing such frustrations may be compelled to conduct their business at a competitor s site thus costing the website operator some valuable business.

What is needed therefore is a system and method of updating a website with little or no downtime. What is further needed is a system and method for updating a database schema for a website with little or no downtime. What is further needed is a system and method of performing website updates in a manner that avoids the limitations and disadvantages of conventional techniques.

Embodiments are described for performing updates to websites including supporting databases with little or no downtime. In one embodiment a database is replicated prior to updating so that updates can be performed on one copy while the other remains operational. Once the update is complete the updated copy goes live. Any data changes that took place during the update because of user transactions that occurred during the update are copied over to the newly live copy.

A second embodiment avoids the need to replicate the database prior to updating it. Instead the data remains in one location while an application programming interface for interacting with the data using new software code is introduced. Another application programming interface remains operational while the update is taking place. Once the software code update is complete the updated application programming interface goes live. Here data changes that took place during the update because of user transactions that occurred during the update do not have to be copied over because the same instance of the data remains live throughout the update process. Backward compatibility can be enforced so as to ensure that despite any changes to the database schema the database will still be usable by the previous version of the software code.

One skilled in the art will recognize that the above listed features and advantages can be provided singly or in any combination.

For illustrative purposes the invention is described in terms of a system and method for updating a back end database for a website such as in the context of a release of a new version of the website. One skilled in the art will recognize however that the present invention can be used as an improved methodology for performing any type of software update in a variety of contexts.

Referring now to there is shown a block diagram depicting an example of a technique for updating a website database according to one embodiment where data and code replication are performed prior to the database update. Referring also to there is shown a flow diagram depicting an overall method for updating a website database in this manner. As is typical for large scale website operations such as e commerce sites a large number of servers are available. For example many e commerce sites have 100 servers or more along with underlying databases such as an order management system database electronic data interchange database and the like. When an update is to be performed the server farm is split into two clusters A B. A first cluster A is designated as live while a second cluster B is taken off line for testing purposes. In one embodiment the present invention takes clusters off line by causing a website traffic director such as a network load balancer not shown to direct all traffic to those clusters designated as live .

If any table structures are to be changed as part of the update for example if a data field is to be split into two new fields data transformation code is developed to facilitate moving data into the new format. The data transformation code is usually release specific software and appropriate to the type of table structure change that is being implemented.

Database s is are replicated with each copy of the database A B being associated with one of the clusters A B respectively. Thus the databases A B contain the same software code database schemas and data. Thus all web traffic will be directed to the live cluster A and processed by database A for the duration of the update. In the replication process any needed data transformations as developed in are applied.

For illustrative purposes depicts an order management system database A that is replicated as B as well as two additional databases order management system fulfillment OMSFF database A and electronic data interchange logging management EDI BLM database A that are replicated as B B. One skilled in the art will recognize that in connection with the present invention any number and type of such databases can be similarly handled. In one embodiment OMS database A B posts orders to OMSFF database A B EDI BLM database A B then retrieves orders from OMSFF database A B to proceed.

Database and or software code updates such as API updates for example are performed A on the off line database s B B B and server updates are performed B on the off line web servers B. Such updates can include changing database schemas software code logic field definitions settings and preferences and the like. Any required testing is performed using cluster B.

Once database s B B B has been updated and once all data changes from database s A A A have been copied over to database B a switchover takes place Cluster B and database s B B B are designated as live and cluster A and database s A A A are taken off line.

While the database s B B B are being updated using off line cluster B the live cluster A continues to handle all web traffic directing the traffic to database s A A A for processing. User interaction with the website may cause some of the data in database s A A A to change during the update of database s B B B. For example in an embodiment where the website is an e commerce site any user order received during the update will be reflected in the data in database s A A A but will not be reflected in the data in database s B B B since that copy of the data is offline at the time of the user order. Accordingly any data changes that have occurred in database s A A A since database s B B B was taken off line are copied to database s B B B. In order to facilitate this such data changes that take place during the update are tracked so that they can be copied over. If a table structure has changed as part of the update for example if a data field is split into two new fields the data transformation developed in is performed on the data being copied over so as to match the new table structure.

In one embodiment data changes are tracked by logging a timestamp when the data replication has completed and then running a query on the data in database s A A A to identify changes that have taken place after the timestamp. In one embodiment this copying is performed periodically during the update so as to avoid the need to do a large amount of copying at the end of the update .

In one embodiment sequence numbers are selected so as to avoid any conflict when data is copied over. For example databases A A A may use odd sequence numbers while databases B B B use even sequence numbers. In this manner no sequence number conflict occurs when data is copied from databases A A A to databases B B B.

Servers in cluster A are then consolidated with those of cluster B so that the entire server farm is again available to receive web traffic. Database s A A A are thereby detached from the system so that all traffic from all servers now uses database s B B B which reflect the new update.

The method thus allows users to continue interacting with the website while an update is in process. All transactions such as e commerce orders are properly handled without any data loss or downtime.

Referring now to there is shown a series of block diagrams depicting a series of steps for updating a website database according to the data replication method. depicts the state of the system at step . Server farm has been split into servers A B and databases A A A are being replicated or cloned into databases B B B. Fulfillment server A is shown connected to databases A A A indicating that it is the live system for fulfilling user requests such as orders. Fulfillment server B is disconnected because it is off line.

In one embodiment the present invention is implemented using Oracle Real Application Clusters RACs which support deployment of a database across a cluster of servers. Two sets of databases are provided as described above. Each set of databases has one or more standby databases that can take over in case of an unplanned outage. While a database is off line for updating its standby database is rebuilt so that it will be available when the database is brought live .

Referring now to there is shown an example of a data model update that can be performed using the techniques of the present invention. Data model represents an initial data model being used in a current release. Data model includes three tables customer table A customer order table and line item table . In the example customer table A includes four fields customer ID customer name customer address and last modification date time . Data model represents a new data model being using in a new release. It includes the same three tables but customer table B is being changed so that it now has separate fields for customer first name and customer last name instead of a single field for customer name .

Thus in the example shown in the data transformation that would be performed in steps and involve splitting customer name into customer first name and customer last name .

Referring now to there is shown a block diagram depicting an example of a technique for updating a website database according to one embodiment where synonyms are used to implement updates while avoiding the need to replicate data. Referring also to there is shown a flow diagram depicting an overall method for updating a website database in this manner.

Database A is for example an order management system database whose data and or code is are being updated. Table is an example of a customer table that is being updated according to the present invention. An API is established for accessing table using current old code this API is referred to as schema A . A public synonym A is established which points all servers to the schema A API A when a request is made that involves access to table . Another public synonym C points schema A API A to table .

In the example a change is being made to the structure of table . The change pushed to table during planned downtime. In one embodiment this downtime is much shorter than would otherwise be required for website updates using prior art methods.

The server farm is split into two clusters A B. A first cluster A is designated as live while a second cluster B is taken off line for testing purposes. In one embodiment the present invention takes clusters off line by causing a website traffic director such as a network load balancer not shown to direct all traffic to those clusters designated as live .

In one embodiment no separate table is created for the new code. In another embodiment if any table structures are to be changed as part of the update for example if a data field is to be split into two new fields data transformation code is developed to facilitate moving data into the new format. The data transformation code is usually release specific software and appropriate to the type of table structure change that is being implemented.

Server updates are performed on the off line web servers B for example by pushing new client code onto servers B.

An API is established for accessing table using new code this API is referred to as schema B . A private synonym B is established which points off line servers B to the schema B API B when a request is made that involves access to table . Private synonym B is not made available to the public so that it can be used exclusively for testing purposes. A public synonym D points schema B API B to table . The new code is tested using off line servers B pointing to the schema B API B to access table .

Once the system has been tested switchover takes place Cluster B is designated as live and cluster A is taken off line. Private synonym B begins to point servers B to schema B API B.

If needed server updates are performed on the off line web servers A. Schema A API A is updated as needed.

Servers in cluster A are then consolidated with those of cluster B so that the entire server farm is again available to receive web traffic. Since APIs A and B now contain the same updated code one of them can be detached so that all traffic from all servers now access table using a single API.

Referring now to there is shown a series of block diagrams depicting a series of steps for updating a website database according to the synonym method. depicts the state of the system at step . Schema A API A containing release N of the software the old code has been established a public synonym has been established to point all servers A B to schema A API A and a table change for the release N 1 new code has been pushed to data including tables . The server farm has been split into servers A B both using the same public synonym to access API A.

In one embodiment the present invention is implemented using Oracle Real Application Clusters RACs which support deployment of a database across a cluster of servers. One database or set of databases is provided as described above such as OMS OMSFF and EDI BLM database with schemas A and or B providing access thereto. In one embodiment the set of database or databases has one or more standby databases that can take over in case of an unplanned outage.

In one embodiment the present invention is able to execute a data model update as described above in connection with .

The present invention has been described in particular detail with respect to one possible embodiment. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. First the particular naming of the components capitalization of terms the attributes data structures or any other programming or structural aspect is not mandatory or significant and the mechanisms that implement the invention or its features may have different names formats or protocols. Further the system may be implemented via a combination of hardware and software as described or entirely in hardware elements or entirely in software elements. Also the particular division of functionality between the various system components described herein is merely exemplary and not mandatory functions performed by a single system component may instead be performed by multiple components and functions performed by multiple components may instead be performed by a single component.

Reference herein to one embodiment an embodiment or to one or more embodiments means that a particular feature structure or characteristic described in connection with the embodiments is included in at least one embodiment of the invention. Further it is noted that instances of the phrase in one embodiment herein are not necessarily all referring to the same embodiment.

Some portions of the above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps instructions leading to a de sired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated. It is convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. Furthermore it is also convenient at times to refer to certain arrangements of steps requiring physical manipulations of physical quantities as modules or code devices without loss of generality.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or displaying or determining or the like refer to the action and processes of a computer system or similar electronic computing module and or device that manipulates and transforms data represented as physical electronic quantities within the computer system memories or registers or other such information storage transmission or display devices.

Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention can be embodied in software firmware or hardware and when embodied in software can be downloaded to reside on and be operated from different platforms used by a variety of operating systems.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of media suitable for storing electronic instructions and each coupled to a computer system bus. Further the computers referred to herein may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

The algorithms and displays presented herein are not inherently related to any particular computer virtualized system or other apparatus. Various general purpose systems may also be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will be apparent from the description above. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references above to specific languages are provided for disclosure of enablement and best mode of the present invention.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of the above description will appreciate that other embodiments may be devised which do not depart from the scope of the present invention as described herein. In addition it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the claims.

