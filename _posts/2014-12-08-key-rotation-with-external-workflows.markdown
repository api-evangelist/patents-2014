---

title: Key rotation with external workflows
abstract: A material set, such as an asymmetric keypair, is processed using an associated workflow to prepare the material set for activation and/or use. In one embodiment, a material set is generated and information about the material set is communicated to a workflow manager. Based at least on the information, the workflow manager generates a workflow that when accomplished will allow the material set to be activated and/or used. In another embodiment, a service provider provides a key manager, workflow manager and destination for the key, such as a load balancer that terminates SSL connections. A key can be generated by the key manager, sent through the workflow manager for processing (potentially communicated to third parties such as a certificate authority, if needed) and installed at a destination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09276754&OS=09276754&RS=09276754
owner: Amazon Technologies, Inc.
number: 09276754
owner_city: Reno
owner_country: US
publication_date: 20141208
---
This application is a continuation of U.S. patent application Ser. No. 13 474 525 filed May 17 2012 entitled Key Rotation with External Workflows and issued to U.S. Pat. No. 8 908 868 on Dec. 9 2014 which is related to and incorporates by reference for all purposes the full disclosure of co pending U.S. patent application Ser. No. 13 474 536 filed May 17 2012 entitled Automating Key Rotation in a Distributed System the contents of which are hereby incorporated by reference in their entireties.

In many systems a key must be processed before it can be useful. For example a public private keypair must be processed before it can be used in Secure Socket Layer SSL or Transport Layer Security TLS communications. After a requestor generates the public private keypair the requestor then creates a certificate signing request that ties the public portion of the keypair to an identity such that a Certificate Authority is satisfied. The Certificate Authority when satisfied with the identity of the requestor sends back an identity certificate that has been signed by the Certificate Authority. The keypair and certificate are then installed on a system to service secure communication for the requestor. After installation the keypair and certificate are ready for use and may be considered active.

Use of a single key for an extended period may not be advisable as a key can become compromised. Key rotation and maintenance can allow administrators to reduce risk of system compromise by reducing the time that a compromised key may be actively used. For example an administration team can choose to rotate a certificate used for communication over SSL. As many different systems are involved an administration team may manually perform many steps and manually move information from one system to another. Tools such as a keypair generator may be used to aid during the key rotation. Once the administration is satisfied that all servers have the new certificate active the key rotation may be considered completed. However key rotation can be both a benefit and problem. Key rotation and maintenance can present security issues as manual intervention and internal and external systems may be involved. For example keypair generation and installation of a certificate with a private key of the keypair requires access to the private key. If an administrative account is accidently compromised the private key may be viewed and or accessed. Similarly mistakes may happen where a private key is improperly stored generated or transmitted causing exposure of the private key.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include processing a material set such as an asymmetric keypair using an associated workflow to prepare the material set for activation and or use. In one embodiment a material set is generated and information about the material set is communicated to a workflow manager. Based at least on the information the workflow manager generates a workflow that when accomplished will allow the material set to be activated and or used. Once the workflow is successfully completed the completion is reported to the key manager. The key manager then marks the material set as activated. An advantage of an automated system that processes such a workflow is that the material set need not be disclosed or accessible to administrators. As the workflow controls the processing of key information the workflow defines how disclosure of the key information occurs if it occurs.

In one embodiment a service provider provides a key manager workflow manager and destination for the key such as a load balancer that terminates SSL connections. As the systems are provided by the service provider under the control of the service provider the service provider may define the interactions between these services in a workflow. A key can be generated by the key manager sent through the workflow manager for processing and potentially communicated to third parties such as a certificate authority if needed and installed at a destination because the interaction is defined and or controlled by the service provider. In some embodiments this integration is achieved by a program execution service such as cloud services in which computing resources and or virtual computing resources may be provisioned and retired as needs arise.

In one embodiment key rotation may be defined in a workflow. A key manager may determine a set of servers that require receipt of a key such as a set of load balancers. The key manager may provide the key and a list of the servers in the set to a key distribution manager. The key distribution manager may distribute the key to the set of servers identified on the list as a non preferred key. As a non preferred key the key may be used if required such as receipt of an encrypted file that is associated with the non preferred key but defaults to a preferred key. The workflow manager may ensure that each of the set of servers acknowledge receipt of the key or has been excused from acknowledgement by an administrator to complete the distribution of the key. Once the distribution is complete the key distribution manager may then request that each of the servers having the key make the key a preferred key. As a preferred key the new key can be used to secure information unless a need arises to use a non preferred key if allowed. In some embodiments a non preferred key is only allowed to be used during transition periods. The key distribution manager then communicates the success of the key rotation to the key manager which marks the key as active. An advantage of this workflow is that the distribution of a non preferred key and switch to a preferred key is part of the workflow and does not require knowledge gained outside of the workflow. Another advantage is that manual intervention may not be required if the distribution is successful.

Security policies may also include and or trigger workflows. For example a security policy may require a key rotation every 90 days with the workflow to commence 2 weeks before the end of the 90 days. At two weeks before the deadline the workflow manager attempts to distribute a new key to appropriate servers. If not complete before one week a warning may issue to the administration. After successful distribution the workflow manager requests the servers to cause the new key to become the preferred key. The workflow manager can then report to the key manager that the new key is active.

Workflows may also include instructions for handling error conditions. Using the above example if a workflow manager is unsuccessful in distribution at one week before the end of the 90 days the workflow manager may send a warning to an administration team for action. The administration team may log on to an administration portal and view the detected problems such as a set of servers showing up as unavailable. The administration team may then determine if the set of servers should be subject to an exception to the policy such as the servers should be excepted from the policy because the servers are down for maintenance and will pull the new key upon restart. By integrating a key manager and a workflow manager an administrative team may focus on fixing exceptions to the workflow.

Keys may include symmetric asymmetric and fractional keys. For example an asymmetric key may include a public and private keypair. A symmetric key may include algorithms such as twofish advanced encryption standard AES blowfish triple data encryption algorithm 3DES and international data encryption algorithm. Fractional keys may include algorithms that use one or more keys together to cryptographically process data. The keys may be created by a key generator which may trigger a key distribution system upon key generation.

Turning now to an illustrative example of activating a generated key using an associated workflow in accordance with one embodiment is shown. Using the system shown in a key may be taken from initial generation to a useful state based on information about the key . The processing of the generated key is shown in three phases a generation phase a selection phase and a processing phase . In generation phase a client may instruct a key manager to generate and store a material set that may include a key and other information such as a key class . In the embodiment shown the client sends a request for key generation that identifies a key class to a key manager . The key class is associated with a workflow template that may be used to activate a key associated with the key class . In some embodiments characteristics of a key the proposed end use of a key or the workflow or process for activating a key define a key class. The key manager may generate the key which may be part of a more comprehensive material set and store the key .

In the selection phase the key manager sends key information to the workflow manager such that a workflow may be generated to process and activate the key . In the embodiment shown the key manager sends key information to the workflow manager. The key information provides enough information about the generated key to allow the workflow manager to select a workflow template and generate a workflow to process the key . In some embodiments the key information may include the key itself. In other embodiments the key information may describe the key such as including the key class and a reference to the key.

In the processing phase the workflow manager processes the generated workflow until complete and reports the completion and or activation to the key manager . In the embodiment shown the workflow manager processes the workflow and updates the key manager and or audit system with status information related to the key associated with the key information . After completion of the workflow the key manager and or audit system are updated with the status of the completion. The key manager may then mark and or consider the key as activated.

Turning now to an illustrative example of key rotation in accordance with one embodiment in accordance with one embodiment is shown. Upon key generation a new key can be distributed to a set of computing resources such that the set of computing resources have received the key before the key is fully relied upon. For example a key may be distributed to a set of storage servers responsible for encryption and decryption of files. The key rotation is described in three phases distribution acknowledgement and preference . During the distribution phase the key manager shares the key with a key distribution manager to distribute the key to appropriate computing resources . In the embodiment shown a key manager shares a list of resources and a key with a key distribution manager . Using the list of resources the key distribution manager distributes the key to the computing resources identified in the list of resources. The key is distributed as a non preferred key such that a currently preferred key may be continued to be used.

In the acknowledgement phase the key distribution manager determines which computing resources have received the generated key. After receipt of the key each computing resource sends an acknowledgement to the key distribution manager . The acknowledgement may be based in part on the key such as including a digital signature using the key. The key distribution manager compares the received acknowledgements with the list of resources and upon either receiving an acknowledgement or excusing a computing resource from an acknowledgement the process may move to the next phase. In some cases not all computing resources will reply with an acknowledgement . In some embodiments the key distribution manager may use error processing in the event of an error. For example the key distribution manager may include redistribution of the key to computing resources may be attempted until an acknowledgement is received. In other embodiments an administrator may make an exception and or remove servers from the list of resources . In one embodiment a computing resource monitor may detect the failure of one or more computing resources and grant an exception for the failing computing resource and or remove the failing computing resource from the list or resources .

Once all of the computing resources have responded with an acknowledgement have an exception or have been removed from the list of resources the preference phase may begin. In the preference phase the key distribution manager causes the computing resources to switch the newly acknowledged key from a non preferred role to a preferred role. In some embodiments this switch is viewed as moving from an alternate key to a default key. In the embodiment shown in the key distribution manager sends to the computing resources identified on the list of resources that are not excepted or removed a request to make the acknowledged key a preferred key . Upon completion of the switch to a preferred key the key distribution manager and or computing resources may report success to the key manager . In one embodiment the key distribution manager may be a logical part of the key manager.

In some embodiments this distribution of a key show in can be implemented in conjunction with as a workflow. In other embodiments the distribution may occur upon generation of a key for rotation such that no template workflow is selected. The system may merely start the process shown in as a predetermined process.

Turning now to an illustrative example of a key management system in a program execution service environment in accordance with one embodiment is shown. Computing systems such as desktops laptops and mobile devices may communicate over the Internet with a program execution service . Customers of clients managing systems in the program execution service may enter through a gateway in which their communications are then routed through internal networking to client computing resources . Clients using computing systems may manage their services by communicating over the Internet with a control plane . The control plane may include a workflow manager and a key management system . The key management system may further include a key manager key distribution manager administrative console and audit system . The key management system may be used to manage distribution activation and processing of keys within the program execution service . For example the key distribution manager may distribute keys to client computing resources such as virtual machines upon generation of the key by the key manager . A monitoring system may report to the key management system or the workflow manager about problems with the computing resources . The audit system may provide details about actions taken and workflow processes completed and or attempted. In some cases the audit system may provide warnings via different communication channels such as SMS email messaging and or voice. The administrative console may provide access to administrators to monitor progress and or manage exceptions to the processing of keys.

By having these systems managed by a program execution service consistent interfaces may be maintained between the various systems. Furthermore the economies of scale may be useful because programming interfaces between these systems and services may serve many clients that desire to use key rotation. Another advantage is that a private key may never need to leave the internal network of the program execution service . Since the private key may not leave the internal network there may not be a need for client access to the private key. In some embodiments the key management system may complete the rotation distribution and or management of private keys without allowing administrative access. As the program execution service and other service provider programs are the only programs with access the key may be considered more safe. Internal theft compromised client systems may no longer be a threat because the client may not have access to the keys. In one embodiment however the client may bring their own private key and then request the key management system process the private key for use.

The workflow manager key manager and key distribution manager may be collectively implemented by one or more computing resources comprising one or more processors and memory including executable instructions that when executed by the one or more processors cause the one or more processors to implement the workflow manager key manager and key distribution manager . For example the workflow manager may be a collection of virtual machines with a managing virtual machine that assigns workflows to be processed by the collection of virtual machines. A key management system may be a collection of virtual machines with a managing virtual machine that implement the key manager and key distribution manager functionality. In another example the workflow manager key manager and key distribution manager are one or more programs that share a physical machine and operating system. In a further example the workflow manager may be operated by a third party. The key management system may be operated by a service provider to provide a key manager and key distribution manager functionality. The key management system may distribute key information to the workflow manager such as information that describes the key but the key itself is not released to a client the third party or the workflow manager .

In illustrative examples of specific embodiments are shown including SSL systems secure storage and certificate management systems . Turning now to an illustrative example of a key management system environment used to aid in SSL certificate rotation in accordance with one embodiment is shown. Using the processes discussed in and or an SSL certificate may be prepared for use with computing resources acting as SSL terminators on behalf of a client. In the embodiment shown an asymmetric keypair is generated for use in SSL communications. The key manager communicates key information to a workflow manager . In one embodiment the workflow manager selects an SSL processing template from a group of templates as seen in and uses the template to generate a workflow . In another embodiment the workflow manager receives the key information and processes the key information the same way without selecting a workflow. Whether a workflow was selected and created or not the workflow manager creates a certificate signing request CSR using the key information and sends the CSR to a certificate authority . If the certificate authority is satisfied by the identity of the client behind the CSR the certificate authority returns a signed certificate . The workflow manager may return the signed certificate to the key manager . The key manager may send at least part of the keypair and certificate to a key distribution manager . The key distribution manager may distribute the signed certificate and keypair to computing resources acting as secure communications terminators on behalf of the client. For example the signed certificate and a private key of the keypair may be distributed to a set of load balancers or a load balancer management system that terminate SSL on behalf of the client.

Secure communications may not be the only use for key distribution. For example in a distributed storage environment using encrypted data may also use key rotation. Storage resources may for instance have access to a list of encryption keys used for storage. New incoming data may be encrypted with a preferred key but outgoing decrypted data may use any key known to the storage resource . By loading a rotated key as non preferred and then switching the key to preferred after verifying receipt of the key storage resources are not put in a position of being unable to access encrypted data due to lack of a proper key. In FIG. an illustrative example of a key management system used to aid in storage encryption key rotation in accordance with one embodiment is shown. A generated key may be communicated from a key manager to a key distribution manager . The key distribution manager may distribute the key as a non preferred key to storage resources within a secure storage service . After receiving an acknowledgement from the storage resources or an exception allowing the workflow manager to continue the key distribution manager may request the storage resources use the key as the preferred key.

Turning now to an illustrative example of key management systems and processing during SSL certificate rotation using a workflow in accordance with one embodiment is shown. A key manager generates a public key and private key . The public key is shared with a workflow manager which uses the public key to determine a workflow to generate. Following the workflow the workflow manager uses the public key and private key to create a CSR . Following the next operation in the workflow the CSR is sent to a certificate authority . The certificate authority uses the CSR to create a certificate and return it to the workflow manager . The workflow manager using the workflow then returns the certificate to the key manager . As the workflow has been completed the certificate is marked as active and ready for use. Upon a request by a client to provision a load balancer the private key and certificate are sent to a load balancer manager by the key manager . The load balancer manager may cause the private key and certificate to be installed on a provisioned load balancer with secure communications termination.

Turning now to an illustrative example of a process that may be used to activate a generated key using a workflow in accordance with one embodiment is shown. The process may be accomplished by a key manager and workflow manager as seen in . The key manager generates a secret. A workflow manager receives the secret and determines a workflow template associated with the secret that may be used to prepare the secret for use. Using the template the workflow manager generates a workflow based at least in part on the selected template. The workflow manager then processes the workflow. Upon completing the workflow the workflow may report the completion to the key manager in which the secret is marked as active.

Some or all of the process or any other processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

Turning now to an illustrative example of a process that may be used to distribute a generated key in accordance with one embodiment is shown. The process may be completed by a key manager and key distribution manager shown in . A secret is generated . The key manager determines which computing resources should receive the generated secret. The list of resources may be received from a client determined by a class of secrets determined through metadata or determined by the key manager based at least in part on the key generated. The key distribution manager communicates the secrets to the computing resources as non preferred or alternate secrets. The key distribution manager receives an acknowledgement from the computing resources or a computing resource is excepted from acknowledgement. The key distribution manager then requests the computing resources to mark the secret as preferred or default. In some embodiments the workflow management system then reports the success to the key manager that marks the secret as active.

Turning now to an illustrative example of a process that may be used to rotate a generated key in accordance with one embodiment is shown. In some embodiments error processing may be included in a workflow and or processing of a secret. The process may be completed by a key manager and key distribution manager shown in . The key manager and or key distribution manager check to see if a security policy triggers a start to key rotation. If no the process may wait and check again . If so the key manager generates a secret. A list of computing resources needing the secret is determined by the key manager. The workflow manager may check for resources that have been granted exceptions and remove any excepted resources from the list of computing resources. The key distribution manager then communicates the secret as a non preferred secret to the resources remaining as part of the list computing resources. Acknowledgements from computing resources may be received . Resources having acknowledged can be removed from the list of computing resources to receive the secret. If not all resources have acknowledged and an initial timeframe for completing the acknowledgement phase has passed an alarm may be communicated to administrators. Whether or not the initial timeframe has passed communication of the key as non preferred may be reattempted on servers that have not acknowledged the receipt and or have not been excepted from an acknowledgement by repeating operations to . If all acknowledgements have been satisfied or excepted the key distribution manager requests the computing resources to mark the secret as preferred. The client may then be billed for use of the processing and or workflow. In some embodiments a client is charged per machine. In other embodiments the client may be charged for use of the workflow.

While specific modules and systems have been discussed as having certain functionality for clarity of explanation it should be recognized that functionality may be moved between modules and or systems without departing from the scope of this disclosure. For example while the key manager has been discussed as capable of generating a key it should be recognized that a key distribution manager may generate or direct to be generated a key. A key distribution manager may also determine a list of computing resources that should receive a key.

In some embodiments clients vendors and the service provider may share and or charge for workflows that generate and process secrets. By selecting a workflow and or secret from the marketplace a client may have a secret prepared and installed for use without manual intervention. For example a client may choose to request SSL through a secure terminator like a load balancer. By selecting an SSL workflow the client may not need to know about the generation of an asymmetric keypair certificate signing request or installation of a certificate and private key. The client may select and or pay for the SSL certificate and request a load balancer be provisioned with SSL termination. Billing may be accomplished by the certificate authority by completion of the workflow rather than upon sending of the certificate. In another example a client may desire secure storage. The client may select an encryption secret workflow that can be used with long term storage in a program execution service. The encryption secret workflow may complete and store the secret with the program execution service s long term storage service. The client may then store encrypted data within the long term storage.

Turning now to an illustrative example of a process that may be used to activate a generated key using a marketplace in accordance with one embodiment is shown. In some embodiments secrets and or workflows may be sold in a marketplace. By purchasing from the marketplace the secret and workflow are bundled together. For example a marketplace may allow a client to select a certificate authority from which an SSL certificate may be obtained. The secret and workflow may be prepared by the vendor to quickly integrate with a service provider s systems such as seen in . In the process shown a client may select a workflow template secret or vendor from a marketplace. Based on the selection a secret is generated by the key manager. A workflow for processing the secret is generated based at least in part on the generated secret and or selection. The workflow may then be processed to make the secret useful. Upon completion of the workflow the secret may be marked as active and the client charged for the processing of the workflow.

Turning now to an illustrative example of an environment that may be used to activate a generated key in accordance with one embodiment is shown. A key management system may interact with various support systems such as those found in a program execution service. The key management system may communicate with a set of computing resources to not only distribute or rotate keys to client computing resources but also to request computing resources to process workflows and or keys. The key management system may also communicate with third party systems such as certificate authorities to place the generated keys in a useful state. The key management system may also use a workflow marketplace where clients vendors and the service provider may sell and submit workflows. The key management system may also tie in with existing administration systems to provide a single portal and a source of information such as receiving information about offline servers to remove from the list of servers to receive the key. The key management system may also integrate with existing audit systems to provide feedback and tracking information for work performed by and on behalf of the key management system.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device handling a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the Web server in the form of HTML XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the Web server. It should be understood that the Web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein.

The data store can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect. For example the data store illustrated includes mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as for page image information and to access right information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. In one example a user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a Web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop or laptop computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP OSI FTP UPnP NFS CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a Web server the Web server can run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the a system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the invention to be practiced otherwise than as specifically described herein. Accordingly this invention includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the invention unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

