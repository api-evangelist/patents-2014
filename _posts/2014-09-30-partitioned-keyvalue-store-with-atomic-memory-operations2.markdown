---

title: Partitioned key-value store with atomic memory operations
abstract: A partitioned key-value store is provided that supports atomic memory operations. A server performs a memory operation in a partitioned key-value store by receiving a request from an application for at least one atomic memory operation, the atomic memory operation comprising a memory address identifier; and, in response to the atomic memory operation, performing one or more of (i) reading a client-side memory location identified by the memory address identifier and storing one or more key-value pairs from the client-side memory location in a local key-value store of the server; and (ii) obtaining one or more key-value pairs from the local key-value store of the server and writing the obtained one or more key-value pairs into the client-side memory location identified by the memory address identifier. The server can perform functions obtained from a client-side memory location and return a result to the client using one or more of the atomic memory operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563426&OS=09563426&RS=09563426
owner: Los Alamos National Security
number: 09563426
owner_city: Los Alamos
owner_country: US
publication_date: 20140930
---
This invention was made under a Cooperative Research and Development Agreement between EMC Corporation and Los Alamos National Security LLC. The United States government has rights in this invention pursuant to Contract No. DE AC52 06NA25396 between the United States Department of Energy and Los Alamos National Security LLC for the operation of Los Alamos National Laboratory.

The present application is related to U.S. patent application Ser. No. 14 143 758 filed Dec. 30 2013 entitled Partitioned Key Value Store With One Sided Communications for Secondary Global Key Lookup by Range Knowledgeable Clients U.S. patent application Ser. No. 14 143 771 filed Dec. 30 2013 entitled Parallel Sort With a Ranged Partitioned Key Value Store in a High Performance Computing Environment and U.S. patent application Ser. No. 14 143 749 filed Dec. 30 2013 entitled Parallel Storage System with Burst Buffer Appliance for Storage of Partitioned Key Value Store Across a Plurality of Storage Tiers each incorporated by reference herein.

The field relates generally to data storage and more particularly to partitioned key value data stores.

Key value stores are a powerful tool to store and retrieve large amounts of data for activities such as data analysis. One difficulty in creating these key value stores is the need for parallelism. The large amount of data that must be stored makes a key value store on a single node impractical for most workloads. Thus distributed key value stores have been proposed for storing a partitioned key value store often referred to as a partitioned data store on a number of parallel nodes.

Multidimensional Data Hashing Indexing Middleware MDHIM is an example of a framework for partitioned data stores. In a typical MDHIM implementation one or more MDHIM clients run on each of the compute nodes and communicate with a plurality of MDHIM servers also running on the same or different compute nodes in a parallel file system. Each MDHIM server stores a partition of the key value store. A given MDHIM server storing a particular sub range of the key value store is contacted to read or write key values within the sub range.

One challenge in a partitioned key value store is the amount of key value data that must be transferred stored and processed. Thus MDHIM employs low latency Message Passing Interface MPI communications across the user space of high performance computing HPC compute nodes to create a single virtual key value store across a set of local key value stores using ordered key ranges.

While MDHIM has significantly improved the performance of partitioned data stores in an HPC environment a need remains for a partitioned data store that supports server side atomic memory operations.

Illustrative embodiments of the present invention provide partitioned key value stores with atomic memory operations. In one exemplary embodiment a server performs a memory operation in a partitioned key value store by receiving a request from an application for at least one atomic memory operation the atomic memory operation comprising a memory address identifier and in response to the atomic memory operation performing one or more of i reading a client side memory location identified by the memory address identifier and storing one or more key value pairs from the client side memory location in a local key value store of the server and ii obtaining one or more key value pairs from the local key value store of the server and writing the obtained one or more key value pairs into the client side memory location identified by the memory address identifier. The partitioned key value store is optionally based on a MDHIM framework that employs MPI communications.

According to one aspect of the invention program control returns to the application once the server receives the request from the application for the atomic memory operation. According to another aspect of the invention the server optionally performs one or more functions obtained from the client side memory location. The server returns a result of the one or more functions to the client using one or more of the atomic memory operations.

As noted above illustrative embodiments described herein provide significant improvements relative to conventional arrangements. In some of these embodiments use of server side atomic memory operations in a partitioned key value store offloads the computation for Input Output I O operations to the server and thereby permits the client to perform other work while the server side processing occurs. In this manner server directed data flow is provided for improved data analytics and HPC tasks.

Illustrative embodiments of the present invention will be described herein with reference to exemplary partitioned data stores and associated clients servers storage arrays and other processing devices. It is to be appreciated however that the invention is not restricted to use with the particular illustrative partitioned data stores and device configurations shown. Accordingly the terms partitioned data store and partitioned key value store as used herein are intended to be broadly construed.

Aspects of the present invention provide partitioned key value stores with atomic memory operations. While the exemplary embodiments of the present invention employ MDHIM other MPI Linked partitioned data stores can be employed as would be apparent to a person of ordinary skill in the art. As used herein an atomic memory operation comprises a memory operation that is applied to memory and either completely succeeds or completely fails. There is no danger of a partial completion which could result in a data inconsistency .

According to one aspect of the invention server side atomic memory operations in a partitioned key value store offloads at least a portion i.e. some or all of the computation for Input Output I O operations to the server and thereby permits the client to perform other work while the server side processing occurs. In one exemplary embodiment the application requests the server to perform one or more functions or procedures that are stored in a particular client side memory location. The client transmits the functions and or procedure from the memory location to the server. The server executes the functions and or procedure and returns to the result to a client side memory location identified by the client using at least one atomic memory operation. According to another aspect of the invention server directed data flow is provided for improved data analytics and high performance computing tasks.

In another exemplary embodiment an aggregator client collects data from multiple clients for example using an HPC interconnect network between the clients and sends the data to the server to reduce network traffic. The aggregator client uses one or more list functions discussed further below in conjunction with to send the set of aggregated requests in a single network message to the server. In an exemplary HPC environment the disclosed asynchronous storage access methods allow the clients to run asynchronously and perform other tasks while the server is performing the requested functions on behalf of the client.

In one exemplary implementation the MDHIM client and MDHIM server use a modified protocol to communicate as discussed further below in conjunction with . Generally the MDHIM client will provide a memory address identifier to the MDHIM server. When processing a put operation the MDHIM server will perform a Remote Direct Memory Access RDMA read operation of the memory buffer identified by the memory address identifier and then insert the obtained key value pair into the local key value store. When processing a get operation the MDHIM server will perform a get on the local key value store and then an RDMA write of the obtained key value s into the client memory location identified by the memory address identifier.

The partitioned key value store described for example in U.S. patent application Ser. No. 14 143 749 filed Dec. 30 2013 entitled Parallel Storage System with Burst Buffer Appliance for Storage of Partitioned Key Value Store Across a Plurality of Storage Tiers decreases latency for distributed and ranged key value store operations for HPC supercomputers that have optimized message passing libraries such as Message Passing Interface MPI .

The atomic memory operations disclosed herein comprise one sided remote atomic memory operations such as one sided Remote Direct Memory Access RDMA operations that provide server side directed data flow to further optimize MDHIM. The provided server side directed I O alleviates clients processors from doing I O activity and thereby improves computational throughput. In addition the server side directed I O improves the analytic ability and throughput of MPI linked parallel applications running on large HPC or cloud compute clusters.

According to a further aspect of the invention MDHIM clients can send stored procedures or pointers to stored procedures to execute on the MDHIM servers which will allow extremely efficient filtering for example on the MDHIM servers where the smaller result is then stored directly by the MDHIM server into the memory of the MDHIM client. In the case of filter operations for example the server typically stores a vast amount of data only a portion of which is of interest to the client. Thus the server can perform a filter operation and store the desired results in the memory of the client.

For applications doing large bulk get put operations for example as is typical for scientific computing in HPC the ability to offload the I O computation to the MDHIM server is particularly important. This will be especially useful for example for multi tenancy virtual machines such as those in a cloud environment in which processes waiting on I O will not perturb active processes with their I O interrupts. Even for single tasking supercomputers this will benefit applications that can do asynchronous operations so that the applications can do other useful work while the server side I O occurs.

An exemplary architecture for an MDHIM partitioned key value store is discussed further below in conjunction with . For a more detailed discussion of MDHIM see for example James Nunez et al. Multidimensional Data Hashing Indexing Metadata Middleware MDHIM Project Ultrascale Systems Research Center High Performance Computing Systems Integration 2012 2013 incorporated by reference herein.

In the exemplary embodiment of a burst buffer appliance in the partitioned key value store is configured to store key value data on first and second storage tiers comprising respective disjoint subsets of storage. In this manner the burst buffer appliance provides access to an expanded storage footprint including multi tier key value storage.

As shown in the exemplary burst buffer appliance comprises parallel log structured file system PLFS burst buffer software that provides access to an exemplary flash storage tier and an exemplary disk storage tier . The exemplary flash storage tier may be integrated within the burst buffer appliance or an external storage device. The parallel log structured file system PLFS may be based on for example John Bent et al. PLFS A Checkpoint Filesystem for Parallel Applications Int l Conf. for High Performance Computing Networking Storage and Analysis 2009 SC09 Nov. 2009 incorporated by reference herein.

As shown in the exemplary burst buffer appliance is configured to process tiering commands from the MDHIM server on compute node as well as read and write commands from the local key value store on compute node .

The burst buffer appliance is configured to communicate with clients object storage servers and MDHIM servers over a network. The burst buffer appliance in the present embodiment is assumed to comprise a flash memory or other high speed memory having a substantially lower access time than the disk storage tier . The burst buffer appliance may optionally comprise an analytics engine and may include other components.

Although flash memory will often be used for the high speed memory of the burst buffer appliance other types of low latency memory could be used instead of flash memory. Typically such low latency memories comprise electronic memories which may be implemented using non volatile memories volatile memories or combinations of non volatile and volatile memories. Accordingly the term burst buffer appliance as used herein is intended to be broadly construed so as to encompass any network appliance or other arrangement of hardware and associated software or firmware that collectively provides a high speed memory and optionally an analytics engine to control access to the high speed memory. Thus such an appliance includes a high speed memory that may be viewed as serving as a buffer between a computer system comprising clients executing on compute nodes not shown and a file system such as storage tiers for storing bursts of data associated with different types of I O operations.

The burst buffer appliance further comprises a processor coupled to a memory. The processor may comprise a microprocessor a microcontroller an application specific integrated circuit ASIC a field programmable gate array FPGA or other type of processing circuitry as well as portions or combinations of such circuitry elements. The memory may comprise random access memory RAM read only memory ROM or other types of memory in any combination. The memory and other memories disclosed herein may be viewed as examples of what are more generally referred to as computer program products storing executable computer program code.

Also included in the exemplary burst buffer appliance is network interface circuitry. The network interface circuitry allows the burst buffer appliance to communicate over the network with other devices. The network interface circuitry may comprise for example one or more conventional transceivers.

The exemplary storage tiering functionality of the burst buffer appliance may be implemented at least in part in the form of software that is stored in memory and executed by a processor.

The burst buffer appliance comprising processor memory and network interface components as described above is an example of what is more generally referred to herein as a processing device. Each of the devices herein may similarly be implemented as a processing device comprising processor memory and network interface components.

Although only a single burst buffer appliance is shown in the embodiment a given partitioned key value store in other embodiments may comprise multiple burst buffer appliances .

The exemplary flash storage tier and exemplary disk storage tier in the present embodiment are arranged into first and second storage tiers also denoted as Storage Tier 1 and Storage Tier 2 although it is to be appreciated that more than two storage tiers may be used in other embodiments. Each of the exemplary flash storage tier and exemplary disk storage tier may be viewed as being representative of an object storage target of a corresponding object storage server. The first and second storage tiers comprise respective disjoint subsets of the object storage servers. The different storage tiers and in this embodiment comprise different types of storage devices having different performance characteristics. For a more detailed discussion of the performance characteristics of the different exemplary storage tiers and see for example U.S. patent application Ser. No. 14 143 749 filed Dec. 30 2013 entitled Parallel Storage System with Burst Buffer Appliance for Storage of Partitioned Key Value Store Across a Plurality of Storage Tiers incorporated by reference herein.

The exemplary embodiment of provides an MDHIM partitioned key value store with tiered storage where the MDHIM server executes on a compute node . The exemplary MDHIM server can be implemented in a conventional manner and be unaware of tiering provided by the burst buffer appliance and transparently benefit from the improved performance. In another variation the MDHIM server can be burst buffer aware and interface to the application programming interface API of the burst buffer appliance to help make intelligent tiering decisions using one or more tiering commands as shown in .

As shown in the exemplary partitioned key value store comprises an exemplary application such as application that can read write and or query key value data in the exemplary partitioned key value store using one or more MDHIM clients such as the exemplary MDHIM client in a similar manner to . One or more MDHIM servers such as MDHIM server executing on the burst buffer appliance control the storage of key value data using a key value abstraction layer and a local key value store .

The exemplary burst buffer appliance further comprises the PLFS burst buffer software that provides access to an exemplary flash storage tier and an exemplary disk storage tier in a similar manner to . The exemplary flash storage tier may be integrated within the burst buffer appliance as shown in or an external storage device.

MDHIM then spawns a listener thread to receive MDHIM communications from other processes making calls to mdhim such as mdhim get or mdhim put. As discussed further below subsequent calls to mdhim such as mdhim put or mdhim get then create an MPI unexpected message which is sent to one of the MDHIM servers. MDHIM can run as client server where each compute node is running both an MDHIM client and an MDHIM server.

MDHIM communications from other processes are processed in a first layer comprising the Message Passing Interface MPI or PGAS followed by an abstract communications layer MDHIM Server Thread abstract key value interface and key value operations such as leveldb and Pbl Isam in a known manner.

Communications to MDHIM Listener threads running in other processes compute nodes are generated by an application that provides messages to an MDHIM application programming interface API using an MDHIM client library and an abstract communications layer . Communications are sent to other processes using the Message Passing Interface MPI or PGAS .

The exemplary conventional MDHIM application programming interface API comprises the following exemplary operations 

In an exemplary embodiment the local key values are sorted locally by the local store and globally by the overall MDHIM framework. The local and global sorting can be leveraged to provide batch input output TO operations that aggregate multiple requests into batch operations on one or more sorted ranges. In this manner desired data can be obtained using a reduced number of messages over the network. For a more detailed discussion of key sorting techniques see for example U.S. patent application Ser. No. 14 143 758 filed Dec. 30 2013 entitled Partitioned Key Value Store With One Sided Communications for Secondary Global Key Lookup by Range Knowledgeable Clients incorporated by reference herein.

HPC applications typically will access contiguous sets of keys in parallel. Therefore one process in an HPC job will access one sorted range and another will access a different sorted range. The global sort allows a better storage access pattern where each process only queries from a small set of the range server nodes. In addition the local sort allows individual key requests to result in fewer storage operations.

The exemplary application initially issues an aggregated get batch request to the client during a first step as follows 

The range knowledgeable client knows the keys in the range of 0 2 are stored by the first MDHIM server and sends the get batch request to the appropriate server during a second step as follows 

In this manner multiple requests are aggregated into batches to send fewer messages over the network.

Without a global sort even if the application knows that it wants a sorted batch of keys the MDHIM client must break this into multiple small individual requests to a large number of servers. The global sorting allows the single requests from the application to the client to become a single request over the network between one client and one server .

As noted above in one exemplary implementation the MDHIM client and MDHIM server use a modified protocol to communicate as discussed further below in conjunction with . Generally the MDHIM client will provide a memory address identifier to the MDHIM server. When processing a put operation the MDHIM server will perform a Remote Direct Memory Access RDMA read operation of the memory buffer identified by the memory address identifier and then insert the obtained key value pair into the local key value store. When processing a get operation the MDHIM server will perform a get on the local key value store and then an RDMA write of the obtained key value s into the client memory location identified by the memory address identifier.

The exemplary mdhim execute command comprises a function point that provides a pointer to where the desired procedure to be executed by the server is stored. The desired procedure can be an arbitrary function or a set of function calls. In one exemplary embodiment the application requests the MDHIM Server to perform one or more functions or procedures that are stored in a particular client side memory location. The MDHIM Client transmits the functions and or procedure from the memory location to the MDHIM Server . The MDHIM Server executes the functions and or procedure and returns to the result to a client side memory location identified by the MDHIM Client using at least one atomic memory operation. The mdhim poll command allows the client to query whether the previously issued remote procedure request is complete.

It is noted that the pseudo code for a server side get operation would be readily apparent to a person of ordinary skill in the art based on the pseudo code in for a put operation.

It is to be appreciated that the particular operations and associated messaging illustrated herein are exemplary only and numerous other types of operations and messaging may be used in other embodiments.

It should therefore be understood that in other embodiments different arrangements of additional or alternative elements may be used. At least a subset of these elements may be collectively implemented on a common processing platform or each such element may be implemented on a separate processing platform.

Also numerous other arrangements of computers clients servers storage devices or other components are possible in the partitioned key value stores of the present invention. Such components can communicate with other elements of the partitioned key value store over any type of network or other communication media.

As indicated previously components of a partitioned key value store and burst buffer appliance as disclosed herein can be implemented at least in part in the form of one or more software programs stored in memory and executed by a processor of a processing device. A memory having such program code embodied therein is an example of what is more generally referred to herein as a computer program product. 

The partitioned key value store burst buffer appliance or portions thereof may be implemented using one or more processing platforms each comprising a plurality of processing devices. Each such processing device may comprise processor memory and or network interface components.

As indicated above atomic memory operations in a partitioned key value store such as that described herein can be implemented at least in part in the form of one or more software programs stored in memory and executed by a processor of a processing device such as a computer or server. A memory or other storage device having such program code embodied therein is an example of what is more generally referred to herein as a computer program product. Certain system components are implemented using a combination of software and hardware.

It should again be emphasized that the above described embodiments of the invention are presented for purposes of illustration only. Many variations and other alternative embodiments may be used. For example the disclosed techniques are applicable to a wide variety of other types and arrangements of partitioned key value stores and associated clients servers and other processing devices that can benefit from the atomic memory operation functionality as described herein. Also the particular configurations of system and device elements shown in can be varied in other embodiments. Moreover the various assumptions made above in the course of describing the illustrative embodiments should also be viewed as exemplary rather than as requirements or limitations of the invention. Numerous other alternative embodiments within the scope of the appended claims will be readily apparent to those skilled in the art.

