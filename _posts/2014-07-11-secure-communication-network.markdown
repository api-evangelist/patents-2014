---

title: Secure communication network
abstract: The present invention is directed to a secure communication network that enables multi-point to multi-point proxy communication over the network. The network employs a smart server that establishes a secure communication link with each of a plurality of smart client devices deployed on local client networks. Each smart client device is in communication with a plurality of agent devices. A plurality of remote devices can access the smart server directly and communicate with an agent device via the secure communication link between the smart server and one of the smart client devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930576&OS=08930576&RS=08930576
owner: KE2 Therm Solutions, Inc.
number: 08930576
owner_city: Washington
owner_country: US
publication_date: 20140711
---
This application claims priority to and is a continuation in part of U.S. patent application Ser. No. 13 950 365 filed on Jul. 25 2013 which is incorporated herein by reference in its entirety.

The present invention is directed generally to computer networks and more specifically to a secure communication network that enables multi point to multi point communication between computing devices.

Computer networks and the exchange of data between networked computing devices are well known in the art. Examples of common communication protocols include User Datagram Protocol UDP Internet Protocol IP Transmission Control Protocol TCP Hypertext Transfer Protocol HTTP and File Transfer Protocol FTP to name a few. Many private computer networks such as a local area network LAN provide access to the Internet or other public networks to enable communication outside of the private computer network. Further many businesses establish a virtual private network VPN so that off site employees can securely access their company s private network as if directly connected to that network. While this extended connectivity is useful and desirable it raises issues of data security and access to private computer networks by unauthorized users.

To address these security concerns private computer networks that provide access to the Internet may employ numerous security measures. These measures may include the use of authentication credentials e.g. account names and passwords the use of a firewall designed to prevent unauthorized access to a computer network and the use of cryptographic protocols that provide communication security over the Internet. While all of these measures either alone or in combination address security concerns they are not without drawbacks.

For example many of these security measures require configuration of the computing devices on the private computer network and or configuration of the network s firewall. While this configuration is routine for IT professionals it is complicated or impossible for many users that do not have knowledge of network architecture. As a result users must hire expert assistance to configure their private computer network or forego security entirely. Furthermore the implementation and management of communication capabilities on the private computer network typically requires the use of one or several dedicated network devices which can be relatively large and expensive to operate and maintain.

Thus there remains a need in the art for a secure communication network that enables remote access to computing devices located behind a network firewall within a private computer network.

The present invention is directed to a secure communication network that enables a plurality of remote devices to securely access a plurality of computing devices located behind a network firewall within a local client network. Each of the computing devices is referred to herein as an agent device. An agent device may comprise any IP Internet Protocol capable device e.g. laptop computer tablet desktop computer printer storage device or specialized control device such as a controller for an embedded control system.

In accordance with the invention the secure communication network includes a smart client device deployed within the local client network that communicates either directly or indirectly e.g. through a network switch with each of the agent devices. The smart client device also communicates over a secure communication link with a smart server located outside the client network. With such communication established each remote device can access the smart server directly over an Internet connection and if the remote device is properly authenticated the smart server proxies port application specific device communications between the remote device and one or more agent devices via the established secure communication link between the smart server and smart client device. The services supported by the network include those provided in a web access mode a raw access mode and an application programming interface API mode.

Advantageously the secure communication network of the present invention enables multi point to multi point communication between remote devices and agent devices located behind network firewalls within the local client networks. In addition the secure communication network preferably employs standard data link layer communication protocols to establish secure communication through existing network firewalls without configuration of the firewalls. Further the smart client device is preferably implemented in a small profile inexpensive hardware package operable to plug into an existing client network and establish a secure communication link with the smart server without complex configuration of the network.

The present invention is directed to a secure communication network that enables a plurality of remote devices to securely access a plurality of agent devices located within a client network. The invention will be described in detail below with reference to various exemplary embodiments in which the services supported by the network include those provided in a web access mode a raw access mode and an API mode however it should be understood that the invention is not limited to these particular services and the network may be used to support any combination of these services or even other types of services. In addition although the exemplary embodiment is described as embodying several different inventive features one skilled in the art will appreciate that any one of these features could be implemented without the others in accordance with the invention.

Referring to a secure communication network in accordance with an exemplary embodiment of the present invention is shown generally as reference numeral . In general network includes a local client network a smart server described in greater detail below and a plurality of remote devices each of which is in communication with the Internet or any other wide area network with an Internet connection. Client network includes a firewall connected to a network router which is in turn connected to network switches and . Firewall network router and network switches and are off the shelf devices that preferably communicate using a standard data link layer protocol as is known in the art. Network switch is connected to a smart client device described in greater detail below which is in turn connected to a plurality of agent devices . Network switch is also connected to a plurality of other computing devices e.g. computers or peripheral devices that are not agents of smart client device .

It should be understood that the invention is not limited to the network configuration of the exemplary embodiment shown in . For example smart client device could be placed between network router and network switch in which case network switch would be connected to agent devices . In this example smart client device would communicate with agent devices through network switch . Of course other network configurations may also be used in accordance with the present invention.

Each of agent devices comprises any IP Internet Protocol capable device e.g. laptop computer tablet desktop computer printer storage device or specialized control device such as a controller for an embedded control system i.e. any embedded control environment . Exemplary control systems include heating ventilation air conditioning and refrigeration HVAC R systems energy management systems building automation systems automotive and transportation systems lighting control systems security systems surveillance systems IP cameras and kiosks. Of course other types of agent devices are also within the scope of the invention.

While a single client network is shown in it should be understood that network can support a plurality of client networks each of which includes a smart client device similar to smart client device in communication with a plurality of agent devices similar to agent devices as well as other network devices known in the art.

Smart server is assigned a public IP address and a DNS name to enable access by remote devices . Each of remote devices may comprise any type of computing or communication device known in the art that is operable to access the Internet via a wired wireless cellular or satellite connection. Each of remote devices hosts a Hyper Text Markup Language HTML compliant browser application or equivalent program i.e. a web browser that can be used to connect with smart server using either its public IP address or DNS name. Exemplary remote devices that are suitable for use with the present invention include smart phones e.g. iPhone Android and Blackberry devices and computers tablets that run on any type of operating system e.g. Mac Linux Android or Windows .

As described in greater detail below each of remote devices connect with smart server so as to be able to communicate with one or more available agent devices via a secure communication link established between smart server and smart client device . The communication between each of remote devices and agent devices is implemented via different modes of communication. In one aspect a web access mode is provided in which an HTML compliant agent device is accessed by a remote device with a standard web browser i.e. the remote device does not require any specific client application . In another aspect a raw access mode is provided in which a client application on remote device accesses a server application on agent device i.e. a standard client server application . In yet another aspect an API mode is provided in which a remote application on remote device accesses an API application on agent device wherein various embodiments are described below for the API mode .

The smart client device and smart server which together enable implementation of the present invention will be described in detail below.

In the exemplary embodiment smart client device preferably includes a microprocessor programmed to perform the methods described below in connection with . The microprocessor is in communication with circuitry operable to implement communication using data link layer protocols. Smart client device also includes non volatile memory for storing custom software operating parameters and device configuration settings as well as random access memory RAM for storing communication information and other run time parameters. Preferably the microprocessor circuitry non volatile memory and RAM of smart client device are implemented in a small profile inexpensive hardware package operable to plug into an existing client network. Alternatively smart client device may comprise custom software running on off the shelf router hardware. In the exemplary embodiment smart client device is an embedded IP Internet Protocol capable device for example the MikroTik RB450G with a 680 MHz processor 256 MB Ram 5 Gigabit Ethernet Ports 1 microSD slot 1 PoE 10 28 volt with custom software running a Linux operating system.

Smart client device includes a plurality of ports for communication with other devices. At least one port is an Internet accessible port configured to connect for communication outside of client network . In this embodiment the Internet accessible port is configured to connect via dynamic host configuration protocol DHCP . Also one or more ports of smart client device are configured to connect to a computing device that enables management of the device. In addition a plurality of ports of smart client device are configured to connect to agent devices located within client network . Alternatively if smart client device is placed between network router and network switch a single port of smart client device is configured to connect to network switch which is in turn connected to agent devices . Most preferably the ports of smart client device include standard Ethernet connectors. Alternatively the smart client device may include wireless communication circuitry that enables wireless connections to specific devices.

The custom software i.e. set of applications on smart client device is preferably operable to perform the following management and proxy functions 

Each of these functional capabilities will be described in more detail below with reference to an exemplary operation of smart client device . In one embodiment the custom software on smart client device may also include a unified API framework that is used for communication with agent devices that operate in the API mode as described in greater detail below.

Referring to an exemplary method of deploying smart client device in client network is described with reference to steps . First at step a user connects a designated Internet accessible port of smart client device to client network . At step the user connects a computing device such as a workstation laptop computer tablet or smart phone to a port of smart client device . As will be seen this computing device provides management of smart client device and is hereinafter referred to as a management device. Upon detection of the management device smart client device assigns the management device a management local IP address. The user then opens the management device s browser directed to the smart client device s IP address or device name.

At step smart client device presents an HTML form to the user on the management device. The information in the HTML form includes an identity of smart client device pre defined at the factory using the format xxxxx.domainname.com a password user defined agent ports user defined port numbers services of agent devices the IP address or DNS name of smart server the status of smart client device connected not connected and a list of exceptions user defined to denote any agent devices that should be ignored . It should be understood that the agent ports may comprise one or more port numbers for HTML compliant agent devices that communicate using the web access mode e.g. ports 80 443 21 22 23 etc. and or one or more port numbers for other types of agent devices that communicate using either the raw access mode or API mode e.g. ports 489 958 1122 etc. . As such the present invention enables access to any type of agent device whether compliant with a web standard or not. In one embodiment the user makes selections from a dropdown list of port numbers and associated services e.g. port 80 HTTP port 22 SSH etc. in order to define the port numbers services supported by smart client device . At step the user enters the required information into the HTML form and clicks a Save button to save the entered information. At step smart client device stores the information in non volatile memory upon the user s selection of the Save button. Once smart client device has been deployed as just described it is ready for operation.

Referring to an exemplary method in which smart client device establishes and maintains a list of agent devices for client network is described with reference to steps . At step smart client device scans the agent ports that were entered by the user in the HTML form during deployment of smart client device to look for agent devices that are published on the local network. Again the agent ports may comprise one or more port numbers for HTML compliant agent devices and or one or more port numbers for other types of agent devices. At step smart client device determines if any agent devices on the agent ports have responded to smart client device by acknowledging the scan. If not the method proceeds to the watchdog process of step described below . Otherwise at step upon receipt of an acknowledgement by one or more agent devices smart client device adds the responsive agent devices to an agent list maintained by smart client device .

The information on the agent list for each of agent devices will depend on the type of agent device and associated mode of communication for that device. For agent devices that are accessed using the web access mode the agent device information will include an identifier i.e. a reserved slot from smart server for the agent device a protocol number i.e. the communications protocol to be used by smart server to present an appropriate web user interface to a remote device and optionally an agent name. For agent devices that are accessed using the raw access mode the agent device information will include an identifier i.e. a reserved slot from smart server for the agent device connection parameters i.e. the information to be presented by smart server to enable a client application on a remote device to communicate with a server application on an agent device and optionally an agent name. For agent devices that are accessed using the API mode the agent device information will include an identifier i.e. a reserved slot from smart server for the agent device an API definition i.e. the set of commands to be presented by smart server to enable a remote application on a remote device to query and control an API application on an agent device and optionally an agent name.

At step smart client device compares the agent list to the list of exceptions that were entered by the user in the HTML form during deployment of smart client device . Any agent device identified on the list of exceptions is not processed by smart client device and thus no further communication with that agent device will occur. Smart client device then stores the updated agent list in non volatile memory at step . Preferably smart client device is capable of supporting fifty 50 or more agent devices simultaneously.

At step smart client device periodically performs a watchdog process using a time period specified in the custom software although the time period could alternatively be user configurable on the HTML form . In the exemplary embodiment the watchdog process is performed every 10 seconds. Each time the watchdog process is performed steps described above are performed so as to add any newly detected agent devices to the agent list and remove any agent devices previously on the agent list that are not responding to the scan. Also any agent device identified on the list of exceptions is not processed by smart client device . Accordingly the agent list is updated every 10 seconds.

Referring to an exemplary method in which smart client device establishes a secure communication link with smart server is described with reference to steps . At step when smart client device is connected within client network via the Internet accessible port as described above smart client device will be assigned a DHCP address i.e. a local IP address by network router or a DHCP server as is known in the art. At step once active on client network smart client device sends a connection request that includes the identity of smart client device pre defined at the factory to smart server . This connection request is sent to the IP address or DNS name of smart server that was entered by the user in the HTML form during deployment of smart client device . In the exemplary embodiment smart client device uses an outbound Secure Sockets Layer SSL connection over port 443 the port generally associated with secure Internet traffic and generally open in standard network configurations . If that attempt fails another SSL attempt is made over port 80. Additional attempts over other non standard ports e.g. ports 21 22 8080 are then performed if a connection is not made. It should be understood that any port may be used to establish a secure connection between smart client device and smart server in accordance with the present invention.

In step if the identity of smart client device is validated by smart server as will be described in more detail below with respect to the operation of smart server then a secure communication link is established between smart server and smart client device . Preferably all communications between smart server and smart client device after validation of the identity of smart client device are secured via the established SSL connection. Of course one skilled in the art will understand that other cryptographic protocols that provide communication security over the Internet could also be used. If the identity of smart client device is not validated by smart server then the method returns to step described above.

In step once smart client device receives notification from smart server that its identity has been validated smart client device publishes or transmits its agent list and the password that was entered by the user in the HTML form during deployment of smart client device to smart server . In step smart client device periodically performs a watchdog process using a time period specified in the custom software. This time period may vary depending on available bandwidth between smart client device and smart server and or the frequency at which the agent list changes. For example if a particular implementation provides a higher bandwidth connection and the agent list changes frequently the watchdog process may be performed every 30 seconds i.e. close to real time . However if a particular implementation provides a lower bandwidth connection and the agent list does not change as often the watchdog process may be performed every 600 seconds. Each time the watchdog process is performed step described above is performed so as to update the agent list and password sent to smart server .

As described above network can support a plurality of client networks each of which includes a smart client device similar to smart client device in communication with a plurality of agent devices similar to agent devices . It should be understood that the methods described above in connection with would be performed for each smart client device in network .

In the exemplary embodiment smart server comprises any suitable computer hardware with custom software programmed to perform the methods described below in connection with . In the exemplary embodiment smart server is an IP Internet Protocol capable device with custom software running a Linux operating system. Of course one skilled in the art will understand that other types of devices and operating systems could be used in accordance with the present invention.

Smart server includes a plurality of ports for communication with other devices. Each port is an Internet accessible port configured to connect for communication with a smart client device such as smart client device or a remote device such as one of remote devices . In this embodiment each Internet accessible port is configured to communicate via DHCP.

The custom software i.e. set of applications running on smart server is preferably operable to perform the following general functions 

 1 detection and validation of smart client devices i.e. detect and validate the identity of one or more smart client devices requesting a connection with the smart server 

 2 communication with smart client devices i.e. maintain an agent list and password for each smart client device 

 3 detection and validation of remote devices i.e. detect one or more remote devices and validate the user entered identity of a smart client device to which the user wants to establish a connection 

 5 communication between remote devices and agent devices i.e. proxy communications between remote devices and agent devices .

Each of these functional capabilities will be described in more detail below with reference to an exemplary operation of smart server in relation to a single smart client device i.e. smart client device and a single remote device i.e. one of remote devices . In one embodiment the custom software on smart server may also include a unified API framework that is used for communication with agent devices that operate in the API mode as described in greater detail below.

Referring to an exemplary method in which smart server establishes a secure communication link with smart client device is described with reference to steps . In step smart server monitors inbound communication traffic on the ports over which a smart client device may be attempting to establish communication e.g. ports 443 or 80 . If smart server does not detect any inbound communication in step the method returns to step . If smart server detects a request for connection in step it verifies the identity of the smart client device against a table of licensed connections i.e. a list of authorized smart client devices . In this embodiment smart server verifies the X.509 identity of the smart client device by walking up the certificate chain. If the identity of the smart client device does not match any licensed connections the smart client device will not be allowed to communicate further with smart server and the method returns to step . However in step if the identity of smart client device matches one of the licensed connections smart server generates a unique random shared key in accordance with the Advanced Encryption Standard AES and publishes the shared key via inter process communication IPC on the same host. In step smart server transmits the shared key along with its DNS identification and the port number for use in communication with smart server i.e. the port number on which the connection request was received to smart client device . Of course one skilled in the art will understand that smart server may verify the identity of smart client device using other verification techniques known in the art. As described above all communications between smart server and smart client device after validation of the identity of smart client device are preferably secured via the established SSL connection. Of course one skilled in the art will understand that other cryptographic protocols that provide communication security over the Internet could also be used.

In step with a secure communication link established between smart server and smart client device smart server receives an agent list and password from smart client device as described above and adds the agent list and password to its local server table in association with the identity of smart client device . In step smart server periodically performs a watchdog process in accordance with TCP IP standards. Each time the watchdog process is performed steps described above are performed so as to dynamically update the information stored on smart server . Thus the agent list and password stored on smart server will be essentially as current as the agent list and password maintained by smart client device .

Referring to an exemplary method in which smart server proxies communications between one of remote devices and one of agent devices via the secure communication link between smart server and smart client device is described with reference to steps . In step smart server monitors inbound communication traffic on the port over which one of remote devices may be attempting to establish communication e.g. port 443 . If smart server does not detect any inbound communication in step the method returns to step . If smart server detects a request for connection in step it presents a web user interface UI requesting the user of remote device to enter an identity of a smart client device i.e. an identity of a smart client device to which the user wants to establish a connection and a password i.e. the password that was entered by the user in the HTML form during deployment of the smart client device .

In step upon receipt of an identity and password from remote device smart server compares the identity and password against its local server table i.e. the local server table that stores the identity password and agent list for each smart client device . If the identity and password do not match any of the smart client devices in the local server table remote client device will not be allowed to communicate further with smart server and the method returns to step . However in step if the identity and password match one of the smart client devices in the local server table such as the identity and password for smart client device smart server presents a web UI that displays connection information to enable communication with one or more of the available agent devices associated with smart client device i.e. the agent devices included on the agent list . In step smart server proxies all communications between remote device and one or more agent devices via the secure communication link between smart server and smart client device . Importantly smart server does not interfere with or store the actual data flow between remote device and any of the agent devices .

It should be understood that the manner in which steps and are implemented will vary depending on the type of agent devices included on the agent list for smart client device and the associated modes of communication that are used to provide access to such agent devices as discussed below.

For those agent devices that are accessed via the web access mode the web UI of smart server presents remote device with a list of available agent devices and uses the protocol number of each agent device wherein the protocol number of each agent device is included in the agent list published or transmitted by smart client device to smart server to present a different web.UI for each communications protocol. Once remote device selects one or more available agent devices real time bidirectional communication is established between remote device and each selected agent device via the secure communication link between smart server and smart client device . In this case remote device need not host any custom application to enable communication with each selected agent device i.e. remote device only needs to host a standard web browser in this communication mode.

For those agent devices that are accessed via the raw access mode wherein services cannot be rendered in a standard web browser remote device hosts one or more client applications and each agent device hosts a server application to thereby enable communication via a client server based architecture e.g. iPhone application Android application web server application visual basic application visual C application Java application C application C application etc. . In this case the web UI of smart server presents the remote device with the connection parameters for each of the authorized agent devices wherein the connection parameters are included in the agent list published or transmitted by smart client device to smart server . Remote device can then apply one or more of the connection parameters to one or more client applications on remote device to thereby establish bidirectional communication with one or more agent device s in real time via the secure communication link between smart server and smart client device .

For those agent devices that are accessed via the API mode remote device hosts one or more remote applications to enable communication with an API application on each agent device discussed below . In this case the web UI of smart server presents the remote application with the API definition for each of the authorized agent devices wherein the API definitions are included in the agent list published or transmitted by smart client device to smart server . Remote device can then apply one or more of the API definitions to one or more remote applications on remote device to thereby establish bidirectional communication with one or more agent devices in real time via the secure communication link between smart server and smart client device .

As just discussed remote device hosts a remote application or possibly a plurality of remote applications to enable communication with those agent devices that are accessed via the API mode. One skilled in the art will understand that the API applications on some agent devices may use the same communication protocol e.g. when the agent devices are from the same vendor while the API applications on other agent devices may use different communication protocols e.g. when the agent devices are from different vendors . There are a variety of different ways in which communications between remote device and agent devices can be handled.

In one embodiment the API applications on agent devices are directly exposed to remote device . If the API applications on agent devices use the same communication protocol remote device can host a single remote application to communicate with each API application on each agent device . However if the API applications on agent devices use different communication protocols remote device must host a separate remote application for each of the communication protocols. For example the API applications on a first group of agent devices may use protocol A the API applications on a second group of agent devices may use protocol B and the API applications on a third group of agent devices may use protocol C. In this case remote device would host a first remote application that uses protocol A to communicate with the first group of agent devices remote device would host a second remote application that uses protocol B to communicate with the second group of agent devices and remote device would host a third remote application that uses protocol C to communicate with the third group of agent devices. The advantage to this arrangement is that existing remote applications that have been written to consume the API applications for protocols A B and C can run unmodified with direct access to all unique parts of the API applications. A disadvantage however is that there is no unified API framework to simplify the development of a new remote application as in the embodiments described below .

In another embodiment a unified API framework resides on smart client device . Preferably the unified API is under the direct control of the main custom software that handles the functional capabilities described above in connection with smart client device e.g. deployment port scanning server connection and communication .

If agent devices communicate using the same communication protocol all communications from agent devices to remote device would be handled as follows the individual agent devices transmit data to smart client device smart client device aggregates the data and transmits the aggregated data to smart server and smart server proxies the aggregated data to a single remote application on remote device . Conversely the communications from remote device to agent devices would be handled as follows the remote application on remote device transmits data to smart server smart server proxies the data to smart client device and smart client device segregates and distributes the data to the appropriate agent devices .

If agent devices communicate using different communication protocols the unified API on smart client device would also perform the function of translating between the agent specific communication protocols e.g. protocols A B and C and a common communication protocol e.g. protocol X i.e. the unified API would reshape or convert the data from one format to another . It should be understood that the remote application on remote device would communicate using the common communication protocol e.g. protocol X . One advantage to this arrangement is that a single remote application on remote device can communicate with different agent devices using different communication protocols. Another advantage is that certain operations can be blocked e.g. allow turning on off lights but not allow turning on off heat in the unified API on smart client device . A disadvantage however is that updates to the API applications on the agent devices or the addition of a new agent device with a new API application would require updates to the unified API on smart client device in order to adjust the translations.

In another embodiment a unified API framework resides on smart server . Preferably the unified API is under the direct control of the main custom software that handles the functional capabilities described above in connection with smart server e.g. detection and validation of smart client devices communication with smart client devices detection and validation of remote devices presentment of connection information to remote devices and communication between remote devices and agent devices .

If agent devices communicate using the same communication protocol all communications from agent devices to remote device would be handled as follows the individual agent devices transmit data to smart client device smart client device transmits the individual data streams for each client device to smart server and smart server aggregates the data and proxies the aggregated data to a single remote application on remote device . Conversely the communications from remote device to agent devices would be handled as follows the remote application on remote device transmits data to smart server smart server segregates the data and proxies the individual data for each client device to smart client device and smart client device distributes the data to the appropriate agent devices .

If agent devices communicate using different communication protocols the unified API on smart server would also perform the function of translating between the agent specific communication protocols e.g. protocols A B and C and a common communication protocol e.g. protocol X i.e. the unified API would reshape or convert the data from one format to another . It should be understood that the remote application on remote device would communicate using the common protocol e.g. protocol X . One advantage to this arrangement is that a single remote application on remote device can communicate with different agent devices using different communication protocols. Another advantage is that API translations can be centrally adjusted in the unified API on smart server . A disadvantage however is that smart client device is not in sole control of the exposed API and must trust smart server .

Of course one skilled in the art will understand that network can support any combination of the embodiments described above i.e. these embodiments may be mixed and matched as desired for a particular application.

From the above description it should be apparent that secure communication between each of remote devices and one or more of agent devices is enabled via the secure communication link established between smart client device and smart server . This secure communication link is established essentially automatically and without complex configuration of firewall or network parameters by the user. The user need only perform a simple deployment process of smart client device as described above. Thus network enables multi point to multi point communication i.e. an essentially unlimited number of remote devices can communicate with an essentially unlimited number of agent devices located within an essentially unlimited number of client networks . In the exemplary embodiment smart server preferably can support up to five hundred and twelve concurrent connections. Further smart client device can be installed on any network so as to enable Internet access to all network devices such as agent devices .

Finally while network has been described above in the context of a single password for each smart client device which is specified by the user who deploys smart client device in client network it should be understood that smart server could provide functionality that enables a user to set up additional authentication methodologies e.g. passwords images email SMS verifications tokens biometrics etc. for smart client device in order to restrict the agent devices that can be accessed by specific users. In that case smart server would use the authentication information to determine the agent devices that are authorized to be accessed by that remote device which could be less than the available agent devices on the agent list . This would provide greater security and control over access to specific agent devices in client network .

While the present invention has been described and illustrated hereinabove with reference to an exemplary embodiment it should be understood that various modifications could be made to this embodiment without departing from the scope of the invention. For example the services supported by the network of the exemplary embodiment include those provided in a web access mode a raw access mode and an API mode. Alternatively the network could support any one or combination of these particular services and or could support other types of services entirely in accordance with the invention. Therefore the present invention is not to be limited to the specific network architecture or methodology of the exemplary embodiment except insofar as such limitations are included in the following claims.

