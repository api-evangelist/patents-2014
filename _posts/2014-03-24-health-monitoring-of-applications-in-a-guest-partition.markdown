---

title: Health monitoring of applications in a guest partition
abstract: A health monitoring technique monitors the health and performance of applications executing in a guest partition in a virtualized environment. In an embodiment, a guest integration component interacts with an application through an application programming interface in order for the virtualization platform to monitor the health and performance of the application. In another embodiment, the guest integration component may include a monitoring agent that accesses an event log and/or a performance monitor log to access the health and performance of the application. The health and performance of the application may then be analyzed by the virtualization platform to determine an appropriate remedial action.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098609&OS=09098609&RS=09098609
owner: 
number: 09098609
owner_city: 
owner_country: 
publication_date: 20140324
---
This application is a continuation of Ser. No. 13 177 578 filed on Jul. 7 2011 entitled HEALTH MONITORING OF APPLICATIONS IN A GUEST PARTITION the entirety of which is incorporated herein by reference.

Virtualization is a technique used to support independent execution environments on a single computer. An execution environment is typically used to execute one or more applications under a guest operating system that is independent of other execution environments running on the same computer. Each execution environment can be configured as a guest partition otherwise known as a virtual machine. The guest partition is a software implementation of a computer that executes applications as if they were executed on a single computer. The guest partition is configured by a hypervisor that also manages the allocation of resources for the guest partition.

The hypervisor operates in an execution environment that is separate from the guest partition and has no knowledge of the health of the applications running in the guest partition. As such anomalous events that occur within an application can only be remedied by the application or the guest operating system. However if the application or the guest operating system cannot remedy the anomalous event the application may suffer a catastrophic failure.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A health monitoring technique monitors the health of applications executing in a guest partition in a virtualized platform. The virtualization platform ensures that the guest partitions are isolated from each other and provides each guest partition with the virtual resources and services needed for each guest partition to operate. The virtualization platform includes an application health monitor and recovery engine that monitors an application resident in the guest partition for anomalous events and or conditions affecting the performance of the application.

A guest partition interacts with the virtualization platform through a guest integration component. In an embodiment a guest integration component interacts with an application through an application programming interface in order for the virtualization platform to monitor the health and performance of the application. In another embodiment the guest integration component may include a monitoring agent that accesses an event log and or performance monitor log to access health and or performance data pertaining to the application. The health and or performance of the application may be analyzed by the application health monitor and recovery engine which may determine an appropriate remedial action.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.

Various embodiments are directed to a technology and techniques for monitoring the health and or performance of applications running in a guest partition of a virtualization platform. A virtualization platform has the capability of executing several guest partitions independently on a single computing device. The virtualization platform configures the guest partitions allocates virtual resources to each guest partition provides access to the hardware devices and provides health monitoring services.

Each guest partition includes a guest operating system that enables one or more applications to execute in the guest partition. Occasionally an application may experience anomalous events that cause the application to fail deadlock or perform poorly. For certain types of anomalous events the application may be able to remedy the problem initially or the guest operating system may provide remedial action in the event the application is not successful. In the event the application or the guest operating system cannot remedy the anomalous event a guest integrated component is the next course of remedial assistance.

Each guest partition includes a guest integration component that interacts with the virtualization platform. The guest integration component has an application programming interface API that may be used by an application to inform the guest integration component of the health of the application. The application may use the API to provide health data relating to the health of the application. The health data is forwarded to an application health monitor and recovery engine in the virtualization platform that analyzes the health data and determines an appropriate remedial action.

In another embodiment the guest integration component may include a monitoring agent that accesses an event log and or performance monitor log to access health and performance data pertaining to the application. In this manner the application does not need to be modified to interact directly with the guest integration component. In some situations it may not be feasible or practical to modify a legacy application to include the guest integration component API. In other situations privacy concerns may necessitate the isolation of the application from components of the virtualization platform.

The event log stores significant events that occur affect the performance of the application running in the guest partition. For example an application may report or log events into the event log at various points in the execution of the application. Any of the system components may also log events into the event log. For example a network component may log events when a network connection is not operational a storage component may log events about storage issues and so forth. An application or system component may report or log events into the event log at any time during execution of the application. The monitoring agent accesses the event log for certain events that may indicate or forewarn of a catastrophic event. For example an application may periodically log an event indicating its operational status. The monitoring agent may monitor the event log for this event and in its absence recognize a possible anomalous event. The events are forwarded to the application health monitor and recovery engine which determines an appropriate remedial action.

In addition the managing agent may access a performance log that stores performance data pertaining to the performance of the application. The managing agent may forward to the application health monitor and recovery engine various performance measurement data that is then analyzed by the application health monitor and recovery engine. The application health monitor and recovery engine may determine an appropriate remedial action to improve the performance of the application.

In the event the guest integration component is not able to remedy the anomalous event the guest integration component notifies the virtualization platform and the virtualization platform assumes control to provide an appropriate remedial action.

The health and performance monitoring techniques provide several advantages. By monitoring the health and performance of the application the virtualization platform may be given advanced warning of a failure and the opportunity to prevent the failure. As such the application is able to execute continuously without suffering interruptions or long delays for diagnosing and remedying a failure. In analyzing the performance parameters representing the application s operational condition the performance of the application is improved as well as the overall performance of the virtualization platform.

Each guest partition is isolated from the other guest partitions . Each guest partition may have a guest operating system one or more applications collectively a VMbus and a guest integration component . A guest partition is configured by a virtualization platform that provides each guest partition with a set of virtual resources and access to the devices in the hardware layer . The virtual resources may include virtual processors and virtual memory that are under the control of the virtualization platform . The virtual processors are executable instructions and state information that provide a representation of a physical processor with a specific instruction set. The virtual memory is a guest address space that may be a portion of a larger address space managed by the virtualization platform . In addition each guest partition has access to the hardware resources through a virtualization service client in the guest partition not shown that requests services from the hardware layer through the virtualization platform .

Each guest partition may be running a different operating system such as without limitation a Windows based operating system a Linux based operating system and so forth. In addition the operating systems running in a guest partition may be hypervisor aware or non hypervisor aware operating systems. A hypervisor aware operating system recognizes that it is running in a virtualized execution environment and that it has a guest integration component that enables it to communicate with the virtualization platform . A non hypervisor aware operating system may use an emulator to communicate with the virtualization platform .

Each application running inside a guest partition may be implemented as a software component program computer program system program machine program operating system software middleware firmware software module routine subroutine function method procedure software interface application program interface instruction set computing code code segment and any combination thereof. Exemplary applications may include a SQL server a file server an email server and so forth.

The VMbus provides a dedicated point to point channel to transport data and requests securely between a guest partition and the virtualization platform . There is a dedicated VMbus for each guest partition and the data transported therein is not accessible by any of the other guest partitions . The guest partition and the virtualization platform only have control over the information transmitted through the VMbus. It should be noted that the term VMbus as used herein refers to a generic communication channel between the guest partition and the virtualization platform that is dedicated for the use of a specific guest partition to the virtualization platform and is not constrained to any particular type of implementation. In alternate embodiments the VMbus or communication channel may be implemented as a private network having a dedicated virtual switch within each guest partition that is connected to the host partition . The virtual switch may be implemented using Microsoft s Virtual Network Switch Protocol.

In addition the guest partition may include a guest integration component . The guest integration component enables the virtualization platform to interact with the guest partition and to provide additional services to the guest partition . For example the guest integration component interacts with a host integration component in the virtualization platform to allow the virtualization platform to monitor the applications and the guest operating systems for anomalous events and poor performance.

In one or more embodiments the guest integration component may be part of the virtualization platform that is provided by the provider of the virtualization platform and implemented as a plug in to the guest operating system . A plug in is a form of program code that provides additional capabilities such as custom commands or features to an existing application such as the guest operating system . Plug ins are otherwise known as add ins snap ons or extensions. Typically a plug in registers with the guest operating system and thereafter interacts with the guest operating system through an application programming interface. The inclusion of the guest integration component as a plug in to the guest operating system avoids having program changes made to the guest operating system to incorporate the capabilities of the guest integration component .

The virtualization platform may have a VMbus a host partition and a health monitoring engine . The VMbus facilitates communications between each guest partition and the virtualization platform as described above. The host partition provides a number of services that create the independent guest partitions and provides the virtual resources needed for each guest partition .

The host partition may include a host operating system one or more device drivers a hypervisor and a virtualization stack . The host operating system may be any type of operating system and may be different from any of the guest operating systems . Each device driver is associated with a hardware device in the hardware layer and is used to control access to and the operation of the corresponding hardware device. The host partition may include a virtualization service provider not shown that communicates directly to the device drivers and offers the services provided by the hardware device requested by a guest partition . The hardware devices in the hardware layer are categorized by device types such as networking video storage input devices and so on. Each device type has a corresponding virtualization service client virtualization service provider pair not shown . A guest partition requests the services of a device type through its corresponding virtualization service client virtualization service provider pair.

The hypervisor creates the guest partitions and allocates the virtual resources for a guest partition . The hypervisor may manage the memory and processor scheduling for a guest operating system enforce memory access rules enforce rules for CPU usage and provide a mechanism to virtualize input output resources. In several embodiments the hypervisor may be implemented as software or firmware and in other embodiments the hypervisor may be implemented directly in the physical hardware.

The virtualization stack is a collection of software components that enables the virtualization of a computing device for the guest partitions. The virtualization stack works with the hypervisor to provide guest partition processes emulated devices management services and user interfaces that enable the guest partitions to execute as intended.

The health monitoring engine monitors the guest operating systems and applications for anomalous events in order to quickly diagnose and remediate the anomalous events. An anomalous event may include any type of failure or error such as without limitation program failures hardware faults processor interrupts program interrupts memory faults resource contention problems and the like attributable to either the guest operating system or an application running in a guest partition .

In addition the health monitoring engine may monitor the application to ensure that is performing in accordance with certain performance criteria. For example the health monitoring engine may monitor an application s processor usage memory latencies network delays and so on and recommend remedial actions needed to improve a performance criterion. Accordingly health monitoring pertains to monitoring for anomalous events and or for performance degradation.

The health monitoring engine may include a host integration component a guest operating system health monitor and recovery engine and an application health monitor and recovery engine . The host integration component interacts with the guest integration component to facilitate the health monitoring operations. The guest operating system health monitor and recovery engine monitors the health of the guest operating system and provides remedies for anomalous events occurring at the guest operating system level. The guest operating system health monitor and recovery engine may utilize techniques such as exception handling code reloading micro rebooting automatic system service restarts and watchdog timer based recovery to repair the guest operating system from a variety of errors.

The application health monitor and recovery engine monitors the health of one or more of the applications running in a guest partition . The application health monitor and recovery engine may provide remedies such as a system restart for anomalous events that may occur during execution of an application . In one or more embodiments the application health monitor and recovery engine may utilize techniques such as exception handling code reloading micro rebooting automatic system service restarts and watchdog timer based recovery to repair an application from a variety of errors. In addition the application health monitor and recovery engine may monitor an application for performance degradation and provide remedial measures to improve certain performance measures.

The hardware layer includes the physical hardware devices such as input output I O devices network interface cards graphic cards printer s a keyboard a display storage devices hard disk drives optical drives network adaptors graphic processors touch screen microphone speakers a system console and so forth.

Although the system shown in has a limited number of elements in a certain configuration it should be appreciated that the system can include more or less elements in alternate configurations. In addition the functions of the components shown in system may be configured in alternate arrangements. For example the host operating system may perform the functions of the hypervisor or vice versa. The hypervisor may be an independent component from the host partition . Additionally the functions performed by the guest operating system health monitor and recovery engine and or the application health monitor and recovery engine may be performed by the host operating system the hypervisor or any combination thereof.

In addition there may be several application health monitor and recovery engines where each application health monitor and recovery engine is configured to monitor specific applications guest partitions or any combination thereof. The application health monitor and recovery engine may be composed of various components that in the aggregate may perform the health monitoring functions and or performance monitoring functions. For example there may be a component that performs the health and performance monitoring function and another component that analyzes the health monitoring data to determine an appropriate remedial action or any combination thereof. The embodiments are not limited in this manner.

In various embodiments the system described herein may comprise a computer implemented system having multiple components programs procedures modules. As used herein these terms are intended to refer to a computer related entity comprising either hardware a combination of hardware and software or software. For example a component may be implemented as a process running on a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server may be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers as desired for a given implementation. The embodiments are not limited in this manner.

The various components of system may be communicatively coupled via various types of communications medium as indicated by various lines or arrows. The components may coordinate operations between each other. The coordination may involve the uni directional or bi directional exchange of information. For instance the components may communicate information in the form of signals communicated over the communications medium. The information may be implemented as signals allocated to various signal lines. In such allocations each message is a signal. Further embodiments however may alternatively employ data messages. Such data messages may be sent various connections. Exemplary connections include parallel interfaces and or serial interfaces.

The second level of health monitoring and remediation is initiated by the guest operating system block . In the event the application fails the guest operating system may be configured to take remedial action. Based on the type of anomalous event the guest operating system may restart the application reset a device allocate a resource release a resource and so on.

The third level of health monitoring and remediation is performed by the guest integration component within the guest partition block . The remediation at the third level may be activated when the first and second levels of remediation have been unsuccessful. As will be described in more detail below the guest integration component monitors and remediates the applications within a guest partition in accordance with directives from the virtualization platform .

The fourth level of health monitoring and remediation is performed by the virtualization platform block . The remediation at the fourth level may be activated when the first second and third levels of remediation have been futile. As will be described in more detail below the virtualization platform constructs and applies an appropriate remedial action.

In operating environment the guest integration component includes an application programming interface API that is used in monitoring the health and performance of an application . The application is aware of the API . The application registers with the guest integration component and thereafter the health of the application is monitored by the guest integration component monitors through the API . The application health monitor and recovery engine may be notified of any anomalous events and may propose remedial actions .

In one or more embodiments the API may be implemented as a remote procedure call. A remote procedure call is a form of messaging where a sender appears to be executing or calling a local procedure with specified parameters. The handler of the remote procedure call runs in a separate address space and security domain. The application invoking the remote procedure call is not aware of the remoteness of the procedure call. A response from the execution of the remote procedure call may be returned to the sender. There are many variations to a remote procedure call and any such variation may be employed for an intended implementation. In an embodiment the handlers of the APIs or remote procedure calls may be part of the guest integration component .

Referring to each guest partition is communicatively coupled to the virtualization platform through a distinct VMbus that connects the guest integration component of a particular guest partition to the host integration component . The host integration component is communicatively coupled to the guest operating system health monitor and recovery engine and the application health monitor and recovery engine . The host integration component receives data pertaining to anomalous events for both the guest operating system and the applications and forwards the anomalous event data to the respective monitor and recovery engine. Data pertaining to an anomalous event occurring with the guest operating system may be forwarded to the guest operating system health monitor and recovery engine and data pertaining to an anomalous event occurring with an application may be forwarded to the application health monitor and recovery engine .

An application registers with the guest integration component through a registration request . The registration request may be made through the API . Once the application registers with the guest integration component the guest integration component polls the application at regular time intervals. The application health monitor and recovery engine may set the time intervals at which the guest integration component polls. The guest integration component may request certain health monitoring data from the application . For example the guest integration component may request raw performance data from the application e.g. input processing queue length I O queue length transactions per second etc. and based on this performance data determine whether or not the application may be performing poorly.

If the application does not respond to the guest integration component the guest integration component may repeat the request a predetermined number of times before notifying the application health monitor and recovery engine that the application has not responded. The notification may be made by forwarding to the application health monitor and recovery engine health monitoring data indicating the lack of response.

The application may respond to the guest integration component s request and provide the guest integration component with the requested health monitoring data. The application s response may be made through the API . Alternatively the application may notify the guest integration component of an anomalous event or of a situation pertaining to a performance problem through a notification without receiving a request by the guest integration component . The application may perform a self assessment analysis of its own performance and inform the guest integration component through an API of its problem.

The health monitoring data may be forwarded to the application health monitor and recovery engine for analysis. The application health monitor and recovery engine may recommend a remedial action that is forwarded to the guest integration component . Depending on the remedial action the guest integration component may forward the remedial action to the application or the remedial action may be forwarded to the guest operating system for the guest operating system to apply the remedial action .

The event log stores the significant events that occur during the execution of an application running in the guest partition . An event log may contain the anomalous events in addition to other events such as checkpoints backups security breaches and so forth. The application logs the events into the event log at various points in the execution of the application .

There may be several event logs such as one for each application. In addition there may be different types of event logs such as an application log and a system log. An application log may store the significant events that occur during the execution an application and the system log may store the significant events that occur during execution of the guest operating system. For example a database application may record a file error in the application log and when a device driver fails to load during startup and another record may be stored in the system log detailing this event. Generally it is up to the developer of the application and the guest operating system to determine the events that are stored in the event log .

Each event log may have a schema that is used to classify each event e.g. low medium or critical . The event log may be read through an application program interface that uses the schema to find certain events. For example the monitoring agent may access the event log to determine if the application has encountered a particular event or events within a certain time interval. The monitoring agent can monitor the event log at predefined intervals upon the request of the application health monitor and recovery engine or upon notification from signals or system events raised by the guest operating system when certain events are written into the event log. The events or health monitoring data are forwarded to the application health monitor and recovery engine for analysis. Based on the nature of the event the application health monitor and recovery engine determines a remedial action to remedy the event. The remedial action is then forwarded to the guest integration component which in turn arranges for the activation of the remedial action.

A performance monitor log stores performance data related to the operation of the components of the system such as processor usage processor latency processor delay memory usage memory latency memory delay network usage network latencies network delays I O usage I O latencies and I O delays. The performance data may be collected during the course of the execution of an application through a performance monitor tool. The performance monitor tool may be a stand alone tool part of the guest operating system or a plug in that is annexed to the guest operating system. The performance monitor tool may utilize performance counters that measure a particular virtual resource.

For example to measure the virtual disk I O performance of an application a performance counter measures the amount of time that read and write operations take to respond to the application . If the average response times are below a certain threshold then the virtual disk I O performance may be considered suboptimal or poor and remedial action may be recommended. The performance monitor tool may have a set of performance counters that measure other functions of the system such as memory usage memory availability network latency network file transfers network utilization network interface output queue length processor utilization and so forth.

In one or more embodiments the monitoring agent may include a performance monitor tool that may be activated by a request from the application health monitor and recovery engine to monitor certain components and operations of the application for a predefined time interval. The guest integration component may receive the request and engage the monitoring agent to collect certain performance data from the performance monitor log for a specified duration. The performance data or health monitoring data may be forwarded to the application health monitor and recovery engine for analysis. The application health monitor and recovery engine may then determine a remedial action which may then be forwarded to the application through the host integration component and the guest integration component to improve the performance of the application.

Operations for the embodiments may be further described with reference to various exemplary methods. It may be appreciated that the representative methods do not necessarily have to be executed in the order presented or in any particular order unless otherwise indicated. Moreover various activities described with respect to the methods can be executed in serial or parallel fashion or any combination of serial and parallel operations. The methods can be implemented using one or more hardware elements and or software elements of the described embodiments or alternative embodiments as desired for a given set of design and performance constraints. For example the methods may be implemented as logic e.g. computer program instructions for execution by a logic device e.g. a general purpose specific purpose computer processor multi processor .

Referring to there is shown a block diagram of an exemplary computing environment. The illustrated computing environment shown in the system is embodied as a single computing device . The computing device may be embodied as a hardware device a software module or as a combination thereof. As a software module the computing device may have instructions that execute in a single execution path multiple concurrent execution paths e.g. thread process etc. or in any other manner Examples of such hardware devices may include but are not limited to a computer e.g. server personal computer laptop etc. a cell phone a personal digital assistant or any type of computing device and the like.

The computing device may include a processor a network interface one or more hardware devices and a memory . The hardware devices may include input output I O devices network interface cards graphic cards printer s a keyboard a display storage devices hard disk drives optical drives network adaptors graphic processors touch screen microphone speakers a system console and so forth.

The memory that may be any computer readable storage media that may store executable procedures computer readable instructions data structures program modules applications and data. The executable computer program instructions may be implemented according to a predefined computer language manner or syntax for instructing a computing device to perform a certain function. The instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language.

The computer readable media may be formed of both volatile and non volatile media removable and or non removable media implemented in any method or technology for storage of information. The computer readable media may include RAM ROM EEPROM flash memory or other memory technology CD ROM DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices floppy disks hard disk drives or any other medium which may be used to store the desired information and which can be accessed by a processor. Any combination of the above is also considered computer readable media. The computer readable media does not pertain to propagated signals such as a modulated data signal transmitted through a carrier wave.

Various embodiments may be implemented using hardware elements software elements or a combination of both. Examples of hardware elements may include devices components processors microprocessors circuits circuit elements integration circuits application specific integration circuits programmable logic devices digital signal processors field programmable gate arrays memory units logic gates and so forth. Examples of software elements may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces instruction sets computing code code segments and any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels bandwidth computing time load balance memory resources data bus speeds and other design or performance constraints as desired for a given implementation.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

