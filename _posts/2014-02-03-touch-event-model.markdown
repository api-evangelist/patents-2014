---

title: Touch event model
abstract: Embodiments of the present invention are directed to methods, software, devices and APIs for defining touch events for application level software. Furthermore, some embodiments are directed to simplifying the recognition of single and multiple touch events for applications running in multi-touch enabled devices. To simplify the recognition of single and multiple touch events, each view within a particular window can be configured as either a multi-touch view or a single touch view. Furthermore, each view can be configured as either an exclusive or a non-exclusive view. Depending on the configuration of a view, touch events in that and other views can be either ignored or recognized. Ignored touches need not be sent to the application. Selectively ignoring touches can allow for simpler software elements that do not take advantage of advanced multi touch features to be executed at the same device and time as more complex software elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09389712&OS=09389712&RS=09389712
owner: APPLE INC.
number: 09389712
owner_city: Cupertino
owner_country: US
publication_date: 20140203
---
This application is a continuation of U.S. application Ser. No. 12 042 318 filed Mar. 4 2008 which is incorporated herein by reference in its entirety.

This relates to multi point and multi touch enabled devices in general and more specifically to recognizing single and multiple point and touch events in multi point and multi touch enabled devices.

Multi touch enabled devices are known in the art. A multi touch enabled device is a device that can sense multiple touches at the same time. Thus a multi touch enabled device can for example sense two touch events that take place simultaneously at two different positions on a multi touch panel and are caused by two fingers being pressed down on the panel. Examples of multi touch enabled devices are discussed in U.S. patent application Ser. No. 11 649 998 entitled PROXIMITY AND MULTI TOUCH SENSOR DETECTION AND DEMODULATION filed on Jan. 3 2007 and hereby incorporated by reference in its entirety. Multi point enabled devices define a more general set of devices that include multi touch enabled devices as well as similar devices such as the multi proximity sensor devices discussed in U.S. patent application Ser. No. 11 649 998 mentioned above.

While the benefits of multi touch enabled interfaces are known these devices can present some interface design challenges. Existing interface design conventions have assumed a single pointing user input device that specifies a single location at a time. Examples include a mouse or a touch pad.

More specifically many existing graphical user interface GUI systems provide user interfaces in which various portions of a display are associated with separate software elements. Thus for example portions of a display can be associated with a window and the window can be associated with a specific software application and or process. A mouse can be used to interact with the window and the application or process associated with that window. The mouse cursor can then be moved to another window to interact with another application or process. Because only a single pointing device is used interaction with only a single window and application or process can occur at a time.

The assumption of a single interaction with a window at any one time can greatly simplify user interface design. The application and or process running within a window can operate under the assumption that a detected interaction with that particular window is the only input being received. Thus the application and or process need not concern itself with the possibility of other user interactions occurring in other portions of the display outside that window. Furthermore a window can be additionally partitioned into various elements wherein each element is associated with a specific portion of the window. Each element can be implemented by a separate software element e.g. a software object . Again each software object can process interactions that occur in its associated area without concerning itself with interactions that may be simultaneously occurring elsewhere.

On the other hand if a multi touch interface is being used two or more touch events can simultaneously occur at different portions of the display. This can make it difficult to split the display into different portions and have different independent software elements process interactions associated with each portion. Furthermore even if the display is split up into different portions multiple touch events can occur in a single portion. Therefore a single application process or other software element may need to process multiple simultaneous touch events. However if each application process or other software element needs to consider multiple touch interactions then the overall cost and complexity of software running at the multi touch enabled device may be undesirably high. More specifically each application may need to process large amounts of incoming touch data. This can require high complexity in applications of seemingly simple functionality and can make programming for a multi touch enabled device generally difficult and expensive. Also existing software that assumes a single pointing device can be very difficult to convert or port to a version that can operate on a multi point or a multi touch enabled device.

Embodiments of the present invention are directed to methods software devices and APIs for defining touch events for application level software. Furthermore some embodiments are directed to simplifying the recognition of single and multiple touch events for applications running in multi touch enabled devices. To simplify the recognition of single and multiple touch events each view within a particular window can be configured as either a multi touch view or a single touch view. Furthermore each view can be configured as either an exclusive or a non exclusive view. Depending on the configuration of a view touch events in that and other views can be either ignored or recognized. Ignored touches need not be sent to the application. Selectively ignoring touches can allow for simpler applications or software elements that do not take advantage of advanced multi touch features to be executed at the same device and even at the same time as more complex applications or software elements.

In the following description of preferred embodiments reference is made to the accompanying drawings which form a part hereof and in which it is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the preferred embodiments of the present invention.

This relates to a touch event model that simplifies the recognition of single and multiple touch events for user interface applications running in multi point and multi touch enabled devices. To simplify the recognition of single and multiple touch events each view within a particular window can be configured as either a multi touch view or a single touch view. Furthermore each view can be configured as either an exclusive or a non exclusive view. Depending on the configuration of a view touch events in that and other views can be either ignored or recognized.

Although embodiments of the present invention may be described and illustrated herein in terms of specific multi touch capable devices it should be understood that embodiments of the present invention are not limited to such devices but is generally applicable to any multi touch capable device. Furthermore embodiments of the invention are not limited to multi touch devices but also include multi point devices such as multi proximity sensor devices as discussed in U.S. application Ser. No. 11 649 998 mentioned above.

Some embodiments are related to APIs. In general an API is a source code interface that a computer system provides in order to support requests for services from a software operation. An API is specified in terms of a program language that can be interpreted or compiled when a system is built rather than an explicit low level description of how data is laid out in memory. The software that provides the functionality of an API is said to be an implementation of the API. Various devices such as computer systems electronic devices portable devices and handheld devices have software applications. The device interfaces between the software applications and user interface software to provide a user of the device with certain features and operations.

At least some embodiments of the invention can include one or more APIs in an environment with user interface software interacting with a software application. Various function calls or messages are transferred via the APIs between the user interface software and the software applications. Transferring the function calls or messages may include issuing initiating invoking or receiving the function calls or messages. Example APIs can include sending touch event information. An API may also implement functions having parameters variables or pointers. An API may receive parameters as disclosed or other combinations of parameters. In addition to the APIs disclosed other APIs individually or in combination can perform similar functionality as the disclosed APIs.

A driver or a set of drivers can communicate with the hardware . The drivers can receive and process input data from received from the hardware. A core Operating System OS can communicate with the driver s . The core OS can process raw input data received from the driver s . In some embodiments the drivers can be considered to be a part of the core OS.

A set of OS application programming interfaces APIs can communicate with the core OS. These APIs can be a set of APIs that are usually included with operating systems such as for example Linux or UNIX APIs . User Interface APIs UI APIs can include a set of APIs designed for use by applications running on the device. The UI APIs can utilize the OS APIs. Applications running on the device can utilize the APIs of the UI APIs in order to communicate with the user. The UI APIs can in turn communicate with lower level elements ultimately communicating with the multi touch panel and various other user interface hardware. While each layer can utilize the layer underneath it that is not always required. For example in some embodiments applications can occasionally communicate with OS APIs . APIs and can comprise respective sets of application programming interfaces as well as their respective implementations. For example UI APIs can also include user interface UI software for implementing the UI APIs.

The multi touch panel and or display of can also utilize other sensory technology such as proximity sensing as discussed in U.S. application Ser. No. 11 649 998 mentioned above. Generally a multi point panel and or display can be used for the devices of . The multi point panel and or display can feature various types of sensor technology. For example it can feature multi touch technology only thus resulting in a multi touch panel and or display multi proximity sense technology a combination of the two or another type of multi point technology.

The devices of can include various different types of multi touch enabled devices. For example they can include a mobile telephone a portable video game console an electronic music player an e book a PDA an electronic organizer an e mail device a laptop or other personal computer a kiosk computer a vending machine etc.

The user interface elements rendered at the display can include one or more views. Each view can represent a graphical user interface element handled by a separate software element. The separate software elements can include different applications different processes or threads even if within the same application different routines or subroutines different objects etc. In some embodiments each separate software element can create user interface elements for its respective portion of the display as well as receive and handle touch inputs for that portion of the display. The touch inputs can be processed by the various layers discussed in connection with which can subsequently send processed touch input data to the software element which can be part of applications . The processed touch input data can be referred to as touch event s and can be in a format that is easier to handle than raw touch data generated by the multi touch panel. For example each touch event can include a set of coordinates at which a touch is currently occurring. In some embodiments the set of coordinates may correspond to the centroid of a touch. For the sake of brevity and simplicity the discussion below may refer to a software element associated with a view by simply referring to the view itself.

Views can be nested. In other words a view can include other views. Consequently the software element associated with a first view can include or be linked to one or more software elements associated with views within the first view. While some views can be associated with applications others can be associated with high level OS elements such as graphical user interfaces window managers etc.

The exemplary display of shows a music browsing application. The display can include a status bar view that indicates the overall status of the device. The status bar view can be part of the OS. Title view can also be included. The title view can itself include several other views such as center title view back button and forward button . Table view can also be included. Table view can include one or more table element views such as table element view . As seen in one embodiment the table element views can be song titles. A button bar view can also be included. The button bar view can include buttons .

Each view and its associated software element may be able to receive process and handle touch events that occur at that particular view. Thus for example if a user touches song title view the software element associated with that view can receive a touch event indicating that the view has been touched process it and respond accordingly. For example the software element can change the graphical representation of the view i.e. highlighting the view and or cause other actions such as playing a song associated with the touched view.

In some embodiments touch events are processed at the lowest level of the view hierarchy. Thus for example if a user touches title bar view the touch event need not be directly processed by the software element associated with the title bar view but instead can be processed by a software element associated with a view included within the title bar view where the touch occurred i.e. a software element associated with one of views and . In some embodiments some higher level views can also handle touch events. In addition various software elements that are not associated with a view being touched can nevertheless be alerted or can discover that the view is being touched.

Since display is a multi touch display multiple touches can occur at the same time. The multiple touches can occur in the same view or in two or more different views. Furthermore the user can perform gestures e.g. by pressing down one or more fingers and moving them that can have predefined meanings Multi touch gestures are discussed in more detail in U.S. patent application Ser. No. 10 903 964 entitled GESTURES FOR TOUCH SENSITIVE INPUT DEVICES filed on Jul. 30 2004 and hereby incorporated by reference in its entirety.

A view can receive touch events that start within the view. If a user keeps a finger pressed against the display then the view can receive multiple touch events indicating a continuous touch. If a user moves a pressed finger the view can receive multiple touch events indicating movement of the touch. If a user moves a pressed finger outside of the view then the view can still receive touch events associated with that movement and the views to which the finger has been moved need not receive such touch events . Thus a view can receive events associated with a gesture or a movement that begins at the view even if it continues outside of the view.

A touch can refer to an act which begins with pressing a finger or another body part or object to the surface of a multi touch panel or multi touch display and ends when the finger or object is removed from the display. Thus the touch can include moving of the finger or object or keeping the finger or object at the same place for a period of time.

Touch events can be sent to views or the software elements that implement the views by one or more APIs and their respective implementations . An example of an API for handling touch events is provided in Appendix A below. According to the API of Appendix A the API can send each view a touch event data structure that includes one or more single touch data structures or touch data structures . Each touch event data structure can define the current state of all touches taking place at the view at a particular moment in time. The respective touch data structures within a touch event data structure can define the current states of one or more respective single touches at the particular moment in time. Thus if there are three touches taking place at a particular moment in time in a particular view a touch event data structure comprising three touch data structures defining the states of the five touches can be sent to the view. In some embodiments touch data structures can be sent even if their associated touches are no longer taking place in order to alert the view that the touches have terminated.

As noted above a touch may include an act that need not be instantaneous. E.g. a touch can include an act of moving or holding a finger against a display for a period of time. A touch data structure however defines a state of a touch at a particular time. Therefore multiple touch data structures may be associated with a single touch thus defining the single touch at different points in time.

Each touch data structure can comprise various fields. A first touch for view field can indicate whether the touch data structure defines the first touch for the particular view since the software element implementing the view was instantiated . A time stamp field can indicate the particular time that the touch data structure relates to.

An info field can be used to indicate if a touch is a rudimentary gesture. For example the info field can indicate whether the touch is a swipe and if so in which direction the swipe is oriented. A swipe is a quick drag of one or more fingers in a straight direction. The API implementations can determine if a touch is a swipe and pass that information to the application through the info field thus alleviating the application of some data processing that would have been necessary if the touch were a swipe.

A tap count field can indicate how many taps have been sequentially performed at the position of the touch. A tap can be defined as a quick pressing and lifting of a finger against a panel at a particular position. Multiple sequential taps can occur if the finger is again pressed and released in quick succession at the same position of the panel. Thus the API implementation can count taps for various application and relay this information through the tap count field. Multiple taps at the same location are sometimes considered to be a very useful and easy to remember command for touch enabled interfaces. Thus by counting taps the API can again alleviate some data processing from the application.

A phase field can indicate a particular phase the touch is currently in. The phase field can have various values such as touch phase began which can indicate that the touch data structure defines a new touch that has not been referenced by previous touch data structures. A touch phase moved value can indicate that the touch being defined has moved from a position defined in a previous touch data structure. A touch phase stationary value can indicate that the touch has stayed in the same position since the last touch data structure for that touch was generated. A touch phase ended value can indicate that the touch has ended e.g. the user has lifted his her finger from the surface of a multi touch display . A touch phase cancelled value can indicate that the touch has been cancelled by the device. A cancelled touch can be a touch that is not necessarily ended by a user but which the device can determine to ignore. For example the device can determine that the touch is being generated inadvertently i.e. as a result of placing a portable multi touch enabled device in one s pocket and ignore the touch for that reason. Each value of the phase field can be a integer number.

Thus each touch data structure can define what is happening with a touch at a particular time e.g. whether the touch is stationary being moved etc. as well as other information associated with the touch such as position . Accordingly each touch data structure can define the state of a particular touch at a particular moment in time. One or more touch data structures referencing the same time can be added in a touch event data structure that can define the states of all touches a particular view is receiving at a moment in time as noted above some touch data structures may also reference touches that have ended and are no longer being received . Multiple touch event data structures can be sent to the software implementing a view as time passes in order to provide the software with continuous information describing the touches that are happening at the view. One or more elements of the device such as for example hardware drivers core OS OS APIs and UI APIs can detect touches at the multi touch panel and generate the various touch event data structures defining these touches.

The ability to handle multiple touches and multi touch gestures can add complexity to the various software elements. In some cases such additional complexity can be necessary to implement advanced and desirable interface features. For example a game may require the ability to handle multiple simultaneous touches that occur in different views as games often require the pressing of multiple buttons at the same time. However some simpler applications and or views and their associated software elements need not require advanced interface features. For example a simple button such as button can be satisfactorily operable with single touches and need not require multi touch functionality. In these cases the underlying OS may send unnecessary or excessive touch data e.g. multi touch data to a software element associated with a view that is intended to be operable by single touches only e.g. a button . Because the software element may need to process this data it may need to feature all the complexity of a software element that handles multiple touches even though it is associated with a view for which only single touches are relevant. This can increase the cost of development of software for the device because software elements that have been traditionally very easy to program in a mouse interface environment i.e. various buttons etc. may be much more complex in a multi touch environment.

Embodiments of the present invention address the above discussed issues by selectively providing touch data to various software elements in accordance with predefined settings. Thus a simpler interface can be provided for selected software elements while others can take advantage of more complex multi touch input.

Embodiments of the invention can rely on one or more flags associated with one or more views wherein each flag or combination thereof indicates a mode of touch event processing for a particular view. For example multi touch and or exclusive touch flags can be used. The multi touch flag can indicate whether a particular view is capable of receiving multiple simultaneous touches or not. The exclusive touch flag can indicate whether a particular view is to allow other views to receive touch events while the view is receiving a touch event.

At step the user can touch the view at a second location while not releasing the first touch i.e. while keeping a finger pressed down at the first location . Thus for example the user can touch the right portion of table element view at step and touch the left portion of table element view at step without releasing his her finger from the right portion. Therefore the second touch is contemporaneous with the first touch thus taking advantage of the multi touch capabilities of display .

At step the OS can determine whether the multi touch flag for the view being touched is set. If the multi touch flag is set then the view can be a view that can handle multiple contemporaneous touches. Therefore at step a second touch event for the second touch can be sent to the software element associated with the view. It should be noted that new instances of the first touch event can also be sent indicating that the first touch event is still taking place i.e. the finger at the first location has not been lifted . The new instances of the first touch event can specify different locations if the finger at the first location is moved away from that location without being lifted i.e. if it is being dragged on the surface of the display .

If on the other hand the multi touch flag is not set the OS can ignore or block the second touch. Ignoring the second touch can result in not sending any touch events associated with the second touch to the software element associated with the touched view. In some embodiments the OS can alert other software elements of the second touch if necessary.

Thus embodiments of the present invention can allow relatively simple software elements that are programmed to handle only a single touch at a time to keep their multi touch flag unasserted and thus ensure that touch events that are part of multiple contemporaneous touches will not be sent to them. Meanwhile more complex software elements that can handle multiple contemporaneous touches can assert their multi touch flag and receive touch events for all touches that occur at their associated views. Consequently development costs for the simple software elements can be reduced while providing advanced multi touch functionality for more complex elements.

At step the OS can check whether the exclusive touch flag for the first view is asserted. If it is set asserted that means that the first view needs to receive touches exclusively and no other touches are to be sent to other views. Thus if the exclusive touch flag is set the OS can ignore or block the second touch and not send it to any software elements. If the exclusive view flag is not set then the process can continue to step of .

In step the OS can determine if the exclusive view flag for the second view is set. If that flag is set than the second view can only receive exclusive touch events. Thus if there is another touch event already being received by another view i.e. the first view the second view cannot receive a touch event and the OS can ignore the second touch step . However if the exclusive touch flag for the second touch is not set unasserted the OS can send a touch event associated with the second touch to the second view. More specifically the OS can send a touch event associated with the second touch to a software element associated with the second view step .

Thus the exclusive touch flag can ensure that views flagged as exclusive only receive touch events when they are the only views on the display receiving touch events. The exclusive flag can be very useful in simplifying the software of applications running on a multi touch enabled device. In certain situations allowing multiple views to receive touches simultaneously can result in complex conflicts and errors. For example if a button to delete a song and a button to play a song are simultaneously pressed this may cause an error. Avoiding such conflicts may require complex and costly software. However embodiments of the present invention can reduce the need for such software by providing an exclusive touch flag which can ensure that a view that has that flag set will receive touch events only when it is the only view that is receiving a touch event. Alternatively one or more views can have their exclusive touch flags unasserted thus allowing multiple simultaneous touches at two or more of these views.

In some embodiments the exclusive flag can signify exclusivity for the entire display. Thus when a view with the exclusive flag set is receiving a touch event all other views in the display can be blocked from receiving any touch events. In alternative embodiments the exclusive flag can signify exclusivity in a smaller area such as a single application or a single window. For example a first view with its exclusivity flag set can block other views that are in the same window from receiving any touch events while the first view is receiving a touch event but not block views in other windows.

The exclusive touch and multi touch flags can be combined. Accordingly one or more views being displayed can each include two flags a multi touch flag and an exclusive touch flag. In some embodiments all displayed views can include these two flags. The value of one flag need not depend on the value of another. In one example a view with both exclusive and multi touch flags set can allow multiple touches within the view but may only receive touches exclusively i.e. when the view is receiving touches touches to other views can be blocked . A view with both flags unasserted can block multiple touches within the view but allow single touches within the view even if touches are simultaneously taking place in other views. A view with the multi touch flag unasserted and the exclusive touch flag asserted can allow only single touches within the view when no other touches are taking place in any other views. A view with the multi touch flag asserted and the exclusive touch flag unasserted can allow all touches received for the view. A view with both flags asserted can allow multiple touches in the view while no other touches are taking place for other views.

Alternative embodiments can feature only one of the flags and the associated functionality . Thus some embodiments can use the multi touch flag only or exclusive touch flag only. In some embodiments different views can use different combinations of the flags.

The various functionalities performed by the OS in can instead be performed by other software such as various utility software. These functionalities can be performed by software at any one layer of layers through of . In an alternative embodiment these functionalities can even be performed by hardware .

Provided below is an exemplary set of code showing the methods of an exemplary software element associated with a view according to some embodiments of the invention. A person of skill in the art would recognize that other code may also be used to implement the functionalities discussed above.

While the above discussion centers on multi touch displays and panels the present invention is not limited to multi touch device but may include various multi point devices as discussed above including for example multi proximity sensor devices . For multi point devices multi point and an exclusive point flags can be used. These flags can operate in a similar manner to the multi touch and exclusive touch flags discussed above.

Although the present invention has been fully described in connection with embodiments thereof with reference to the accompanying drawings it is to be noted that various changes and modifications will become apparent to those skilled in the art. Such changes and modifications are to be understood as being included within the scope of the present invention as defined by the appended claims.

