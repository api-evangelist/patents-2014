---

title: Declarative approach to virtual network creation and operation
abstract: A network controller may receive a request from an application via an application programming interface (API), wherein the request comprises program codes written in a declarative programming language, and wherein the program codes describe at least some aspects of a virtual network (VN). The network controller may further parse the program codes into internal objects of the network controller, with the internal objects representing the aspects of the VN described by the program codes. The network controller may then manage the VN according to the internal objects translated from the program codes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09634900&OS=09634900&RS=09634900
owner: Futurewei Technologies, Inc.
number: 09634900
owner_city: Plano
owner_country: US
publication_date: 20140228
---
A virtual network VN is a computer network that comprises virtual network nodes and or links. The concept and adoption of virtual networks VNs have become widely popular due to various reasons such as the need for rapid service introduction and savings of operational cost in cloud computing. A VN may be formed with or without a corresponding physical network topology. To create and operate a VN network applications may call an application programming interface API provided by a network controller controlling the VN. For example requests from an application may be transmitted to the controller via the API one at a time and a VN may be built or updated according to the request to fit the need of the application.

Application developers today may use a procedural approach to operate a VN. In this approach an application may use a controller API to build a step by step procedure that represents application logic for operating the VN. Building the procedural steps may require application developers to have intimate knowledge of the VN e.g. how the VN is built . As the scale and complexity of a VN grows the VN may become increasingly difficult to manage for application developers.

Disclosed example embodiments may help improve virtual network VN management by using program codes written in a declarative programming language rather than a procedural programming language in order to perform various VN related tasks. In an example embodiment a network controller may start managing a VN by receiving a request via an application programming interface API wherein the request comprises program codes written in a declarative programming language and wherein the program codes describe at least some aspects of a VN. The network controller may further parsing the program codes into internal objects of the network controller with the internal objects representing the aspects of the VN described by the program codes.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although an illustrative implementation of one or more example embodiments are provided below the disclosed systems and or methods may be implemented using any number of techniques whether currently known or in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below including the exemplary designs and implementations illustrated and described herein but may be modified within the scope of the appended claims along with their full scope of equivalents.

To manage a virtual network VN a network controller may provide an application programming interface API to interact with applications that are operated by application developers. There have been efforts in standardizing API formats. For example Elastic Compute Cloud EC2 proposed by AMAZON may be considered a de facto standard for API and OpenStack Quantum API may be considered a variation of the EC2 API. New proposals are also in progress trying to expand the API to incorporate new features or application scenarios.

Some of the existing API approaches share a few common traits. First the APIs may be descriptive. One API may represent an action or task that applications instruct the network controller to perform and application developers may provide input parameters for the task and expect a result after the API call is complete. Second the APIs may be procedural. Applications may use an API to build a procedure that represent the application logic thus application developers may need to have intimate knowledge of how a virtual network is built via the procedural steps. As the scale and complexity of a VN grows application developers may write long and complicated program codes to create and operate the VN. Further it may become costly to maintain the VN and avoid potential bugs or errors.

The present disclosure teaches example embodiments to address weakness of the current APIs by using a declarative approach rather than a procedural approach in creating and operating a VN. Specifically requests or commands comprising program codes may be generated using a declarative programming language rather than a procedural programming language. The declarative language sometimes referred to herein as a virtual network definition language VNDL may be written in various formats or schemas such as an extensible markup language XML format. An application developer may use VNDL to describe a VN in terms of defined names such as node port link bandwidth policy and event handling. Unlike a procedural programming language the VNDL may specify logics or objectives of a task without having to explicitly specify each detailed step in order to perform a task.

Program codes written in VNDL may be generated by an application and then be sent to a network controller via an API supported by the network controller. The network controller may parse the VNDL code into internal objects and execute accordingly using an internal API of the controller. The network controller may perform various tasks to operate a VN including creating the VN e.g. defining nodes ports and links updating the VN enforcing network policies of the VN and handling events occurring in the VN.

To expand networking functionalities one or more VNs may be formed using some of the network nodes in the physical network layer. For example a first VN may be configured using network nodes and and a second VN may be configured using network nodes and . In practice part of physical node functionalities may be used to form virtual network nodes which in turn may make up the VNs. Therefore one physical node may be used to construct one or more virtual nodes. As shown in two virtual nodes and both belonging to the VN are formed sharing the same physical node . Virtual links may interconnect virtual nodes to one another. However it is also possible to have virtual nodes without any connections. It should be understood that the physical virtual network nodes and links discussed herein may be implemented using any suitable techniques. Depending on the application a VN may sometimes be referred to by equivalent or similar names. For example a VN may be implemented as a virtual private network VPN a software defined network SDN a service centric network SCN an information centric network ICN a content centric network CCN a virtual carrier network a virtual enterprise network an application specific network and so forth. Thus the term VN as disclosed herein may encompass these equivalents and variations.

To manage a network comprising multiple network nodes a network controller may be set up as a central entity that oversees the network. This architecture may be used in both physical and virtual networks. is a schematic diagram showing an example embodiment of a VN solution architecture which encompasses both physical and virtual network layers. In large networks or network domains multiple network controllers may be deployed each overseeing a portion of the whole network s . As shown in a first physical network controller PNC may be configured to manage a first plurality of physical network nodes and while a second PNC may be configured to manage a second plurality of physical network nodes and . The network nodes may be implemented to have any function such as versatile routing platforms VRPs . Each PNC comprises various modules or units. For example the PNC may comprise a web server and a plurality of service modules performing PNC service and other services.

In practice a relatively large network may be divided into multiple pieces of smaller networks or domains each of which may be managed by a PNC. Multiple PNCs such as PNCs and may be further managed by a higher level network controller e.g. a VN controller VNC shown in to create a two layer controller hierarchy. Note that more layers or levels can be constructed if desired. An application app may access and control network resources via the PNC the PNC and or the VNC which may be implemented using an open platform server OPS . The VNC may communicate with lower level controllers such as the PNC via an API e.g. by transmitting requests or commands to the PNC . Note that the controllers and may be located at the same physical location centralized setting or at different locations distributed setting . The application may be implemented as any suitable form of software program running on network device or node that is operated by an application developer.

The VNC may be an application that coordinates with multiple PNCs. The VNC may offer many different types of services that benefit application developers such as providing a higher level interface for applications to create configure update and operate VNs. In an example embodiment the VNC comprises various modules to perform various tasks and the modules may include a web server a VNC service module a topology abstraction layer TAL service module one or more route calculation RC service modules a VNC express module and other service modules. The web server may interact with the application via an API . Specifically the web server may be embedded in the VNC to receive requests e.g. RESTful API requests and then dispatch the requests to other modules in the VNC . The requests may comprise program codes written in VNDL for operating the network. The VNC service module may facilitate management of the PNCs and . Additionally the TAL service module may collect topology from each PNC and then combine multiple topologies into a single topology of the whole network. Application developers may use the topology as an assistance tool to build VNs of large sizes e.g. those spanning across multiple physical networks.

The RC service modules may provide implementation choices for the API which may have parameters for the choice of implementation to use for the API handling. The VNC express module may allow application developer to write program codes using a declarative programming language and use the program codes to facilitate VN creation and operation. From a practical perspective application developers may view a VNC or a PNC as a SDN controller. For example the VNC may be considered a SDN controller for accessing physical network resources. The VNC may provide any suitable type of API to communicate with application developers and other network devices. For instance the API and or the API may be a REST or RESTful API such as EC2 proposed by AMAZON and OpenStack which is a stateless type of API. Note that the APIs and may be of the same type or different types. Further API formats may be different even if they are the same type since each vendor may choose to add new functions. In practice different controllers may have different APIs. Although the present disclosure is mostly stated in the context of RESTful API for controllers such as the VNC and PNCs and any other suitable type of API may be used as long as the application may send program codes written in the VNDL to the controllers such as the VNC .

In an example embodiment developers using the applications may write program codes in a declarative programming language. The program codes may be sent via the API to the controller which may comprise a VNC express module or unit . After receiving a program code written in the declarative programming language the VNC express module may perform various tasks on the program codes. The declarative programming language referred to herein sometimes as VNDL may take the form of any suitable format such as an XML format so terms or legal names may be defined by an XML schema. The VNDL allows application developers to describe a VN.

The declarative approach disclosed herein for operating a VN may be advantageous over a conventional procedural approach. illustrates an exemplary piece of pseudo codes written in a procedural approach. Program codes written in a procedural programming language may need to explicitly specify each detailed step in order to perform a task. As shown in to create a network named red pseudo codes specify each step of adding nodes ports on the nodes and links between the ports. Further to handle an event e.g. if a link goes down occurring in the network red the pseudo codes need to specify exact steps of how to handle the event. Thus the conventional procedural approach may require an application developer to intimately understand details of a VN. In contrast operating a VN using a declarative programming language taught herein may avoid such issues by not requiring specification of each detailed step.

In computer science declarative programming may be considered a programming paradigm or a style of building computer programs in which program codes express the logic of a computation without having to describe detailed control flow. This declarative approach may minimize or eliminate side effects by describing what the program should accomplish in terms of logics and goals rather than describing how to accomplish it as a sequence of programming language primitives. The details of how to accomplish it can be left to another device e.g. VNC controller to determine.

It should be understood that there is a host of programming languages that can be classified or categorized as declarative programming languages. The category of declarative programming languages comprises subcategories including declarative markup languages functional languages logic programming languages and functional logic programming languages. Specific examples of declarative programming languages include but are not limited to Alpha Atom Applied Type System ATS Curl Distributed Application Specification Language data centric programming language known as ECL Erlang Extensible Application Markup Language XAML frame logic F logic FXML General purpose Declarative Language GenDL Glowe GOAL agent programming language Good For Equational Reasoning Gofer language Knowledge Machine KM programming language Lithe Lucid Lustre Miranda Pan Qi XML QUILL SequenceL Structured Query Language SQL Synchronized Multimedia Integration Language SMIL and Web Ontology Language OWL and combinations thereof. On the other hand examples of procedural programming language sometimes referred to as imperative programming language may include Visual Basic C C Common Business Oriented Language COBOL Java Perl Python and open source server side scripting language known as PHP. Further it should be understood that the declarative approach disclosed herein may be compatible with existing procedural approaches and may be used as a complementary technology in certain situations.

A Hypertext Transfer Protocol HTTP server embedded in the controller may receive the request from the application . The request containing VNDL codes may then be passed to a main module which may start and or coordinate the translation process e.g. by passing the VNDL codes to an execution module . The execution module may then pass the VN codes to a parser for parsing the VNDL codes. During parsing the VNDL codes may be translated or converted into internal objects which are understandable by a VNC internal API in the network controller . The internal objects may represent the VN described in the VNDL codes and actions for describing the handling of network events. The internal objects may be saved in an object directory of the network controller . The internal objects may be implemented as any codes data structures scripts commands or other information as long as the network controller may understand the internal objects sufficiently to perform VN related tasks.

The execution module may understand how to handle the tasks defined by VNDL codes. Specifically the execution module may call the VNC internal API may be considered a southbound API to perform VN related tasks according to or based on the internal objects translated from the VNDL codes. The VNC internal API may perform various tasks such as creating deleting updating querying status and handling aspects of the VN including nodes ports links policies and events.

If a certain event occurs in the VN controlled by the network controller an event handler may handle the event accordingly. For example if a network node a port or a link between two nodes goes down the event handler may pass event information to the execution module which may then handle the event using pre defined policies. The platform in the network controller may be implemented using any suitable language or environment. For instance a Python runtime module may be used to implement modules as shown in .

In practice a network may be identified by an identification id and may comprise network nodes and links therein. To describe a VN in more detail the element may comprise sub elements or child elements that define other legal names. For example a child element named id may specify an identification of the VN a child element named node may specify a node within the VN and a child element named link may specify a network link or connection within the VN.

As a node may be identified by an id an address a node name and or port s the element further comprises child elements that describe the node. Specifically child elements and describe an id an address a name and a port of the node respectively. Further the element comprises a child element that describes a name of the port.

Similarly a link may have various attributes such as a source node a destination node and a bandwidth. To describe a link represented by element a child element named from specifies a source node of the link a child element named to specifies a destination node of the link and a child element named bandwidth specifies a network bandwidth assigned to the link.

Legal names defined in the XML schema may be capitalized in program codes. As shown in legal names including node port link and bandwidth BW are capitalized. Based on the program codes the network to be created has an exemplary name Test and comprises seven network nodes named 1 7. For example line of the program codes specifies that Node 1 comprises two ports named Port 1 and Port 2 which are shown in with nodes represented by dark filled circles and ports represented by oval boxes attached to the circles.

In addition links may be setup between ports. For example line of the program codes comprises Link 1.2 3.1 which sets up a link shown as link in from Node 1 Port 2 to Node 3 Port 1. Note that the line further specifies that a bandwidth of 1 gigabytes G is to be allocated to the link . Other nodes ports and links may be setup in the same way using the program codes .

One of ordinary skill in the art will understand that the program codes written in VNDL may be fully extensible to include other information such as descriptions for handling events and enforcing policies set by applications. As various events may occur in a VN their handling policies may be configured by application developers and specified in VNDL codes. For example when a network node malfunctions VNDL codes may define a policy to restore the node or find an alternative node. A port or a link between ports can be handled similarly. For another example when physical link utilization exceeds a certain percentage a policy may move a related VN link from the physical link to another physical link. For yet another example when an interface drop count reaches a certain threshold a policy may choose to use another interface. Overall the principles disclosed herein may be applied to countless other example events and policies.

By using a declarative programming language instead of a procedural one application developers may perform VN tasks without knowing or understanding the details of networks. A network controller translating the VNDL codes may guarantee the desired network and behaviors of the network. Applications developers may use a RESTful API to communicate with a VNC and operate a VN through the VNC. For example VNDL codes may be used to query the status of a node a port or a link. VNDL codes may also be used to conduct operations such as adding or removing a specific node port or link.

The declarative approach may bring about various benefits. Programmer productivity may be increased e.g. length of program codes has be reduced by 90 in experiments programming accuracy may be improved as programmers can focus on the declarative statements rather than detailed steps and visibility may be improved with a concise network description and behavior as developers can use the declarative statement to build visual diagram of networks.

In step the network controller may parse the program codes into internal objects of the network controller. The internal objects represent the aspects of the VN described by the program codes. Parsing may be implemented in any suitable manner to translate or convert the VNDL codes into the internal objects.

In step the network controller may manage the VN using an internal API of the network controller according to the internal objects which are understandable by the internal API. Note that managing the VN may encompass creating the VN updating the VN managing policies of the VN and handling events occurring in the VN. It should be understood that the method serves as an example embodiment thus alternatives may be used to modify the method and additional steps may be incorporated as necessary.

The network device may comprise a logic unit or processor that is in communication with the receiver and the transmitter . The processor may be implemented using hardware or a combination of hardware and software. The processor may be implemented as one or more central processor unit CPU chips cores e.g. a multi core processor field programmable gate arrays FPGAs application specific integrated circuits ASICs and or digital signal processors DSPs . The processor may be configured to implement any of the functional modules or units described herein such as the web server web server the VNC service module the TAL service module the RC service modules the VNC express module the HTTP server the main module the execution module the parser the VNC internal API the event handler and the Python runtime module or any other functional component known by one of ordinary skill in the art or combinations thereof. For example a VNC express module may incorporated into the processor and configured to process VNDL codes for VN tasks.

The network device may further comprise at least one memory which may be configured to store data such as program codes and internal objects of a VNC. Note that in practice there may be bidirectional traffic processed by the network device thus some ports may both receive and transmit packets. In this sense the ingress ports and the egress ports may be co located or may be considered different functionalities of the same ports that are coupled to transceivers Rx Tx . The processor the memory the receiver and the transmitter may also be configured to implement or support any of the example embodiments described above such as the VN management method .

It is understood that by programming and or loading executable instructions onto the network device at least one of the processor and the memory are changed transforming the network device in part into a particular machine or apparatus e.g. a network node having the functionality taught by the present disclosure . The executable instructions may be stored on the memory and loaded into the processor for execution. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally a design that is still subject to frequent change may be preferred to be implemented in software because re spinning a hardware implementation is more expensive than re spinning a software design. Generally a design that is stable that will be produced in large volume may be preferred to be implemented in hardware for example in an ASIC because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed by well known design rules to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus likewise a computer that has been programmed and or loaded with executable instructions may be viewed as a particular machine or apparatus.

Any processing of the present disclosure may be implemented by causing a processor e.g. a general purpose CPU to execute a computer program. In this case a computer program product can be provided to a computer or a network device using any type of non transitory computer readable media. The computer program product may be stored in a non transitory computer readable medium in the computer or the network device. Non transitory computer readable media include any type of tangible storage media. Examples of non transitory computer readable media include magnetic storage media e.g. floppy disks magnetic tapes hard disk drives etc. optical magnetic storage media e.g. magneto optical disks compact disc read only memory CD ROM compact disc recordable CD R compact disc rewritable CD R W digital versatile disc DVD Blu ray registered trademark disc BD and semiconductor memories such as mask ROM programmable ROM PROM erasable PROM flash ROM and random access memory RAM . The computer program product may also be provided to a computer or a network device using any type of transitory computer readable media. Examples of transitory computer readable media include electric signals optical signals and electromagnetic waves. Transitory computer readable media can provide the program to a computer via a wired communication line e.g. electric wires and optical fibers or a wireless communication line.

At least one example embodiment is disclosed and variations combinations and or modifications of the example embodiment s and or features of the example embodiment s made by a person having ordinary skill in the art are within the scope of the disclosure. Alternative embodiments that result from combining integrating and or omitting features of the example embodiment s are also within the scope of the disclosure. Where numerical ranges or limitations are expressly stated such express ranges or limitations may be understood to include iterative ranges or limitations of like magnitude falling within the expressly stated ranges or limitations e.g. from about 1 to about 10 includes 2 3 4 etc. greater than 0.10 includes 0.11 0.12 0.13 etc. . For example whenever a numerical range with a lower limit R and an upper limit R is disclosed any number falling within the range is specifically disclosed. In particular the following numbers within the range are specifically disclosed R R k R R wherein k is a variable ranging from 1 percent to 100 percent with a 1 percent increment i.e. k is 1 percent 2 percent 3 percent 4 percent 5 percent . . . 50 percent 51 percent 52 percent . . . 95 percent 96 percent 97 percent 98 percent 99 percent or 100 percent. Moreover any numerical range defined by two R numbers as defined in the above is also specifically disclosed. The use of the term about means 10 of the subsequent number unless otherwise stated. Use of the term optionally with respect to any element of a claim means that the element is required or alternatively the element is not required both alternatives being within the scope of the claim. Use of broader terms such as comprises includes and having may be understood to provide support for narrower terms such as consisting of consisting essentially of and comprised substantially of. Accordingly the scope of protection is not limited by the description set out above but is defined by the claims that follow that scope including all equivalents of the subject matter of the claims. Each and every claim is incorporated as further disclosure into the specification and the claims are example embodiment s of the present disclosure. The discussion of a reference in the disclosure is not an admission that it is prior art especially any reference that has a publication date after the priority date of this application. The disclosure of all patents patent applications and publications cited in the disclosure are hereby incorporated by reference to the extent that they provide exemplary procedural or other details supplementary to the disclosure.

While several example embodiments have been provided in the present disclosure it may be understood that the disclosed systems and methods might be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

In addition techniques systems subsystems and methods described and illustrated in the various example embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as coupled or directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and may be made without departing from the spirit and scope disclosed herein.

