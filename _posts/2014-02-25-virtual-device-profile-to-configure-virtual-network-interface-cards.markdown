---

title: Virtual device profile to configure virtual network interface cards
abstract: A system and a method are disclosed for configuring virtual network interface cards (VNICs) of virtual machines, including presenting on a graphic user interface (GUI), by a management server of a host executing a virtual machine (VM), a plurality of attributes of a virtual network interface card (VNIC), assigning, via the GUI, values to the plurality of attributes, storing the values of the plurality of attributes in a profile on the management server, and configuring a second VNIC of the VM using the values in the profile.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09379940&OS=09379940&RS=09379940
owner: Red Hat Israel, Ltd.
number: 09379940
owner_city: Raanana
owner_country: IL
publication_date: 20140225
---
The present disclosure relates to network computing and more specifically to methods and systems that configure virtual network interfaces of virtual machines VMs running on hosting devices.

Virtualization in information processing systems allows for multiple instances of one or more operating systems to run on resources or components of one or more hosting computing devices host . Virtualization is typically implemented by using software e.g. a virtual machine monitor or a VMM to present to each OS a virtual machine VM having virtualized hardware resources including one or more virtual processors that the OS may completely and directly control while the VMM maintains a system environment for implementing virtualization policies such as sharing and or allocating the physical resources among the VMs the virtualization environment . Each OS and any other software that runs on a VM is referred to as a guest or as guest software while host software is software such as a VMM that runs outside of and may or may not be aware of the virtualization environment.

VM s may run on one or more hosts. Further each of the VM s may run under the control of a respective OS which may or may not be different from the OS of another VM. Hardware resources of the one or more hosts may also be virtualized. Thus instead of directly interacting with physical hardware devices such as processing units hard drives network interfaces NICs etc. the operating systems of VM s may control virtualized hardware components such as virtual processing units virtual disks and virtual network interface cards etc. . The virtualization of hardware devices may hide the physical characteristics of the one or more hosts from users.

Under current virtualization environments for VM s a network administrator needs to define the entire set of network settings for each virtual network interface card VNIC of the VM s . This process is not efficient as it requires the network administrator to perform a significant number of repetitive tasks.

Each virtual network interface card VNIC may have a set of network configuration attributes attributes such as quality of service port mirroring and custom properties. A VNIC can be configured by assigning a value value to each attribute of the VNIC. Implementations of the disclosure include systems and methods that facilitate the configuration of virtual network interface cards VNICs of virtual machines running on hosts. Instead of manual configuration of each VNIC in VM s one or more profiles for VNICs may be created and stored on a management server. A profile may be a file that can be saved on storage device. The content of the profile may be retrieved into memory. Each profile may contain attributes and their corresponding values. Thus more than one VNIC may be configured using the values in one profile. In this way the process to configure VNICs of VM s may be automated and simplified. Further certain privileges of the profiles may be granted to users of VMs so that the users may configure aspects of VNICs by editing the profiles.

Techniques to configure VNICs of VM s are described herein. In the following description numerous details are set forth to provide a more thorough explanation of the implementations. It will be apparent however to one skilled in the art that implementations of the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring implementations of the present invention.

Implementation of the disclosure may include a method. The method may include presenting on a graphic user interface GUI by a management server of a host executing a virtual machine VM a plurality of attributes of a virtual network interface card VNIC assigning via the GUI values to the plurality of attributes storing the values of the plurality of attributes in a profile on the management server and configuring a second VNIC of the VM using the values in the profile.

Generally a client such as client can be a computer system in communication with server for remote execution of applications at server . Thus input data e.g. mouse and keyboard input representing application commands is received at the client and transferred over network to server . In response to client side data an application e.g. desktop application can generate output display commands e.g. graphics commands simply referred to herein as graphics data which may include one or more paint and or draw operations for example in the form of executable instructions. The output display commands can then be transmitted e.g. as graphics update commands with an optional compression back to the remote client and a remote display driver e.g. a rendering agent of the remote client can collect the graphics commands and generate corresponding drawing commands for rendering at a display device of the client. Note that a desktop application is utilized herein as an example however any other application may also be applied.

In one implementation server is to host one or more virtual machines each having one or more desktop applications e.g. desktop operating system . Operating system may be executed and hosted within virtual machine . Such an operating system in virtual machine is also referred to as a guest operating system. Multiple guest operating systems and the associated virtual machines may be controlled by another operating system also referred to as a host OS . Typically a host OS represents a virtual machine monitor VMM also referred to as a hypervisor for managing the hosted virtual machines. A guest OS may be of the same or different type with respect to the host OS. For example a guest OS may be a Windows operating system from Microsoft and a host OS may be a Linux operating system available from Red Hat.

System may be implemented as part of a server or a cluster of servers within a data center of an enterprise entity. Server may be managed by a management server which may be a separate machine or part of the machine hosting server e.g. virtual desktop server or VDS . For example host server may be implemented as a VDS server while management server may be implemented as a VDC virtual desktop control server.

In one implementation server may be a member of a cluster of servers where each of the member servers of the same cluster is coupled to the same network or the same segment of a network also referred to as a logical network. In one implementations server may include multiple network interfaces not shown which may be coupled to the same or different logical network. Each network interface of server may be configured via management server . Server hosts may be configured to be coupled to multiple networks physical or logical network such as a storage network a virtual local area network VLAN for the guests a management network and or a remote display network for remote accesses etc.

In this example NIC is coupled to logical network NIC is coupled to logical network and NIC is coupled to logical network . Each of the logical networks is associated with a network identifier e.g. network name that identifies the respective network. Note that multiple NICs may be coupled to the same or different logical networks dependent upon a specific network configuration. Similarly a single NIC may be coupled to multiple logical networks. According to one implementation after a first host in a network has been detected and configured by an administrator via management server a subsequent host entering the same network can be at least partially automatically configured by server using the network configuration information obtained from an existing host which may be stored in configuration database .

In one implementation VM s may also include a guest operating system that controls the operations of virtual components including virtual central processing units VCPUs virtual random access memories VRAM and virtual network interface cards VNICs . VCPUs may be mapped to one or more processing devices in host s VRAMs may be mapped to one or more memory devices in host s and VNICs may be mapped to one or more NICs all by VMM. In one implementation a VNIC may include a set of configurable attributes such as QoS. These attributes may be configured with values so that the VNIC may communicate with a logical network as specified by these values. Applications may be executed by VCPUs utilizing virtual resources such as VRAMs and VNICs .

Implementations of the disclosure may use one or more profiles to configure one or more VNICs. Each profile may include a list of attributes of VNIC and corresponding values. In one implementation a profile may include a profile name identifications of associated networks Quality of Service values port mirroring and custom properties. Thus a VNIC associated with the profile name may be configured according to the attributes and their values as specified in the profile.

Referring to in one implementation one or more profiles may be specified using a network manager graphic user interface GUI . Once specified the profiles may be stored as files in configuration database of management server . A profile may be used to configure one or more VNICs of VM s running on host s . For example a profile may be transmitted by network configuration unit of management server to manager such as VDSM manager of host s . In one implementation profiles may be specified according an application programming interface API such as the VDSM API. The VDSM manager of host may parse the profile and apply the attributes specified in the profile to one or more VNICs. In this way VNICs may be efficiently configured using one or more profiles .

In another implementation privileges to access some of the one or more profiles may be granted e.g. at the direction of a network administrator to a user of the VMs so that the user may select a profile to apply to VNICs. In this way part of the task to configure VNICs of VMs may be delegated to users thus further reducing the burden on the network administrator to configure VNICs .

In one implementation one or more profiles may also be stored locally on host s so that manager may retrieve a profile more conveniently. For example manager may store a local copy of each profile that has been used to configure at least one VNIC on host s . Thus instead of retrieving these profiles from configuration database via network subsequent configurations of VNICs may be achieved by retrieving the local copies of the profiles.

In one implementation the dialog box may also include a section not shown to set up the access privilege of the created profile. For example the profile may be made public so that a user who is not the network administrator of the VMs may edit the profile. Alternatively the profile may be made private so that only a network administrator with access privilege to the profile may edit the profile.

A profile may be selected out of a number of profiles using a profile selection GUI. illustrates an example profile selection GUI according to an implementation of the disclosure. The GUI may include a first field to present an identification of a VNIC such as nic2 to which a profile is about to be selected and assigned. A second field may include a drop down list which may present a list of networks that are associated with the VNIC. For example when drop down list is activated a list of network profiles such as profile Gold created as shown in may be displayed for the user to select one of the profiles that may be used to configure the VNIC. Section may include another drop down list that may present a list of virtual operating system OS types. For example the OS may run as a full virtualization VirtIO as shown in in which the hypervisor may emulate all hardware network cards. Advanced values and customer properties may also be selected. For example on section the state of the network connection link between the VNIC to the network may be selected. The UP state may indicate that the VNIC is defined on the corresponding VM and connected to the network. On the other hand the DOWN state may indicate that the VNIC is defined on the corresponding VM and is currently not connected to any network. On section the virtual network interface card may be selectively plugged or unplugged.

In one implementation each user may be assigned with a role with authorizations to view a set of networks and VNIC profiles. The authorization may be determined by the management server at the log in of the user. When the user logs into management server the user may be identified and according to his log in credentials the management server may present the GUI which include profiles that the user is authorized to select. The user may select a profile out of the authorized profiles using the following method.

For simplicity of explanation methods are depicted and described as a series of acts. However acts in accordance with this disclosure can occur in various orders and or concurrently and with other acts not presented and described herein. Furthermore not all illustrated acts may be required to implement the methods in accordance with the disclosed subject matter. In addition the methods could alternatively be represented as a series of interrelated states via a state diagram or events. Additionally it should be appreciated that the methods disclosed in this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methods to computing devices. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device or storage media.

Referring to at the management server may determine the authorization of a user with respect to which profiles he may access. The privileges as to who can access profiles may have been assigned at the time when the profile was created. At in response to a determination that the user has the proper authorizations to access a number of profiles the management server may present through a GUI the profiles for selection. At in response to selecting a profile through the GUI the management server may apply values in the selected profile to map the VNIC to logical networks. Prior to changing the configuration of a VNIC at the management server may determine if the VM connected to the VNIC is running. If the VM is not running at the management server may update the configuration of the VNIC using values in the selected profile. If the VM is running at the management server may wait after the VM connected to the VNIC stop running to update the configuration of the VNIC using values in the selected profile. For example the updated profile may apply at next run of the VM. Similarly a profile may be deleted. However the deletion occurs after all VMs using the profile have finished using the profile.

In one implementation a profile may be created for a logical network. shows a flow diagram illustrating an example of a method to create a profile according to implementations of the present disclosure. Method may be performed by a processing logic that may include hardware e.g. circuitry dedicated logic programmable logic microcode etc. software e.g. instructions run on a processing device to perform hardware simulation or a combination thereof. In one example method may be performed by management server as shown in .

Referring to at in response to a request to add a profile to a logical network such as activating a tab on network management page of the logical network the management server may present a GUI such as the GUI including configurable network attributes of a VNIC profile. The attributes may include the profile name QoS port mirroring and custom properties. The GUI may include actionable elements through which values for these attributes may be selected or set. At values to these attributes may be set. These values may be used to specify network configurations of VNICs. At a privilege of the profile may be set. For example the privilege may include public privilege that allows the profile the profile to be shared with users or a private privilege to make it exclusive to the network administrator. At the created profile may be saved on a storage of the network server. The profile may be used to configure the network of one or more VNICs of VMs.

In one implementation a default profile may be created by the management server each time a network is added to the VM. In another implementation the creation of a default profile may be optionally declined. When a network is removed from a VM e.g. at a network administrator s direction using a network management GUI all profiles associated with the network may be removed. In one implementation a non virtual machine network may be modified to be a VM network e.g. at a network administrator s direction using a network management GUI . In this scenario a default profile may be created in response to the conversion. Conversely when a virtual machine network is converted into a non VM network e.g. at a network administrator s direction using a network management GUI all VNICs profiles associated with the network may be deleted.

In one implementation a new and empty data center like data center may be created. The new data center may include automatically created management server and a default VNIC profile created for the management server. Conversely when a data center is removed all data center s networks and associated profiles are also removed.

The computer system includes a processor e.g. a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device which communicate with each other via a bus .

The processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute the operations for the core dump level stack trace subsystem for performing steps discussed herein.

The computer system may further include a network interface device . The network interface device may be in communication with a network . The computer system also may include a video display unit e.g. a liquid crystal display LCD a touch screen or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a computer readable storage medium or more specifically a non transitory computer readable storage medium on which is stored one or more sets of instructions e.g. instructions executed by the core dump level stack trace subsystem for the computer system representing any one or more of the methodologies or functions described herein. The instructions for the computer system may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processing device also constituting computer readable storage media. The instructions for the computer system may further be transmitted or received over a network via the network interface device .

While the computer readable storage medium is shown in an example to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions . The term computer readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine that cause the machine to perform any one or more of the methodologies of the disclosure. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

Some portions of the detailed descriptions above are presented in terms of symbolic representations of operations on data bits within a computer memory. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as configuring associating executing adjusting sending receiving determining transmitting identifying specifying granting accessing assigning detecting and requesting or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may be a general purpose computer system selectively programmed by a computer program stored in the computer system. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic disk storage media optical storage media flash memory devices other type of machine accessible storage media or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The descriptions and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other examples will be apparent to those of skill in the art upon reading and understanding the above description. Although the disclosure has been described with reference to specific examples it will be recognized that the disclosure is not limited to the examples described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the disclosure should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

