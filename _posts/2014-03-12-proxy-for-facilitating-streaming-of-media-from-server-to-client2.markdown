---

title: Proxy for facilitating streaming of media from server to client
abstract: A method for preparing streaming media content to be rendered by a media player employs a proxy for the media player. The proxy sends a request over a network to a content server. In response, a rolling manifest file is received by the proxy. The manifest file includes a sequence of media segment URLs indicating an ordering of the media segments that create a representation of a portion of the content stream. The URLs follow a predefined naming convention that allows URLs occurring prior to and subsequent to the URLs included in the manifest file to be predicted. The proxy predicts additional URLs that occur prior to and/or subsequent to the URLs included in the manifest file. The manifest file is modified by inserting the additional media segment URLs into the manifest file. The additional URLs are sequentially located before or after the URLs included in the manifest file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09584557&OS=09584557&RS=09584557
owner: ARRIS Enterprises, Inc.
number: 09584557
owner_city: Suwanee
owner_country: US
publication_date: 20140312
---
This application claims the benefit of U.S. Ser. No. 61 794 638 filed Mar. 15 2013 and entitled TIME SHIFT BUFFER SUPPORT FOR STREAMER which is hereby incorporated by reference in its entirety.

Streaming of media over a network from a content server to a media or client device has become a widely adopted technique for media consumption. Two network protocols used for media streaming include the user datagram protocol Internet protocol UDP IP and the transfer control protocol TCP IP. UDP IP is often used for media streaming for relatively reliable networks such as in home streaming over wired connections. TCP IP is often used for streaming over less reliable networks.

A content server may implement the streaming of media by first dividing a media program into segments or chunks which may vary in duration but are often about one second in length. The content server publishes a playlist or manifest file that is accessible to the client device. The manifest file includes a list of URLs Universal Resource Locators to media segments that make up the program.

The hypertext transfer protocol HTTP based live streaming HLS protocol used with TCP IP allows a content server to publish variant manifest files to client devices. A variant manifest file identifies multiple sets of video streams for a media program such as a movie a television program etc. where each set of video streams has unique encoding parameters e.g. bit rates resolutions etc. for the media program. The client devices may dynamically switch between the sets of video streams identified in the variant manifest file as the sets of video streams are transmitted from the content server to the client devices. The client devices may choose to receive an initial set of video streams identified in the variant manifest file based on initial network conditions initial buffer conditions etc. For example the client devices may choose to receive a set of high definition HD video streams identified in the variant manifest file if the initial network conditions the initial buffer conditions etc. support the streaming of the HD set of video streams. If the initial network conditions degrade or if the initial buffer conditions degrade etc. then the client devices may choose to receive a set of low definition video streams identified in the variant manifest file. That is the client device may dynamically choose different sets of video streams to receive from the content server where the different sets of video streams have different encoding parameters.

The variant manifest files are dynamically updated by the server and thus the client devices need to periodically retrieve the files. If the manifest files contain the URLs for all the media segments in a program the size of the files may be excessively large which can consume a substantial amount of bandwidth and place a burden on the resources of the content server and the media player as the manifest files are periodically communicated between them. One way to reduce the size of the manifest files is to only include a limited number of media segments URLs which define a window specifying a small portion of the program. The window is a moving or sliding window that includes a limited number of media segments URLs in which URLs for media segments occurring earlier in time are removed as URL for media segments occurring later in time are added.

In accordance with one aspect of the invention a proxy component communicates with the content server on behalf of the media player. The proxy component which in one implementation may be a plug in to the media player can perform a variety of functions before forwarding the manifest file to the media player. For example the proxy component can operate as a protocol translator and in one particular instance can perform conditioning on the manifest file so that private tags and other signaling are removed and if necessary translated into a format that can be understood by the media player.

In one particular implementation a method is disclosed for preparing streaming media content to be rendered by a media player. In accordance with the method a request to receive a stream of media content is received by a proxy component from a media player. The request is forwarded over a network to the content server. In response to the request a rolling manifest file is received by the proxy component over the network. The rolling manifest file includes a sequence of media segment URLs which indicate an ordering of the media segments that create a representation of a portion of the media content stream. The media segment URLs follow a predefined naming convention that allows media segment URLs occurring prior to and subsequent to the media segment URLs included in the manifest file to be predicted. The proxy component predicts one or more additional media segment URLs that occur prior to and or subsequent to the media segment URLs included in the manifest file. The manifest file is modified by inserting one or more additional media segment URLs into the manifest file. The additional media segment URLs are sequentially located before or after the media segment URLs included in the manifest file. The proxy component sends the modified manifest file to the media player.

Turning to the drawings wherein like reference numerals refer to like elements techniques of the present disclosure are illustrated as being implemented in a suitable environment. The following description is based on embodiments of the claims and should not be taken as limiting the claims with regard to alternative embodiments that are not explicitly described herein.

As used herein streaming media are media received by and presented to an end user while being delivered by a streaming provider using Adaptive Bit Rate ABR streaming methods. The name refers to the delivery method of the medium rather than to the medium itself. The distinction is usually applied to media that are distributed over telecommunications networks e.g. on line as most other delivery systems are either inherently streaming e.g. radio television or inherently non streaming e.g. books video cassettes audio CDs . Hereinafter on line media and on line streaming using ABR methods are referred to as media and streaming respectively.

ABR streaming is a technology that works by breaking the overall media stream or media file into a sequence of small HTTP based file downloads each download loading one short segment of an overall potentially unbounded transport stream or media elementary streams. As the stream is played the client e.g. the media player may select from a number of different alternate streams containing the same material encoded at a variety of data rates allowing the streaming session to adapt to the available data rate. At the start of the streaming session the player downloads a manifest containing the metadata for the various sub streams which are available. Since its requests use only standard HTTP transactions ABR streaming is capable of traversing a firewall or proxy server that lets through standard HTTP traffic unlike UDP based protocols such as Real Time Transport Protocol. This also allows a content delivery network to readily be implemented for any given stream. ABR streaming methods have been implemented in proprietary formats including HTTP Live Streaming by Apple Inc. and HTTP Smooth Streaming by Microsoft Inc. ABR streaming has been standardized as ISO IEC 23009 1 Information Technology Dynamic adaptive streaming over HTTP Part 1 Media presentation description and segment formats.

An increasing number of video playback devices prefer video content to be delivered via ABR streaming rather than streamed continuously. The playback device using the HTTP Live Streaming format receives the manifest as an m3u8 file that contains links media uniform resource identifiers URLs to each of the segments or chunks of video content and processes the manifest file to retrieve and play back each media segment in turn. In this disclosure HLS represents the range of protocols that segment media content and employ a playlist or manifest file to manage playback.

Server may operate as a HTTP server in any manner known in the art. That is server includes a HTTP server component that provides content using HTTP protocols. While the example of is described in terms of HTTP other transfer protocols can be utilized in a similar manner. Segmenter and indexer are components that reside on server or multiple servers to provide content in media segments with a manifest file as described herein. These media segments and manifest files may be provided over network via HTTP server component or via other servers using HTTP protocols. Components as discussed herein can be implemented as hardware software firmware or a combination thereof.

In one embodiment server is a residential based device such as a media gateway or streamer which collects various types of media content from one or more of numerous sources for example via satellite transmission cable transmission and the Internet. One example of such a device is the Televation Device . In other embodiments server may be associated with the content provider and may be located for example in a cable or satellite network headend.

Network may be any type of network whether wired wireless or any combination thereof. For example network may be the Internet or an intranet. If the server is a residential based device then network may be a wired and or wireless Local Area Network LAN such as an IEEE 802.11 network. As another example network may be a cellular network e.g. 3G CDMA .

Turning to the internal components of server segmenter may function to divide the stream of media data into multiple media files or segments that may be transmitted via HTTP protocols. Indexer may function to create a manifest file corresponding to the segmented media files so that client devices can reassemble the media segments to provide real time or near real time transmission of the content provided by server . In response to one or more requests from a client device HTTP server component or other servers may transmit one or more manifest files as generated by indexer and media segments of content as generated by segmenter . Server may further include optional security component that provides one or more of the security functions e.g. encryption discussed herein. Server may also include additional components not illustrated in .

Client devices and may receive the manifest files and media segments from server over network . Client devices may be any type of electronic device that are capable of receiving data transmitted over a network and generate output utilizing the data received via the network for example wireless mobile devices smartphones PDAs entertainment devices consumer electronic devices PCs etc. The output may be any media type or combination of media types including for example audio video or any combination thereof.

Client device can include assembler component and output generator component . Similarly client device can include assembler component and output generator component . Assembler components and receive the manifest files from server and use the manifest files to access and download media segments from server . Output generator components and use the downloaded media segments to generate output from client devices and respectively. The output may be provided by one or more speakers one or more display screens a combination of speakers and display screens or any other input or output device. The client devices can also include memory e.g. flash memory or DRAM etc. to act as a buffer to store the media segments e.g. compressed media files or decompressed media files as they are received the buffer can provide many seconds worth of presentable content beyond the time of content currently being presented so that the buffered content can later be displayed while new content is being downloaded. This buffer can provide presentable content while the client device is attempting to retrieve content through an intermittently slow network connection and hence the buffer can hide network latency or connection problems.

Client devices and may further include optional security components and respectively that provide one or more of the security functions discussed herein. Client devices and may also include additional components not illustrated in .

A client device e.g. client device or initiates communication with the server by sending a request to the server for playback of media content. The server then generates or fetches a manifest file to send to the client device in response to the request. Example formats for the manifest file include the m3u and m3u8 formats. An m3u8 file is a specific variation of an m3u encoded using UTF 8 Unicode characters. The m3u file format was initially used in the WINAMP Media Player for audio only files but has since become a de facto manifest standard on many client devices for local or streaming media including music and other media types. Many client devices employ variations of the m3u file format any of which can be used according to the present disclosure. A manifest file can include links to media segments as relative or absolute paths to a location on a local file system or as a network address such as a URL path. The m3u8 format is used herein as a non limiting example to illustrate the principles of manifest files including non standard variants.

The manifest file includes a list of Uniform Resource Locators URLs to different representations of the requested segmented media content. Before or at the time of the request the server generates or identifies the media segments of the requested media content as streaming media content. The media segments of the streaming media content are generated either by the server by the content producer or by some other entity by splitting transcoding or transrating the original media content. Upon receiving the manifest file the server can fetch a first media segment or chunk for playback from the streaming media content then during playback of that media segment fetch a next media segment for playback after the first media segment and so on until the end of the media content is reached. Table 1 presents the contents of one example of an m3u manifest file for a 32 second video program. The manifest file includes URLs for 4 media segments denoted chunk1.ts to chunk4.ts

The illustrative manifest file shown in Table 1 is an extended M3U manifest that employs tags that effectively extend the M3U format. The tags can be used by the server to organize transmit and process the media segments that represent the original media content. The client devices use this information to reassemble and present the media segments. For instance the EXT X MEDIA SEQUENCE tag can indicate the sequence number of the first URL that appears in a manifest file. Likewise the EXT X TARGETDURATION tag can indicate the approximate duration of the next media segment that will be added to the presentation.

In one embodiment the server can operate in either cumulative mode or in rolling mode. In cumulative mode the server can create a manifest file and append URLs to the end of the manifest file. The client device then has access to all parts of the stream from a single manifest file e.g. a user can start at the middle of a show when downloaded. In rolling mode the server may limit the availability of media segments by removing URLs from the beginning of the manifest file on a rolling basis thereby providing a sliding window of media content accessible to a client device. The server can also add URLs to the manifest and in rolling mode the server can limit the availability of media segments to those that have been most recently added to the manifest. The client then repeatedly downloads updated copies of the manifest file to continue viewing. The client can continue to repeatedly request the manifest in the rolling mode until it finds an end tag in the manifest.

One problem with operation in cumulative mode is that the size of the manifest file can quickly become unmanageably large. For example if 1 second chunks are delivered the manifest file will eventually include 3600 URLs for a one hour program. This may not be easily manageable since reading such a larger file can be time and processing intensive and since the URL s need to be updated periodically. This problem may be particularly acute if the server is a limited capability device of the type that resides on the customer premises and which operates in a limited bandwidth environment such as Wi Fi which limits the rate at which the client device can access the manifest file. Accordingly in many cases the server operates in rolling mode. In this way the manifest file can be limited in size avoiding the aforementioned problems that arise when operating in cumulative mode.

However one problem that arises when streaming media is delivered using a manifest file that operates in rolling mode is that since only a limited portion of the program is specified in the manifest file the use of trick play operations e.g. Pause Fast Forward Rewind when accessing a portion of the program outside the window can become difficult. Before discussing how this problem can be addressed an overview will be provided explaining how still image data and trick play operations may be presented to a user.

In an embodiment a streaming media processor e.g. output generator in client device displays screen display in response to user input from an input device requesting a navigation or seek function. For example assume that a user is viewing a movie using the client device and a streaming video protocol and then presses a fast forward button on client device or selects and drags the slider of a media player application. In response to this action the output generator changes the display to show screen display . The output generator no longer displays the streaming media but displays a set of still images that have been sampled from the movie or program in the form represented in screen display . In an embodiment a full screen full motion display of the program is changed to screen display which shows five of the still images in successive positions . Further the images in display move successively from right to left as fast forward control proceeds. In one embodiment the streaming video is frozen and the still image or images are overlaid on top of the frozen video which may be darkened or dimmed to emphasize the overlaid stills.

In one embodiment output generator displays screen display in response to the user selecting and dragging the slider of a media player application residing on a client device. In response to this action the media player application replaces or overlays the display which generates and sends a forward or rewind command to output generator depending on the direction the slider is moved. In response to the forward or rewind command the media player application replaces or overlays the display of the streaming media with a set of still images representing the content of the program at a time point close to that represented by the position of the slider. Further images in display may move successively from right to left or left to right as the user continues to drag the slider forward or backward. When the user releases the slider or pauses dragging the slider for a period of time the output generator may begin to re buffer the content at a time point close to that represented by the position of the slider. When a sufficient portion of the media at the new time point is buffered the output generator replaces the displayed still images with playback of the buffered content. Thus in some cases the slider may be used in conjunction with a seek or jump command to go forward to another point in the content.

While illustrates a screen display comprising three images positions and the screen display may comprise more than three image positions or less than three image positions. For example screen display may comprise a single image position comprising one of the still images. Continuing the example as a forward or rewind command is received by output generator the displayed still image is replaced with a sequentially adjacent still image from still images e.g. the next nearest still image to the time point of the replaced still image in the time direction of the navigation or seek operation .

Referring now to during a fast forward operation image A disappears and appears to have moved off the screen to the left. Image B replaces image A and concurrently the image in position moves leftward to position to replace image B. Image A moves leftward into the second position . Image B moves leftward to replace image A. A new image from among the previously downloaded still images replaces the image B. As a result the user appears to be moving through the program at fast forward speed in the direction indicated by the arrow at the bottom of .

In an embodiment repeated selection of a fast forward button or rewind button on client device causes the system to toggle through successive still images and thus the user can rapidly advance at periodic intervals through the program. Alternatively the same function may be implemented in response to a user pressing and holding a fast forward or rewind button.

In another embodiment dragging the slider of a media player application causes the system to toggle through successive still images. The rate at which the user drags the slider across the screen can be used by the system to determine the rate of display of successive still images.

Movement icon indicates a speed of fast forward or rewind operation among multiple available speeds. In an embodiment repeated selection of a fast forward button or rewind button on client device causes the system to toggle through successively higher movement speeds for the current trick play mode fast forward or rewind until the highest movement speed is reached. Selecting the same button again then causes a return to the lowest available movement speed for that trick play mode. As a movement speed changes the movement icon changes to illustrate the then current speed.

Images move among different positions in screen display at a greater or lesser speed depending on the selected movement of the progress bar. In an embodiment a speed change may be accomplished by selectively skipping certain of the still images and not displaying them so that the program appears to be advancing more rapidly. Alternatively a speed change may be accomplished by causing certain of the still frames in the first image position or the third image position never to be displayed in the second image position but to jump directly to the opposite side of the screen into either the first image position or third image position as appropriate. For example in the arrangement of to implement a faster speed still image A might move directly to the position of still image B or still image A and might never appear in the second position . Alternatively a speed change may be accomplished by changing the amount of time during which each of the still images is displayed on the screen that is the presentation time of the images. A combination of two or more of these techniques also may be used.

The rate of display of the still images may be used to give the appearance of faster or slower progression through the program material. For example if still images have been collected at 10 second program intervals then displaying one still per second gives the appearance of progressing through the program material at 10 times 10 the normal viewing speed displaying every second still image at two thirds of a second per still gives the appearance of 30 times the normal speed displaying every fourth still image at half second intervals gives the appearance of 80 times normal speed and so on. Thus the rate of display of the still images may be used to hint at higher speeds of traversing the program material but does not stress the output generator in the way that displaying all the frames of the program material at the equivalent rate of display would stress the output generator .

Progress bar may illustrate a relative amount of the video program that has been played and may also include one or more markers such as vertical bars to indicate relative positions within program of the still images that are shown in display . One or more of the still images of display may be indicated in the progress bar . For example the progress bar may comprise a marker only for the still image in the second image position .

In some embodiments the progress bar is included within a slider component of a media player application. In such embodiments the slider may be used to invoke trick play or seek operations by selecting and dragging the slider forward or backward using a cursor control device such as a mouse or touch screen display. illustrates movement of the still images of in a rewind operation. When a rewind trick play mode is selected the still images in screen display move as indicated above for but in an opposite direction. For example a new still image replaces still image A in position and image A moves rightward to replace image B. Concurrently image B moves into the second position . The image at second position moves rightward to replace image A which moves to replace image B. The previously displayed image B appears to disappear off the screen to the right. As a result the display appears to be rewinding the audiovisual media to move through the program in the direction indicated by the arrow at the bottom of .

In an embodiment each still image that is displayed in the second image position is displayed in a size larger than the sizes of images in first and second image positions . This approach gives the second image position more prominence and gives the user a focal point while still providing the user with image references in the first and second positions to indicate what came before and what comes next.

As previously mentioned in conventional streaming systems the server creates for each given media content item e.g. program a series of manifest files with different encoding parameters e.g. bit rates resolutions etc. . The client device downloads these manifest files. The client device determines available network bandwidth and selects the appropriate manifest file and sequentially plays the media segments specified within the manifest file. The client device periodically monitors the available bandwidths and downloads updates updated manifest files accordingly.

Thus the manifests created by the server in a conventional system are available to all clients and are not tailored or otherwise uniquely created on a per client basis. As discussed below in various embodiments discussed herein the server creates manifests on a per client basis and maintains the state of each client. That is the server builds unique manifests which are generally subsets of a master manifest for each client for a particular use case. Illustrative use cases that will be discussed include Live on Demand LoD or Start Over SO Video on Demand VoD Fast Forward FF and Fast Rewind FREW . Each unique manifest file is built to enable each client device to have random access to a master manifest without having to fetch or download a manifest file that includes an entire program.

Client device may include an application graphic user interface App GUI and media player . Server may include a content publishing server which may be configured to store or produce multi bitrate media steams and manifest files.

In a first step a user navigates through program listings and selects a video program for viewing. In some embodiments the video program is linked to a URL pointing to a high level manifest. In a next step the media player requests and receives a top or high level manifest file for the video program that includes information about variant manifest files with video streams having different encoding parameters.

In a next step the media player looks at the high level manifest and either starts by requesting the lowest or highest bandwidth manifest file or optionally performs some bandwidth availability estimation and selects the corresponding bandwidth manifest file.

In step media player requests and receives a 2nd level manifest file for the corresponding bandwidth it desires. In step media player determines that the 2nd level manifest is operating in rolling mode and contains the first 10 second of the program in 10 one second media segments. These media segments may be denoted for instance as chunk 1.ts to chunk 10.ts.

In a step media player requests the media segments in succession. In a step after say 15 seconds have passed media player requests and receives an updated manifest file which has 10 URL entries denoted as chunk 6.ts to chunk 16.ts. In step the media player locates the media segments in the manifest and requests the segments in succession in step . The media player periodically requests and receives updated manifest files in this manner as they are published by the server . The updated manifest files contain a sliding window of 10 one second media segments. The media player can play the media and present it to the user while the aforementioned steps are being performed.

In a next step when the end of the manifest file is reached the media player signals the App GUI that playback of the video program is complete. This signaling that the stream playback is complete is shown as step .

Similar to client device client device may include an application graphic user interface App GUI and media player . Similar to server server may include a content publishing server which may be configured to store or produce multi bitrate media steams and manifest files.

In a first step a user navigates through program listings and selects a live video program for viewing. In this case the program is already in progress. In step the media player requests and receives a top level start over manifest file for the video program to join the program from its beginning.

Upon receiving the start over request instead of sending the client device the current manifest file with a rolling window that encompasses the current portion of the program the server prepares a new top level start over manifest for client device in step . The new manifest which may be denoted SO.m3u8 for example operates in rolling mode and contains the first 10 seconds of the program in 10 one second media segments.

The server maintains in memory or the like an association between the start over manifest SO.m3u8 and the client device using any suitable client identifier such as an IP address for example. The server may generate the start over manifest SO.m3u8 when the client device requests it or in advance of such a request. The server sends the manifest file to the client device in step .

For instance in step media player requests a 2nd level start over manifest file for the corresponding bandwidth it desires. That is the media player looks at the high level manifest file SO.m3u8 and either starts by requesting the lowest bandwidth manifest file or optionally performs some bandwidth availability estimation and selects the corresponding bandwidth manifest file.

In step media player locates the media segments and determines that the 2nd level start over manifest is operating in rolling mode and contains the first 10 second of the program in 10 one second media segments. These media segments are the first ten segments of the program which were previously denoted as chunk 1.ts to chunk 10.ts.

In step media player requests the media segments in succession from manifest file SO.m3u8. As before the media player periodically requests and receives updated manifest files as they are published by the server . The updated manifest files contain a sliding window of 10 1 second media segments.

Another use case can be illustrated by continuing with the example shown in . In this example the user of client device wishes to employ a fast forward trick play mode to catch up to the live program.

Continuing with client device sends the server a fast forward request in step . In this example the client device requests a speed of two times 2 normal speed. In response the server prepares a modified manifest file in step that may be denoted for example by TV FF 2  ClientID.m3u8. That is the server prepares a manifest file that is specifically tailored to satisfy the request of client device . The server may generate the modified manifest file TV FF 2  ClientID.m3u8 when the client device requests it or in advance of such a request. The server sends the manifest file to the client device in step .

The server will modify the manifest file to include a window of URLs starting from the client device s current position in the program. State information concerning the client device which allows the server to know the current position of the client device in the program may be obtained in a number of different ways. In this example when the client device switches from normal play to fast forward play the server knows what media segment was last read by the client device and can thus update the modified manifest file TV FF 2  ClientID.m3u8 beginning with that media segment or the subsequent media segment

For example assume the client device last read media segment when it requests operation in 2 fast forward mode. Assuming once again that each media segment is 1 second in duration the manifest file TV FF 2  ClientID.m3u8 that is provided will contain the following entries 

Thus every other one of the consecutive media segments is skipped when fast forwarding at 2 the normal rate. It should be noted that in this example the size of the window has not changed maintaining a total duration of 10 seconds. As the client device continues to fast forward through the program the manifest file will be updated with a sliding window. In the more general case if the client device requests a trick play mode of operation that presents the media content at a rate N N being an integer greater than one times a normal presentation rate every N 1 out of N successive media segments will be excluded or otherwise skipped from the manifest file. Thus when the client plays the media it will result in a presentation that appears to be playing in a fast forward mode of operation.

In general since different users will initiate the fast forward function at different points in a program different client devices will be served with different content using a manifest file TV FF NX ClientID.m3u8 associated with their client ID when fast forwarding through a program at N times the normal rate. Of course if two client devices begin fast forwarding through a program at the same point and at the same rate they may be presented with the same manifest file.

A similar approach can be used when a client device fast rewinds through a program but with the media segments in reverse order. For instance if a client asks to fast rewind at 4 the normal rate the server will prepare the manifest file TV FRW 4 .m3u8. The window of media segments included in this manifest file may begin with the last media segment read by the client device. Thus if the client asks to fast rewind through the program after reading the 30one second media segment the server will prepare the manifest file TV FRW 4  ClientID.m3u8 with the following entries 

Thus when asking to fast rewind at 4 the normal rate 3 out of every four media segments are skipped. One again in this example the total duration of the media segments included in the manifest file is limited to 10 seconds. Also as with the fast forward function since different users will initiate the fast rewind function at different points in a program different client devices will be served with different content using a manifest file TV FRW NX ClientID.m3u8 associated with their client ID when fast rewinding through a program at N times the normal rate.

Signaling between the server and client for allowing the client to communicate its status and desired playback mode of operation and for retrieving manifest files and media segments may be accomplished in any of a variety of different ways. For example in some embodiments protocols such as the well known Simple Object Access Protocol SOAP session initiation protocol SIP or Internet Protocol Multimedia Subsystem IM may be employed.

Another signaling protocol that may be employed is the Representational State Transfer REST protocol. REST defines a manner for retrieving posting updating and deleting Web content. In the REST protocol application state and functionality are divided into resources each of which is uniquely addressable through a URL. Interactions with REST resources generally involve targeting a resource with a URL passing the resource one or more parameters and issuing one of a small set of commands. These commands include GET POST PUT and DELETE for retrieving updating adding and deleting information respectively.

For example the REST protocol may be used as follows to acquire a manifest file that satisfies a client request to invoke a seek function to jump forwards or backwards in a program 

In this example the GET operation is used with the newly defined parameter which can be positive or negative and causes the current position in the program to shift by N seconds.

The client can invoke a function such as pause without the use of any additional parameters since the client does not request any media segments when pausing and the server will naturally maintain the last client s last position in the program. In some cases however it may be desirable to use an explicit parameter in order to avoid use of server resources for an extended period of time simply because the client might have paused the program.

Of course it should be noted that the parameters defined above are only illustrative of the types of parameters that may be employed and are not intended as a limitation on the subject matter described herein.

In some implementations it may be desirable to define additional tags that can be used with the manifest files. For example two private tags PRIVATE TAG EXT BEFORE and PRIVATE TAG EXT AFTER may be used to describe the number of seconds of content available from the server before and after respectively the media segments that are currently being provided. In this way the client will be directly aware of its position in the program. For instance PRIVATE TAG EXT BEFORE 100 may indicate to the client that 100 media segments are available before the media segments currently included in the manifest file. Likewise PRIVATE TAG EXT AFTER 2 may indicate to the client that there are 2 media segments available after the media segments currently included in the manifest file. Of course the formats and attributes that are used for these newly defined tags are not limited to the particular examples presented above.

At block the server receives over a network a request from a first client to present the media content beginning at a first specified time during presentation of the media content after its start time. In response to the request the server generates or otherwise obtains at block a first modified manifest file based on the top level manifest file. The first modified manifest file includes a first subset of the URLs indicating an ordering of media segments that create a representation of the stream of media content beginning at the specified time in the media content.

The server next receives at block a request from a second client to present the media content at a second specified time during presentation of the media content after its start time. This second specified time requested by the second client may be different from the first specified time requested by the first client. In response to the request from the second client the server generates or otherwise obtains a second modified manifest file at block based on the top level manifest file. The second modified manifest file includes a second subset of the URLs indicating an ordering of media segments that create a representation of the stream of media content beginning at the second specified time in the media content.

The client devices also includes proxy component . Likewise client device includes proxy component . As discussed below proxy components and are employed as proxies for the server and may be provided as a set of paired components that are designed to interoperate with one another. In some implementations proxy components and may be plug ins or extensions to the media players and that are designed to serve as an interface between the media players and the server. The proxies can provide a number of functions on behalf of the media players.

For example the proxy component can request manifest files from the server on behalf of the media players and perform various types of conditioning before passing the manifest files on to the media players. In this way the media players themselves do not need to incorporate the features and functionality needed to communicate with the server thereby allowing a wide range of media players to be employed which are not specifically tailored for streaming content from the server. Examples of the types of conditioning that may be performed by the proxies include protocol translation such as the translation of Digital Rights Management DRM features that are native to the client and or the server. As another example the proxy components can modify the manifest files by removing any private signaling tags employed by the server. For instance a private tag may be employed indicating that an encryption key is going to change midstream between media segments. The proxies may manage this key change on behalf of the media players in a number of different ways such as by performing decryption and re encryption into a format that the media player understands.

Another example of the types of conditioning that may be performed by the proxies include media encoding translation such as the translation of media encoding format that are native to the client and or the server. For instance the proxy components can modify the media content encoding format after removing any private signaling tags employed by the server. In one example a private tag may be employed indicating that the format is going to change midstream between two media segments. The proxy component may manage this format change on behalf of the media player in a number of different ways such as by performing decoding and re encoding into a format that the media player understands. The proxy component also may be employed to reduce both the size of the manifest files and the number of manifest requests that the client needs to issue to the server. These reductions can be accomplished if the proxy component and server agree on a naming convention for the media segment URLs so that given a particular media segment URL the proxy component is able to predict the previous and subsequent media segment URLs in the stream. For example if a sequence of media segment URLs are denoted chunk n.ts chunk n 1.ts and chunk n 2.ts where n is an integer the proxy component is able to determine that the previous two media segment URLs are chunk n 1.ts and chunk n 2.ts and that the subsequent two media segment URLs are chunk n 1.ts and chunk n 2.ts.

By allowing the proxy component to predict the media segment URLs that occur prior to and subsequent to one or more media segment URLs included in a manifest file the number of URLs that the manifest file needs to include may be dramatically reduced. For example assume the media player initiates a request for streaming content with a request for a manifest file. The media player sends the request to the proxy component which in turn sends the request to the server . The server can respond to the request with a manifest that has as few as only a single media segment URL. Since the proxy component can determine the remaining media segment URLs for that stream the proxy component is able to fulfill other manifest requests from the media player without sending the request to the server . The proxy component can use this ability to predict media segment URLs when for example the media player executes a backward or forward seek function.

In some implementations the proxy component may be used in conjunction with new private tags that are inserted into the manifest file by the server. For example an INSERT tag may be defined which specifies the number of media segments to be included by the proxy component either before or after those specified in the manifest file. For example if the new private tag is denoted PRIVATE TAG EXT INSERT N where N indicates the number of media segment URLs to be inserted then the following entries may appear in a manifest file 

In this example the private tag indicates that 10 media segments are to be inserted or otherwise supplied by the proxy component prior to media segment 11.ts. If this tag appears between media segment URLs various conventions may be employed to indicate whether the additional media segment URLs are to be inserted before or after the next media segment URL appearing in the manifest file. For instance a positive value of N may be used to indicate that subsequent media segment URLs are to be inserted and a negative value of N may be used to indicate that previous media segment URLs are to be inserted.

By allowing the proxy component to supply missing media segment URLs in the manner described above the network load and manifest file size can both be reduced.

Another illustrative use of the proxy component arises when client device sends the server a jump forward request forward repositioning or forward seek to say 120 seconds into the program. In response the server prepares a modified manifest file that may be denoted for example by TV FJ 120s ClientID.m3u8. That is the server prepares a manifest file that is specifically tailored to satisfy the request of client device . The server may generate the modified manifest file TV FJ 120s ClientID.m3u8 when the client device requests it or in advance of such a request. In either case the server sends the manifest file to the client device when requested.

The server will modify the manifest file to include a window of URLs starting from the client device s current position in the program. State information concerning the client device which allows the server to know the current position of the client device in the program may be obtained in a number of different ways. In this example when the client device switches from normal play to jump forward forward repositioning or forward seek play the server knows what media segment was last read by the client device and can thus update the modified manifest file TV FJ 120s ClientID.m3u8 beginning with that media segment or the subsequent media segment.

For example assume the client device last read media segment when it executes a 120 second jump forward request. Assuming once again that each media segment is 1 second in duration the manifest file TV FJ 120s ClientID.m3u8 that is provided will contain the following entries 

Thus proxy component can now insert missing chunk URLs and send it to media player as a response to client device request.

Aspects of the subject matter described herein are operational with numerous general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments or configurations that may be suitable for use with aspects of the subject matter described herein comprise personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers personal digital assistants PDAs gaming devices printers appliances including set top media center or other appliances automobile embedded or attached computing devices other mobile devices distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules or components being executed by a computer. Generally program modules or components include routines programs objects data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The computing based device comprises one or more inputs which are of any suitable type for receiving media content Internet Protocol IP input activity tags activity state information resources or other input. The device also comprises communication interface to enable the device to communicate with one or more other entity using any suitable communications medium.

Computing based device also comprises one or more processors which may be microprocessors controllers or any other suitable type of processors for processing computing executable instructions to control the operation of the device in order to provide a search augmentation system. Platform software comprising an operating system or any other suitable platform software may be provided at the computing based device to enable application software to be executed on the device.

The computer executable instructions may be provided using any computer readable media such as memory . The memory is of any suitable type such as random access memory RAM a disk storage device of any type such as a magnetic or optical storage device a hard disk drive or a CD DVD or other disc drive. Flash memory EPROM or EEPROM may also be used.

An output is also provided such as an audio and or video output to a display system integral with or in communication with the computing based device. A display interface is provided to control a display device to be used in conjunction with the computing device. The display system may provide a graphical user interface or other user interface of any suitable type.

As disclosed herein the term memory or memory unit may represent one or more devices for storing data including read only memory ROM random access memory RAM magnetic RAM core memory magnetic disk storage mediums optical storage mediums flash memory devices or other computer readable storage media for storing information. The term computer readable storage medium includes but is not limited to portable or fixed storage devices optical storage devices wireless channels a SIM card other smart cards and various other mediums capable of storing containing or carrying instructions or data. However computer readable storage media do not include transitory forms of storage such as propagating signals for example.

Furthermore embodiments may be implemented by hardware software firmware middleware microcode hardware description languages or any combination thereof. When implemented in software firmware middleware or microcode the program code or code segments to perform the necessary tasks may be stored in a computer readable storage medium and executed by one or more processors.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described.

