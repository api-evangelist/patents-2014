---

title: Combining disparate applications into a single workload group
abstract: Different protocol applications (e.g., TCP/IP server applications and SNA applications) are monitored and combined into a same workload, and load balancing decisions are made that affect both types of applications. In the approach, monitoring agents verify the health and availability of both the TCP/IP server applications and SNA applications, and such information is then used by a workload manager to create a distribution policy for the workload. The workload manager provides the distribution policy to a load balancing mechanism, which is operable to distribute workload connections to any of these applications. The TCP/IP connections and SNA sessions for a workload group are then routed to one site, or to an alternate site.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09516137&OS=09516137&RS=09516137
owner: International Business Machines Corporation
number: 09516137
owner_city: Armonk
owner_country: US
publication_date: 20141209
---
This disclosure relates generally to data processing systems and in particular to managing requests received from clients. Still more particularly the disclosure relates to load balancing and managing requests from clients.

Workload load balancing is a technique to distribute TCP IP based workload requests connections across similar server applications to achieve optimal resource utilization maximize throughput minimize response time and to avoid overloading server applications or systems. By using multiple server applications instead of a single server application with load balancing one can increase reliability through redundancy. The load balancing service usually is provided by a dedicated software program or hardware device. A workload manager provides distribution recommendations to the load balancing service i.e. a load balancer appliance .

In workload management environments of this type server applications that access the same data sources typically are included in the same workload. This allows monitoring agents to verify that all of these applications are available and able to handle additional connections on behalf of the workload. It also enables a workload manager to have a consolidated view of the applications in the workload thereby enabling easy switching of the workloads between geographically separated sites i.e. different clusters of systems . In particular the workload manager can signal a load balancer appliance that all connections to the server applications making up the workload are to be switched at the same time to the alternate site. This ensures that access by the applications to the data sources is only done from one site at any point in time.

Many customers with mainframe applications and a need to access their data sources either have moved their business applications to TCP IP server applications or they have written new TCP IP server applications. A significant percentage of these customer workloads however are still accessed as SNA applications. This creates a dilemma for customers that have both TCP IP server applications and legacy SNA applications accessing the same data sources as there are no existing methods to monitor and switch workload connections for both types of applications.

Generally this disclosure describes a method that provides for the grouping of different types of applications e.g. TCP IP server applications and SNA applications under a same workload. This grouping enables workload managers to direct a load balancer appliance to route workload connections to both application types to one site or to an alternate site.

In particular and according to an embodiment of this disclosure when both TCP IP server applications and SNA applications access the same data sources that are mirrored across sites they are associated together within a same workload group so that these different types of applications can be monitored to determine the overall availability for the workload. According to this disclosure monitoring agents verify the health and availability of both the TCP IP server applications and SNA applications and such information is then used by a workload manager to create a distribution policy for the workload. The workload manager provides the distribution policy to a load balancing mechanism e.g. a load balancer appliance that is capable of distributing workload connections to any of these applications. The TCP IP connections and SNA sessions for a workload group are then routed to one site or the alternate site.

Thus according to this disclosure different protocol applications are monitored and combined into a same workload and load balancing decisions are made that affect both types of applications. The load balancer routes workload connections that are destined to the different protocol applications the same way because these applications have been grouped into the same workload.

The foregoing has outlined some of the more pertinent features of the disclosed subject matter. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed subject matter in a different manner or by modifying the subject matter as will be described.

With reference now to the drawings and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the drawings depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system contains at least one network which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the disclosed subject matter and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of an exemplary data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system is an example of a computer such as client in in which computer usable code or instructions implementing the processes for illustrative embodiments of the disclosure may be located.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor SMP system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C C Objective C or the like and conventional procedural programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the disclosed subject matter.

As will be seen the techniques described herein may operate in conjunction within the standard client server paradigm such as illustrated in in which client machines communicate with an Internet accessible Web based portal executing on a set of one or more machines. End users operate Internet connectable devices e.g. desktop computers notebook computers Internet enabled mobile devices or the like that are capable of accessing and interacting with the portal. Typically each client or server machine is a data processing system such as illustrated in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. A data processing system typically includes one or more processors an operating system one or more applications and one or more utilities. The applications on the data processing system provide native support for Web services including without limitation support for HTTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these standards is presumed.

Mainframe computer systems are widely used for a variety of data processing functions. For example many corporate financial and accounting systems were developed for and operate on mainframe computing systems. Although the use of personal computers and personal computer networks has proliferated in recent years mainframe computer systems referred to as legacy systems are expected to remain popular for many types of data processing for years to come. A mainframe computer system typically includes multiple user terminals connected to a mainframe host computer. Various software applications may be resident on or accessible to the host computer. The user terminals which are sometimes referred to as client terminals or clients communicate with the mainframe host computer via a host communications system. The IBM 3270 terminal system is one of the more widely used systems for communicating with host computers. Typically a 3270 terminal does not have its own data processing capability. Instead a 3270 terminal may display screens generated by applications running on a host and may communicate information from a user back to a host for processing. A user interface of an IBM 3270 terminal system comprises a plurality of screens that are generated by host applications for display on the 3270 terminal. Over the past few years many 3270 terminals have been replaced with personal computers PCs configured to communicate with the mainframe computer system via 3270 terminal emulation software.

In many applications 3270 terminals or other data processing devices e.g. a PC emulating a 3270 terminal now access the host computer via the Internet. For example in systems operating under the TN3270E protocols the 3270 terminals may access application software on a host computer via a combination of a TCP IP connection between the TN3270E client terminal and a TN3270E server and via a Systems Network Architecture SNA session between the TN3270E server and the SNA application software on the host mainframe computer. As is well known SNA is an IBM proprietary networking architecture. It provides for a complete protocol stack to interconnect computers and their associated resources. A typical SNA implementation using various communications packages such as Virtual Telecommunications Access Method VTAM which is a mainframe software package for SNA communications. SNA application software or SNA applications refer to software applications designed for use by a plurality of terminals interconnected by an SNA network or a variant of an SNA network. An SNA session refers to a session layer connection in the SNA network architecture or its equivalent in variations or modified versions of the layered SNA network architecture.

The term TN3270E server typically encompasses both servers operating in the TN3270E environment and servers operating in modified versions or variations of the TN3270E environment. Furthermore the term TN3270E server refers to any system which interfaces between the IP connection and the SNA session. Thus the TN3270E server may appear as a server to the TN3270E client and as a terminal to the SNA application.

It is also known to integrate client server technologies with mainframe computing environments. A representative multi component system of this type wherein components work together cooperatively to form a larger system is the IBM HyperText Transfer Protocol HTTP and Web Services processing environment which may be implemented using IBM mainframe computers such as the IBM z196 family of computing machines. This environment typically includes IBM s WebSphere Application Server WAS middleware platform software product working in conjunction with one or more transaction processing products such as IBM Customer Information Control System CICS and or IBM Information Management System IMS a message processing product such as IBM WebSphere MQ and a relational database such as the IBM DB2 database. An objective of a multi component environment is to provide a high performance transaction processing computing system or environment accessible to client end users via Internet browsers using HTTP or other Web Services. In this environment the client end user making the HTTP or Web Services request communicates directly with the application server. Typically to fulfill the transaction request from the distributed client end user the application server invokes the services of one or more other components in the environment. One of more of these components typically execute on an operating system such as IBM z OS operating system which is often referred to as a mainframe operating system platform.

As further background illustrates a representative workload management environment in which the techniques of this disclosure may be implemented.

In this environment client applications run on client computers within or in association with the workload management environment . As depicted client applications generate requests for services . Services may include for example at least one of retrieving a file retrieving a webpage writing data downloading a program deleting a file and or other suitable types of access. Requests are sent over network to server applications on group of computer systems . Server applications may be any applications configured to process requests to provide services . Server applications may be for example at least one of a database server a file transfer protocol FTP server a web server a mail server and or other suitable types of applications. In these illustrative examples computer systems within group of computer systems may be a computer a computer cluster or other configurations of computer systems configured to run server applications .

Workload manager sends requests to server applications . Workload manager may be implemented using hardware software or a combination of the two. When implemented with hardware workload manager takes the form of workload manager system . Workload manager system comprises hardware and also may include software . When processor units are used in hardware these processor units may be located on the same or different computers.

Workload manager is configured to balance workloads in group of computer systems . Workloads are balanced by the manner in which workload manager distributes requests to server applications running on group of computer systems . Workload manager may be implemented in a number of different ways. For example workload manager may include load balancing processes and may directly distribute requests to server applications . Alternatively workload manager may make recommendations for the distribution of requests . These recommendations may then be used by a load balancer implemented as a separate component to distribute requests to server applications .

Server applications may access common resources when processing requests . Common resources may include data sources storage systems processor systems routing systems and or other suitable types of resources. Resources may take the form of hardware data software or other suitable forms. A common resource within common resources is a resource that is used by two or more server applications within server applications .

Workload manager identifies which of server applications receive particular requests from requests based on common resources used by server applications . Workload manager may be implemented in various devices. For example workload manager may be implemented in a switch a domain name server and or other suitable types of hardware devices. In these illustrative examples workload manager selects a server application within server applications to process a request in requests based on group information and policy . Group information in these examples is groupings of server applications . For example group information comprises set of workload groups . Set of workload groups is comprised of server application groups . Each workload group in set of workload groups has two or more server application groups from server application groups . In addition weights may be associated with server application groups . In other words each server application in a server application group may have one or more weights. Additionally each server application group also may be assigned one or more weights. Weights are used with policy .

Policy is one or more rules for determining which of server applications receive particular requests in requests . Policy may include rules for assigning requests based on common resources . Weights may be applied to policy in assigning requests based on common resources . For example a rule in policy may be to assign all requests to server applications that use a particular common resource. For example the common resource may be a computer system in group of computer systems . As another example when accessing data sources two data sources may be copies of each other in which different server applications in server applications are assigned to each of the copies of the data source. These data sources may be synchronized or updated at some point so that the copies are identical. With this type of resource policy may include a rule that states that access to a particular cell record entry table or other portion of a data source are all made to the same copy.

Typically workload manager performs load balancing for a workload group. Each server application group has one or more server applications. Typically load balancing is performed with respect to a server application group. In the illustrative examples workload manager is further configured to provide load balancing based on workload groups. For example workload group in set of workload groups includes server application group and server application group . Some of the server applications in server application group may run on the same computer system as some of the server applications in server application group . This is one example of a use of common resources . As another example some of the server applications in server application group may access the same data sources as some of the server applications in server application group . This access to data resources is another example of common resources .

By load balancing using server applications from server application group and server application group that use common resources improved performance may occur. For example if common resources include data sources that are synchronized between different server applications in server application group and server application group distributing the requests to server applications that use the same data source may reduce conflicts between data sources when these data sources are replicated.

In these illustrative examples server applications in server application group and server application group that use the same data source in data sources are considered to be on the same computer system. As a result server applications in the same cluster that end up in different server groups may be taken into account in load balancing when those server groups are put together into a workload group. Workload manager may use the mapping of server application groups into a workload group to provide better load balancing with respect to distributing requests to server applications that use common resources as compared to load balancing just within a server application group.

Workload manager also may identify performance parameters generated during processing of requests . Performance parameters are any values that relate to the use of resources to process requests . These resources may include common resources . Results from analyzing performance parameters may be used to identify inefficiencies in accessing common resources . The result may be used to modify group information . Inefficiencies may include for example without limitation conflicts in data a larger than desired number of locks for data data access requiring more time than desired under use of a hardware resource and other inefficiencies.

The modification of group information may include adding a workload group changing server application groups within a workload group deleting a workload group and or other suitable modifications. Further changing values for weights in policy also may occur using the results from the analysis of performance parameters .

The illustration of workload management environment in is not meant to imply physical or architectural limitations to the manner in which different illustrative embodiments may be implemented. Other components in addition to and or in place of the ones illustrated may be used. Some components may be unnecessary. Also the blocks are presented to illustrate some functional components. One or more of these blocks may be combined and or divided into different blocks when implemented in an illustrative embodiment. For example in some illustrative examples additional workload managers in addition to workload manager may be present within network . For example although workload manager is shown as a block separate from group of computer systems workload manager may be implemented in one or more computer systems in group of computer systems .

Each workload that is configured to Multi site Workload Lifeline is classified as an active standby or active query workload. By definition an active standby workload can be distributed to only one site at a time because the workload might contain transactions that update databases. By contrast an active query workload can be distributed to both sites at the same time because the workload contains only transactions that query databases. Multi site Workload Lifeline enforces the single or dual site distribution. If more than one workload is configured some of the workloads can be distributed to one site some workloads can be distributed to the other site and the remaining workloads can be distributed to both sites.

As seen in and in a concrete but non limiting example each site is configured as a systems complex or sysplex. A sysplex is a collection of Multiple Virtual Storage MVS systems that cooperate using certain hardware and software products to process work. The sysplex increases the number of processing units and MVS operating systems that can cooperate which in turn increases the amount of work that can be processed at the site. It uses a standard communication mechanism the cross system coupling facility or XCF for MVS system applications that enables communication between application programs on one or multiple computers. From an architecture standpoint typically the sysplex is made up of a number of central processor complexes CPCs that collaborate through specialized hardware and software to process a work load. A single CPC comprises a single central processor CP and all associated system hardware and software controlled by a single copy of the operating system e.g. z OS . One typical operating scenario for a sysplex is where applications running simultaneously on separate systems must be able to access the same data or update a single database etc. without compromising data integrity.

In this implementation which is merely representative a first tier load balancer determines which site to route a new workload request to and forwards the request to a second tier load balancer within that site . The second tier load balancer within the site determines which server application within the site to route the workload request to and forwards it to the z OS system where the server application is running. IBM Multi site Workload Lifeline includes functionality to provide the different tiers with routing recommendations based on the availability and health of the server applications and the z OS systems within the site.

In this particular implementation environment Workload Lifeline includes agents and advisors and . The advisors are implemented by z OS WorkLoad Manager WLM . As illustrated typically agents execute on each z OS system in the two sites and operate to monitor the health of the server applications and the system where the agent is active. The agents periodically send this information to the primary advisor as indicated by the network flows labeled . The primary advisor uses this information to calculate routing recommendations for the workloads that use these server applications. The advisor periodically sends recommendations to first tier load balancers about which site to route workload requests to and recommendations to second tier load balancers about which server applications within a site to route the workload requests to as indicated by the network flows labeled . The primary advisor also periodically notifies the secondary advisor about any changes in the workload states indicated by the network flows labeled so that the secondary advisor can take over primary advisor responsibilities if the current primary advisor becomes non operational.

Thus when workload requests are handled by the first tier load balancers based on routing recommendations from the advisor the load balancer selects a site and forwards the request to the second tier load balancer in that site indicated by the network flow labeled . When workload requests are handled by the second tier load balancers based on routing recommendations from the advisor the load balancer selects a server application in the site and forwards it to the TCP IP stack running on the z OS system indicated by the network flow labeled . When these second tier load balancers are external they receive routing recommendations directly from the advisor . When these second tier load balancers are internal also known as z OS sysplex distributors they reside on a z OS system in the site and receive routing recommendations directly by using z OS Communications Server functions.

In another configuration not shown a second tier load balancer is not responsible for routing workload requests to a server application within a site. In this case load balancing within a site is performed by some other node which is called an intermediary node. Typically an intermediary node does not communicate directly with the advisor. It is used in cases where customized load balancing has been built into a workload. In this type of configuration the z OS sysplex distributor is still defined but it is used only for obtaining recommendations and topology information that the first tier load balancer uses to select the site for a workload connection request. The intermediary node makes the load balancing decision to select a server application instance within the site.

As explained above typically a workload comprises one or more groups of applications that access the same data sources to provide related services for a client. In this example preferably all server applications in a load balancer application group provide the same service for that client and preferably each server application within an application group can provide the same services as the other applications in the group. The system provides the ability to group server applications that access different data sources into their own workload to provide more granular control of each group of applications.

In this example embodiment a site is synonymous with a sysplex. Preferably all z OS target systems in a particular site belong to the same sysplex. In a typical configuration and as described the first tier load balancer determines which site to route a new workload request to and forwards the request to a second tier load balancer. The second tier load balancer determines which server application within the site to route the workload request to and forwards it to the z OS system where the server application is running. Multi site Workload Lifeline provides the different tiers with routing recommendations based on the availability and health of the server applications and the z OS systems within the site.

While the arrangement and techniques in provide significant advantages they are limited to TCP IP based connection monitoring and workload switching of TCP IP server applications only.

According to this disclosure different protocol applications are monitored and combined into a same workload and load balancing decisions are made that affect both types of applications. In this approach a load balancer is controlled to route workload connections that are destined to the different protocol applications the same way because these applications are grouped into the same workload.

In particular and according to an embodiment of this disclosure when both TCP IP server applications and SNA applications access the same data sources that are mirrored across sites they are associated together within a same workload group so that these different types of applications can be monitored to determine an overall availability for the workload. Monitoring agents verify the health and availability of both the TCP IP server applications and SNA applications and such information is then used by a workload manager to create a distribution policy for the workload. The workload manager provides the distribution policy to a load balancing mechanism e.g. a load balancer appliance that is capable of distributing workload connections to any of these applications. The TCP IP connections and SNA sessions for a workload group are then routed to one site or the alternate site.

Thus in contrast to the prior art techniques wherein the workload is limited to a single e.g. TCP IP protocol application the workload herein is based on combining different protocol applications in the same workload and then enabling load balancing decisions to be made that affect both types of applications. In the preferred embodiment the different protocol applications are TCP IP and SNA. This is not a limitation as the notion of combining different protocol applications into a same workload can be practiced with other protocols besides IP and SNA. Such other protocols include without limitation Bluetooth IPX AppleTalk and others. Moreover the approach of combining different protocol applications may incorporate two or more different protocols into a workload.

Thus in the context of this disclosure there are disparate or different server applications including those in different workgroups that may access the same common data source or resource . Each site has its own copy of the data source but these copies of the data source should not be accessed at the same time. For example different server applications such as one that uses TCP IP network transport and another that is SNA based may use the same table in a database the same rows in a table in a database the same file the same memory location or any other suitable types of resources. Generalizing a data source or resource is any accessible system device application program process thread data store storage or memory location file object database database component or the like.

Thus according to this disclosure when a workload grouping comprises disparate applications e.g. both TCP IP server applications and SNA applications such as shown in the monitoring agent is able to uniquely identify these different types of applications. Preferably TCP IP server applications are identified by using an IP address and port number that the server application is using to accept incoming TCP IP connection requests. Preferably the SNA applications are identified using an SNA network identifier and an SNA resource name configured to the SNA stack . Thus for example the monitoring agent determines the health and availability of the TCP IP server application by using existing APIs e.g. SNMP or other types of queries. To monitor the availability of SNA applications the monitoring agent uses existing SNA commands to determine whether the SNA resource name is defined and active and whether any SNA applications associated with that SNA resource are available. In a preferred approach the monitoring agent evaluates SNA command responses for the SNA resource name defined for that application.

As also seen in preferably the computing system also includes a pair of mechanisms that are operative to distribute direct a received workload connection request or more generally a workload connection to particular application instances executing in the computing system. Thus in the TCP IP SNA embodiment these mechanisms includes a distributor which distributes workload connections to the one or more TCP IP application instances and a gateway which distributes the workload connections to the one or more SNA application instances. As a skilled person will appreciate when there are multiple instances of the TCP IP applications or the SNA applications these mechanisms provide an in computing system or second tier load balancing function. Without intending to be limiting the distributor is a sysplex distributor or its equivalent and the gateway is a proxy server such as TN3270E which converts a request using an IP protocol to an SNA protocol request.

As also seen in the system includes a workload manager . The workload manager typically is implemented in software as a set of computer program instructions executed in one or more hardware processors. As mentioned above and as depicted the workload manager receives the health and availability information from the various monitoring agents within the computing systems in both sites and it uses this information to identify a then current network configuration what applications are running where their health and availability etc. and then to determine one or more distribution policies for the sites. Generally a distribution policy is a set of instructions or more generally a data set or a mapping by which the workload manager directs one or more load balancer appliances how to distribute workload connection requests. Preferably a distribution policy is updated periodically e.g. every few seconds based on information gathered by the monitoring agents. In one embodiment the information from the monitoring agents is received by the workload manager on a defined polling interval e.g. every 10 seconds as well as immediately when an unexpected event e.g. an application is suddenly determined by the monitoring agent to be unavailable occurs. As the workload manager receives this updated information it creates a new distribution policy or an update to an existing distribution policy and then outputs the policy.

As seen in the workload manager outputs the distribution policy or the update to the load balancer appliance . This output may be provided over a secure channel and using any request response protocol. In this embodiment the load balancer appliance is TCP IP based and it operates to distribute both TCP IP workload connection requests as well as SNA workload connection requests. Stated another way the load balancer is capable of distributing workload connections to any of the applications that have been associated into the workgroup even though these applications operate over different protocols. It is then the job of the workload manager based on input from the monitoring agents and other sources to provide the distribution policy that in turn directs the load balancer appliance as to which subset of the applications should receive which workload connections. As depicted the TCP IP workload connections and the SNA workload connections are received from client machines or client .

In operation the one or more TCP IP based load balancer appliances typically route the workload connection requests to the mechanisms or in either case to allow the respective TCP IP requests or SNA sessions within the shared workgroup to be distributed to one of a set of appropriate application instances within one of the sites. Typically and because it is desirable to ensure that the common data sources that are mirrored across the sites are not accessed at the same time the load balancer routes any particular connection request to one and only one of the sites.

While illustrates a pair of sites there may be additional sites in which case the load balancer is operative according to the distribution policy to route a connection request to one of the multiple sites.

As noted both TCP IP server applications and SNA applications executing in the computing system across both sites comprise a workload group. Monitoring agents are configured to monitor the health and availability of these applications. This is depicted by flow 1. The monitoring agents report the availability and health of the TCP IP server applications and SNA applications that are on the same system as the monitoring agent and return this information to the workload manager . This is depicted by flow 2. The workload manager uses this information to signal load balancer appliances about the site to which particular workload connections should be distributed. This signaling is in the form of the distribution policy as it may be updated periodically or on demand and is depicted by flow 3. As noted clients desiring access to this workload either access the data sources via the TCP IP server application instances or the SNA application instances . In particular this is done by selecting a specific destination IP address and or port that is defined on the load balancer appliance that either maps to the TCP IP workload access or the SNA workload access. This is depicted by flow 4. For client requests for TCP IP server application access to the workload s data sources the load balancer appliance distributes connections to the second tier routing infrastructure in the active site. This is depicted by flow 5. In this example the second tier routing infrastructure is a sysplex distributor node which then forwards the connection request to one of the TCP IP server application instances within the site. This is depicted by flow 7. For client requests for SNA application access to the workload s data sources the load balancer appliance distributes connections to the gateway in the active site. The gateway is required because the network load balancers typically speak IP thus for SNA an IP connection from a client typically is processed through the gateway. This is depicted by flow 6. In this example the gateway is a TN3270 server which then operates to forward the connection request to one of the SNA application instances within the site. This is depicted by flow 8. This completes the process.

The particular manner in which SNA based workload support is provided within a site will depend on the type of IP SNA environment that is implemented. described above illustrates one approach namely the use of TN3270 access to the SNA applications. Other approaches may include without limitation remote API access via an RAPI server message broker based access custom written gateway access and the like.

The technique of this disclosure provides significant advantages. Foremost workload groups are defined and enforced with respect to disparate applications that access the same data sources. The approach enables the workload manager to monitor and switch workload connections for the disparate application types. The approach as described provides the particular advantage of enabling SNA based workload support especially for SNA applications that use IP connectivity from the requesting clients.

As noted above the approach herein may be implemented with more than two disparate application types and across two or more mirrored with respect to the common data sources sites. Thus the workload group may comprise any number of disparate application types and load balancing may be enforced across any number of such sites. In operation the information that influences how workload connections get routed is provided by monitoring all of the disparate application types.

As has been described the functionality described above may be implemented as a standalone approach e.g. a software based function executed by a processor or it may be available as a service including as a web service via a SOAP XML interface . The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.

More generally computing devices within the context of the disclosed subject matter are each a data processing system such as shown in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including without limitation support for HTTP FTP SMTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP FTP SMTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these known standards and protocols is presumed.

The techniques described herein may be implemented in or in conjunction with various server side architectures including simple n tier architectures web portals federated systems and the like. The techniques herein may be practiced in a loosely coupled server including a cloud based environment. An example of the latter environment is an Information Technology IT infrastructure that supports virtualization of resources. An environment of this type typically comprises host machines HVs e.g. servers or like physical machine computing devices connected to a physical datacenter network typically via a hypervisor management VLAN. The environment typically also includes load balancers network data switches e.g. top of rack switches firewalls and the like. Physical servers in the environment are each adapted to dynamically provide one or more virtual machines VMs using virtualization technology. Multiple VMs can be placed into a single host machine and share the host machine s CPU memory and other resources thereby increasing the utilization of an organization s data center. Disparate applications executing within the context of such a cloud or virtualized infrastructure may take advantage of the workgroup management technique of this disclosure.

Still more generally the subject matter described herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the trusted platform module function is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the download and delete interfaces and functionality can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or a semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. The computer readable medium is a tangible non transitory item.

The computer program product may be a product having program instructions or program code to implement one or more of the described functions. Those instructions or code may be stored in a non transitory computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.

In a representative embodiment the interfaces and utility are implemented in a special purpose computing platform preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors and the software may be implemented as one or more computer programs. Collectively this special purpose hardware and software comprises the functionality described above.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Finally while given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

The techniques herein generally provide for the above described improvements to a technology or technical field as well as the specific technological improvements to workload management schemes such as described above.

