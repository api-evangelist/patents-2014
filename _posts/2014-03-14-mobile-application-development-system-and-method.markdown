---

title: Mobile application development system and method
abstract: A system includes one or more processors to receive a first commitId and a first version number of a first version of an app from a mobile computing device downloaded from an app repository computer system, retrieve a second commitId and a second version number of a second version of the app from a production repository, compare the first commitId and the first version number with the second commitId and the second version number and determine that the first commitID is different from the second commitId, determine at least one difference between the first version of the app and the second version of the app, create a file comprising the at least one difference between the first version of the app and the second version of the app, and transmit the file comprising the at least one difference to the mobile computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454363&OS=09454363&RS=09454363
owner: Data Systems International, Inc.
number: 09454363
owner_city: Overland Park
owner_country: US
publication_date: 20140314
---
This application claims the benefit of priority to U.S. Provisional Application No. 61 793 928 filed Mar. 15 2013 entitled Mobile Application Development Platform the entire contents of which are hereby incorporated by reference.

Mobile applications i.e. apps are software applications designed to run on portable devices such as mobile phones tablet computers and personal digital assistants. Accelerating mobile adoption has been driving a booming mobile apps industry. By recent accounts companies will spend approximately 100 billion annually building and managing apps by 2015 which is up from 25 billion spent in 2012.

Apps are usually made available through application distribution platforms that are typically administered by the owner of the mobile operating system. While some apps are free others are purchased. For apps that are purchased a certain portion of the proceeds goes to the distribution provider while the rest goes to the developer of the app.

Nevertheless the development of apps has heretofore been difficult for several reasons. First owing to the broad range of portable devices available in the market each app must often be ensured for proper functionality on each device requiring separate development teams and cycles for each different type of portable devices. For example portable devices in use today may operate with differing operating systems such as the IOS and ANDROID operating systems. Furthermore each portable device may differ greatly from one another even among those developed by the same manufacturer. Second apps are typically compiled from source code to maintain relatively stringent size and performance constraints associated with their use on portable devices which often have limited storage and processing power. The compilation of these apps however may generate an undue burden for developers who must re compile the software code each time a change to the app is made. Additionally periodic updates to the app often necessitate re downloading the entire app with each updated version.

According to one embodiment a mobile application development platform includes an app development environment configured to generate one or more extensible markup language XML files and other assets representing an app to be executed on a particular type of portable device and an XML interpreter engine configured to be installed in a portable device. When installed in the portable device the engine may receive the XML file from the app development environment and interpret code of the XML file to execute at least one feature associated with one or more components that are unique to the portable device.

Embodiments of the present disclosure may include certain advantages. For example the XML based app description language ADL may allow users to create apps between 50 80 percent faster than with traditional native tools and languages and 30 40 percent faster than with hypertext markup language version 5 HTML5 . Embodiments of the platform make it easy to build native cross platform apps for operating systems such as IOS ANDROID and the like. In a particular example a native app for a children s game took seventeen days to develop with a one person team minus media production using traditional methods. The end result encompassed 13 789 lines of Objective C code. The same individual ported the entirety of the app to an XML based app description language ADL used by the platform in two days using only 259 lines of code with a result indistinguishable from the original.

According to one embodiment a system includes one or more processors to receive a first commitId and a first version number of a first version of an app from a mobile computing device downloaded from an app repository computer system retrieve a second commitId and a second version number of a second version of the app from a production repository compare the first commitId and the first version number of the first version of the app with the second commitId and the second version number of the second version of the app and determine that the first commitID is different from the second commitId determine at least one difference between the first version of the app and the second version of the app create a file comprising the at least one difference between the first version of the app and the second version of the app and transmit the file comprising the at least one difference to the mobile computing device.

According to another embodiment a system includes one or more processors to receive login information from a developer computer compare the login information with user account information in a database and determine that the login information is correct transmit app development studio information to the developer computer the app development studio information comprising a first version of an app project for editing using a web browser receive a second version of the app project from the developer computer the second version of the app project comprising an extensible markup language XML file having application description language ADL code create an app snapshot of the second version of the app project and store the XML file with the ADL code in a development repository and transmit the app snapshot with an engine for parsing the XML file with the ADL code to a mobile computing device for testing.

According to an additional embodiment a system includes one or more processors to download and install a first version of an app with an engine from an app repository computer system the app having a first version number a first commitId and at least one extensible markup language XML file comprising application description language ADL code launch the app and transmit the first version number and the first commitId to an app development computer system receive a file comprising at least one difference between the first version of the app and a second version of the app with the engine stored on the app development computer system the second version of the app having a second version number a second commitID and at least one XML file comprising ADL code extract contents of the file comprising the at least one difference between the first version of the app and the second version of the app stored on the app development computer system to update the first version of the app to the second version of the app by updating an internal commitId from the first commitId to the second commitId parse the XML ADL code in the second version of the app using the engine and execute the second version of the app using the engine.

According to a further embodiment a method includes receiving by at least one processor a first commitId and a first version number of a first version of an app from a mobile computing device downloaded from an app repository computer system retrieving by the at least one processor a second commitId and a second version number of a second version of the app from a production repository comparing by the at least one processor the first commitId and the first version number of the first version of the app with the second commitId and the second version number of the second version of the app and determining that the first commitID is different from the second commitId determining by the at least one processor at least one difference between the first version of the app and the second version of the app creating by the at least one processor a file comprising the at least one difference between the first version of the app and the second version of the app and transmitting by the at least one processor the file comprising the at least one difference to the mobile computing device.

According to an even further embodiment a method includes receiving by at least one processor login information from a developer computer comparing by the at least one processor the login information with user account information in a database and determining that the login information is correct transmitting by the at least one processor app development studio information to the developer computer the app development studio information comprising a first version of an app project for editing using a web browser receiving by the at least one processor a second version of the app project from the developer computer the second version of the app project comprising an extensible markup language XML file having application description language ADL code creating by the at least one processor an app snapshot of the second version of the app project and storing the XML file with the ADL code in a development repository and transmitting by the at least one processor the app snapshot with an engine for parsing the XML file with the ADL code to a mobile computing device for testing.

According to another embodiment a method includes downloading and installing by at least one processor a first version of an app with an engine from an app repository computer system the app having a first version number a first commitId and at least one extensible markup language XML file comprising application description language ADL code launching by the at least one processor the app and transmitting the first version number and the first commitId to an app development computer system receiving by the at least one processor a file comprising at least one difference between the first version of the app and a second version of the app with the engine stored on the app development computer system the second version of the app having a second version number a second commitID and at least one XML file comprising ADL code extracting by the at least one processor contents of the file comprising the at least one difference between the first version of the app and the second version of the app stored on the app development computer system to update the first version of the app to the second version of the app by updating an internal commitId from the first commitId to the second commitId parsing by the at least one processor the XML ADL code in the second version of the app using the engine and executing by the at least one processor the second version of the app using the engine.

In an even further embodiment a non transitory computer readable medium includes instructions stored thereon that when executed by at least one processor cause the at least one processor to perform operations comprising receiving a first commitId and a first version number of a first version of an app from a mobile computing device downloaded from an app repository computer system retrieving a second commitId and a second version number of a second version of the app from a production repository comparing the first commitId and the first version number of the first version of the app with the second commitId and the second version number of the second version of the app and determining that the first commitID is different from the second commitId determining at least one difference between the first version of the app and the second version of the app creating a file comprising the at least one difference between the first version of the app and the second version of the app and transmitting the file comprising the at least one difference to the mobile computing device.

According to an additional embodiment a non transitory computer readable medium includes instructions stored thereon that when executed by at least one processor cause the at least one processor to perform operations comprising receiving login information from a developer computer comparing the login information with user account information in a database and determining that the login information is correct transmitting app development studio information to the developer computer the app development studio information comprising a first version of an app project for editing using a web browser receiving a second version of the app project from the developer computer the second version of the app project comprising an extensible markup language XML file having application description language ADL code creating an app snapshot of the second version of the app project and storing the XML file with the ADL code in a development repository and transmitting the app snapshot with an engine for parsing the XML file with the ADL code to a mobile computing device for testing.

In another embodiment a non transitory computer readable medium includes instructions stored thereon that when executed by at least one processor cause the at least one processor to perform operations comprising downloading and installing a first version of an app with an engine from an app repository computer system the app having a first version number a first commitId and at least one extensible markup language XML file comprising application description language ADL code launching the app and transmitting the first version number and the first commitId to an app development computer system receiving a file comprising at least one difference between the first version of the app and a second version of the app with the engine stored on the app development computer system the second version of the app having a second version number a second commitID and at least one XML file comprising ADL code extracting contents of the file comprising the at least one difference between the first version of the app and the second version of the app stored on the app development computer system to update the first version of the app to the second version of the app by updating an internal commitId from the first commitId to the second commitId parsing the XML ADL code in the second version of the app using the engine and executing the second version of the app using the engine.

These and other aspects features and benefits of the present disclosure will become apparent from the following detailed written description of the preferred embodiments and aspects taken in conjunction with the following drawings although variations and modifications thereto may be effected without departing from the spirit and scope of the novel concepts of the disclosure.

Embodiments of the present disclosure provide a mobile application development system and method that may be used for the development of apps and the distribution of apps to the end consumer. The system uses extensible markup language XML interpreter engines residing on each mobile computing device that provide app like functionality by interpreting one or more XML files and other assets representing an executable app. The XML file includes instructions conforming to a XML based app description language ADL . In various embodiments the XML file is comprised entirely of XML based instructions such that the interpreter engine on each portable device provides the app like functionality of each XML file solely from instructions written in the XML based ADL.

Aspects of the platform include app development that is accomplished without the use of Java Objective C and other complex languages. Each app is based on XML modeling the app universe in an elegant yet practical way that opens up the audience of potential users to front end developers graphic artists and designers who may be familiar with HTML programming but not with complex language programming skills.

Other aspects of the platform include a cloud based platform as a service PaaS that frees professional developers from the burdens of app development to focus on advanced design and implementation while enabling front end developers who are not necessarily proficient programmers to quickly design e.g. build and deliver e.g. manage powerful native cross platform apps.

Example XML including ADL for parsing interpretation and conversion by an engine is shown below. The engine generates computer readable instructions that when executed by a mobile computing device causes the mobile computing device to display Hello World in courier font in black on a white background in the middle of a display. According to an example embodiment the example XML including ADL may be parsed interpreted and converted by different types of mobile computing devices providing a nearly similar result despite hardware run time system and other differences between the mobile computing devices.

Each XML file comprising ADL includes a set of tags that surround all other aspects of the app. Next a set of tags may include one or more panels that are described between a set of tags. Panels may represent just about anything within an app such as containers for other objects. The example shown below builds a simple panel that takes up 100 of the display with a white background.

 is the foundation for the presentation layer of ADL. A may serve as a container an interaction point or be used with a series of other embedded panels and or object types to create custom graphics such as buttons menus shadowing framing grid layouts or other new objects for unique purposes throughout the ADL.

A s geometry is defined in square or rectangle geometries. All nested objects within will have their geometries defined using the parent object as a base therefore an embedded object with a defined width of 50 contained in a parent object with a width of 1000 px will have a width of 500 px when drawn. Children of a panel will function under any inherited attributes from their parent.

Inside the set of tags there is a set of tags. The tag is a child of the tag and the tag is a child of the panel. Text like other object tags within the tag may include a variety of attributes used to customize the look and feel of the text. In the example shown below there are optional font color size and alignment attributes in addition to the required height and width attributes. This example XML file including seven lines of ADL demonstrates the power of the embodiments described herein that may be used to build native cross platform apps for different mobile computing devices having different operating systems such as IOS ANDROID. 

According to an aspect of the present disclosure the mobile application development system includes one or more app development computer systems . The app development computer system includes an app development environment . The app development environment may be a non distributed system or a distributed system. In other words the app development environment may include one or more computers having the app development environment that includes components located on the one or more app development computer systems . The mobile application development system further comprises one or more development computers having a web browser one or more mobile computing devices e.g. a smart phone a tablet a laptop a desktop computer etc. having an app with an engine and one or more app repository computer systems storing and serving one or more apps with an engine .

The mobile application development system includes one or more computers that communicate using a communication network . The one or more computers communicate and coordinate their actions by passing messages over the communication network . The network can be the Internet an intranet a cellular communications network a WiFi network a packet network or another wired or wireless communication network. As an example the one or more computers communicate data in packets messages or other communications using a common protocol e.g. Hypertext Transfer Protocol HTTP . As an example the mobile application development system may be a cloud based computer system.

The app development computer system includes one or more processors to process data and memory to store data including the app development environment . The processor and memory are hardware. The memory includes non transitory memory e.g. random access memory RAM and one or more hard disks. The non transitory memory may include any tangible computer readable medium including for example magnetic and or optical disks flash drives and the like. The data associated with the app development environment may be stored in a structured query language SQL server database or another appropriate database management system within memory . Additionally the memory may also include a dedicated file server having one or more dedicated processors random access memory RAM a Redundant Array of Inexpensive Disks hard drive configuration an Ethernet interface or other communication interface and a server based operating system.

The app development environment may be a software system for creating editing updating and deleting apps having an engine that comprises a plurality of components that together make up the entire app development environment . The app development environment is a software system comprising machine computer readable executable instructions that are executed by the processor or another processor. The app development environment has access to information that may be stored within memory .

In one example the app development environment stored in memory may include components for providing a web based app development environment having an app creation studio providing the ability to create edit update and delete one or more apps in an app library or portfolio. Each app in the app library or portfolio may include one or more file comprising one or more XML ADL code files app assets including images audio video etc. and an app icon. A developer may use the app creation studio to create a snapshot of an app and commit the data associated with the snapshot to the memory . As an example the app development environment may be stored in non transitory memory. 

Additionally the app development environment stored in memory may include a database of user account information associated with authorized developers. The user information may include usernames passwords email addresses and billing information among other information.

The development computer includes one or more processors to process data and memory to store data including a web browser and other optional programs for app development including media editors for creating and editing media and text editors for drafting documents including extensible markup language XML documents. The processor and memory are hardware. The memory includes non transitory memory e.g. random access memory RAM and one or more flash disks or hard drives. The non transitory memory may include any tangible computer readable medium including for example magnetic and or optical disks flash drives and the like.

The web browser e.g. a browser is a software application for retrieving presenting and traversing information resources available on the world wide web. An information resource may be identified by a uniform resource locator URL or uniform resource identifier URI and may be a web page an image other types of media or other piece of content. The web browser allows a user to transmit and receive information including hypertext markup language HTML documents extensible markup language XML documents and other files from servers including the app development computer . The developer may use the web browser to transmit and receive messages to the web based app development environment provided by the app development computer . In one example the web browser may be used to create edit update and delete apps in the app creation studio using the app development environment provided by the app development computer . The web browser may be used to edit and transmit one or more file comprising one or more XML ADL code files app assets including images audio video etc. and an app icon to the app development environment for storage in memory .

The development computer further includes a display and an input device . The display is used to display visual components of web pages displayed by the web browser such as a user interface of the app development environment . The display can include a cathode ray tube display a liquid crystal display a light emitting diode display a touch screen display and other displays. The input device is used to interact with the web browser and may include a mouse a keyboard a trackpad and or the like. The input device may be included within the display if the display is a touch screen display.

The mobile computing device includes one or more processors to process data and memory to store data including the app having the engine . The processor and memory are hardware. The memory includes non transitory memory e.g. random access memory RAM and one or more flash disks or hard drives. The non transitory memory may include any tangible computer readable medium including for example magnetic and or optical disks flash drives and the like.

The mobile computing device downloads and installs one or more apps having the engine . In one example the one or more apps having the engine are downloaded from the mobile repository computer system . The mobile computing device executes the app having the engine . Each of the one or more engines installed on the mobile computing device includes a parser for parsing an XML ADL file and a runtime manager for running an app based on the parsed XML ADL file. The engine parses and renders XML ADL files at runtime enabling developers to test in realtime and push out live updates to apps having the engine from the app development computer system once the apps have been downloaded from the app repository computer system rather than forcing end users to download app updates from the app repository computer system .

The mobile computing device further includes a display and an input device . The display is used to display visual components of the engine such as a user interface. The display can include a cathode ray tube display a liquid crystal display a light emitting diode display a touch screen display and other displays. The input device is used to interact with the apps and may include a mouse a keyboard a trackpad and or the like. The input device may be included within the display if the display is a touch screen display.

In one embodiment the app with the engine may be a test app for testing other app projects and for downloading and interacting with app projects created using the app development environment .

The developer computer may be connected to one of the mobile computing devices . The developer computer may be connected to the mobile computing device via a wireless or wired connection. This mobile computing device may include the test app for testing other apps and may include features used for testing the apps including debugging tools instrument tools and other development tools. A developer uses the developer computer to create an app with the engine and may test the app with the engine using the test app on the mobile computing device .

The app repository computer system includes one or more processors to process data and memory to store data including one or more apps having an included engine. The processor and memory are hardware. The memory includes non transitory memory e.g. random access memory RAM and one or more flash disks or hard drives. The non transitory memory may include any tangible computer readable medium including for example magnetic and or optical disks flash drives and the like. The data associated with the apps may be stored in a structured query language SQL server database or another appropriate database management system within memory . Additionally the memory may also include a dedicated file server having one or more dedicated processors random access memory RAM a Redundant Array of Inexpensive Disks hard drive configuration an Ethernet interface or other communication interface and a server based operating system.

The app repository computer system receives a request for an app having an engine from a mobile computing device and transmits a copy of the app to the mobile computing device . The mobile computing device receives data associated with the copy of the app and installs the app . After being downloaded and installed the mobile computing device executes the app .

The app development environment of the app development computer system communicates information including messages data and or files to the web browser of the development computer . As an example the app development environment is a web based application having a user interface viewed using the web browser on the development computer and or a native application executed by the development computer . The app development environment receives messages data and or files from the web browser of the development computer and transmits messages data and or files to the web browser of the development computer .

The app development environment includes an app development studio to create edit update and delete individual app projects. The app development studio allows a user to create edit update and delete XML ADL code upload app assets e.g. images audio video etc. upload app icons and splash screen images create app snapshots that include a commit of all code and app assets to a development GIT repository specifically for the app and promote an app snapshot to a release to be stored in a production GIT repository and uploaded to a digital distribution platform provided by the app repository computer system .

A GIT repository is a content addressable filesystem based on Git a free and open source distributed revision control system and source code management SCM system. In one embodiment the GIT repository may be a key value data store that may store any content including a snapshot of an app including an engine one or more XML ADL code files and app related assets. When the snapshot is stored in the GIT repository the GIT repository returns an output that is a key that may be used to retrieve the snapshot from the GIT repository. In one example the key is a forty character checksum hash. This forty character checksum hash is also known as a commitID because it represents a key to a version of the app saved or committed to the development GIT repository. The commitId may be a forty character id or message digest that is represented in hexadecimal and generated by running a cryptographic hash function e.g. secure hash algorithm 1 or SHA 1 on an arbitrary block of digital data e.g. an app binary file or executable file.

The app development studio includes a snapshot service module for creating app snapshots and storing the app snapshots in a GIT repository in memory . The app development studio further includes a code editor asset manager module for creating editing updating and deleting XML ADL code and app assets. In one example the code editor is a web based text editor and the asset manager is a web based file manager system for creating editing updating and deleting app assets e.g. images videos and music files. In one example the web based file manager system is a drag and drop type file manager. In another example the web based file manager system allows a user to select a file stored locally and upload the file to the app development studio. The app development studio further includes a certificate manager module for creating editing updating and deleting app certificates provisioning files and application programming interface API keys. A provisioning file is digital file that uniquely ties a developer and device to an authorized development team for submitting an app to the app repository computer system and enables a specific mobile computing device for testing. The app development studio includes a build services module for packaging code and app assets associated with an app and transmitting the code and app assets to a provisioner and a build log module for logging any build console information when the provisioner builds a version of an app. The app development studio includes development application GIT repositories for storing each snapshot including XML ADL code files and app assets associated with each snapshot for each app.

The app development environment further includes a provisioner to receive XML ADL code and app assets associated with an app project build the app project and provision a corresponding app having the engine . In an example embodiment the provisioner is executed by the processor . The provisioner includes a copy of Xcode Android Dev Tools build scripts and a GIT repository for storing temporary copies of code and app assets associated with one or more apps to be built. In one case a provisioning set of one or more servers having one or more processors and memory associated with the app development computer system executes the provisioner . The provisioner processes requests using round robin scheduling and one or more build requests are serviced simultaneously. During the build process the provisioner inserts a pre compiled shared library comprising the engine into each app to be built and signs the app with one or more certificates or files that prove an identity of a developer. Once the app is signed by the provisioner it may be uploaded to the app repository computer system .

The provisioner builds the app using the build scripts and transmits a built copy of the app including the engine as an .ipa file and or a .apk file to the app development studio . When an app is built using the build scripts the app development environment sends a build job in Javascript Object Notation JSON format to an appropriate messaging exchange and the messaging exchange distributes the job to a build queue. In one example the messaging exchange is a RabbitMQ messaging exchange that uses the advanced messaging queuing protocol AMQP . A listener on the provisioner claims the job from the build queue and the listener executes a particular build script for an appropriate platform e.g. an iOS build script or an Android build script. The build script creates a directory for the build based on the platform and the app project and engine are copied to the directory. Development certificates provisioning files icons launch images and other appropriate files are also copied to the directory. Templates are applied to data for the build job and resulting files are placed in the build directory.

In one example the templates are Smarty templates that generate specific manifest e.g. Android and or info.plist iOS files. Smarty is a web template system e.g. a template language written in PHP Hypertext Preprocessor . PHP is a server side scripting language for web development and also may serve as a general purpose programming language. PHP code is typically interpreted by a server with a PHP processor module e.g. the processor . The Smarty template generates web content through placement of special Smarty tags within a document. In other words the Smarty template is applied to the data for the build job and the resulting files are placed in the build directory.

Development certificates and provisioning files are inserted into a keychain of the provisioner . The build of the app including any necessary signing is executed by a bash script. The built file e.g. an .ipa file or an .apk file is transmitted to a remote location e.g. the app development computer system . The build output is parsed a status is determined success failure and passed back to the listener. The listener publishes a final job status to the messaging exchange and then waits for another job.

The development studio may transmit a copy of the .ipa file and or the .apk file to the developer computer . Using the web browser a developer may download the copy of the .ipa file and or the .apk file and transmit the copy of the .ipa file and or the .apk file to the app repository computer system . In one example the developer uploads the .ipa file to iTunes Connect for review and for sale by the app repository computer system . In another example the developer uploads the .apk file to Google play for review and sale by the app repository computer system . Sale may mean that the app is distributed by the app repository computer system for free and or for payment.

After the app with the engine has been uploaded to the app repository computer system and optionally approved by the provider of the app repository computer system through an app review process the app with the engine may be updated by updating the XML ADL code file without submitting an updated copy of the app to the app repository computer system . A user of the developer computer using the app development environment may make any changes to the XML ADL code files and or app related assets associated with the app with the engine and create a new development snapshot that is stored in the development application GIT repositories . The user may promote any development snapshot of the app with the engine to a release.

In addition to the app development studio and the provisioner the app development environment includes a release manager . In one embodiment the release manager includes production application GIT repositories a version manager and an upgrade bundle service .

The production application GIT repositories store copies of XML ADL code and app assets associated with versions of the apps with the engine that have been uploaded to the app repository computer system and subsequent updates to the apps with the engine e.g development snapshots of the app with the engine promoted to a release.

According to an example embodiment the app with the engine may be updated without uploading a new version of the app to the app repository computer system . The developer may make changes to the XML ADL code files and or other assets of the app with the engine and these changes will be pushed to mobile computing devices having the app with the engine .

However in certain instances the engine may have to be updated because it is incompatible. For instance an operating system of the mobile computing device may be updated and this may require that the app with the engine be updated to take advantage of new application programming interfaces APIs or because other APIs have been deprecated. The version manager sends a message to the mobile computing device the message indicating that the mobile computing device has an incompatible version of the engine that is not the latest version and that a compatible newer version of the engine is available for download with a newer version of the app from the app repository computer system .

The version manager receives a request from the app with the engine to determine whether a version of the app with the engine on the mobile computing device is a latest version of the app with the engine . The request includes a commitId and or a version number of the app with the engine .

In one example the initial version of the app with the engine stored with the app repository computer system including the original version of the XML ADL code files of the app with the engine may be version 1.0 and have a commitId of 1A. If the XML ADL code file is updated and the development snapshot of the engine is promoted to a release the app with the engine would be version 1.0 with a new commitID of 1 B. If a new version of the app with the engine is uploaded to the app repository computer system the version is now 2.0 and the commitId may be 2A. If the XML ADL code file of the new version of the app with the engine is updated the version is 2.0 and a new commitId may be 2B.

If the version manager determines that a mobile computing device has a version of the app with the engine that is not the latest version e.g 1.0 instead of 2.0 or 1.0 instead of 1.1 the version manager determines that the version of the app with the engine on the mobile computing device is incompatible and transmits a message to the mobile computing device indicating that a new version of the app with the engine should be downloaded from the app repository computer system . This means that the version number of the app with the engine was not used to produce the commitId and indicates that an engine of the version of the app on the mobile computing device is incompatible with the newest version of the app and that a newer engine compatible with the newest version of the app is available for download from the app repository computer system . In one example the message may be an alert dialog displayed on the mobile computing device with one or more options associated with downloading a newest version of the app from the app repository computer system . If allowed by a user of the mobile computing device the mobile computing device sends a request to the app repository computer system to download an updated version of the app with the engine .

The upgrade bundle service determines differences between the version of the app with the engine having a latest version but an older commitId and the latest version of the app with the engine with the newest commitId stored in the production repositories . The upgrade bundle service checks out app resources of the latest version of the app with the engine from the production repositories that have changed and stores data associated with the differences in a file. In one example the file may be an archive file e.g. a zip file. The upgrade bundle service transmits the file with the differences to the mobile computing device . The mobile computing device receives the file with the differences the engine extracts the file with the differences updates the app with the engine to the latest version and updates an internal commitId to match the commitId of the latest version of the app with the engine .

As an example the app with the engine is executed by the mobile computing device and displayed on the display . A user interacts with the app with the engine using the input device . The app with the engine receives messages and data from the release manager of the app development environment of the app development computing system and transmits messages and data to the release manager of the app development environment of the app development computing system .

When initially downloaded from the app repository computer system and installed the app having the engine is stored in a read only file system . According to an example embodiment the mobile computing device launches the app having the engine . The engine first determines whether the app has been updated since being uploaded to the app repository computer system . If the app has not been updated the engine retrieves the version number and the commitId from the app repository computer system version in the read only file system . If the app has updated XML ADL code and or other assets the engine retrieves the version number and the commitId from a last update. The updated XML ADL code and or other assets are stored in a read write file system along with the version number and commitId from the last update.

The engine includes a version update module to determine whether a version of the app having the engine on the mobile computing device is a latest version of the app having the engine . In one example the app with the engine may be version 1.0 and have a commitId of 1A. The original version of the app with the engine submitted to the app repository computer system includes one or more original XML ADL files along with other assets associated with the app. As noted herein the original version of the app having the engine submitted to the app repository computer system is stored in the read only file system in memory . When the app with the engine is first launched by the mobile computing device the engine creates the read write file system .

In another example if the app with the engine includes updated XML ADL code or other assets the engine retrieves the commitId from a last update. In one example the app with the engine may be version 1.0 and have a commitId of 1B. The updated XML ADL code or other assets are stored in the read write file system in memory .

The version update module transmits a message including a commitId and the version number of the app with the engine on the mobile computing device to the version manager of the release manager of the app development environment . The version manager determines a latest version number and commitId of the app with the engine stored in the production repositories . The version manager compares the version number and the commitId of the version of the app with of the engine on the mobile computing device with the latest release version number and commitId of the app with the engine .

If the version number of the app with the engine on the computing device is older than a version number of the app with the engine stored in the production repositories and submitted to the app repository computer system an update of the app with the engine is not allowed. For instance the latest version of the app with the engine uploaded as an app to the app repository computer system may be version 2.0 with a commitId of 2A but the version and commitId of the version of the app with the engine on the mobile computing device may be 1.0 and 1C. In other words the developer has uploaded a newer version of the engine with an app to the app repository computer system and the mobile computing device will need to download an updated version of the app with the newer version of the engine available from the app repository computer system and install the app with the newer version of the engine to the read only file system .

If the version manager determines that the app with the engine includes a newest version number of the app with the engine but the commitId from the app with the engine is older than the latest release commitId in the production repositories then this means that XML ADL code and or app assets have been updated and an update is determined to be necessary. The version manager sends a message to the upgrade bundle service to determine the app resources that have changed between the latest release commitId and the commitId of the app with the engine on the mobile computing device .

The upgrade bundle service performs a diff or determines the differences between the latest version of the app with the engine stored in the product repositories and the version of the app with the engine on the mobile computing device . The app resources that have changed are saved in a file. In one example the file may be a zip archive. The upgrade bundle service of the release manager transmits a copy of the file with the app resources that have changed and the new release commitId of the app with the engine to the mobile computing device . The engine receives the file with the app resources that have changed and the new release commitId of the engine and extracts the app resources in the file to the read write file system in memory of the mobile computing device . The engine updates the old commitId to the new release commitId.

Additionally the engine includes a parser module for parsing XML ADL code. According to an example embodiment the parser module parses the XML ADL code using SAX Simple API for XML parsing. SAX is an event based sequential access parser API that provides a mechanism for reading data from an XML document e.g. the XML ADL code. While the Document Object Model DOM also reads XML files DOM operates on an XML document as a whole while SAX parsers such as the parser module parse each piece of the XML document sequentially.

After the version update module determines that the app with the engine is the latest version of the app with the engine the parser module of the engine parses the ADL XML file and runs the engine . The engine further includes a runtime manager for running the app with the engine as a native app on the mobile computing device a layouter for converting the parsed ADL XML code into native interface components and a datasource manager for converting the parsed ADL XML code into internal and external datasources for the native app on the mobile computing device .

The layouter converts the parsed XML ADL code into user interface views including tableviews scrollviews containerviews web views dropdown menus including pickers buttons maps and other user interface components.

The datasource manager provides access to datasources available locally on the mobile computing device and externally on other computing devices. The datasource manager allows creating editing updating and deleting data locally and externally. The datasources may include web services e.g. representational state transfer REST web services rich site summary or really simple syndication RSS web services and SOAP originally simple object access protocol web services among others. The web services may include Facebook Twitter Flurry SalesForce and others. Additionally the datasources may include a camera datasource provided by camera hardware of the mobile computing device . The camera datasource may be used to capture photographs and video with and or without audio using the camera hardware and save the captured photographs and video with and or without audio locally and externally. There may be one or more camera datasource types including a photo type a barcode scan type and a video type. The datasources may include a GPS datasource provided by global positioning system GPS hardware of the mobile computing device a user contacts datasource provided by the mobile computing device a user calendar events datasource provided by the mobile computing device databases stored locally and externally by the mobile computing device and user preferences provided by the mobile computing device . The engine may communicate with the app repository computing system to process in app purchases. As an example the in app purchases may unlock new functionality or may download other standalone XML files for execution by the app.

The engine further includes a transaction manager for converting the parsed XML ADL code into in app purchase transactions and other transactions and an object event action handler for converting parsed ADL XML code into native objects native events and native actions. In one example the layouter the datasource manager the transaction manager and the object event action handler construct native objects and data structures at runtime based on the parsed XML ADL.

In step after the app is installed the mobile computing device launches the app. According to an example embodiment the app includes an embedded engine. In step the engine determines whether a writable directory exists for the app. If a writable directory for the app has not yet been created then the engine creates a writable directory for the app. In step the engine determines whether the app with the engine is a latest version by transmitting a message with a version number and a commitID to the mobile app development computer system .

In step if the app with the engine has a latest version number and commitId the engine parses one or more XML ADL files and begins an engine runtime. In step the engine constructs a layout of the app and interface components and displays the layout and the interface components on the display of the mobile computing device . In addition the engine constructs one or more datasources available on the mobile computing device and external datasources available on external computing devices. The datasources may include web services e.g. REST web services RSS web services SOAP web services etc. a camera datasource provided by the mobile computing device a GPS datasource provided by the mobile computing device a user contacts datasource provided by the mobile computing device a user calendar events datasource provided by the mobile computing device databases provided by the mobile computing device and user preferences provided by the mobile computing device . The engine may communicate with the app repository computing system to process in app purchases. As an example the in app purchases may unlock new functionality or may download other standalone XML files for execution by the app.

In step the engine sends a request to the release manager of the app development computer system with a version number and a commitId of the app with the engine . In step the release manager determines whether the version number and the commitId of the app with the engine on the mobile computing device corresponds with a latest version of the app with the engine in the production repositories . In step if the version number and or the commitId of the app with the engine does not correspond with a latest version and or commitId of the app with the engine the release manager determines that an update is necessary. In one example the version number and the commitId of the app with the engine on the computing device may be 1.0 and 1A. As an example the latest version of the app with the engine may have a version number of 1.0 and a commitId of 1C. As another example the latest version of the app with the engine may be version 2.0 with a commitId of 2A. In other words the developer has uploaded a newer version of the engine with an app to the app repository computer system and the mobile computing device will need to download an updated version of the app available from the app repository computer system and install the updated version of the app to the read only file system .

Once the mobile computing device has a correct version of the app but an older commitId in step the release manager determines the differences between the latest version of app with the engine with a newer commitId and the version of the app with the engine on the mobile computing device with an older commitId and inserts data associated with the differences into a file. The release manager may compress the file. In step the release manager transmits the file with the differences to the mobile computing device . In step the mobile computing device receives the file and the engine extracts the differences from the file to the mobile computing device . The engine updates the app using the differences and updates the commitID to match the latest version of the app with the engine . In step the engine determines that the app with the engine is the latest version of the app with the engine parses the XML ADL and runs the app.

In step the developer computer receives the data and or the web page and displays a web based app development environment using the web browser . In step the developer computer transmits messages and or data to the app development environment of the app development computer system to create edit update and delete individual app projects and store snapshots of the app projects as an app with an engine in the development application GIT repositories associated with the user account.

In step when the user is ready to test an app having an engine on a mobile computing device the developer may launch a test application which is also an app having an engine downloaded from the app repository computer system . The test application sends a login request message to the app development environment of the app development computer system . The app development environment of the app development computer system queries the database of user information to confirm that the user information provided with the login request message is correct. If the developer has a user account and the user information provided with the login request message is correct the app development environment transmits data associated with one or more apps having an engine of the user account. If a copy of the app having the engine is not available on the mobile computing device the mobile computing device transmits a request for the app having the engine to the app development computer system . The app development computer system receives the request and transmits a copy of the latest version of the app having the engine to the mobile computing device .

In step the mobile computing device launches the app having the engine and may test the app on the mobile computing device . Any changes to the app with the engine may be made using the app development environment and may be transmitted to the mobile computing device without recompiling the app. Similar to the description herein the app with the engine and or the test application determines whether the version on the mobile computing device is a latest version of the app with the engine before running.

In step the developer computer transmits app certificates provisioning files application programming interface API information and other information to the app development environment of the app development computer system using the web browser . In step the app development computer system creates an adhoc and or an app repository computer system version of the app having an embedded engine using the provisioner . The provisioner uses the app certificates provisioning files and API information to create the adhoc and or the app repository computer system version of the app. In step the app development computer system transmits a copy of the adhoc and or the app repository computer system version of the app with the engine to the developer computer . The developer may distribute the copy of the adhoc and or the app repository computer system version of the app to the app repository computer system .

After the app with the engine has been uploaded to the app repository computer system the app having the engine may be updated. The user may promote any development snapshot of the app having the engine to a release. When a development snapshot is promoted to a release this creates a clone of the snapshot in the production GIT repository and updates a commitId of a latest version of the app with the engine . Thus when the app with the engine is launched on the mobile computing device the version update module will determine whether the current version and commitId of the app with the engine on the mobile computing device is a latest version and commitID of the app with the engine available to mobile computing devices .

The screenshot shown in is provided by an app FasTip that only includes and WIRE code. Visual information is found in the block of the WIRE code. The block of the WIRE code includes text panels scrollable pages images and other view elements. The block of the WIRE code includes actions for the app to execute on launch and at user request. The WIRE code for the FasTip app is shown in Appendix A.

As shown in FasTip is an app with the engine for calculating a tip amount based on a bill amount. In one example the bill amount may be 8.45. As shown in when a user selects the calculate tip button the app determines a tip amount based on a tip percentage and displays the tip amount and the total amount. In this case if the bill amount is 8.45 the tip amount is 1.27 and the total amount of the bill including the tip is 9.72.

WIRE code for a first camera capture app having the engine for capturing a photograph and using a flash of the camera hardware of the mobile computing device is shown in Appendix B. WIRE code for a second camera capture app having the engine for capturing a photograph storing the photograph in memory of the mobile computing device and sending the photograph via email or tweeting the photograph is shown in Appendix C. WIRE code for an app having the engine for displaying a map with pins showing predefined locations of recent earthquakes that have occurred around the world is shown in Appendix D.

In this example the developer has created five different apps with engines entitled Spark fastip maptest tester and rsstest. When a user selects an update button the test app determines whether a newer version of each of the apps associated with the developer is available. Here the user interface displays five buttons in a tableview each button corresponding to one of the five different apps. Each of the buttons shows a text title of the app and a visual icon representing the app. The user interface shows visual indicators that indicate whether each of the five different apps have been downloaded to the mobile computing device . An arrow visual indicator shows that a newest version of an app has been downloaded to the mobile computing device and is ready for testing. A cloud visual indicator shows that a newest version of an app has not yet been downloaded to the mobile computing device but that a copy is available for download at the app development computer system .

When a user selects the top button associated with Spark the test app launches a copy of the Spark app. The engine associated with the Spark app displays a user interface of Spark on the mobile computing device . When a user selects the cloud button associated with fastip the test app downloads a copy of fastip. Once the fastip app is downloaded the test app no longer displays the cloud button and only displays an arrow visual indicator indicating that a newest version of fastip has been downloaded to the mobile computing device and is ready for testing.

The Settings button provides platform settings cache settings software development kit SDK settings and studio preferences. The Frame button provides a web based interface to layout an app user interface visually rather than programmatically. The Provisioning button provides a certificate manager for uploading information associated with provisioning apps including iOS provisioning information comprising an app bundle ID a distribution certificate a distribution provisioning profile for app repository computer system distribution an adhoc distribution provisioning profile and Android provisioning information comprising a package name public key information a key alias and private key information. The Resources button provides file transfer protocol FTP access information hotkeys information and a way to invite collaborators. The Help button provides FAQ information associated with the mobile application development system XML ADL documentation and access to forums to discuss and collaborate with other developers using the mobile application development system .

When a user selects one of these buttons using the input device the web browser will transmit a request to the app development environment and the app development environment will respond to the request by transmitting data and or information associated with the selected button.

Additionally the user interface of the mobile application development environment includes a file manager having a list of files associated with a currently selected app having an engine and a plurality of buttons for creating editing updating and deleting files associated with the app having the engine . In this case the user selected the main.wire shown in the file manager . The mobile application development environment displays WIRE code associated with the app having the engine in the text editor . The user may create edit update and delete WIRE code in the main.wire file using the input device and save any changes by selecting a Save File button shown in . As noted above example WIRE code is shown in Appendices A D.

The memory section may be volatile media nonvolatile media removable media non removable media and or other media or mediums that can be accessed by a general purpose or special purpose computing device. For example the memory section may include non transitory computer storage media and communication media. Non transitory computer storage media further may include volatile nonvolatile removable and or non removable media implemented in a method or technology for the storage and retrieval of information such as computer machine readable executable instructions data and data structures engines program modules and or other data. Communication media may for example embody computer machine readable executable data structures program modules algorithms and or other data. The communication media may also include an information delivery technology. The communication media may include wired and or wireless connections and technologies and be used to transmit and or receive wired and or wireless communications.

The I O section is connected to one or more user interface devices e.g. a keyboard and a display unit a disc storage unit and a disc drive unit . Generally the disc drive unit is a DVD CD ROM drive unit capable of reading the DVD CD ROM medium which typically contains programs and data . Computer program products containing mechanisms to effectuate the systems and methods in accordance with the presently described technology may reside in the memory section on a disc storage unit on the DVD CD ROM medium of the computer system or on external storage devices made available via a cloud computing architecture with such computer program products including one or more database management products web server products application server products and or other additional software components. Alternatively a disc drive unit may be replaced or supplemented by a floppy drive unit a tape drive unit or other storage medium drive unit. The network adapter is capable of connecting the computer system to a network via the network link through which the computer system can receive instructions and data. Examples of such systems include personal computers Intel or PowerPC based computing systems AMD based computing systems and other systems running a Windows based a UNIX based or other operating system. It should be understood that computing systems may also embody devices such as Personal Digital Assistants PDAs mobile phones tablets or slates multimedia consoles gaming consoles set top boxes etc.

When used in a LAN networking environment the computer system is connected by wired connection and or wirelessly to a local network through the network interface or adapter which is one type of communications device. When used in a WAN networking environment the computer system typically includes a modem a network adapter or any other type of communications device for establishing communications over the wide area network. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in a remote memory storage device. It is appreciated that the network connections shown are examples of communications devices for and other means of establishing a communications link between the computers may be used.

In an example implementation source code executed by the app development computer system the developer computer the mobile computing device and the app repository computer system a plurality of internal and external databases source databases and or cached data on servers are stored in memory of the app development computer system memory of the developer computer memory of the mobile computing device memory of the app repository computer system or other storage systems such as the disk storage unit or the DVD CD ROM medium and or other external storage devices made available and accessible via a network architecture. The source code executed by the app development computer system the developer computer the mobile computing device and the app repository computer system may be embodied by instructions stored on such storage systems and executed by the processor .

Some or all of the operations described herein may be performed by the processor which is hardware. Further local computing systems remote data sources and or services and other associated logic represent firmware hardware and or software configured to control operations of the mobile application development system and or other components. Such services may be implemented using a general purpose computer and specialized software such as a server executing service software a special purpose computing system and specialized software such as a mobile device or network appliance executing service software or other computing configurations. In addition one or more functionalities disclosed herein may be generated by the processor and a user may interact with a Graphical User Interface GUI using one or more user interface devices e.g. the keyboard and the display unit with some of the data in use directly coming from online sources and data stores. The system set forth in is but one possible example of a computer system that may employ or be configured in accordance with aspects of the present disclosure.

In the present disclosure the methods disclosed may be implemented as sets of instructions or software readable by a device. Further it is understood that the specific order or hierarchy of steps in the methods disclosed are instances of example approaches. Based upon design preferences it is understood that the specific order or hierarchy of steps in the method can be rearranged while remaining within the disclosed subject matter. The accompanying method claims present elements of the various steps in a sample order and are not necessarily meant to be limited to the specific order or hierarchy presented.

The described disclosure may be provided as a computer program product or software that may include a non transitory machine readable medium having stored thereon executable instructions which may be used to program a computer system or other electronic devices to perform a process according to the present disclosure. A non transitory machine readable medium includes any mechanism for storing information in a form e.g. software processing application readable by a machine e.g. a computer . The non transitory machine readable medium may include magnetic storage medium e.g. floppy diskette optical storage medium e.g. CD ROM magneto optical storage medium read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM or flash memory.

The description above includes example systems methods techniques instruction sequences and or computer program products that embody techniques of the present disclosure. However it is understood that the described disclosure may be practiced without these specific details.

It is believed that the present disclosure and many of its attendant advantages will be understood by the foregoing description and it will be apparent that various changes may be made in the form construction and arrangement of the components without departing from the disclosed subject matter or without sacrificing all of its material advantages. The form described is merely explanatory and it is the intention of the following claims to encompass and include such changes.

While the present disclosure has been described with reference to various embodiments it will be understood that these embodiments are illustrative and that the scope of the disclosure is not limited to them. Many variations modifications additions and improvements are possible. More generally embodiments in accordance with the present disclosure have been described in the context of particular implementations. Functionality may be separated or combined in blocks differently in various embodiments of the disclosure or described with different terminology. These and other variations modifications additions and improvements may fall within the scope of the disclosure as defined in the claims that follow.

