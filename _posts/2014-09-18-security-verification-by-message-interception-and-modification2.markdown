---

title: Security verification by message interception and modification
abstract: Data security is enhanced by injecting insecurity into communications between two computer systems to test one of the computer systems. The insecurity is injected by modifying the communications between the two computer systems by modifying or adding messages. A response from one of the computer systems is monitored to determine whether the computer system reacts to the modification in a secure manner or if mitigating actions need to be performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09571465&OS=09571465&RS=09571465
owner: Amazon Technologies, Inc.
number: 09571465
owner_city: Seattle
owner_country: US
publication_date: 20140918
---
The security of computing resources and associated data is of high importance in many contexts. As an example organizations often utilize networks of computing devices to provide a robust set of services to their users. Networks often span multiple geographic boundaries and often connect with other networks. An organization for example may support its operations using both internal networks of computing resources and computing resources managed by others. Computers of the organization for instance may communicate with computers of other organizations to access and or provide data while using services of another organization. In many instances organizations configure and operate remote networks using hardware managed by other organizations thereby reducing infrastructure costs and achieving other advantages. With such configurations of computing resources ensuring that access to the resources and the data they hold is secure can be challenging especially as the size and complexity of such configurations grow.

Many techniques have been developed to enhance data security. However with large distributed systems different people may have different roles and different skills with respect to development of and maintenance of applications executing in the distributed systems. With a distributed system employing many different types of applications each with its own role ensuring the security of data accessible to the various applications can be a challenge. In many examples insecurities introduced into an application whether maliciously or inadvertently can be difficult to detect. For example an application with code having an insecure feature e.g. an improper implementation of a secure communications protocol may nevertheless operate in accordance with its primary purpose providing no indication of the insecurity that is present.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include injecting insecurity into communications to test computer systems to detect potential vulnerabilities to data security enabling such vulnerabilities to be addressed. In an embodiment a client and a server communicate with one another using a secure communications protocol such as transport layer security TLS or secure sockets layer SSL . Insecurity is injected into communications transmitted in accordance with the protocol to detect whether a computer system is configured with a faulty implementation of the secure communications protocol. The insecurity may be injected by modifying messages from one computer system to the other to determine how a recipient operates upon having received the modified message s . Modifications may be made to introduce an error or other manner of noncompliance into messages. As an example a digital certificate may be modified to be invalid or replaced with an invalid certificate. Whether the computer system that receives the invalid certificate continues operating as if the certificate is valid indicates whether the computer system operates securely at least with respect to a particular manner of handling a digital certificate.

The way by which insecurity is injected into communications may vary in accordance with various embodiments. For example in some examples a computer system in a communications path between two computer systems may operate as a man in the middle. The man in the middle may selectively modify messages passing through the man in the middle for the purpose of testing the system s to which the messages are addressed. When the man in the middle modifies a message to a computer system the man in the middle or another computer system may monitor operation of the computer system to which the message was addressed. For example the man in the middle may analyze messages from a computer system being tested to determine whether the computer system acted in accordance with a protocol s design such as whether the computer system allowed a handshake process to complete despite the invalid certificate. In some examples the man in the middle selectively causes messages to not be delivered i.e. blocks the messages as a way of injecting insecurity.

In some examples a network firewall is equipped with an extension e.g. a programming module that regularly injects insecurity into a limited number of connections between two network endpoints e.g. connected with an SSL TSL connection and introduces insecurity on the channel. This introduced insecurity can be in the form of injecting or tampering with protocol messages in a connection. This firewall extension may for example periodically i.e. every 2 hours manipulate one of these connections and act as a man in the middle. For example the extension may use an invalid certificate while spoofing one of the endpoints. If the endpoint continues to send messages on the connection one or more mitigating operations may be performed such as by transmitting a notification or storing data that indicates that the endpoint should be audited.

In other examples a first computer system monitors a second computer system with which the first computer system communicates without a separate man in the middle injecting the insecurity. As an illustrative example a client may initiate a TLS handshake with a server e.g. by transmitting a Client Hello message to the server and to test the client the server may respond to the initiation of the handshake by providing an invalid certificate. If the client allows the TLS handshake to complete successfully an indication that the client is not properly authenticating server certificates the server may perform one or more mitigating operations such as by blacklisting the client transmitting a message to cause other servers in a fleet to blacklist the client transmitting a notification adding a record to a log and or performing other operations. If however the client rejects the invalid server certificate the server may simply continue operations as normal or may perform additional operations such as by adding the client to a temporary whitelist which may be shared by multiple servers in a fleet . When the client retries connection starting with the TLS handshake the server may then provide a valid server certificate e.g. because the client is on the temporary whitelist and communicate with the client normally. The whitelist may operate as a cache where items are expired and removed from the list so that the client may then again be tested at a later time.

In some examples customer computer systems of a service provider are tested in accordance with techniques described herein. Various mitigating operations may be performed in connection with the accounts of customers of the service provider. In an electronic commerce environment for example a mitigating operation may result in a limit to an amount e.g. measure in currency the customer is allowed to purchase over a time period e.g. a day . As another example a mitigating operation may result in limited payment options such as a reduced set of payment e.g. credit cards the customer is able to use. As yet another example a mitigating operation may result in physical items only being shippable to a certain set of addresses e.g. an address verified as a home address . As yet another example fraud detection systems of a service provider may be notified to change fraud detection thresholds to be lower. In some embodiments a mitigating operation causes a service provider computer system to limit one or more types of information that the customer through a respective customer computer system is requested to provide. For instance the service provider computer system may avoid requesting information classified as sensitive such as a social security number credit card number password and or other information.

In some examples a browser application e.g. via a browser plugin application of a client customer computer system tests servers of a service provider such as servers of an electronic commerce system. The application may cause the client to limit web page functionality when the application detects an improper server response to an insecurity injection. For example the application may allow browsing of an electronic catalogue of an electronic commerce system but may limit the ability to provide sensitive information by for instance disabling whole pages disabling credit card and or social security number fields and or by disabling user interface elements for completing a transaction e.g. buy buttons . Such an application may analyze e.g. via a rules engine web pages to determine which functionality to disable. In some examples the service provider uses a marker in a uniform resource locator URL or in the content of the webpage itself to indicate to the client pages which may involve the transfer of sensitive information to enable the client to disable functionality. In some examples the application has access to a local and or remote registry of pages which may be indexed by URLs to determine which pages may warrant disabled functionality.

Other variations are also considered as being within the scope of the present disclosure. For example the type of application which applies which when executed by one or more processors causes a computer to apply a test to another computer system may vary. As noted a server application a man in the middle application or a browser application may apply tests to other computer systems. As another example a password manager application may be configured to apply tests and or to obtain the results of applied tests. The password manager may for instance be configured to avoid inserting a password into a password field for a web page provided by a server that failed a test or to require additional operations to be performed e.g. the navigation through one or more additional prompts before a password is inserted. Other applications may also include functionality described herein and explicitly mentioned applications are provided for the purpose of illustration.

Further as discussed in more detail below the client and the server may communicate using various communications protocols including protocols for establishing secure communications channels between the client and the server . A secure communications channel may be a mode of communication between two or among more than two computer systems where each entity is operable to encrypt messages such that another entity to which the encrypted messages are transmitted is operable to decrypt the messages. An example of a secure communications channel is a TLS session negotiated using a TLS handshake. While various examples of the present disclosure use pairs of devices communicating with one another for the purpose of illustration secure communications channels may be established in groups of devices where the number of devices is greater than two. The techniques described herein may thusly be adapted by providing the entities the information that enables employment of techniques described herein. In some embodiments a TLS protocol such as defined in Request for Comments RFC 5246 RFC 2246 RFC 4279 RFC 6347 RFC 5238 RFC 6083 RFC 5764 and RFC 6176 which are incorporated herein by reference is used to establish a secure channel. Other protocols such as secure sockets layer SSL Internet Protocol Security IPSec Secure Shell SSH and other protocols implemented below the application layer of the Open Systems Interconnect OSI model may also be used and or adapted to utilize techniques described herein. It should be noted that the techniques described herein are adaptable to other protocols such as the Real Time Messaging Protocol RTMP the Point to Point Tunneling Protocol PPTP the Layer 2 Tunneling Protocol various virtual private network VPN protocols and other protocols such as protocols for secure communication that include a handshake.

As illustrated by the syringe in the techniques of the present disclosure involve the injection of insecurity into communications between the client and the server . In some examples insecurity is injected into the communications between the client and the server for the purpose of testing the client or the server . Insecurity may be injected into communications between the client and the server in various ways in accordance with various embodiments many examples of which are discussed in more detail below. In some examples insecurity is injected into the communications between the client and the server by modifying messages transmitted between the client and the server . The messages modified may depend on the system being tested. For example if the client is being tested messages from the sever to the client may be transformed to test the response of the client to the message that has been modified. Similarly if the server is being tested a message from the client may be modified to test the server s response to the modification. In some examples messages are modified to test whether a computer system operates in a secure manner where operation in a secure manner may be determined by determining whether the computer system operates in accordance with a protocol s design and or in accordance with one or more security policies. In some examples a message between the client and the server is modified so as to fail to comply with a secure communications protocol such as TLS used by the client and the server to communicate over a secure channel.

A behavior of the entity client and the server receiving the modified message may be monitored to determine whether that entity operates in a secure manner when messages fail to comply with the secure communication protocol. In other examples additional messages i.e. messages whose primary purpose is testing and that would not otherwise be transmitted are transmitted for the purpose of testing the behavior of an entity receiving the message. For example a message may be configured to fail to comply with the secure communications protocol and transmitted to the client . The message may originate from a computer system different from the server but may be configured with a source network address e.g. source Internet Protocol IP address of the server . Generally insecurity is purposefully injected into the communications between the client and the server for the purpose of testing the client and the server and the manner by which insecurity is injected may vary in accordance with various embodiments.

As discussed in more detail below insecurity may be injected into communications between the client and the server at the direction of the client at the direction of the server or at the direction of another entity such as another computer system not illustrated in . While shows for the purpose of illustration a client and server relationship it should be noted that the techniques described here are applicable to a wide variety of computing environments including communications between computer systems that may not be classified as clients or servers but generally computer systems that communicate with each other as part of their operations.

As illustrated in the environment includes a plurality of computer systems . The computer system may be a client computer system or a server system or generally any computer system configured to communicate over a network and to which techniques described herein may be applicable. In some examples the computer systems are part of a distributed computer system such as a distributed system that supports an electronic commerce website or other service. Some computer systems may implement services of the distributed system related to operations of the website. Other computer systems may consume services provided by other computer systems . In reference to discussed below one computer system may be a web server and another computer system may be an application server as part of providing a website. The web server may communicate with the application server to determine information to be provided on a web page served by the web server. Other examples are also considered as being within the scope of the present disclosure including generally computer systems that play different roles in different contexts.

As noted above various embodiments of the present disclosure utilize a man in the middle model to test computer systems that communicate in a network. Testing may be performed for example to ensure that nodes in a distributed system operate in accordance with one or more data security policies and therefore operate in a manner that maintains the security of customer data. As illustrated in the environment may include a man in the middle computer system which may be the computer system in a network path between the computer systems . The man in the middle computer system may be implemented in various ways in accordance with various embodiments. In some examples a man in the middle computer system may be implemented as a firewall or other routing device in network over which the computer systems communicate. As yet another example the man in the middle computer system may be implemented using a Wi Fi access point that is a computer system. A computer system operating a Wi Fi access point may also operate as a man in the middle. Generally the man in the middle computer system may be implemented by any capable computing device through which communications between pairs of computer systems are routed. It should be noted that while shows an environment with a single man in the middle computer systems large computer networks may include multiple man in the middle computer systems for the purpose of scalability and to provide the ability to test computer systems without creating network bottleneck through man in the middle computer system .

As illustrated in the man in the middle computer system may include various applications that include executable code that when executed by the man in the middle computer system causes the man in the middle computer system to implement various techniques described herein. For example as Illustrated in the man in the middle computer system may include an injection module and a remediation module . The injection module may comprise executable code that when executed by the man in the middle computer system causes the man in the middle computer system to inject insecurity into communications between pairs of computer systems in order to test a computer system of the pair. The injection module may be configured for example to cause the man in the middle computer system to intercept messages that modify those messages to fail to comply with a secure communications protocol e.g. by introducing an erroneous result of a cryptographic computation or to otherwise inject insecurity into communications between the pair of computer systems .

The remediation module may comprise executable code that when executed by the man in the middle computer system causes the man in the middle computer system to analyze a response of a computer system to the injection of an insecurity into communications to the computer system and to perform one or more mitigating operations. An example of mitigating operations includes blocking communications to and or from the computer system that failed to provide responses in a proper manner to the insecurity injection. Other mitigating operations that may be performed in alternative or in addition to blocking communications include transmitting one or more notifications throttling communications to and or from the computer system blacklisting the computer system by adding a network address of the computer system to a blacklist annotating communications from the computer system to indicate to other computer systems a potential insecurity to enable the other computer systems to operate in accordance with having received communications having the flag quarantining communications from the computer system and or other operations. Notifications that are transmitted in accordance with various embodiments may provide relevant information such as an indication of the manner in which a computer system operated insecurely and or a potential fix e.g. a software patch to address the insecure operation. Other operations that may be performed include performing a scan of the computer system to obtain more information and or to modify executable code of the computer system in order to cause the computer system to operate in a secure manner. The executable code of the computer system may be modified for example by pushing one or more software patches to the computer system or otherwise updating the computer systems operating system applications and or firmware.

As illustrated in the environment also includes an administrative system . The administrative system may be a computer system with an application that is operable to cause the administrative system to orchestrate operation of the injection module and or remediation module . For example the administrative system may be configured to provide to the man in the middle computer system configuration data that indicates to the man in the middle system computer system the parameters for operation of the injection module and or remediation module . The administrative system for example may transmit instructions to the man in the middle computer system to test particular computer systems to provide a list of computer systems to be tested to provide parameters for the test to be performed and or otherwise to indicate to the man in the middle computer system how to operate.

The environment may also include a log which may be a data storage system generally a data repository that stores data related to the operation of the man in the middle computer system . For instance in some examples the man in the middle computer system injects insecurity into communications to one or more computer systems and communications from the one or more computer systems being tested are stored in the log . The administrative or another computer system may consume e.g. process by analyzing logs in the log to asynchronously process the logs to determine whether the one or more computer systems being tested are operating securely. The log may also contain other data such as data relating to the operation of the man in the middle computer system and its operations such as instances of insecurity injection performed by the man in the middle computer system and responses thereto by computer systems .

In some embodiments the process is performed as a result of various events happening. For example the process may be performed as a result of an instruction to perform with the process from an administrative computer system such as described above. The instruction or other information may be provided to a system performing the process to cause the system performing the process in accordance with parameters that have been provided. The parameters may for example specify computer systems to be tested and or the manner by which they are to be tested.

Turning to the specifics of the example embodiment illustrated in the process may include selecting a next computer system to test. The next computer system to test may be the first computer system in a list of computer systems to be tested by a system performing the process . It should be noted however that the computer system to test may be selected in other ways in accordance with the various embodiments. For example in some embodiments a computer system is selected in a random manner. As another example a computer system may be tested as a result of being a computer system from which a system performing the processing has most recently received a communication. Generally any way by which a computer system may be selected may be used.

Once a computer system to test has been selected the process may include causing messages to and from the computer system to be logged. The manner by which messages to and from the computer system are caused to be logged may vary in accordance with various embodiments. In some examples a system performing the process stores messages to and from the computer system locally and causes messages to and from the computer system to be logged by updating a table or other data structure that indicates to the system performing the process to log messages that it receives to and or from the computer system that was selected to be tested. In other examples a system performing the process logs messages in a remote data store such as a log discussed above in connection with . In such examples a system performing the process may update a table or other data structure to indicate to the system to log messages to and or from the computer system selected to be tested. In yet another example in some embodiments a system different from the system performing the process e.g. one or more other computer systems in one or more network paths through which the messages may pass may be configured to log messages to and or from the computer selected to be tested. In such embodiments causing messages to and or from the computer system to be logged may be performed by transmitting an instruction to another computer system or multiple computer systems through which communication may pass on route to or from the computer system that was selected for testing to thereby cause that other computer system to log messages to and or from the computer system selected for testing.

The process may also include causing insecurity to be injected into one or more messages to the computer system that was selected for testing. As discussed above the security may be caused to be injected into one or more messages by modifying the one or more messages to fail to comply with a secure communications protocol.

In some embodiments a system different from the system performing the process injects insecurity into one or more messages to the computer that was selected for testing. As an illustrative example in reference to in embodiments where the administrative computer system performs the process the administrative computer system may send an instruction to the man in the middle computer system to cause the man in the middle computer system to inject insecurity into one or more messages to the computer system .

A determination may be made whether there are additional computer systems to test. For example in embodiments where a list of computer systems is processed a determination may be made whether there are additional computer systems in the list to be tested. The determination whether there are additional computer systems may also be performed in other ways such as by determining a number of computer systems that have been tested and whether that number has made a threshold number of computer systems to test or otherwise. If it is determined that there are additional computer systems to test the process may include selecting the next computer system to test. As discussed above the next computer system may be selected as a next in the list or otherwise such as randomly.

The process as described above may repeat as illustrated in until it is determined that there are no additional computer systems to test. When it is determined there are no additional computer systems to test the process may include transmitting an indication of test completion. The indication of test completion may comprise for example a message that indicates completion of a test of a plurality of computer systems. The message may be an internal message such as when the administrative computer systems described above in connection with performs the process or the message may be a message over a network such as when the man in the middle computer system discussed above in connection with performs the process and indicates to another computer system such as the administrative computer system that the test has been completed. Other variations are also considered as being within the scope of the present disclosure.

As noted above various embodiments of the present disclosure include asynchronous analysis of responses to injections of insecurity to communications. accordingly shows an illustrative example of a process for asynchronously analyzing responses of computer systems that have been tested. The process may be performed by any suitable systems such as by an administrative computer system described above in connection with or generally any computer system configured with executable instructions for performing the process . In an embodiment the process includes accessing log records for a next tested computer system. When the process has initially begun the next tested computer system may be the first computer system in a list of computer systems that has been tested although as noted selection of a computer system for many may be performed in other ways such as randomly. For example in large distributed systems where a large number of computer systems have been tested computer system logs may be selected randomly to obtain an even distribution of systems that are tested at any given time.

From the log records that were accessed the process may include determining an insecurity injection that was applied to the computer system. For example in some embodiments a system testing other computer systems may have a plurality of types of insecurity injection that may be applied and the log records may indicate which of the several types was applied. The insecurity injection may be determined also as a default security injection. The process may also include determining a set of proper responses to the insecurity injection that was applied. In some examples the set of proper responses comprises a single operation or not performing a certain operation and performance of or no performance of that operation is identified to the computer system performing the process as being a proper response. A table or other data structure may associate types of insecurity injections with sets of proper responses to the insecurity injections so that the system performing the process may reference the table or other data structure to determine the set of proper responses.

The accessed log records may be analyzed to determine an actual response to the insecurity injection. As an illustrative example if the insecurity injection was presentation of an invalid certificate during a TLS handshake process the log records may be analyzed to determine whether the tested computer system nevertheless allowed the TLS handshake process to complete. As another example some types of insecurity injections may have a single proper response that includes ceasing communications. Thus the log records may be analyzed to determine whether communications were ceased by for example the absence of log records indicating communication from the tested computer system in the log records that were accessed . Generally any way by which log records may be analyzed to determine the actual response may be used.

Once a system performed the process has determined a set of proper responses and determined the actual response. The process may include determining whether the actual response matches a proper response in the set of proper responses that was determined . If it is determined that the actual response matches a proper response in the set of proper responses that was determined the process may include determining whether there are additional computer systems to test and if so accessing log records for the next tested computer system such as described above. As noted the next tested computer system may be a next tested computer system in a list of computer systems that have been tested or may be a tested computer system selected in another manner such as randomly. The process may repeat as described above until it is determined that the actual response of a tested computer system does not match any proper response from the set of proper responses that was determined .

When it is determined that the actual response does not match a proper response of a set of proper responses that was determined the process may include performing one or more mitigating operations such as described above. For example the tested computer system may be blacklisted and or other operations may be performed in connection with the computer system that was tested. A determination may be made whether there are additional tested computer systems such as described above and the process may repeat as described above until it is determined that there are no additional computer systems to test. When it is determined that there are no additional computer systems to test the process may include transmitting an indication of completion of the process . The transmission of an indication of completion may be performed for example as an internal communication indicating an end to the process and or may include transmission of one or more messages over a network to indicate completion of the process .

Various techniques for testing computer systems may be employed in various embodiments of the present disclosure. For example show a systematic process of testing computer systems and analyzing the results. The manner by which computer systems are tested may vary in various embodiments. shows an illustrative example of a process for testing computer systems. The process may be performed by any suitable system such as a man in the middle computer system described above in connection with or another computer system such as a computer system that is communicating with another computer system such as described below in more detail in connection with .

In an embodiment the process includes obtaining a next message. The next message may be the next message in a queue of messages of the system performing the process . For example when the process is performed by a man in the middle computer system the man in the middle computer system may queue messages that it receives and process the messages in accordance with an order in the queue. Processing the message may include for some messages routing the messages to their destination and or performing other operations such as operations of the process .

When the next message has been obtained the process may include making a determination whether to inject insecurity. The determination whether to inject insecurity may be made in various ways in accordance with various embodiments. In some embodiments a table or other data structure is referenced to determine whether the computer system performing the process has recorded that a computer system corresponding to a destination of the next message that was obtained has been identified for testing. As another example the determination whether to inject insecurity may be made randomly as part of a process that randomly tests computer systems in order to generally verify secure operation of computer systems in a distributed system. In some embodiments the determination whether to inject insecurity may be made based at least in part on one or more records that indicate whether the computer system to which the message is addressed has already been tested within an amount of time specified as recent. For example in some embodiments a server computer system establishes a session with a client computer system. The client computer system and or server computer system may be tested once per session. The determination when to inject insecurity may be made at least in part on whether the message was received as part of the same session for which a test has already been performed. As yet another example content of the message may be analyzed to determine whether to inject insecurity. For example in some instances certain messages of a TLS handshake protocol trigger tests. As an example a message that includes information indicative of inclusion of a certificate that is provided in accordance with a TLS handshake may trigger a determination to inject insecurity into the message for example by modifying the certificate. Other ways by which a determination may be made including combinations of the above are considered as being within the scope of the present disclosure.

If it is determined not to inject insecurity the message may be transmitted to its destination. A next message may be obtained and the process may repeat as described above until it is determined to inject insecurity. When it is determined to inject insecurity the process may include determining an insecurity to inject. The insecurity to inject may comprise an operation to be performed on the message on or otherwise in connection with the message. As noted above the insecurity may comprise a modification of the message to cause the message to have an error that is out of compliance with a secure communications protocol.

The insecurity to inject may be determined in various ways in accordance with various embodiments. For example in some embodiments a system performing the process is operable to inject different types of insecurities and the process may include randomly or non randomly selecting an insecurity to inject from the multiple insecurities. As another example a system performing the process may simply be operable to determine a single insecurity to inject. As a result the insecurity to object may be determined as a default. As yet another example as noted above content of the message may be used to determine whether to inject the insecurity. The specific content that triggered the determination to inject the insecurity may be associated with a type of insecurity to inject. As an example if a certificate of a TLS handshake triggered the determination to inject the insecurity the insecurity to inject may be determined as a modification of the certificate. Other ways of determining an insecurity to inject are considered as being within the scope of the present disclosure.

Once the insecurity to inject has been determined the process may include modifying the message in accordance with the determined insecurity. As noted the message may be modified in various ways in various embodiments such as by modifying contents of the message to cause the message to cause an error in a proper implementation of a secure communications protocol. In addition to modifying the message in accordance with the determined insecurity the process may include causing a response to the insecurity injection to be monitored. The response to the insecurity injection may be caused to be monitored in various ways in accordance with various embodiments. In some examples a table or other data structure is updated to enable the system performing the process or another system performing the monitoring to distinguish messages from the system to which the message is addressed from other messages in order to log the messages and or information about the messages. As another example another computer system that performs the monitoring may be instructed to perform the monitoring and the instruction may include information that enables the monitoring to occur such as a network address of the computer system to which the message was addressed.

The process may also include transmitting the modified message to its destination in order to enable the computer system corresponding to the destination to process the modified message so that its response to the modification may be monitored. The process may repeat as described above as the system performing the process processes network traffic. A system that performs the process or another system may monitor communications from a computer system that was tested by the injection of insecurity.

If it is determined that the message was not from a system being monitored the process may include transmitting the message to its destination. The process may repeat as illustrated in by obtaining a next message and determining whether that next message is from a system being monitored until it is determined that the message currently being processed by performance of the process originated from a computer system being monitored. When it is determined that the message is from a computer system being monitored the process may include determining an insecurity injection implied to a previous message such as described above. Further the process may also include determining a set of proper responses to the insecurity injection that was determined have been applied. The set of proper responses may be determined such as described above.

The message currently being processed by performance of the process may be analyzed to determine an actual response to the insecurity injection by the computer system that originated the message. The actual response may be determined such as described above. A determination may be made whether the actual response matches a proper response from the set of proper responses that was determined . The determination whether the actual response matches a proper response may be made such as described above. If it is determined that the actual response matches a proper response the process may include transmitting message to its destination and obtaining the next message and the process may repeat as illustrated in until it has determined that an actual response to an insecurity injection does not match a set of proper responses that has been determined . When it is determined that an actual response to an insecurity injection does not match a proper response with a set of proper responses that has been determined the process may include performing one or more mitigating operations which mitigating operations may be one or more operations such as described above. The process may repeat as illustrated in as a system performing the process receives and processes messages.

As noted above the techniques of the present disclosure may be implemented in various ways in accordance with various embodiments. For example shows an illustrative environment in which a man in the middle computer system injects insecurity into communications for the purpose of testing computer systems. shows an alternate example of an environment in which various embodiments can be practiced. In the environment a plurality of computer systems communicate over a network. A computer system may also communicate with one or more computer systems . In some examples the computer system is a server computer system of a service provider such as a service provider that operates an electronic commerce website and the computer systems of customers of the service provider that utilize the computer system for the purpose of communicating with the service provider. In other examples a computer system is a server computer system of a service provider and the computer system is a computer system of a customer of the service provider. The computer system may communicate over a network such as the internet or another network or combination networks such as described above and below. In some embodiments the environment includes an administrative system and a log such as described above in connection with although other embodiments and administrative systems and logs may not be present.

In an embodiment the computer system includes one or more programming modules that when executed by the computer system cause the computer system to apply various techniques described herein. In the example of the computer system includes a service module injection module and the remediation module . In an embodiment the service module comprises executable code that when executed by the computer system causes the computer system to provide a service such as a web service. In some examples the service module is a web server application. The service module may comprise code for receiving and responding to hypertext transfer protocol HTTP requests. It should be noted however that the service module may be any type of module that enables the computer system to provide a service such as an internal service when the computer system is an application server that from the prospective of the customer of the service provider is behind a webserver. In other examples the service module is an application on a customer computing device such as a browser application or a mobile application that is configured to interact with a service provider computer system where the service provider computer system may be implemented by one of the computer systems .

The injection module may comprise executable instructions for injecting insecurity into communications between the computer system and one or more of the computer systems . The injection module may cause the computer system to inject insecurity such as described above. Similarly the remediation module may comprise executable instructions for determining when a computer system has operated insecurely and as a result perform one or more mitigating operations such as described above. The service module injection modules and remediation modules may be configured in various ways in accordance with various embodiments. For example in some embodiments the injection module and remediation module are configured to intercept communications from the service module . In other words when the computer system executing the service module generates a message for transmission the computer system executing the injection module may modify the generated message in order to inject insecurity. The injection module may be configured to be independent of the service module for example by being configured such that cross module function calls between the service module and injection module do not occur. In some examples the injection module is a plug in or a component of a plug in of a browser application as may be the remediation module .

The remediation module may similarly be configured such as the injection module described above. Operation of the injection module and or remediation module in some embodiments is in accordance with information provided by the administrative system such as described above in connection with . Similarly operation of the computer system in connection with execution of the injection module and the remediation module may cause messages and or information about messages to be stored in the log . As another example in which the service module injection module and remediation module may be implemented the service module may be an application operating in a guest domain of a hypervisor of a virtualization platform. The injection module and or remediation module may operate in another domain such as a privileged domain of the hypervisor. Other examples are also considered as being within the scope of the present disclosure.

A set of proper responses to the insecurity injection may be determined such as described above. The process may also include determining an actual response to the insecurity injection by the other computer system. The actual response may be determined in various ways in accordance with various embodiments such as described above. For example in some embodiments a communication from the other computer system may indicate an actual response to the insecurity injection which may be a lack of response such as when a TLS handshake is allowed to complete despite one or more errors introduced into a communication as part of the handshake that with the proper implementation would have caused the handshake to fail. The actual response may be determined in other ways. For example in some embodiments a proper response is to cease communications to the system that originated the message into which insecurity was injected. Accordingly an actual response may be determined by a lack of additional messages received from the other computer system.

A determination may be made whether the actual response matches a proper response that was determined . If it is determined that the actual response does not match a proper response of the set of proper responses that was determined the process may include performing one or more mitigating operations such as described above. If it is determined that the actual response does not match a proper response from the set of proper responses that was determined the process may include allowing communications to proceed without performing any mitigating operations. That process may include allowing communication to proceed without performing any mitigating operations that would have been performed had it been determined that the actual response does not match a proper response from the set of proper responses that was determined .

Numerous variations of the processes described herein are considered as being within the scope of the present disclosure. For example flowcharts shown in the figures show an example order of operations. Unless otherwise clear from context e.g. because one operation depends on the performance of another operation operations may be performed in a different order than illustrated. Similarly processes may be modified in accordance with various embodiments to utilize fewer operations or a greater number of operations.

Embodiments of the present disclosure utilize communications protocols that utilize symmetric and or asymmetric cryptographic primitives algorithms . Symmetric key algorithms may include various schemes for performing cryptographic operations on data including block ciphers stream ciphers and digital signature schemes. Example symmetric key algorithms include the advanced encryption standard AES the data encryption standard DES triple DES 3DES Serpent Twofish blowfish CASTS RC4 and the international data encryption algorithm IDEA . Symmetric key algorithms may also include those used to generate output of one way functions and include algorithms that utilize hash based message authentication codes HMACs message authentication codes MACs in general PBKDF2 and Bcrypt. Asymmetric key algorithms may also include various schemes for performing cryptographic operations on data. Example algorithms include those that utilize the Diffie Hellman key exchange protocol an example cryptographic key exchange process the digital signature standard DSS the digital signature algorithm the ElGamal algorithm various elliptic curve algorithms password authenticated key agreement techniques the pallier cryptosystem the RSA encryption algorithm PKCS 1 the Cramer Shoup cryptosystem the YAK authenticated key agreement protocol the NTRUEncrypt cryptosystem the McEliece cryptosystem and others. Elliptic curve algorithms include the elliptic curve Diffie Hellman ECDH key agreement scheme the Elliptic Curve Integrated Encryption Scheme ECIES the Elliptic Curve Digital Signature Algorithm ECDSA the ECMQV key agreement scheme and the ECQV implicit certificate scheme. Other algorithms and combinations of algorithms are also considered as being within the scope of the present disclosure and the above is not intended to be an exhaustive list.

Example cryptographic algorithms include block ciphers and the various modes that utilize initialization vectors such as the cipher block chaining CBC mode propagating cipher block chaining PCBC mode cipher feedback mode CFB output feedback OFB mode counter CTR mode and other modes such as authenticated encryption modes including eXtended Ciphertext Block Chaining XCBC mode Integrity Aware CBC IACBC mode Integrity Aware Parallelizable IAPM mode Offset Codebook OCB mode EAX and EAX Prime modes Carter Wegman CTR CWC mode Counter with CBC MAC CCM mode and Galois Counter GCM mode.

The techniques of the present disclosure may include the addition of and or modification of messages generated in accordance with one or more cryptographic primitives such as described above such that the additional modified messages include information replacing the output of one or more cryptographic primitives where the information is not valid output of one of the cryptographic primitives. Information may be invalid as output of a cryptographic primitive for example the information differs from the output that was generated by correct performance of the cryptographic primitive. The information may differ by value format and or size. Example information may replace a fingerprint checksum encrypted message certificate and other output of one or more cryptographic primitives such as described above.

Further while the techniques described above are for the purpose of illustration focused on network communications the techniques may be adapted to other contexts. For instance insecurity may be injected into other types of communications such as communications between processes of a computer system. Such techniques may be used for example to enable one application to test the operation of another application with respect to its response to insecurity injected into communications. Generally communication channels do not necessarily require a network. Further with respect to network communications a network may be at least partially a virtual network and in some examples a communication may traverse a network without leaving a hardware computing device e.g. when a communication is between two virtual computer systems implemented by the same hardware device . In addition while network communications protocols e.g. TLS are used for the purpose of illustration the techniques of the present disclosure may be used in connection with other protocols such as protocols for utilizing an application programming interface API and generally any set of specifications for communications.

Further the present disclosure for the purpose of illustration focuses on algorithms where an entity e.g. computer system or application is tested at least in part by determining whether the computer system failed to respond to an insecurity injection in a particular manner. However the techniques described above are applicable to other ways of testing such as by determining whether the entity being tested responds in a manner identified as insecure rather than failing to respond in a manner identified as secure . Further techniques for testing may include determining whether the entity being tested either failed to perform a predetermined secure response or performed a predetermined insecure response or in another way that indicates an addressable insecurity in the entity s operation. In other words the response of the entity being tested may depend on what operations the entity performed what operations the entity did not perform or both. Other variations are also considered as being within the scope of the present disclosure.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of Hypertext Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

