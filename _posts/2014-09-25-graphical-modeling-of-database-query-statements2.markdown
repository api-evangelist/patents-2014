---

title: Graphical modeling of database query statements
abstract: Example embodiments involve a system, computer-readable storage medium storing at least one program, and computer-implemented method for graphical modeling and editing of database query statements. The method may include accessing a database query statement, and generating an abstract syntax tree (AST) representing a syntactic structure of the database query statement. The method may further include generating a graphical model of the database query statement based on the AST, and rendering the graphical model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09594802&OS=09594802&RS=09594802
owner: SAP SE
number: 09594802
owner_city: Walldorf
owner_country: DE
publication_date: 20140925
---
Example embodiments of the present application generally relate to data processing and more particularly to graphical modeling of database query statements.

Database query languages are computer readable languages used in querying updating and managing relational databases. Database query languages have been evolving in terms of improved developer productivity and optimization of transparent database access. However possibly due to the richness of features and constructs there are several aspects of these languages that are currently underutilized by developers.

The underutilization of these features may be due to developers being unaware of the full set of features supported by the database query languages or reluctance to modify existing code that may not utilize the language in the most efficient manner due to fear of destabilizing the running code or the effort involved in testing the changes. Another possibility is that the complexity of existing code may prevent developers from arriving at an expected level of understanding needed to optimize query statements appropriately. Yet another possibility is that developers may choose simple yet inefficient queries instead of complex optimally efficient queries. In any event the net effect is that database intense applications that are coded with inefficient code continue to perform poorly despite the potential for optimization from a language and infrastructure perspective.

Reference will now be made in detail to specific example embodiments for carrying out the inventive subject matter. Examples of these specific embodiments are illustrated in the accompanying drawings and specific details are set forth in the following description in order to provide a thorough understanding of the subject matter. It will be understood that these examples are not intended to limit the scope of the claims to the illustrated embodiments. On the contrary they are intended to cover such alternatives modifications and equivalents as may be included within the scope of the disclosure.

Aspects of the present disclosure include a development platform for efficient and optimized development of software that involves database query statements. For purposes of the present disclosure a statement refers to an executable element within a given programming language that expresses an action to be carried out. For example a statement may be executed to affect data or schemas or to control transactions program flow connections sessions or diagnostics. A database query statement also referred to simply as a query refers to an executable element within a database query language that expresses an action to be carried out with respect to a database.

Example embodiments involve generating and presenting graphical models e.g. a graphical representation of database query statements e.g. OpenSQL queries . The graphical models may be based on database query statements included in source code e.g. a set of statements or instructions written in a high level language or may be created by a developer without the need for writing code. In this way a developer may easily visualize the functionality and nature of a query and analyze the query for possible improvements and extensions while allowing the developer to embed the modeled query into source code. Further a developer who may be unfamiliar with the latest features of a database query language will be provided with an easy to understand representation that assists the developer in utilizing these features.

Example embodiments may involve analyzing modeled queries to report errors and to ensure that queries adhere to the best practices in terms of performance. Elements of the modeled queries that are involved in reported errors may be highlighted or otherwise visually distinguished from other elements so as to provide developers with greater insight to assist them to identify potential causes of errors or inefficiencies. In addition the development platform may provide developers with guided options for fixing reported errors or suggestions for optimizing code so that the developers may quickly and efficiently take action on reported issues.

The networked development platform provides a number of software development services to users e.g. computer programmers software developers and software designers . As shown the networked development platform may include a client in communication with a development server . A communication framework executing on the client may provide a standardized communication layer e.g. based on the Hypertext Transfer Protocol HTTP to facilitate data exchanges between the client and the development server over a communication network .

In some instances the client and the development server may connect to the communication network via a Wireless Fidelity Wi Fi IEEE 802.11x type connection a Worldwide Interoperability for Microwave Access WiMAX connection or another type of wireless data connection. In such an embodiment the communication network may include one or more wireless access points coupled to a local area network LAN a WAN the Internet or other packet switched data network. In other instances the connection to the communication network may be a wired connection for example an Ethernet link and the communication network may be a LAN a WAN the Internet or other packet switched data network.

As illustrated in the client may execute an integrated development environment which is a software application that provides features for authoring modifying compiling deploying and developing software. Consistent with some embodiments the integrated development environment may correspond to the Eclipse development environment which may be used to develop software in various different programming languages. The integrated development environment may include a number of development services such as source code editors debuggers build automation tools compilers and interpreters.

Additionally the integrated development environment may include a graphical modeling application that provides graphical modeling and editing features for software code. In particular the graphical modeling application supports rendering of graphical representations of database query statements e.g. OpenSQL queries with an option to launch from source objects e.g. a set of source code containing the database query statements. Further the graphical modeling application may support editing existing database query statements for optimization or other changes. The graphical modeling application may also integrate optimization checks for database query statements and may offer suggestions and quick fixes where applicable. Moreover the graphical modeling application may be utilized to model database query statements from scratch e.g. in the context of a table or a set of tables with integration of a data preview. The database query statements edited and modeled using the graphical modeling application may be easily integrated or reintegrated into existing source code.

Consistent with some embodiments the graphical modeling application may be designed as a plug in that is integrated with and may be launched from the integrated development environment . In these embodiments the graphical modeling application may be designed to work with a particular modeling infrastructure e.g. the Graphiti graphical tooling infrastructure that employs a particular modeling framework e.g. Eclipse Modeling Framework EMF . Although the graphical modeling application has been discussed and is illustrated as being integrated as part of the integrated development environment it shall be appreciated that in alternative embodiments the graphical modeling application may form part of a service that is separate and distinct from the integrated development environment .

The client may communicate and exchange data over the communication network with the development server that may pertain to various software development functions and services. For example the development server may host a number of remote development services that include but are not limited to the development services provided by the integrated development environment . In some embodiments the remote development services may supplement or enhance the functionality of the development services by providing additional features that are not natively supported by the integrated development environment .

The remote development services may further include a Representational State Transfer REST resource to expose the client to functionality provided by the remote development platform . Particularly the remote development platform may support generation of an abstract syntax tree AST which is a data structure representing the syntactic structure of software code for database query statements. The ASTs generated by the remote development platform may conform to a specific modeling framework such as EMF. The remote development platform may further provide syntax checking and validation services for database query statements.

While the networked development platform shown in employs client server architecture the present inventive subject matter is of course not limited to such an architecture and could equally well find application in an event driven distributed or peer to peer architecture system for example. Further the various functional components of the integrated development environment may be implemented as standalone systems or software programs which do not necessarily have networking capabilities. Moreover it shall be appreciated that although the various functional components of the networked development platform are discussed in the singular sense multiple instances of one or more of the various functional components may be employed.

As shown the graphical modeling application includes an editor module comprising a user interface module and a model to source converter a modeling engine comprising a parser a generation module and a rendering module and a validation module comprising a syntax check module and a suggestion module all configured to communicate with each other e.g. via a bus shared memory a switch or application programming interfaces APIs . The remote development platform is shown as including the parser a repository information system and the validation module all configured to communicate with each other e.g. via a bus shared memory a switch or APIs . The various functional components of the graphical modeling application and the remote development platform may reside on a single computer e.g. a server or may be distributed across several computers in various arrangements. The various components of the graphical modeling application and the remote development platform may furthermore access one or more databases and each of the various components of the graphical modeling application and the remote development platform may be in communication with one another. Further while the components of are discussed in the singular sense it will be appreciated that in other embodiments multiple instances of the components may be employed.

The editor module supports editing of database query statements and graphical models representing database query statements. The user interface module is responsible for facilitating user edits to the graphical models and to this end the user interface module may provide a number of interfaces e.g. cause presentation of interfaces on the client for receiving user input indicative of a change to a graphical model. The interfaces provided by the user interface module may for example include any combination of buttons icons tooltips menus or tool bars having selectable elements that when selected e.g. via mouse click may invoke functionality that allows the user to adjust modify or otherwise interact with a graphical model. The user edits may for example include adding an element to a graphical model removing an element from a graphical model or editing attributes of an element of a graphical model e.g. editing a column list . The interfaces provided by the user interface module may enable further interactions with graphical model elements such as collapsing elements into a condensed view resizing elements moving elements and auto configuration of model elements. The user interface module also supports defining where conditions join conditions and the like using intuitive graphical controls.

The model to source converter is responsible for converting graphical models to a corresponding database query statement and translating edits to a graphical model to a corresponding database query statement. To this end the model to source converter may analyze graphical models in an Extensible Markup Language XML format to generate a corresponding database query statement. In instances in which the model to source converter translates a user edit to an existing graphical model launched from a source object to an appropriate database query statement the model to source converter may further inject the database query statement into the appropriate position in the source code.

The modeling engine is responsible for generating and rendering graphical models of database query statements. The graphical models are graphical representations of the database query statement that may aid users e.g. software developers in understanding the complexities and nuances of database query statements. The parser which in some embodiments forms part of the modeling engine may access a database query statement e.g. included as part of a source object and parse it to determine the syntactic structure of the statement. Upon determining the syntactic structure of the database query statement the parser may generate the corresponding AST.

In some embodiments the parser may modify the AST with additional attributes to generate a domain model to be used in generating a graphical model. In these embodiments the parser may retrieve information from the repository information system to enrich the AST to generate the domain model. The domain model may be an XML based model that describes elements of the database query statement and their attributes as well as their roles and relationships with other elements. The domain model may be generated such that it conforms to a specific modeling framework such as EMF.

The generation module may use the domain model generated by the parser e.g. based on the AST of the database query statement to generate the graphical model of the database query statement. Consistent with some embodiments the graphical model may include a set of Java classes and a set of adapter classes that enable viewing and command based editing of the graphical model supported by the editor module . The generation module may employ object type metadata to enhance the graphical model with additional content such as database tables and a list of columns that are included in the tables.

The rendering module is responsible for the presentation of graphical models. To this end the rendering module may provide instructions to the client that cause the client to present a graphical model on a display coupled to the client . The rendering module may utilize the object type metadata to display applicable tables their columns and column names.

The validation module is responsible for verifying the validity of database query statements. In particular the validation module is responsible for validating the syntax of database query statements. To this end the validation module includes a syntax check module configured to perform syntax validations of database query statements and in doing so identify errors and inefficiencies in the database query statements. In instances in which the syntax check module successfully validates the syntax of a database query statement the syntax check module may cause the presentation of a notification or alert that indicates that the syntax of the database query statement is valid. The syntax check module may for example utilize a standard ABAP syntax check framework for supporting validation of OpenSQL queries consistent with some embodiments. In this manner the syntax check module may support both past and future versions of the OpenSQL language.

In addition to supporting syntax validation of database query statements the validation module also includes the suggestion module which is configured to provide suggestions based on the result of the validation check performed by the syntax check module . In instances in which the syntax check module identifies an error in the syntax of a database query statement the suggestion module may provide e.g. cause display of instructions to fix the error. In instances in which the syntax check module module identifies an inefficiency e.g. use of old syntax in a database query statement the suggestion module may provide e.g. cause display of one or more suggestions that instruct a user how to optimize or otherwise improve the database query statement. In both instances e.g. an error or an inefficiency is identified the suggestion module may work in conjunction with the rendering module to highlight or otherwise visually distinguish elements of a corresponding graphical model that are associated with the error or inefficiency. Further the suggestion module may also provide quick fix options whereby errors or inefficiencies may be automatically corrected by the validation module in response to receiving user approval e.g. selection of a button indicating approval of the suggested fix 

Although the parser and validation module are illustrated in to be included as part of both the graphical modeling application executing on the client and the remote development platform executing on the development server it shall be appreciated that in other embodiments either the parser or validation module may be included in only one of the graphical modeling application and the remote development platform . Further in some embodiments the operations respectively performed by the parser and validation module may be performed in whole or in part on either the client or the development server . Moreover in some embodiments certain operations may be performed by the development server to support operations of the graphical modeling application executing on the client . For example in some embodiments an EMF conforming model is defined on the client e.g. by the modeling engine to which the AST generated by the parser of the remote development platform is mapped to generated the domain model. In this way the AST generation would support database query language grammar versions across different releases.

At operation the rendering module uses the AST generated by the parser to generate a graphical model e.g. a graphical representation of the database query statement. In some embodiments the generation of the graphical model may include modifying the AST to include a number of additional attributes that aid in generating the graphical model. The modification of the AST may be such that the AST may be used by the rendering module as a domain model. The domain model may be an object model that describes entities and their attributes as well as their roles and relationships with other entities. In some embodiments the domain model which is created by enriching the AST with additional attributes may conform to a particular model framework that may be employed by the rendering module . For example the rendering module may employ the Eclipse Modeling Framework EMF and the AST may be modified such that it conforms to the EMF.

At operation the rendering module causes the graphical model to be presented on the client . As an example is an interface diagram illustrating a graphical model of a database query statement according to example embodiments. In particular the graphical model is a graphical representation of an instruction to retrieve data from a particular source e.g. a select statement . Specifically the graphical model is a graphical representation of the following database query statement which in this example is an OpenSQL query 

As another example is an interface diagram illustrating a graphical model of another database query statement according to example embodiments. In particular the graphical model is a graphical representation of the following database query statement which in this example is an OpenSQL query 

As yet another example is an interface diagram illustrating a graphical model of yet another database query statement according to example embodiments. In particular the graphical model is a graphical representation of the following database query statement which in this example is an OpenSQL query 

Returning back to at operation which may occur in parallel with or subsequent to operations the validation module performs a validation e.g. syntax validation of the database query statement. At operation the validation module may identify an error or inefficiency in the database query statement. In response to identifying the error or inefficiency the validation module may provide one or more suggestions at operation to a user of the client e.g. cause presentation of the one or more suggestions . In instances in which the validation module identifies an error the one or more suggestions provided by the validation module may include instructions or recommendations for fixing the error. In instances in which the validation module identifies a syntactic inefficiency the one or more suggestions provided by the validation module may include instructions or recommendations for optimizing or otherwise improving the database query statement.

At operation the editor module receives a user edit to the graphical model presented on the client . The user edit may correspond to an element being added edited or deleted and may be accomplished by manipulation of the graphical model using a mouse cursor or other input device e.g. a touch screen . At operation the editor module may work in conjunction with the rendering module to update the graphical model of the database query statement in accordance with the received user edit. At operation the editor module updates the source object to reflect changes to the database query statement corresponding to the user edit to the graphical model representing the database query statement. Consistent with some embodiments the updating of the source object may include translating the graphical model to an XML model converting the XML model to an updated database query statement e.g. an OpenSQL query and injecting the updated database query statement into the source object in place of the original database query statement.

At operation the parser may access a database query statement. The database query statement may be included in source code and may be accessed in response to a user request to use the graphical modeling application to view and edit a graphical model of the database query statement. In some embodiments the user may provide such a request from within a source code editor that is part of the development services offered by the integrated development environment .

At operation the parser parses the database query statement e.g. an OpenSQL statement . At operation the parser uses the parsed statement to generate the AST for the database query statement which is a data structure representing the syntactic structure of the database query statement. In an example of operations the parser may access the OpenSQL statement included in Table 1 and upon parsing and analyzing the statement generate the XML based AST included in Table 2. Consistent with some embodiments the AST may evolve depending on the grammar or syntax used in the OpenSQL statement.

At operation the generation module generates a domain model for the database query statement using the AST. In some embodiments the generation of the domain model may include translating or mapping the AST to a preexisting model framework used for generating the graphical model. For example the generation of the domain model may include enriching the AST with additional attributes so that it conforms to a particular modeling framework e.g. EMF .

At operation the generation module generates a graphical model e.g. a graphical representation of the database query statement using the domain model. At operation the rendering module renders the graphical model. The rendering of the graphical model may include causing the presentation of the graphical model on a display of the client or on the display of an additional device communicatively coupled to the networked development platform . Example graphical models of example database query statements are illustrated in .

At operation the rendering module causes presentation of a graphical model representing a database query statement. The graphical model may be presented on a display of the client . The database query statement may be included in a source object e.g. source code and the graphical model may be presented in response to a user request for such. In some embodiments the user may request the presentation of the graphical model from a source editor of the development services provided by the integrated development environment .

At operation the user interface module of the editor module may receive a user edit to the graphical model e.g. user input indicative of an edit to the graphical model via mouse cursor or other such input device of the client . The user edit may include adding deleting or modifying an element of the graphical model. For example a user may edit a column list included in an element of the graphical model.

At operation the editor module updates the graphical model according to the received user edit. At operation the model to source converter analyzes the updated graphical model and converts it to a corresponding database query statement e.g. OpenSQL statement . At operation the user interface module causes presentation of the database query statement generated in response to the user edit. In this manner the user may be provided with a preview of the effect that the edit may have on the underlying source code. At operation the model to source converter updates the source code by replacing the database query statement corresponding to the graphical model presented at operation with the updated database query statement that is based on the received user edit.

At operation the validation module accesses a database query statement. The database query statement may be accessed from a source object provided by a user or from a preexisting graphical model. At operation the syntax check module performs a syntax validation to determine whether the syntax of the database query statement is correct. The validity of the syntax of course depends on the specific programming language being utilized.

During the validation process the syntax check module may identify an inefficiency or error in the syntax of the database query statement which occurs at operation . For example the syntax check module may identify use of certain syntax that while still valid has been superseded by an updated syntax or coding feature that if utilized would optimize the performance of the database query statement. As another example the syntax check module may identify a set of elements used in the database query statement that may be replaced with a single element to increase efficiency.

At operation the suggestion module provides an optimization suggestion based on the identified inefficiency or error. The providing of optimization suggestions may include causing presentation of textual instructions e.g. in a separate window for improving an inefficiency or fixing an error. In instances in which a graphical model has been generated for the database query statement the providing of the optimization suggestions may further include visually distinguishing e.g. highlighting model elements associated with the inefficiency from the remaining model elements so as to provide an additional aid to the user in improving the functionality of the underlying code. In some embodiments the suggestion module may also provide quick fix options to the user whereby the suggestion module suggests a change to improve the code and automatically implements the change in response to receiving user approval e.g. via GUI element such as a button or dialog box .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware modules . In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors with these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. APIs .

Example embodiments may be implemented in digital electronic circuitry or in computer hardware firmware or software or in combinations of them. Example embodiments may be implemented using a computer program product for example a computer program tangibly embodied in an information carrier for example in a machine readable medium for execution by or to control the operation of data processing apparatus for example a programmable processor a computer or multiple computers.

A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a standalone program or as a module subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

In example embodiments operations may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method operations can also be performed by and apparatus of example embodiments may be implemented as special purpose logic circuitry e.g. an FPGA or an ASIC .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In embodiments deploying a programmable computing system it will be appreciated that both hardware and software architectures merit consideration. Specifically it will be appreciated that the choice of whether to implement certain functionality in permanently configured hardware e.g. an ASIC in temporarily configured hardware e.g. a combination of software and a programmable processor or in a combination of permanently and temporarily configured hardware may be a design choice. Below are set out hardware e.g. machine and software architectures that may be deployed in various example embodiments.

The machine may for example be a personal computer PC a PDA a cellular telephone a smart phone e.g. iPhone a tablet computer a web appliance a handheld computer a desktop computer a laptop or netbook a set top box STB such as provided by cable or satellite content providers a wearable computing device such as glasses or a wristwatch a multimedia device embedded in an automobile a Global Positioning System GPS device a data enabled book reader a video game system console a network router switch or bridge or any machine capable of executing instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes one or more input output I O devices a location component a drive unit a signal generation device e.g. a speaker and a network interface device . The I O devices may for example include a keyboard a mouse a keypad a multi touch surface e.g. a touchscreen or track pad a microphone a camera and the like.

The location component may be used for determining a location of the computer system . In some embodiments the location component may correspond to a GPS transceiver that may make use of the network interface device to communicate GPS signals with a GPS satellite. The location component may also be configured to determine a location of the computer system by using an internet protocol IP address lookup or by triangulating a position based on nearby mobile communications towers. The location component may be further configured to store a user defined location in main memory or static memory . In some embodiments a mobile location enabled application may work in conjunction with the location component and the network interface device to transmit the location of the computer system to an application server or third party server for the purpose of identifying the location of a user operating the computer system .

In some embodiments the network interface device may correspond to a transceiver and antenna. The transceiver may be configured to both transmit and receive cellular network signals wireless data signals or other types of signals via the antenna depending on the nature of the computer system .

The drive unit includes a machine readable medium on which is stored one or more sets of data structures and instructions e.g. software embodying or used by any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory the static memory and or the processor during execution thereof by the computer system with the main memory the static memory and the processor also constituting machine readable media.

Consistent with some embodiments the instructions may relate to the operations of an operating system OS . Depending on the particular type of the computer system the OS may for example be the iOS operating system the Android operating system a BlackBerry operating system the Microsoft Windows Phone operating system Symbian OS or webOS . Further the instructions may relate to operations performed by applications commonly known as apps consistent with some embodiments. One example of such an application is a mobile browser application that displays content such as a web page or a user interface using a browser.

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium may include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more data structures or instructions . The term machine readable medium shall also be taken to include any tangible medium that is capable of storing encoding or carrying instructions e.g. instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure or that is capable of storing encoding or carrying data structures used by or associated with such instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media. Specific examples of machine readable media include non volatile memory including by way of example semiconductor memory devices e.g. erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks.

Furthermore the tangible machine readable medium is non transitory in that it does not embody a propagating signal. However labeling the tangible machine readable medium non transitory should not be construed to mean that the medium is incapable of movement the medium should be considered as being transportable from one real world location to another. Additionally since the machine readable medium is tangible the medium may be considered to be a machine readable device.

The instructions may further be transmitted or received over a network using a transmission medium. The instructions may be transmitted using the network interface device and any one of a number of well known transfer protocols e.g. HTTP . Examples of communication networks include a LAN a WAN the Internet mobile telephone networks plain old telephone service POTS networks and wireless data networks e.g. WiFi and WiMax networks . The term transmission medium shall be taken to include any intangible medium that is capable of storing encoding or carrying the instructions for execution by the machine and includes digital or analog communications signals or other intangible media to facilitate communication of such software.

Although the embodiments of the present invention have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader scope of the inventive subject matter. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. The accompanying drawings that form a part hereof show by way of illustration and not of limitation specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be used and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description therefore is not to be taken in a limiting sense and the scope of various embodiments is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

Such embodiments of the inventive subject matter may be referred to herein individually and or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed. Thus although specific embodiments have been illustrated and described herein it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the above description.

All publications patents and patent documents referred to in this document are incorporated by reference herein in their entirety as though individually incorporated by reference. In the event of inconsistent usages between this document and those documents so incorporated by reference the usage in the incorporated references should be considered supplementary to that of this document for irreconcilable inconsistencies the usage in this document controls.

In this document the terms a or an are used as is common in patent documents to include one or more than one independent of any other instances or usages of at least one or one or more. In this document the term or is used to refer to a nonexclusive or such that A or B includes A but not B B but not A and A and B unless otherwise indicated. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein. Also in the following claims the terms including and comprising are open ended that is a system device article or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim.

