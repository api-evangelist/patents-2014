---

title: Method of integrating heterogeneous test automation frameworks
abstract: Techniques for testing heterogeneous software components are described herein. In response to a test procedure, a main test framework (MTF) identifies one or more test cases associated the sequence of testing operations. The MTF delegates at least one testing operation to a first subordinated test framework (STF) by invoking an MTF-to-STF (MTF/STF) adaptor, where the first STF corresponds to a test operation of a specific functionality. The MTF/STF adaptor launches the first STF by passing a first set of parameters received from the MTF to a first format compatible with the first STF, where the first STF is configured to perform a first sequence of testing operations for a first functionality. In response to a first test result from the first STF, the MTF/STF adaptor converts the first test result in second format compatible with the MTF and returns the converted first test result back to the MTF.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424169&OS=09424169&RS=09424169
owner: EMC Corporation
number: 09424169
owner_city: Hopkinton
owner_country: US
publication_date: 20140522
---
Embodiments of the present invention relates generally to developing test cases used to test an application or software. More particularly embodiments of the invention relate to integrating heterogeneous test frameworks.

In software engineering testing is an integral part of the development cycle of an application or software. For this testing an application or software involves generating test cases where each test case tests a certain functionality of the application or software. Often this involves invoking other aspects of the application or software. Code or scripts are written to develop each test case based on a specific test case logic scenario. Further scripts can be written to automate the testing process. However writing individual testing logic for each test case often becomes a laborious and time consuming process. Furthermore maintenance of automated test cases or test suites designed with traditional methods are also time consuming as any changes in functionality of Application Under Test AUT requires update modification of multiple test case scripts.

Framework represents a general test automation framework including three main components framework engine framework library representing a collection of framework function library and a test repository . The framework engine represents the main script that configures environment for execution runs the test suites which represents a sequence of test cases and is responsible for the output results or reports of test execution. The framework library includes framework function library which represents a collection of scripts that cover general functions or procedures required by the test cases scenarios e.g. data transformation search processing common command execution with parameters etc. . With traditional test automation methods these functional scripts are utilized within test case s scripts to partially eliminate redundancy of the code.

The test repository represents a collection of automated test cases usually grouped by test suites to assist in maintenance. A test suite represents a container for test cases that are used for testing specific functionality or a specific aspect of the AUT. Usually grouping test cases in test suite helps in maintenance and planning for test coverage. However such maintenance and planning can be limited in large scale application development if a functionality or aspect of the AUT changes during development.

Traditionally test automation of heterogeneous software products components was developed separately utilizing appropriate tools frameworks . Such approach is limited to testing homogeneous software products or functionalities within single test case and does not support complex test scenarios. For example test automation frameworks designed to work with distributed test environment over the network through command line interface CLI does not support testing software products through graphical user interface GUI and test automation frameworks designed for GUI testing has very limited support for CLI and remote over the network execution.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiments an integrated heterogeneous automated testing platform is designed and implemented for test automation of software functionalities. It can be used for test automation of complex test scenarios that involve multiple test steps such as those utilize a command line interface CLI with one software component and a graphical user interface GUI with another software component within the same test scenario. A main test framework MTF is responsible for execution CLI based test operations on a distributed test environment and when it is needed calls a specialized framework for GUI based test operations. The integration is designed such a way that the test automation framework for GUI based test operations is considered as a subordinated test framework STF and returns a test result to the MTF for considerations on test continuation and result reporting.

The integration of heterogeneous test automation frameworks provides an efficient foundation for test automation of complex scenarios that involve heterogeneous software components or applications under test AUT . In one embodiment an adaptor an interface module that provides communication and data transformation between an MTF and one or more STFs are utilized. The adaptor covers all necessary processes and transformations to supply an STF with needed configurations variables and commands to execute specified test operations and to return results of execution to the MTF. Such a platform generalizes processes and functionality required for integration heterogeneous frameworks and can be used for test automation of diverse software products. Specific adaptor implementation may be varied and depends on nature of test automated frameworks that are integrated. As a result a test automation designer is able to automate complex test scenarios involved heterogeneous AUTs and execute automated scripts developed in heterogeneous frameworks within single test case. Test automation of specific AUTs or functionalities required heterogeneous AUTs is simplified as integration of heterogeneous frameworks happens on the fly e.g. behind the scene without the user intervention and with a single entry and exit points for complex test scenarios.

Some of the libraries may require specific testing operations that are specific to some specific types of functionalities. Such specific testing operations may be delegated to one or more of STFs . For example during execution of one of test cases a testing function of a corresponding one of libraries calls another function that is provided by an STF for the purpose of illustration a function of STF . In response to a request for invoking STF MTF starts or launches MTF STF adaptor and sends the request with a set of parameters to MTF STF via MTF APIs of MTF STF adaptor . In response MTF STF adaptor identifies STF based on the request. MTF STF adaptor launches and starts STF . MTF STF adaptor converts the set of parameters received from MTF via APIs to a format that is compatible with STF . MTF STF adaptor then invokes STF by calling STF APIs and passing the converted parameters to STF .

Once STF completes the testing operations STF returns a test result back to MTF STF adaptor via STF APIs . MTF STF adaptor then reformats the test result received from STF to a format compatible with MTF and returns the converted test result back to MTF . Similarly if MTF invokes subordinated testing services from STF MTF STF adaptor is configured to perform similar operations as described above where MTF STF adaptor communicates with STFs via STF APIs respectively.

In one embodiment STFs are heterogeneous STFs that are responsible for perform different subordinated testing operations. For example STF may be configured to test a command line interface CLI operations used by a software program while STF may be configured to test graphical user interface GUI operations used by a software program. APIs for accessing STFs respectively may be different. In some situations STFs may be developed and provided by different vendors or software utility providers e.g. third party providers . For example any of STFs may be a Quick Test Professional QTP application developed by Hewlett Packard or an open source SIKULI application. By utilizing MTF STF adaptor heterogeneous STFs can be integrated with MTF . With the architecture as shown in an additional STF can be added by simply adding the corresponding STF APIs in MTF STF adaptor without having to change MTF . Thus MTF STF adaptor provides a single entry and exit point to MTF to access multiple different e.g. heterogeneous STFs . Note that the configuration of MTF STF adaptor is illustrated and shown for illustration purpose only. MTF STF adaptor can be implemented in multiple adaptors each corresponding to one of the STFs . When a particular STF is invoked the corresponding adaptor is utilized.

Similarly STF includes framework engine one or more framework libraries and test repository . Similar to framework engine framework engine is to configure an operating environment for execution execute a test case or a test suite of multiple test cases and output a test result of test execution for STF . Framework library includes a collection of test routines e.g. scripts and utilities that cover general procedures or functions required by testing scenarios e.g. data transformation search processing common command execution with parameters etc. for testing the specific functionalities e.g. GUI or CLI represented by STF . These functional routines and utilities are utilized by multiple test cases to eliminate redundancy of the code for repeating or similar functions. Test repository includes a collection of automated test cases for the STF .

According to one embodiment when MTF receives a test procedure such as test procedure from a user such as a test engineer or quality assurance QA engineer MTF parses the test procedure and passes testing parameters through interface in this example a command line interface. The input parameters may include test case identifier s identifying some of the test cases previously configured as part of test cases and stored in test repository . In response to input parameters framework engine identifies and retrieves the related test case s from test repository and executes the retrieved test case s . Some of the test cases specify some functions or routines to be invoked which will be identified and executed by framework engine .

In one embodiment if there is a test case in this example test case that requires invoking one or more functions or routines of a STF framework engine executes an invoking routine in this example routine to invoke the corresponding STF. The invoking routine then starts and communicates with MTF STF adaptor including passing the necessary information and parameters to MTF STF adaptor . In response as shown in management engine of MTF STF adaptor identifies an STF in this example STF based on the information received from invoking routine . STF start logic then launches and starts STF and STF configuration logic configures STF and passes the information and parameters to STF that has been converted by converter to a format compatible with STF . STF monitor is to monitor and wait for the test result provided by STF .

Referring back to in response to information and parameters received from MTF framework engine identifies the associated test scripts from test script repository and executes them one at a time e.g. test script using functions provided by function library . The test result is reported by framework engine as part of report back to MTF STF adaptor . Referring now to the test result is received by STF exit and report logic of MTF STF adaptor . The test result is then converted by converter to a format compatible with MTF and the converted result is then delivered to MTF . Thereafter STF exit report logic may terminate and unload STF . Referring back to in response to the test result received from MTF STF adaptor framework engine returns the test result as part of report back to the client. Note that the test routines or procedures may be programmed using a variety of script languages such as for example TCL script language or VBScript .

Referring to in one embodiment system includes processor and peripheral interface also referred to herein as a chipset to couple various components to processor including memory and devices via a bus or an interconnect. Processor may represent a single processor or multiple processors with a single processor core or multiple processor cores included therein. Processor may represent one or more general purpose processors such as a microprocessor a central processing unit CPU or the like. More particularly processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processors such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP a network processor a graphics processor a network processor a communications processor a cryptographic processor a co processor an embedded processor or any other type of logic capable of processing instructions. Processor is configured to execute instructions for performing the operations and steps discussed herein.

Peripheral interface may include memory control hub MCH and input output control hub ICH . Peripheral interface may include a memory controller not shown that communicates with a memory . Peripheral interface may also include a graphics interface that communicates with graphics subsystem which may include a display controller and or a display device. Peripheral interface may communicate with graphics device via an accelerated graphics port AGP a peripheral component interconnect PCI express bus or other types of interconnects.

An MCH is sometimes referred to as a Northbridge and an ICH is sometimes referred to as a Southbridge. As used herein the terms MCH ICH Northbridge and Southbridge are intended to be interpreted broadly to cover various chips who functions include passing interrupt signals toward a processor. In some embodiments the MCH may be integrated with processor . In such a configuration peripheral interface operates as an interface chip performing some functions of the MCH and ICH. Furthermore a graphics accelerator may be integrated within the MCH or processor .

Memory may include one or more volatile storage or memory devices such as random access memory RAM dynamic RAM DRAM synchronous DRAM SDRAM static RAM SRAM or other types of storage devices. Memory may store information including sequences of instructions that are executed by processor or any other device. For example executable code and or data of a variety of operating systems device drivers firmware e.g. input output basic system or BIOS and or applications can be loaded in memory and executed by processor . An operating system can be any kind of operating systems such as for example Windows operating system from Microsoft Mac OS iOS from Apple Android from Google Linux Unix or other real time or embedded operating systems such as VxWorks.

Peripheral interface may provide an interface to 10 devices such as devices including wireless transceiver s input device s audio device s and other IO devices . Wireless transceiver may be a WiFi transceiver an infrared transceiver a Bluetooth transceiver a WiMax transceiver a wireless cellular telephony transceiver a satellite transceiver e.g. a global positioning system GPS transceiver or a combination thereof. Input device s may include a mouse a touch pad a touch sensitive screen which may be integrated with display device a pointer device such as a stylus and or a keyboard e.g. physical keyboard or a virtual keyboard displayed as part of a touch sensitive screen . For example input device may include a touch screen controller coupled to a touch screen. The touch screen and touch screen controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch screen.

Audio IO may include a speaker and or a microphone to facilitate voice enabled functions such as voice recognition voice replication digital recording and or telephony functions. Other optional devices may include a storage device e.g. a hard drive a flash memory device universal serial bus USB port s parallel port s serial port s a printer a network interface a bus bridge e.g. a PCI PCI bridge sensor s e.g. a motion sensor a light sensor a proximity sensor etc. or a combination thereof. Optional devices may further include an imaging processing subsystem e.g. a camera which may include an optical sensor such as a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor utilized to facilitate camera functions such as recording photographs and video clips.

Note that while illustrates various components of a data processing system it is not intended to represent any particular architecture or manner of interconnecting the components as such details are not germane to embodiments of the present invention. It will also be appreciated that network computers handheld computers mobile phones and other data processing systems which have fewer components or perhaps more components may also be used with embodiments of the invention.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

