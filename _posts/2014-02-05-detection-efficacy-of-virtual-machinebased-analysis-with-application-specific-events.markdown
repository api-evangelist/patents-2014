---

title: Detection efficacy of virtual machine-based analysis with application specific events
abstract: A computerized system and method is described for classifying objects as malicious by processing the objects in a virtual environment and monitoring behaviors during processing by one or more monitors. The monitors may monitor and record selected sets of process operations and capture associated process parameters, which describe the context in which the process operations were performed. By recording the context of process operations, the system and method described herein improves the intelligence of classifications and consequently reduces the likelihood of incorrectly identifying objects as malware or vice versa.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262635&OS=09262635&RS=09262635
owner: FireEye, Inc.
number: 09262635
owner_city: Milpitas
owner_country: US
publication_date: 20140205
---
Embodiments of the disclosure relate to the field of network and cyber security. More specifically one embodiment of the disclosure relates to a system and method of detecting malicious activity.

Over the last decade malicious software malware has become a pervasive problem for Internet users. In some situations malware is a program or file that is embedded within downloadable content and designed to adversely influence or attack normal operations of a computer. Examples of different types of malware may include bots computer viruses worms Trojan horses spyware adware or any other programming that operates within an electronic device e.g. computer tablet smartphone server router wearable technology or other types of electronics with data processing capability without permission by the user or an administrator.

For instance content may be embedded within objects associated with a web page hosted by a malicious web site. By downloading this content malware causing another web page to be requested from a malicious web site may be unknowingly installed on the computer. Similarly malware may also be installed on a computer upon receipt or opening of an electronic mail email message. For example an email message may contain an attachment such as a Portable Document Format PDF document with embedded executable malware. Also malware may exist in files infected through any of a variety of attack vectors which are uploaded from the infected computer onto a networked storage device such as a file share.

Over the past few years various types of security appliances have been deployed at different segments of a network. These security appliances use virtual machines to uncover the presence of malware embedded within ingress content propagating over these different segments. In particular virtual machines VMs are equipped to monitor operations performed by ingress content during processing. The security appliances analyze the observed operations in an attempt to identify unexpected or anomalous operations that may indicate exploits. However this operation monitoring is executed conventionally without knowledge of the context in which these operations are performed. This lack of context may occasionally lead to incorrect classification of ingress content as either benign or malicious that is as false negatives or false positives respectively in relation to malware detection. False negatives may result in malware going undetected and therefore failures to issue appropriate security alerts to network administrators or security professionals. False positives may result in security alerts issuing too often raising the possibility that false positives will overshadow and dilute responses to true positives and render associated remediation misplaced. In extreme situations false negatives and false positives may impact system performance.

In one embodiment a malware content detection MCD system is provided that intercepts or otherwise captures objects for analysis. Subsequent to optional static analysis dynamic analysis may be initiated for a suspect object. During this dynamic analysis a virtual machine VM instance may process e.g. open load detonate and or run the suspect object such that process operations associated with the suspect object are performed. The VM instance is provided with monitors to capture activities and other behaviors of the suspect object during processing and associate the behaviors with specific processes running within the VM instance. The monitors may inspect predefined sets of process operations and associated process parameters to infer and identify application specific behaviors.

A determined application specific behavior combined with a process identifier may be provided to the analysis engine as an event for classification of a suspect object. For example the suspect object may be classified as malware non malware or as needing further analysis. A confidence score may be generated in arriving at this classification by the analysis engine. The analysis can compare the captured operations and associated parameters with those expected for the particular process e.g. computer program or application to identify application specific behaviors that in some cases may indicate malicious activities exploits . To that end the analysis may utilize experiential knowledge and machine learned information regarding operations and associated parameters that may ordinarily be expected for each type of application executed in the virtual machine instance.

In some embodiments one or more stages of analysis e.g. three are described below may be used to arrive at a confidence score for a suspect object. A first analysis stage may compare captured operations and associated parameters with those expected for the relevant process such as by performing a look up of the captured operation in a table or other data structure of expected operations called a whitelist a data structure of anomalous operations called a blacklist or in both a whitelist and blacklist. The results of the first analysis stage may update an event data structure with all captured or developed event information including information regarding the flagged operation .

A second analysis stage receives the event data structure associated with each captured event as established by the first analysis stage with its determination of application specific behavior e.g. a flagged operation . The second analysis stage may use all of the captured events including the flagged operation in a state machine based analysis. In this context a state machine for a process is a representation of the expected sequencing of events that the process may be expected to yield when monitored. The second analysis stage may identify captured operations that are anomalous not represented in the state machine operations that should have been monitored and captured but appear to have been omitted and operations that occurred out of order. A state machine associated with a process may generate additional events based on a partial match of state machine states with the observed events. The second analysis stage may update the event data structure to reflect its results. A suitable state machine representation for a process can be developed through analysis of the process and its expected operations and parameters prior to virtual processing of suspect objects. In some embodiments the second analysis stage may store information in the event data structure associated with objects or may simply discard the information related to those benign objects. Accordingly the second analysis stage may act to filter the suspect objects to those that have a certain likelihood of being classified as malware. The likelihood level may be factory set user set or dynamically determined and different likelihood levels may be used based on history of malware detection network traffic conditions type of process or other considerations.

A third analysis stage may use pre defined rules to determine whether the suspect object should be classified as malware. To that end the rules used in the third analysis stage may be developed through experiential knowledge and machine learning techniques regarding behaviors of known malware and benign objects processed by applications. The third analysis stage may generate a confidence score e.g. a weight for each of the suspect objects related to the probability that it is malicious e.g. the probability that observed behaviors constitute or are associated with an exploit . The confidence score may be based on the recorded operations and process parameters and corresponding application specific behaviors and events that these operations and process parameters yield. The third analysis stage may use the confidence score for each suspect object or combine confidence scores for plural objects e.g. of a flow of related packets to yield an overall confidence score. The overall confidence score may also reflect e.g. be generated based in part on other scores from other analyses e.g. static or heuristic analysis of the object . The third analysis stage may use that overall confidence score to classify the suspect object or objects as malware.

Where the overall confidence score is not sufficiently high to classify the suspect object as malware e.g. above a threshold the object may be classified as benign or as requiring further forensic analysis. A need for further forensic analysis of the suspect object may be indicated when the analysis has reported an event including an additional event e.g. from the second analysis that suggests further analysis may yield a classification other than benign. Where the suspect object is classified as malware the MCD system may issue an alert or otherwise report its findings including its confidence score that led to that classification. Security or network professionals may use the information in the report in deciding on remedial actions to be taken in light of the malware.

Utilizing process parameters that describe the context in which a detected process operation was performed provides greater insight into the characteristics of a suspect object. In particular the detection of a process operation in a first context may be highly indicative of malware while the detection of the same process operation in a second context may provide little or no support for the classification of the object as malware. This improved insight results in a more accurate classification of the suspect object and a reduced number of malware false positives FPs and false negatives FNs . Malware incorrectly classified in conventional detection systems as malicious FPs may not be marked malicious in embodiments of the invention based on application specific behavior. The same goes for malware incorrectly classified in conventional detection systems as non malicious FNs .

In the following description certain terminology is used to describe aspects of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but are not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit wireless receiver transmitter and or transceiver circuitry semiconductor memory or combinatorial logic.

Logic or engine may be in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage media may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

The term object generally refers to a collection of data whether in transit e.g. over a network or at rest e.g. stored often having a logical structure or organization that enables it to be classified for purposes of analysis. During analysis for example the object may exhibit a set of expected characteristics and or during processing a set of expected behaviors. The object may also exhibit a set of unexpected characteristics and or a set of unexpected behaviors that may evidence an exploit or malware and potentially allow the object to be classified as an exploit or malware.

Examples of objects may include one or more flows or a self contained element within a flow itself. A flow generally refers to related packets that are received transmitted or exchanged within a communication session. For convenience a packet is broadly referred to as a series of bits or bytes having a prescribed format which may include for example an HTTP packet a frame or a cell.

As an illustrative example an object may include a set of flows such as 1 a sequence of transmissions in accordance with a particular communication protocol e.g. User Datagram Protocol UDP Transmission Control Protocol TCP or Hypertext Transfer Protocol HTTP etc. or 2 inter process communications e.g. Remote Procedure Call RPC or analogous processes etc. . Similarly as another illustrative example the object may be a self contained element where different types of such objects may include an executable file a non executable file such as a document or a dynamically linked library a Portable Document Format PDF file a JavaScript file a Zip file a Flash file a document for example a Microsoft Office document an electronic mail email a downloaded web page an instant messaging element in accordance with Session Initiation Protocol SIP or another messaging protocol or the like.

The term content generally refers to information transmitted as one or more messages where each message s may be in the form of a packet a frame an Asynchronous Transfer Mode ATM cell another object or any other series of bits having a prescribed format. The content may be received as a data flow.

An exploit may be construed broadly as information e.g. executable code data command s etc. that attempts to take advantage of a software vulnerability or user error. Typically a vulnerability is a coding error or artifact of software e.g. computer program that allows an attacker to alter legitimate control flow during processing of the software computer program by an electronic device and thus causes the electronic device to experience undesirable or unexpected behaviors. The undesired or unexpected behaviors may include a communication based anomaly or an execution based anomaly which for example could 1 alter the functionality of an electronic device executing application software in a malicious manner 2 alter the functionality of the electronic device executing that application software without any malicious intent and or 3 provide unwanted functionality which may be generally acceptable in another context. To illustrate a computer program may be considered as a state machine where all valid states and transitions between states are managed and defined by the program in which case an exploit may be viewed as seeking to alter one or more of the states or transitions from those defined by the program.

Malware may be construed broadly as computer code that executes an exploit or otherwise harms or co opts operation of an electronic device or misappropriates modifies or deletes data. Conventionally malware is often said to be designed with malicious intent. An object may constitute or contain malware.

The term parameter is often defined as a variable or colloquially speaking a placeholder in a computer program that represents any of a number of different values of data to be provided as input to a function or routine of an application and may also refer to the value or values themselves. In the following description unless the context demands otherwise parameter will usually be used to denote the value or values. Accordingly passing a parameter means to provide an input value to the function. For example a heuristics engine may pass parameters messages to a virtual machine manager to identify software profile information associated with a needed virtual machine instance. In another example an operations parameters capture OPC module within a monitor may pass events and or application specific events to a filtering and reporting module for additional analysis.

The parameters may include various types of data that may be used to detect malicious behavior. For example in one case an application specific behavior that may be monitored is the loading running of macros in a Microsoft Office application. Upon detection of a macro in a Microsoft Office application an OPC module of a monitor may record the specific module that requested the loading running of the macro e.g. an address or identifier of the specific module . This data may define parameter data that is recorded and analyzed along with other data e.g. macro activity to determine the presence of malware.

In another example an application specific behavior that may be monitored is the loading running of a module that processes dynamic content of a PDF document in an Adobe Reader application. Upon detection of dynamic content in an Adobe Reader application an OPC module of a monitor may record the values of an associated stack trace. This data may define parameter data that is recorded and analyzed along with other data to determine the presence of malware.

The term transmission medium is a communication path between two or more systems e.g. any electronic device with data processing functionality such as for example a security appliance server mainframe computer netbook tablet smart phone router switch bridge or router . The communication path may include wired and or wireless segments. Examples of wired and or wireless segments include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism.

In general a virtual machine VM is a simulation of an electronic device abstract or real that is usually different from the electronic device conducting the simulation. A VM may be used to provide a sandbox or safe runtime environment separate from a production environment to enable detection of APTs or malware in a safe environment. The VM may be based on specifications of a hypothetical computer or emulate the computer architecture and or functions of a real world computer.

The term computerized generally represents that any corresponding operations are conducted by hardware in combination with software and or firmware.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of a communication system deploying a plurality of malware content detection MCD systems N 1 e.g. N 3 communicatively coupled to a management system via a network is shown. In general the management system is adapted to manage the MCD systems . For instance the management system may be adapted to cause malware signatures or patterns generated as a result of malware detection by any of the MCD systems to be shared with one or more of the other MCD systems including for example where such sharing is conducted on a subscription basis.

Herein according to this embodiment of the invention the first MCD system is an electronic device that is adapted to i intercept data traffic that is routed over a communication network between at least one server device and at least one client device and ii monitor in real time objects within the data traffic. More specifically the first MCD system may be configured to inspect data objects received via the communication network and identify suspicious objects. The incoming objects are identified as suspicious when it is assessed with a certain level of likelihood that at least one characteristic identified during inspection of the objects indicates or is associated with the presence of malware.

Thereafter the suspicious objects are further analyzed within a virtual machine VM execution environment to detect whether the suspicious objects include malware. The VM execution environment may comprise multiple VM instances supporting the same or different software profiles corresponding to multiple intercepted objects from various sources within the communication system . The particulars of this malware analysis performed by the VM execution environment are described in further detail below.

The communication network may include a public computer network such as the Internet in which case an optional firewall represented by dashed lines may be interposed between the communication network and the client device . Alternatively the communication network may be a private computer network such as a wireless telecommunications network a wide area network or local area network or a combination of networks.

The first MCD system is shown as being coupled with the communication network behind the firewall via a network interface . The network interface operates as a data capturing device referred to as a tap or network tap that is configured to receive data traffic propagating to from the client device and provide at least some of the objects or a copy thereof associated with the data traffic to the first MCD system .

In general the network interface receives and routes objects that are received from and provided to client device normally without an appreciable decline in performance by the server device the client device or the communication network . The network interface may intercept any portion of the data traffic for example any number of data packets or other objects. Of course it is contemplated that the first MCD system may be positioned behind the firewall and in line with client device .

In some embodiments the network interface may capture metadata from data traffic intended for the client device where the metadata is used to determine whether the data traffic includes any suspicious objects as well as the software profile for such suspicious objects. The metadata may be associated with the server device and or the client device . In other embodiments a heuristics engine within the first MCD system may determine the software profile by analyzing the objects and or metadata associated with the data traffic.

It is contemplated that for any embodiments where the first MCD system is implemented as a dedicated appliance or a dedicated computer system the network interface may include an assembly integrated into the appliance or computer system that includes network ports a network interface card and related logic not shown for connecting to the communication network to non disruptively tap data traffic propagating through firewall and provide the data traffic to the heuristics engine . In other embodiments the network interface can be integrated into an intermediary device in the communication path e.g. the firewall a router a switch or another network device or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP may be used to intercept traffic from virtual networks.

Referring still to the first MCD system may include a heuristics engine a heuristics database a scheduler a storage device an analysis engine including a process operation analyzer a score generator and a classifier a virtual machine manager VMM one or more virtual machine instances with corresponding monitors and operations parameters capture modules and a filtering and reporting module . In some embodiments the network interface may be contained within the first MCD system . Also the heuristic engine the scheduler the analysis engine the VMM the filtering and reporting module and or the virtual machine instances may be software modules executed by a processor that receives the captured objects performs malware analysis and is adapted to access one or more non transitory storage mediums operating as the heuristics database and or the storage device . In some embodiments the heuristics engine may be one or more software modules executed by a processor and the scheduler the analysis engine the VMM the filtering and reporting module and or the virtual machines instances may be one or more software modules executed by a different processor where the two processors are possibly located at geographically remote locations and communicatively coupled for example via a network.

Referring now to an exemplary block diagram of logic associated with the MCD system is shown. The MCD system comprises one or more processors that are coupled to communication interface logic via a first transmission medium . Communication interface logic enables communications with other MCD systems the management system and or other components on the network or the network . According to one embodiment of the disclosure the communication interface logic may be implemented as a physical interface including one or more ports for wired connectors. Additionally or in the alternative the communication interface logic may be implemented with one or more radio units for supporting wireless communications with other electronic devices.

The processor s is are further coupled to persistent storage via transmission medium . According to one embodiment of the disclosure the persistent storage may include the heuristics engine the analysis engine the VMM the filtering and reporting module the one or more VM instances graphical user interface GUI logic and configuration logic . Of course when implemented as hardware engines and module VMM logic and and VM instance s may be implemented separately from the persistent storage .

In general the heuristics engine serves as a filter to permit subsequent malware analysis only on a portion of incoming objects e.g. those that are suspicious which effectively conserves system resources and provides faster response time in determining the presence of malware within analyzed suspicious objects that are more likely to carry constitute or be otherwise associated with malware. As an ancillary benefit in some embodiments by performing a dynamic or run time analysis in a virtual environment on only the suspicious incoming objects such analysis may prove more efficient and effective and in some cases monitoring may continue for a longer duration. This may be important for detecting time delayed malware related behaviors.

As illustrated in the heuristics engine receives one or more incoming objects from the network interface and applies heuristics to determine if any of the objects are suspicious. In other words one or more checks may be conducted in efforts to detect a particular characteristic that may suggest the object under analysis is potentially malicious where the object may be classified as suspicious . The heuristics applied by the heuristics engine may be based on data and or rules stored in the heuristics database . Also the heuristics engine may examine the image of the captured objects without processing executing and or opening the captured objects.

As an example the heuristics engine may examine the metadata or attributes of the captured objects and or the code image e.g. a binary image of an executable to determine whether a certain portion of the captured objects matches or has a high correlation with a predetermined pattern of attributes that is associated with a malicious attack. According to one embodiment of the disclosure the heuristics engine flags objects from one or more data flows as suspicious after applying this heuristics analysis.

Thereafter according to one embodiment of the invention the heuristics engine may be adapted to transmit at least a portion of the metadata or attributes of the suspicious objects to the VMM . Such metadata or attributes are used to identify a software profile to be used by a VM instance needed for subsequent malware analysis. In another embodiment of the disclosure the VMM may be adapted to receive one or more messages e.g. data packets from the heuristics engine and analyze the message s to identify the software profile information associated with the needed VM instance .

For instance as an illustrative example a suspicious object under test may include an email message that was generated under control of Windows 7 Operating System using Windows Outlook 2007 version 12. The email message further includes a Portable Document Format PDF attachment in accordance with Adobe Acrobat version 9.0. Upon determining that the email message includes suspicious content the heuristics engine provides software profile information to identify a particular type configuration of a VM instance needed to conduct dynamic analysis of the suspicious content. According to this illustrative example the software profile information would include 1 Windows 7 Operating System OS 2 Windows Outlook 2007 version 12 and 3 PDF support through Adobe Acrobat version 9.0.

In another embodiment of the disclosure the heuristics engine may determine the features of the client device that are affected by the data traffic by receiving and analyzing the objects from the network interface . The heuristics engine may then transmit the features of the client device to the scheduler the VMM and or the analysis engine .

Upon determination of the proper software profile the scheduler the VMM and or the analysis engine may generate configure and run a VM instance based on the determined software profile. The VM instance may include one or more processes an operating system component one or more monitors including an operations parameters capture module and other components that are required to process the suspect object and may in some embodiments simulate the processing environment of the client device and allow dynamic analysis of a suspect object.

In one embodiment the VM instance mimics the processing environment on the client device such that a dynamic analysis of an object under examination may be performed. By generating a VM instance that simulates the environment on the client device the VM instance allows the suspect object to be processed in a similar fashion as would be processed on the client device without exposing the client device to potential malicious behaviors of a suspect object.

The processes A and B may be any instance or component of a computer program. The processes A and B may be formed by code and instructions that define process operations. Each of the process operations may be performed at various intervals or points in time based on operating parameters user inputs or other factors stimuli. For example the process A may be an Adobe reader process that defines multiple process operations. The process operations may include a function call a process or thread lifecycle operation a module operation etc.

The monitors A and B are portions of code that may be injected within the processes A and B respectively for monitoring operations of interest associated with each process A and B. Although shown and described in relation to the processes A and B monitoring may be similarly performed by operating system component within the VM instance . In some embodiments monitors may be placed outside the VM instance . For example monitors may be placed in the VMM for monitoring process operations and associated process parameters. In one embodiment the VMM may be a combination of hardware software and firmware that creates runs and controls the VM instance .

In any case the monitors A and B or other monitoring functions wherever located include a novel operations parameters capture OPC module . The OPC module enables the monitors A and B to inspect or examine operations of the processes A and B respectively during run time and capture both the operations and associated parameters for use in malware detection. In some embodiments the monitors A and B may be designed or positioned pre set to examine specific and preferably predefined operations.

Although described as being inserted during instantiation in some embodiments the monitors may be injected inserted within processes prior to instantiation of the VM instance . In this fashion processes with monitors may be retrieved from storage during instantiation of the VM instance without the need for monitor insertion.

For example the MCD system may in some embodiments inject a first monitor A into an Adobe reader process A running within a VM instance or may in other embodiments instantiate the VM instance with a first monitor A injected into or otherwise located i.e. positioned to monitor behaviors of the Adobe reader process A. The first monitor A may examine and capture a first set of process operations and process parameters associated for example with an Adobe reader process A.

The MCD system may in some embodiments also inject a second monitor B into a Firefox web browser process B running within the VM instance or may in other embodiments instantiate the VM instance with a second monitor B injected into or being otherwise positioned to monitor behaviors of a Firefox web browser process B. The second monitor B may examine and capture a second set of process operations and associated process parameters associated with the Firefox web browser process B. In this example embodiment the first and second sets of process operations and associated process parameters may have been preselected for each associated process e.g. Adobe reader and Firefox web browser to indicate the occurrence of application specific behaviors.

For example the processes A and B may each include the process operations A and B. In this example the monitor A is preset to monitor process operation A based on association with the process A. Similarly the monitor B is preset to monitor process operation B within the process B. The decision on which process operations to monitor may be preconfigured based on known malware. The monitors A and B may also monitor and record process parameters associated with process operations.

Referring now to an exemplary table that associates processes and process operations with process parameters is shown. Each of these process parameters may be examined and recorded upon detection of an associated process operation in a process . For example upon the detection of performance of process operation A in process A the monitor A may record the status of one or more predefined process parameters that are associated with the process operation A and or the process A. The process parameters describe the context in which the process operation A was performed. By recording the context of a performed process operation the MCD system may better analyze suspect objects and reduce the occurrence of false positives of malware. For example while in certain contexts the performance of the process operation A may indicate a malware object in other contexts the performance of the process operation A may not indicate a malware object.

In one embodiment the monitors A and B may compare recorded process parameters for a process operation with a set of predefined values which may be derived through experimentation and or machine learning. Upon detecting a match between the recorded process parameters and the set of predefined values the corresponding monitor may flag the process operation and recorded process parameters as an application specific behavior that may be useful in determining whether the suspect object is malware. In other embodiments the monitors may send all recorded process parameters to logic that performs the foregoing comparison with predefined values. The application specific behavior may be reported to the filtering and reporting module as an event. The event describes the process within which the application specific behavior was detected and the application specific behavior itself.

Referring back to in one embodiment the filtering and reporting module may receive one or more events from separate monitors which have been injected within separate processes components of the operating system component or other portions of the VM instance . The filtering and reporting module may store these events in the storage device as shown in . The analysis engine may thereafter access these stored events. In one embodiment the analysis engine may include a score generator that uses the stored events to determine a score for the associated suspect object which relates to the probability that the suspect object is a malware object. The analysis engine may also include a classifier which determines a classification for an associated suspect object e.g. malware or non malware based on the score. The classifier may classify the suspect object as malware if the associated score exceeds a first threshold. When the associated score is below the first threshold the score may be compared against a second lower threshold and the events application specific behaviors may be analyzed to determine if further analysis is needed for the suspect object. For this the analysis engine may include a process operation analyzer that analyzes the logged operations and parameters associated with the logged behaviors events to assess whether the suspect object may be classified as malware based on the process and context that yielded those log entries.

Accordingly for example where the suspect object has an associated score of 7 out of 10 and the first threshold is set at 6 out of 10 the suspect object may be classified as malware. Where the suspect object has an associated score of 5 out of 10 and the first threshold is set at 6 out of 10 the suspect object s associated score may be compared against a second threshold and the suspect objects events application specific behaviors may be analyzed to determine whether the suspect object may be classified as requiring further analysis by the process operation analyzer .

As will be described in further detail below these scores and classifications may be based on traversal of state machines by a state machine based analyzer within the filtering and reporting module . In one embodiment the generated score may be associated with the suspect object stored in the storage device and reported to a user a network administrator and or a security professional by the reporting module .

As described above the communication system monitors and records process operations and process parameters of an associated process. By selectively recording process operations and process parameters of an associated process within a VM instance the communication system may better understand the context of process operations and generate more intelligent classifications for associated objects.

In some embodiments the MCD system may include one or more stages of analysis e.g. three are described below in arriving at a confidence score for a suspect object as described above. The analysis stages may be performed in separate analysis engines one per stage or may be executed by a different number of analysis engines in various embodiments by omitting combining or dividing steps or stages. The analysis stages may be performed sequentially or concurrently in an overlapping fashion . The analysis stages may be performed by a single processor or by separate processors which may be located within the same device or appliance or located remotely from one another and may communicate over a communication link or network.

Turning now to a method for detecting malware using a multistage analysis will now be described. Each operation of the method may be performed by one or more components of the MCD system described above. For example the operations of the method may be performed by the heuristics engine the VM instance the VMM the analysis engine and the filtering and reporting module . In other embodiments the operations of the method may be performed in full or in part by other components of the communication system shown in .

The method may commence at operation with receipt of a suspect object to be analyzed. The suspect object may be intercepted by the network interface and passed or copied and passed to the MCD system for analysis. In another embodiment an anti malware system running on the client device may periodically or aperiodically i.e. from time to time and without direct provocation by the user intercept and transmit an object to the MCD system for processing and analysis. This independent interception and analysis of objects allows the client device to maintain an automatic examination of potential malware content received without direct interaction by a user.

In another embodiment a user of the client device may submit objects through a user interface. The interface may be generated by the GUI logic and served to the client device by the configuration logic of the MCD system . In this fashion the MCD system may operate as a web server to deliver data and a user interface to the client device .

In one embodiment the object received intercepted at operation may be any digital data structure. For example the object may be a file e.g. PDF document a component of a file a component of a web page an image a series of captured network web traffic that is capable of being replayed etc. As described above a user of the client device may manually determine that an object is suspected to be malware or the client device may automatically classify the object as potential suspected malware and transmit the object to the MCD system .

Referring back to although described in relation to receiving a single object in other embodiments the method may be used in relation to multiple objects received simultaneously or in rapid succession. For example the method may be used to analyze multiple objects or a flow received from the client device or other devices on the network . The objects may be processed by the method separately to determine whether each received object is malware based on detected operations and associated process parameters as described in greater detail below.

Following interception and or receipt of an object operation may perform a static analysis on the received object using the heuristics engine and or the heuristics database . As described above this static analysis filters for content that is suspected to contain malware code. In general this static analysis filtering serves to permit subsequent dynamic malware analysis only on a portion of incoming content which effectively conserves system resources and provides faster response time in determining the presence of malware within analyzed content. When the object being analyzed is not suspected at operation to be malware operation may permit the intercepted received object to reach the client device or where the heuristic analysis is performed on a copy to discard the copy and otherwise terminate the method for this object and permit the client device to proceed as normal. Conversely when operation determines that the object may be malicious based on the static analysis performed at operation one or more stages of a dynamic analysis may be performed on the suspect object as described below at operation .

The dynamic analysis performed at operation may include the use of the VM instance to process the suspect object. In one embodiment one or more monitors are injected into or reside in components of the VM instance e.g. processes etc. or are otherwise positioned within the VM instance so as to be able to monitor processing of the suspect object. More specifically the monitors monitor a predefined set of process operations and associated process parameters of their associated process. Utilizing process parameters that describe the context in which a detected process operation was performed allows the dynamic analysis greater insight into the characteristics of the suspect object. This improved insight results in a more accurate classification of the suspect object and a reduced number of malware false positives.

As shown in the dynamic analysis may commence at sub operation A with the determination of a software profile for the client device . This software profile includes information that is used for virtualization of the client device which was intended to receive the suspect object or simply a processing environment required to process the suspect object. The software profile may include a guest operating system OS type and or version application type s and version s virtual device s etc. The software profile may be determined at sub operation A by examining the suspect object other content intended for the client device and or content transmitted from the client device .

Following sub operation A sub operation B instantiates the VM instance based on the determined software profile. The VM instance may include an operating system component one or more processes and other components that simulate the processing environment. By generating and configuring the VM instance to simulate the environment on the client device the method allows the suspect object to be processed without exposing the client device to potential malicious behaviors.

Upon instantiating running the VM instance sub operation C injects one or more monitors into one or more components of the VM instance . For example as shown in the monitors A and B may be injected within the processes A and B respectively. Although shown and described in relation to the processes A and B the monitoring may be similarly performed by components of an operating system component within the VM instance . In one embodiment the monitors are portions of code that monitor operations of interest associated with components of the VM instance and record associated process parameters. For example in the example shown in the monitors A and B have been inserted within the processes A and B respectively. The monitors may be associated with a set of predefined process operations and associated process parameters that are to be monitored by each respective monitor within the associated processes. The predefined process operations and associated process parameters may be preselected based on known malware and exploits.

Although described as being inserted during after instantiation in some embodiments the monitors A and B may be injected inserted within processes A and or B or components of the operating system component prior to instantiation of the VM instance . For example the monitors A and B may reside within the computer programs such as computer applications or operating systems or virtual machine managers for use in instantiating a VM instance . In this fashion processes or the computer programs with the monitors A and B already inserted may be retrieved from storage during instantiation of the VM instance without the need for the monitors A and B to be inserted at sub operation C.

Continuing with the dynamic analysis at sub operation D the suspect object is detonated opened run or otherwise processed within the VM instance . Sub operation D may include the processing of the suspect object by one or more components of the VM instance e.g. one or more of the processes A and B or an operating system component . For example when the suspect object is a PDF file an Adobe reader process may be used to open the suspect object. Opening the PDF file using the Adobe reader process allows the suspect object to perform process operations and alter process parameters associated with the suspect object such that further analysis may be performed regarding potential malicious code content contained within the suspect object.

At sub operation E each of the injected monitors attempts to detect an associated process operation. As noted above each monitor monitors a different set of process operations based on their associated process within the VM instance . In some embodiments the process operations monitored by each monitor may overlap. In one embodiment process operations are detected through the use of hooks which intercept function calls or messages generated by corresponding process operations during their performance.

Upon detection of a process operation by a monitor at sub operation E sub operation F may record the values of one or more process parameters associated with the detected process operation. As described above shows a table that associates process operations with process parameters. Each of these process parameters may be examined and recorded upon detection of an associated process operation at sub operation F. For example upon the detection of performance of process operation A the monitor A may record the status of one or more predefined process parameters that are associated with the process operation A and or the process A. The process parameters describe the context with which the process operation was performed. For example the process parameters may describe modules operating within the VM instance and or data loaded into memory when the process operation was detected at sub operation E. By recording the context of a performed process operation the method may better analyze suspect objects and reduce the occurrence of false positives of malware. For example while in certain contexts the performance of the process operation A may indicate a malware object in other contexts the performance of the process operation A may not indicate a malware object.

Following recordation of process parameters for a detected process operation one or more stages of analysis may be performed for the suspect object. For example a first stage of analysis may be performed at sub operation G. During this first stage of analysis operations and associated parameters may be compared with those expected for the relevant process such as by performing a look up of the captured operation in a table or other data structure of expected operations called a whitelist for the process. Other embodiments may perform a look up in a data structure of anomalous operations called a blacklist or in both a whitelist and blacklist. Suspicious operations are those not matching whitelist entries or those matching blacklist entries depending on the embodiment. The first analysis stage may be performed by logic located within or associated with a monitor e.g. the OPC module . Since the monitor may avail itself of such logic it may be referred to herein as an inference monitor. The results of the first analysis stage may update a corresponding event data structure with all captured or developed event information including information regarding the flagged operation and an associated application specific event which may be arranged and accessed for example by a process identifier and or an event identifier. The event data structure may be located in a local storage device e.g. the storage device or in a central or remote storage device.

Following sub operation G a second stage of the analysis may be performed at sub operation H. The second stage of analysis may receive the event data structure associated with each captured event as established by the first analysis stage with its determination of application specific behavior e.g. a flagged operation . The second analysis stage may use all of the captured events including the flagged operation in a state machine based analysis. In this context a state machine for a process is a representation of the expected sequencing of events that the process may be expected to yield when monitored. For example shows a state machine that is associated with a process within the VM instance . The state machine may be composed of a set of states A F respectively associated with events as shown. Using the example provided above the state machine may be associated with an Adobe reader process .

The second analysis stage may identify captured operations that are anomalous not represented in the state machine operations that should have been monitored and captured but appear to have been omitted and operations that occurred out of order. These identified operations and anomalous occurrences may include the flagged operation as well as one or more additional captured operations that appear anomalous based on the state machine analysis even if they were not flagged in the first analysis stage . The state machine associated with the process may generate additional events based on a partial match of state machine states with the observed events. The second analysis stage may update the event data structure to reflect its results. A suitable state machine representation for a process can be developed through analysis of the process and its expected operations and parameters prior to virtual processing of suspect objects. In some embodiments the second analysis stage may store information in the event data structure associated with objects or may simply discard the information related to those benign objects. Accordingly the second analysis stage may act to filter the suspect objects to those that have a certain likelihood of being classified as malware. The likelihood level may be factory set user set or dynamically determined and different likelihood levels may be used based on history of malware detection network traffic conditions type of process or other considerations. The second analysis stage may be performed by the state machine based analyzer that resides within the filtering and reporting module . The filtering and reporting module may be located within the virtual machine instance within an associated virtual machine manager VMM of the MCD system or within a controller external to the virtual machine instance and the VMM depending on the embodiment. Other forms of analysis may be used in substitution for or in addition to the state machine analysis to filter the captured operations.

Following sub operation H a third stage of the analysis may be performed at sub operation I. This third analysis stage may obtain an event data structure directly from the second stage or by accessing a memory or other storage device that stores the event data structure e.g. the storage device . The third analysis stage may use pre defined rules to determine whether the suspect object should be classified as malware. To that end the rules used in the third analysis stage may be developed through experiential knowledge and machine learning techniques regarding behaviors of known malware and benign objects processed by applications. The third analysis stage may generate a confidence score e.g. a weight for each of the suspect objects related to the probability that the suspect object is malicious e.g. the probability that observed behaviors constitute or are associated with an exploit . The third analysis stage may use the confidence score for each suspect object or combine confidence scores for plural objects e.g. of a flow of related packets to yield an overall confidence score. The overall confidence score may also reflect e.g. be generated based in part on other scores from other analyses e.g. static or heuristic analysis of the object . The third analysis stage may use that overall confidence score to classify the suspect object or objects as malware. In one embodiment this confidence score is generated by the score generator .

Where the overall confidence score is not sufficiently high to classify the suspect object as malware e.g. above a threshold the object may be classified as benign or as requiring further forensic analysis. This classification and score may be reported to a user a network administrator and or a security professional at operation J. When the object is classified as benign the intercepted received object may be permitted to reach the client device or where the analysis is performed on a copy to discard the copy and otherwise terminate the method for this object and permit the client device to proceed as normal. A need for further forensic analysis of the suspect object may be indicated when the analysis has reported an event including an additional event e.g. from the second analysis that suggests further analysis may yield a classification other than benign.

Where the suspect object is classified as malware the MCD system may issue an alert or otherwise report its findings including its confidence score that led to that classification at operation J. Security or network professionals may use the information in the report in deciding on remedial actions to be taken in light of the malware.

Utilizing process parameters that describe the context in which a detected process operation was performed provides greater insight into the characteristics of a suspect object. In particular the detection of a process operation in a first context may be highly indicative of malware while the detection of the same process operation in a second context may provide little or no support for the classification of the object as malware. This improved insight results in a more accurate classification of the suspect object and a reduced number of malware false positives FPs and false negatives FNs . Malware incorrectly classified in conventional detection systems as malicious FPs may not be marked malicious in embodiments of the invention based on application specific behavior. The same goes for malware incorrectly classified in conventional detection systems as non malicious FNs .

The embodiments of the invention can be further understood through the following examples that illustrate the benefits of using application specific behavior to provide context for classifying suspect objects.

Monitors capture operations performed by an application being processed i.e. a process and assess these operations in light of those expected for the application i.e. application specific behavior . Though suspicious in some contexts e.g. if dynamic content were loaded the operations are not suspicious for the process running. The captured information regarding the process operations and parameters as obtained by the monitors is passed to the filtering and reporting module . In some embodiments the filtering and reporting module decides against conducting a state machine analysis and the event is dropped from further analysis. In other embodiments the event is subjected to state machine analysis where either i the benign characterization of the object may be confirmed and the event then dropped from further analysis filtered out and not reported out by the filtering and reporting module to the analysis engine or ii the event information for the object is stored in a storage device e.g. the storage device with a likely low level of suspicion e.g. low weight or score . The analysis engine and specifically its classification logic classifier or score generator may generate an overall score for a suspect object based on events from the filtering and reporting module and compare this score to a threshold and may determine that the threshold was not met so the object should be classified as non malware. In other words practice of the invention in this embodiment may result in the MCD system assigning a weight or score in light of the application being run and its analysis of the observed operations and parameters that may have the effect of classifying the object as non malicious where without the contribution of the context information the object may have been falsely designated as malicious false positive .

Monitors observe a potential heap spray operation but conditions make the characterization of the type of operation less than certain. This information is passed to the filtering and reporting module . State machine analysis sees dynamic content of a PDF document was loaded in an Adobe Reader application but a decision is made that the observed operations are not enough to classify the object as malware. In the light of the loading of dynamic content which is a known vehicle for exploits the filtering and reporting module generates an additional event related to that operation after matching observed events against states of the state machine and stores the event in the storage device . If the analysis engine assigns an overall confidence score to the object that is below the threshold to classify the object as malicious and one or more additional events are received from the filtering and reporting module the analysis engine may be in a position to classify the object as requiring further analysis perhaps with longer analysis in virtual machine instance . Consequently the practice of the invention in this embodiment may result in the system assigning a weight or score in light of the application being run and its analysis of the observed operations and parameters that may have the effect of raising the probability that the object is malware and possibly classifying the object as requiring further analysis where without the contribution of the context information e.g. dynamic content of a PDF document loaded in an Adobe Reader application the object may have been falsely designated as non malicious potential false negative depending on the outcome of the further analysis .

Monitors observe operations including crashing of an application during processing within the virtual machine instance and determine that crashing of the particular application is unusual or unexpected absent malware. Some applications are known to crash frequently for non malicious reasons e.g. coding issues so crashing in and of itself may actually be deemed expected . The monitors pass this information to the filtering and reporting module . The state machine analysis determines that certain operations performed prior to the application crashing support the conclusion that the object is at least suspicious. The filtering and reporting module stores this information along with an event score in the storage device . The analysis engine classifies the object as malware based on a total score for the object being over a malware threshold. Accordingly the practice of the invention in this embodiment may result in the system assigning a weight or score in light of the application being run and its analysis of the observed operations and parameters that may have the effect of raising the probability that the object is malware and possibly classifying the object as malware where without the contribution of the context information the object may have been falsely designated as non malicious potential false negative . For example process parameters may indicate that macros were loaded in a Microsoft Office application. In this case tracking macro activity allows deeper inspection of an associated object. Accordingly the object may be classified reclassified as malicious and a false negative may be avoided.

As described above the method and system monitors and records process operations and process parameters using one or more monitors within a VM instance . By selectively recording process operations and process parameters within a VM instance the method and system may better understand the context of process operations and generate more intelligent classifications for associated objects.

