---

title: Efficient composition and rendering of graphical elements
abstract: A map server generates a set of base map tiles having vector descriptors, each indicating a geometry of a respective map element, in accordance with a non-raster format for rendering a first map image. The map server provides the base map tiles to the client device. Upon receiving an indication that a specific map image for the selected geographic region is to be rendered at the client device, the map server generates a set of difference map tiles that indicate changes to be made to the set of base map tiles and sends the difference map tiles to the client device for use, along with the set of base map tiles, in rendering the requested specific map image. The client device renders the new map view defined by the difference map tiles without needing to again pre-process all of the features or elements defined in the base map tiles.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424673&OS=09424673&RS=09424673
owner: GOOGLE INC.
number: 09424673
owner_city: Mountain View
owner_country: US
publication_date: 20140514
---
The present disclosure relates to map rendering systems such as electronic map display systems and more specifically to a map rendering system in which map images are efficiently rendered using map data provided in an iterative manner as a set of base map tiles and one or more difference map tiles.

The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors to the extent it is described in this background section as well as aspects of the description that may not otherwise qualify as prior art at the time of filing are neither expressly nor impliedly admitted as prior art against the present disclosure.

Today maps of geographic regions may be displayed by software applications running on a wide variety of devices including desktop computer devices mobile phones car navigation systems hand held global positioning system GPS units tablet or laptop computers etc. Depending on the application and or user preferences maps may display topographical data street data urban transit information traffic data etc. Further some applications display maps in an interactive mode so that a user may operate various controls radio buttons scrollbars etc. to change the zoom level or pan the map to a new location for example. A user in some cases also may select or unselect the display of certain information. For example the user may operate the appropriate control to turn on the display of bicycle trails transmit maps etc.

To render a map image a display device typically receives raster image data from a dedicated server. For example a map server may operate on the Internet and provide images in a Portable Network Graphics PNG format to various client devices for the specified geographic regions. While raster images are relatively easy to render at a client device raster image data typically requires a large amount of storage space for a comprehensive map. Also it is difficult to efficiently manipulate raster images at a client device. For example to zoom in on a selected region either new raster image data is retrieved from the server or the available raster image data is enlarged with a noticeable loss in quality. To alleviate this issue some mapping systems provide mapping data from the map server to the client device in the form of vector graphics data. Generally speaking vector graphics data describes or specifies various features to be included in a map and a graphics engine on the client device processes the vector graphics data to produce a map image using various common techniques.

In any event most web based mapping services send map data from a server to a client as small image tiles typically in the form of raster image data tiles or vector image data tiles. Each image tile covers a predetermined geographic region and specifies the exact image to be displayed either using raster or vector graphics image data. Moreover many client server mapping applications provide a user with many different views of the same basic map data. These views may for example provide driving focused maps bicycling maps terrain maps transit maps business focused maps etc. When the user wants to switch to another map view e.g. a transit map view of a particular geographic location the client application requests a whole new set of map tiles for the same location but specifying the styling and data differences to be included in the new map view e.g. including transit lines with reduced emphasis on roads etc. . Typically however all or most of the available map views share most of the same data. For example the land formations the lakes the roads etc. stay the same between all views but each view may include a few additional features may have a few features removed and or may have a few features that are displayed in different manners or styles. In fact in most cases the majority of the map data in terms of bytes of storage in these different views is common. Thus if a mapping application allows the user to switch between different map views for the same geographic region most of the data sent from server to client is actually redundant with data the client device already has received. This fact can cause a number of problems including high loading latency high rendering latency on the client device high serialization latency on the server and forced reduction of data detail to avoid these problems.

Moreover when new map data is sent to a client device the client device must process the new map data to render the map associated with the new map data. When the new map data is much the same or overlaps with a previously rendered set of map data the graphics processing unit must typically spend as much processing power on the new map data as the original map data even though much of the final map is the rendered in the same manner. In particular in graphics processing unit GPU based graphics systems data must be buffered from the CPU RAM to GPU VRAM before the data can be rendered as a map. Often before providing data to the GPU the software must also perform some degree of preprocessing on the data also called preparing the data which in some cases can be very computationally expensive and which adds to the total computational cost of rendering that data. Once the data preparation is performed and the data has been sent to the GPU the data can be redrawn many times without paying the performance cost of preparation and buffering. However changes to the data in the form of new map data typically requires the same level of preprocessing and preparing and thus does not enable the re use of previously processed map data that is basically the same in the newly rendered map.

There are many types of graphics systems that have the need to render some data modify the data somewhat and re render it as a new image. Most of these systems have sufficient performance capability GPU and CPU processor capability to take the brute force approach which is to simply modify the data preprocess or prepare the data as if it was a totally new image and re buffer the preprocessed image for rendering in the GPU. However some systems such as mapping system tend to be performance intensive and cannot afford all of the duplicated processing work to perform well at the speed at which new map images need to be rendered. These systems require a methodology that avoids re preparing and re buffering data prior to rendering that data with the graphics processing unit.

In an embodiment a computer implemented method for providing map data to a client device includes generating a set of base map tiles associated with a particular region wherein the set of base map tiles when used to render a map image renders a base map image for the particular region and wherein each base map tile includes one or more vector descriptors that indicate a geometry of one or more respective map elements for the base map image in accordance with a vector graphics format. The method further includes causing the base map tiles to be transmitted to the client device via the communication network. The method also includes receiving an indication that a map image for the selected geographic region that is different than the base map image produced using the set of base map tiles is to be rendered at the client device and generating a set of difference map tiles indicating one or more differences between the map image to be rendered and the base map image. The differences may be specified using vector descriptors each of which corresponds to a respective map element that is 1 to be rendered in the map image but is not in the base map image 2 not to be rendered in the map image but is in the base map image and or 3 to be rendered using a different style layer or other feature in the map image than that specified in the base map image. The method may then cause the set of difference tiles to be transmitted to the client device via the communication network for rendering the map image using. At the client device the rendering engine may first render the first map image using the base map tile and may thereafter reform or re render the image based on the difference map tiles without needing to preprocess all of the graphics within the altered map completely which makes this system much more efficient in the use of graphics processing unit power and saves on rendering time and effort. In particular the changes in the base map tiles may be implemented by rendering elements to be deleted from the base map image using a style feature that simply makes the feature invisible as rendered without needing to re preprocess the map features being deleted.

In another embodiment a method for implementation in a computing device for generating map images includes receiving via a communications network a plurality of base map tiles associated with a first map image for a selected geographic region each base map tile including one or more vector descriptors that indicates a geometry of a respective map element in accordance with a vector graphics format and preprocessing using a processor the vector descriptors in each base map tile to create a first set of rendering instructions for rendering the first map image as defined by the plurality of base map tiles. The method also includes receiving via the communications network a set of difference map tiles for rendering a second map image for the selected geographic region each of the set of difference map tiles including one or more indications of a modification of a vector descriptor to be applied in one of the plurality of base map tiles and preprocessing using a processor the one or more indications of the modifications of the vector descriptors to create a second set of rendering instructions for rendering the second map image. The method also includes rendering using a processor the second map image via a user interface by implementing the first set of rendering instructions and the second set of rendering instructions.

If desired the method may include receiving a difference map tile including an additional vector descriptor not included in the plurality of vector descriptors in the plurality of base map tiles wherein the additional vector descriptor corresponds to a map element to be rendered as a part of the second map image but that is not part of the first map image and may include receiving a label corresponding to the additional vector descriptor wherein the label includes text to be rendered as a part of the second map image along with the map element.

Still further the method may receive an indication that a map element defined by one of the plurality of vector descriptors in the plurality of base map tiles is not to be shown in the second map image and may further include implementing using a processor the first set of rendering instructions to render the map element that is not to be shown in the second map image in a manner that makes the map element not to be shown in the second map image substantially invisible in the second map image. For example the method may render the map element not to be shown in the second map image using a transparent style parameter or using a value of a line width rendering parameter for rendering the map element that is not to be shown in the second map image that is small enough to make the map element not able to be seen on the user interface with the naked eye. If desired the method may create the first set of rendering instructions to refer to a style attribute stored in a memory to define one or more rendering parameters associated with a map element defined by one or more of the vector descriptors and may implement the first set of rendering instructions to render the map element that is not to be shown in the second map image in a manner that makes the map element not to be shown in the second map image substantially invisible by setting the style attribute for the map element not to be shown in the second map image to a transparent value or to a small line width value.

Still further the method may preprocess the one or more indications of the modifications of the vector descriptors by defining a rendering sequence for the first set of rendering instructions and the second set of rendering instructions by interleaving at least one of the second set of rendering instructions between two of the first set of rendering instructions and may render the second map image on a user interface by implementing the first set of rendering instructions and the second set of rendering instructions in the order defined by the rendering sequence.

In another embodiment a method for implementation in a computing device for generating map images includes receiving via a communications network a plurality of base map tiles associated with a first map image for a selected geographic region each base map tile including one or more vector descriptors that indicates a geometry of a respective map element in accordance with a vector graphics format and preprocessing using a processor the vector descriptors in each base map tile to create a first set of rendering instructions for rendering the first map image as defined by the plurality of base map tiles wherein the first set of rendering instructions use a style attribute look up table to define style parameters to use in rendering map elements within the first map image. The method also includes receiving via the communications network a set of difference map tiles for rendering a second map image for the selected geographic region each of the set of difference map tiles including one or more indications of a modification of a vector descriptor to be applied in one of the plurality of base map tiles wherein at least one of the difference map tiles includes an indication that a map element defined by one of the plurality of vector descriptors in the plurality of base map tiles is not to be shown in the second map image. The method may also include modifying using a processor one or more of the style parameters used by the first set of rendering instructions to cause the first set of rendering instructions to render the map element that is not to be shown in the second map image in a manner that makes the map element not to be shown in the second map image substantially invisible in the second map image and may render using a processor the second map image via a user interface by implementing the first set of rendering instructions with the modified one or more of the style parameters.

In a still further embodiment a display device includes a communications network interface a user display device and processing hardware including one or more processors coupled to the communications network interface and to the user display device. Here the processing hardware is configured to receive via the communications network interface data in the form of a plurality of base map tiles associated with a first map image for a selected geographic region each base map tile including one or more vector descriptors that indicates a geometry of a respective map element in accordance with a vector graphics format and is configured to preprocess the vector descriptors in each base map tile to create a first set of rendering instructions for rendering the first map image as defined by the plurality of base map tiles. The processing hardware is also configured to receive via the communications network interface a set of difference map tiles for rendering a second map image for the selected geographic region each of the set of difference map tiles including one or more indications of a modification of a vector descriptor to be applied in one of the plurality of base map tiles. Likewise the processing hardware is configured to preprocess the one or more indications of the modifications of the vector descriptors to create a second set of rendering instructions for rendering the second map image and to render the second map image on the user display by implementing the first set of rendering instructions and the second set of rendering instructions.

In yet another embodiment a display device includes a communications network interface a user display device and processing hardware including one or more processors coupled to the communications network interface and to the user display device. Here the processing hardware is configured to receive via the communications network interface data defining a plurality of base map tiles associated with a first map image for a selected geographic region each base map tile including one or more vector descriptors that indicates a geometry of a respective map element in accordance with a vector graphics format and to preprocess the vector descriptors in each base map tile to create a first set of rendering instructions for rendering the first map image as defined by the plurality of base map tiles wherein the first set of rendering instructions uses a set of style attribute variables to define style parameters to use in rendering map elements within the first map image. The processing hardware is also configured to receive via the communications network interface a set of difference map tiles for rendering a second map image for the selected geographic region each of the set of difference map tiles including one or more indications of a modification of a vector descriptor to be applied in one of the plurality of base map tiles wherein at least one of the difference map tiles includes an indication that a map element defined by one of the plurality of vector descriptors in the plurality of base map tiles is not to be shown in the second map image. The processing hardware is also configured to modify one or more of the style attribute variables used by the first set of rendering instructions to cause the first set of rendering instructions to render the map element that is not to be shown in the second map image in a manner that makes the map element not to be shown in the second map image substantially invisible in the second map image and to render the second map image via a user interface by implementing the first set of rendering instructions with the modified one or more of the style attribute variables.

A map server device communicates with a map client device to efficiently provide map data for rendering map images on the client device using a set of base map tiles having basic map feature data and a set of difference tiles defining changes to be made to the basic map feature data within the basic map tiles upon rendering the map at the client device. Once the base map tiles and the difference map tiles are provided to the client device and the client device has processed and rendered the base map tiles as a map image the graphics processor on the client device may efficiently render the new map image associated with the difference map tiles without needing to perform a complete preprocessing operation on the altered or new map image thereby reducing the processing power and time needed to render the second or altered map image associated with the difference map tiles.

In some cases the map server first provides map data to a client device such as desktop computer a laptop a tablet device a mobile phone etc. for rendering a first map image corresponding to a certain area or geographic region as a set of one or more base map tiles and then later provides modification data to the client device in the form of difference tiles for rendering a second different map image e.g. a traffic map image a transit map image etc. corresponding to the same geographical area. The client device then may render the second map image using the base map data previously provided for rendering the first map image and the modification data in the form of the difference tiles so that the map server need not provide map data used in rendering both the first map image and the second image to the client device more than once. Depending on the scenario the modification data within the difference map tiles may include one or more additions to the data or features within previously provided base map tiles deletions of one or several portions or features of the previously provided base map tiles and or modifications of one or several portions or features of the previously provided base map tiles such as modifications in styles layers depths etc. associated with the features are to be rendered. In some cases the map server device may provide both the base map tiles and the difference map tiles in response to a single map request when for example the user at a client device first requests a map image for a particular geographic region that is not the base map image.

In one case the map server may provide the base map tiles in a non raster format such as in a vector graphics format and the client may interpret some or all of the map data to generate the first map image. In some cases the map server may provide one or more of the base tiles in a hybrid format where map data is included with both raster data such as a raster background and vector data. Additionally the map server may provide the client device with one or more difference tiles in a raster format a non raster format or a hybrid format and the client device may process the difference tiles to identify the changes to be made to the base map tiles. The client device may then render the second map image as a new or modified image based on the data within the original base map tiles and the difference map tiles covering the same geographic region. Either or both of the base map data tiles and the difference map data tiles may include style data that is used to specify various stylistic features to be used when rending the base map data or the modified map. In this case the difference map tiles may include or specify a new or different set of style data to use to render the map image. However when rendering the second map image the client device may alter style information for the preprocessed base map image to enable changes to be made to the base map image while avoiding the need to perform vector graphics processing on all of the vector elements in the combined base and difference map tiles thereby significantly reducing the processing activities needed to render the new or second map image on the client device.

To render the base map image the client device may request map data from the map server via a communication network and the map server may in response provide the base map data that describes map content according to a vector graphics format. For example the base map data may specify various geometric shapes e.g. using mathematical descriptions of points and paths connecting the points and indicate how these shapes should be positioned for rendering various map elements such as roads buildings parks bodies of water etc. In this case rather than specifying each pixel that makes up a raster image of a line segment a vector based description of the line segment may specify the two endpoints of the line segment and indicate that the two endpoints are connected by a straight line. Style data provided as part of the base map tile may specify the width or color or drawing texture solid dotted etc. of the line or other feature element. Vector based descriptions of map elements may be referred to herein as vector descriptors or simply vectors and a set of one or several vector descriptors may be referred to as vector data. Further an individual map element e.g. a building or an aggregation of several map elements e.g. buildings parks bicycle paths and pedestrian paths of a college campus in some scenarios may define a map feature or simply a feature . In an embodiment a map feature is assigned a unique identifier which the map server and the map client may utilize for identification. In general a map feature may be described using one or more vector descriptors.

When rendering the base map image the client device may request map data for rendering a map image in response to respective user commands for example. The user commands may indicate a selection of a different map type a different zoom level etc. According to an example scenario a user selects a geographic region and a basic map type e.g. the type of a map that illustrates roads streets major landmarks etc. The client device generates a request for rendering a map image and transmits the request to the map server which in response provides map data including a set of one or more base map data tiles with the map data in each base map data tile being in a vector graphics format or other non raster format suitable for rendering a raster image at the client device . The map data may include several vector descriptors and in some cases may include additional data such as style data label data layer data etc. More specifically label data may include characters in the American Standard Code for Information Interchange ASCII format a Unicode format or any other suitable character format. Layer data may include data specifying a relative layer or depth of a map element and thus specifies which map elements are to be rendered on top of other map elements within the map image. The client device then interprets the map data to render the map image and displays the map image on a display device.

To continue with the scenario above the user then may select a transit map for the same geographic region and the client device in response may generate an indication that a new map image corresponding to a transit map is to be generated and transmit the indication to the map server. According to one implementation the client device generates a request for map data of the new type e.g. provide map data for a transit map of region R and the map server checks previous communications with the client device to determine what base map tiles or base map data was previously sent to the client device and therefore is already available at the client device. In another implementation the client device specifies what kind of map data for the selected region is already available at the client device in addition to requesting map data of the new type e.g. provide map data for a transit map of region R given that I already have map data for a basic map of region R at the same zoom level . The map server in this case does not need to know what base map data or base map tiles if any were previously sent to the client device. More generally a history of transactions between a map server and a client device may be maintained by the map server and or the client device.

The map server then may determine which map elements and labels must be added to removed from or modified in the base map data already available at the client device. For example the map server may determine how a base map for a certain region and a certain zoom level differs from a transit map for the same region and the same zoom level and may generate an appropriate modification indication in the form of one or more difference map tiles. For example the difference map tiles may include vector descriptors for features to be added to the base map tiles such as rendering subway lines not included in the base map image may describe certain features of the base map tiles to be removed and or may describe certain features of the base map tiles to be changed such as different styles e.g. widths fonts colors shading etc. levels and or labels to be used in the map image to be rendered on the client device as compared to the base map image. The map server then provides the modification data in the form of a set of difference map tiles for use along with the base map tiles to render the transit map image at the client device using at least partially the base map data tiles and the difference map data tiles. Thereafter when the user selects yet another map view of the same geographic region the client device may request this view from the map server which may determine the differences between the newly selected map image view and the base map image provided in the base map tiles to generate another set of one or more difference tiles. This new set of difference tiles may then be provided to the client device which generates the new map view based on the original base map tiles and the new set of difference tiles.

These and other example scenarios in which map data for rendering map images is efficiently provided to a client device are further discussed with reference to the accompanying drawings. Some of the figures may have been simplified by the omission of certain elements for the purpose of more clearly showing other elements. Such omissions of elements in some figures are not necessarily indicative of the presence or absence of particular elements in any of the exemplary embodiments except as may be explicitly delineated in the corresponding written description.

Referring now to a map display system may be used to efficiently transfer map data from a map server device to a map client device using base map data tiles and difference map data tiles iteratively provided to a client device. As illustrated in the system generally includes a map server one or more client devices and communicatively coupled to the map server via a communications network which could be made up of one or more different communications networks and a map database communicatively coupled to the map server . The network may be a wide area network WAN such as the Internet a local area network LAN or any other suitable type of a network. Depending on the embodiment the map database may be coupled to the map server via the network or via another communication link as illustrated in . Still further the map database may include multiple different databases or map services used to produce a map. For example the database may include a base map database A that stores base map tiles for various geographical regions for any number of zoom level. Moreover the database may include one or more map services databases B E. Here for example the map database service B may store transit map data defining transit data to be added to the base map data as stored in the database A to provide transit map views of geographical regions stored in the base map database A. Likewise the map database services C and D may store bicycle and terrain map data respectively that enables the map server to produce bicycle trail map views and terrain map views for various geographical regions of map data stored in the base map database A. Still further in one embodiment the map database services E may store personalized map data content for various users. In particular users may personalize map data by adding information to various map tiles refocusing information by changing map styles setting preferences such as always showing points of interest bicycle paths traffic data etc. In these cases the personalized map data or preferences may be stored in the map database services E for later retrieval and use when displaying maps to users as will be discussed in more detail below. Of course the database could including any number of map database services for any other types of map data and these database services could be stored in the same or in different server devices. Alternatively all of the additional map data stored in and provided by the map service databases B E could be stored in the database A. Moreover for simplicity only one instance of the map server and the map database is illustrated in . However in other embodiments the system may include more than one map server more than one map database and any number of client devices .

The map server is illustrated in as including a processor and a computer readable memory that stores a map controller in the form of computer instructions for example that may be executable on the processor directly e.g. as compiled code or indirectly e.g. as a script interpreted by another application executing on the processor . The computer readable memory may include volatile memory to store computer instructions and data on which the computer instructions operate at runtime e.g. Random Access Memory or RAM and in an embodiment persistent memory such as a hard disk for example. The map controller may include a dynamic feature controller that generates vector graphics data for various map elements and or map features including one or more map elements that are provided as map content to the client devices and in the form of base map data tiles. The dynamic feature controller also may be configured to determine the difference in a vector based description of a map image relative to another map image corresponding to the same geographic area or region generate an appropriate modification indication as a set of difference map tiles and provide the modification indications or difference map tiles to the client devices and or . In other words rather than providing a complete vector based description of a map image the dynamic feature controller can efficiently provide a description of modifications of a previously provided vector based description of another map image.

Generally speaking the system of may create and use difference map tiles each of which is essentially a partial map tile in that each difference map tile specifies only a portion of the map image to be rendered on the client device in the region covered by the map tile to create map images. In particular when the difference map tiles are combined with another tile in the form of a base map tile at the client or map rendering device the system is able to produce the desired final map view e.g. transit view . In one case the difference map tiles contain only the set of modifications that are required to change the base map tiles into the desired final tile or map image.

In one embodiment each difference map tile includes two fundamental components in the form of a set of tile edits and a set of style specifications. Here each of the set of tile edits specifies a single operation against the base map tile that defines how to convert some geometry in the base map tile into that required by the desired final state or map view to be created using the difference map tiles. The tile edits may include the addition of features the removal of features and or the change of properties of features such as a change of the rendering level of a feature the label of a feature etc. The new set of styles specifications indicates the colors font sizes line widths etc. that should be used to achieve the final desired look as compared to the styles used in the base map image or base map tiles.

More particularly tile edits may be specified as individual geometry modification operations that must be performed on a base map tile to transition the base map tile to the desired final state for rendering the desired map image or view. These operations may in one case work on render operations or render ops within the map tile i.e. individual pieces geometry such as a strip of road a label a polygon representing a lake etc. and generally come in three types including the removal of features the addition of features or the changing of feature properties.

More particularly a render op as specified in the difference map tile may operate to remove some of the geometry in a base map tile that may not be relevant in the desired final map tile or map image. For example in terrain mode a lot of roads become superfluous and need to be stripped out of the terrain map view as compared to the base map view. A difference map tile for a terrain image view might include a single remove operation for each road render op that needs to be removed from the base map tile to achieve the terrain map view effect.

In another example a render op may add a map feature to a base map tile as in many cases a particular map view will need additional data or features over those found in the base map image. For instance a transit map view would need to add prominent transit lines to the map image associated with the base map tiles. A transit difference tile would in this case include add operations for each transit line that needs to be drawn. Each such add operation may specify three things including the new geometry to be added the visual style of that geometry and below what render op in the base tile the new render op should be added so that the system can control ordering of render ops in the final map tile .

In still another example a render op may provide a restyle operation. For example in map views that are interactive it is often desirable to change the presentation of render ops without affecting all other render ops like it. For instance if a user interacts with a business the system may want to change the business label and icon to reflect having been selected. The system however does not usually want to change the presentation of all of the other businesses around the selected business. In this case the system can issue a single restyle operation on the selected business and define a new visual style for just that business. In other cases restyle operations may be applied to all of the elements within a particular feature such as all of the elements within a park a building associated with a bike path or a walking path etc.

Still further as noted above each difference map tile may include a set of styles. In particular in one example every base tile may include a style table that includes the visual style parameters of every render op listed in the tile. When a difference tile is sent from the server device to the client device the difference tile may also include a new style table for everything that will be visible in the final composed tile. While it may in some cases be desirable to specify only the changes in the base map tile style table within the difference tile it is also possible to simply provide a whole new style table as part of the difference map tile as style tables are typically small in size. In fact because of the relatively high complexity of such a style difference mechanism and because style tables are typically tiny in comparison to the geometry and feature data within the difference and base map tiles it is typically not necessary to attempt to optimize the sending of style changes in a difference map tile. Still further style tables may be configured such that if a value is not included in the style table the value of the style table entry is treated as an empty style e.g. not to be rendered . Conversely style tables may be configured such that if a style is not included in the style table the style table value to be used for that style table entry is the style table value for that entry as found in style table of the base map tile.

In any event putting all the above described elements together as long as both the client device and the server device agree on what map tiles to use as the base map tiles the server device can create and send and the client device can request receive and process difference map tiles that simply specify changes to the base map tiles that have already been sent to the client device to enable the client device to render new or different map views of a particular geographic region. More particularly the first time the client device wants tiles for a non base mode or non base map view e.g. a transit map view the client device will need to request all of the base tiles from the server that it does not already have along with difference map tiles which transform the base map view into the transit map view. Thus in this case for every tile that would normally have been requested without difference map tiles a client device that uses a difference map tile system will request twice the number of tiles one base map tile and one difference map tile. However once a set of base map tiles for a particular geographic region have been sent to and received by the client device the client device merely needs to request or receive the difference map tiles for a new map view for that region. As difference map tiles will generally be small in size as compared to the base map tiles this system will send and receive less data upon the request of multiple map views for the same geographic region. That is the base tiles need be requested only once and then stored henceforth at the client device so that while the first time the base tiles are needed twice the number of tiles may need to be requested thereafter the base tiles will already be available on the client and so only difference tiles need to be requested. Moreover if the client device initially displays the base map for instance the switch to a transit map view will only require the difference map tiles to get from the base map view to the transit map view. Still further the use of base tiles and difference tiles enables a mapping system to easily deal with personalized map data or to provide the ability for users to personalize map content features display settings etc. to be used to display maps in the future. In particular user modifications to maps additions to maps map preferences display settings default map views etc. can be implemented and stored as a set of difference tiles and provided to users along with the set of base tiles to which the user preferences in the form of difference tiles are to be applied to thereby alter a set of base tiles to personalize map content for a user. The user map preferences settings or other personalized map data may be stored at a map server device in the form of difference tiles tied to or associated with a particular user and thus can be cashed at the server without requiring a lot of memory or space. In this case the same set of base tiles for a particular region can be sent to each user along with different user specified or user specific difference tiles that are to be applied to the base tiles to enable personalized map data to be cashed and provided to the user. Alternatively personalized difference tiles may be created and stored on user devices such as mobile phones computers laptops tablets etc. and applied to the base tiles as those base tiles are received at the client device that is implementing the mapping application.

Generally speaking the rendering system at the client device may combine the base tiles and the difference tiles and may then render the combination to the user interface screen in any desired manner. However the client device may perform this rendering in a manner that does not wipe out all of the data that has already been prepared for display of the base map tiles so as to reduce rendering operations when changing from a base map view with no difference tiles or from a first map view created using one set of difference tiles to another map view created using a different set of difference tiles. Moreover a system using the techniques described above results in vastly improved performance at all levels of the architecture as it reduces serialization work on the server reduces bandwidth required and transfer time across the network and reduces preparation time on the client.

Referring again to the map database A may store a set of base map data tiles defining map data to be used for each of a number of different geographic regions at each of a number of zoom levels. The base map data tiles may for example store or describe map data in a vector graphics format but could instead describe data in a raster image format. The map server or map controller can provide some set of these base map data tiles to the client device the first time the client device requests map data for a particular geographic region. However when the client device requests a map view other than the base map view for the particular geographic region the map server may obtain the additional data from for example one or more of the services B E and the dynamic feature controller may generate a set of difference map tiles to be sent to the client device describing the manner in which the base map tiles for the particular geographical region are to be modified to produce the new map view. In some cases the difference map tiles may be created and sent along with the base map tiles for a particular geographical region when the client device first requests a map view that is different than the map view associated with the base map tiles. In other cases the map server may create and send the difference map tiles at a later time such as when the client device requests an additional map view for a particular geographical region after requesting and displaying the map view associated with the base map tiles for that geographical region.

Thus to make transmission of map graphics between a server and a client more efficient the server provides a set of basic map data tiles in a vector format to the client device . When the user requests the display of new map elements or otherwise changes the map view at the client device the server provides a description of the differences between the base map data tiles and the map tiles the user presently wishes to see. For example the server can specify which elements should be deleted which elements should be added and the geometry of these elements which new styles should be applied to some of the previously provided map elements and what the visual attributes of these styles are etc. As such the server generates difference map tiles rather than new map tiles that repeat significant portions of the base map data tiles previously provided to the client device .

To generate a modification indication or a difference tile the dynamic feature controller may compare a serialized representation of the vector data corresponding to a certain map image or map to a serialized representation of the vector data corresponding to the map image provided by the base map date tile s . For example the dynamic feature controller may request vector data for a base map for a region R at zoom level Z and in response the map server A may provide a series of vector descriptors V V V . . . V defining one or more base map data tiles. At another time the dynamic feature controller may request vector data for a transit map for the region R at zoom level Z and the map server in response may provide a series of vector descriptors V V . . . V defining the map view for the region R with the transmit map information. Based on the two sets of vector descriptors the dynamic feature controller may determine that for the region R at zoom level Z i both the basic map and the transit map include a map element corresponding to vector descriptor V ii the basic map but not the transit map includes map elements corresponding to vector descriptors Vand V and iii the transit map but not the basic map includes a map element corresponding to vector descriptor V. The dynamic feature controller may generate a modification indication or difference tile to indicate that in order to generate a transit map image using the vector data previously provided for rendering a base map image from the base map tiles vector modifier Vis added to the previously provided vector data while vector descriptors Vand Vare removed from the previously provided vector data. More specifically the dynamic feature controller may generate a modification indication or difference tile that includes one or more add indications and one or more remove indications each of which may identify an operation e.g. add remove and an operand e.g. a vector descriptor a map feature or map element .

Further in some embodiments the dynamic feature controller may determine that although a certain map element is rendered when generating both the base map image and the additional map image one or more properties of the map element must be modified to reuse the map element in rendering the additional map image. For example some or all map elements may be associated with respective depth values indicative of positioning of these map elements relative to other partially or fully overlapping map elements in the same area. As a more specific example a map element that depicts a road segment and corresponds to a vector descriptor Vmay be rendered at a depth Din a basic map image but rendered at a depth Din a transit map image. In this scenario dynamic feature controller may generate a modification indication that indicates that the depth associated with vector descriptor Vpreviously provided to the client device should be updated to depth D.

Still further in addition to vector data the dynamic feature controller may provide label data for the added or modified map features as a part of the modification indication or alternatively as a separate indication. The label data may include characters in any suitable format and in some implementations identifiers of map features or groups of map features to which the corresponding labels belong.

In another embodiment the map controller and in particular the dynamic feature controller may generate difference tiles directly based on information sent from one or more of the services databases B E without comparing this information to the map data within the base map data tiles provided by the base map database A. In some cases the map services databases B E may provide transit data bicycle data terrain data personalized map data for example in the form of a description of differences or modifications to be made to the base map data tiles in the base map data sever A instead of providing a complete raster or vector graphics description of a map region for which a new map view is requested. In this case the dynamic feature controller may generate the difference tiles for a particular geographical region based on the difference descriptions provided by the map services databases B E instead of comparing vector or raster graphics for entire tiles associated with a base map view from the base map database A and an additional map view such as a transit map view of a geographical region to generate the difference tiles to be sent to the client device.

In some embodiments in addition to vector data the map controller may provide style data that indicates how vector data should be rendered. More particularly style data may describe such visual characteristics or properties as line thickness e.g. width in pixels line color line shading or style one or more fill colors etc. In an embodiment style data is provided for various visual styles that may be applied to the vector data. The map server also may specify which visual styles the client device should apply to various vector based descriptions of map elements also referred to herein as vector descriptors or simply vectors . Further in some embodiments the map server indicates which visual style applies to a vector based description of a map element for a particular map type such as terrain transit traffic bicycle trail etc. Style data may also be used and stored as part of cached personalized map data to indicate the various styles to use for different users at certain map locations. To this end several styles each identified by a respective unique style identifier may be defined. In one case a style table may be created for a particular map view to indicate the style values to be applied to the various lines areas and other features for that view. In this case each base map tile may have a style table or set of styles associated therewith for the base map view and this style table may be sent to the client device as part of or along with the base map tiles when the base map tiles are sent to a client device. As such difference tiles created by the by dynamic feature controller in this case may include a new style table for application to the base map tiles or for application to modified base map tiles at the client device to produce the modified or new map views.

In any event the map controller may provide map data for a certain geographic region and zoom level in a non raster format such as vector data to the client device in a single electronic message or a series of electronic messages depending on the embodiment. Generally speaking these electronic messages may have one or more map tiles therein. Further in an embodiment the map controller generates map data as a set of map tile descriptors such that each map tile descriptor describes a map tile i.e. a portion of a map image of a certain size e.g. 256 by 256 pixels . The size of a geographic region represented by an individual map tile may depend on the zoom level with which the map tile is associated so that a single map tile at a lower zoom level illustrates a larger geographic area than a single map tile at a higher zoom level. The map controller may generate each map tile descriptor according to a vector graphics format and a client device such as the client device of may locally generate a raster image for each tile.

With continued reference to the client device may include a processor to execute instructions and a memory to store instructions and data. The client device also may include an input device and an output device to receive input from a user and provide output to the user respectively. The input device may include one or more of a keyboard a mouse and a touchscreen and the output device may include a display or monitor device such as a touchscreen or a regular output only screen for example. The client device may include various software components such as device drivers operating system OS event handlers etc. to control the input device and the output device so as to implement an interactive user interface. Further software applications executing on the processor may utilize these software components to provide an application specific user interface.

Depending on the embodiment the client device may be a personal computer such as a desktop computer a laptop computer or a tablet PC a workstation a portable communication device such as a smartphone or any other suitable computing device. In an embodiment the client device is a so called thin client that depends on another computing device for certain computing and or storage functions. For example in one such embodiment the memory includes only volatile memory such as RAM and a program and or storage unit having persistent memory is external to the client device . In another embodiment the memory includes both volatile and persistent memory components.

A browser application may include a set of computer readable instructions that execute on the processor . In general the browser application accesses web pages that include content such as text images embedded video etc. and instructions in a mark up language such as Hypertext Markup Language HTML and renders the content on the output device according to the instructions in the mark up language. To this end the browser application may implement functions for generating and processing data packets that conform to the Hypertext Transfer Protocol HTTP parse HTML content encode data according to the Secure Socket Layer SSL protocol request and verify digital certificates etc. as well as user interface functions for receiving various user commands related to navigation rendering and managing web page data. In some embodiments the browser application is configured to interpret instructions in a scripting language e.g. Javascript provided in a web page.

A dynamic map rendering engine may execute as a component of the browser application . However in other embodiments a software module similar to the map rendering engine may execute as a standalone application or as a component of another application. Depending on the embodiment the dynamic map rendering engine may be a plugin e.g. a set of compiled instructions that extends the functionality of the browser application and executes on the processor a script e.g. a set of instructions in a scripting language interpreted by the browser application at runtime or another suitable software component. According to one example scenario the dynamic map rendering engine is downloaded when a user operating the client device visits a web page that includes an embedded interactive map. More specifically the web page may include a first hyperlink to an online map server and a certain geographic location as well as a second hyperlink to a copy of the dynamic map rendering engine which is required for rendering map data received from the online map server according to the first hyperlink.

The dynamic map rendering engine may provide interactive controls via the user interface of the browser application for example. The interactive controls may allow a user to select a geographic region or area a map type e.g. basic traffic transit a zoom level etc. According to an example scenario user first requests a basic map of a geographic region and then requests another type of a map for the same region. The dynamic map rendering engine may request and receive map data in a vector graphics format in response to user commands.

During operation the dynamic map rendering engine receives vector data and in some embodiments style data from the map server renders the corresponding map image using the received vector data and causes the map image to be displayed within a certain region allocated by the browser application . For example the browser application may create an HTML5 Canvas element for displaying map images. The dynamic map rendering engine also may receive from the map server a modification indication that indicates one or more modifications to the received vector data for rendering another map image.

For simplicity the client device is illustrated with a single processor . However the client device in other embodiments may include additional processing units such as a graphics processing unit GPU configured to facilitate image rendering on the output device for example. Further in an embodiment the browser application may utilize a library of graphics functions for efficiently generating a map image. For example the memory may store a plugin such as an OpenGL or Direct3D library having functions for rendering graphics which various applications executing on the client including the browser application may access via an application programming interface API . In another embodiment the memory stores a plugin particularly suitable for browser applications such as WebGL for example. Also in some embodiments the memory stores additional software components that facilitate efficient rendering of images via the output device . For example the memory may store an Adobe Flash plugin or an O3D plugin.

It is noted that in general the dynamic map rendering engine can operate in any suitable application. For example the client device may be a portable device such as a smartphone for example in which the dynamic map rendering engine operates in a mapping application . Similar to the browser application the mapping application may include a set of instructions stored in a memory and executable on one or more processors of the client device not shown . In some implementations the mapping application utilizes networking functions provided by a browser application executing on the client device via a corresponding browser API for example . In another implementation the mapping application includes at least partial browser functionality such as the communication stack that supports TCP IP HTTP etc. to access the map server .

To better illustrate operation of a map server and a client device in the system of or a similar environment several scenarios are considered with reference to the interaction diagrams illustrated in . In particular an example exchange of information between a map server and a client device for rendering two different map images for a certain geographical region is discussed with reference to followed by a discussion of several specific scenarios including providing a set of difference map tiles for rendering additional map elements and or deleting elements from a base map view on a one to one basis with a set of base map tiles providing a single difference map tile for modifying the depth at which a map feature or element is rendered in a set of base map tiles providing one or more difference map tiles that include new style tables for a set of base map tiles and providing a second set of difference map tiles to change from one type of map view to another type of map view using the same set of base map tiles .

Referring to an example message exchange involves a user interface included in or otherwise associated with a client device such as the client device of a dynamic map rendering engine operating in the client device and a server such as the map server of . Referring back to the user interface may be provided by the browser while the dynamic map rendering engine and the server may be implemented in the components and respectively. In response to a user command the user interface may generate a request for a basic or base map data for a certain region R and provides the request to the dynamic map rendering engine . The request may be transmitted as an electronic message internal to the client device in which the components and are implemented for example. The dynamic map rendering engine in turn may generate a request for a set of base map data in the form of a set of base map tiles that cover the region R to be transmitted via a communication network to the server . The request may specify the region R using Global Positioning Service GPS coordinates or in any other suitable manner. Further the request may include a map type indication to specify that map data is being requested for rendering a basic map or a base map view the zoom level of the map etc. Still further in some embodiments the request indicates whether any vector based map data such as base map tiles for the region R is already available at the client device that implements the components and .

In response to the request the server may generate a response that includes map data in a non raster format such as in a vector graphics format for rendering a basic map image. According to an example scenario the response includes a vector based description of the base map image for the region Rthat does not rely on any previously provided vector data and in particular may be in the form of a set of base map data tiles for the region R as stored in the base map database A of . In other words the response includes a complete description of the base map image for the region Rin the form of a set of one or more base map tiles and their associated style tables. The response may include map data that is organized in any suitable manner such as in one or several tile descriptors T T . . . T. In general map data may be provided for any number of tiles including a single tile. For each tile the response may describe various features F F etc. each of which may be specified using one or several vector descriptors in accordance with a suitable vector graphics format as indicated above a feature may be associated with a single map element or a group of map elements . Features may correspond to simple map elements such as buildings or more complex groupings of map elements. In some embodiments the response may provide unique identifiers for the map features for use in future identification. The response in some embodiments additionally includes style data that specifies various visual attributes of the map elements in the form of one or more style tables. In particular a style table may be sent with each map data tile or a single style table may be sent to be used for all of the base map data tiles sent as part of the response to the request for the map for the region R.

The dynamic map rendering engine may render the basic map image using the base map tiles T Tand the associated style table e.g. a base map style table provide the basic map image to the user interface as indicated by the message generate a corresponding event and store the received base map tiles and when available style data in a memory for future use. In an embodiment the dynamic map rendering engine additionally stores an indication that the map data is associated with a base map.

In the scenario of the user later decides to change the map type being displayed on the user interface from a base map view or image to a transit map image or a transit map view for the same region Rwithout changing the geographic coordinates and activates the appropriate control via the user interface . In response the user interface generates a request for a transit map view and forwards the request to the dynamic map rendering engine which in turn provides an indication or request to the server that a different map image is to be rendered at the client device. In an embodiment the indication is a request for transit map data similar to the request . In another embodiment the indication specifically requests modification data for modifying the previously provided map data so as to render a transit map image and may indicate that the client device includes or already stores the base map tiles for the region for which the transit map view is requested. However the dynamic rendering engine may know that it already stores the base map tiles for the requested region Rand may simply request a set of difference tiles for the transit map view for that region.

In response the server creates and provides a set of one or more difference map data tiles Tile 1 to Tile N to the client device as a series of electronic messages . . . as illustrated in or as a single message. Each of the difference map tiles in the messages . . . may include one or more indications of how vector data for the corresponding base map tile T. . . Tis to be modified. In some scenarios however only some of the base map tiles T. . . Tdescribed in the response are modified and in this case only difference tiles Tile need to be sent for those base tiles as part of the messages . . . . For example a map tile that depicts a body of water may have the same appearance when displayed as a portion of a basic map or as a portion of a transit map and thus no difference tile may need to be generated or sent for the base map data tile s that depicts this body of water.

For each base map tile being modified the message may provide one or more modification descriptors M M . . . M. In general a modification descriptor may specify a vector descriptor for a map elements to be added to previously provided base map data tile identify a map element in the previously provided map data tile to be removed specify a new value for a property of a map element in the previously provided base map data tile etc. and may specify the operation to be performed such as an addition a deletion or a restyling operation . In an embodiment each of the modification descriptors M M . . . Midentifies the operation to be performed such as add delete modify modify depth etc. and also includes one or more operands or parameters such as a vector descriptor for a map feature or map element being added an identifier of a map feature or map element being removed etc.

Upon receiving the messages . . . and the associated difference map data tiles Tile i the dynamic map rendering engine map renders the tiles for the requested transit map image using some or all of the vector data provided in the response i.e. the base map data tiles and the modification indications provided as part of the difference map tiles in the messages . . . . More specifically the dynamic map rendering engine may interpret the previously provided vector descriptors modified according to the messages . . . to render a raster transit map image and generate an event to cause the transit map image to be rendered via the user interface . The dynamic map rendering engine may also store the modified map data in the memory. Generally speaking the dynamic map rendering engine stores both the originally provided base map data tiles and the modified map data tiles.

While the example message exchange diagram of illustrates the base map tiles and the difference map tiles being sent in response to separate messages or requests from the client device the base map tiles and the difference map tiles could be sent from the server to the dynamic map rendering engine of the client device in response to a map request for a single map view. For example if the initial request of were for the transit map view for a geographic region for which the client device had not yet received and stored a set of base map tiles the server would respond to the request by sending both the base map tiles and the difference map tiles for the transit map view associated with the geographic region.

Still further as another example the client device may send a request for map data to the server in a manner that enables the rendering of the digital map on the user interface to be personalized using the personalized map data stored in for example the map database services E of . Here the server may recognize the user or client device by user logon device ID etc. as having personalized data preferences styles added data default map views etc. and may generate one or more difference tiles that implement a personalized map view for the user using the standard base tiles for a geographic region. The server may then send both the base map data tiles and the personalized difference tiles either together or separately for the region to enable the client device to render a personalized map for the region in the manners discussed herein. In some cases the personalized difference tiles may be the same as the difference tiles for other map views when for example a personalized map preference specifies the use of a particular map view e.g. a transit map view as the default map view. Personalized difference tiles may be created for specific map regions or may be applied to any or all map regions based on the personalized settings stored for the user. In some cases the client device may store the personalized preferences and send indications of these preferences to the server which may then process these preferences to generate difference tiles that when applied to the base map tiles at the client device create the personalized map view at the client device.

During an example message exchange illustrated in the map server provides difference map tiles including vector descriptors of map features to be added and or of map features to be deleted from a set of base map tiles to the dynamic map rendering engine via respective messages . . . . In this case a difference map tile is sent on a one to one basis for each base map tile to be changed or modified in some manner. The map feature operations specified in the difference map tiles are used with some or all of previously provided base map data tiles to render a new map image at the client device that implements the user interface and the dynamic map rendering engine . In this case the difference map data tiles in the messages . . . may describe additions to a set of base map data tiles or deletions from the set of base map data tiles already provided to the client device and each of the difference map tiles within each of the messages . . . may be associated with one and only one base map tile so as to define the differences or changes to be made to the vector graphics data within that base map tile.

In any case each of the difference tiles within the message . . . may include a description in a vector graphics format or other suitable non raster format of a map feature having one or more map elements. A message also may include for example a depth or level indication that specifies how the corresponding map feature is rendered relative to another map feature or element disposed at approximately the same location. For example a new map feature added via one of the difference tiles in the messages . . . may be a segment of railroad tracks and the previously provided base tile may include a map feature that is a segment of a road. Depending on the respective depth indications of the new map feature and the previously provided map feature the segment of the railroad tracks may be rendered over or under the segment of the road at the point where the railroad tracks and road intersect.

Upon receiving the difference map data tiles in the messages . . . the dynamic map rendering engine may render a new map image and generate an event so as to cause the new map image to be displayed at the user interface . In an embodiment the dynamic map rendering engine also stores the augmented map data in a memory as a new version of map data while continuing to store the original base map data tiles as well as the difference map tiles for the map view being displayed.

Referring to an example message exchange may occur when the server determines that a certain map feature included in previously provided map data is rendered in a new map image or new map view at a new depth or having some other feature change. The server may generate and transmit to the dynamic map rendering engine a modification indication in the form of a single difference map tile that indicates for one or more map features identified by unique feature identifiers a change that includes information about for example the new depth at which the map features are to be rendered in one or more base map data tiles. In another embodiment the difference map tile sent in the message indicates new depth values for several map features or elements which may be in the same base map tile or different base map tiles. Thus in this example a single difference tile may be associated with multiple base tiles. Upon receiving the modification indications as part of the difference tile sent within the message the dynamic map rendering engine may render a new map image in view of the modification indications and the base map tiles and generate an event so as to cause the new map image to be displayed at the user interface .

Further an example message exchange of may occur when the server determines that certain map features included in previously provided map data should be rendered with different styles such as using different colors different line widths different thickness or other types of style characteristics. In this case the server may generate and transmit to the dynamic map rendering engine a single modification indication in the form of a single difference map tile that includes a new style table or a new indication of the styles that are to be applied to one or more of the base map tiles already at the client device. In another embodiment the server may send a multiplicity of difference map tiles each including a new set of style data or a new style table for a corresponding one of the base map data tiles already at the client device to affect a style change at the client device. Upon receiving the modification indication in the form of a difference map tile having a new style table or changes to a style table the dynamic map rendering engine may render a new map image using the base map data tiles and the new style table s within the difference tile s and generate an event so as to cause the new map image to be displayed at the user interface .

Upon receiving the difference map tiles in the messages . . . the dynamic map rendering engine renders the tiles for the requested bicycle map image using some or all of the vector data provided in the response i.e. the base map data tiles of and the modification indications provided in the messages . . . as difference map tiles. More specifically the dynamic map rendering engine may interpret the previously provided vector descriptors modified according to the messages . . . to render a raster bicycle map image and generate an event to cause the bicycle map image view to be rendered via the user interface event . The dynamic map rendering engine may also store the modified map data in the memory. Generally speaking the dynamic map rendering engine continues to store both the originally provided base map data tiles and the modified map data tiles for the bicycle view but may eliminate or not store the difference tiles for the transit map view is so desired.

For each tile being modified a difference tile within the message may provide one or more modification descriptors M M . . . Mwhich may specify a vector descriptor for map elements to be added to previously provided base map data tiles identify a map element in the previously provided map tiles to be removed specify a new value for a property of a map element in the previously provided base map tiles specify a new set of style data or a style table etc.

Upon receiving the difference map tiles in the messages . . . the dynamic map rendering engine renders the tiles for the requested bicycle map image using some or all of the vector data provided in the response i.e. the base map data tiles of and the modification indications provided in the messages . . . as difference map tiles. More specifically the dynamic map rendering engine may interpret the previously provided vector descriptors modified according to the messages . . . to render a raster bicycle map image and generate an event to cause the bicycle map image view to be rendered via the user interface . The dynamic map rendering engine may also store the modified map data in the memory. Generally speaking the dynamic map rendering engine continues to store both the originally provided base map data tiles and the modified map data tiles for the bicycle view but may eliminate or not store the difference tiles for the transit map view is so desired.

Next several example methods that may be implemented in computing devices operating in the system of or a similar environment are discussed with reference to . These methods may be implemented as computer programs developed in any suitable programming language and stored on the tangible non transitory computer readable medium such as one or several hard disk drives and executable on one or several processors. For example the methods of may be implemented in the map server and the method of may be implemented in the client device . Although the methods of can be executed on individual computers such as servers or personal computers PCs it is also possible to implement at least some of these methods in a distributed manner using several computers e.g. in a cloud computing environment.

Referring first to an example method for generating map data for several map images may be implemented in the map controller of the map server or a similar component of the server for example. According to an embodiment vector descriptors for rendering a first map image for a certain region are generated at block as a set of base map tiles. The vector descriptors or base map tiles may conform to a vector graphics format and describe respective map elements. In some embodiments the vector descriptors may be grouped according to map features each including one or more map elements. Further in some embodiments the vector descriptors may be provided as a part of non raster map data that also includes style data in the form of for example a style table for efficiently rendering and re rendering vector data text based label data icons or symbols such as road shields etc.

Next at block the base map tiles are provided to a client device as one or more messages. At a block a request for data for rendering a second map image for the same region is received. In some scenarios the request is transmitted in response to the user selecting a different map type at the client device as illustrated in the interaction diagram in for example. A modification indication in the form of a set of difference map tiles each of which includes a description of one or several modifications to the previously provided base map tiles is generated at a block and provided to the client device at a block . While the request for a new map view is indicated as being received after the base map tiles for the region of the requested map view have been sent to the client device this request could be received before the base map tiles are sent to the client device so that both the base map tiles block and difference map tiles for the region are sent to the client device in response to the same map image request.

In another scenario the request received at the block is transmitted in response to the user selecting a new zoom level at which the map image corresponding to the same region and the same map type is to be rendered. For example the vector descriptors generated at block may describe several tiles at zoom level Zof a basic map type for a geographic region R. After the user selects the zoom level Zand an appropriate request for data is issued at the block a modification indication or set of difference map tiles may be generated and provided to the client device at blocks and respectively. The client device may add remove or modify the previously provided vector descriptors in accordance with the difference map tiles as well as re scale some or all of the vector descriptors to render the corresponding map elements at the zoom level Z. As a more specific example the vector descriptors provided at the block may include a vector based description of a park at zoom level Z and the same vector based description of the park may be used to re render the park at zoom level Zas a part of the modified map image.

At a block an indication is received that a map image is to be updated at or sent to the client device. Additions to the previously provided vector descriptors in the form of base map tiles are identified and the corresponding descriptions are generated at a block . At a block deletions of some of the previously provided vector descriptors are identified and the corresponding descriptions of modifications are generated. As discussed above modifications of certain map features in some scenarios are represented as deletions and additions of some of the sub features. In some cases these difference descriptions may be generated by comparing vector graphics or raster data for the set of base map tiles to the new map tiles for the new map view to generate differences or from messages sent from various other databases that store data for the new view such as the databases B D of . In any case the modification indications such as a description of modifications to the vector data e.g. changing of depth or level indications labels etc. are generated and compiled at a block . A block may also create a new style table for each set of map elements to render the features of the base map tiles using different style characteristics. Thereafter at a block a set of difference map tiles are created defining the additions deletions changes and styles to be applied to the base map tiles for use in rendering the new map image or map view. These difference tiles may then be transmitted to the client device as a single electronic message or as several electronic messages.

Next at block a request to render a second map image is received from the user interface such as the interface of a browser application for example. The second map image may be for the same region but may correspond to a different map type view or zoom level as discussed above. A modification indication such as a set of difference tiles modifying the previously received and stored base map tiles is received at a block . The second map image is then rendered at block using some or all of the vector descriptors received at the block as base map data tiles and the difference map tiles received at the block . As discussed above modifications to vector data within the difference map tiles in general may include additions deletions modifications changes in depth new styles etc.

To further illustrate an example application of the techniques discussed above illustrate maps that correspond to the same geographic region and are displayed according to the base map type a transit map type and a bicycle map type respectively. A map image of a base map depicted in may include a rendering of multiple map elements such as roads and parks as defined by the set of base map data tiles including the base labels and base style data or style tables corresponding to the illustrated region.

As illustrated in the map image of a transit map may include the map elements of the map image as well as a subway line superimposed on or otherwise integrated within the corresponding portions of the map image . Depending on the embodiment the subway line may be defined as a single map feature or as several map features in the same or different map tiles each corresponding to a respective section of the tracks. Further a subway symbol may be rendered over a portion of the map image . Additionally labels for the subway line the Red Line may be provided on the transmit map view and while not shown various labels for roads in the base map view may be deleted. Depending on the embodiment the subway symbol may be provided as an added map feature or element as a label or as an icon for example. In an embodiment the subway symbol is specified as a universal resource locator URL that can be used to retrieved a standard subway symbol in a raster format from a server that generates standard icons.

To generate the map image of at a client device after the map image of has been rendered at the client device a map server may provide only a set of difference map tiles having the modifications that describe in a vector format for example the one or more map features corresponding to the subway line and any associated changes which may include changes to the labels style data or style table that changes the manner in which various visual features such as line widths colors etc. for various features are rendered. In an embodiment the modification indication or difference map tiles may also provide a depth indication to cause the subway line to appear under some of the roads depicted in the map image of and over some of the other roads in the map image of . Further in an embodiment the difference map tiles additionally include a description of the subway symbol as a label or an icon.

As illustrated in the map image of a bicycle map may include the map elements of the map image as well as a set of bicycle paths superimposed on or otherwise integrated within the corresponding portions of the map image . Here however the transit information is removed or actually deleted in the rendering process . Depending on the embodiment bicycle paths may be defined as a single map feature or several map features disposed in various difference map data tiles each corresponding to a respective section of the map or to a base map data tile of the base map image of . Further bicycle path symbols may be rendered over a portion of the map image . Depending on the embodiment the symbols may be provided as an added map feature or element as a label or as an icon for example. In an embodiment one or more of the symbols may be specified as a universal resource locator URL that can be used to retrieved a standard bicycle path symbol in a raster format from a server that generates standard icons.

To generate the map image of at a client device after the map image of has been rendered and or after the map image of has been rendered at the client device using difference map tiles to modify the map image of a map server may provide only a set of difference map tiles having the modifications that describe in a vector format for example the one or more map features corresponding to the bicycle view and any associated changes to the base map tiles to produce the bicycle view. In an embodiment the modification indication or difference map tiles for the bicycle view may also provide a depth indication to cause the bicycle paths to appear over some are all of the roads depicted in the map image of . Further in an embodiment various of the difference map tiles for the bicycle view may include a description of the bicycle path symbols as a label or as an icon and these or other difference map tiles may provide a new style table that de emphasizes the road and emphasizes the bicycle paths in the map of .

As noted above upon the receipt of map data in the form of difference map tiles which generally define changes to be made to the vector graphics data within the base tiles the client device processes the difference map tiles along with the base map tiles to generate a new set of vector graphics to be used to render the new image or new map view. While the graphics engine of the client device could simply process the newly defined set of vector graphic definitions provided in the difference map tiles along with the features defined in the base map tiles to determine all of the map features shapes boxes lines points included as part of the newly defined map view and then could render all of these shapes to draw the new map view this type of processing for the most part will repeat the processing performed for the base map tiles with the only differences being those defined by the features within the difference map tiles. This type of processing is thus time consuming and processor intensive especially in light of the fact that most of the map image remains the same.

One partial solution to this problem is to have the CPU of the client device draw more feature data defined by the difference map tiles on top of the existing feature data created when processing the base map tiles. For instance if a difference map tile defines features to be added the CPU of the client device could simply process the new features in terms of defining new boxes lines points textures etc. to be added to the map and render these new features over the existing displayed features on the existing viewport. In this manner the CPU could simply prepare the new data for the new features and buffer this data to the GPU of the graphics engine which would draw the features over the existing map elements. The new features would thus be drawn over the top of any existing map content. This approach is seriously lacking however as it does not allow re ordering when drawing of new features but is limited to drawing new features over or on top of the existing features which does not allow the proper layering of the new map features in many cases. Additionally this approach does not allow for the removal of already drawn features making it a very inelegant solution.

A better solution is to integrate existing map data as defined by and processed as part of the base map tiles with new modifier data as defined in the difference map tiles without re preparing or re buffering any of the existing feature data as already processed or prepared by the client device. The modifier data is capable of adding new map features or changing removing existing ones and only generally requires preparing or processing of the features defined by the new modifier data provided as part of the difference map tiles when rendering the new map view. The modifier data as prepared is then rendered as part of a composite of the two types of prepared data old data defined by the base tiles and new data defined by the difference tiles without having to perform additional processing on the existing feature data as defined by the base map tiles .

In particular when adding new data or map features the CPU on the client device keeps track of where the new features are to be added in terms of the ordering of the render operations used to render the map. In doing so the CPU interlaces the render operations for the new features in with the render operations of the old or pre existing features so as to define the order in which both of these types of features will be drawn. This operation enables the client CPU to track and control the draw depth of the existing features along with the draw depth of the added features to thereby interweave the drawing of the new features between existing features as desired or specified by the layer data provided as part of the new features. This operation allows the CPU to draw the full composite of old and new features in any order without needing to modify any of the geometry already prepared and stored in the VRAM of the graphics engine for the old features when the base map image was prepared for rendering.

Moreover features or elements defined by the base map tiles and thus existing as such in the VRAM which are to be deleted can be effectively deleted by rendering these features using an invisible style parameter. That is features within the base map tiles which are to be deleted can have their style parameters changed to effectively make the GPU render or draw these features on the map as being invisible. Such an invisible style may be effected by using zero or very small line widths no colors or fill patterns etc. as the style parameter values if an explicit invisible style parameter value does not exist. In effect according to this technique the feature is still drawn in that the render operation for the feature is executed in the drawing process. However the feature is drawn in a manner that makes the feature not visible on the screen or user interface. In typical graphics engines this restyling would require a complete wipe of existing style data which is used by the GPU to define the manner in which the prepared features are drawn such as the color the line width the font the size etc. to use in the drawing process . However in this case a dynamic styling technique can be used to prevent the need wipe out existing style data. This dynamic styling technique which relies on the use of various style tables described below enables the style data for the existing map to be kept intact to thereby allow the GPU to rapidly switch back to the previous state once the composite map view has been rendered. In addition the system can create a new style map for the composite tiles which contains new style definitions as needed which includes mapping deleted render ops to the invisible style.

Using these two types of operations i.e. 1 preparing additional feature data as defined by the difference map tiles and ordering or interleaving the render operations of these additional features at the appropriate place within the render operations already prepared for the base map tiles to add features to a map view and 2 changing render operations style parameters of base map features to an invisible style to deleted these base map features enables the rendering of a new map view as defined by the difference tiles without the need to re prepare or re define a complete render operation for any feature in the base map tiles.

As way of background map data is typically segmented into uniform square or rectangular tiles. These tiles typically define units of data which are transmitted across the communication network and are stored on client machines and also indicate or define a visual area rendered on an interface screen at a client device. The data units within the tiles contain everything that is required for the client device to render the tile to the screen including the geometry of render operations e.g. this road goes from this point to this point and the styling parameters which should be applied by the render operations e.g. this road should be blue and five pixels wide . Because changing data stored in the VRAM i.e. on the GPU of the client device is expensive in terms of time and processing power and because the mapping system described above wants to be able to easily restyle features for effect the mapping system does not store all of the geometry and all of the style information together. Doing so would cause any style change to force a mass update to the geometry as well. Instead the mapping system stores a series of tables called style tables encoded in one case as textures in VRAM which act as a layer of indirection between render operations the styles that should be applied to them and the parameter values for those styles. Using this technique to figure out how a particular render operation should be displayed the mapping system first looks into a texture in which a style table is encoded which tells the system which style should be applied to this feature or feature vertex and then into another texture encoded as a second style table which contains the actual definition of the style in terms of style parameter values for the various style parameters e.g. line width color fill pattern etc. Using this system if the mapping engine needs to change one road to look like another all the system needs to do is change the pixel value in the intermediate texture style table so that the table points to the new desired style definition. The textures used to encode style tables are small and easy to modify in low numbers without major performance impact and therefore are very efficient in usage.

During operation the map logic of the map application executes on the processor to determine the particular image data needed for display to a user via the display device using for example user input GPS signals prestored logic or programming etc. The display or map logic of the application interacts with the map database and map server using the communications routine by communicating with the server through the network interface to obtain map data preferably in the form of vector data or compressed vector data from the map server . This vector data is returned via the network interface and may be decompressed and stored in the data memory by the routine . In particular the data downloaded from the map server may be a compact structured or otherwise optimized version of the ultimate vector data to be used and the map application may operate to transform the downloaded vector data into specific vertex data points using the processor . In one embodiment the image data sent from the server includes vector data generally defining data for each of a set of vertices associated with a number of different image elements or image objects to be displayed on the screen and possibly one or more lookup tables which will be described in more detail below with this data being sent in base map tiles or difference map tiles in any of the manners described above. If desired the lookup tables may be sent in or may be decoded to be in or may be generated by the map application to be in the form of vector texture maps which are known types of data files typically defining a particular texture or color field pixel values to be displayed as part of an image created using vector graphics. More particularly the vector data for each image element or image object may include multiple vertices associated with one or more triangles making up the particular element or object of an image. Each such triangle includes three vertices defined by vertex data points and each vertex data point has vertex data associated therewith. In one embodiment each vertex data point includes vertex location data defining a two dimensional or a three dimensional position or location of the vertex in a reference or virtual space as well as an attribute reference. Each vertex data point may additionally include other information such as an object type identifier that identifies the type of image object with which the vertex data point is associated. The attribute reference referred to herein as a style reference or as a feature reference references or points to a location or a set of locations in one or more of the lookup tables downloaded and stored in the data memory .

In any event style parameters may include a fill color e.g. for area objects an outline color an outline width an outline dashing pattern and an indication of whether to use rounded end caps e.g. for road objects an interior color an interior width an interior dashing pattern and interior rounded end caps e.g. for road objects a text color and a text outline color e.g. for text objects an arrow color an arrow width an arrow dashing pattern e.g. for arrow objects a text box fill color and a set of text box outline properties e.g. for text box objects to name but a few. Of course different ones of the vertex style attributes provided may be applicable or relevant to only a subset of image objects and thus the vertex style data points associated with a particular type of image object may only refer to a subset of the vertex attributes listed for each style.

As described above when rendering a base map tile or set of base map tiles the processor of may preprocess the map elements or features by defining the specific size and location of each feature in the map viewport and create a number of render operations which will be used by the GPU or processor to render those features on the display. The development of these render operations may be processor intensive but once completed these render operations may be stored in the graphics card memory or VRAM for rendering by the vertex or fragment shaders or as part of the vertex or fragment shaders . When the shaders and operate to draw an image such as the base map image the styles for the render operations are determined from the style tables and the render operations are performed to render the base image.

Next when a set of difference map tiles are received the map application may implement the techniques described above to render the new map image defined by the difference map tiles without having to re preprocess each of the map features in the base map tiles. In particular when a difference map tile adds a new map features to the map image the CPU on the client device preprocesses the map feature to create one or more render operations for that feature to be executed on or by one of the shaders . The preprocessing application keeps track of where the new features are to be added in terms of the ordering of the render operations used to render the map and stores the new render operations to be performed on the shaders in the appropriate place within the render operations already defined for the features in the base map tiles. This feature enables the new features to be drawn at the correct layer within the new map view. Thus the CPU interlaces the render operations for the new features defined in the difference map tiles with the render operations of the old or pre existing features as defined for the base map tiles so as to define the order in which both of these types of features will be drawn. This operation enables the client CPU to track and control the draw depth of the existing features along with the draw depth of the added features to thereby interweave the drawing of the new features between existing features as desired or specified by the layer data provided as part of the new features. This operation allows the CPU to draw the full composite of old and new features in any order without needing to modify any of the geometry already prepared and stored in the VRAM of the graphics engine for the old features when the base map image was prepared for rendering.

Moreover features or elements defined by the base map tiles and thus existing as such in the VRAM which are to be deleted can be effectively deleted by rendering these features using an invisible style parameter in the style tables. Here the difference map tiles may provide a new style table that sets the style parameters to invisible for base map elements that are to be deleted. Alternatively the processor may determine which base map features already stored in the VRAM as render operations for the shaders should be deleted and may set the style parameters values for these feature to an invisible setting. That is features within the base map tiles which are to be deleted can have their style parameters changed to effectively make the GPU render or draw these features on the map as being invisible when the GPU executes the shaders and the render operations associated therewith. Such an invisible style may be effected by using zero or very small line widths no colors or fill patterns etc. as the style parameter values if an explicit invisible style parameter value does not exist. In effect according to this technique the feature as previously determined and configured for the base map tile and stored in the memory is still drawn but is drawn in a manner that makes it invisible to the user. The use of the style tables as illustrated in make this change of the style parameter easy to effect.

As mentioned it can be extremely costly to prepare large amounts of feature data and buffer it to the GPU in the client device. In high performance applications these costs are prohibitive and undermine the function of the entire system. The above described rendering operations circumvent this problem completely when rendering map images using base map tiles that are later changed or altered by difference map tiles.

The following additional considerations apply to the foregoing discussion. Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. For example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for generating map data through the disclosed principles herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

