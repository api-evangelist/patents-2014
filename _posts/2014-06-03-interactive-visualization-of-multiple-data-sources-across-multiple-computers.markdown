---

title: Interactive visualization of multiple data sources across multiple computers
abstract: A data pool receives first data derived from user-generated input that identifies events that have occurred at the corresponding remote first computing system. Thereafter, the data pool generates messages based on the identified events that specify data to be extracted from each of a plurality of data sources. The data pool then transmits data comprising the generated messages to at least one of a plurality of data daemons. The data pool subsequently receives second data extracted and processed by the data daemons in response to the transmitted data. In addition, the data pool transmits at least a portion of the received second data to at least one remote second computing system to enable the remote second computing system to render visualizations that are based on the received data and which are displayed within at least one data lens that overlays a substrate in the graphical user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08886622&OS=08886622&RS=08886622
owner: Conduce Inc.
number: 08886622
owner_city: Carpinteria
owner_country: US
publication_date: 20140603
---
The subject matter described herein relates to visualizations of data across multiple computers and derived from multiple data sources.

The explosion of data in volume variety and velocity colloquially known as Big Data across enterprises of all types from government entities to commercial businesses has forced leaders to reevaluate the tools and methods used for informed decision making. Visualization plays a key role in connecting decision makers to their data. Visualization is particularly important when there are many data sources each with large amounts of data.

No longer is it reasonable to make critical decisions based on partial information from a single silo of data nor is it feasible to cycle through myriad separate sources and tools to arrive at unified result. Separate systems designed for strategic analysis steady state operations management and crisis management further complicates the information management challenge and therefore the decision making environment. A new approach is required in which data from many silos can be explored concurrently in an ad hoc way to support the enterprise as it deals with competition complexity and uncertainty. Industry is frustrated by the typical monolithic approach it calls for a polymorphic approach a flexible environment in which new data sources and analytic techniques can be brought to bear as needed in real time. Further proprietary data are compared to trends in exogenous or open data sources in a non invasive way and without risk of cross contamination.

In one aspect a data pool receives first data derived from user generated input on at least one remote first computing system that identifies events that have occurred at the corresponding remote first computing system. Thereafter the data pool generates messages based on the identified events that specify data to be extracted from each of a plurality of data sources. The data pool then transmits data comprising the generated messages to at least one of a plurality of data daemons. Each data daemon is connected to a different data source among a plurality of data sources. The data pool subsequently receives second data extracted and processed by the data daemons in response to the transmitted data. In addition the data pool transmits at least a portion of the received second data to at least one remote second computing system to enable the remote second computing system to render in a graphical user interface visualizations that are based on the received data and which are displayed within at least one data lens that overlays a substrate in the graphical user interface.

The first data can be generated by at least one coordination pool in communication with at least one input device. The at least one input device can be used to control at least one of instantiation deletion relative position or size of one or more data lenses. The at least one input device can be used to control at least one of instantiation deletion relative position or size of the substrate. The at least one input device can be used to specify display elements to be included within one more data lenses.

The second data can include visualizations generated by the data daemons. At least one data lens can be partially transparent so that features on the substrate can be viewed. In some variations there can be two or more data lens that each partially overlap with another data lens. There can be two or more remote computing systems that provide a unified and non duplicative visualization.

At least one code can be displayed on or adjacent to the substrate that is used by the at least one remote first computing system to connect with the at least one second computing system via the data pool. The at least one remote first computing system can be the same as the at least one remote second computing system. The at least one remote first computing system can at least partially differ from the at least one remote second computing system.

The second data can comprises tags identifying a corresponding data lens in which a visualization is to be displayed.

Non transitory computer program products i.e. physically embodied computer program products are also described that store instructions which when executed by one or more data processors of one or more computing systems causes at least one data processor to perform operations herein. Similarly computer systems are also described that may include one or more data processors and memory coupled to the one or more data processors. The memory may temporarily or permanently store instructions that cause at least one processor to perform one or more of the operations described herein. In addition methods can be implemented by one or more data processors either within a single computing system or distributed among two or more computing systems. Such computing systems can be connected and can exchange data and or commands or other instructions or the like via one or more connections including but not limited to a connection over a network e.g. the Internet a wireless wide area network a local area network a wide area network a wired network or the like via a direct connection between one or more of the multiple computing systems etc.

The subject matter described herein provides many advantages. For example the current subject matter allows for the quick and intuitive creation of interactive visualizations from multiple data sources that allows for multiple iterations across various types and techniques for visualization. Iteration leads to better faster decision making with regard to the data being visualized.

The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings and from the claims.

With reference to diagram of a system is provided in which data in multiple forms such as databases spreadsheets raw data video files images application data visualizations or similar can be stored in multiples data sources . The storage for these sources can include for example one or more of local storage memory network connected hard drives cloud computing web services and the like.

In addition the system can include data daemons one per data source form a connection to each data source . Data daemons in this regard can be applications written in any software language that run on a connected computer. Each data daemon can be programmed to run in the background awaiting an external event at which point an action or series of actions can be triggered. Extraction of data from the data source by a data daemon can be performed through an interface to the data source e.g. a pre defined and standard provided by that data source . Example interfaces to the data sources can include Application Programming Interfaces APIs database queries emitting text characters and reading returned text screen scraping etc.

The data daemons can await message from one or more data pools . Data pools in this regard can be files on local or networked hard drives together with associated programs that manage the depositing of messages into such files and the reporting and transmission of the messages to other programs. Upon receipt of a particular message from a data pool the corresponding data daemon can extract some data from its associated data source based on instructions in the message. The instructions can indicate a subset of data to extract based on the actions of the users as will be described in further detail below . The data daemon can the process the extracted data for visualization and deposits the resulting visualization in the data pools. Processing in this regard can include various forms of analytics parsing selecting and encapsulating. For example the data daemon can determine that there are more elements in the selected region than can be rendered effectively. The data daemon can then generate summary visualization elements e.g. icons etc. to represent this fact. The data daemon can be best suited for the rendering because it is programmed for the particular data source. Such a distributed rendering approach is also advantageous in that it enables taking advantage of distributed computing resources and robustness redundancy if one data daemon fails the system continues to operate without that data source . Finally by processing and rendering each data source separately the various data sources are kept separate which is helpful in applications in which data security is important. Visualizations can include rendered diagrams shapes heat maps videos images etc.

One or more display computers also sometimes referred to herein as computing systems can be connected coupled to the data pools . These display computers can include laptop computers desktop computers rack mounted computers microcomputers mobile phones tablet computers etc. Based on user actions via a graphical user interface on each display computer the display computers can send messages to the data pools which in turn send those messages to the data daemons . The messages sent from the display computer can be based on user actions. When the user instantiates moves or resizes a data lens for example the message can include the location of the data lens with respect to a substrate latitude and longitude of the corners of the data lens in the case of a map substrate . Other information may include settings or parameters that the user may have chosen for a particular data lens . An example might be whether or not to display transformers in an electric grid data lens .

The display computers can display a substrate a map in this example as a background for the visualizations generated by the data daemons . Other graphical backgrounds can be used as substrates such as a rendering of a three dimensional object a plot along two or more axes an image etc. is a diagram illustrating a sample substrate that illustrates a map. In some cases the substrate can be segmented and displayed across multiple display computers . is a diagram illustrating a variation of a substrate that includes a side schematic view of an airplane.

The display computers can receive visualizations back from the data daemons by way of the data pools and then display the visualization atop the substrate in data lenses . A data lens can be characterized as a region of the screen rectangular or another shape with or without a border which contains imagery from a data source. Data lenses can be partially transparent to reveal some of the substrate . is a diagram that illustrates a data lens that overlays a map substrate in which attributes of interest within the boundary of the data lens are illustrated as a heat map. is a diagram that illustrates a data lens over an airplane substrate that shows a cutaway detail of a portion of an airplane i.e. the engine that the data lens overlays. It will be appreciated that the visualizations displayed within each data lens can be continually updated and or periodically updated depending on the desired refresh rate and the like. For example live video feeds can be conveyed in a data lens .

In addition two or more data lenses can overlap so that visualizations provided in each lens can be concurrently displayed conveyed to a user. Diagram of illustrates such an arrangement in which there is a heat map data lens that partially overlaps a network data lens in this case showing gas pipelines both of which overlay a map substrate . is a diagram illustrating an alternative in which there are three lenses overlaying a map substrate and none of the lenses overlap. The first data lens overlays the United States and is a heat map. The second data lens is a network data lens that shows shipping lines within Africa. The third data lens is a video data lens which shows a live video feed from a facility in Asia.

In some variations the location of data lens can be movable within the graphical user interface based on user generated input activating associated graphical user interface elements. The display computers can cause the visual data in the data lenses to stay aligned with the substrate even when the user changes the viewpoint or moves the data lens . If there are multiple display computers in some variations two or more of such display computers can be configured to display a unified view of the substrate and the data lenses which may span any or all of the displays showing the unified view.

Users can use one or more interface devices such as smart phones laptops or tablets to interact with the system. Users manipulate input devices such as computer mice and keyboards or inertial spatial touch screens or other sensors in the interface devices to control the visualization on the screens of the display computers . Through these interface devices users can control the perspective on the substrate position and height above the ground for example . The users can also control the instantiation deletion position and size of the data lenses through these interface devices. The display computers and the interface devices can communicate with each other to coordinate their actions by way of messages passed back and forth by way of coordination pools which are the same as data pools but transfer only coordination messages.

For example a user holds a smartphone that is running a pointing program. The phone is connected via a WiFi Bluetooth or similar connection to a network. Also attached to that network is a computer that is running another program for managing a coordination pool. When the user moves the phone sensors within the phone detect that motion and the motion data how far the phone has moved and its orientation for example is provided to the program. The program sends a message over the network to the coordination pool. This message is now available to any other connected device including any display computer. The display computer may then update its display based on the user action.

It will be appreciated that the data pools architecture allows for the synchronization of multiple systems in real time. By pointing multiple local or remote display computers and interface devices at a common coordination pool the systems will all respond to user actions at either location thus allowing for remote collaboration.

First a user who may or may not be in front of a display computer decides he or she wishes to cause some action within the visualization environment. The user can then launch an application onto an input device such as a smart phone tablet laptop or similar device. The application can be local to the input device or it can be a web application which is loaded through the web browser of the input device . Using this application the input device can connect with the display computers . This connection can be accomplished in a variety of ways including by typing in an address unique code or by using a camera on the input device to view capture a code such as a bar code or QR Code Quick Response Code see code in displayed on the screen of one of the display computers . The displayed code can for example point the device to the appropriate IP address and coordination pool to make the connection with the display computers via the coordination pool .

Once connected the application on the input device can be used to control what is being visualized on the display computer s . The user can activate various graphical user interface elements e.g. buttons etc. directly on the screen of the input device or the user can move or rotate the input device in cases in which the input device has an inertial sensor or other sensors e.g. proximity sensors accelerometers etc. . These actions can be translated by the application executing on the input devices into messages that can in turn be deposited into a coordination pool . For example with reference to diagram of the user can point his or her input device towards a video feed data lens and activate a graphical user interface element associated with such data lens for example by selecting a button on a touch screen interface on the input device . By moving the input device the data lens moves in a corresponding fashion until the same or a different graphical user interface element is activated.

Processes within the display computers can listen to the coordination pool and are alerted when a user action message i.e. a message originating in response to user manipulation of an input device is deposited therein. The program running in the display computers can then interpret the message and takes the appropriate action. For example if the message is to move the cursor because the user took that action by pointing at the screen and then moving the input device the display computer can update the cursor position. If the user selected a button to change a parameter in one of the data lenses the display computer s can update the appropriate data lens .

In some variations multiple user actions on multiple input devices can occur simultaneously. Each action can be used to generate a message that is processed in parallel. If there are multiple display computers actions can be coordinated via the coordination pool . In some cases the relative physical position of the screens can be established during an initial calibration procedure. In one calibration procedure one screen can be established as the main display and the others can be established as secondary displays. User actions on an input device may or may not have an effect on a particular display computer. Based on the stored calibration in conjunction with the current user action each display computer can coordinate with the other display computers particularly with the main computer in the case of secondary computers . Through this coordination each determines whether the intended user action has an impact on its own display computer or not and acts accordingly.

One type of user message is a navigation action. In a navigation action the user can express the intent to shift the overall view either laterally vertically or into out of the plane of the screen or any combination of these three dimensions . Upon receiving this message the main display computer can adjust its perspective or viewpoint and all the display computers follow to adjust their viewpoint accordingly.

When the user action impacts one or more of the data lenses the main display computer can create a data message. This data message is deposited in the data pool s . Each of the existing data daemons can listen to the data pool s . Each data lens can be connected to a particular data daemon and the message can include a tag that identifies the corresponding data lens . Upon identifying a message associated with its corresponding data lens the data daemon can interpret the message and takes the appropriate action. If the action being requested involves obtaining new data from its associate data source the data daemon can form the correct query to extract the appropriate data. An individual data daemon can be designed and built explicitly to retrieve data from a particular data source . When the new data is returned the data daemon can take action on that data depending on its programmed function. In particular the data daemon can take the data and visualize it i.e. render a visual representation of the data etc. . Other data daemons can perform analysis on the data before visualizing e.g. changing the way that elements appear based on their values such changes can include color animation alternate icons etc. . Yet other data daemons can route the data to some other analysis process. At the end of its processing the data daemon can deposit its results visualization pixels or other data as a reply message into the data pool s . Results can be visual textures that are displayed directly in a data lens. In some cases the results from the data daemon can be a representation of a topology such as of a network with nodes and edges connections between nodes . The display computers may in this instance perform the final rendering of the network on the screen. The reply message can be tagged as a response to the associated data message from the display computers .

The display computers can listen to the data pool s . When they receive a reply to a data message from the data daemon the display computers can interpret that message and update the corresponding data lens or lenses accordingly. If the message contains pixels the display computers can display all or a portion of those pixels in the correct location within the corresponding data lens . When the display updates the loop can be closed back to the user who initiated the action.

The state of the system including the viewpoint being displayed with respect to the substrate and data lenses as well as the position and configuration of any data lenses can in some variations be bundled up in a compact form and saved off. This bundle can be restored at a later time at which point the viewpoint and the arrangement of the data lenses can return to the previous state. In addition a bundle can be sent to another person or system to be similarly displayed. Such an arrangement is advantageous in that it allows for optimization of collaboration across time and space. This optimization is enabled as the visualizations can relate to both real time and historical data and input devices can be utilized across multiple locations. For example the collaborations can be among display computers and input devices at the same time at the same place at the same time at different locations at different times at the same place and at different times at different places.

One or more aspects or features of the subject matter described herein may be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device e.g. mouse touch screen etc. and at least one output device.

These computer programs which can also be referred to as programs software software applications applications components or code include machine instructions for a programmable processor and can be implemented in a high level procedural language an object oriented programming language a functional programming language a logical programming language and or in assembly machine language. As used herein the term machine readable medium sometimes referred to as a computer program product refers to physically embodied apparatus and or device such as for example magnetic discs optical disks memory and Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable data processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable data processor. The machine readable medium can store such machine instructions non transitorily such as for example as would a non transient solid state memory or a magnetic hard drive or any equivalent storage medium. The machine readable medium can alternatively or additionally store such machine instructions in a transient manner such as for example as would a processor cache or other random access memory associated with one or more physical processor cores.

To provide for interaction with a user the subject matter described herein can be implemented on a computer having a display device such as for example a cathode ray tube CRT or a liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device such as for example a mouse or a trackball by which the user may provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well. For example feedback provided to the user can be any form of sensory feedback such as for example visual feedback auditory feedback or tactile feedback and input from the user may be received in any form including but not limited to acoustic speech or tactile input. Other possible input devices include but are not limited to touch screens or other touch sensitive devices such as single or multi point resistive or capacitive trackpads voice recognition hardware and software optical scanners optical pointers digital image capture devices and associated interpretation software and the like.

The subject matter described herein may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the subject matter described herein or any combination of such back end middleware or front end components. The components of the system may be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

The subject matter described herein can be embodied in systems apparatus methods and or articles depending on the desired configuration. The implementations set forth in the foregoing description do not represent all implementations consistent with the subject matter described herein. Instead they are merely some examples consistent with aspects related to the described subject matter. Although a few variations have been described in detail above other modifications or additions are possible. In particular further features and or variations can be provided in addition to those set forth herein. For example the implementations described above can be directed to various combinations and subcombinations of the disclosed features and or combinations and subcombinations of several further features disclosed above. In addition the logic flow s depicted in the accompanying figures and or described herein do not necessarily require the particular order shown or sequential order to achieve desirable results. Other implementations may be within the scope of the following claims.

