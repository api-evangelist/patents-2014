---

title: Method and apparatus for universal control of networked devices
abstract: A method, non-transitory computer readable medium, and apparatus for communicating a command to a networked device that requires a driver via an endpoint device that does not have the driver installed are disclosed. For example, the method establishes a first connection with virtual device server, establishes a second connection with a universal device driver API server, transmits a command to the universal device driver API server, receives a translated command compatible with the driver of the networked device from the virtual device server, wherein the translated command is received by the virtual device server from the driver that is called by the universal device driver API server, establishes a third connection with the networked device using identical connection information associated with the second connection with the virtual device server and transmits the translated command to the networked device over the third connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274777&OS=09274777&RS=09274777
owner: Xerox Corporation
number: 09274777
owner_city: Norwalk
owner_country: US
publication_date: 20140507
---
The present disclosure relates generally to control of networked devices and more particularly to a method and apparatus for universal control of networked devices without requiring an on premise server.

There is no widely standardized method for communicating with networked devices. Different manufacturers support different standards often specific to only the devices of the manufacturer. Operating systems such as Windows for example allow the installation of vendor supplied drivers which translate commands executed against the Windows application programming interface API into vendor specific commands. The commands are sent over the wire to the networked device in vendor specific ways.

However other operating systems may not have such drivers. For example operating systems of mobile devices cannot typically use such drivers natively. While some vendors may offer drivers for these platforms there is a need for programs running on operating systems of mobile devices to be able to connect to and control these networked devices which is difficult with the current state of technology.

One could create a separate driver for every possible operating system whether desktop or mobile. However creating drivers is a labor intensive and error prone process.

According to aspects illustrated herein there are provided a method a non transitory computer readable medium and an apparatus for communicating a command to a networked device that requires a driver via an endpoint device that does not have the driver installed. One disclosed feature of the embodiments is a method that establishes a first connection with a virtual device server establishes a second connection with a universal device driver application programming interface API server transmits a command to the universal device driver API server receives a translated command compatible with the driver of the networked device from the virtual device server wherein the translated command is received by the virtual device server from the driver that is called by the universal device driver API server establishes a third connection with the networked device using identical connection information associated with the first connection with the virtual device server and transmits the translated command to the networked device over the third connection.

Another disclosed feature of the embodiments is a non transitory computer readable medium having stored thereon a plurality of instructions the plurality of instructions including instructions which when executed by a processor cause the processor to perform an operation that establishes a first connection with a virtual device server establishes a second connection with a universal device driver application programming interface API server transmits a command to the universal device driver API server receives a translated command compatible with the driver of the networked device from the virtual device server wherein the translated command is received by the virtual device server from the driver that is called by the universal device driver API server establishes a third connection with the networked device using identical connection information associated with the first connection with the virtual device server and transmits the translated command to the networked device over the third connection.

Another disclosed feature of the embodiments is an apparatus comprising a processor and a computer readable medium storing a plurality of instructions which when executed by the processor cause the processor to perform an operation that establishes a first connection with a virtual device server establishes a second connection with a universal device driver application programming interface API server transmits a command to the universal device driver API server receives a translated command compatible with the driver of the networked device from the virtual device server wherein the translated command is received by the virtual device server from the driver that is called by the universal device driver API server establishes a third connection with the networked device using identical connection information associated with the first connection with the virtual device server and transmits the translated command to the networked device over the third connection.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures.

The present disclosure broadly discloses a method and non transitory computer readable medium for communicating a command to a networked device that requires a driver via an endpoint device that does not have the driver installed. As discussed above there is no widely standardized method for communicating with networked devices. Different manufacturers support different standards often specific to only the devices of the manufacturer.

However some endpoint devices use operating systems that may not have the drivers that are required or needed to communicate commands to the networked devices that require vendor specific drivers. For example operating systems of mobile devices cannot typically use such drivers natively. While some vendors may offer drivers for these platforms there is a need for programs running on operating systems of endpoint devices e.g. mobile endpoint devices to be able to connect to and control these networked devices which is difficult with the current state of technology.

One could create a separate driver for every possible operating system whether desktop or mobile. However creating drivers is a labor intensive and error prone process.

One embodiment of the present disclosure addresses this problem by providing a system and architecture that provides universal control of networked devices that require vendor specific drivers without requiring an on premise server. For example mobile endpoint devices that use mobile operating systems may communicate and send commands to networked devices that require vendor specific drivers e.g. scanners printers multi function devices MFDs and the like . In one embodiment the mobile endpoint devices may issue commands without any modification or alteration of the networked device s hardware or software even though the mobile endpoint device does not have the vendor specific driver installed.

It should be noted that the enterprise network and the remote network are simplified for ease of explanation. The enterprise network and the remote network may include additional access networks or network elements e.g. firewalls border elements gateways application servers and the like that are not shown.

In one embodiment the enterprise network includes a networked device and an endpoint device . In one embodiment the networked device may be any type of device that is connected to the enterprise network over a wireless or wired connection. In one embodiment the networked device may be a scanner a printer a multi function device MFD a copy machine and the like.

In one embodiment the endpoint device may be any type of endpoint device that is attempting to issue a command to the networked device to perform an action e.g. scan copy print and the like . The endpoint device may include for example a mobile endpoint device e.g. a smartphone a cellular telephone a laptop computer tablet computer and the like a desktop computer and the like.

In one embodiment the networked device may require a vendor specific driver for a particular operating system e.g. Windows . However the endpoint device may be operating on a different operating system that cannot natively use vendor specific drivers required by the networked device . In other words a driver required for the networked device may not be available for the operating system of the endpoint device . As a result the endpoint device would be incapable of communicating with or sending commands to the networked device with currently available technologies.

However one embodiment of the present disclosure provides a system that includes servers in the remote network that translate the desired command into a translated command that is compatible with the vendor specific driver of the networked device . In one embodiment the remote network may include a universal device driver application programming interface API server and a virtual device server .

In one embodiment the universal device driver API server may store a plurality of different drivers for different devices. The different drivers may also include different versions of the drivers depending on the operating system for the devices. The universal device driver API server may communicate with the endpoint device using a universal command language e.g. Xerox s extensible interface platform EIP . The universal device driver API server may communicate with the endpoint device via a universal API installed and operating on the endpoint device .

In one embodiment the universal device driver API server may also be in communication with a repository . The repository may store responses or data received from the networked device . The endpoint device may then pull the data from the repository via the universal device driver API server as discussed below.

In one embodiment the virtual device server may act as a virtual device representing the networked device . As a result when a driver on the universal device driver API server issues a command the virtual device server appears to the driver as the networked device . For example if the networked device is a networked scanner the virtual device server may be a virtual scanner server that appears to the driver as the networked scanner. In addition the driver does not know or is not aware that it is not actually communicating with the networked device .

Although the universal device driver API server the repository and the virtual device server are illustrated in as being separate devices it should be noted that the universal device driver API server the repository and the virtual device server may be deployed as a single server in the remote network . It should be also noted that any number of universal device driver API servers repositories and virtual device servers may be deployed in one or more different remote networks .

In one embodiment the endpoint device may initiate a connection with the networked device . For example the endpoint device may scan a near field communication NFC tag using a tap to print or a tap to scan feature of the networked device . In another embodiment the endpoint device may simply attempt to connect to the networked device over the enterprise network using a wired or a wireless connection.

When the endpoint device connects to the networked device the endpoint device may display a universal API to the user. The universal API may be a graphical user interface that includes commands that are associated with the networked device . For example if the networked device is a MFD the universal API may include commands such as scan copy print save and the like.

As noted above the vendor specific drivers required by the networked device may not be installed on the endpoint device . As a result the endpoint device may not send or transmit the desired commands directly to the networked device . However the system allows the endpoint device to send the desired command to the universal device driver API server over a virtual IP address and receive a translated command that is compatible with the driver of the networked device from the virtual device server .

For example after the endpoint device connects with networked device the endpoint device may initiate a connection to the virtual device server . In one embodiment the endpoint device may communicate with the virtual device server in any communication protocol that does not alter or change the translated command that is eventually received from the virtual device server as discussed below. Examples of communication protocols that may be used include an extensible messaging and presence protocol XMPP transported using secure hypertext transfer protocol HTTPS and the like.

In one embodiment the virtual device server may be capable of binding to a plurality of different virtual IP addresses reserved for the virtual device server . The endpoint device may instruct the virtual device server to bind to an available virtual IP address. The endpoint device may receive the virtual IP address and map the virtual IP address to the actual IP address of the networked device .

Concurrently the endpoint device may initiate a connection with the universal device driver API server . In one embodiment the universal device driver API server and the endpoint device may communicate via the universal API operating on the endpoint device using a universal command language. One example of the universal command language includes the EIP protocol of Xerox Corporation.

In one embodiment the endpoint device may send the desired command and the virtual IP address bound to the virtual device server to the universal device driver API server . Based on the command and the operating system associated with the command the universal device API server may call the corresponding driver . The universal device driver API server may then translate the command received from the endpoint device in the universal command language into a translated command compatible with the driver .

In one embodiment the driver may then issue the translated command to the virtual device server over the virtual IP address. The virtual device server may then forward the translated command to the endpoint device . After the endpoint device receives the translated command from the virtual device server the endpoint device may transmit the translated command to the networked device such that the networked device can execute the desired command.

In one embodiment the networked device may operate using a dynamic port assignment for a second return connection to the networked device . In one embodiment the endpoint device may be programmed to review the translated command from the virtual device server to obtain the dynamic port assignment. The endpoint device may then connect to the appropriate port to establish a return connection and transmit the translated command to the networked device .

In one embodiment the endpoint device may receive a response from the networked device . For example the response may be scan data if the networked device is a scanner. However since the endpoint device does not have the vendor specific drivers the endpoint device may not be able to understand the response.

The endpoint device may send the response to the virtual device server . The virtual device server may then send the response to driver called by the universal device driver API server . The universal device driver API server may then translate the response into the universal command language such that the endpoint device may be able to understand read or display the response.

In one embodiment the response e.g. scan data may be stored in the repository . The endpoint device may then pull the translated response from the repository via the universal device driver API server . In another embodiment the translated response may simply be passed through directly to the endpoint device via the universal device driver API server without storing the response in the repository .

Thus the system provides universal control of networked devices with any endpoint device. Notably the endpoint device does not need to install any vendor specific drivers for any specific operating system. In addition the networked device is not modified or altered in any way. In other words the software or the hardware of the networked device does not need to be reconfigured to be compatible with the endpoint device that does not have the vendor specific drivers installed.

Rather the system allows the endpoint device to send commands to the universal device driver API server to have the commands translated and passed back to the endpoint device from the virtual device server so that the translated commands can be transmitted to the networked device . As a result the networked device behaves as if the networked device were communicating with an endpoint device that has installed the proper driver or drivers.

In addition the universal device driver API server and the virtual device server are located in the cloud or a remote network that can be accessed via the Internet. As a result the enterprise does not need to expend capital or resources to deploy or maintain an on premise server.

At step the method begins. At step the method initiates a command for a networked device. For example a user may want to use his or her mobile endpoint device to initiate a scan of a document on a networked scanner. The mobile endpoint device and the networked scanner may be located at an enterprise network. The mobile endpoint device may initiate a connection to the networked device by scanning an NFC tag using a tap to scan feature of the networked scanner. In another embodiment the endpoint device may simply attempt to connect to the networked device scanner over an enterprise network using a wired or a wireless connection.

The mobile endpoint device may then display a universal API to the user that allows the user to initiate a command for the networked device. The mobile endpoint device may receive the command via the universal API.

At step the method establishes a connection to a virtual device server. Using the above example the mobile endpoint device may communicate with the virtual device server to initiate the first connection or the virtual scanner server if the networked device is a networked scanner using any communication protocol that does not alter or change the translated commands that are eventually received from the virtual device server. Examples of communication protocols that may be used include an extensible messaging and presence protocol XMPP transported over secure hypertext transfer protocol HTTPS and the like.

In one embodiment the virtual device server may be located in a remote network that is located in the cloud remote from the enterprise network. For example the remote network may be accessed over the Internet.

At step the method instructs the virtual device server to bind to a virtual IP address. For example the virtual device server may be capable of binding to a plurality of different virtual IP addresses reserved for the virtual device server. The endpoint device may instruct the virtual device server to bind to an available virtual IP address. The endpoint device may receive the virtual IP address and map the virtual IP address to the actual IP address of the networked device.

At step the method establishes a connection to a universal device driver API server. For example the endpoint device may concurrently initiate a second connection with the universal device driver API server. In one embodiment the universal device driver API server may also be located in the remote network similar to the virtual device server.

In one embodiment the universal device driver API server and the endpoint device may communicate via the universal API operating on the endpoint device using a universal command language. One example of the universal command language includes the EIP protocol of Xerox Corporation.

At step the method transmits the command to the universal device driver API server. Notably the command received on the mobile endpoint device does not initially go to the networked device that the mobile endpoint device connected to in step . Referring back to the above example the mobile endpoint device may send the desired command or a scan command for the networked scanner to the universal device driver API server using the universal command language. In one embodiment the endpoint device may also send the virtual IP address bound to the virtual device server with the command.

At step the method receives a translated command compatible with the driver of the networked device from the virtual device server. In one embodiment based on the command and the operating system associated with the command the universal device driver API server may call the corresponding driver a plurality of different drivers that are stored at the universal device driver API. The universal device driver API server may then translate the command received from the endpoint device in the universal command language into a translated command compatible with the driver.

In one embodiment the driver may then issue the translated command to the virtual device server over the virtual IP address. The virtual device server may then forward the translated command to the endpoint device.

At step the method transmits the translated command to the networked device. For example the mobile endpoint device may obtain the IP address of the networked device based upon the mapping to the virtual IP address. The mobile endpoint device may then transmit the translated scan command to the networked scanner over the IP address of the networked scanner over the enterprise network .

At optional step the method receives a response. For example the networked scanner may send the response e.g. scan data or data of a scanned document back to the mobile endpoint device. However since the mobile endpoint device does not have the vendor specific driver installed the mobile endpoint device may not understand the response from the networked scanner.

At optional step the method sends the response to the virtual device server. The mobile endpoint device may send the response or the scan data from the networked scanner to the virtual device server. The virtual device server may then forward the response or the scan data to the universal device driver API server. The universal device driver API server may then translate the response or the scan data into the universal command language such that the mobile endpoint device can understand read or display the translated response or the translated scan data. In one embodiment the response or the scan data may be stored in a repository.

At optional step the method receives a translated response from the universal device driver API server. For example the mobile endpoint device may pull the translated response from the repository via the universal device driver API server or the response may be passed to the endpoint device directly via the universal device driver API server.

At step the method determines if any additional commands are received. If additional commands are received the method may return to step to transmit the command to the universal device driver API server. If no additional commands are received the method may proceed to step . At step the method ends.

It should be noted that although not explicitly specified one or more steps functions or operations of the method described above may include a storing displaying and or outputting step as required for a particular application. In other words any data records fields and or intermediate results discussed in the methods can be stored displayed and or outputted to another device as required for a particular application. Furthermore steps functions or operations in that recite a determining operation or involve a decision do not necessarily require that both branches of the determining operation be practiced. In other words one of the branches of the determining operation can be deemed as an optional step. In addition it should be noted that in some embodiments may be performed using any combination of the steps e.g. using fewer than all of the steps illustrated in or in an order that varies from the order of the steps illustrated in .

It should be noted that the present disclosure can be implemented in software and or in a combination of software and hardware e.g. using application specific integrated circuits ASIC a programmable logic array PLA including a field programmable gate array FPGA or a state machine deployed on a hardware device a general purpose computer or any other hardware equivalents e.g. computer readable instructions pertaining to the method s discussed above can be used to configure a hardware processor to perform the steps functions and or operations of the above disclosed methods. In one embodiment instructions and data for the present module or process for communicating a command to a networked device that requires a driver via an endpoint device that does not have the driver installed e.g. a software program comprising computer executable instructions can be loaded into memory and executed by hardware processor element to implement the steps functions or operations as discussed above in connection with the exemplary method . Furthermore when a hardware processor executes instructions to perform operations this could include the hardware processor performing the operations directly and or facilitating directing or cooperating with another hardware device or component e.g. a co processor and the like to perform the operations.

The processor executing the computer readable or software instructions relating to the above described method s can be perceived as a programmed processor or a specialized processor. As such the present module for communicating a command to a networked device that requires a driver via an endpoint device that does not have the driver installed including associated data structures of the present disclosure can be stored on a tangible or physical broadly non transitory computer readable storage device or medium e.g. volatile memory non volatile memory ROM memory RAM memory magnetic or optical drive device or diskette and the like. More specifically the computer readable storage device may comprise any physical devices that provide the ability to store information such as data and or instructions to be accessed by a processor or a computing device such as a computer or an application server.

It will be appreciated that variants of the above disclosed and other features and functions or alternatives thereof may be combined into many other different systems or applications. Various presently unforeseen or unanticipated alternatives modifications variations or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims.

