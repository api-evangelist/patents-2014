---

title: Managing deployment of application pattern based applications on runtime platforms
abstract: A method for managing application patterns. Service application programming interfaces required for use by an application on a runtime platform are provisioned. The application is based on an application pattern. Deployment information for deploying the application on the runtime platform is generated. The deployment information includes values for properties of the application pattern for configuring the application on the runtime platform. The deployment information is used to deploy the application on the runtime platform. In response, the runtime platform runs the application with the application using the service application programming interfaces previously provisioned for use by the application on the runtime platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563419&OS=09563419&RS=09563419
owner: International Business Machines Corporation
number: 09563419
owner_city: Armonk
owner_country: US
publication_date: 20140220
---
The disclosure relates generally to an improved data processing system and in particular to a data processing system for managing data processing systems. Still more particularly the present disclosure relates to a method and apparatus for managing deployment of an application pattern based application on a runtime platform.

Application patterns are used to construct applications. These application patterns for example may specify steps performed by the applications. The steps performed by the applications include steps that use application programming interfaces. The application programming interfaces specified for use by the applications may be provided as a service by any number of different providers.

Some application programming interfaces require authorized access before an application can use the application programming interfaces. For example some services require an administrator perform steps to configure the application for using the services.

These applications may be deployed onto runtime platforms for running on the runtime platforms. Deployment of an application on a runtime platform may include installing and configuring the application for running the application on the runtime platform. The application programming interfaces used by the running application may be local or remote to the runtime platform where the application is running. One type of runtime platform is a cloud computing based runtime platform.

Cloud computing involves the delivery of computing resources of a data processing environment. Through the use of services hosted in the data processing environment cloud computing provides applications access to the computing resources of the data processing environment. Computing resources of a cloud computing provider may include hardware resources software information and other services. Computing resources of a cloud computing provider may be located in a single location or widely distributed. The data processing environments of a cloud computing provider are typically located at server computers in a location that is remote to the users. The computing resources in the data processing environments of a cloud computing provider may be provided by the user by the cloud computing provider and by third party providers of computing resources. The users of a particular data processing environment of a cloud computing provider may be consumers and corporate users. In some situations the users of a data processing environment may also be corporate users from two or more corporations who are sharing use of resources.

Any changes associated with services in use by an application on a runtime platform may require an administrator perform additional steps to re configure the application. For example a service may move location become unavailable or require new or different authorization.

Therefore it would be desirable to have a method apparatus and computer program product that takes into account at least some of the issues discussed above.

In one illustrative embodiment a method apparatus and computer program product for managing application patterns is disclosed. An apparatus provisions service application programming interfaces required for use by an application on a runtime platform. The application is based on an application pattern. The apparatus also generates deployment information for deploying the application on the runtime platform. The deployment information includes values for properties of the application pattern for configuring the application on the runtime platform. The apparatus further uses the deployment information to deploy the application on the runtime platform. In response the runtime platform runs the application with the application using the service application programming interfaces previously provisioned for use by the application on the runtime platform.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system . Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on remote computers or entirely on the remote computers. In the latter scenario the remote computers may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer. Further in this latter scenario the remote computers may include hardware and software components in an application pattern management environment. For example the components may be network appliances and other types of data processing systems that manage provisioning and deployment of applications in the application pattern management environment.

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather the illustrative embodiments are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

For convenience the Detailed Description includes the following definitions which have been derived from the Draft NIST Working Definition of Cloud Computing by Peter Mell and Tim Grance dated Oct. 7 2009 which is cited in an IDS filed herewith and a copy of which is attached thereto.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported which provides transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based e mail . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to an illustration of a cloud computing node is shown in accordance with an illustrative embodiment. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein.

Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth hereinabove.

In cloud computing node there is computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being run by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in cloud computing node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units memory and bus that couples various system components including memory to processor unit .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

Memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating systems one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Referring now to an illustration of a cloud computing environment is depicted in accordance with an illustrative embodiment. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example mobile computing device or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Cloud computing nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that cloud computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to an illustration of functional abstraction layers provided by cloud computing environment is shown in accordance with an illustrative embodiment. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices and networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide. 

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and pricing provides cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provides pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and application . In the illustrated example application is based on an application pattern. As depicted application is deployed into workloads layer in the illustrated example.

The illustrative embodiments recognize and take into account a number of different considerations. For example the illustrative embodiments recognize and take into account that existing data processing systems do not provide an ability to manage provisioning and deployment of applications based on application patterns. As an example existing systems do not include an ability to use application patterns of applications to manage keys used by the applications to access application programming interfaces when the application is deployed on a runtime platform.

Thus the illustrative embodiments provide a method apparatus and computer program product for managing application patterns. For example a number of components of an application pattern management environment may manage provisioning and deployment of applications based on the application patterns. For example an application pattern manager may use a provisioning system to provision service application programming interfaces required for use by an application on a runtime platform wherein the application is based on an application pattern. The application pattern manager may also generate deployment information for deploying the application on the runtime platform. The deployment information may include values for properties of the application pattern for configuring the application on the runtime platform. The application pattern manager may further use a deployment system to process the deployment information by deploying the application on the runtime platform. In this example responsive to the deploying of the application the runtime platform runs the application with the application using the service application programming interfaces previously provisioned for use by the application on the runtime platform.

As another example a number of components of an application pattern management environment may process application patterns to provision use of application programming interfaces by applications that are based on the application patterns. For example an application pattern manager may use the application pattern of an application to manage a key that is required for use by the application to access an application programming interface when the application is deployed on a runtime platform. As used herein a number items of is one or more items.

With reference now to a block diagram of a data flow of a process for managing application patterns in an application pattern management environment is depicted in accordance with an illustrative embodiment. Application pattern management environment is an illustrative example of an environment for processing application pattern . In these illustrative examples application patterns such as application pattern are templates of applications that comprise deployable assets . For example deployable assets may include at least one of components data and other suitable assets. As depicted application pattern may be used to generate an application such as application . In these illustrative examples application is an instance of application pattern .

As used herein the phrase at least one of when used with a list of items means different combinations of one or more of the listed items may be used and only one of each item in the list may be needed. For example at least one of item A item B or item C may include without limitation item A item A and item B or item B. This example also may include item A item B and item C or item B and item C. Of course any combinations of these items may be present. In other examples at least one of may be for example without limitation two of item A one of item B and ten of item C four of item B and seven of item C and other suitable combinations. The item may be a particular object thing or a category. In other words at least one of means any combination of items and number of items may be used from the list but not all of the items in the list are required.

As depicted in this example application may run on runtime platform . In these illustrative examples runtime platform is a data processing system that hosts applications. For example runtime platform may be a cloud based runtime platform such as cloud computing environment or other suitable types of runtime platforms in application pattern management environment .

In this illustrative example application pattern includes properties . In the illustrative example properties are configuration options for application pattern . For example properties may include at least one of application programming interface dependency information for components rules for processing data by components rules for deploying instances of application pattern on a runtime platform public keys for provisioning application programming interfaces for use by components or other suitable properties of application pattern . For example dependency information for application programming interfaces may include at least one of application programming interface type information authentication method and type information quality of service requirements or other suitable types of dependencies for application pattern .

As depicted application pattern also includes components . In these illustrative examples components are reusable and deployable. In these illustrative examples components may be at least one of a Java component a web application script language instructions a mobile application component another application pattern or other suitable types of components.

In the illustrative example data in application pattern is information associated with application pattern . For example data for application pattern may include at least one of documentation for application pattern domain specific information used by components message files used by components to present information to users application programming interface specific data for use by components when interacting with an application programming interface or other suitable type of information for application patterns.

As depicted references in application pattern are links to application programming interfaces. In this illustrative example application includes reference . In the illustrated example reference is an example of references in application pattern . In this illustrative example reference points to application programming interfaces provided by service application .

As depicted service application is an example of one application in applications in data processing system in a number of data processing systems . For example data processing system may be an example of cloud computing node and other suitable types of data processing systems.

Application pattern manager in application pattern management environment is at least one of hardware software and a combination of hardware and software of a data processing system. Application pattern manager may be used in a process for managing application patterns. In the illustrative example application pattern manager processes application pattern . As depicted application pattern manager may retrieve application pattern from storage such as application pattern storage . Application pattern storage may be at least one of an in memory buffer a database or any other suitable storage for application pattern storage in application pattern management environment .

As depicted application pattern manager may be used to set references for application programming interfaces for use by application . In the illustrated example application pattern manager selects application programming interfaces to link to from reference based on dependency information for components in properties . In this illustrated example responsive to selection of application programming interfaces for reference for use by application application manager sets reference to point to application programming interfaces . As depicted application pattern manager may select application programming interfaces from storage such as application programming interfaces directory . Application programming interfaces directory may be at least one of an in memory buffer a database or any other suitable storage for application programming interfaces in application pattern management environment .

In these illustrative examples application pattern manager uses provisioning system to provision application programming interfaces for use by application . Provisioning system is at least one of hardware software and a combination of hardware and software of a data processing system. In the illustrated example provisioning system provisions application programming interfaces for use by application by generating key that authorizes the use. In this illustrative example provisioning system uses key in properties to provision application programming interfaces for use by application . In the illustrative example provisioning system generates key by at least one of making a copy of key using key with a third party key generation system generating key as a private key for key when key is a public key and other suitable ways to generate keys in application pattern management environment .

In the illustrative example key is a copy of key stored in key storage by provisioning system for later use. Key storage may be at least one of an in memory buffer a database or any other suitable storage for keys in application pattern management environment . For example key storage may be used to store one or both of key and key for use in authorizing use of application programming interfaces by application .

As depicted application pattern manager generates deployment information . In the illustrative example deployment information is used to install and configure application on runtime platform . In this illustrated example deployment information includes values for properties of application pattern . As depicted values for properties are used by deployment system to install and configure application on runtime platform . Values used to install and configure applications on runtime platforms may be any suitable values for configurable properties of the applications. For example values may include key . As another example values may also include values set by a user for user configurable properties of properties . As depicted user on client may provide user input to set values of properties .

In the illustrated example deployment information also includes assets . In this illustrated example assets include one or more portions of deployable assets . For example assets may include a number of selected components in components selected for deployment. As another example assets may also include portions of data selected for deployment.

As depicted application pattern manager uses deployment system to install and configure application on runtime platform . Deployment system is at least one of hardware software and a combination of hardware and software of a data processing system. As depicted deployment system receives deployment information from application pattern manager . In this illustrated example deployment system communicates with runtime platform to install and configure application based on deployment information .

In the illustrated example runtime platform runs application using values and assets . In the illustrative example runtime platform runs application after receiving a request for service for application from user of client . As depicted application calls application programming interfaces using reference . In this illustrative example key is used in an authorization process to authorize use of application programming interfaces by application .

The illustration of application pattern management environment in is not meant to imply physical or architectural limitations to the manner in which different illustrative embodiments may be implemented. Other components in addition to and or in place of the ones illustrated may be used. Some components may be unnecessary. Also the blocks are presented to illustrate some functional components. One or more of these blocks may be combined and or divided into different blocks when implemented in an illustrative embodiment.

In some illustrative examples additional applications in addition to application may be present within application pattern management environment . For example networking applications may be run within application pattern management environment . In this example the networking applications may include web servers and web browsers for providing a user interface for application . In this example client may interact with the user interface for application through a web browser that is communicating with a web server. Further in this example the same or other web servers and web browsers provide a user interface for application pattern manager . For example client may interact with the user interface for application pattern manager through another web browser that is communicating with another web server.

Also although components of application pattern management environment are shown as separate blocks in application pattern management environment all or a portion of these may also be implemented in data processing systems or other suitable components in application pattern management environment . In these illustrative examples application pattern management environment may be implemented by any combination of hardware and software products and may also be implemented in one or more computer systems or a cluster of computer systems.

With reference next to an illustration of a flowchart of a process for managing application patterns is depicted in accordance with an illustrative embodiment. The steps illustrated in are examples of steps that may be used to process application pattern in . These steps may be implemented in data processing systems in runtime platform in and in other data processing systems in . For example the different steps may be performed by application pattern manager in provisioning system in and deployment system in .

The process begins by provisioning service application programming interfaces required for use by an application on a runtime platform wherein the application is based on an application pattern step . The application pattern in step is an example of application pattern in . The application is an example of application in . The runtime platform is an example of runtime platform in .

The process also generates deployment information for deploying the application on the runtime platform wherein the deployment information includes values for properties of the application pattern for configuring the application on the runtime platform step . The deployment information in step is an example of deployment information in .

As depicted the process may use the deployment information to deploy the application on the runtime platform step . The deployment information in step is an example of deployment information in .

As depicted the steps of the process also include running the application on the runtime platform step . As also depicted the steps of the process then include the application using the service application programming interfaces previously provisioned for used by the application on the runtime platform step with the process terminating thereafter. The processing performed in steps and may be performed by data processing systems runtime platform and other data processing systems in application pattern management environment .

The process in may be repeated any number of times to process additional applications based on application patterns. Additionally the process may be repeated responsive to determination of a change to one or more of the application pattern and values . For example the steps may be repeated responsive to the application manager determining that a change occurred to at least one of a value in values submitted via user input an expiration of a key in values an expiration of an asset in assets or other suitable type of changes.

With reference to an illustration of a flowchart of a process for provisioning use of application programming interfaces for an application based on an application pattern is depicted in accordance with an illustrative embodiment. The steps illustrated in are examples of steps that may be used to process application pattern in . These steps may be implemented in data processing systems in runtime platform in and in other data processing systems in . For example the different steps may be performed by application pattern manager in provisioning system in and deployment system in .

The process begins by identifying values preselected by one or more users for properties of an application pattern for configuring an application on a runtime platform wherein the application is based on the application pattern step . The application pattern in step is an example of application pattern in . The application is an example of application in . The runtime platform is an example of runtime platform in . The values for the properties in step are an example of values in for properties in .

The process also searches the application pattern for service application programming interfaces required for use by the application on the runtime platform step . The service application programming interfaces in step is an example of application programming interfaces in .

As depicted the process may include a step for provisioning the service application programming interfaces required for use by the application on the runtime platform by generating a key that authorizes the use step . The key in step is an example of key in .

The process generates deployment information for deploying the application on the runtime platform the deployment information including the values selected for the properties of the application pattern step . The deployment information in step is an example of deployment information in . The process uses the deployment information to deploy the application on the runtime platform step .

As depicted the steps of the process also include running the application on the runtime platform step . The steps of the process then include the application using the key to use the service application programming interfaces previously provisioned for use by the application on the runtime platform step with the process terminating thereafter. The processing performed in steps and may be performed by data processing systems runtime platform and other data processing systems in application pattern management environment .

The process in may be repeated any number of times to process additional applications based on application patterns. Additionally other steps may be included and some steps may be removed in this process for provisioning use of application programming interfaces for the application based on the application pattern. For example the search in step for service application programming interfaces required for use by the application may include receiving user input. In this example the user input may include at least one of selecting providing validating or authorizing which application programming interfaces will be used by the application on the runtime platform.

Turning next to a block diagram of application programming interfaces for an application pattern is depicted in accordance with an illustrative embodiment. In these illustrative examples application pattern in is an example of application pattern in . As depicted application pattern is an example of a location based application pattern. Deployable assets in application pattern is an example of deployable assets in application pattern in . Service dependencies in properties is an example of dependency information for components in properties in . Application programming interfaces directory is an example of applications programming interfaces directory in . Customer service retail services and voice services are examples of application programming interfaces in .

In this illustrative example responsive to a process for selecting application programming interfaces for service dependencies get user location get product recommendation get product availability and send message to user in service dependencies are set respectively to point to get user location product recommendations product availability and send message in application programming interfaces directory .

With reference now to an example of deployment information for an application is depicted in accordance with an illustrative embodiment. In these illustrative examples deployment information in is an example of one implementation of deployment information in .

As depicted deployment information is generated in a process for deploying an application on a runtime platform. In this illustrative example deployment information includes values selected for properties of an application pattern.

Turning now to an illustration of a data processing system is depicted in accordance with an illustrative embodiment. Data processing system is an example of a data processing system that may be used to implement managing application patterns in an application pattern management environment. Data processing system is also an example of a data processing system that may be used to implement computer system server and cloud computing nodes such as cloud computing node in . Data processing system also may be used to implement mobile computing device or cellular telephone MA desktop computer MB laptop computer MC automobile computer system MN and other local computing devices used by cloud consumers in . Data processing system may also be used to implement the hardware and software components of hardware and software layer in . More particularly data processing system may be used to implement client client data processing systems runtime platform application pattern manager provisioning system deployment system application pattern storage application programming interfaces directory and key storage in

In this illustrative example data processing system includes communications framework which provides communications between processor unit memory persistent storage communications unit input output I O unit and display . In these examples communications frame work may be a bus system.

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a number of processors a multiprocessor core or some other type of processor depending on the particular implementation. A number as used herein with reference to an item means one or more items. Further processor unit may be implemented using a number of heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multiprocessor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices . A storage device is any piece of hardware that is capable of storing information such as for example without limitation data program code in functional form and or other suitable information either on a temporary basis and or a permanent basis. Storage devices may also be referred to as computer readable storage devices in these examples. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation.

For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard a mouse and or some other suitable input device. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system applications and or programs may be located in storage devices which are in communication with processor unit through communications framework . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory .

These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or computer readable storage media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be computer readable storage media or computer readable signal media . Computer readable storage media may include for example an optical or magnetic disk that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . Computer readable storage media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . In some instances computer readable storage media may not be removable from data processing system . In these examples computer readable storage media is a physical or tangible storage device used to store program code rather than a medium that propagates or transmits program code . Computer readable storage media is also referred to as a computer readable tangible storage device or a computer readable physical storage device. In other words computer readable storage media is a media that can be touched by a person.

Alternatively program code may be transferred to data processing system using computer readable signal media . Computer readable signal media may be for example a propagated data signal containing program code . For example computer readable signal media may be an electromagnetic signal an optical signal and or any other suitable type of signal. These signals may be transmitted over communications links such as wireless communications links optical fiber cable coaxial cable a wire and or any other suitable type of communications link. In other words the communications link and or the connection may be physical or wireless in the illustrative examples.

In some illustrative embodiments program code may be downloaded over a network to persistent storage from another device or data processing system through computer readable signal media for use within data processing system . For instance program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of running program code. As one example the data processing system may include organic components integrated with inorganic components and or may be comprised entirely of organic components excluding a human being. For example a storage device may be comprised of an organic semiconductor.

In another illustrative example processor unit may take the form of a hardware unit that has circuits that are manufactured or configured for a particular use. This type of hardware may perform operations without needing program code to be loaded into a memory from a storage device to be configured to perform the operations. For example when processor unit takes the form of a hardware unit processor unit may be a circuit system an application specific integrated circuit ASIC a programmable logic device or some other suitable type of hardware configured to perform a number of operations. With a programmable logic device the device is configured to perform the number of operations. The device may be reconfigured at a later time or may be permanently configured to perform the number of operations. Examples of programmable logic devices include for example a programmable logic array a field programmable logic array a field programmable gate array and other suitable hardware devices. With this type of implementation program code may be omitted because the processes for the different embodiments are implemented in a hardware unit.

In still another illustrative example processor unit may be implemented using a combination of processors found in computers and hardware units. Processor unit may have a number of hardware units and a number of processors that are configured to run program code . With this depicted example some of the processes may be implemented in the number of hardware units while other processes may be implemented in the number of processors.

In another example a bus system may be used to implement communications framework and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system.

Additionally a communications unit may include a number of more devices that transmit data receive data or transmit and receive data. A communications unit may be for example a modem or a network adapter two network adapters or some combination thereof. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications framework .

Thus the illustrative embodiments provide a method apparatus and computer program product for managing application patterns. In some examples a program provisions service application programming interfaces required for use by an application on a runtime platform wherein the application is based on an application pattern. In these examples the program also generates deployment information for deploying the application on the runtime platform. The deployment information in these examples includes values for properties of the application pattern for configuring the application on the runtime platform. Then the program uses the deployment information to deploy the application on the runtime platform. In response the runtime platform runs the application with the application using the service application programming interfaces previously provisioned for use by the application on the runtime platform. For example the program may use an application pattern of an application to manage a key required for use by the application to access an application programming interface when the application is deployed on a runtime platform. In this example the managing of the key may include the program determining that the key is required based on the application pattern. In some examples the program generates the key for use by the application responsive to the determination that the key is required.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The flowcharts and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowcharts or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be performed substantially concurrently or the blocks may sometimes be performed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustrations and combinations of blocks in the block diagrams and or flowchart illustrations can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

