---

title: Mitigating scripted attacks using dynamic polymorphism
abstract: In an embodiment, a data processing system comprises one or more processors; script analysis logic coupled to the one or more processors and configured to obtain a particular electronic document from a server computer; script injection logic coupled to the one or more processors and configured to insert a set of script code into source code of the electronic document to result in producing a modified electronic document prior to providing the modified electronic document to a client computer; wherein the script code is configured to improve resistance of the client computer to attacks by running upon loading in the client computer and to cause transforming, when running in the client computer, one or more values of one or more elements of the source code of the electronic document into obfuscated values of the one or more elements. As a result, the system and method herein improve resistance of the client computer to attacks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09438625&OS=09438625&RS=09438625
owner: Shape Security, Inc.
number: 09438625
owner_city: Mountain View
owner_country: US
publication_date: 20140909
---
The present disclosure generally relates to security techniques applicable to client server systems and relates more specifically to techniques for improving the resistance of client computers to attacks carried in browser executed script code. SUGGESTED GROUP ART UNIT 2447 SUGGESTED CLASSIFICATION 709 217.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Browsers are powerful computer program applications that may request and execute instructions received from a web server to generate complex user interfaces that are presented to a user through one or more devices such as a monitor or speakers. In response to input from a user such as a mouse click indicating that the user selected a link a browser may send a request based on the selected link to the web server. The request may be a request for data and or include data to be processed by the web server.

A malicious user may use software often referred to as a bot which imitates a browser by receiving instructions from a web server and generating requests based on those instructions. For example a bot may receive a web page and generate a request based on a link defined in the web page as if the link was selected by a user. Also for example a bot generate and send a request with data assigned to one or more parameters to simulate a user submitting data to a web server through a browser.

Malicious users may use bots to commit many types of unauthorized acts crimes or computer fraud such as content scraping ratings manipulation fake account creation reserving rival goods attacks ballot stuffing attacks password snooping web site scraping attacks vulnerability assessments and stack fingerprinting attacks. As a specific example a malicious user may cause a bot to traverse through pages of a web site and collect private and or proprietary data such as who is connected with whom on a particular social networking web site.

Web server administrators may wish to prevent malicious users from attacking the site while allowing legitimate users to use the site as intended. However determining which requests are generated by a legitimate user using a web browser and a malicious user using a bot may be difficult.

Many presently implemented websites are vulnerable to attacks that are carried in browser executed script code such as Selenium Sikuli and PhantomJS in part because the HTML source code is readable by any browser user who invokes the VIEW SOURCE or INSPECT ELEMENT commands of the browser. Adversaries can write brief scripts which when executed on an end user computer using the browser can access static HTML elements such as form fields and embedded URLs to launch sophisticated attacks. These malicious scripts can generate protocol compliant network traffic that appears legitimate to most existing security products including firewalls intrusion protection systems and web application firewalls. Differentiating malicious scripts from legitimate human users is difficult.

One approach to computer security introduces static real time polymorphism to web pages by transforming HTML form field attributes such as field names and identifiers to randomized string values. A botwall implementing this technique will change the form field name an ID for each client access to the same web page. This approach is effective to defeat malicious scripts that rely on static form field attributes. However because the form field transformation does not change once the web content is delivered to the browser that is the polymorphism here is static using a sufficient amount of reverse engineering effort malicious users may be able to understand how the polymorphism was implemented and attempt to evade it.

While each of the drawing figures illustrates a particular embodiment for purposes of illustrating a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures. For purposes of illustrating clear examples one or more figures may be described with reference to one or more other figures but using the particular arrangement illustrated in the one or more other figures is not required in other embodiments. For example intermediary computer in may be described with reference to several components illustrated in and discussed in detail below but using the particular arrangement illustrated in is not required in other embodiments. Furthermore while the instructions discussed in many example embodiments are HTML JavaScript and CSS instructions in other embodiments the instructions intercepted and generated may be any other standard and or proprietary instructions configured to be executed by a client computer.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In an embodiment a data processing system comprises one or more processors script analysis logic coupled to the one or more processors and configured to obtain a particular electronic document from a server computer script injection logic coupled to the one or more processors and configured to insert a set of script code into source code of the electronic document to result in producing a modified electronic document prior to providing the modified electronic document to a client computer wherein the script code is configured to improve resistance of the client computer to attacks by running upon loading in the client computer and to cause transforming when running in the client computer one or more values of one or more elements of the source code of the electronic document into obfuscated values of the one or more elements.

The script code may be configured to cause the transforming using a pseudo random transformation of the values of the elements. The script code may comprise two or more segments of a particular obfuscated value and the script code may be configured to cause transforming a particular value of a particular element of the source code into a particular combination of the two or more segments. The script code may be configured to cause transforming the particular value of the particular element of the source code into a pseudo randomly selected combination of the two or more segments. The script code may be configured to cause transforming the particular value of the particular element of the source code into a randomly selected combination of the two or more segments.

The script code may be configured to repeatedly periodically execute in the client computer and wherein the script code is configured to cause the transforming in a different manner at each time that the script code repeatedly periodically executes in the client computer. The script code may be configured to repeatedly periodically execute in the client computer at time intervals specified using a time interval value in the script code and wherein the script injection logic is configured to periodically update the time interval value in the script code to a different time interval value.

In an embodiment a data processing method comprises obtaining a particular electronic document from a server computer inserting a set of script code into source code of the electronic document to result in producing a modified electronic document providing the modified electronic document to a client computer the script code may be configured to improve resistance of the client computer to attacks by running upon loading in the client computer and to cause transforming when running in the client computer one or more values of one or more elements of the source code of the electronic document into obfuscated values of the one or more elements.

A web browser may be a tool through which application programs can provide client computers with content in a dynamic custom UI. For example in response to receiving a request for data from a web browser a web server responds with a set of instructions and or data. The instructions may define one or more objects that include data and or other objects. The instructions may also define how the data and or objects may be presented in a UI to enable human computer interaction.

In contrast bots traverse web pages and or web sites to retrieve data from and or submit data to one or more web servers with little if any human computer interaction. For example in response to receiving a request for data from a bot a web server responds with a set of instructions. As discussed above the instructions may define one or more objects that include data and or other objects. The instructions may also define how the data and or objects may be presented in a UI. However a bot may parse the instructions looking for particular data to store and or use to make subsequent requests. A bot need not execute the instructions because the bot is built to operate with little if any human computer interaction. The bot may simply look for data by parsing the one or more data structures defined in the instructions. Thus a bot may be a functionally limited browser.

A server computer that requires a browser to use one or more parsers and or execution environments may filter out requests from bots. For purposes of illustrating a clear example assume a browser includes a JavaScript parser or JavaScript execution engine and a bot does not include a JavaScript parser or JavaScript execution engine. Also assume that a server computer may include one or more JavaScript instructions in a web page which if executed may cause a browser to request receive generate and or update a dynamic credential. A dynamic credential may be a credential that is updated over time. Accordingly the browser may parse and execute the one or more JavaScript instructions which cause the browser to request receive generate and or update the credential over time and include a valid dynamic credential in a subsequent request.

In contrast a bot which does not include a JavaScript parser and or JavaScript execution environment may not request receive generate and or update the dynamic credential over time. Thus the bot may not include a valid dynamic credential in a subsequent request.

If a server computer receives a request for a web page with a valid dynamic credential from a browser then the server computer may send the requested web page to the browser. However if the server computer receives a request without a valid dynamic credential from the bot then the server computer may perform a negative action such as terminating the request or ignoring one or more future requests from the bot.

Browser comprises protocol module domain name server DNS module local storage module image parser CSS parser HTML parser JavaScript parser extension execution environment document object model DOM module and JavaScript execution environment . Protocol module DNS module and local storage module may send and or receive data through OS System API layer . For example protocol module may send and or receive data over any protocol such as HTTP to from a server computer through OS system API layer . Data received through protocol module may reference data sources by one or more domain names. DNS module may resolve the one or more domain names referenced by interfacing with one or more remote domain name servers through OS system API layer . Local storage module may store and or recall data from memory through OS system API layer .

Image parser CSS Parser HTML parser and JavaScript parser may parse data received through protocol module . HTML parser may parse HTML data. CSS parser may parse CSS data. JavaScript parser may parse JavaScript data. Image parser may parse image data. Each parser may generate and or update objects in a DOM maintained by DOM module .

Browser may comprise sets of program logic implementing one or more programmable engines such as extension execution environment and JavaScript execution environment . Extensions may be written one or more programming languages include JavaScript Python Ruby and or any other language. Each programmable engine may have access to DOM module and may operate on one or more objects from a DOM maintained by DOM module . For example JavaScript execution environment may execute JavaScript parsed by JavaScript parser and in response create update and or delete one or more objects managed by DOM module and or one or more aspects of a UI presenting the one or more objects.

Browser comprises rendering engine interactivity module and user interface . Each of the components may cause through OS frontend API layer one or more objects to be presented to a user using a client computer. Rendering engine may determine how objects are presented to a user. For example rendering engine may determine the color shape orientation position and or any other visual and or audio attribute of an image text field button and or any other object defined by a set of received instructions. Furthermore rendering engine may cause a button to be displayed on a monitor coupled to a client computer through OS frontend API layer .

User interface may determine what may be presented to a user. For example user interface may determine that a submit button should be hidden until data has been entered in one or more text fields. After data has been entered in the one or more text fields user interface may notify rendering engine to render the submit button accordingly.

Interactivity module may receive one or more inputs through OS Frontend API layer . For example in response to a user pressing a button on a mouse coupled to a client computer the OS running on the client computer may send a message to interactivity module through OS frontend API layer to indicate that a user pressed a button on a mouse. Interactivity module may determine that a user selected a particular button currently presented on a monitor. Interactively module may notify user interface and or rendering engine to update to update the UI accordingly.

A bot may include a subset of the modules and or features included in browser . For example a bot may include protocol module DNS module local storage module and HTML parser . A bot need not support a UI thus a bot need not include rendering engine interactivity module and user interface .

To increase processing time and speed of development a bot need not include one or more parsers and or execution environments. For example a bot may be configured to look for data embedded in a DOM defined in one or more HTML documents. Therefore a bot may include an HTML parser. However a bot need not include one or more parsers or execution environments such as image parser CSS parser JavaScript parser extension execution environment and or JavaScript execution environment .

While each of the components listed above is illustrated as if running on a separate remote computer from each other one or more of the components listed above may be part of and or executed on the same computer. For example intermediary computer configuration storage and or web infrastructure may be executed on the same computer local area and or wide area network. Additionally or alternatively intermediary computer may be a proxy server and or layer for web infrastructure . Additionally or alternatively intermediary computer may be in line between a router and web infrastructure such that intermediary computer may intercept all network data sent to and or sent from web infrastructure over one or more protocols. Additionally or alternatively intermediary computer and or one or more modules comprising intermediary computer discussed herein may be a software layer between and or executed on web infrastructure and or a component of web infrastructure . Additionally or alternatively intermediary computer and or one or more modules comprising intermediary computer discussed herein may be part of a server side application that responds to requests over one or more standard and or proprietary protocols such as HTTP and or any other protocol.

Web infrastructure may comprise one or more server computers that receive requests for data from users through one or more computers such as client computer and or intermediary computer . Web infrastructure may respond by sending data to the browser that sent the request. As illustrated in the data sent from web infrastructure may include instructions HTML JavaScript and CSS . The one or more computers in web infrastructure may but need not be owned and or managed by one or more independent entities and may span across one or more computer networks.

A server computer may be a computer that receives requests for data and responds with data. For example a web server computer may be an HTTP based computer that receives HTTP requests and responds with data comprising HTML CSS and or JavaScript instructions. Additionally or alternatively a server computer may respond with data that references data on other server computers in and or outside of web infrastructure .

Intermediary computer may be an intermediary that may intercept instructions sent from web infrastructure parse and or execute one or more of the intercepted instructions modify the intercepted instructions generate and or add new instructions and send the modified and or new instructions to a client computer. For example intermediary computer may intercept HTML JavaScript and CSS generate modified HTML JavaScript and CSS and send modified HTML JavaScript and CSS to browser . Intermediary computer may intercept a request from browser generate a new and or modified request and send the new and or modified request to web infrastructure .

Intermediary computer may be an HTTP or SPDY intermediary that intercepts parses executes and or processes HTML JavaScript and CSS instructions. Additionally or alternatively intermediary computer may intercept requests for data and or instructions from a client application generate a new HTTP request and send the newly generated HTTP request to one or more HTTP and or SPDY based web servers. Additionally or alternatively intermediary computer may be an intermediary for any other standard and or proprietary protocol. Furthermore each of the components discussed herein which intermediary computer is comprised of may be configured to perform any of the processes and or methods discussed herein for any standard and or proprietary protocol.

Intermediary computer may be a server computer that one or more domain name servers or other elements of the domain name system DNS identify in DNS records as a destination network address associated with one or more internet domain names. Accordingly intermediary computer and or intermediary computer may receive requests sent to the one or more domains from a browser or bot. Based on using DNS to resolve the domain name in a request to a network address intermediary computer may forward the request or a modified request to a server computer in web infrastructure such as original web server computer .

In intermediary computer is programmed to send instructions to and receive requests from a particular type of client application browser . However in an embodiment intermediary computer may be programmed to send instructions to receive requests from and or open sockets with browsers and or bots.

Protocol client module may intercept data over any standard or proprietary protocol. For example protocol client module may intercept data over HTTP.

Processing engine may process instructions intercepted by protocol client module which causes processing engine to generate one or more data structures. Processing one or more instructions may comprise parsing and or executing the one or more instructions. After processing the instructions processing engine may notify forward transformer to begin rendering instructions based on the one or more data structures created by processing engine that are currently in memory.

Processing engine may make requests for additional data. For example if instructions received from protocol client module reference additional instructions stored on another web server then processing engine may request the additional instructions through protocol client module .

Forward transformer may render a new set of instructions based on the one or more data structures in memory. Additionally or alternatively forward transformer may operate on the objects created by processing engine and generate one or more credential morphing instructions which if executed are configured to cause a browser to request receive generate and or update one or more dynamic credentials. Forward transformer may store the one or more dynamic credentials and or data associated with one or more dynamic credentials in storage . Forward transformer may operate on objects and or render instructions based on one or more configurations specified in configuration . Forward transformer may send the rendered instructions to one or more client computers through protocol server module .

Protocol server module may receive the instructions generated by forward transformer and send the generated instructions to client computer . Additionally or alternatively protocol server module may intercept requests from client computer and forward the requests to credential validation module .

Credential validation module may receive requests intercepted by protocol server module from browser . Credential validation module may validate requests and or credentials and forward the requests for one or more pages to reverse transformer .

Credential validation module may generate one or more dynamic credentials. For example forward transformer may render a page and embed a dynamic credential received from credential validation module into the page. Also for example in response to a request from a client computer for a dynamic credential credential validation module may generate a new valid dynamic credential and send the new dynamic credential to the client computer through protocol server module .

Credential validation module may generate one or more parameters associated with dynamic credential. For example credential validation module may store a credential a timestamp and an Internet Protocol IP address in storage . As discussed in detail herein credential validation module may validate a request with the stored credential based on the timestamp and the IP address associated with the stored credential.

Credential validation module may authorize requests based on configuration . For purposes of illustrating a clear example assume that configuration includes data indicating that a particular web page is public. In response to a request for the particular web page which does not include a dynamic credential credential validation module may authorize the request based on configuration .

Reverse transformer may translate requests intercepted by protocol server module which are based on instructions generated by forward transformer into requests that would have been generated by browser had browser received the original instructions sent from web infrastructure . For example if a request from browser includes a dynamic credential generated by credential validation module then reverse transformer may generate a new request that does not include the dynamic credential. Reverse transformer may send the new request web infrastructure through protocol client module on behalf of browser .

Configuration may be a database a configuration file and or any other system that stores configurations settings preferences and or protocols. Configuration may store more than one configuration for one or more web servers in web infrastructure . For example configuration may include data that indicates requests to a particular server computer in web infrastructure need not be validated. Additionally or alternatively configuration may include data that indicates requests for a particular web page need not be validated. Additionally or alternatively configuration may include data that indicates requests to submit data to a particular web site need not be validated. Also for example configuration may include data that indicates whether particular web pages should be processed by processing engine and or modified by forward transformer .

Configuration may be modified by a user and or administrator through one or more computers such intermediary computer a computer in web infrastructure and or any other computer. The one or more computers may present the user with an interface that presents the user with a site map. The site map may comprise a graph wherein the nodes correspond to pages and the edges between the nodes correspond to links.

The user may update configuration through the interface by selecting which links and or pages to be public do not require a valid credential and which links and or pages are private require a valid credential . For example the interface may receive input from a user indicating that a page is public. Configuration may be updated accordingly. When a request is received for the particular page even if the request does not have a valid credential intermediary computer may pass the request to web infrastructure . Also for example the interface may receive input from a user indicating that a link with a particular link identifier is public. When intermediary computer receives a request that includes a particular link identifier then intermediary computer may pass the request to web infrastructure even if the request does not have a valid credential.

Storage may be a database a configuration file and or any other system and or data structure that stores data. In storage is illustrated as if a separate computer from intermediary computer . Additionally or alternatively storage may be a data structure stored in memory on the one or more computers comprising intermediary computer . Additionally or alternatively storage may at least in part be a data structure stored in shared memory between one or more intermediary computers. Additionally or alternatively intermediary computer may at least in part be stored in volatile and or non volatile memory.

Browser may be a browser as described herein and executed on a client computer such as client computer . Additionally or alternatively browser may be a bot comprising one or more of the components traditionally found in a browser.

In an embodiment a data processing method may be configured to intercept instructions from a server computer that are directed toward a browser modify the intercepted instructions include one or more credential morphing instructions render a second set of instructions comprising the modified set of instructions and one or more credential morphing instructions. In an embodiment a data processing method may be configured to receive requests from a browser for a new credential from a client application validate the request using a previous credential generate the new credential and send the new credential to the browser. In an embodiment a data processing method may be configured to receive requests from a client computer for data on a server computer validate the request based on a dynamic credential. In an embodiment if the request is valid then the processing method may be configured to modify the request send the modified request to a server computer receive data from the server computer in response to the modified request and or send a response to a client computer. Various embodiments may use standard web protocols such as HTTP and or standard web based instructions such as HTML CSS and or JavaScript. Additionally or alternatively other standard and or proprietary protocols may be used. Additionally or alternatively other standard and or proprietary instructions may be used.

In step the intermediary computer modifies the first set of instructions to produce a modified set of instructions which if executed are configured to cause a credential to be included in the one or more requests sent by the client computer. For purposes of illustrating a clear example assume that the instructions received in the previous step comprise HTML CSS and JavaScript instructions that define a link which a browser or bot may use to generate a request for additional data and or instructions. Processing engine may parse the instructions. Forward transformer may identify the link processed by processing engine . Forward transformer may modify the instructions that define the link such that if the link is selected by a user using a browser then the browser executes a JavaScript callback that causes the browser to modify the URL one or more parameters in the URL and or data submitted in a request based on the URL to include a dynamic credential. Accordingly when the browser generates the request based at least in part on the URL the request includes a dynamic credential. The foregoing is an example of a technique for modifying instructions to cause a browser to include a credential in a URL. Other embodiments may use one or more other techniques.

For purposes of illustrating another clear example assume that the instructions received in the previous step define a form that is associated with a submit method. The submit method may be configured to collect data from one or more of the fields in the form and send the collected data in a request such as an HTTP POST request to a server computer. After processing engine parses the instructions forward transformer may add a new field in the form that includes a dynamic credential. Accordingly when the submit method is executed the browser may generate a request that includes the credential stored in the added field with other data from other fields in the form. Additionally or alternatively forward transformer may generate a wrapper for the previously defined submit method. The wrapper may be configured to call the previously defined submit method and tack on a credential in the payload of the request.

Additionally or alternatively intermediary computer may determine whether to parse and or modify instructions based on configuration . For example if protocol client module receives a set of original instructions in response to a request for a particular web page and configuration includes data that indicates the particular web page is a public page and or should not be modified then processing engine and or forward transformer may send the original instructions to the intended client computer without processing or modifying the instructions. Also for example if processing engine and or forward transformer determine that a set of instructions define a particular link to a particular target page and or URL and if configuration includes data that indicates the particular link and or the particular target page and or URL are protected then forward transformer may modify the instructions that define the particular link. Similarly if processing engine and or forward transformer determine that a set of instructions define a particular link to a particular target page and or URL and if configuration includes data that indicates the particular link and or the particular target page and or URL are public then forward transformer may modify the instructions that define the particular link.

In the above examples the modified instructions may be executed by a browser using one or more particular parsers and or execution environments such as JavaScript parser extension execution environment and or JavaScript execution environment . Thus a bot without the particular parser s and or execution environment s needed to parse and execute the modified instructions may not generate a request that includes a dynamic credential. Accordingly a request for instructions and or data from a bot may be dismissed ignored and or other responded to in a negative manner.

The modified instructions need not include a valid credential. The modified instructions may merely cause a credential to be included in one or more requests sent by the client computer. How a valid dynamic credential is requested received and or generated is discussed in detail herein.

In step the intermediary computer renders a second set of instructions comprising the modified set of instructions and one or more credential morphing instructions. The one or more credential morphing instructions may define one or more operations causing a browser with a particular parser and or execution environment to request receive generate and or update a valid credential that changes over time. For example forward transformer may render a second set of instructions that include the modified instructions and credential morphing instructions comprising one or more JavaScript instructions which if parsed and or executed are configured to cause a browser to request receive generate and or update a valid credential that changes over time. Additionally or alternatively forward transformer may include the credential morphing instructions by including a reference to a file with credential morphing instructions such as an additional JavaScript file in the rendered instructions.

If a bot does not have the particular parser and or execution environment necessary to execute the credential morphing instructions then the bot may not have a valid dynamic credential to submit with a subsequent request. Accordingly subsequent requests from bots may be dismissed ignored and or otherwise negatively dealt with as discussed herein. However requests from browsers may be processed as if uninterrupted by an intermediary.

In step the intermediary computer sends the second set of instructions which comprise the modified instructions and the credential morphing instructions to the client computer. For example forward transformer may send the modified instructions in step and the credential morphing instructions in step to browser .

In step the client computer parses and or executes the credential morphing instructions and updates the credential over time. The credential morphing instructions may cause the client computer and or browser executing on the client computer to perform one or more methods to update a credential over time. In an embodiment the credential may be stored in storage on a client computer intermediary computer and or storage. The storage may but need not be non volatile storage. When a new credential is received and or generated the old credential is deleted. Each newly received and or generated credential may replace a previous credential at the particular address in memory that the previous credential was stored.

In step the intermediary computer determines whether the credential is valid. For example credential validation module may determine that the old credential is valid if it is stored in storage and or other storage device. Additionally or alternatively credential validation module may determine that a credential is valid based on one or more implied and or express parameters. If credential validation module determines that each of the parameters is satisfied then control may pass to step . Otherwise control may pass to step .

Credential validation module may delete a credential and or one or more parameters associated with the credential after credential validation module validates the credential. Thus credential validation module need not validate the same credential more than once.

Bots may request additional web pages quickly compared to a user viewing a page and selecting a link. To thwart and slow down one or more requests from bots a credential may have a parameter that indicates the credential is invalid for a first amount of time before it becomes valid for a second period of time. Thus if a bot is able to determine a valid credential and quickly sends a request with the credential to the intermediary computer the intermediary computer may determine that the credential is invalid and pass to step .

A credential may be associated and or embedded with one or more implied and or express parameters. For example a credential may be and or be associated with a timestamp a time range an IP address a subnet a browser identifier a username a password a keyword a randomly generated value and or any other identifier and or key that may be used to determine whether a credential is valid.

An implied parameter may be a parameter that is inherent to the credential. For example a credential may be based on time and credential validation module may determine the time from the credential. Credential validation module may be configured to determine that a credential is valid if the determined time is within a particular amount of time from the current time. Similarly credential validation module may be configured to determine that a credential is invalid if the determined timestamp identifies a time that is outside a particular amount of time from the current time.

An express parameter may be a parameter that is associated with and or embedded in a credential. For example a credential may be associated with a parameter stored in storage which indicates the time at which the credential is no longer valid. Credential validation module may query for the parameter stored in storage based on the credential. If the current time is less than the time retrieved from storage then credential validation module may determine that the old credential is valid. Otherwise credential validation module may determine that the credential is invalid.

Additionally or alternatively a credential may include one or more encrypted parameters. Instead of storing one or more parameters in storage credential validation module may generate a credential that comprises one or more encrypted parameters. Credential validation module may validate the credential by decrypting the one or more encrypted parameters and determining whether each of the decrypted parameters is satisfied. If so then credential validation module may determine the credential is valid. Otherwise credential validation module may determine the credential is invalid.

In step the intermediary computer generates a new credential. For example credential validation module may generate a new credential with one or more implied and or express parameters. The one or more parameters may include any of the parameters discussed above and or any other value identifier and or key that may be used to determine whether the new credential is valid. Credential validation module may store the new credential and or the one or more parameters in storage . Additionally or alternatively credential validation module may embed one or more parameters in the new credential.

Intermediary computer may not have an old credential to validate. For example when a browser such as browser requests a page and or credential from intermediary computer for the first time browser may not have an old credential for intermediary computer to validate. If intermediary computer receives a request for a new credential without an old credential to validate then intermediary computer may generate a credential as discussed in detail herein. Additionally the credential may be an initialization credential which may be used by the browser and or the credential morphing instructions to request a new valid credential

If intermediary computer receives a request from browser for a new credential with an initialization credential and determines the initialization credential is valid then intermediary computer may respond with a valid new credential as discussed herein. However if intermediary computer receives a request from browser for a web page from web infrastructure with an initialization credential then control may pass to step .

In an embodiment forward transformer may include a credential with the credential morphing instructions. The credential may be an initialization credential. However in an embodiment forward transformer need not include a credential with the credential morphing instructions.

In step the intermediary computer may send the new credential to the client computer. For example credential validation module may send the credential to browser through protocol server module .

In an embodiment credential validation module may send the new credential to forward transformer . Forward transformer may generate one or more new credential morphing instructions which when executed operate on the credential and or request a new credential. For example if executed the one or more instructions may be configured to replace the previous credential in memory on the client computer. Additionally or alternatively if executed the one or more instructions may be configured to indicate when the client computer and or browser should send a new request for a new credential. Additionally or alternatively if executed the one or more instructions may be configured to generate a new credential.

Forward transformer may generate a seed value from a new credential generated by credential validation module which may be used to generate the new credential by the client computer. illustrates a process for generating a seed value and sending the seed value to the client computer to generate one or more new credentials in an example embodiment. In step the intermediary computer generates a seed. For purposes of illustrating a clear example assume forward transformer receives a new credential from credential validation module to be sent to a browser. Forward transformer may generate a seed value based on the new credential.

In step the intermediary computer sends the seed value to the client computer. For example forward transformer sends the seed value to browser .

In step the client computer generates a new credential based on the seed or a previous credential. For example browser may execute one or more credential morphing instructions which may be configured to generate a valid credential based on a seed received from intermediary computer . In an embodiment over time browser may execute the credential morphing instructions again to generate a new valid credential based on one or more previously generated valid credentials.

The intermediary computer may repeat steps according to the credential morphing instructions. For example the credential morphing instructions may define a time period after which a browser should request receive generate and or update a new credential as discussed in detail herein.

Forward transformer may render and send one or more new credential morphing instructions with each credential and or a seed which if executed may be configured to cause the client computer and or browser to request and or generate a new credential. The one or more new credential morphing instructions may be different than one or more previously sent credential morphing instructions.

Returning now to in step the intermediary intercepts a request for data. For example protocol server module may receive a request from browser for data and or instructions such as a web page from web infrastructure .

In step the intermediary computer determines whether the request is valid by determining if the credential included in the request if any is valid. For example protocol server module may forward the request to credential validation module . Credential validation module may determine whether the credential is valid based on one or more of the methods discussed herein. If credential validation module determines the credential is valid then control passes to step . Otherwise control passes to step . If credential validation module determines that the request does not include a credential then control may pass to step . If credential validation module determines that the request for data includes an initializing credential then control may pass to step .

If configuration includes data indicating that the data requested is public such as a home page of a web site then credential validation module may determine that the request is valid even though the request did not include a credential. In response control may pass to step . If however configuration includes data indicating that the data requested is public but the request includes an invalid credential then control may pass to step .

In step the intermediary computer performs a negative responsive action. For example credential validation module may terminate the request. Additionally or alternatively credential validation module may treat the request as a request for an initializing credential and in response generate and send the initializing credential and or seed value to browser via forward transformer as discussed herein in detail. Additionally or alternatively the intermediary computer may respond with a message defined by a user and or administrator through a client computer and or the intermediary computer. Additionally or alternatively intermediary computer may respond with one or more standard and or proprietary error codes and or messages. For example intermediary computer may return HTTP error code and a message Bad Request to browser and or client computer .

In step the intermediary computer forwards the request for data to the server computer. For example credential validation module may pass the request to reverse transformer . Reverse transformer may strip out data relating to the credential and produce a new request which would have been generated by browser had the original instructions been received by browser . Reverse transformer may send the new request to web infrastructure through protocol client module .

If web infrastructure responds to a forwarded request with data and or instructions then intermediary computer may repeat one or more of the steps discussed herein. For example intermediary computer may perform step in response to receiving the new data and or instructions from web infrastructure .

Embodiments provide numerous improvements over the general idea of transforming a web page with obfuscation or polymorphism to inhibit attacks. In an embodiment a web security device or service which is logically positioned between web clients and a web server applies dynamic polymorphism to original web content. In an embodiment vulnerable HTML components of a web page are transformed before delivery to web clients and the web page is modified in a way that causes further transformations in the HTML component after the web page is received at web client and during use or display at the web clients. Using these techniques when the same web page is accessed by a single client during the entire time in which the web page is in memory and used or displayed at the client web content of that page may change one or more times. The nature and frequency of the change may vary for different client accesses to the same web page.

In one improvement the dynamic polymorphism disclosed herein does not directly change the HTML source code of the original web page. Instead an improved computer security device as described herein is configured to inject obfuscated script code into the web page after the web page is formed by the web server and before the web page is delivered to a web client. The injected script code is configured when executed by the browser hosted at the client computer to dynamically apply one or more changes to the web page before or at the same time that the web page is rendered and or displayed using the browser. If the web page is viewed using the client browser the HTML source code will show its original values and the rendered web components will change value multiple times over time. The polymorphism disclosed herein is termed dynamic based upon the repeated periodic changes in the content of web components that may occur over time.

The improved techniques disclosed herein can significantly increase the complexity involved for adversaries to analyze the modified web page and therefore the security of the browser client computer and web server are increased.

In an embodiment a web server generates an electronic document under the control of a server side application program or other facility and the electronic document is communicated through one or more networks to a client computer or other web client. Typically the electronic document comprises a web page that includes HTML source code. Further typically the client computer hosts or executes a browser program that is configured to or capable of interpreting script code as part of loading rendering and causing display of the electronic document on a computer display device associated with the client computer . An example of script code is JAVASCRIPT and examples of browser program are APPLE SAFARI MOZILLA FIREFOX GOOGLE CHROME MICROSOFT INTERNET EXPLORER and others.

Security device is logically positioned between the web server and a client computer . In some embodiments security device may be implemented in the manner of intermediary computer as described above. In various embodiments security device may be implemented using a special purpose computer or computing appliance that is located near the web server for example security device may be co located in the same data center as the web server. In another embodiment the security device may be implemented as a service that is accessible over computer networks using application program or function calls inter process messaging or other mechanisms of inter computer communication. For example the security device may comprise one or more computer programs or other software elements that are hosted in one or more instances of computing resources of a cloud computing facility. In various embodiments the cloud computing facility may be a private cloud facility that is associated with an owner or operator of the web server or a public cloud facility or a cloud facility of a service provider that is different than an owner or operator of the web server .

In various embodiments the techniques herein may be implemented using a special purpose computer a specially configured network infrastructure element such as a router switch or firewall or a set of computer programs hosted in a data center or cloud computing facility and implemented as a service that can be called from the web server or another element.

In the arrangement of the security device receives all electronic documents that the web server generates before the documents are delivered over one or more networks to the client computer . For example electronic document is received at the security device . In response to receiving the electronic document the security device modifies the HTML source code of the document to inject or include a set of new script code resulting in creating a modified electronic document . The security device then forwards the modified electronic document into the network s toward the client computer .

In an embodiment security computer comprises script analysis logic and script injection logic and is coupled to a file comprising stored script code for injection. In an embodiment the script analysis logic is configured to examine an electronic document and source code within the electronic document and identify a location in which new special purpose script code in file may be inserted or injected. As further described herein the script analysis logic also may be configured to modify the file of stored script code for injection from time to time. In an embodiment the script injection logic is configured to place a copy of the stored script code from the file in the electronic document to result in producing a modified electronic document in which the script code has been injected.

The new script code is configured to execute automatically at the client computer when a browser at the client computer loads the modified electronic document . For example the HTML expression may form a part of the new script code or an expression such as window.onload function . . . may be used. Other HTML tags or other coding may be used in the new script code provided that the new script code is configured to execute automatically on the client computer promptly after the electronic document is initially loaded.

Synchronization of the security device and the browser at the client computer may be performed in a manner similar to that described above for intermediary computer . In the previous description a keep alive value stays synchronized between the client browser and the intermediary computer the keep alive value is synchronized by the client side browser frequently sending the current keep alive value to the intermediary computer in exchange for a new keep alive value. The credential validation module and forward transformer work in concert to validate the current keep alive value and generate the next keep alive value. In the approach of the security device may stay in sync with changes to the client side JavaScript for example credential validation logic and forward transformer logic may operate in concert to validate the modified DOM elements on the client side.

At block at a security computer that is logically interposed between a server computer that generates electronic documents and a client computer that is capable of executing script code in the electronic documents the process obtains a particular electronic document that contains source code with values for transformation or obfuscation. In some cases the process obtains the particular electronic document because the browser program of the web client has requested the original electronic document from the web server for example using an HTTP request for a particular static or dynamic HTML document. The process may obtain the particular electronic document programmatically using the interception techniques that have been described herein for intermediary computer .

At block the process loads or obtains script code that is configured to cause polymorphic transformation of source code of electronic documents and is configured to run upon loading. For example security computer loads a copy of the stored script code from file . Program instructions in an application program running in security computer may include disk file retrieval operations to accomplish the loading.

As seen at block optionally the script code may be configured for dynamic modification of element values. Dynamic modification of element values in this context means that the script code causes a different change to element values in the particular electronic document at different times after that script code is loaded and interpreted or executed as part of rendering the particular electronic document.

At block the process modifies the particular electronic document by inserting the script code into the electronic document resulting in producing a modified copy of the particular electronic document. Any of various insertion techniques may be used. For example the application program running on security computer may create headers for a new well formed HTTP response in main memory then write in the script code to the same memory area then write in the script code then write in ending tags to complete the well formed response.

At block the process provides the modified electronic document to the client computer in response to a request for the original electronic document. For example block may involve the security computer generating and sending the well formed HTTP response to the web client on behalf of the web server using HTTP server code.

In an embodiment the new script code is configured to cause when executing in the browser of the client computer one or more changes in HTML form attributes of the source code of the electronic document that has been loaded into memory of the browser. In one embodiment the new script code comprises JAVASCRIPT that is configured to search within HTML code in memory of the browser for name value pairs within INPUT tags of the HTML code and to identify the position of the value for example by calling HTML DOM method getElementById . When a value is found the bytes between the quote mark characters are deleted and the same memory is modified to substitute the output of a pseudo random generator. This algorithm continues until all the HTML code has been inspected or scanned and modified.

Using this approach if a user invokes the VIEW SOURCE function of the browser the original untransformed web page is displayed. TABLE 1 illustrates an example of VIEW SOURCE output for a hypothetical web page with dynamic polymorphism in effect. However if the user invokes the INSPECT ELEMENT function of the browser the transformed web page after modification by the new script code is displayed. TABLE 2 illustrates an example of INSPECT ELEMENT output for a hypothetical web page.

This approach provides numerous improvements over the general idea of modifying a web page to obfuscate its content or confuse an analyst or a bot. For example because the HTML page source is not changed attackers that only analyze the HTML page source code will not know that the countermeasure described herein has been implemented. For attackers that analyze the Document Object Model DOM for example using INSPECT ELEMENT the conflicting contents of the output from VIEW SOURCE and INSPECT ELEMENT will require investigation. Even if this investigation results in identifying the presence of the new script code that code will appear in obfuscated form. Understanding the total content of the HTML source code INSPECT ELEMENT output and script code will require extensive and difficult reverse engineering effort.

From Table 2 it will be apparent that the injected script code has changed the values of certain elements of the HTML elements in the electronic document. For example the element with id username has been transformed to id m7x8faxuyt and the element with name username has been transformed to name eiu9tzvb7r . To perform such a transformation the injected script code includes the obfuscated values m7xfaxuyt and eiu9tzvb7r as coded variables or constants. The obfuscated values may be generated using a random number generator or pseudo random number generator within an application program in the security device that implements . Both the injected script code that is delivered to the browser and the application program on the security device may implement symmetric transformation operations and may include a seed value which can be carried in the clear in the script code so that clock synchronization or a protocol such as NTP are not required to synchronize the browser and server and permit transformation of an obfuscated element value back into a clear source value.

In an embodiment any one or more of the obfuscated values may be carried in the injected script code in segments that are reassembled and used by the script code when it executes in the browser. For example the value m7xfaxuyt can be segmented in the injected script code using three 3 segments that are combined into a final value at runtime using the code snippet shown in TABLE 3.

In various embodiments the number of segments may be different and the length of each segment may vary. The number of segments that are used and the length of each segment may change in a pseudo random manner from page to page. For example in the page excerpt shown in TABLE 1 TABLE 2 the value may be split into three 3 variables and the next time it may be split into four 4 or five 5 . The use of variable segmentation in this manner is expected to increase the time and cost involved in reverse engineering the resulting electronic document and the injected script code.

In one embodiment a file containing the injected script code is stored at the security computer or in a location that the security computer can access. In one embodiment the file is static and used for all different electronic documents that the web server generates or that the security computer processes. In another embodiment the contents of the file may change over time so that different script code is injected into the electronic documents at different times a control path from script analysis logic to stored script code file is shown in for this purpose. Thus the script analysis logic may be configured to modify the file from time to time to change the contents of the script code to be injected the changes may include different numbers or lengths of segments of the type shown in TABLE 3 or may include completely different obfuscation approaches or techniques other than the use of segmented constants or variables. Therefore the script code file may adapt over time to changing attack modes or to new concepts of the best practices that are appropriate to use to thwart attacks.

In an embodiment the script code to be injected in file is configured for periodic execution for example using JAVASCRIPT repeat function calls that cause the browser to perform repeated periodic execution of all or a part of the script code. In an embodiment the periodic execution capability is used to further change the protected HTML form attributes after the initial change that occurs when the modified electronic document is loaded in the browser and executed. As an example the script code may be configured to perform the changes to the modified electronic document for one particular HTML element which are shown in TABLE 4.

TABLE 5 provides an example of pseudo script code that could be injected on a HTML page with one form field element. The injected code specifically the transform function will transform the HTML form field element name and ID username after the page is loaded and continue to transform it every 1 second within the first 2 seconds. A set interval function can be used to instruct the client browser to execute the transform function every second. The pseudo script code also uses obfuscated transformation values using the string concatenation method described above this is just one of many obfuscation techniques the security device can apply. The function name and variable names can also be obfuscated to difficult to read values. This pseudo script code will cause the username to change in the way specified in Table 4.

TABLE 7 below presents another example on the same HTML form field. In the example of TABLE 7 the transform function is modified to cause changing the form field name and ID for as long as the code runs every 1 second. The transform function shifts the name and ID string values by one character every time it is called. It will result in the sequence specified in TABLE 6.

In various embodiments any of the specific transformed values shown under CONTENT in TABLE 4 may be further obfuscated or hidden in the script code using other techniques.

The values shown under CONTENT in TABLE 4 can be based upon the initial transformed value for example m7x8faxuyt as shown using a pseudo random generating algorithm implemented in software code in the security device or using special purpose digital logic that is also configured to perform pseudo random number generation. The time interval between modifications is shown in TABLE 4 as an example as a consistent or monotonically increasing value of 1 second. In other embodiments the time interval may be other than 1 second. Because the security device controls the modification of the file that contains the script code to be injected the security device necessarily has the time interval stored or available. When the time interval is relatively large such as whole integer values of seconds to validate the transformed values shown under CONTENT in TABLE 4 or other transformed values the processes herein do not require precise clock synchronization with the client computer .

Because all the details of the transformation are carried on the modified electronic document the security computer does not need state information to apply a reverse transformation.

The original electronic document may include values indicating whether static polymorphism is used to protect the page or whether dynamic polymorphism as described herein is used. In an embodiment the security computer implements both static polymorphism and dynamic polymorphism as described herein. Values that the web server embeds in the original electronic document may signal or instruct the security to perform either static polymorphism or dynamic polymorphism on each electronic document that the web server emits that is received at the security device.

The process described for may be implemented in various embodiments using any of a variety of procedural or object oriented programming languages. For example JAVA programming can be used to implement the logic of . The script code that is loaded at block may be JAVASCRIPT or another form of script that code may comprise a code snippet that can be inserted into HTML source code that the server computer outputs using a concatenation merge or file rewriting operation implemented using JAVA.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

Using the networked computer arrangements intermediary computer and or processing methods described herein security in client server data processing may be significantly increased. Dynamic credential techniques discussed herein effectively reduce automated attacks. Consequently one or more various attacks such as a denial of service DOS attack credential stuffing fake account creation ratings or results manipulation man in the browser attacks reserving rival goods or services scanning for vulnerabilities and or exploitation of vulnerabilities are frustrated because requests are accompanied by a credential that changes over time.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

