---

title: Document rendering service
abstract: Disclosed are some examples of systems, methods and storage media for generating a platform-independent document. In some implementations, a system is capable of receiving a request to generate a platform-independent document, the request including markup language content. The system is further capable of providing the markup language content to a rendering engine. The system is further capable of intercepting resource requests communicated from the rendering engine. The system is further capable of communicating the intercepted requests, or one or more requests based on the intercepted requests, to retrieve resources identified in the intercepted requests. The system is further capable of receiving resources retrieved based on the communicated intercepted requests. The system is further capable of providing the retrieved resources to the rendering engine, which subsequently renders the platform-independent document based on the markup language content and the retrieved resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09467434&OS=09467434&RS=09467434
owner: salesforce.com, inc.
number: 09467434
owner_city: San Francisco
owner_country: US
publication_date: 20140707
---
This patent document claims the benefit of priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 846 390 titled DOCUMENT FORMAT RENDERING SERVICE by Shmulevich filed on 15 Jul. 2013 which is hereby incorporated by reference in its entirety and for all purposes.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the United States Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

This patent document relates generally to document generation and rendering and more specifically to cloud computing services for providing platform independent documents.

 Cloud computing services provide shared resources software and information to computers and other devices upon request or on demand. Cloud computing typically involves the over the Internet provision of dynamically scalable and often virtualized resources. Technological details can be abstracted from end users who no longer have need for expertise in or control over the technology infrastructure in the cloud that supports them. In cloud computing environments software applications can be accessible over the Internet rather than installed locally on personal or in house computer systems.

Part of the applications or on demand services provided to end users may include the ability for a user to create modify or view documents and other files. For example a user can prepare a document using services provided by a cloud computing system via the user s web browser. A user who has prepared a document using an interface rendered by a browser may desire to print the document. For example the user may desire to print a physical copy of the document on paper or some other physical medium. Alternatively the user may desire to print or save the document to a digital file format. While the user can typically print the document using the web browser s print function different web browsers render markup languages style sheet languages dynamic programming languages conventions and various document or file formats in different manners.

Examples of systems apparatus computer readable storage media and methods according to the disclosed implementations are described in this section. These examples are being provided solely to add context and aid in the understanding of the disclosed implementations. It will thus be apparent to one skilled in the art that the disclosed implementations may be practiced without some or all of the specific details provided. In other instances certain process or method operations also referred to herein as blocks have not been described in detail in order to avoid unnecessarily obscuring the disclosed implementations. Other implementations and applications also are possible and as such the following examples should not be taken as definitive or limiting either in scope or setting.

In the following detailed description references are made to the accompanying drawings which form a part of the description and in which are shown by way of illustration specific implementations. Although these disclosed implementations are described in sufficient detail to enable one skilled in the art to practice the implementations it is to be understood that these examples are not limiting such that other implementations may be used and changes may be made to the disclosed implementations without departing from their spirit and scope. For example the blocks of the methods shown and described herein are not necessarily performed in the order indicated in some other implementations. Additionally in some other implementations the disclosed methods may include more or fewer blocks than are described. As another example some blocks described herein as separate blocks may be combined in some other implementations. Conversely what may be described herein as a single block may be implemented in multiple blocks in some other implementations. Additionally the conjunction or is intended herein in the inclusive sense where appropriate unless otherwise indicated that is the phrase A B or C is intended to include the possibilities of A B C A and B B and C A and C and A B and C. 

Some implementations described and referenced herein are directed to systems apparatus computer implemented methods and computer readable storage media for generating and providing portable or platform independent versions of documents to a user. In some implementations systems apparatus computer implemented methods and computer readable storage described herein implement a cloud based system or architecture or environment that provides applications or on demand services to users also referred to herein as clients of the system upon request. Some of the applications or on demand services provided to the users by the cloud based system include the abilities for users to access view review create modify upload and download documents and files including for example contracts proposals offers acceptances invoices budgets quotes letters reports etc. all of which documents and files may be referred to generally hereinafter as documents . For example the cloud based system can enable a user to access view and modify a document generated by the system in response to user input or a user selection.

In some implementations the document is first provided to the user in a first file format that allows the user to view and modify the document. For example one or more servers performing various operations or functions to carry out the services provided by the cloud based system can generate an electronic structured document such as a markup language based structured document that includes markup language code for rendering the document. To avoid confusion between the markup language based electronic structured documents generated and transmitted by the system servers and the personal or enterprise related documents that are delivered to the end users for rendering by way of such structured documents structured documents are referred to hereinafter as renderable web documents while personal or enterprise related documents for example contracts invoices reports or other documents containing information for the user or another user that are displayed after rendering may be referred to simply as rendered documents .

The system can transmit a renderable web document via one or more wired or wireless networks or network connections to the user s computing device. In some implementations the renderable web document generated by the system and transmitted to the user s computing device can generally include a combination of one or more of markup language instructions style sheets other programming languages or scripts or models as well as content or resource locators used to identify and retrieve content from one or more locations internal or external to the system. A web browser or other client side rendering application executing in the user s computing device renders the received renderable web document for display on the user s computing device as a rendered document. In some implementations the system enables the user to interact with one or more applications or services provided by the system to access or modify the rendered document.

In some implementations after a user has finished creating modifying viewing or otherwise accessing the rendered document the user can select to cause the system to save the rendered version of the document into a printable format or otherwise select to cause the system to generate a printable version of the rendered document. While the user may be able to print the rendered document using the client side web browser s print function this can in some instances result in undesirable distortion of the document as a result of differences in how different web browsers render HTML or other markup languages style sheet languages dynamic programming languages conventions and various document or file formats. In particular implementations rather than the user printing or converting the format of the rendered document with a client side application such as a client side web browser the could based system generates a printable version of the document that is portable or platform independent in the sense that the printable version of the document when printed displayed or transmitted for display to another user will appear the same regardless of the web browser or other rendering engine operating system or hardware of the originating user s computing device or the other user s computing device or at least for a majority of the web browsers other rendering engines operating systems and hardware generally available to the public .

In some implementations the cloud based system generates the printable version of the document also referred to hereinafter as a platform independent document as a Portable Document Format PDF file. By way of background printing a document to a PDF file results in a conversion of the original or current document format into a PDF format. In some such implementations the platform independent document can advantageously be a searchable PDF document. PDF documents also can be desirable for other reasons such as for example because PDF documents are typically legally acceptable and offer various security features such as the ability to secure and protect the document with a password. However in some other implementations the cloud based system can generate the platform independent document in a different second format. For example the system can generate the platform independent document as an image file such as a Portable Network Graphics .png file or other bitmap image file among other possibilities.

As just described in some instances the user may desire to print a physical copy of the platform independent document on paper or some other physical medium. Alternatively the user may desire to print save the finalized rendered version of the document into a platform independent document having another second file format that can be sent to another user archived or otherwise shared or stored securely and reliably. For example the user may desire to send the platform independent document via an enterprise social network. One example of an online enterprise social network is CHATTER provided by salesforce.com inc. of San Francisco Calif. The user also may desire to send the platform independent document via email or some other form of electronic communication. The user also can save the platform independent document to the user s hard drive or to another memory location or device such as a Flash drive memory stick memory card or other portable memory device.

In one example use case a user of the cloud based system desires to send a billing invoice to a customer. In such a use case the cloud based system can enable the user to track the user s or the respective organization s sales and other business or customer related data. In some implementations the could based system provides a user interface to the user that displays such sales and other data in a consolidated form. Again the system can provide the user interface by generating and transmitting a renderable web document to the user s computing device whereupon the web browser executing within the user s computing system parses the markup language code for example HTML requests resources identified in the markup language code and renders the user interface. In some implementations the system can be configured to cause the user interface to display a selectable invoice for recent sales to a particular customer or for sales made or processed during a specified time period or to display a picklist that includes a set of selectable invoices for various customers and time periods. The user can then select an invoice by clicking on a user interface UI element such as a tab button or other user selectable element on the displayed interface. In response to the user selection of the invoice the system generates and transmits HTML or other code to the user s computing device for rendering and displaying the invoice. This allows the user to view review the selected invoice and make any changes if desired. In some implementations the user can then select to create a printable version of the invoice a platform independent document by clicking or selecting a print UI element displayed in the interface that displays the invoice. In response to the user s action the user s computing device sends a request to the cloud based system. The cloud based system then generates and transmits to the user s computing device a printable platform independent version of the invoice in the form of for example a PDF document. The user can then print a physical copy of the printable version of the invoice save the printable version of the invoice in the user s computing device s hard drive or other storage media or email or otherwise send or share the printable version of the invoice to or with another user within an enterprise social network or to a person outside a social network such as a customer of the user s organization.

As mentioned above in some implementations the users described herein are users or members of an interactive online enterprise social network also referred to herein as an enterprise social networking system an enterprise collaborative network or more simply as an enterprise network. Such online enterprise networks are increasingly becoming a common way to facilitate communication among people any of whom can be recognized as enterprise users. Again one example of an online enterprise social network is CHATTER provided by salesforce.com inc. of San Francisco Calif. salesforce.com inc. is a provider of enterprise social networking services customer relationship management CRM services and other database management services any of which can be accessed and used in conjunction with the techniques disclosed herein in some implementations. These various services can be provided in a cloud computing environment as described herein for example in the context of a multi tenant database system. Thus the disclosed techniques can be implemented without having to install software locally that is on computing devices of users interacting with services available through the cloud. While the disclosed implementations may be described with reference to CHATTER and more generally to enterprise social networking those of ordinary skill in the art should understand that the disclosed techniques are neither limited to CHATTER nor to any other services and systems provided by salesforce.com inc. and can be implemented in the context of various other database systems such as cloud based systems that are not part of a multi tenant database system or which do not provide enterprise social networking services.

In some implementations the environment is an environment in which an on demand database service exists. An on demand database service such as that which can be implemented using the system is a service that is made available to users outside of the enterprise s that own maintain or provide access to the system . As described above such users generally do not need to be concerned with building or maintaining the system . Instead resources provided by the system may be available for such users use when the users need services provided by the system that is on the demand of the users. Some on demand database services can store information from one or more tenants into tables of a common database image to form a multi tenant database system MTS . The term multi tenant database system can refer to those systems in which various elements of hardware and software of a database system may be shared by one or more customers or tenants. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows of data such as feed items for a potentially much greater number of customers. A database image can include one or more database objects. A relational database management system RDBMS or the equivalent can execute storage and retrieval of information against the database object s .

Application platform can be a framework that allows the applications of system to execute such as the hardware or software infrastructure of the system . In some implementations the application platform enables the creation management and execution of one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

In some implementations the system implements a web based customer relationship management CRM system. For example in some such implementations the system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms renderable web pages and documents and other information to and from user systems and to store to and retrieve from a database system related data objects and Web page content. In some MTS implementations data for multiple tenants may be stored in the same physical database object in tenant data storage . In some such implementations tenant data is arranged in the storage medium s of tenant data storage so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. The system also implements applications other than or in addition to a CRM application. For example the system can provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform . The application platform manages the creation and storage of the applications into one or more database objects and the execution of the applications in one or more virtual machines in the process space of the system .

According to some implementations each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another for example in a server farm located in a single building or campus or they may be distributed at locations remote from one another for example one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to refer to a computing device or system including processing hardware and process space s an associated storage medium such as a memory device or database and in some instances a database application for example OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database objects described herein can be implemented as part of a single database a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and can include a distributed database or storage network and associated processing intelligence.

The network can be or include any network or combination of networks of systems or devices that communicate with one another. For example the network can be or include any one or any combination of a LAN local area network WAN wide area network telephone network wireless network cellular network point to point network star network token ring network hub network or other appropriate configuration. The network can include a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I . The Internet will be used in many of the examples herein. However it should be understood that the networks that the disclosed implementations can use are not so limited although TCP IP is a frequently implemented protocol.

The user systems can communicate with system using TCP IP and at a higher network level other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used each user system can include an HTTP client commonly referred to as a web browser or simply a browser for sending and receiving HTTP signals to and from an HTTP server of the system . Such an HTTP server can be implemented as the sole network interface between the system and the network but other techniques can be used in addition to or instead of these techniques. In some implementations the network interface between the system and the network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a number of servers. In MTS implementations each of the servers can have access to the MTS data however other alternative configurations may be used instead.

The user systems can be implemented as any computing device s or other data processing apparatus or systems usable by users to access the database system . For example any of user systems can be a desktop personal computer a work station a laptop computer a tablet computer a handheld computing device a mobile cellular phone for example a smartphone or any other Wi Fi enabled device wireless access protocol WAP enabled device or other computing device capable of interfacing directly or indirectly to the Internet or other network. The term computing device also is used interchangeably herein simply as a computer . As described above each user system typically executes an HTTP client for example a web browsing or simply browsing program such as a web browser based on the WebKit platform Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser Mozilla s Firefox browser or a WAP enabled browser in the case of a cellular phone PDA or other wireless device or the like allowing a user for example a subscriber of on demand services provided by the system of the user system to access process and view information pages and applications available to it from the system over the network .

Each user system also typically includes one or more user input devices such as a keyboard a mouse a trackball a touch pad a touch screen a pen or stylus or the like for interacting with a graphical user interface GUI provided by the browser on a display for example a monitor screen liquid crystal display LCD light emitting diode LED display among other possibilities of the user system in conjunction with pages forms applications and other information provided by the system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above implementations are suitable for use with the Internet although other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

The users of user systems may differ in their respective capacities and the capacity of a particular user system can be entirely determined by permissions permission levels for the current user of such user system. For example where a salesperson is using a particular user system to interact with the system that user system can have the capacities allotted to the salesperson. However while an administrator is using that user system to interact with the system that user system can have the capacities allotted to that administrator. Where a hierarchical role model is used users at one permission level can have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users generally will have different capabilities with regard to accessing and modifying application and database information depending on the users respective security or permission levels also referred to as authorizations .

According to some implementations each user system and some or all of its components are operator configurable using applications such as a browser including computer code executed using a central processing unit CPU such as an Intel Pentium processor or the like. Similarly the system and additional instances of an MTS where more than one is present and all of its components can be operator configurable using application s including computer code to run using the processor system which may be implemented to include a CPU which may include an Intel Pentium processor or the like or multiple CPUs.

The system includes tangible computer readable media having non transitory instructions stored thereon in that can be executed by or used to program a server or other computing device to perform the methods of the implementations described herein. For example computer program code can implement instructions for operating and configuring the system to intercommunicate and to process web pages applications and other data and media content as described herein. In some implementations the computer code can be downloadable and stored on a hard disk but the entire program code or portions thereof also can be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disks DVD compact disks CD microdrives and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any other type of computer readable medium or device suitable for storing instructions or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium for example over the Internet or from another server as is well known or transmitted over any other existing network connection as is well known for example extranet VPN LAN etc. using any communication medium and protocols for example TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for the disclosed implementations can be realized in any programming language that can be executed on a client system or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

In the network interface is implemented as a set of HTTP application servers . Each application server also referred to herein as an app server is configured to communicate with tenant data storage and the tenant data therein as well as system data storage and the system data therein to serve requests received from the user systems . The tenant data can be divided into individual tenant storage spaces which can be physically or logically arranged or divided. Within each tenant storage space user storage and application metadata can similarly be allocated for each user. For example a copy of a user s most recently used MRU items can be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant can be stored to tenant storage space .

The process space includes system process space individual tenant process spaces and a tenant management process space . The application platform includes an application setup mechanism that supports application developers creation and management of applications. Such applications and others can be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications can be coded using PL SOQL which provides a programming language style interface extension to API . A detailed description of some PL SOQL language implementations is discussed in commonly assigned U.S. Pat. No. 7 730 478 titled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE by Craig Weissman issued on Jun. 1 2010 and hereby incorporated by reference in its entirety and for all purposes. Invocations to applications can be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

The system of also includes a user interface UI and an application programming interface API to system resident processes to users or developers at user systems . In some other implementations the environment may not have the same elements as those listed above or may have other elements instead of or in addition to those listed above.

Each application server can be communicably coupled with tenant data storage and system data storage for example having access to tenant data and system data respectively via a different network connection. For example one application server can be coupled via the network for example the Internet another application server can be coupled via a direct network link and another application server can be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are examples of typical protocols that can be used for communicating between application servers and the system . However it will be apparent to one skilled in the art that other transport protocols can be used to optimize the system depending on the network interconnections used.

In some implementations each application server is configured to handle requests for any user associated with any organization that is a tenant of the system . Because it can be desirable to be able to add and remove application servers from the server pool at any time and for various reasons in some implementations there is no server affinity for a user or organization to a specific application server . In some such implementations an interface system implementing a load balancing function for example an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one implementation the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in some instances three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner by way of example system can be a multi tenant system in which system handles storage of and access to different objects data and applications across disparate users and organizations.

In one example storage use case one tenant can be a company that employs a sales force where each salesperson uses system to manage aspects of their sales. A user can maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process for example in tenant data storage . In an example of a MTS arrangement because all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having little more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example when a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates regarding that customer while waiting for the customer to arrive in the lobby.

While each user s data can be separate from other users data regardless of the employers of each user some data can be organization wide data shared or accessible by several users or all of the users for a given organization that is a tenant. Thus there can be some data structures managed by system that are allocated at the tenant level while other data structures can be managed at the user level. Because an MTS can support multiple tenants including possible competitors the MTS can have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that can be implemented in the MTS. In addition to user specific data and tenant specific data the system also can maintain system level data usable by multiple tenants or other data. Such system level data can include industry reports news postings and the like that are sharable among tenants.

In some implementations the user systems which can be client systems communicate with the application servers to request and update system level and tenant level data from the system . Such requests and updates can involve sending one or more queries to tenant data storage or system data storage . The system for example an application server in the system can automatically generate one or more SQL statements for example one or more SQL queries designed to access the desired information. System data storage can generate query plans to access the requested data from the database. The term query plan generally refers to one or more operations used to access information in a database system.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined or customizable categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to some implementations. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or element of a table can contain an instance of data for each category defined by the fields. For example a CRM database can include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table can describe a purchase order including fields for information such as customer product sale price date etc. In some MTS implementations standard entity tables can be provided for use by all tenants. For CRM database applications such standard entities can include tables for case account contact lead and opportunity data objects each containing pre defined fields. As used herein the term entity also may be used interchangeably with object and table. 

In some MTS implementations tenants are allowed to create and store custom objects or may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. Commonly assigned U.S. Pat. No. 7 779 039 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. issued on Aug. 17 2010 and hereby incorporated by reference in its entirety and for all purposes teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In some implementations for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

As shown in accessing an on demand database service environment can involve communications transmitted among a variety of different hardware or software components. Further the on demand database service environment is a simplified representation of an actual on demand database service environment. For example while only one or two devices of each type are shown in some implementations of an on demand database service environment can include anywhere from one to several devices of each type. Also the on demand database service environment need not include each device shown in or can include additional devices not shown in .

Additionally it should be appreciated that one or more of the devices in the on demand database service environment can be implemented on the same physical device or on different hardware. Some devices can be implemented using hardware or a combination of hardware and software. Thus terms such as data processing apparatus machine server and device as used herein are not limited to a single hardware device rather references to these terms can include any suitable combination of hardware and software configured to provide the described functionality.

The cloud is intended to refer to a data network or multiple data networks often including the Internet. Client machines located in the cloud can communicate with other components of the on demand database service environment to access services provided by the on demand database service environment. For example client machines can access the on demand database service environment to retrieve store edit or process information. In some implementations the edge routers and route packets between the cloud and other components of the on demand database service environment . For example the edge routers and can employ the Border Gateway Protocol BGP . The BGP is the core routing protocol of the Internet. The edge routers and can maintain a table of IP networks or prefixes which designate network reachability among autonomous systems on the Internet.

In some implementations the firewall can protect the inner components of the on demand database service environment from Internet traffic. The firewall can block permit or deny access to the inner components of the on demand database service environment based upon a set of rules and other criteria. The firewall can act as one or more of a packet filter an application gateway a stateful filter a proxy server or any other type of firewall.

In some implementations the core switches and are high capacity switches that transfer packets within the on demand database service environment . The core switches and can be configured as network bridges that quickly route data between different components within the on demand database service environment. In some implementations the use of two or more core switches and can provide redundancy or reduced latency.

In some implementations the pods and perform the core data processing and service functions provided by the on demand database service environment. Each pod can include various types of hardware or software computing resources. An example of the pod architecture is discussed in greater detail with reference to . In some implementations communication between the pods and is conducted via the pod switches and . The pod switches and can facilitate communication between the pods and and client machines located in the cloud for example via core switches and . Also the pod switches and may facilitate communication between the pods and and the database storage . In some implementations the load balancer can distribute workload between the pods and . Balancing the on demand service requests between the pods can assist in improving the use of resources increasing throughput reducing response times or reducing overhead. The load balancer may include multilayer switches to analyze and forward traffic.

In some implementations access to the database storage is guarded by a database firewall . The database firewall can act as a computer application firewall operating at the database application layer of a protocol stack. The database firewall can protect the database storage from application attacks such as structure query language SQL injection database rootkits and unauthorized information disclosure. In some implementations the database firewall includes a host using one or more forms of reverse proxy services to proxy traffic before passing it to a gateway router. The database firewall can inspect the contents of database traffic and block certain content or database requests. The database firewall can work on the SQL application level atop the TCP IP stack managing applications connection to the database or SQL management interfaces as well as intercepting and enforcing packets traveling to or from a database network or application interface.

In some implementations communication with the database storage is conducted via the database switch . The multi tenant database storage can include more than one hardware or software components for handling database queries. Accordingly the database switch can direct database queries transmitted by other components of the on demand database service environment for example the pods and to the correct components within the database storage . In some implementations the database storage is an on demand database system shared by many different organizations as described above with reference to .

In some implementations the app servers include a hardware or software framework dedicated to the execution of procedures for example programs routines scripts for supporting the construction of applications provided by the on demand database service environment via the pod . In some implementations the hardware or software framework of an app server is configured to execute operations of the services described herein including performance of the blocks of various methods or processes described herein. In some alternative implementations two or more app servers can be included and cooperate to perform such methods or one or more other servers described herein can be configured to perform the disclosed methods.

The content batch servers can handle requests internal to the pod. Some such requests can be long running or not tied to a particular customer. For example the content batch servers can handle requests related to log mining cleanup work and maintenance tasks. The content search servers can provide query and indexer functions. For example the functions provided by the content search servers can allow users to search through content stored in the on demand database service environment. The file force servers can manage requests for information stored in the Fileforce storage . The Fileforce storage can store information such as documents images and basic large objects BLOBs . By managing requests for information using the file force servers the image footprint on the database can be reduced. The query servers can be used to retrieve information from one or more file systems. For example the query system can receive requests for information from the app servers and transmit information queries to the NFS located outside the pod.

The pod can share a database instance configured as a multi tenant environment in which different organizations share access to the same database. Additionally services rendered by the pod may call upon various hardware or software resources. In some implementations the ACS servers control access to data hardware resources or software resources. In some implementations the batch servers process batch jobs which are used to run tasks at specified times. For example the batch servers can transmit instructions to other servers such as the app servers to trigger the batch jobs.

In some implementations the QFS is an open source file system available from Sun Microsystems of Santa Clara Calif. The QFS can serve as a rapid access file system for storing and accessing information available within the pod . The QFS can support some volume management capabilities allowing many disks to be grouped together into a file system. File system metadata can be kept on a separate set of disks which can be useful for streaming applications where long disk seeks cannot be tolerated. Thus the QFS system can communicate with one or more content search servers or indexers to identify retrieve move or update data stored in the network file systems or other storage systems.

In some implementations one or more query servers communicate with the NFS to retrieve or update information stored outside of the pod . The NFS can allow servers located in the pod to access information to access files over a network in a manner similar to how local storage is accessed. In some implementations queries from the query servers are transmitted to the NFS via the load balancer which can distribute resource requests over various resources available in the on demand database service environment. The NFS also can communicate with the QFS to update the information stored on the NFS or to provide information to the QFS for use by servers located within the pod .

In some implementations the pod includes one or more database instances . The database instance can transmit information to the QFS . When information is transmitted to the QFS it can be available for use by servers within the pod without using an additional database call. In some implementations database information is transmitted to the indexer . Indexer can provide an index of information available in the database or QFS . The index information can be provided to file force servers or the QFS .

As described above in some implementations the database system includes application servers . In some implementations one or more of the application servers implement or host a core application that is the primary or master application for providing various on demand or cloud computing services described herein. One or more of the application servers also implement or host a document generation adapter. In some implementations the core application includes the document generation adapter that is the document generation adapter executes within the core application. shows a block diagram of an example of a document generation adapter for receiving requests for and providing platform independent documents to users of a cloud based system according to some implementations. For example the cloud based system can include or be a part of the database system described with reference to .

In the illustrated implementation the document generation adapter is in communication with a core application that provides various on demand or cloud computing services including document generation services as well as in some implementations other on demand services including for example CRM services. The document generation adapter includes an interaction manager a service interface a content provider a policies enforcement application an internal network connection and an external network connection .

In some implementations one or more of the application servers implement or host a document rendering service. shows a block diagram of an example of a document rendering service for generating platform independent documents for the document generation adapter of according to some implementations. In some implementations the document rendering service is implemented in a different set of one or more of the application servers than the document generation adapter and the core application that is the document generation adapter and the core application execute in different physical machines than the document rendering service . For example this can facilitate security features and the prevention of unauthorized access to sensitive or confidential data. The document rendering service includes a document servlet a flow manager a rendering engine a proxy servlet a session manager and a temporary storage .

In some implementations the rendering engine is built on the WebKit platform. In some such implementations the rendering engine is built on Qt WebKit Qt WebKit is the port of WebKit built on the Qt cross platform application framework . WebKit is a software platform for rendering web pages and other structured documents in web browsers. For example WebKit has been used as the rendering engine in the Safari web browser by Apple and in the Chrome web browser by Google . WebKit includes a C C application programming interface API that provides a set of classes or libraries to display web content and can implement browser features such as following links managing a back forward list and managing a history of pages recently visited. The WebKit platform includes WebCore which is a layout rendering and Document Object Model DOM library and JavaScriptCore which is a framework that provides a JavaScript engine for WebKit .

Using WebKit as the platform for the rendering engine can be desirable because it is the rendering engine upon which many generally available web browsers are based. Because of its application as a rendering engine for web browsers WebKit includes desirable capabilities such as the capabilities to render read understand interpret and process all used interchangeably herein where appropriate unless otherwise indicated markup languages such as Extensible Markup Language XML HyperText Markup Language HTML including HTML5 and Extensible HTML XHTML style sheet languages such as Cascading Style Sheets CSS including CSS3 dynamic programming languages such as JavaScript right to left RTL languages and conventions such as Document Object Model DOM .

Although some implementations of the rendering engine described herein may utilize WebKit as a framework this disclosure is not limited to such WebKit based implementations. On the contrary other web browsing or rendering applications including embedded or headless browsers that is browsers that can execute in a server and which do not necessarily generate or provide a user interface can be used to implement or modified to implement the rendering engine .

At a high level the document generation adapter drives overall interaction with the document rendering service including providing HTML or other markup language content hereinafter referred to collectively simply as HTML although the implementations described herein are not limited to any particular version or release of HTML or HTML in general as well as retrieved resources to the document rendering service . In some implementations the document generation adapter also enforces whitelisting policies enforces same origin policies and limits access to the internals of the application servers . The document rendering service parses for example HTML content received from the core application through the document generation adapter and based on resources identified in the parsed HTML content generates one or more requests for the identified resources including the locations of the resources for example uniform resource locators URLs . The generated requests are subsequently passed to the document generation adapter which ultimately retrieves approved resources. The document generation adapter then communicates the retrieved resources to the document rendering service . The document rendering service and specifically the rendering engine then generates a printable platform independent version of the desired document requested by the user.

In some implementations the renderable web document such as the invoice described above is not included with the request received in block . Rather in some such implementations the request received in block identifies the renderable web document without providing the document. For example the core application doesn t need to receive the document from the user s computing device because the core application or other application within the database system itself first generated the document and transmitted it to the user s computing device for rendering and display. For example the core application can in some implementations retrieve the renderable web document from its own temporary memory or from other storage for example tenant data storage or system data storage in response to the request in block .

In some implementations or instances in which the user edits or otherwise modifies the rendered document after receiving the renderable web document from the database system the user s computing device and specifically the web browser executing in the user s computing device can send communications to the database system after each key stroke or after other user input for example a mouse click is made by the user. In this way the core application is made aware of the modifications. In some other implementations or instances in which the user edits or otherwise modifies the rendered document the user s computing device can send the modifications to the core application whenever the user clicks a save button or otherwise causes the core application to save the modified version of the rendered document to the database system . In this way the core application is made aware of the modifications. In some other implementations or instances in which the user edits or otherwise modifies the rendered document the user s computing device can send the modifications to the core application with the request identifying the document received in block . Again in this way the core application is made aware of the modifications.

In block the core application retrieves the renderable web document which generally includes HTML or other markup language code. The core application provides the HTML to the interaction manager . The interaction manager manages interactions with various other components of the document generation adapter as well as with the document rendering service . In some implementations the core application manager removes any session or authentication cookie before communicating the HTML to the interaction manager for example such a session cookie can be transmitted to the user s computing device s browser when the user logs into the system and subsequently transmitted with various requests sent by the user s computing device to the system as a means of authenticating the requests . The interaction manager subsequently communicates a request to the service interface that includes the HTML received in block . As just described the user s session cookie is not included in the request communicated in block . In some implementations in which the core application does not remove the session cookie the interaction manager removes the session cookie. The service interface communicates the request to the document rendering service in block . In some implementations the service interface transmits the request over an HTTPS link or other secure encrypted communication link to the document rendering service .

The document servlet receives the request communicated in block and communicates the HTML for the renderable web document to the flow manager . In some implementations the flow manager stores the HTML in temporary storage . In block the flow manager starts the rendering engine or instantiates an instance of a rendering engine process . The rendering engine subsequently sends a request for the HTML for example a request including the URL for the HTML . The proxy servlet intercepts the request for the HTML sent by the rendering engine and passes the request for the HTML to the flow manager which then retrieves the HTML from the temporary storage . The flow manager subsequently communicates the retrieved HTML in a response which is received and passed by the proxy servlet to the rendering engine in block . The rendering engine subsequently parses the received HTML. As described above in some implementations or instances the renderable web document often can include resources or identifiers for example uniform resource locators URLs for such resources such as image files CSS files JavaScript files various scripts or other content some of which can be located within the database system for example within tenant data storage or system data storage and some of which can be located in storage locations external to the database system such as from third party providers . In block the rendering engine generates and communicates requests for the resources identified in the parsed HTML. For example the rendering engine can generate Hypertext Transfer Protocol HTTP requests to obtain the requested resources It should be noted that in some implementations resources retrieved by the web browser executing within the user s computing device are not sent back to the core application or more generally the database system in block or at any other time . In some implementations the rendering engine packages some or all of the requested resources into one or more packaged resource requests. For example the rendering engine may package together resource requests for resources hosted by one particular provider for example GOOGLE into one request that identifies two or more needed resources.

However in some implementations the requests generated and communicated from the rendering engine itself do not directly leave the document rendering service . In such implementations in block the proxy servlet intercepts the requests generated and communicated from the rendering engine in block . In some implementations the proxy servlet generates one or more lists of the resources requested by the rendering engine . The proxy servlet communicates in block the intercepted resource requests or lists of intercepted resource requests or requests based on such requests to the flow manager for subsequent communication to the document servlet which ultimately communicates the requests to the document generation adapter .

In some implementations the communication connection between the proxy servlet and the rendering engine is an HTTPS link or other secure encrypted communication link which allows requests to be sent from the rendering engine to the proxy servlet but not vice versa and which allows replies also referred to herein as responses to be sent from the proxy servlet to the rendering engine but not vice versa. In such a way the rendering engine is prevented from directly communicating outside of the proxy servlet and more generally outside of the document rendering service . In some implementations the document rendering service also includes an outbound firewall for preventing outbound requests sent from the rendering engine in the case that the proxy servlet failed to intercept them.

The service interface for example an HTTP client receives the resource requests communicated in block and communicates the requests or the resource locators URLs included in the requests to the interaction manager . The interaction manager communicates the resource locators in the requests to the content provider which manages the retrieval of the requested resources in conjunction with policies enforcement application in block . In some implementations block can include one or more operations steps actions or determinations. For example in some implementations within block the policies enforcement application enforces one or more whitelisting policies or same origin policies on each request for example based on the requested URL and limits access to resources within the internals of the application servers for example including those which must be purchased . Policies enforcement application approves or rejects the requested resources based on the whitelisting same origin or other policies or verification rules. In some implementations the policies enforcement application rejects or terminates the requests that do not comply with one or more of the policies and in some such implementations communicate empty content responses back to the document rendering service and ultimately to the rendering engine . In some other such implementations the policies enforcement application communicates some form of error response to the document rendering service and ultimately to the rendering engine .

Policies enforcement application requests approved externally located resources such as from third party servers through an external connection . However certain approved resource requests can require authentication in block . For example as earlier described some of the resources requested by the rendering engine may be publicly available while others such as those located within the database system for example in tenant data storage or system data storage require authentication before being provided. In other typical scenarios in which resource requests from a client side web browser as opposed to the cloud based rendering engine need to be authenticated authentication can sometimes be achieved by way of a session cookie that is transmitted to the user s computing device when the user logs on to the cloud based system. In such scenarios the cookie can then be transmitted with every request for a resource sent by the user s web browser. Such a session cookie typically remains active for the duration of the user s session for example until the user logs off until the user s web browser is closed or until a predetermined duration of time has lapsed . But this session cookie method of authentication may not be reliable or suitable for some implementations or applications. As such in some implementations no authentication information such as a session cookie is provided to the rendering engine from for example the core application server or any other element or component of the cloud based system. In such implementations to achieve authentication for those requested resources that require authentication a different method is used.

In some implementations within block the policies enforcement application determines which ones of the requested resources are publicly available. In some implementations neither the policies enforcement application nor the external connection modifies information included with requests for publicly available resources. For example some or all of the publicly available resources can be whitelisted by the policies enforcement application and the requests for such whitelisted resources can subsequently be sent via the external connection for retrieval. But for each of those resources that the policies enforcement application determines require authentication the policies enforcement application determines whether authentication is allowed. For example in the context of an implementation in which the user for which the printable version of the document is being generated is an employee or member of an organization the policies enforcement application can determine whether the request is for a resource owned by the organization or a resource to which access privileges have been granted to the organization. For example such resources can be stored locally in the database system in tenant storage .

In some implementations to determine whether a resource request is allowed or should be authenticated the policies enforcement application applies one or more verification rules to the request including for example and as described above determining whether the resource is owned by or accessible to the user s organization for example by comparing an organization identifier that uniquely identifies the organization with a predetermined allowed resource list . As another example another rule may require the policies enforcement application to verify that the particular user owns or has been granted access privileges to the requested resource for example by comparing a user identifier that uniquely identifies the user with a predetermined allowed resource list . If the verification rules are satisfied the policies enforcement application or the internal connection then attaches a cookie or other security token or authentication information to the resource request. The internal connection then communicates the resource request for retrieval of the identified resource. Additionally one or both of the external connection and the internal connection also can bundle or package groups of resource requests into one or more packaged resource requests for retrieval of the resources in block . Bundling resource requests into a single request or a reduced number of requests can make communication of the resources more efficient because the total number of round trips needed to retrieve all of the requested resources can be reduced.

Resources retrieved in block via responses received through the external connection or the internal connection are then communicated to the content provider which then provides the resources back to the interaction manager . The policies enforcement application or the interaction manager removes any authentication or session cookies from the responses and resources. The interaction manager communicates the retrieved resources to the service interface which then communicates the retrieved resources to the document rendering service in block . In some implementations the interaction manager packages or bundles all or a subset of the retrieved requested resources for example those received within a predetermined duration of time into for example a ZIP file before communicating the resources in block . Bundling resources into a single response or a reduced number of responses can make communication of the resources more efficient. Packaging the resources into a ZIP file also can be advantageous because the resources can be compressed. The document servlet receives the retrieved resources sent in block and subsequently communicates the retrieved resources to the flow manager when then communicates them to the proxy servlet . The proxy servlet passes the retrieved resources to the rendering engine in block .

The rendering engine subsequently generates the platform independent document in block . More specifically the rendering engine first renders the earlier received HTML or other markup language code and the retrieved resources and subsequently prints saves or otherwise converts the rendered document to the platform independent version of the document. For example as described above the rendering engine may generate the platform independent document as a PDF file or image file or other portable file format. In some implementations the rendering engine then communicates the platform independent document to a specific address for example a URL indicated in the initial response sent from the flow manager and passed by the proxy servlet to the rendering engine in block . Again the proxy servlet intercepts the communication containing the platform independent document and passes it to the flow manager . In some implementations the flow manager temporarily stores the platform independent document in the temporary storage . When the flow manager determines that the rendering engine is finished rendering the platform independent document the flow manager retrieves the platform independent document from the temporary storage and communicates the platform independent document to the document servlet which then communicates the platform independent document to the document generation adapter . In some implementations the document generation adapter then communicates the platform independent document to the core application for transmission to the user s computing device in block .

It should be appreciated that some or all of the blocks of the method may be repeated in some instances. For example after a resource is received by the rendering engine in block the rendering engine then parses the resource. After parsing the resource the rendering engine may discover one or more other resources identified in the parsed resource. In such instances the method returns to block with the rendering engine generating and communicating requests for these additional newly identified resources. The repetition of blocks can continue as long as there remain any resources that have yet to be requested and received by the rendering engine for example whether identified in the initial print request received in block or identified in other received resources requested based on the initial print request.

Additionally in some implementations in which the database system is a multi tenant database system hosting and providing services to a plurality of organizations the system and more specifically the application servers providing the document rendering service can host any suitable or appropriate number of parallel executing or executable rendering engine processes or instances each of which is configured to generate a platform independent document. In some implementations the proxy servlet also can include one or more parallel executing or executable proxy service processes or instances to intercept requests from the rendering engine processes. In some implementations each request for a resource and each response including a received resource whether sent by the rendering engine or another element of the document rendering service or document generation adapter is tied to or identified with the respective user for which the resource was requested and more generally for which the platform independent document is being provided. However rather than attach the user s permanent unique identifier identifying the user within the system to the requests generated and communicated by the rendering engine in block the rendering engine attaches a unique token to the request. Alternatively the flow manager can attach the token to the requests.

For example in some implementations between blocks and after the flow manager receives the print request and HTML from the document servlet and before the flow manager retrieves the HTML from the temporary storage for passage to the rendering engine the flow manager requests a unique identity token not to be confused with the authentication token or cookie described above that is not shared with the rendering engine or with any other component of the document rendering service from the session manager . In such implementations a purpose of this identity token can be to uniquely identify and distinguish between multiple page rendering engine instances that may or may not be executing at the same time. The unique identity token also can be used for example as a part of the session manager interface to send requested resources back to the appropriate requesting page rendering engine instance .

For example in some implementations the session manager records or stores the unique identity token for example a unique number with the initial request received in block . This unique identity token can then be added to each subsequent request made by the rendering engine in the preparation of the requested platform independent document including the initial HTML request sent from the rendering engine after block as well as the subsequent resource requests communicated in block . The unique identity token also can be included within every response received by the flow manager . For example the retrieved resources communicated to the document servlet in block can include the unique identity token. In implementations or instances in which the flow manager is handling requests for a number of users and managing a number of rendering engines the unique identity token informs the flow manager which requests and responses are associated with which rendering engine and which user s platform independent document. In this way multiple parallel executing rendering engines can run and prepare platform independent documents in parallel for a number of respective users.

The specific details of the specific aspects of implementations disclosed herein may be combined in any suitable manner without departing from the spirit and scope of the disclosed implementations. However other implementations may be directed to specific implementations relating to each individual aspect or specific combinations of these individual aspects. Additionally while the disclosed examples are often described herein with reference to an implementation in which an on demand database service environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present implementations are not limited to multi tenant databases or deployment on application servers. Implementations may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the implementations claimed.

It should also be understood that some of the disclosed implementations can be embodied in the form of various types of hardware software firmware or combinations thereof including in the form of control logic and using such hardware or software in a modular or integrated manner. Other ways or methods are possible using hardware and a combination of hardware and software. Additionally any of the software components or functions described in this application can be implemented as software code to be executed by one or more processors using any suitable computer language such as for example Java C or Perl using for example existing or object oriented techniques. The software code can be stored as a computer or processor executable instructions or commands on a physical non transitory computer readable medium. Examples of suitable media include random access memory RAM read only memory ROM magnetic media such as a hard drive or a floppy disk or an optical medium such as a compact disk CD or DVD digital versatile disk flash memory and the like or any combination of such storage or transmission devices. Computer readable media encoded with the software program code may be packaged with a compatible device or provided separately from other devices for example via Internet download . Any such computer readable medium may reside on or within a single computing device or an entire computer system and may be among other computer readable media within a system or network. A computer system or other computing device may include a monitor printer or other suitable display for providing any of the results mentioned herein to a user.

While some implementations have been described herein it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present application should not be limited by any of the implementations described herein but should be defined only in accordance with the following and later submitted claims and their equivalents.

