---

title: Touch input data handling
abstract: A system for enabling a tablet input object is described. A tablet input object can take various inputs from touch, a mouse, and a pen and sends their information to an application or operating system. Also, a pen message pathway may also be used to handle touch messages, thereby reusing an existing pen message pathway for messages created by something other than a pen.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09013438&OS=09013438&RS=09013438
owner: Microsoft Technology Licensing, LLC
number: 09013438
owner_city: Redmond
owner_country: US
publication_date: 20140602
---
This patent application is a continuation of U.S. patent application Ser. No. 13 041 595 filed Mar. 7 2011 entitled TOUCH INPUT DATA HANDLING which is a continuation of U.S. patent application Ser. No. 11 419 496 filed May 21 2006 entitled TOUCH INPUT DATA HANDLING granted U.S. Pat. No. 7 928 964 on Apr. 19 2011 which is a continuation in part of U.S. patent application Ser. No. 11 246 567 filed Oct. 11 2005 entitled MECHANISM FOR ALLOWING APPLICATIONS TO FILTER OUT OR OPT INTO TABLE INPUT granted U.S. Pat. No. 7 986 307 on Jul. 26 2011 which claims priority to U.S. Provisional Patent Application 60 673 771 filed Apr. 22 2005 entitled TOUCH INPUT APPLICATION PROGRAMMING INTERFACES whose contents are expressly incorporated herein by reference.

This invention relates to computing and more particularly to the field of touch in computing systems.

Typical computer systems especially computer systems using graphical user interface GUI systems such as Microsoft WINDOWS are optimized for accepting user input from one or more discrete input devices such as a keyboard for entering text and a pointing device such as a mouse with one or more buttons for driving the user interface. The ubiquitous keyboard and mouse interface provides for fast creation and modification of documents spreadsheets database fields drawings photos and the like. However there is a significant gap in the flexibility provided by the keyboard and mouse interface as compared with the non computer i.e. standard pen and paper. With the standard pen and paper a user edits a document writes notes in a margin and draws pictures and other shapes and the like. In some instances a user may prefer to use a pen to mark up a document rather than review the document on screen because of the ability to freely make notes outside of the confines of the keyboard and mouse interface.

One aspect of stylus based computing is the use of touch input for use with stylus based computers. Some computing systems use a passive digitizer that responds to any type of contact including a person s fingertip . Conventional computing systems do not provide programmatical access of touch input to control the behavior of systems. In short developers need to write individualized code for each application to allow a user to use touch in place of mouse or keyboard input.

Aspects of the present invention address one or more of the problems described above thereby improving the use of touch in computing systems. An input type may be determined as well as intentional and accidental contact in an area. These and other aspects are set forth in greater detail below.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Aspects of the present invention relate to allowing programmatical access to computing systems to allow touch based user input to function as other inputs.

This document is divided into sections to assist the reader. These sections include overview characteristics of ink terms general purpose computing environment pen based computing platforms tablet input techniques touch APIs and repurposing of ink APIs.

It is noted that various connections are set forth between elements in the following description. It is noted that these connections in general and unless specified otherwise may be direct or indirect and that this specification is not intended to be limiting in this respect.

Aspects of the present invention relate to providing a tablet input programmatical interface element or elements that allow touch input to be used as stylus based input. In some aspects touch based events are provided with additional information to allow subsequent processing to handle the touch input as it were stylus based or mouse based input. Touch may include contact with a digitizer using a user s fingertip finger nail or the like. Further in another aspect of the invention the input using touch is another form of input. Access to touch data may be performed in various ways. In some situations touch input may be treated as pen or stylus input when using for instance a fingernail or other small contact area of a person s finger.

As known to users who use ink pens physical ink the kind laid down on paper using a pen with an ink reservoir may convey more information than a series of coordinates connected by line segments. For example physical ink can reflect pen pressure by the thickness of the ink pen angle by the shape of the line or curve segments and the behavior of the ink around discrete points and the speed of the nib of the pen by the straightness line width and line width changes over the course of a line or curve . Further examples include the way ink is absorbed into the fibers of paper or other surface it is deposited on. These subtle characteristics also aid in conveying the above listed properties. Because of these additional properties emotion personality emphasis and so forth can be more instantaneously conveyed than with uniform line width between points.

Electronic ink or ink relates to the capture and display of electronic information captured when a user uses a stylus based input device. Electronic ink refers to a sequence or any arbitrary collection of strokes where each stroke is comprised of a sequence of points. The strokes may have been drawn or collected at the same time or may have been drawn or collected at independent times and locations and for independent reasons. The points may be represented using a variety of known techniques including Cartesian coordinates X Y polar coordinates r and other techniques as known in the art. Electronic ink may include representations of properties of real ink including pressure angle speed color stylus size and ink opacity. Electronic ink may further include other properties including the order of how ink was deposited on a page a raster pattern of left to right then down for most western languages a timestamp indicating when the ink was deposited indication of the author of the ink and the originating device at least one of an identification of a machine upon which the ink was drawn or an identification of the pen used to deposit the ink among other information.

Among the characteristics described above the temporal order of strokes and a stroke being a series of coordinates are primarily used. All other characteristics can be used as well.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during startup is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball pen touch based input a person s finger and or palm or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In some aspects a pen digitizer and accompanying pen or stylus are provided in order to digitally capture freehand input. Although a direct connection between the pen digitizer and the user input interface is shown in practice the pen digitizer may be coupled to the processing unit directly parallel port or other interface and the system bus by any technique including wirelessly. Also the pen may have a camera associated with it and a transceiver for wirelessly transmitting image information captured by the camera to an interface interacting with bus . Further the pen may have other sensing systems in addition to or in place of the camera for determining strokes of electronic ink including for example accelerometers magnetometers and gyroscopes.

It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output that multiplies the input parameter by itself in accordance with the precision parameter outputting the result as the output parameter and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface which after processing the value passed with input to calculate the square of an input by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of code Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

The stylus may be equipped with one or more buttons or other features to augment its selection capabilities. In one embodiment the stylus could be implemented as a pencil or pen in which one end constitutes a writing portion and the other end constitutes an eraser end and which when appropriate in the running application and moved across the display indicates portions of the display are to be erased. Other types of input devices such as a mouse trackball or the like could be used. Additionally a user s own finger could be the stylus and used for selecting or indicating portions of the displayed image on a touch sensitive or proximity sensitive display. Consequently the term user input device as used herein is intended to have a broad definition and encompasses many variations on well known input devices such as stylus . Region shows a feedback region or contact region permitting the user to determine where the stylus as contacted the display surface .

In various embodiments the system provides an ink platform as a set of COM component object model services that an application can use to capture manipulate and store ink. One service enables an application to read and write ink using the disclosed representations of ink. The ink platform may also include a mark up language including a language like the extensible markup language XML . Further the system may use DCOM as another implementation. Yet further implementations may be used including the Win32 programming model and the .Net programming model from Microsoft Corporation.

The tablet input system may be supported for example by a tablet input service. The tablet input service provides programmatic to input on stylus enabled computing systems. The touch input may be combined with a stream from the digitizer relating to stylus input.

Some aspects of the present invention relate to providing easy programmatical access to common input functionality. This may be performed using a tablet input service object that exists on a client. The corresponding server object may exist in the ink services platform tablet input subsystem commonly referred to as wisptis.exe . The service object and the client object may communicate over an Out of Process RPC remote procedure call via COM for instance.

The tablet input service object may be instantiated in the client address space. The tablet input service object may create the server object in the ink services platform tablet input subsystem. The client object may forward calls to the server object.

Situations may exist where the server object is terminated. In this regard all RPC calls to the server object may then fail when the ink services platform tablet input subsystem is terminated. The client process may then discard all internal references and cocreate a fresh copy of the server object. The COM would then restart the ink services platform tablet input subsystem via the tablet input service. The tablet input service can monitor the lifetime of the server object startup suspension termination and disconnection for instance . The client side may then wait on a named event. This event may be signaled by a newly started instance of the ink services platform tablet input subsystem.

Inking objects may become disconnected from the rest of the system. Inking objects may include a tablet tablet context cursor buttons and the like. These may need to be reconnected to the system. Here the ink services platform tablet input subsystem may maintain state information such as tablet context id cursor id etc . On reconnect the client side object may then establish the mapping between the old ids and the newly created ids in the ink services platform tablet input subsystem. An alternative solution where the client side object may notify applications to refresh these caches ids.

The tablet input object may define a number of different types of inputs including but not limited to no tablet input type a mouse input type a pen input type and a touch input type. These may be represented as named values for example explicitly as constants in an enumeration data structure or as named entities on an object as appropriate for the programming language or protocol being used.

Other input types may also be used. For instance another input type may be whether or not a digitizer is integrated with a display.

The tablet input object may include an enumeration of different types of broadcasts including at least one of broadcasting all pen in range pen out of range and pen shake events. Here this defines what will be sent when an event occurs.

The application programming interface allows an application developer a pathway of knowing what kind of physical contact is being initiated by the user or a pathway of requiring a particular kind of interaction . The following lists various additional aspects to the API 

a. TabletInputType enumerates the kinds of input possible on the system. This may be utilized by an ITabletInputService implementation while evaluating how to process or direct a given input signal.

b. TabletInputBroadcastType enumerates the kind of messages that the input service may send to running applications when something interesting happens for instance when the pen is in range of the digitizer out of range of the digitizer etc. .

c. ITabletInputService provides methods an application can use to interact with the input service and or manipulate its behavior. This may provide parity with existing control sets including for instance with synchronous asynchronous input systems ink collection systems and the like 

d. An interface like ITabletInputBroadcastSink or equivalent should be implemented by an application that has registered to receive a broadcast or other message or equivalent in order to be notified of one or more interesting system events. When interesting events occur the input service can walk through the registered applications and call the OnEvent method for each as appropriate based on the specific notification .

Further the developer may be allowed to choose the type of pathway the information should follow. For instance a developer may be allowed to prefer all input events be treated as touch events for example if the system is to be used as part of a touch sensitive kiosk . Alternatively or additionally the developer may be allowed to specify how applications handle information pathways. For example an application may not allow drag and drop behavior over its displayed application window. Here the application may require that all events over its application windows be interpreted as pen input mouse input touch input or combinations of these types.

One advantage to a tablet input object is that it can allow control of the system enable disable specific types of input pen touch determination of what types of inputs the system has for example to adjust UI elements size and receipt of broadcasts and or directed messages. It is noted that broadcasting messages are an optional type of pathway for conveying information. In one example broadcasts may be different from pen touch events in a sense that they happen regardless of whether or not the inking surface exists.

Also aspects of the tablet may include touch specific options. For instance a tablet input panel used for inking and having the ink recognized and inserted into an application may include a finger friendly user interface that appears when activated by a touch. Similarly basic shell controls may behave differently to touch. For example shell controls such as scroll bars or title grab bars may grow in size to make control of the shell via touch easier.

b. Differentiating mouse events generated by touch from those from a pen or mouse input. The differentiation may occur based on additional information being passed with the mouse events.

c. Parity with existing pen messages e.g. pen up pen down that may reflect for instance a finger contacting a tablet and a finger being removed from a tablet .

d. Control of touch modes for instance using a kiosk mode . A kiosk mode may include a limited interface mode where user interface items are larger for instance larger buttons and the user is not provided with a keyboard or mouse. Users may be constrained to full screen applications thereby limiting their use of the kiosk. Examples of a kiosk include automated check in screens at an airport or gift registries in department stores. 

Touch input may be disabled over certain user interface elements. For instance touch input may be disabled in a number of ways including but not limited to 1 if the input is received via Windows messages then by looking at and responding to the message s extra info or equivalent and 2 if the input is received via touch ink stream then a by setting a window atom property one which can be queried by the message sender b by responding to a special message like TabletQuerySystemGestureStatus or c by providing information in a central store e.g. registry indexed via class name or executable name.

For example message handlers for various mouse messages may include an indication that the mouse events were created by touch. Here for instance one may extract the additional information using a method like GetMouseExtraInfo or the equivalent and inspect the information for a touch signature. Once a message is determined to have been generated by touch one can ignore the areas of the user interface unaffected by touch input.

Similarly to make UI changes the system may inspect mouse messages and determine if the events were the result of touch input. For instance the system may use GetMouseExtraInfo or the equivalent to aid in the determination. If it is determined that messages originated from a touch device then the system may implement UI changes including for example larger grab handles around visual objects may be used to allow easier control of the visual objects. Also by determining if mouse events were created by touch touch specific behavior may be enabled for a button that was pressed or an operation that was performed.

Touch packets may contain the same or different set of properties as compared to pen packets. For example if different confidence and area indicating the area contacted may replace or complement pen HID properties such as tilt. Confidence possibly including a measure of the digitizer device s confidence that the contact was intentional. Low confidence may mean the contact probably was accidental or a user s palm and high confidence may mean the contact was probably intentional or a user s finger. Also the HID usages reported may be a subset of those pen uses. Distinct identifiers GUIDs may be associated with the confidence and area properties. Further touch packets may introduce the following new properties area specifying the area width height and pressure.

Mouse window messages generated by touch or pen may have an additional signature attached. For instance WM LBUTTONDOWN the Windows message associated with left mouse button down may include additional information. The system may use GetMessageExtraInfo or equivalent for example to retrieve the pen or touch signature from mouse messages.

As an example if the signature equals 0xFF5157NN where NN is the cursor ID the message would be identifiable as having been generated by a pen. If the signature equals 0xFFAEA8NN where NN is the cursor ID the message is identifiable as having originated from a touch device. Alternatively the signatures for may have the upper 24 bits of the 32 bit DWORD be the same for pen and touch 0xFF5157nn. Pen and touch may be differentiated by setting bit to for touch for instance. So where pen messages may typically have signatures 0xFF515700 pen tip and 0xFF515701 eraser touch messages may have signature 0xFF515780 touch . This can be done so that a single bit check can be performed to test against both pen and touch messages yet differentiation is also possible. This also helps with compatibility with older versions of pen input software. Using this extra information the touch or pen created mouse events may be placed in processing streams to be handled as mouse events.

In some environments including tablet input systems that include synchronous and asynchronous interfaces to handle pen or mouse events a system can determine if a notification is from a touch device by retrieving tablet context ID. For instance a system may determine the tablet context ID look to seek if one of the properties of the identified tablet includes the tablet s name and checking to see if the term touch appears in the tablet s name property. The occurrence of the term touch may be a strong indication that the tablet supports touch input.

Some messages may not be relevant to touch input where there is no support in some tablets. However some messages may be relevant to both touch input and pen input systems. For example pen broadcast messages cursor in range cursor out of range and shake may have touch equivalents with respect to some tablets.

Like a pen touch may be used to control how gestures are interpreted over a user interface. For example a system using a mechanism like a TabletQuerySystemGestureStatus message or equivalent can set various touch gesture preferences such as tap preferred drag preferred and the like over parts of or all of a user interface.

Various touch modes may be enabled or disabled. For instance a hover widget a visual representation of when a cursor is over a specified area can be enabled disabled through a TabletQuerySystemGestureStatus message or equivalent . Additionally the system may include a mode accessible through the window message for disabling touch palm masking. Palm masking is the ability of the system to prevent digitizer or screen contact with a person s palm from performing unexpected operations. A benefit of an EM digitizer over a typical resistive touch digitizer is that the user is able to rest his or her palm on the screen while writing with an EM stylus. When a touch sensitive digitizer is used the system may desire to know how to differentiate intentional touch contact from unintentional palm contact while writing. Furthermore in an entirely touch enabled environment if the screen is large enough and or the orientation of the screen favors it the user may rest his or her palm on the screen while using a finger to touch buttons on the screen for instance a calculator application .

Touch application programming interfaces permit developers to allow touch input to be used as a mouse or pen input. A number of APIs for touch are described below exposing device kind palm rejection and all touch enabled properties application controlling widget appearance and disappearance and mouse message signatures.

A new type of input device may be provided for computing systems that provides sensitivity to touch input based on resistive capacitive or other known position sensing technologies. Using a touch enabled input device the type of touch device may be exposed to a developer. For example an operating system or an application may determine that it wants to allow touch input based on the type of input device available.

The operating system may support an ink tablet object that is able to be queried for a tablet s properties. The following is an illustrative example of a type of device type format that may be used in a COM environment or other environments.

a. The tablet device kind may be enumerated as a mouse pen digitizer or touch digitizer or other kinds of digitizer .

When using a presentation system in a tree based rendering environment the type of tablet device may be determined using a Device Kind property of a tablet device.

For instance a computer system may include a module that receives a request for a type of tablet device connected to the computer system. The type of tablet device may be stored as a property accessible by the module. The module may access the storage and retrieve the property for instance Device Kind and forward this information to a requester. The requester may be the operating system an application or a remote process. In the example of the requester being an application the application may use the type of device to determine the type of functionality provided to a user. If the device is an active digitizer for example a Wacom type digitizer that requires a stylus with a tip whose location can be determined by the digitizer then the application may provide active pen related functionality to a user. Active pen functionality may include functionality of hover pressure angle of pen etc. If the device is a passive digitizer or touch digitizer for example one that determines a location of contact by resistive or capacitive determinations then the application may provide only touch related functionality to the user. If the device enables both stylus input using an active digitizer and touch input using a passive stylus or finger then the application may provide both sets of functionality to the user.

Retrieving a device type property of the digitizer provides a benefit in that the operating system or application can modify the level or type of functionality provided to a user based on the device type of the digitizer. An alternative approach is to individually specify which types of functionality are supported by the digitizer. In this latter approach it is possible that a number of different types of functionality would be common across a number of types of digitizers and therefore be duplicative. Using a single device type to allow the modification of functionality provided to a user may eliminate the need for long and complex property specifications for various digitizers.

In an ideal environment for developers users would be constrained to only using a single figure to touch a tablet surface. However users tend to rest other fingers their palms or forearms on tablet surfaces. These points of contact other than a user s desired finger or finger nail contact can cause issues with deciding which contact location is intended. These different types of contacts can be labeled as high and low confidence contacts. For instance when a palm or otherwise bad contact low confidence contact comes in range with the touch screen the system by default can reject such an input thereby preventing an application from seeing the input . However an application can have the capability to tell to the system to pass all touch input when over an application window. For example an application can implement a feature of erasing ink with a palm or it can alter ink thickness based on area of contact. This can be accomplished with accessing an allow all touch property of a real time stylus.

In some instances an operating system may control how a pointer associated with touch input may be displayed. Alternatively an application may control how a pointer is displayed. For instance a touch pointer a.k.a. a touch widget may be controlled not to appear on inking surfaces but controlled to show up elsewhere. An example of this behavior is that when people are inking a separate touch pointer or widget is more distractive than useful. However when touch is to be used as a pointing device like a mouse over shells menus etc. having a touch pointer can be useful. An application can influence this behavior by specifying a bit or bits in an input profile for the application. In response a system may force a touch widget to appear or not appear over a given window.

The above approach may be performed in managed code un managed code and in tree based presentation systems. This may be further specified via a property of the OS as compared to the application or in compatibility settings for instance.

An application receiving mouse messages can be capable of determining whether the messages are coming in response to interaction by pen. This enables touch enabled applications to use touch enhanced features while permitting non touch enabled applications to continue to interpret touch input as a pen message or even more simply as a mouse message . For instance this may be done using Get Message Extra Info as an illustrative method. In an illustrative operating system one may differentiate between pen and touch. To maintain compatibility and make applications written to pen respond to touch the same way the signatures may be different to allow an application to differentiate the two types of input if so enabled. For instance extra information associated with a pen event may include the number 0xFF515700. The extra information associated with a touch event may include the number 0xFF515780. By detecting which number is associated with the extra information of a pen event a system may determine whether a pen or touch event has occurred. The following illustrative example shows how messages can be identified as originating with a touch device or a stylus device.

Ink APIs are used in current operating systems. An ink driver uses x y input information a tip being used and the like and sometimes pressure tilt inverted status barrel button being pressed etc. as well in a HID human interface device . A touch driver may use similar data streams. Because of the similarity of data the data streams of ink may be used for touch. This fact allows applications written for ink to also use touch input even though the applications may have been written prior to touch input having been introduced.

This common code path provides legacy support of preexisting applications or applications where developers have not considered the use of touch input as an input source. It also means that developers do not need to incorporate a new code path into applications to handle touch input. Further by allowing applications to differentiate between touch and pen input based on extended signatures the difference may be hidden or ignored when needed then used when an application wants to handle the input types differently.

Aspects of the present invention have been described in terms of preferred and illustrative embodiments thereof. Numerous other embodiments modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure.

