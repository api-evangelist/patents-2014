---

title: Configurator for secure feature and key manager
abstract: A computing device receives a feature name or key name for an integrated circuit comprising a security manager core and an additional component. At least one of a) the additional component is associated with the key name or b) a feature provided by the additional component is associated with the feature name. The computing device receives a specified number of bits associated with the feature name or the key name, and maps the feature name to a feature address space or the key name to a key interface of the security manager core based at on the specified number of bits. The computing device generates at least one hardware description logic (HDL) module based on the mapping, wherein the at least one HDL module is usable to configure the security manager core for delivery of payloads associated with the feature name or the key name to the additional component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436848&OS=09436848&RS=09436848
owner: CRYPTOGRAPHY RESEARCH, INC.
number: 09436848
owner_city: San Francisco
owner_country: US
publication_date: 20140528
---
This patent application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 829 173 filed May 30 2013.

Presently system on a chip vendors may sell many different varieties of the same chip where each variety is configured for a particular application. Chip configuration often occurs by blowing one or more fuses or otherwise programming a one time programmable memory on the chip. This type of chip configuration is generally a one way process and cannot be undone. One method of circumventing the permanence of the configuration process is to add redundant or spare bits within the one time programmable memory that can be combined to modify a previous setting e.g. by exclusive ORing multiple bits together to produce the final configuration setting . This type of redundancy has limited flexibility however and requires additional fuses which take up additional real estate on the chip. In addition having multiple fuses behind a setting does not remove the need to perform multiple programming steps to configure chips adds cost. Likewise configurations today continue to be performed by chip vendors or their contractors who then maintain inventories of chips with multiple fuse configurations.

The need for secure systems and applications is growing. Presently allegedly secure chips are often programmed with security keys on the factory floor. Secure keys may be used in a variety of ways such as for example to protect stored data control access to digital content or encrypt authenticate data used in transactions. Today these keys can be stored in a one time programmable memory which may hold keys directly or hold a base key that is used with cryptographic functions that derive keys for various functions. Typically security is provided by performing the key loading process in a secured facility.

Embodiments are directed to a configurator also referred to herein as a configurator system for integrated circuits ICs that incorporate a security manager core. The configurator manages mappings of customer device specific features to a feature space of the security manager core and the mappings of customer device specific keys to a key interface of the security manager core e.g. to key buses of the security manager core . The configurator may additionally determine mappings or routings between the security manager core and additional components in an integrated circuit. Once the integrated circuit design is complete the configurator additionally generates compiler mapping files firmware mapping files and or design documentation based on the determined mapping. The configurator may significantly reduce an amount of design work that an engineer performs to configure and lay out an integrated circuit that includes a security manager core.

Reference will now be made in detail to the present example embodiments illustrated in the accompanying drawings.

Reference is now made to which shows in block diagram form an example ecosystem . As shown in system may include an integrated circuit IC provider a third party IP provider an IC manufacturer an IP and or security key provider a security service a billing and reporting service a product vendor a device administrator and an end user . For simplicity in this example ecosystem only one of each entity is shown. In practice an ecosystem consistent with the principles described herein may have one or more of each entity i.e. multiple IC manufacturers supplying identical ICs multiple product vendors providing products that utilize the same IC design and multiple customers . Some steps shown in may also involve several companies e.g. IC fabrication may involve different companies and or stages to manufacture wafers perform initial testing cut wafers package chips etc. . Additionally in some instances some entities and their functions could be contained within a single entity. For example some companies both design and manufacture ICs in which case IC manufacturer and IC provider could be the same entity.

IC provider is an entity which provides chip designs to IC manufacturer for chip production. Specifically IC provider provides chip designs for configurable ICs such that some aspects of the chip may be configured e.g. for specific applications or to enable disable particular features after manufacture. For example IC provider can include in the design a security manager SM core or can specify that the manufactured IC includes an SM core. An IC including an SM core is referred to as a SM enabled IC. Among other things the SM core allows one or more configurable features Features of the IC to be locked or unlocked or otherwise configured e.g. such as tuning a PLL to adjust a CPU s performance or delivering a secret key for use by the Feature depending on the desired configuration and security needs. An SM enabled IC includes for example one or possibly more SM cores and one or more secure persistent memories. And as discussed in detail below the SM enabled IC optionally may include some other elements e.g. one or more extractors one or more Features etc. or some combination thereof. IC provider can include a root public key as a portion of the mask provided to IC manufacturer . IC provider may obtain the root public key from security service who may act as a root authority.

The root authority is an entity that is associated with a root authority system that manages SM programming capabilities and can assign subsets of capabilities to one or more delegate authority systems associated with one or more delegate authorities. As discussed in more detail below the root authority system may control configuration of an SM enabled IC. Configuration of an SM enabled IC may include for example performing Feature management of the SM enabled IC performing key management of the SM enabled IC or a combination thereof. The root authority system may control Feature management of the SM enabled ICs possessed by other entities in system . For example the root authority system may directly create cryptographically verifiable e.g. digitally signed commands to lock unlock enable disable determine a value of or configure Features associated with the SM enabled ICs. Additionally the root authority system may create a limited authorization that allows configuration changes to SM enabled ICs to be created by IC manufacturer product vendor device administrator end user other entities or some combination thereof.

The root authority system may also control key management for the SM enabled ICs. For example the root authority system may authorize the SM core to securely deliver payloads e.g. secret keys or other values to other parts of the SM enabled IC including to software executing on the SM enabled IC . The root authority system may authorize one or more delegate authority systems to securely deliver payloads.

As noted above the root authority is an entity associated with the root authority system. Accordingly while embodiments described herein may refer to security service as the root authority it is contemplated that other entities may act as the root authority. For example IC provider product vendor or some other entity.

The previous paragraphs describe the root authority granting permissions to another entity. The recipient of these permissions is referred to as a delegate authority. In some instances a delegate authority is associated with a delegate authority system that has been given a subset of the root authority system s SM programming capabilities. The subset of SM programming capabilities may differ between delegate authority systems. The delegate authority may be product vendor IC manufacturer device administrator some other entity or some combination thereof.

As discussed in detail below the root authority system one or more delegate authority systems or some combination thereof may have some or full control over modification e.g. Feature and key management operations of the SM enabled ICs in system .

IC manufacturer is an entity that manufactures ICs. As discussed above some ICs are configurable such that the chip may be configured for specific applications after manufacture. Systems on a chip SOC application specific integrated circuits ASICs FPGAs mobile radio chips and processors e.g. CPUs are examples of ICs suitable for use with embodiments described herein. In general feature management is most particularly appropriate for chips that integrate multiple functions that can be used independently or that have functions that are configurable or have capabilities that should be enabled disabled at different stages in the chip lifecycles e.g. such as debug test modes . And for key management applications any chip that utilizes cryptographic keys or similar secrets may be a good candidate. IC manufacturer may manufacture ICs that include an SM core. IC manufacturer may embed one or more security keys a device ID initial Feature configuration settings or some combination thereof into the SM core as part of its manufacturing process testing process or both. To do this IC manufacturer is equipped to provide a first stage of customization which is discussed in detail below. Specifically IC manufacturer may be a delegate authority such that it is able to make specific configuration changes to SM enabled ICs. For example in an IC that contains multiple processors IC manufacturer may be allowed to set the number of processors usable in the SM enabled IC but not the clock rate for each processor. In some embodiments not shown IC manufacturer and IC provider are the same entity.

Additionally IC manufacturer may conduct testing on the manufactured ICs to ensure they are operating within design specification. In some cases testing processes such as wafer sort may be performed at a different facility and or by a different company than IC fabrication in which case the label IC manufacturer represents the combination of these roles steps. IC manufacturer provides the SM enabled ICs to product vendor .

Product vendor incorporates the SM enabled ICs into one or more products e.g. SM enabled devices which are then made available to end user . In some embodiments product vendor is a device or service retailer and makes the SM enabled devices directly available to end user . In other embodiments product vendor distributes the SM enabled devices to one or more third party device or service retailers not shown for distribution to end user .

Product vendor may add additional customization of the SM enabled ICs. To do this product vendor may be a delegate authority such that it is able to make certain specific configuration changes to SM enabled ICs. For example as a delegate authority product vendor s delegate authority system may be allowed certain capabilities by the root authority system.

Even after a product is sold to end user it is also possible to further configure or enable features in a SM enabled IC. For example end user and or the product may coordinate with product vendor device administrator security service a delegate authority a root authority or some combination thereof to enable Features in a SM enabled IC. For example this process may involve transmitting a request over a network e.g. by using a radio in the product to transmit a request message via a cellular data network and receiving e.g. by using a radio in the product to receive a message from a cellular data network a chip specific message that authorizes the requested configuration changes.

In some instances product vendor may also act as an application author for one or more applications installed on a SM enabled device. Additionally product vendor may acts as an application operator who administers functionality associated with the application. Similarly product vendor may also act as an operating system vendor distributing an operating system compatible with the SM enabled devices. Product vendor may also act as a service operator such as a mobile network operator e.g. managing one or more services or capabilities that may be available to the SM enabled device.

In other embodiments other entities one or more third parties not shown or some combination thereof may be the application author operating system vendor application operator or some combination thereof.

IP and or security key provider manages security keys for use with the SM enabled IC. The security key values including public keys and secret keys may be provided to IC Manufacturer security service product vendor device administrator or some combination thereof. In some embodiments not shown IP and or security key provider may also provide security keys to third party IP provider IC provider or some combination thereof.

Security service may act as a central distributor for security keys which may be used by entities in the ecosystem. For example security service may obtain the security keys from IP and or security key provider or from multiple security key providers and distribute them to other entities in system . For example a SM enabled mobile telephone applications processor may be programmed with keys from a plurality of IP and or security key providers including many that operate independently and or are not tied to a specific IC provider . Examples of such IP and or security key providers include without limitation electronic payment systems DRM anti piracy systems identity systems etc. In some embodiments security service may include a root authority system and acts as the root authority for the SM enabled IC. In other embodiments the aggregation and root authority roles may be separate. As a root authority security service may authorize one or more other entities in system to be delegate authorities to for example lock or unlock certain Features associated with SM enabled ICs securely deliver keys to parts of the SM enabled IC or to software executing on the SM enabled IC etc. As discussed in detail below a delegate authority is authorized to make certain configuration changes to the SM enabled ICs subject to the privileges cryptographically granted by the root authority.

Billing and reporting service may couple to some or all of the other entities within system . In some cases one or more entities in system may wish to charge a fee for certain configuration settings to the SM enabled ICs e.g. to enable a value added feature . Billing and reporting service tracks fees associated with various transaction types by various entities in the ecosystem. For example an entity may be required to pay to enable or disable Features associated with the SM enabled IC s or deliver a key to the SM enabled IC s .

System may include a third party IP provider or as noted previously several third party IP providers . A third party IP provider may provide one or more Features or parts of Features to IC provider for integration into the SM enabled IC. Or in some instances third party IP provider may simply license IC provider to use one or more existing Features or parts of Features. The integrated Feature may be enabled by the root authority or a delegate authority operating within its delegated capabilities. In some embodiments the Feature is not enabled e.g. unlocked until third party IP provider is compensated for the use of the IP block. For example as discussed in the context of billing and reporting service a delegate authority system may not be provided with the ability or authorization to authorize Feature activation until payment is received by billing and reporting service and or by third party IP provider .

End user is an entity who uses the product e.g. device containing the SM enabled IC . End user may for example purchase the SM enabled device from IC Manufacturer product vendor device administrator or some third party device or service retailer.

In some embodiments system includes device administrator . Device administrator may be a delegate authority such that it is able to make specific configuration changes to SM enabled ICs. End user may then coordinate with device administrator or security service etc. to enable Features in a SM enabled IC.

Additionally in some embodiments the root authority may securely allow other entities in system to enable or partially enable one or more Features of a SM enabled IC or SM enabled device for testing. For example the root authority via the root authority system may enable or partially enable a Feature in the SM enabled IC for a set period of time or for a number of power ups e.g. such that the Feature is only enabled until the next time the SM enabled IC is powered up or reset . Similarly in some embodiments the delegate via the delegate authority system if permitted by the root authority may also be allowed to enable or partially enable Features of the SM enabled IC or device for testing.

Reference is now made to which shows an example lifecycle for a SM enabled device within an ecosystem e.g. system . While the lifecycle discloses the following steps in a particular order it is appreciated that at least some of the steps can be moved modified or deleted where appropriate.

In step a SM enabled IC is designed. As discussed in detail below the design process may utilize for example a configurator a netlist received from the SM vendor and a means to generate hardware configuration keys and constants. For example this generation process may involve the root authority system e.g. in some embodiments the root authority system can generate a key pair for a public key cryptosystem where the public key is exported as a hardware configuration key and the private key is retained in the root authority system e.g. for authorizing delegates . The SM enabled IC design may include one or more security keys that may be hardwired into the manufactured SM enabled IC. The SM enabled IC design may be configured to allow storage for one or more security keys that can be programmed into the manufactured SM enabled IC e.g. in steps or both .

In step a SM enabled IC is manufactured and tested based on the SM enabled IC design. Each SM enabled IC may have one or more SM cores where each SM core may control one or more Features. As discussed in detail below the Features may be read e.g. to determine a value of a Feature altered enabled disabled or some combination thereof as authorized by one or more security keys via one or more SM commands or some combination thereof. Additionally in some embodiments Features or parts of Features from third party providers e.g. third party provider may be incorporated into the SM enabled IC. For example a third party provider may provide a Feature used for rendering large image files at high speeds but is not initially enabled. Testing may be conducted to confirm whether Features of the SM enabled IC are operating correctly. For example a delegate authority if permitted by the root authority or the root authority itself may temporarily e.g. for a fixed time and or until the chip is reset enable one or more Features to facilitate testing. Depending on the embodiment step may be performed by IC manufacturer IC provider some other entity e.g. a specialized testing facility or some combination thereof.

In step a first stage of customization occurs. In this step the SM enabled IC may be assigned a device identifier ID and configured with one or more keys from a root authority system a delegate authority system one or more keysplits or base keys.

A keysplit is part of a key that when combined with a different keysplit forms a complete key e.g. a base key . Keysplits may be used to increase security of the base keys for example by having the SM core in the SM enabled IC programmed with different keysplits by different parties none of which have knowledge of all the different keysplits. The combination of the keysplits via a combining function occurs within the SM core to provide the base key. Because none of the programming parties knows all the keysplits a compromise of a single facility does not necessarily compromise the base key.

An example configuration process is discussed in more detail below. Other parameters may also be set during the first stage of customization. For example if the SM enabled IC contains multiple processors the first stage of customization may set the number of processors that may be initially used by product vendor . Or for example the first stage of customization may set a maximum clock rate for each processor to inhibit overheating of under load or to match maximum rates determined during testing . For example storing such limits securely can prevent dishonest distributors from fraudulently remarking lower speed parts as a higher speed grade. In alternate embodiments not shown there is no step and instead the first stage of customization is performed as part of step .

In step a second stage of customization occurs. For example the same series of SM enabled ICs may be further configured to meet the requirements for different product vendors. In many instances some product vendors may want SM enabled ICs to be specially configured. During this stage of customization the feature state of the SM core may be updated to customize the SM enabled IC to each product vendor s needs. Updating the feature state may include disabling enabling or altering one or more Features associated with the SM enabled IC as well as loading additional keys or some combination thereof. This second stage of customization may be performed for example by IC manufacturer IC provider product vendor some other entity or some combination thereof. Although cost concerns typically favor keeping the number of customization steps as small as possible some applications may employ more or less than two stages of customization. Note that the two stages of customization and can for example be performed respectively at wafer level test and package level test of the IC.

In step the SM enabled IC is incorporated into a device to create a SM enabled device during a product manufacturing process. The feature state of the SM enabled IC may updated at this point as well. For example a product vendor may enable combinations of Features to create different product lines of SM enabled devices. This programming process can be secured using a hardware security module issued from security service e.g. to ensure that accurate records are ultimately provided to billing and reporting service . In this way product vendor may procure and hold in its inventory a single type of chip from IC provider then this chip can be used in multiple products with different configurations that are set during product assembly. The Billing and reporting service serves to ensure that the capabilities being enabled are paid for e.g. so that the IC provider is able to collect the appropriate amount for each chip depending on the chip s configuration . Keys may also be programmed into the SM core as part of step . For example the product vendor may program a unique key in each SM enabled device such as a key known to product vendor but not to IC provider .

In step the SM enabled device is distributed. The SM enabled device may be distributed for example to another product vendor a reseller an end user device administrator or other entity in the ecosystem.

In step in field management of the SM enabled device can be done. A SM enabled device that has left the product vendor is said to be in field. Note this is not necessarily synonymous with being in the hands of an end user e.g. a mobile phone carrier operator may perform customization or provisioning of a phone before delivering it to end user . In field management can include a request being received to update the feature state of an SM enabled device. For example a request may be received to enable a special audio component of the SM enabled IC. Such requests may be initiated for example by end user or the device itself sending the request to the root authority or an appropriately authorized delegate authority. In field management then involves transmission of one or more authorizations and or secure keys to an SM enabled device. As discussed in detail below secure key delivery and feature management may be performed by the root authority via the root authority system in communication with the SM enabled device or by a delegate authority via a delegate authority system acting within its delegated SM programming capabilities and in communication with the SM enabled device. Upon receipt of the response software in the SM enabled device provides portions of the response including cryptographic authorization from the root authority and or delegate authority to the SM core which verifies that the authorization is valid for the particular device before performing the requested operation e.g. Feature configuration keying etc. .

Any of the previous mentioned entities either acting alone or in conjunction with other entities may request produce cache transmit or modify the aforementioned update management and audit messages to control keys and Features of the SM enabled device. Each of these entities with roles at various points of the device lifecycle may operate independently and may have different degrees of ownership of the SM enabled device or infrastructure interoperating with the device. The deployment of certain keys or features may involve payments audits or other business arrangements where the facilitation of SM core activity requests to perform certain actions the process of formulating or interpreting SM core messages communicating or storing said messages authorizing actions may be performed by one or more of the aforementioned entities.

Reference is now made to which shows in block diagram form an example operational system for configuring and managing one or more SM enabled devices. System can include some or all of a public land mobile network PLMN a root authority a root authority system a delegate authority a delegate authority system an IC provider SM enabled devices and SM enabled ICs a wireless access point configurator systems and additional entities operatively connected by network .

Network can be for example the Internet an intranet a local area network a wide area network a campus area network a metropolitan area network an extranet a private extranet any set of two or more coupled electronic devices or a combination of any of these or other appropriate networks. Network can also communicate with PLMN which is also referred to as a wireless wide area network WWAN or in some cases a cellular network.

Root authority is an entity e.g. security service that manages SM programming capabilities and can assign subsets of capabilities to one or more delegate authorities . Root authority is associated with root authority system that contains or otherwise has access to the cryptographic keys that manage the SM enabled ICs and SM enabled devices and . Root authority system is configured to generate one or more root signed blocks RSBs . As discussed in detail below a RSB can include one or more SM commands command templates one or more delegate permissions one or more keys e.g. a delegate public key or some combination thereof. The RSB contains at least one digital certificate signed by root authority system using a root private key e.g. an RSA private key that corresponds to a public key in the SM core. Root authority system may be configured to provide one or more RSBs or other data to configurator system SM enabled ICs delegate authority system SM enabled devices e.g. or one or more other entities an electronic storage medium not shown or some combination thereof. Additionally root authority system may be configured to provide the RSB when instructed by a user of root authority system . Root authority system can be implemented on a single computer or in some instances may be distributed across a plurality of computers e.g. which contain key shares for a threshold signature system where cooperation from multiple key shares is required to compute digital signatures which may be geographically dispersed.

As discussed in detail below root authority system may be configured to delegate privileges to one or more delegate authority systems . Root authority system also may be configured to generate system and netlist key constants for one or more configurator systems . Additionally root authority system may be configured to manage master keys which are used during the customization process discussed below . Root authority system may also be configured to create test vectors and other values to assist with SM core integration and ASIC manufacturing.

In some embodiments root authority system may be configured to delegate the ability to create additional delegates. In this embodiment a first delegate authority system may be configured to create one or more second delegate authority systems each of which have a subset of SM programming capabilities of the first delegate authority system.

System can include multiple delegate authorities . Delegate authority is an entity that is associated with delegate authority system . Delegate authority system has been given a subset of SM programming capabilities by the root authority system . Examples of delegate authority may for example include a product vendor IC manufacturer a device administrator a service operator a retailer some other entity e.g. as discussed with reference to or some combination thereof.

Delegate authority system may have certain capabilities e.g. portions of key management operations Feature management operations or a both delegated to it from root authority system . These capabilities can be conveyed as a set of positive authorizations or as a set of restrictions. For example privileges may be conveyed and limited by root authority system delegate authority system via control over what signed messages e.g. signed blocks are provided by authority systems regulation of the signing key s used by the authority systems regulation of the specific types of payloads that may be signed by one of the authority systems regulation of the communications channel destinations and the types of messages that may be conveyed to the SM core or some combination thereof. Example privileges that may be delegated include the ability to enable or disable certain hardware capabilities adjust performance settings or other values allow use of certain external interfaces allow use of certain modes of operation enable or disable test modes e.g. control diagnostic and debug mode control over when a particular mode or Feature is active e.g. only active during the manufacturing process the ability to adjust the values of certain configuration settings of Features of SM enabled ICs derive and or use one or more key encrypting keys encrypt keys for use by certain SM enabled ICs supply keys to IC subcomponents adjust configuration of the SM enabled IC generally audit state information accessible by the SM core program keys keysplits perform diagnostic activity on an in field SM enabled IC calibrate or tune analog circuits to compensate for process variation configure a PLL for the input clock and desired operating frequency in a specific product adjust the power and frequency of a radio s configure the limits enforced by an internal thermal failsafe thermal limits may vary based on the packaging and cooling solution used in different products configuring a battery charging circuit etc.

As noted previously Feature settings are not limited to simple binary on off settings. For example there may be concerns e.g. security reliability liability etc. that make it desirable to use delegate authority system or root authority system to require authorization for changes in configuration. For example misconfiguring the PLL or using incorrect analog calibration may cause the SM enabled IC to malfunction so PLL settings can be secured by the SM core.

As discussed in detail below delegate authority system is configured to generate one or more delegate signed blocks DSBs . Delegate authority system may be configured to provide a DSB to configurator system SM enabled ICs root authority system IC provider SM enabled devices e.g. or an electronic storage medium not shown one or more entities or some combination thereof. Additionally delegate authority system may be configured to provide the DSB when instructed by a user of delegate authority system . The one or more entities are entities who are not a delegate authority or a root authority but may still receive RSBs delegate signed blocks DSBs or some combination thereof. For example in some embodiments device administrator IP and or security key provider escrow service provider etc. may not be a delegate authority but may still receive RSBs DSBs or some combination thereof.

System can include a number of SM enabled devices for example SM enabled devices and . SM enabled devices and can be for example smartphones tablets netbooks desktop computers set top boxes mobile devices laptop computers digital video recorders pay TV set top boxes automobiles manufacturing equipment digital and video cameras batteries devices that authenticate peripherals video game user interfaces and other user interfaces etc. Although the example system of is shown with multiple SM devices the system may be implemented with one or any number of SM enabled devices. SM enabled devices and verify signatures or other authorizations from root authority system which in turn can authorize delegate authority systems . Additionally the coupling between an SM enabled device e.g. SM enabled devices and and root authority system delegate authority systems or both may be temporary. For example the coupling may exist for the time needed to modify operations of the SM enabled IC. Authorizations for the SM enabled device and SM enabled IC may be created by root authority system or delegate authority systems and delivered via one or more device testers not shown programming fixtures not shown or other intermediates not shown .

A device tester in general is configured to test the functionality of ICs. For SM enabled ICs in particular a device tester may additionally be configured to program information e.g. keys device ID etc. into the SM enabled ICs e.g. by supplying programming commands to the SM core . The device tester or programming fixture may also record information in a database about the device and its SM core including device identifying information and configuration information. Each device tester may be configured to couple one or more SM enabled devices to a root authority system a delegate authority system or both. Systems or devices that might have a range of features or capacities are ideally suited for the use of a SM enabled IC.

A SM enabled device may include one or more SM enabled ICs e.g. . Likewise SM enabled ICs may include for example one or more SM cores and one or more secure memories. And as discussed in detail below the SM enabled IC optionally may include some other elements e.g. one or more extractors outputs to control one or more Features etc. or some combination thereof. As discussed below certain modifications may be made to SM enabled IC via key management or feature management operations.

SM enabled devices and even if comprising the ICs that were identical prior to programming may be configured differently. In consumer electronics similar silicon or IC s e.g. fabricated from the same mask set may be used in a wide range of products for example both high end and low end products with the difference in performance controlled at least in part by configuration. A feature rich product might have for example advanced audio capabilities e.g. surround sound multiple HD video streams a large number and varied of inputs and outputs support for multiple cable providers including cable or satellite or wireless specific modems and transcoders various tuners etc. viewing features such as picture in a picture Wi Fi support etc. Likewise a SM enabled IC intended for use in a smartphone may include feature managed support for capabilities such as GPS various wireless network radio protocols Wi Fi near field communication based financial transactions BLUETOOTH or other wireless peripheral interface over the air video services HD video support wireless video interfaces additional external video interfaces numerous and various resolutions of cameras and sensors support for various screen sizes and resolutions processing for haptics graphics and video enhancement and acceleration. SM cores in SM enabled ICs can be used to manage the size and performance of system resources such as for example the available or useable memory or the speed and number of available processors. In some embodiments not shown a SM enabled device e.g. and may also be operatively coupled to configurator system . There can be many reasons why a particular Feature should be disabled on a particular chip including to reduce IP licensing costs for unused features to disable non working or untested silicon areas to avoid cannibalizing sales of higher end parts to disable modes settings that may create security risks etc.

Delegate authority e.g. IC provider or IC manufacturer may receive configuration data from configurator system . Data generated by configurator system may inform delegate authority how to address specific Features or keys. The configurator system is discussed in greater detail below with reference to .

Additionally in some embodiments not shown SM core may directly connect with one or more Features not shown and if all such connections are handled directly extractor and the sub extractors may not be used. And in some embodiments Features and may continue to be connected using extractor the one or more sub extractors e.g. and and the interfaces .

Additionally SM core may directly read and write signals to other components of system . In some embodiments SM core may sample the system state read data parameters etc. via for example a dedicated interface not shown or via bus . For example SM core may issue read operations over bus to obtain the desired information.

System includes secure memory . Secure memory can be a single secure memory and or multiple homogenous or heterogeneous secure memories. Secure memory may be a form of a digital memory where the setting of each bit may be fixed in a nonvolatile form. Secure memory may include for example fuse memory antifuse memory one time programmable OTP memory erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM RAM including battery backed RAM or some combination thereof. In some embodiments where secure memory is fuse or anti fuse memory secure memory may include redundant pathways that offer the ability to revise information previously stored in secure memory e.g. by overriding or remapping previously written data . Depending on the technology and security features present contents of secure memory may be encrypted and or authenticated may be protected from reads by blocks other than SM core may be configured to be one time programmable. Also secure memory may be isolated such that only SM core is connected to secure memory or such that other components of the SM enabled IC may read from secure memory but only SM core may write to secure memory . Secure memory may also be partitioned into one or more portions that may be read by components of the SM enabled IC other than SM core and one or more portions that may only be ready by SM core . SM core may be directly responsible for performing all manufacturing test and programming operations for secure memory . Additionally in some embodiments secure memory is designed to resist efforts to learn its contents by for example removing certain layers from the IC capturing micrographs of the IC or electrically probing the IC during operation. Additionally in some embodiments SM core includes wrapper . Wrapper translates requests from SM core into requests understood by secure memory and vice versa. In some embodiments secure memory may be integral to SM core .

System includes one or more Features and . The inputs delivered via the sub extractors to Features and are generally configurable thereby providing configurability e.g. via key management and Feature management operations of the functionality associated with Features and . Such configuration changes may be performed by SM commands described below delivered to SM core via register interface .

Features and may include hardware software and combinations thereof. For example Features and may be a global positioning service one or more processors e.g. CPU graphics processor crypto core etc. additional memory USB ports video input or output ports audio input or output ports circuitry providing advanced graphics capabilities e.g. picture in picture multiple HD video streams graphics acceleration etc. network transceivers for access to one or more networks e.g. Wi Fi near field BLUETOOTH etc. cameras etc. The above listing of Features should not be considered limiting as Features may include any component or capability that is configurable via key management or Feature management operations.

In some embodiments a Feature or part of a Feature is provided by a third party IP provider. Features and are associated with sub extractors and respectively. In some embodiments not shown multiple Features may share a single sub extractor. Sub extractors and facilitate the delivery of SM core outputs such as configuration values and keys across SM enabled IC designs. Additionally as discussed above sub extractors and are optional and are generally used for large or complex SM enabled ICs including those where top level ASIC floor planning and or routing are challenging that include multiple Features. Extractor is configured to deliver outputs from SM core to sub extractors and which in turn deliver signals to Features and respectively.

In one embodiment the layout of the SM enabled IC is divided into multiple partitions. A partition may be a portion of a design of the IC and represents how the IC is divided into blocks for design purposes. Each partition may include one or more sub extractor associated with that partition. This enables independent development of each partition by different development teams or at different times while keeping a feature bus interface of the sub extractors as a constant. The physical partition may be easier to manage if the interface is kept constant e.g. as a large single bundle of undifferentiated wires between the extractor and a particular sub extractor . Placing the sub extractors inside of the partitions may reduce exposure of the feature bus interface to naming churn in which feature names associated with particular feature bits wires are repeatedly changed .

In one embodiment channel based routing schemes may be implemented. For a channel based routing scheme a feature bus width or sub feature bus width which represents a number of wires associated with the bus is fixed. Thus more wires than will be initially used will be pre allocated for a sub extractor. Such channel based routing schemes are advantageous from a floor planning perspective as the number of wires is allocated in advance thus fixing a top level floor plan. The ability to pre allocate the routing from the extractor to the sub extractors may provide efficiency improvements and minimize an amount of re routing and or a number of routing operations.

Example System includes extractor . Extractor is a hardware component that is configured to receive and route information e.g. keys and feature state from SM core to the appropriate sub extractor s associated with an intended destination Feature in a form that is appropriate for the Feature. Feature state refers to information that has been processed by SM core and possibly extractor such that it is in a form that is understandable by the destination Feature. Feature state may have one or more associated addresses in feature space. By way of example the feature state may include enable signals metadata configuration or calibration information or other data which is useful to Features.

In one embodiment sub extractors use a synchronous sub extractor clock. When configured to use a synchronous sub extractor clock each sub extractor expects a clock cmClk input that is synchronous and skew balanced with the SM core s clock cmClk . The extractor to sub extractor interfaces in such an embodiment may be fully synchronous. This scheme may be used with a single clock but may use a more complicated distribution network for that clock as opposed to use of other sub extractor clock schemes.

In one embodiment sub extractors use a forwarded sub extractor clock which is an alternative type of synchronous clock. When configured to use a forwarded sub extractor clock the extractor drives a copy of the clock cmClk input with each extractor to sub extractor interface. The sub extractors may use the received copy of the clock input to clock input flops for the interface. This source synchronous interface structure significantly reduces a complexity of the distribution network for the clock to the sub extractors. However a delay may be introduced on the clock route from the extractor to the sub extractor which may be significant in some instances and may vary with operating conditions. Accordingly in such an implementation key logic in the sub extractor may effectively become asynchronous with logic on any other clock of the IC or an additional logic may be used in extractor to counter balance the delay on the clock route.

A selection of the clock type may be made during generation of HDL modules for the extractor and sub extractors and may affect a final routing of one or both of the extractors and sub extractors. For example the clock type may affect the routing of a clock distribution network to the sub extractors. Use of a clock type configuration parameter by a configurator may potentially simplify clock tree planning and generation.

Extractor is operatively coupled to SM core and to one or more Features e.g. Feature Feature and Feature . In some embodiments extractor is coupled to SM core via an extractor interface which may include a feature bus and or a shared key bus. The feature bus may connect to a feature address space of the SM core and the shared key bus may connect to a key interface of the SM core . Extractor interface provides communication of information such as feature data security keys and the like from SM core to extractor . Feature data may be secret or non secret and is general data that is used to configure a Feature. Extractor interface may include wires which couple SM core to extractor . Extractor then transfers the information to the sub extractor s associated with each destination Feature via key interface configuration value interface or a combination thereof.

Key interface is a communication path configured to pass secret information e.g. cryptographic keys such as private keys to public key systems such as RSA and EC DSA symmetric keys to cryptosystems such as AES or triple DES and keys for protocols such as HDCP or EMV . For example extractor may communicate a 128 bit key and target key address to one or more Features e.g. and or via key interface . Key interface may include one or more key buses. Extractor may be configured to decode a target address to identify a particular sub extractor associated with the destination feature. For example sub extractor sub extractor and sub extractor are associated with Features and respectively.

Configuration value interface is a communication path configured to pass Feature data associated with Feature management operations. Configuration value interface may include one or more sub feature buses. For example if one or more Features e.g. or some combination thereof are being configured or enabled extractor passes the feature data to the appropriate sub extractor via an appropriate sub feature bus of configuration value interface . Likewise if a particular Feature does not use and or for security reasons may not be permitted to receive the values associated with given addresses the extractor and or sub extractor can withhold these values from the destinations. Withholding unnecessary values can improve efficiency on ASICs by avoiding the unnecessary routing and delivery of values to sub extractors or Features that do not need them. In some embodiments extractor interface provides bi directional communication of information from SM core to extractor . In other embodiments extractor interface provides one way communication of information from SM core to extractor . Key interface and configuration value interface may include wires which couple SM extractor to one or more sub extractors and .

Extractor interface key interface and configuration value interface or some combination thereof couple SM core to extractor and sub extractors and . The combination of interfaces may transmit data from SM core to an particular Feature by for example continuously sending data values sending data when a change of value event occurs e.g. enable Feature or a request is received e.g. because a Feature is powering on or some combination thereof.

The current value of each element of the feature space associated with an SM core may be stored in for example secure memory or SM private memories discussed below . In some embodiments a given operation for example processing of an RSB or DSB discussed below may update only a subset of the elements of the feature space. In embodiments where change of value events are communicated from SM core to extractor it is expected although not required that only the values of elements of feature space affected by a particular payload are communicated from SM core to extractor upon processing of that payload. In embodiments where all of the values in feature space are driven continuously from SM core to extractor the values affected by a particular payload may be combined with prior values of unaffected feature space from e.g. SM private memory for communication to extractor .

System may include processor . Processor can for example be a single or multiple microprocessors field programmable gate array FPGA elements or digital signal processors DSPs . Specific examples of processor are for example an x86 processor an ARM processor a MIPS microprocessor an 8051 microcontroller etc. Processor may be coupled to SM core host memory tester I F or some combination thereof via bus . In some embodiments processor may be configured to directly communicate with SM core read and program secure memory via SM core retrieve SM core status and system state send commands to SM core receive from SM core cryptographic hashes of software such as boot routines operating system components applications etc. authorized for execution by processor or some combination thereof. Additionally there may a plurality of processors performing these accesses. Additionally in some embodiments processor has the capability to run higher privileged code for example in Ring using ARM TrustZone or in a secure virtual machine monitor SVMM . Lower privileged processor or process may be blocked using some or all capabilities of SM core . Register interface may be used to communicate the identity and privilege level of the request and SM core can take the privilege level of the requestor into account when accepting and processing SM commands received across register interface .

System may include host memory . Host memory may be volatile e.g. SRAM DRAM or other semi conductor memory or non volatile e.g. hard disk R W optical disk flash drive or some combination thereof. Host memory is operatively coupled to processor SM core tester I F or some combination thereof. In this embodiment host memory is coupled to one or more components of system via bus .

System may include tester I F . Tester I F is an interface for tester system s not shown . Tester I F may be for example configured to provide a communication path to SM core when SM core is in a manufacturing state when the SM enabled IC is in field when processor is not yet operating or is malfunctioning or some combination thereof. Tester I F may be a scan interface a test interface joint test action group JTAG interface universal serial bus interface advanced peripheral bus APB interface etc. A tester system may be coupled to system such that it is able to test system for correct operation. For example the tester system can be configured to ensure that system is properly enabling Features disabling Features programming secure memory etc. The tester system may include one or more processors and a memory and may communicate with or include a delegate authority system for authorizing operations in SM core .

System includes SM core . SM core may be operatively coupled to secure memory extractor and processor host memory and tester I F via register interface I F and bus . Additionally in some embodiments not shown SM core may be directly connected to some or all of processor host memory and tester I F . SM core includes one or more SM private memories not shown . These one or more private memories may be used to store data used by the SM core including one or more security keys e.g. base keys personalization keys transport keys netlist keys root or delegate authority public keys etc. one or more pointers to locations within secure memory instructions for wrapper current configuration state associated with feature addresses command processing intermediates etc. In some embodiments one or more security keys and a product chip ID may hard wired into SM core e.g. root authority public keys base keys that must be available if secure memory is malfunctioning or unconfigured etc. . The one or more security keys may include symmetric keys public asymmetric keys private asymmetric keys or some combination thereof. In some embodiments the one or more security keys are specific to the SM core and others may be shared among a series of SM cores. An SM core series refers to a set of SM cores which may be related in some way. For example the SM cores in all of the SM enabled ICs manufactured from a given mask design might be considered a series. Alternatively all of the SM cores in any of a family of similar SM enabled ICs might be considered a series.

In an example embodiment SM core is configured to receive one or more signed blocks which may include a root signed block RSB as well as zero or more delegate signed blocks DSBs . SM core is configured to verify signatures associated with the signed blocks and extract an associated payload specifying restrictions bindings see below as well as values e.g. configuration settings or keys intended for one or more Features e.g. . Examples of restrictions include limitations on which SM cores should accept the payload such as limitations designating a specific device ID or required states for values stored in feature address space or limitations on which features can be manipulated etc. SM core may be configured to authenticate the payload using a public key of the root authority and to extract e.g. decrypt the payload from the signed blocks using for example a private key built into the SM enabled IC or derived from values stored in secure memory . SM core is configured to distribute some or the results of processing the payload to the intended one or more Features e.g. via extractor .

In some embodiments SM core may be configured to execute instructions that update the Feature state of the SM enabled IC facilitate key delivery to Features enable configuration of secure memory such as to configure parameters necessary for writing to the secure memory if any etc. For example SM core may be instructed to disable Feature and enable Feature . Depending on the embodiment and the instructions provided SM core may make persistent changes e.g. by updating secure memory non persistent changes e.g. by updating the SM private memory or both. Persistent changes are those which persist after the SM enabled IC is powered down such that the change persists after the IC enable chip re boots. Non persistent changes are those which last for a predetermined period of time or events. For example a non persistent change may only be good for a certain number of executions until power is lost on the device etc. SM core may be configured for managing and delivering keys for secure digital SD card encryption flash memory hard disk encryption high bandwidth digital content protection HDCP digital rights management DRM systems virtual private network s VPN payment instruments e.g. EMV password managers radio link encryption peripheral authentication other secure operations etc. Additionally SM core may be configured to receive one or more hardware HW constants that may have been used in the IC configuration process.

SM core may be configured to generate interrupts to processor . For example SM core may be configured to generate an interrupt when the feature state of the SM enabled IC has been updated when ready to receive additional I O when a key has been output etc.

SM core may be configured to execute one or more built in self checks. For example SM core may be configured to perform a self check when first powered up under the control of the test interface etc.

In some embodiments system is a single IC such as a system on chip that combines all of the components shown in or most of the components such as everything except processor and host memory .

Feature management may be used to control whether and in what ways the configuration and other feature state of SM enabled IC is updated. The feature state of the SM enabled IC can control the capabilities of the SM enabled device for example the ability to enable disable or otherwise securely configure operation of Features ability to configure hardware capabilities based on product chip ID to configure hardware capabilities based on geographic location of the SM enabled IC configure performance settings allow or configure use of certain external interfaces bypass use of certain modes of operation e.g. enable disable bug fixes modes that bypass certain functional modes of operation patch ROM adjust microcode etc. enable or disable test modes e.g. control diagnostic and debug mode control over when a particular mode or Feature is active e.g. only active during the manufacturing process the ability to adjust parameters used by Features adjust configuration of the SM enabled IC perform audit operations to attest to the configuration or other information accessible to the SM core securely perform diagnostic activity on an in field devices calibrate or tune analog circuits to compensate for process variation set device configuration data e.g. configuring a PLL for the input clock and desired operating frequency in a specific product adjusting the power and frequency of radios based on regulatory requirements applicable for a specific product or region configuring the limits enforced by an internal thermal failsafe thermal limits may vary based on the packaging and cooling solution used in different products configuring a battery charging circuit enable latent capabilities or upgrades of the SM enabled IC disabling display of advertising messages on the SM enabled device e.g. by providing software with configuration status enabling in field upgrade to a higher operational performance of a CPU on the SM enabled IC etc. etc. or combinations thereof . For example controlling diagnostic and debug mode may temporarily e.g. until next reset enable a debug Feature. Additionally in some embodiments whether or not the feature state is updated depends on whether a fee has been paid e.g. as managed by billing and reporting service .

An example architecture of an SM core and the SM enabled IC assumes that feature configuration settings are non secret but alteration of feature settings requires privileges e.g. which originate from the root authority . For secret keys it may be additionally required to protect the secrecy of the values so secret values may be handled by using the key management functionality discussed in more detail in the next section. Digital signatures may be used to ensure that the feature changes as well as key related operations may be performed only by authorized parties.

Feature management may include recording feature changes in a non volatile memory e.g. secure memory enabling feature changes that are active only until the next reset enabling feature changes that are only valid for a fixed period of time as measured by a clock cycle counter or a real time clock enabling select modes of operation e.g. controlling diagnostic and debug mode PLL configuration etc. or some combination thereof.

Key management functionality may be used to securely deliver payloads for example secret keys or other values. Destinations may include software executing on the SM enabled IC hardware blocks or even other parts of a device containing the SM enabled IC. The SM enabled IC contains several permanently stored device specific symmetric keys the base keys . The base keys can be used to bootstrap the secure delivery of additional keys. After receiving a signed block containing a payload the SM enabled IC validates the signatures of the block s and any associated permissions before extracting the payload. Upon encountering a key management command the SM enabled IC conducts a key unwrapping process that first derives a transport key from a base key then uses the transport key to decrypt a key contained in or referenced by the command and finally passes the decrypted key to another hardware unit. As discussed above with reference to the decrypted key may for example be passed directly or via an extractor key interface e.g. key bus and sub extractor to the hardware unit. Key management commands do not need to be run in a secure facility payloads may be delivered in field over untrusted communications channels to products containing SM enabled ICs.

In one embodiment the key unwrapping process uses a key tree construction that provides protections against side channel and fault induction attacks. A key tree construction enables creation of multiple different keys from a single starting key and each of the created keys may then successively be used to create multiple additional different keys. Alternate embodiments of the key unwrapping process may use block ciphers such as AES asymmetric algorithms e.g. RSA etc.

A configurator system e.g. configurator system may be used during the design process of a SM enabled IC. The configurator system is operated during the ASIC design process to track and automate the mapping of SM core managed feature space and keys to Features and other destinations or uses in the IC.

The configurator may receive a configuration file and hardware constants as input. The input hardware constants may include for example product chip IDs one or more keys such as an RSA or EC DSA public key from the root authority potentially including a root authority public key one or more keys from a delegate authority one or more base keys one or more additional security keys error correction data etc. The hardware constants may also include parameters for SM core operation e.g. memory usage supported commands etc. error correction data and other data. A product chip ID can uniquely identify a particular SM enabled IC or a particular SM enabled IC series or both with an identification value. The security keys may be symmetric or asymmetric and if asymmetric public or private . In some embodiments the one or more base keys may be derived from a master key an identification code of the SM enabled IC series a chip specific identifier or some combination thereof. Error correction data can include for example checksums related to one or more of the security keys. The hardware constants are usable to uniquely configure an SM core for use in a particular IC.

The input configuration file defines information about the desired configuration for a SM enabled IC. The one or more configurator input files may define the particular configuration for a SM enabled IC list one or more security keys and their associated destinations on the SM enabled IC the names and addresses of Features managed by the SM core etc. For example the one or more configurator input files may be configured to specify such things as named feature signals configuration bits grouping of configuration bits security key bus outputs security key bus attributes secure memory mapping attributes or some combination thereof. For example the configuration file may specify such things as names and sizes e.g. number of bits for both keys and Features.

The configuration file may include a separate feature name for each Feature that is provided by additional components of the SM enabled IC. Additionally the configuration file may include a separate key name for each key that is to be used by components of the SM enabled IC. Provided sizes for keys may correspond to standard key sizes such as 128 bits for 128 bit keys and 256 bits for 256 bit keys. The provided sizes for Features may have any size depending on a number of feature bits that will be used by a Feature. The configuration file may also include additional information such as grouping or location of key names and feature names within feature address space default e.g. power on values for feature names and key names names and attributes for security key bus destinations security key bus attributes such as key sizes for destinations secure memory mapping attributes such as information about the layout of secure memory or some combination thereof. In one embodiment the configuration file provides definitions of sub extractors. These definitions may include one or more of a sub extractor name feature names for Features to be routed by the sub extractor key names for keys to be routed by the sub extractor and so on.

Below is an example configuration file for a SM core referred to in the configuration file as cryptoManager . The example configuration file identifies a version number of the configuration file a name ASIC notes and a number of feature bits e.g. . The configuration file further includes data for a first Feature having the feature name CryptoEnables1 and a second Feature having the feature name CryptoEnables2. The CryptoEnables1 feature will have 2 bits. Feature address 0 is designated as the least significant bit of the feature address space to be used for the CryptoEnables1 Feature. The CryptoEnables1 feature will have a default value of 0 indicating that by default the Feature will be disabled.

The CryptoEnables2 Feature will have 32 bits. No default value and no particular bits of the feature address space are defined for the CryptoEnables2 Feature. Accordingly these values will be automatically assigned for this Feature by the configurator .

The example configuration file additionally includes data for a first key having the key name CryptoKey1 and a second key having the key name CryptoKey2. CryptoKey1 will be a 128 bit key and will be assigned to key index e.g. for connection to a key bus of the security manager core s key interface. CryptoKey2 will be a 256 key. CryptoKey2 does not designate a particular key index and so a key index will be automatically selected for CryptoKey2 by the configurator .

The example configuration file additionally includes data for two specified sub extractors. A first specified sub extractor has a name of SpecialDevice1 and includes CryptoKey1 and CryptoEnables1. A second specified sub extractor has the name SpecialDevice2 and includes CryptoEnables2.

Feature mapper may use the data associated with Features from the configuration file to map a feature address space of the security manager core to features of additional components on the IC. This may include determining a number of bits to be used for the feature names identifying available bits in the feature address space and mapping the feature names to identified available feature bits. The allocated feature bits may be wires that will connect security manager core to an additional component of the IC. The feature mapper may additionally allocate feature bits as wires that will carry data used internally to change behavior of the security manager core. Feature mapper may also assign default values to the assigned bits of the feature address space.

In an example embodiment the SM core feature space is an address space stored in a memory that includes values controlling specific functionality or configuration aspects of an SM enabled IC. is a block diagram of an example embodiment of a feature space associated with a SM enabled IC. Feature space includes one or more values each of which has an associated address . For example the value GPS radio enabled might be assigned to address 0 in feature space. Other values in the feature address space such as a multi bit PLL configuration value may span multiple bits and the corresponding addresses .

In some embodiments one or more of the values in feature space may relate to the SM core itself rather than other Features of the SM enabled IC. Such feature space values are known as internal features. For example an internal feature might control whether a certain base key is available for use carry information about a device such as the identity of the product manufacturer the geographical region where the product was sold etc. These internal features can be used to control authorizations e.g. so that an authorization intended for devices in one geographical region will not work on devices in another .

Internal features are addressable and are controlled in a manner similar to features used to control device elements. Internal features may be used to represent a higher level privilege or feature condition which is then mapped to more specific SM core outputs that direct elements of the device. For example an internal feature may represent a numerical speed grade from 1 to 7 while the SM core outputs include control signals for setting a larger number of PLL clock control settings that map to the speed grade. In this way as will be described later the numerical speed grade setting can be used as a condition for forming SM core commands whose operation is limited to specific speed grades. In another example internal features can be used within the SM core to track an issued group identifier device identifiers or the fact that a device has been packaged manufactured or sold by a certain identity. In this example the manufacturing entity could be a delegate authority with the permission to program its manufacturer ID into an internal feature. SM core commands can interpret the internal features and use the results to control how the SM core manages other features or keys. For example the SM core may only output certain keys or permit certain debug settings for devices operated by a specific network operator or only for devices in a pre retail state.

Referring back to in an example feature mapper may use the provided information for CryptoEnables1 from the example configuration file to map a feature name of CryptoEnables1 to bits of the feature address space and may assign default values of 0 to those bits. Feature mapper may additionally use the provided information for CryptoEnables2 to map a feature name of CryptoEnables2 to bits of the feature address space.

Key mapper may use the data associated with keys from the configuration file to map a key interface of the security manager core to the additional components of the IC. The configurator may be utilized both during and after chip development to manage these settings and configurations. Mapping key names to the key interface may include identifying a key size associated with the key name e.g. 128 bits 256 bits 512 bits etc. identifying an available key index having the key size and assigning the key name to the identified key index. For example key mapper may use the provided information for CryptoKey1 from the example configuration file to map a key name of CryptoKey1 to key index 1 which is a 128 bit key index of the key interface. Additionally key mapper may use the provided information for CryptoKey2 from the example configuration file to map a key name of CryptoKey2 to key index 2 which is a 256 bit key index of the key interface.

HDL module generator uses the mappings generated by the feature mapper and the key mapper to generate one or more hardware description language modules . The HDL modules may be Verilog modules or other hardware description language modules describing components of the SM enabled IC. The extractor hardware definition and any sub extractor hardware definitions may be used to produce the SM enabled IC design containing an extractor and sub extractors.

The HDL modules in one embodiment include an extractor HDL module and at least one sub extractor HDL module. The extractor HDL module may define an extractor where an input for the extractor may be connected to the feature address space via a feature bus and to the key interface of the SM core via a shared key interface. A shared key interface may also connect the extractor to a sub extractor and may be shared for all key buses assigned to the sub extractor. An output of the extractor defined by the extractor HDL module may be connected to one or more sub extractors via the shared key interface and via sub feature buses.

The sub extractor HDL modules may be generated based on the determined mappings and or based on sub extractor information provided in the configuration file. For example once feature bits of the feature address space are mapped to feature names and key indexes are mapped to key names this mapping information may be combined with provided sub extractor data to generate a sub extractor HDL module. This may include generating sub feature buses for feature bits that will be connected to the sub extractor. The sub extractor may be configured to have an input of a subfeature bus and outputs of individual feature bits. Additionally the sub extractor may have a shared key interface input that connects to the extractor and individual key bus outputs.

In an example HDL module generator may use the provided information for the sub extractor named SpecialDevice1 from the example configuration file to generate a SpecialDevice1 sub extractor. This may include mapping a subfeature bus including bits of the feature address space to the SpecialDevice1 sub extractor s input and mapping individual bits for feature bits to the sub extractor s output. HDM module generator may additionally map an input of the SpecialDevice1 sub extractor to a shared key interface associated with key index 1 and an output of the SpecialDevice1 sub extractor to a particular 128 bit key bus.

Similarly HDL module generator may use the provided information for the sub extractor named SpecialDevice2 from the example configuration file to generate a SpecialDevice2 sub extractor. This may include mapping a subfeature bus including bits of the feature address space to the SpecialDevice2 sub extractor s input and mapping individual bits for feature bits to the sub extractor s output. HDM module generator may additionally map an input of the SpecialDevice1 sub extractor to a shared key interface associated with key index 2 and an output of the SpecialDevice2 sub extractor to a particular 256 bit key bus. Accordingly the extractor HDL module defines an extractor configured to route appropriate portions of the feature bus to each sub extractor.

In one embodiment sub extractors may be nested. Accordingly the output of a first sub extractor may connect to the inputs of a second nested sub extractor and a third nested sub extractor. The first sub extractor may receive as an input a particular sub feature bus and may provide as output smaller buses that are subsets of the sub feature bus. If for example the first sub extractor was to connect to two additional sub extractors it may divide a sub feature bus into two subset buses. The sub extractor may then connect a first subset bus to the second sub extractor and the second subset bus to the third sub extractor.

The extractor and sub extractor module s generated by the configurator allow for independent development of different physical partitions of an IC e.g. of a SoC while keeping the feature bus interface to the sub extractor constant. Designing the IC and each physical partition may be easier to manage if the interface is kept constant i.e. a single bundle of undifferentiated wires between extractor and sub extractor . Each partition of the IC can be assigned to a different design team for example. If a partition is in communication with the SM core a sub extractor module as generated by the configurator can be placed inside its designated partition during layout of the IC to simplify place and route for example.

The use of the extractor and sub extractor also is advantageous from a floor planning perspective. A number of wires in the feature bus and in sub feature buses may be allocated in advance to fix a top level floor plan. The ability to pre allocate the routing from extractor to sub extractor may reduce a number of routing operations that are performed during IC design and may ultimately cause the routing to be less complex.

The output HDL modules may be used by layout tools such as Synopsys DesignCompiler Cadence RTL Compiler etc. to convert register transfer level RTL design data from the HDL modules into gates or other logics e.g. into a gate list . The HDL modules may additionally be converted into multiplexers MUXes or other custom logic for the IC. In one embodiment the configurator handles the conversion of assign statements which attach wires to other wires in the HDL modules into logic such as gates MUXes and so forth.

Configuration file generator generates an output configuration map based on a result of the mapping performed by the feature mapper and the key mapper . The configuration map includes mappings of feature names to the feature address space and of key names to the key interface. In some embodiments the output configuration map may also define the routing or mapping between the feature address space of the security manager core and an extractor sub extractors and or one or more additional components. The output configuration map may also define the routing or mapping between a key interface of the security manager core and the extractor the sub extractor and or the one or more additional components. The output configuration map may contain some of the same mapping information as is represented by the extractor HDL module and sub extractor HDL modules but may have an entirely different format. The output configuration map may later be input back into configurator alone or along with additional configuration files to update the key mapping and feature mapping and to generate updated HDL modules.

Provided below is an example output configuration map that has been generated by a configurator using the above example input configuration file. In one embodiment the output configuration map has a similar format to the input configuration file. However in the output configuration map all optional fields such as allocated bits from the feature address space default values allocated key index and so on are populated with data. Additionally a feature list key list and sub extractor list may each be sorted in alphabetical order in the output configuration map. A design version may also be incremented in the configuration map.

During the IC design process multiple versions of the IC may be created. To facilitate and simplify this design process the output configuration map may be provided to configurator as an input configuration map . The input configuration map may be input into the configurator along with an updated or new configuration file. Alternatively the input configuration map may have been manually altered by a user and may be input without an accompanying new configuration file. In either case configurator may update the mapping generate a new output configuration map and or generate new HDL modules based on the new configuration file and or the input configuration map.

In one embodiment configurator utilizes a state cache that tracks changes in the configuration map and which may be used to minimize modification of an existing circuit design layout. A state cache may be for example a map file the configuration map etc. In some embodiments instead of utilizing a map file to update the state cache configurator is configured to re read a prior output to implement the state cache.

After a design of an IC is complete the output configuration map may be provided to configurator along with an operational configuration . The operational configuration may include for example features for internal use by the SM core. These internal features may be named without affecting existing wiring. For example if unused bits are left in the feature bus these unused bits can be named as internal features without affecting existing wiring between the SM core extractor and sub extractors. Below is an example operational configuration. It can be the existing configuration plus a named feature InternalFeature added for internal use only.

Configuration file generator may use the input configuration map and the operational configuration to generate compiler mapping files firmware mapping files and or documentation . Compiler mapping files also referred to as command mapping files are for example files used to map commands into a form understandable by an SM enabled IC. Such commands may include commands to enable a Feature disable a Feature determine a value of a Feature and so forth. Thus compiler mapping files may be used to develop a device driver specific to a particular configuration of a SM core. A compiler may use the compiler mapping files to convert a high level description into a compressed byte stream that the SM core can execute.

Firmware mapping files are files that contain defines and structures needed for software development e.g. header and source file definitions used for software development etc. . Firmware mapping files can deliver the mappings for the feature space and key interface to software engineers to enable them to code command sequences that will be used by the SM core to enable and disable Features and to deliver keys. Accordingly the software engineers may write commands referencing the feature using feature names without having any knowledge of actual feature bits or wires that will be used.

Documentation provides an overview of the SM enabled IC design such as list s of assigned names in feature space and the associated addresses list s of which configuration values are sent to each feature information about supported keys default values for values in feature address space etc. Additionally documentation can include environment and construction principles used in design of software components. The documentation may be one or more files output in formats such as XML HTML text PDF WORD etc.

During design of an integrated circuit multiple iterations of the IC may be generated. For any subsequent design iteration the SoC configuration map may be input back into configurator stage along with a new SoC configuration and or new hardware constants. Configurator stage may then output a new extractor HDL module new sub extractor HDL modules and a new SoC configuration map .

After the design of the IC is finalized engineers may program instructions for the IC. Additionally engineers may create a device driver for the security manager core of the IC. To facilitate such development of the instructions and the device driver the configurator labeled as configurator stage is used during an operational design phase . The configurator stage having reference receives the finalized SoC configuration map along with an operational configuration . Based on this information the configurator outputs an operational configuration map . The operational configuration map contains all of the information of the SoC configuration map along with operational information. The configurator stage additionally outputs compiler mapping files and firmware mapping files . Additionally the configurator stage may output documentation showing the operational configuration map.

At block the configurator system generates IC design files. These IC design files may include an extractor hardware definition s sub extractor hardware definition s and state cache data e.g. IC configuration map information . In some embodiments prior IC configuration map information may be included with the configurator input data at block to minimize modification of the existing circuit design layout when incorporating changes to the SM enabled IC design. In this case the configurator seeks to identify the least impactful way to make a requested change. For example if a new value is to be inserted into the feature address space this may include using the previous map to identify a previously unused location for the insertion e.g. as opposed to re creating the locations for existing values . Likewise if a value is removed from the feature address space the configurator may use the previous map information to leave a gap as opposed to relocating remaining features.

The chip design is locked down block e.g. as the chip design is prepared for large scale manufacturing. At this point configurator outputs that affect the mask sets used in manufacturing may no longer be changed.

At block the configurator system internally generates the operational configuration map. Because operations of method can be performed later than those of method the map generated at block can be a more comprehensive and up to date mapping of feature address ranges than could be prepared during method but the process generally assumes that outputs from method that actually affect the chip hardware will not be changed.

At block the configurator system generates mapping files from its operational configuration map. These mapping files include one or more command mapping files and one or more firmware mapping files. Command mapping files are for example files used to map commands into a form understandable by an SM core. For example if the root authority system wishes to convey a particular configuration value to a given Feature this file can help the root authority system identify the feature space address corresponding to that configuration value and Feature. Firmware mapping files are files that contains defines and structures needed for software development e.g. C or C header and source file etc. . In some embodiments the operational configuration map may be included with the configurator operational input data in step to minimize modification of the existing operational design when incorporating additional changes to the operational input data.

At block processing logic receives hardware constants. At block processing logic maps the feature names to a feature address space of a security manager core. Similarly processing logic maps the key names to a key interface of the security manager core. This may include mapping the key names to key indexes and or key buses. The mapping of the feature names and the key names may be performed using the hardware constants and or the configuration file. At block processing logic generates a configuration map based on the mapping.

At block processing logic maps the feature name to a feature address space of a security manager core. In one embodiment this includes identifying available feature bits at block and allocating the specified number of bits to the feature name from the identified available feature bits at block . In one embodiment processing logic searches for a sequence of bits that has a width that is at least the bit width has the number of bits to be used by the feature name. The allocated bits may then be allocated sequential bits.

At block processing logic generates one or more HDL modules e.g. Verilog modules based on the mapping. At block processing logic generates a configuration map that incorporates the mapping.

At block processing logic maps the key name to a key interface of a security manager core e.g. to a key index of the key interface . The key index may be one of multiple key indexes that are included in the key interface and each may be associated with a particular key bus. In one embodiment this includes identifying available key indexes buses at block having the specified number of bits and allocating an identified key bus to the key name from the identified key interface at block .

At block processing logic generates one or more HDL modules e.g. Verilog modules based on the mapping. At block processing logic generates a configuration map that incorporates the mapping.

Accordingly at block of method processing logic groups feature bits based on associated Features and or IC components into sub feature buses. For example all feature bits that will be connected to bits associated with features of a particular component on the IC may all be grouped into a single sub feature bus. In one embodiment feature bits are grouped based on sub extractor definitions provided in a configuration file.

At block processing logic generates an HDL module for an extractor. The extractor will be a hardware component that will connect to a feature bus where the feature bus connects to some or all of the feature bits in the feature address space of the security manager core. The extractor will additionally connect to one or more sub feature buses. Accordingly the extractor may receive a signal from the security manager core via the feature bus and send the signal along via an appropriate sub feature bus.

At block processing logic generates HDL modules for sub extractors. Each of the sub extractors will connect to one of the sub feature buses. Each sub extractor will additionally connect to bits of IC components that are associated with feature names represented by wires in the sub feature buses. For example a single sub extractor will connect via a sub feature bus to the extractor. The sub extractor may receive a signal from the extractor via the sub feature bus. The received signal will be received via a particular wire of the sub feature bus and that particular wire may be associated with a feature name. Sub extractor may route that signal to the connected bit on a component of the IC that is also associated with that feature name.

At block processing logic maps a new feature name of an identified new Feature to available feature bits of the feature address space e.g. to an unused feature address space . Processing logic additionally maps the new feature bits to bits of a component of the IC. Processing logic may additionally or alternatively map the new key name to a key index of the key interface. Processing logic may additionally map the new Features and or keys to appropriate IC components without affecting existing routing of other Features and keys. Thus the computations that are performed for modifying an existing mapping may be much reduced as compared to those of generating a new mapping from scratch.

At block processing logic determines whether any existing Features or keys have been removed based on the comparison of the configuration file to the configuration map. It may be determined that a Feature was removed if a feature name is included in the configuration map but not in the configuration file. Similarly it may be determined that a key was removed if it is included in the configuration map but not in the configuration file. If any Features or keys were removed the method continues to block . Otherwise the method proceeds to block .

At block processing logic removes the routing of the removed Features and or keys. The routing of these Features and keys may be removed without affecting the routing of any other existing Features and keys.

At block a new version of the configuration map is output. Additionally processing logic may output updated HDL modules for an extractor and for one or more sub extractors.

In one embodiment processing logic tracks a version number of the configuration map. When a new configuration map is generated processing logic may assign a version number of 1 to that configuration map. When the configuration map is fed back into a configurator processing logic may increment the version number of the configuration map. Different configuration map versions may be saved and so at any time an engineer may revert back to a previously generated configuration map version.

The configuration editor may include text boxes to input a configuration file name to input ASIC notes to input a number of feature bits that will be available in the feature space of the security manager core and to input a feature default value . Feature bits may have a default value of 0 which causes the associated features to be disabled by default. Alternatively feature bits may have a default value of 1 which causes the associated features to be enabled by default. The configuration editor may also have a version field that indicates a version number for an open configuration file. The version field is grayed out indicating that in the illustrated embodiment the version field is not a user editable value. Instead the configurator may automatically determine and set the version number.

The configuration editor further displays a features list a keys list and a sub extractors list . The features list indicates all of the Features that have been added for an integrated circuit that is being designed. Each entry in the features list represents a Feature of the integrated circuit that is being designed. Each entry may include a feature name a number of bits that will be used by the feature and the particular feature bits of the security manager core s feature space that the feature name has been assigned. For example a first entry in the feature list has a feature name of DataFuse and uses 128 bits. The Feature having the DataFuse feature name includes a designation of AUTO indicating that no bits of the feature space have yet been allocated to this Feature. Once a configurator is run the configurator will automatically assign feature bits to this Feature. A second example entry has a feature name of LifeCycle uses 8 bits and has been allocated feature bits through of the feature space.

The feature list additionally includes an add feature button and a delete feature button . The add feature button may be used to add a new Feature while the delete feature button may be used to delete an existing Feature from the features list .

Responsive to a user interacting with e.g. clicking on the add feature button or selecting an entry from the feature list a feature window may be opened. The feature window includes text boxes or other input areas in which a user can input or edit parameters associated with a new or existing Feature. These text boxes include feature name in which a user can name a new Feature or rename an existing feature ASIC notes in which a user can input notes about the Feature bit width number of bits representing the number of bits that will be used by the Feature and least significant bit that designates a particular feature bit of the feature address space to assign to the feature. The feature window may additionally include an option for a user to select a single bit style e.g. as a bus or as a single independent line and to select a feature mapping function as automatic or manual. Presently the feature mapping function is automatic and so the single bit style will be automatically selected by the configurator and is thus grayed out . The feature window additionally includes a save button useable to save a new Feature or changes to an existing Feature and a cancel button useable to cancel the new Feature or the changes to the existing Feature.

The keys list indicates all of the keys that have been added to the integrated circuit. Each entry in the keys list may represent a key. Each entry may include a key name a key width for the key number of bits used by the key and an assigned key bus of the security manager core s key interface. An example key entry has the key name FirmwareDecryption and is a 128 bit key. This key has been mapped to keybus of the key interface. Similar to the features list the keys list includes an add key button and a delete key button . User interaction with the add key button or user selection of a key entry in the keys list may cause a key window not shown to display. The key window may be substantially similar to the illustrated feature window.

The sub extractors list lists sub extractor HDL modules that have been designated for the IC under design. Each entry in the sub extractors list may represent a particular sub extractor. The sub extractors may be nameable by a user. A user may select an existing sub extractor to bring up a sub extractor window shown in for editing the existing sub extractor or may select the add sub extractor button to bring up the sub extractor window for creating a new sub extractor. A user may also interact with a delete sub extractor button to delete an existing sub extractor.

The configuration editor may automatically generate and update a configuration file as a user interacts with the configuration editor . Accordingly users may input all of the data that will be used to map a security manager core to other components of an IC without having to know any particular syntax used by the configurator and without having to manually create configuration files. This may simplify the task of designing ICs and of using the configurator.

The configuration editor additionally includes a run ASIC configurator button and a run operations configurator button . Responsive to a user selecting the run ASIC configurator button the configurator may use the open configuration file along with associated hardware constants to perform one or more of the aforementioned methods related to the ASIC design phase. For example the configurator may map feature names to a feature space and key names to a key interface of a security manager core to create HDL modules for an extractor and sub extractors to route feature bits of the security manager core to bits of additional components of the IC and so forth . Responsive to the user selecting the run operation configurator the configurator may use the configuration file a configuration map generated during the ASIC design phase and or operational data to perform one or more of the aforementioned methods related to the operational design phase. For example the configurator may create compiler mapping files firmware mapping files and or documentation.

The configuration editor additionally includes a show configuration button which a user may select to view a current configuration file that has been generated based on the user interaction with the configuration editor . The show configuration button may also cause created documentation on the current IC to be displayed in some embodiments.

The sub extractor window additionally includes a features list and a keys list . A user may add Features to the features list by selecting the add features button and may delete existing Features from the features list may selecting the delete features button . Responsive to the user selecting the add feature button an add feature window may be displayed. The add feature window may include a list of all Features that have been added to the configuration file. Alternatively the add features window may include available Features that have not already been assigned to another sub extractor.

A user may add keys to the keys list using the add key button and may delete keys from the keys list using the delete key button . The process of adding and deleting keys is substantially similar to the process of adding and deleting features.

Once a user has completed a sub extractor e.g. finished adding or editing features and keys for the sub extractor the user may select the save button to save his changes. He may also select the cancel button to undo his changes or otherwise cancel the add modify sub extractor operation.

In the illustrated example a user inputs those features and keys that will be routed together by a single sub extractor. Those selected features will be added to a sub feature bus and the selected keys may be routed using a shared key interface. In an alternative embodiment no features or keys may be manually added to the sub extractor or not all keys features to be included in the sub extractor are manually added. Instead the configurator may automatically determine which Features and which keys to include in particular sub extractors in some embodiments. Additionally the configurator may automatically generate sub extractors and add Features keys to those generated sub extractors in some embodiments.

The example computing device includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processors such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processing device is configured to execute the processing logic instructions for performing the operations and steps discussed herein.

The computing device may further include a network interface device . The computing device also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting computer readable storage media.

The computer readable storage medium may also be used to store a configurator as described with reference to and or a software library containing methods that call a configurator. While the computer readable storage medium is shown in an example embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies described herein. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

In the present disclosure a computer may include one or more processors a memory a data interface a hardware security module a display or some combination thereof. The processor s can be a single or multiple microprocessors field programmable gate arrays FPGAs or digital signal processors DSPs capable of executing particular sets of instructions. Some of the methods performed by the computer may be implemented using computer readable instructions can be stored on a tangible non transitory computer readable medium such as a flexible disk a hard disk a CD ROM compact disk read only memory and MO magneto optical a DVD ROM digital versatile disk read only memory a DVD RAM digital versatile disk random access memory or a semiconductor e.g. ROM or flash memory. Alternatively some of the methods can be implemented in hardware components or combinations of hardware and software such as for example ASICs special purpose computers or general purpose computers. Some embodiments may be implemented not only within an integrated circuit but also within computer readable media. For example these designs may be stored upon and or embedded within computer readable media associated with a software design tool used for designing integrated circuits. Examples include VHSIC Hardware Description Language VHDL netlists Verilog Register Transfer Level RTL netlists and transistor level e.g. SPICE or SPICE related files netlists. Note that such netlists may be synthesized as well as synthesizable. Computer readable media also includes media having layout information such as a GDS II file. Furthermore netlist files or other computer readable media for integrated circuit design may be used in a simulation environment to perform the methods of the designs described above.

Certain adaptations and modifications of the described embodiments can be made. Therefore the above discussed embodiments are considered to be illustrative and not restrictive. Embodiments of the present application are not limited to any particular operating system mobile device architecture server architecture or computer programming language.

