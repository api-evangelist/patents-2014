---

title: Method and apparatus for code virtualization and remote process call generation
abstract: A system and method for code virtualization and remote process call code generation. The method including installing a software development kit (SDK) on a user device and selecting a remote process on a remote server, the remote process correlated to at least one remote service. The method also parsing parameters from pre-defined fields for the remote process and generating by at least one virtual code provider (VCP) on the remote server, a code snippet to call the remote process. The method inserting the code snippet into a local code base on the local user device such that the inserted code snippet calls the remote process with the installed SDK.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436439&OS=09436439&RS=09436439
owner: Ciambella Ltd.
number: 09436439
owner_city: Tortola
owner_country: VG
publication_date: 20140617
---
This application claims priority to U.S. Provisional Patent Application No. 61 836 628 filed on Jun. 18 2013 and U.S. Provisional Patent Application No. 61 842 906 filed on Jul. 3 2013 which are incorporated by reference herein in their entirety.

Embodiments of the present invention generally relate to a method and system for process call code generation.

The growth and integration of computer programming languages has expanded many capabilities of existing languages. Each language offers particular advantages and disadvantages in terms of respective size execution speed and various functionality within platforms and devices. As such some specific languages are made to only work with corresponding devices and users must often be familiar or even be experts with multiple programming languages. In addition the nature of building modern applications has forced developers to learn multiple languages. Such that writing an application is no longer limited to using one programming language. Integrating and learning multiple languages is a difficult burden often requiring months or years of training for a programmer developer to reach a sufficient coding proficiency.

Applications may be composed of various languages and if deployed on servers requires programmers to learn a front end language a server language and a back end language. Front end technologies are also made of several different languages HTML Javascript etc. to further add to programming complexity.

In addition more computing occurs over a network and or the Internet i.e. CLOUD computing programming with various software development kits SDKs and application programming interfaces APIs becomes a cumbersome necessity for developers. Emerging services such as social media TWITTER FACEBOOK and the like data storage DROPBOX CLOUD DRIVE and the like and financial transactions PAYPAL AMAZON EBAY and the like also increase the programming burden on programmers as each service may require its own SDK or API to implement processes offered by the service. For example TWEETING on TWITTER requires a different code base than for posting a picture on TUMBLR. Using these services also may not be conveniently shown until after applications are deployed on the service which also may have irreparable results. In other words programming across multiple platforms languages and services remains exceedingly complex to learn in combination with understanding accompanying SDKs and APIs of remote services.

Embodiments of the present invention generally relate to a method apparatus and system for code virtualization and remote process call generation. Specifically by utilizing a pre generated code library virtualized SDK and snippet generator located on a remote server a program on a user device leverages multiple services across multiple platforms and programming languages. The user device receives a code snippet and or virtualized SDK so as to execute at least one remote process call on the remote server and also in turn deploy the process in the native language of a different remote server substantially as shown in and or described in connection with at least one of the figures as set forth more completely in the claims.

These and other features and advantages of the present disclosure may be appreciated from a review of the following detailed description of the present disclosure along with the accompanying figures in which like reference numerals refer to like parts throughout.

In the described following embodiments a process shall refer to a ready to run code base or pre generated process code that is already stored on an execution computer e.g. server personal computer mobile device etc. . Each process is uniquely identified by name process ID icon or other identifier to the user of an integrated development environment IDE . Execution shall refer to the launch of a process on a computer local or remote or CLOUD based . A bundle shall refer to a collection of processes or functions organized by a common attribute API name common parameters SDK parameter names and the like . A snippet shall refer to a generated block of customized code to be inserted into a program with a corresponding programming language selected by a user for calling a remote process. Often the language selected is that of a programming language specified by the user to be implemented in an application and or IDE on a user device.

Embodiments disclosed herein relate to a code library on a remote server e.g. in the CLOUD wherein the user can remotely select a process and then download a corresponding snippet and or SDK to access the process from a local application or software program. The snippet allows for a remote process call on the remote server to execute a process on the server or deploy the process on a different remote server or remote. The user device uses a virtualized SDK such that the snippet may communicate with a remote platform on the execution computer. The remote platform includes virtualized components of additional services e.g. compilers e mail AMAZON TWITTER EBAY DROPBOX and the like along with corresponding SDKs and APIs for the services. A computing platform includes a hardware architecture and a software framework including application frameworks where the combination allows software to run. Typical platforms include a computer architecture operating system and Runtime libraries.

A typical SDK includes many tools libraries documentation and sample code that would help a programmer to develop an application for a software package software framework hardware platform computer system video game console operating system or similar development platform. An API defines a set of rules that should be followed by the programs to communicate with one another. The rules specify how the routines data structures etc. should be defined in order for two applications to communicate with each another. The API is an interface that allows software programs to interact with each other whereas a SDK is a set of tools that can be used to develop software applications targeting a specific platform. In some instances an SDK may include an API.

Each user device . . . comprises a corresponding memory . . . storing code necessary to connect to and authenticate into the network to connect to at least one remote server . . . . In some embodiments the memory . . . stores an IDE for receiving and deploying snippets from the at least one remote server . . . .

The network may comprise at least one of or combination of a wired and or wireless network such as a local area network LAN wide area network WAN wireless local area network WLAN cellular network Wi Fi Internet or Intranet networks. The at least one remote server . . . may comprise a remote application server web server mail server host server database server storage server and the like. The at least one remote server . . . comprises memory . . . to store a platform and execute particular process calls such through a SDK generator a snippet generator and an execution engine . In some embodiments the snippet generator may also be stored in the user device . . . for local snippet generation on the user device . . . . The memory . . . may also store a user interface module database of user profiles accounts collection of processes SDKs and associated parameters to link and execute the processes across other servers e.g. FACEBOOK TWITTER e mail SMS MMS FTP and the like on the network .

The execution engine processes calls to routines in the libraries by correlating an identified routine called and running executing the process using the call parameters. In some embodiments the execution engine may send output to another process call or the original process call.

In some embodiments process call parameters are stored either on user device or remote server . In other embodiments parameters for the process calls are specified directly by the user via pre generated pre defined fields presented to the user specified in a graphical user interface. In some embodiments the graphical user interface is part of an IDE. The IDE utilizing snippets generated by the remote server for integration into a program of a user selected programming language on the user device

In some embodiments the IDE also executes remote process calls using the snippets on the server so as to deploy additional processes and access services offered on other servers . The execution is facilitated by a common virtualized SDK and platform that links the remote process calls to a corresponding virtual code provider discussed further below in .

The CSC comprises a remote interface an application layer virtualization layer and physical equipment . Each CSC represents a specific service offered by the platform . For example CSC may be an Internet service and corresponding servers e.g. FACEBOOK EBAY POP3 e mail TWITTER AMAZON SMS FTP HTTP and the like and CSC may be a computer offering conventional local data information processing e.g. image rendering code compiling data analytics data storage and the like .

Physical equipment or machines CPUs memory network routers and the like are virtualized in a virtualization layer to make processing and storage resources available to the application layer . Virtualization creates redundancy and increased operating bandwidth in a single computer and even more in embodiments where multiple machines are virtualized. In such embodiments the processing workload can also be allocated to various equipment based on priority and independent of the physical location.

An application layer allows execution runtime of programs and functionalities such as database operations e.g. storing account profiles warehousing data and the like on the virtualized machines. A remote interface layer comprises code to access web servers and utilize APIs. The remote interface communicates with the CLOUD client s e.g. a thin client web browser mobile application terminal emulator program and the like .

The CLOUD client facilitates communication of data to and from the VCPs with the application layer . The CLOUD client simplifies the layer interfaces and by presenting a web browser terminal emulator or other client interface. Aforementioned embodiments of the present invention may utilize the CLOUD client to facilitate remote process call code generation of snippets on the platform using the virtualized SDK. The virtualized SDK links process calls generated and offered by VCPs to the application layer .

The VCPs are enhanced hosted code libraries allowing for virtual sandboxing normalization universal language results parsing automatic credential verification simplified oath process platform maintenance and monitoring. Testing or sandboxing the program prior to full deployment of the process and application program to a remote server has become increasingly important with the addition of multiple remote processes and services contained within a program. The VCPs coordinate snippet process calls using a virtualized SDK that is downloaded to the user device

From the perspective of the user device the VCPs allow for a universal programming language offered through the virtualized SDK by templating languages such that only component parameters are needed and inserted into pre generated code. Process results are thus also capable of being quickly parsed. Access is also streamlined by the platform using pre authentication and stored centralized management of keys to access remote services. Pre authentication also produces more secure code by preventing of reverse engineering of code communicated between the user device and platform that may expose sensitive information. The VCPs also normalize programming by reducing processes to the snippet format. Thus snippets represent a standardized way of writing code.

For example 5 lines of code to call any process in the CLOUD is considered as code normalization. The VCPs allow the platform to display real time monitoring and logging of how the created application is performing e.g. usage statistics error handling and the like . The platform also uses the monitoring to maintain the SDKs of respective VCPs such that APIs in the process pools are continually improving to include new methods versions and parameters.

The VCP comprises a process pool an authentication module a SDK linking module a snippet generator a user database and an execution engine . In some embodiments a single execution engine may deploy all processes.

For ease of explanation each of the VCPs corresponds to CSCs in a one to one correspondence. However alternative embodiments may include a different ratio or a single VCP representing the processes of all offered by all CSCs . VCPs are stored on remote server s in accordance with one or more embodiments of the present invention. The VCPs reduce the remote services offered on the platform of the CSCs to a limited number of executable pre determined remote processes stored in the process pool .

A remote process corresponds to a desired action that may be performed on a given CSC . For example processes for a CSC of FACEBOOK would have a limited process pool of posting a comment posting a picture liking a comment or picture declining a friend request initiating a friend request deleting a post and other actions desired by a user. The number of processes in a given process pool is thus limited to the actions available by a service associated with the CSC . Continuing the example there would not be a process in the platform to place a review of a product on FACEBOOK. However such a process would be processed by the platform as available on AMAZON.

The process pool this stores all pre generated code associated with each process offered by the remote platform and corresponding CSCs . In some embodiments the pre generated code is in the native language necessary for the remote application layer to recognize the pre generated code processes. In other embodiments the programming language may be native to a user device for an IDE.

The snippet generator generates a snippet by inserting parameters entered by a user as well as process names to create a snippet with a corresponding SDK such that the snippet may call the associated process from the process pool . The snippet parameters may be entered using a GUI comprising predetermined fields associated a selected remote process. The snippet parameters may also be retrieved as previously stored in the user database The user database comprising user profiles histories and stored credentials for various service bundles. In other embodiments the snippet may be generated locally on the user device

In alternative embodiments the snippet generator generates a snippet when called using an API call such as through the simple object access protocol SOAP representational state transfer REST model or cURL.

The generated snippet is in a programming language specified by the user or required by the platform . For example a user may have a pre existing program on the user device written in JAVA. An associated snippet would need to have a process call to the virtualized SDK and platform in the JAVA syntax and corresponding libraries on the user device in order to directly insert the snippet into the pre existing program.

The authentication module receives credentials from a user or uses previously entered and stored credentials from a user to access a CSC associated with the VCP . The authentication module may authenticate also into the platform . The user database is the account database for a given service of a CSC . In other embodiments the user database is a collection of user accounts for authentication into the platform . Subsequently the platform coordinates the authentication across multiple VCPs and associated CSCs . For example a user logging into the platform of a remote server e.g. TEMBOO servers similarly will authenticate into an e mail server and EBAY account using pre defined credentials stored on the remote server previously submitted by the user.

The SDK linking module is comprised of code to allow the authentication module to interface with the network as well as communicating with the user device and APIs to form various bundles of remote processes. The SDK linking module also coordinates the communication with multiple SDKs and APIs across multiple VCPs for cross platform and cross service interactions. For example the SDK linking module coordinates process pools and corresponding SDKs e.g. EBAY SDK TWITTER SDK SMS SDK and the like to form a combined single process call in the virtualized SDK. Continuing the example by linking processes from respective process pools a single process call with the virtualized SDK may substantially simultaneously TWEET and SMS text a winning auction on EBAY price matched to a product sold on AMAZON.

Lastly the execution engine executes the selected process from the process pool deploys the process onto another remote server or corresponding CSC to execute the remote process. In some embodiments the execution engine may also return results to the user database or the user device . In further embodiments the execution engine also executes the remote process from the process pool when the created snippet is used to call the process when imbedded into the local code base or pre existing program on the user device . Further still are embodiments requiring the execution engine to operates with the SDK linking module to use different SDKS to coordinate the communication among multiple VCPs such as to link and perform several remote process calls.

The IDE coordinates a local code base with a remote code base and allows programs or applications to be written locally but yet include remote process calls using a virtualized SDK. In some embodiments the virtualized SDK may be downloaded and stored in the user device

A user device is displayed available bundles of processes offered the VCP and a remote process is selected. In some embodiments the user of the IDE may have an existing program written in the specific programming language. In such an embodiment the user also selects the same programming language for the snippet as the existing program.

The snippet is then downloaded to the IDE . In some embodiments the snippet is generated by the snippet generator . In other embodiments the snippet may be previously generated and recalled with authentication into a user account located in the VCP . In some embodiments the snippet is edited by the user in the IDE to include parameters for the process. Alternatively the parameters may be submitted by the user when selecting the process from the process pool such that the snippet is downloaded with the parameters already inserted into the snippet.

The IDE then deploys the snippet to the SDK linking module . In some embodiments the snippet is deployed using a virtualized SDK to associate the remote process call of the snippet to the corresponding VCP . In other embodiments the deployed snippet is directly deployed to the corresponding VCP .

The SDK linking module retrieves pre generated code associated with the selected process and associated SDK of a CSC . For example for a CSC corresponding to the AMAZON servers and the process is to purchase an item the SDK linking module retrieves pre generated code from the process pool in a native language used to access and execute a purchase on AMAZON servers using parameters submitted from the user parsed from the snippet. Continuing the example parsed parameters for the AMAZON purchase would include the product name and serial number a name of the user shipping address and credit card information. The pre generated code inserted with parameters is sent to the execution engine that subsequently deploys the remote process on the corresponding CSC .

The method begins at step and continues to step wherein processes code associated with services offered by CSCs are stored into memory e.g. process pools . The process code may be in a native language that is unique to a CSC. In some embodiments the VCPs generate the process code or alternatively the process code may be pre generated and prepared for insertion of parameter data.

Next at step the process code is analyzed for attributes. Attributes include parameters e.g. variables programming language type as well as necessary SDKs or APIs for interfacing and executing the process code on the CSCs . Attributes also include distinguishing parameters based on respective relationships between the parameters and the function of the parameter for a given process. For example a send e mail process requires parameters such as an originating e mail address destination e mail address subject current time time to send and message body.

Next at step the parameters are correlated based on relative relationships to offered processes and role in performing a process on the CSCs . In the example each of the parameters has a specific respective function in the process and relation to the other parameters. A destination e mail address is allotted to a portion of the process code requiring a destination e mail that is related with a corresponding message subject and body with the originating e mail address as an author of the e mail. The time to send parameter includes a value as to when the e mail is to be sent and is accordingly correlated to the function of time for execution within the send e mail process. In alternative embodiments the analyzed process code is native to the SDKs and APIs of respective CSCs e.g. AMAZON TWITTER and the like . In some embodiments relationship information also includes the source of the raw parameter components. Parameter data may be manually entered by the user automatically entered e.g. stored authentication keys conditionally based on the result of another process or related to a parameter of another process.

At step the parameters are assigned to at least one process in the process pools . Continuing the previous example the originating email address may be assigned to the process for sending an email as well as a login credential to a POP3 server necessary for another process to authenticate into an e mail server.

At step the processes in the process pools are linked to a virtualized SDK. The virtualized SDK may be downloaded to a user device to call the processes in the process pools . In some embodiments calling a process includes receiving parameter data from a snippet that is inserted into recalled stored process code and executing the process code with inserted parameters on corresponding CSCs using APIs and SDKs for the CSCs linked to the virtualized SDK. In such embodiments the requisite APIs and SDKs are also linked to the associated process code in the process pools .

At step the method generates process call snippets for each process of the process pools in multiple programming languages using pre existing language templates for a selected language. The method then ends at step .

The method begins at step and continues to step wherein a user device logs into the remote platform . The account of the user is authenticated and associated with previously stored keys and credentials for various remote services of CSCs e.g. data storage e mail websites social media brokerages banking and the like . The authentication modules coordinate with one another to authenticate into associated various CSCs of the VCPs . In some embodiments the platform includes a centralized user account with a profile history of commonly used routines processes SDKs and APIs. The profile history is recorded and updated for both the platform and in the user databases corresponding to associated VCPs and CSCs .

The method continues to step wherein remote processes are populated and or displayed to the user device . In embodiments wherein the user device has a display the available processes will be shown via the IDE to the user. Remote processes of process pools may be displayed as bundles of processes corresponding to actions offered for a specific CSC . For example a CSC corresponding to TWITTER would include a FOLLOW bundle for all sub actions e.g. FOLLOW stop FOLLOW FOLLOW status and the like using the FOLLOWING function and a TWEET bundle for sub functions using TWEETs.

The method continues to step wherein a virtualized SDK associated with the selected remote process is requested from the remote server . The virtualized SDK may include all remote process calls or customized to include code to handle calls to selected processes. In some embodiments the virtualized SDK is specific to the programming language on the user device . The virtualized SDK provides a code snippet with all the necessary helpers tools to call the remote process selected on the corresponding VCP .

In embodiments wherein no display is available the method may automate downloading the corresponding SDK of a selected process. The virtualized SDK allows remote process calls via the SDK linking modules that link a process from the process pool to a corresponding SDK and API associated with at least one remote service of the CSCs . For example where the CSC is GOOGLE the virtualized SDK includes linking to the GOOGLE SDK and API that has commands for a running a GOOGLE search and returning results from the search to a particular computer for a specific query.

At step to download and install the associated virtualized SDK into the local IDE such that the IDE will have access to the remote process and integrate the virtualized SDK with existing local code base on the user device . The virtualized SDK is a language specific local code library that the developer needs to have installed in her his local code base and then in the deployed code for production .

Next at step the downloaded virtualized SDK is used to allow a local program e.g. created on the user device to call and execute a corresponding remote process on the server using parameters entered by the user in the IDE . Parameters may be entered via pre defined fields presented to the user via a graphical user interface. The pre defined fields limit and simplify the information necessary to create the remote call snippet. The data of the parameters will then be transmitted to the remote server and inserted into pre generated code in the process pools comprising the remote processes.

As will be further discussed below in the virtualized SDK also provides support for generated snippets. The snippets generated in a selected programming language that is native to the operating and or programming environment e.g. IDE of the user device .

At step the remote server deploys through the VCP and execution engine the correlated remote process to the CSC associated with the remote process and VCP .

At step real time results of the executed process are also displayed from the remote server in the IDE . Thus a successful FACEBOOK post may return a message to the remote server that processes a response to notify the IDE . In some embodiments the results are returned directly from the CSCs associated with the process call. For example the results from a FACEBOOK post may be returned directly to the IDE . The method then ends at step .

The method begins at step and continues to step wherein the collection of remote processes are populated for the user device . In some embodiments the user device must login to the remote platform such that the user account has access to the remote processes. The login process described in further detail above with respect to .

Next at step at least one remote process is selected. In some embodiments the remote process is selected through a graphical user interface GUI on the user device . In other embodiments the remote process is specified by calling to the remote process through a function in a virtualized SDK downloaded to the user device

At step parameters are input from the user for the selected process in the user device . The parameters may include authentication keys for services timing information payload data file extensions and other information necessary to successfully execute a remote process. The parameters are inserted into a snippet generated in association with a remote process. In some embodiments the parameters are input by the user via the local IDE and in further embodiments some parameter entries may be completed remotely using stored credentials or data on the remote server . The IDE is in communication with the platform stored on remote server

At step a program e.g. IDE on the user device locally triggers deployment of the selected remote process with associated process parameters to the remote platform . The deployment utilizes the snippets and virtualized SDK to call the appropriate VCPs and process pools on the remote platform .

At step the parameters are parsed from the snippets. Parsing includes directing the parameters to the VCPs for the selected process as linked through the virtualized SDK.

At step the parsed parameters are inserted into pre generated code. In some embodiments the pre generated code in the native language of the CSCs and in process pools .

At step the process is executed on an actual remote environment such as CSCs . For example a purchase using AMAZON servers or sending a POP3 email and the like. However alternative embodiments may execute the selected process in a test environment for testing or sandboxing the program prior to full deployment of the process and program to a remote server. Sandboxing becomes increasingly important with the addition of multiple remote processes and services within a program.

Next at step results are displayed in real time to the user IDE. In some embodiments results of process calls deployed on CSCs also provide monitoring and maintenance using the remote platform to VCPs . The snippets of the application are processed such that native code s are executed on remote servers e.g. CSCs using parameter data from the snippet. In such an embodiment the platform then monitors and logs the application to returns statistics such as usage and error data to the IDE and update APIs and SDKs in the VCPs . The updates are then integrated into the corresponding pre generated code in the process pools to reduce subsequent runtime errors.

At step the code snippet for triggering the selected remote process call is generated in a first default programming language by the corresponding VCPs . In some embodiments the code snippet may be generated simultaneous to the deployment of the selected remote processes on the CSCs . Further still are embodiments wherein the code snippet may be generated without deployment or execution of the process.

In some embodiments a code snippet may call access remote services also on the network . For example a program may be written in ECLIPSE used to simultaneously TWEET a user specified message and check in on FOURSQUARE using pre authenticated keys credentials of the associated user account. To access such services the snippet generator generates a code snippet to be inserted into ECLIPSE to call the remote TWITTER and FOURSQUARE services and execute the aforementioned processes. As will be described further below in some embodiments the parameters from the IDE can then be extracted to build the snippet format via the snippet generator .

In some embodiments the code snippet may also include execution timing information. The code snippet is formed from a predefined template for a particular programming language on the user device that communicates process calls to the remote platform using the installed virtualized SDK.

At step the method determines whether the user has selected a different programming language in the IDE . In some embodiments the method may automatically detect the desired programming language by comparing existing programming code input by the user as well as via stored user profile preferences or histories by the platform . If the method determines no other language is selected or the default language is the correct language the snippet sent to the user device at step . However if the method determines another language is selected or detected the snippet is regenerated or reformatted using a template for the corresponding selected language at step . In some embodiments the templates supplement user entered parameters with previously stored parameters on the user device or the server such as variables access keys to remote APIs tokens credentials and the like.

From step the method also continues to step and sends the new snippet to the user device and or IDE . Next at step the snippet is inserted into the local code base such that a local program written by the user may call remote processes on the server over the network in addition to code that is to be run locally on the machine e.g. solely on the user device . In some embodiments the local code base may also access other networked machines. In further embodiments the local code base can be on the developer workstation or already deployed on servers directly or through a code management systems such as GITHUB .

At step the local code and remote process calls may be executed within the user IDE or in the native development environment chosen by the user. The method then ends at step .

Various embodiments of methods and system for snippet generation and remote process calls as described herein may be executed on one or more computer systems which may interact with various other devices. One such computer system is computer system illustrated by which may in various embodiments implement any of the elements or functionality illustrated in . In various embodiments computer system may be configured to implement methods described above. The computer system may be used to implement any other system device element functionality or method of the above described embodiments. In the illustrated embodiments computer system may be configured to implement methods and as processor executable executable program instructions e.g. program instructions executable by processor s in various embodiments.

In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface and one or more input output devices such as cursor control device keyboard and display s . In some embodiments the keyboard may be a touchscreen input device.

In various embodiments any of the components may be utilized by the system to route and execute remote process calls as described above. In various embodiments a user interface may be generated and displayed on display . In some cases it is contemplated that embodiments may be implemented using a single instance of computer system while in other embodiments multiple such systems or multiple nodes making up computer system may be configured to host different portions or instances of various embodiments. For example in one embodiment some elements may be implemented via one or more nodes of computer system that are distinct from those nodes implementing other elements. In another example multiple nodes may implement computer system in a distributed manner.

In different embodiments computer system may be any of various types of devices including but not limited to personal computer systems mainframe computer systems handheld computers workstations network computers application servers storage devices a peripheral devices such as a switch modem router or in general any type of computing or electronic device.

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . The uniprocessor system including a one processor may split functionality of the single processor to appear as multiple processors for processing and executing simultaneous data of a program. Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs . In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing any of the elements of the embodiments described above may be stored within system memory . In other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media or on similar media separate from system memory or computer system .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces such as input output devices . In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network e.g. network such as one or more external systems or between nodes of computer system . In various embodiments network may include one or more networks including but not limited to Local Area Networks LANs e.g. an Ethernet or corporate network Wide Area Networks WANs e.g. the Internet wireless data networks cellular networks Wi Fi some other electronic data network or some combination thereof. In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads touchscreens scanning devices voice or optical recognition devices or any other devices suitable for entering or accessing data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

In some embodiments the illustrated computer system may implement any of the methods described above such as the methods illustrated by the flowchart of . In other embodiments different elements and data may be included.

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of embodiments. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions of various embodiments including computers network devices Internet appliances smartphones tablets PDAs wireless phones pagers and the like. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on a computer accessible medium or a portable article to be read by an appropriate drive various examples of which are described above. In some embodiments instructions stored on a computer accessible medium separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium or via a communication medium. In general a computer accessible medium may include a storage medium or memory medium such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM and the like ROM and the like.

An exemplary snippet generated for insertion into a JAVA program calls the TEMBOO virtualized SDK includes 

In the above example the snippet comprises five lines of code capable of being inserted into any Java program. Beginning with code for Instantiate a Temboo session and ending with code for Execute Choreo . These lines of code are capable of being edited in a local IDE as text and edited in the future so as the user knows the names of choreos he or she would like to call. The line package TembooDemoECOs calls the virtualized SDK by doing an import of a specific class QueryArticles. The above example is possible with installation this exemplary SDK that comprises the code for QueryArticles 

By installing the above exemplary virtualized SDK the snippet may now execute calls to remote processes. The code snippet links to the virtualized SDK code to call the actual process on the remote server through the associated VCPs . In some embodiments the SDK comprises insuring the input parameters are in the proper format and then calling the corresponding remote process. In the above example a choreo is a graphical representation of a remote process on the user device and or local IDE .

The methods described herein may be implemented in software hardware or a combination thereof in different embodiments. In addition the order of methods may be changed and various elements may be added reordered combined omitted or otherwise modified. All examples described herein are presented in a non limiting manner. Various modifications and changes may be made as would be obvious to a person skilled in the art having benefit of this disclosure. Realizations in accordance with embodiments have been described in the context of particular embodiments. These embodiments are meant to be illustrative and not limiting. Many variations modifications additions and improvements are possible. Accordingly plural instances may be provided for components described herein as a single instance. Boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally structures and functionality presented as discrete components in the example configurations may be implemented as a combined structure or component. These and other variations modifications additions and improvements may fall within the scope of embodiments as defined in the claims that follow.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

