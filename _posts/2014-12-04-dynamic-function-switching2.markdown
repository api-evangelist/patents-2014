---

title: Dynamic function switching
abstract: Techniques are described for dynamically enabling or disabling portions of an executing software module based on control data. During compilation of source code for a software module, switching instructions may be generated to enable the conditional bypassing of executable instructions for one or more functions described in the source code. In some cases, the switching instructions may be generated for the public functions of a software module. During execution of the software module, the switching instructions may trap a call to a function and dynamically determine whether to execute the function based on the value of control data corresponding to the function. A user interface may be presented to enable an operator to set the control data to enable or disable the execution of one or more functions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600672&OS=09600672&RS=09600672
owner: AMAZON TECHNOLOGIES, INC.
number: 09600672
owner_city: Seattle
owner_country: US
publication_date: 20141204
---
Providers of online services or other computing services may deploy a large number of computing devices that execute a large number of software modules such as applications libraries interfaces and so forth. In a complex environment that includes many software modules it may be a challenge to ensure that the software modules are not vulnerable to attacks by malicious individuals or processes. In some cases an organization may employ third party software provided by external developers. After a security vulnerability is detected in third party software it may take several days for the software provider to create and release a patch to correct the vulnerability. During that delay the software may be vulnerable to attack.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. Aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout this disclosure.

This disclosure describes implementations of systems devices methods and computer readable media for dynamically enabling or disabling the execution of one or more portions such as function s of an executing software module. During compilation of source code to generate an executable software module one or more portions of the software module may be generated to include switching instructions that enable those portion s to be bypassed during execution of the software module. For example at least some of the functions e.g. public functions described in the source code of the software module may be compiled such that the generated executable code includes switching instructions. During execution the switching instructions may access control data that indicates whether each of the switchable portion s is to be executed or bypassed. In cases where an executable code portion is bypassed the switching instructions may emit error information such as a return code assertion or exception to indicate to a calling process that the code portion has been bypassed or otherwise disabled.

A function may include a subroutine method procedure routine subprogram or other callable unit of a software module. A function may be described in the source code of the software module. The source code description of a function may be compiled linked built or otherwise processed to generate a set of executable instructions that perform the function when the software module is executed. Vulnerabilities in a software module may be exposed as a result of security defects in one or more functions described in the source code of the software module. For example in an object oriented programming language a function may comprise a method declared within a class and the method may include source code that exposes a security vulnerability. Alternatively in a non object oriented programming language or in a machine language programming model a function may be a block of code such as a subroutine that includes code that exposes a security vulnerability.

After a vulnerability is discovered in software several days may elapse before the software patch is created released and installed to address the vulnerability. During this elapsed time the software may be vulnerable to attack by malicious individuals or processes attempting to exploit the vulnerability. In some implementations one or more functions of a software module may be compiled such that the function s may be dynamically switched on or off at any time prior to or during execution of the software module. Such dynamic switching may mitigate the risk due to a security vulnerability by preventing the execution of the code that includes the vulnerability.

In some implementations the determination of the function s or other portion s of a software module to be compiled to include the switchable feature may be based on directives inserted into the source code by a software designer developer program manager or other personnel. Such directives may be parsed by the compiler and employed by the compiler to determine which function s or other portion s are to be compiled to include the switchable feature. Alternatively the compiler may be configured to include the switchable feature when generating executable code for particular functions. For example the compiler may include the switchable feature for public functions. Public functions may include those functions that are callable by other function s executing in another software module. Public functions may also include those functions that are callable by other function s or that are member s of different class object or subprogram relative to the public function.

In some cases the compiler may include the switchable feature when generating executable code for functions that perform a particular type of functionality. For example the switchable feature may be provided for functions such as one or more of the following 

Functions that are exposed to an end user or that receive or process data associated with an end user 

Functions that employ credentials to access other systems or that participate in secure communications with other systems 

Functions that are included in an application programming interface API to be called from other software modules or other functions.

The source code portions that are built to be switchable may encapsulate at any level the source code that includes the security vulnerability to be isolated via the switching feature. After a software module has been compiled or otherwise built to incorporate the switchable feature for one or more portions e.g. functions the software module may be executed on one or more host devices. When a security vulnerability is exposed in the software module an operator or other individual may determine which portion s are to be dynamically disabled to mitigate the risk that an attacker may exploit the vulnerability. Control data may be set to switch off the execution of those portion s until the security vulnerability is fixed. In some cases an operator may determine the portion s to be disabled such that the effect of the disabled code is minimized. Because switching off certain portion s of a software module may disable some amount of functionality of the software module an operator may weigh the cost of the reduced functionality against the reduced risk of an attack that exploits the vulnerability. After a software provider builds and distributes a patch to fix the security vulnerability the operator may reset the control data to re enable the execution of the previously disabled portion s .

The switching on or off of function s or other portion s of a software module may be dynamic in that the disabling or enabling of the portion s may not require a recompilation or rebuild of the source code of the software module. The control data may be set during the execution of the software module to alter the runtime behavior of the software module in response to a security vulnerability in the software.

The build server device s may store source code . In some cases the source code may be included in any number of files and may be stored in a source control system such as the Perforce revision control system developed by Perforce Software Inc. of Alameda Calif. United States. The source code may be written in any programming language. For example the source code may be written in a compiled programming language such as Java C C C Objective C and so forth. The source code may also be written in an interpreted programming language such as JavaScript ActiveScript VBScript Perl and so forth that is executable within a virtual machine interpreter scripting engine or other process. The source code may describe any number of functions . The function s may include one or more subroutines methods procedures routines subprograms or other callable units of a software module.

The source code may be accessed by one or more build modules that are configured to build a software module based on the source code . The build module s may include one or more compilers that are configured to compile the source code to generate executable code of the software module . The compiler s may include any number of sub modules including but not limited to preprocessors parsers code generators optimizers and so forth. In some cases the build module s may be configured to compile the source code and generate machine executable code e.g. binary executable s that is executed by one or more processors. Alternatively the build module s may be configured to compile the source code and generate code e.g. bytecodes that is executed within a virtual machine interpreter runtime or other process. The build module s may also include linkers preprocessors parsers optimizers build scripts or other applications that process the source code or files built from the source code to generate the software module .

The source code may be included in any number of files and any number of source code files may be processed to build the software module . The software module may include any executable software module such as an application executable library interface and so forth. The software module may provide any type of functionality including but not limited to functionality associated with the operations of one or more of a web site an online business a social network service a data processing service a communications service an entertainment service a game and so forth.

The build module s may compile or otherwise process each of the function s described in the source code to generate a set of executable instructions comprising the executable function code for the function . The build module s may also generate for at least one of the function s one or more switching instructions . The switching instruction s for a function may control the execution of the set of executable instructions for the function based on a value included in control data . The set s of executable instructions and the switching instruction s may be included in the software module . The switching instruction s may be inserted into the executable code of the software module by the build module s even though the source code may not have been written to include any code specifying a conditional execution of the function .

In some implementations the determination to generate switching instruction s for a function and thus implement the switching feature for the function may be based at least partly on a directive included in the source code by a developer designer program manager or other individual s . For example the source code may include a directive switchable before the declaration of a function to indicate that switching instruction s are to be generated to control the execution of the function .

In some cases the build module s may generate switching instruction s for function s that perform a particular type of functionality. For example the switching instruction s may be generated for functions that are exposed to an end user that access data e.g. sensitive or confidential data that employ credentials to access other systems that are included in an API to be called from other software modules and so forth.

In some implementations the switching instructions may be in the form of a conditional that executes different code paths based on the value of the control data associated with the function . For example if the control data associated with a function is a particular value the set of executable instructions for the function may be executed. If the control data is a different value the set of executable instructions for the function may not be executed and instead the switching instructions may emit error information. The error information may be in the form of an error return code a null return code an assertion an exception or in another form. In some implementations the emitted error information may indicate that the set of executable instructions for the function was blocked disabled or otherwise bypassed via the control data such that a calling process may not misinterpret the error information as a normal return value of the function . For example the error information may include a message cannot execute function .

In implementations where the control data includes an array of bits that each corresponds to a function an on bit e.g. may indicate that the set of executable instructions for the function is to be bypassed and an off bit e.g. may indicate that the set of executable instructions is to be executed. Alternatively an off bit may indicate execution and an on bit may indicate bypass.

Returning to the build server device s may execute a deployment module that deploys or otherwise communicates the software module to one or more host device s . The host device s may comprise any type of computing device including but not limited to those types of computing device s described with reference to the build server device s . Although examples herein may describe the host device s as physical device s implementations are not so limited. In some cases the host device s may include one or more of a virtual computing environment a hypervisor an emulation or a virtual machine executing on one or more physical computing devices. In some cases two or more of the host devices may comprise a cluster cloud farm or other grouping that coordinates operations to provide load balancing failover support parallel processing capabilities shared storage resources or other aspects. The host device s are described further with reference to .

The host device s may execute the software module . During the execution of the software module one or more other processes may call the function s or other callable portion s of the software module . In response to each call to a function that has been compiled with the switching feature the switching instructions may check the current value of the control data associated with the function . The switching instruction s may execute or bypass the set of executable instructions for the function based on the current value of the control data associated with the function .

In some implementations the host device s or other device s may execute a management user interface UI that enables an operator or other user to set one or more values of the control data corresponding to one or more switchable functions of one or more software modules that are executable on the host device s . depicts an example of the management UI that is employable to set the control data . As shown in the management UI may present one or more software module names identifying the software module s that are controllable via the management UI .

For each software module that is controllable via the management UI the management UI may present one or more switch controls . The switch control s may enable a user to select which function s of the software module are to be executed and which function s are to be bypassed. Accordingly the switch control s may include control s for the function s that were compiled with the switching feature such that the switching instruction s were generated for the function .

In some implementations as shown in the example the switch control s for the switchable function s may be arranged hierarchically in a manner that may be similar to a call stack of the software module . For example a class level switch control may be included for a class or an object of the software module and one or more child switch control s may be presented under the class level switch control corresponding to switchable function s that are member s of the class or object. Selection of the class level switch control may automatically cause the selection of the child switch control s under the class level switch control as shown in with the selection of ExampleClass1 .

The management UI may also include one or more other controls . For example the management UI may include a control to enable the user to commit the selection s or de selection s made using the switch control s . The user s operation of such a control may cause changes to the control data corresponding to the selection s or de selection s . For example as shown in committing the current selection s may cause binary data to be written to the control data with the on bits corresponding to the function s selected for bypass. The other control s may also include a control to clear the current selection s in the switch control s .

Returning to in some implementations the host device s may include a management API . Other software modules e.g. applications libraries etc. may call one or more methods that are exported exposed or otherwise provided by the management API to change the control data and cause one or more functions to be switched on or off. Accordingly implementations enable the programmatic control of the execution of the switchable function s .

Some implementations may employ various acceleration techniques to mitigate potentially negative performance effects of checking the control data in response to multiple function calls. For example various hardware acceleration techniques may be employed to increase the speed at which the switching instruction s are executed to check the value s of the control data . In some cases the control data may be stored in memory that may be more rapidly accessed than other memory such as one or more of a processor register random access memory RAM solid state memory content addressable memory CAM and so forth. Moreover some implementations may enable the switching feature to be disabled on one or more host device s or for one or more software modules through the setting of an environment variable or by other means.

Although depicts the control data as separate from the software module implementations are not so limited. In some cases the control data may be in the runtime e.g. active memory of the executing software module or in the runtime memory of a virtual machine executing the software module . In some implementations access to the control data may be secure such that authenticated users are provided with the ability to read or alter the control data . In such cases the management UI may be accessible to a user based on verification of the user s identify based on authentication of user provided credentials or through other means.

In some implementations the control data may be included in a section block or other portion of the software module . The control data may be secured against unauthorized access through encryption or other means. In some implementations the build module s may generate the control data with default e.g. switched on values for each of the function s and the control data may be deployed to the host device s with the software module .

In some implementations the build module s or another process may generate control data metadata that indicates which portions of the control data correspond to which functions . The control data metadata may describe for each of the switchable function s a mapping or other association between the name or other identifier of the function and the portion of the control data that corresponds to the function . In some implementations the control data metadata may describe the portions of the control data as a bit number or an offset of each portion from the beginning of the control data . The control data metadata may be employed to determine the switch control s to be presented in the management UI . The control data metadata may also be employed by the switching instruction s or other module s to determine which function s to switch on or off based on the values of the control data when the software module executes.

Although examples herein may describe generating the switching instruction s at build time such as during the compiling or linking of the source code implementations are not so limited. In some implementations the switching instruction s may be incorporated into the software module after the software module is built such as through a binary patch of the software module . In some cases the switching instruction s may be injected patched or otherwise incorporated into the software module during the execution of the software module as described further with reference to .

As shown in in some implementations the software module may be built on the build server device s to include the set s of executable instructions for the function s but not to include the switching instruction s that control execution of the set s of executable instructions . The built software module may be deployed to the host device s . The host device s may execute a control module . The control module may be configured to monitor network communications to and from the host device s or communications that are internal to the host device s .

In some implementations the software module may be an API a service or another type of module that exposes one or more functions that are callable from processes executing externally with respect to the host device s . The control module may detect one or more external calls made to the software module by one or more external calling processes over a network. Based on packet inspection or other methods the control module may determine that the external call is to a set of executable instructions for a function of the software module . The control module may access the control data to determine whether the external call is to be allowed to proceed. If the control data indicates that the function is to be bypassed the control module may block the external call . In some cases the control module may return error information indicating that the external call is blocked. Alternatively the control module may return decoy data to the calling process to mislead or disrupt a potential attacker. In some cases the control module may execute within a load balancer router or other network appliance to monitor and control the external call s into the software module .

As shown in in some implementations the software module may be built on the build server device s to include the set s of executable instructions for the function s but not to include the switching instruction s that control execution of the set s of executable instructions . The built software module may be deployed to the host device s . When the software module executes on the host device s the switching instruction s may be dynamically linked patched or otherwise incorporated into the executing software module . For example the dynamic incorporation may map the entry point of a function to a return instruction that emits error information or decoy data instead of pointing to the set of executable instructions for the function . The dynamic incorporation of the switching instruction s may be performed conditionally based on a value of the control data for the function at runtime.

The various devices of the environments and may communicate with one another using one or more networks. Such networks may include public networks such as the Internet private networks such as an institutional or personal intranet or some combination of private and public networks. The networks may include any type of wired or wireless network including but not limited to local area networks LANs wide area networks WANs wireless WANs WWANs wireless LANs WLANs mobile communications networks e.g. 3G 4G etc. and so forth. In some implementations the communications between the various devices in the environments and may be encrypted or otherwise secured. For example such communications may employ one or more public or private cryptographic keys ciphers digital certificates or other credentials supported by a security protocol such as any version of the Secure Sockets Layer SSL or the Transport Layer Security TLS protocol.

The build server device s may include one or more input output I O devices . The I O device s may include one or more input devices such as a keyboard a mouse a pen a game controller a touch input device an audio input device e.g. a microphone a gestural input device a haptic input device an image or video capture device e.g. a camera or other devices. In some cases the I O device s may also include one or more output devices such as a display an audio output device e.g. a speaker a printer a haptic output device and so forth. The I O device s may be physically incorporated with the build server device s or may be externally placed.

The build server device s may include one or more I O interfaces to enable components or modules of the build server device s to control interface with or otherwise communicate with the I O device s . The I O interface s may enable information to be transferred in or out of the build server device s or between components of the build server device s through serial communication parallel communication or other types of communication. For example the I O interface s may comply with a version of the RS 232 standard for serial ports or with a version of the Institute of Electrical and Electronics Engineers IEEE 1284 standard for parallel ports. As another example the I O interface s may be configured to provide a connection over Universal Serial Bus USB or Ethernet. In some cases the I O interface s may be configured to provide a serial connection that is compliant with a version of the IEEE 1394 standard. The build server device s may also include one or more busses or other internal communications hardware or software that enables the transfer of data between the various modules and components of the build server device s .

The build server device s may include one or more network interfaces that enable communications between the build server device s and other network accessible computing devices such as the host device s . The network interface s may include one or more network interface controllers NICs or other types of transceiver devices configured to send and receive communications over one or more networks.

The build server device s may include one or more memories described herein as memory . The memory comprises one or more computer readable storage media CRSM . The CRSM may include one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions describing data structures program modules processes applications or other data for the operation of the build server device s . In some implementations the memory may provide storage of computer readable instructions or other information in a non transitory format.

The memory may include an operating system OS module . The OS module may be configured to manage hardware resources such as the I O device s the I O interface s and the network interface s . The OS module may also be configured to provide various services to applications processes or modules executed by the processor s . The OS module may include one or more of the following any version of the Linux OS any version of iOS from Apple Corp. of Cupertino Calif. USA any version of Windows or Windows Mobile from Microsoft Corp. of Redmond Wash. USA any version of Android from Google Corp. of Mountain View Calif. USA and its derivatives from various sources any version of Palm OS from Palm Computing Inc. of Sunnyvale Calif. USA and its derivatives from various sources any version of BlackBerry OS from Research In Motion Ltd. of Waterloo Ontario Canada any version of VxWorks from Wind River Systems of Alameda Calif. USA or other operating systems.

The memory may include one or more of the modules described above as executing on the build server device s such as the build module s or the deployment module . The memory may also include one or more other modules such as a user authentication module or an access control module to secure access to the build server device s source control module s version control module s and so forth.

The memory may include or have access to data storage which stores data for operations of the build server device s . The data storage may comprise a file system database array structured list tree or other data structure and may be a relational or a non relational datastore. The data storage may store any of the information described above as being present on the build server device s including but not limited to the source code or the executable code of the software module . The data storage may also store other data such as user authentication information access control data source control information version control information build status information or other information. In some implementations at least a portion of the information stored in the data storage may be stored externally to the build server device s on other devices that may communicate with the build server device s via the I O interface s or via the network interface s .

The host device s may include one or more memories described herein as memory . The memory comprises one or more CRSM as described above with reference to the memory . The memory may include an OS module that is configured to manage hardware resources such as the I O device s the I O interface s and the network interface s and to provide various services to applications processes or modules executing on the processor s . The OS module may include one or more of the operating systems described above with reference to the OS module .

The memory may include one or more of the modules described above as executing on the host device s such as the software module the management UI the management API or the control module . The memory may also include one or more other modules such as a user authentication module or an access control module to secure access to the host device s and so forth.

The memory may include the data storage which may store data for operations of the host device s . The data storage may comprise a database array structured list tree or other data structure and may be a relational or a non relational datastore. The data storage may store data such as that described above as present on the host device s including one or more of the control data or the control data metadata . In some implementations the data storage may include store security information that describes one or more security vulnerabilities determined to be present in the software module s . Such security information may be employed to determine whether to disable the execution of one or more functions of the software module s to mitigate the risk due to the security vulnerabilities. The data storage may also store other data such as user authentication information or access control data. In some implementations at least a portion of the information stored in the data storage may be stored externally to the host device s on other devices that may communicate with the host device s via the I O interface s or via the network interface s .

At the compiling or other processing of the source code to generate the software module may begin. In some implementations the build module s may be configured to accept an input parameter indicating that the switching feature is to be included for one or more functions of the generated executable code. For example a compiler may be configured to accept a command line parameter indicating that all function s are to be switchable e.g. compile.exe switchable all . As another example a compiler may be configured to accept a command line parameter that indicates particular function s e.g. public functions are to be switchable e.g. compile.exe switchable public .

In implementations where the switching feature is activated in the build module s based on an input parameter at a determination may be made whether the parameter has been set. If not the process may proceed to and process e.g. compile the source code without generating the switching instruction s for any function s . For example in cases where the software module is to execute in a trusted environment a controlled environment or an environment that is not connected to network s the software module may be built without the switching feature. If it is determined at that the input parameter has been set to activate the switching feature the process may proceed to .

At the build module s may parse or otherwise analyze the source code to identify a function in the source code . At the set of executable instructions may be generated which when executed perform the function .

In some implementations certain types of functions such as public functions may be made switchable in the software module . In such implementations at a determination may be made whether the function is of a type e.g. public that is to be switchable. If not the process may proceed to . If so the process may proceed to . The determination of the type of the function or other characteristics of the function may be made by parsing the source code that describes the function . For example the source code may be parsed to identify the keyword public that is included using a syntax appropriate to the programming language to indicate that the function is public.

In some implementations the build module s may make a function switchable based at least partly on a directive included in the source code as described above. In such implementations at a determination is made whether the directive is present relative to the description of the function in the source code . If not the process may proceed to . If so the process may proceed to .

At the switching instruction s may be generated to control the execution of the set of executable instructions generated at for the function .

At a determination is made whether there is additional source code to process e.g. during compilation . If so the process may return to and identify another function in the source code to be compiled or otherwise processed. If not the process may end processing at .

Although the example of depicts the switching feature being implemented for a function if the function is a certain type e.g. public and the source code includes a directive implementations are not limited to this example. Some implementations may not provide for the use of a directive to indicate the switching feature for a function . Moreover in some implementations the directive may be employed to override the determination at such as to indicate that the switching feature is to be included for non public e.g. private function s .

Implementations also support the use of other criteria to determine which functions are to be made switchable in the software module . In some cases the switching instruction s may be generated for those function s that provide a particular type of functionality. For example the switching feature may be enabled for the function s that provide user facing user visible or client exposed features of the software module . In some cases the switching instruction s may be generated for those function s that are vulnerable to being attacked or otherwise compromised by malicious processes or individuals.

At the management UI is presented. As described with reference to the management UI may include one or more switch controls corresponding to switchable functions of one or more software modules .

At selection information provided through the management UI may be accessed. The selection information may be provided by a user through the switch control s of the management UI to indicate one or more switchable functions to be bypassed e.g. not executed during execution of the software module .

At the control data may be determined based on the selection information provided through the management UI to cause the selected switchable function s to be bypassed during the execution of the software module .

At selection information may be received through one or more calls into the management API by other modules such as applications libraries and so forth.

At the control data may be determined based on the selection information provided through the management API to cause the selected switchable function s to be bypassed during the execution of the software module . Implementations support the determination of the control data through selection information provided via the management UI the management API or both the management UI and the management API .

Implementations also support other methods for determining the control data . For example the control data may be determined automatically to switch off the execution of one or more functions based on a determination that the security information indicates potential security vulnerabilities in the function s . Implementations also support the specification of the control data by a user through data entry methods other than the management UI .

At the software module may begin executing on the host device s . As described above the software module may have been built to include switching instruction s for one or more functions .

At a call to a function from a calling process may be detected. The switching instruction s may be executed to trap and handle the call. The calling process may be external to the software module . In some cases the call may come from another portion of the software module .

At the control data corresponding to the function may be accessed by the switching instruction s . At a determination is made whether the control data indicates that the function is to be bypassed e.g. not executed . If not the process may proceed to and the set of executable instructions for the function may be executed. The function may then return e.g. return execution of the program to a calling function routine or process .

If the control data indicates that the function is to be bypassed or otherwise not executed the process may proceed to . At error information may be emitted by the switching instruction s to indicate to the calling process that the function has been bypassed switched off or is otherwise not executable. The function may then return. The error information may comprise a return value such as an error code or a null value. The error information may also comprise an exception or an assertion that may be caught and processed by the calling process. In some cases the error information may include a description to indicate that the function has been bypassed. For example the error information may include a text description cannot execute function where is a name or other identifier of the function that is bypassed.

Although the examples herein may describe the switching off or switching on of functions in the software module implementations are not so limited. Implementations may also be employed to enable any portion of the software module to be switched off or on based on the control data . For example a block of the source code including any number of lines of code in any position may be compiled or otherwise processed to be switchable at runtime. Switching may also be implemented for a class object interface data structure or other portion of the source code .

Moreover although the examples herein may describe using the switching feature to disable potentially vulnerable portion s of a software module implementations may also be employed in other situations. For example portion s of a software module may be switched on or off to enable or disable particular features of the software module absent any security vulnerabilities. Implementations also enable portion s of a software module to be switched on or off to affect the performance of the software module or the host device s on which it executes to enable or disable logging features and for other purposes.

At the software module may begin executing on the host device s . As described above the software module may have been built to include switching instruction s for one or more functions .

At a call to a function from a calling process may be detected. The switching instruction s may be executed to trap and handle the call. The calling process may be external to the software module . In some cases the call may come from another portion of the software module .

At the control data corresponding to the function may be accessed by the switching instruction s . At a determination is made whether the control data indicates that the function is to be bypassed e.g. not executed . If not the process may proceed to and the set of executable instructions for the function may be executed. The function may then return.

If the control data indicates that the function is to be bypassed or otherwise not executed the process may proceed to . At decoy data may be emitted. In some cases the decoy data may be a spoofed return value that is returned as if it were a e.g. normal or programmed return value of the function . The decoy data may be configured to mislead misdirect or otherwise interfere with the activities of a possible attacker attempting to compromise the software module or the host device s . In some cases the decoy data may include active e.g. executable code that executes on an attacker s system to track a location or other information regarding the attacker. In some implementations the decoy data may be configured as described in U.S. patent application Ser. No. 14 227 845 filed on Mar. 27 2014 titled Identifying Data Usage Via Active Data which is incorporated by reference into the present disclosure.

At the software module may begin executing on the host device s . As described above with reference to the software module may have been built to include the set s of executable instructions for one or more functions but not to include the switching instruction s for one or more functions .

At a call to a function from a calling process may be detected and intercepted by the control module . In some cases the call may be an external call from a calling process that is executing on a device that is external to the host device s . As described with reference to the control module may inspect one or more packets of the call to determine that the call is to a set of executable instructions corresponding to the particular function .

At the control data corresponding to the function may be accessed by the control module . At a determination is made whether the control data indicates that the function is to be bypassed e.g. not executed . If the control data does not indicate the function is to be bypassed the process may proceed to and allow the call to the function . The set of executable instructions for the function may then be executed and the set of executable instructions may return a return value to the calling process.

If it is determined at that the function is to be bypassed the control module may disallow the call to the function . The control module may then return error information indicating that the call has been disallowed. In some cases the control module may return decoy data to mislead a potential attacker as described with reference to .

Although examples may describe using the control data in a binary manner to determine whether or not to execute a set of executable instructions for a function implementations are not so limited. In some implementations the control data may be employed to constrain the set of executable instructions for a function to be executed a maximum number of times during a time period e.g. per day . Such a constraint may prevent malicious processes or individuals from repeatedly calling a function in a denial of service attack. The constraint may also prevent malicious processes or individuals from degrading the performance of a system by causing a stack overflow in a software module that may exhibit such a vulnerability.

In some implementations the control data may be employed to determine which version of the set of executable instructions to execute in cases where there may be multiple versions. For example a patch may be developed and released for the software module to address a security vulnerability implement or disable a feature or for other purposes. After the patch is released the control data may be updated to indicate that the patched version of the set of executable instructions is to be executed instead of a previous version. In such cases the control data may list for each of one or more functions a version number or other identifier of the version to be executed.

At the software module may begin executing on the host device s . In some cases the software module may have been built to include the switching instruction s for one or more functions . Alternatively the software module may not include the switching instruction s and the switching may be performed via dynamic patching or linking as described with reference to .

At a call to a function from a calling process may be detected. At the control data corresponding to the function may be accessed. At based on the control data a determination may be made which version of the function to execute. At the set of executable instructions corresponding to the determined version may be executed.

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in the figures above may be eliminated combined or performed in an alternate order. Any steps or operations may be performed serially or in parallel. Moreover the methods described above may be implemented as one or more software programs for a computer system and may be encoded in a computer readable storage medium as instructions executable on one or more processors.

Embodiments may be provided as a computer program product including one or more non transitory computer readable storage media having stored thereon instructions in compressed or uncompressed form that may be used to program a computer or other electronic device to perform processes or methods described herein. The computer readable storage media may include one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium and so forth. For example the computer readable storage media may include but are not limited to hard drives floppy diskettes optical disks read only memories ROMs RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs flash memory magnetic or optical cards solid state memory devices or other types of physical media suitable for storing electronic instructions. Further embodiments may also be provided as a computer program product including a transitory machine readable signal in compressed or uncompressed form . Examples of machine readable signals whether modulated using a carrier or unmodulated include but are not limited to signals that a computer system or machine hosting or running a computer program may be configured to access including signals transferred by one or more networks. For example a transitory machine readable signal may comprise transmission of software by the Internet.

Separate instances of these programs can be executed on or distributed across any number of separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case. A variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations. Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art. It is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

