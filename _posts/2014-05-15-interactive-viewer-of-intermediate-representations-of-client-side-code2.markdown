---

title: Interactive viewer of intermediate representations of client side code
abstract: An interactive intermediate representation (IR) viewer displays a view of the intermediate representation of client side code during a just-in-time compilation of the client side code in a live environment. The interactive IR viewer allows a developer to request the intermediate representation generated during one or more of the phases of the JIT compilation of the client side code. Modifications may be made to the intermediate representation before executable code is generated. The analysis of the intermediate representation during the live environment provides a developer with insight as to how the executable code is being compiled so that improvements may be made to improve the performance of the client side code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639382&OS=09639382&RS=09639382
owner: MICROSOFT TECHNOLOGY LICENSING, LLC.
number: 09639382
owner_city: Redmond
owner_country: US
publication_date: 20140515
---
A web browser is an application that formats and renders an information resource obtained over a network onto a display device. The information resource may be a web page or document that includes various types of code and content such as client side code HTML tags Cascading Style Sheets CSS HTTP headers and so forth. The client side code is embedded in the information resource and executed on the client machine. Typically the client side code is implemented as a script that is written in a dynamic programming language and interpreted at runtime. Portions of the client side code may be just in time JIT compiled into machine or executable code in order to increase the execution speed of the client side code. The JIT compilation of the client side code may perform optimizations aimed at increasing the efficiency of the executable code. However the JIT compilation may not produce efficient executable code which is often difficult to detect during development of the client side code or the JIT compiler.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

An interactive intermediate representation IR viewer interacts with a user or developer to display the intermediate representation of client side code generated during the JIT compilation of the client side code while executing in a live environment. The interactive IR viewer allows a developer to request the intermediate representation generated during one or more phases of the JIT compilation. The developer may modify the IR which is then compiled and executed. The execution of the modified IR enables the developer to analyze the performance of the client side code and or the JIT compiler during a live environment. This analysis provides the developer with insight that is useful for improving the client side code and or the JIT compiler.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.

The technology described herein pertains to an interactive intermediate representation IR viewer that obtains and displays a view of the intermediate representation of client side code during a just in time compilation of the client side code in a live environment.

Client side code is code that is sent from a server to a web browser in a client machine for execution on the client machine. Since the code executes on the client machine it has been referred to as client side code. The client side code is typically implemented as a script that is embedded in a web page and which is parsed interpreted and or compiled on the client machine at runtime. The client side code may be written in a dynamic programming language or scripting programming language collectively referred to herein as a dynamic programming language . A dynamic programming language executes certain behaviors at runtime that a static programming language performs during compilation. For example a dynamic programming language performs dynamic typing code extensions and lazy interpretation at runtime. Examples of dynamic programming languages include without limitation JavaScript VBScript AJAX Python and Perl.

A script written in a dynamic programming language has different and changing content during runtime based on user input. Objects expressed in such dynamic programming languages may have changing types objects may change in shape e.g. may have properties dynamically added expression values may change and or other code factors may change dynamically during runtime. As such scripts written in a dynamic programming language are typically interpreted and not compiled since the script content may not be known in its entirety before compile time. This results in the scripts being executed inefficiently since the interpreted code executes more slowly than the machine code that is produced from compilation.

In some cases portions of a script may be just in time compiled resulting in executable machine code for that portion of the script. However the compilation of the script code into machine code consumes a high startup cost before its execution. In order to reduce this computational burden profile data is gathered about patterns that occur in the script. The patterns may include code that is executed relatively frequently. Once a sufficient amount of profile data is accumulated regarding the script the profile data may be used by the compiler to generate a more efficient machine code that is optimized for faster execution. The profile data may be saved in persistent storage and accessed during subsequent executions of the script.

An intermediate representation is a language independent representation of the client side code. Compiler optimizations may be performed on the intermediate representation of the client side code. An intermediate representation may be embodied in different forms such as without limitation a tree representation e.g. abstract syntax tree parse tree concrete syntax tree a directed acyclic graph bytecode and so forth.

A live environment refers to a current execution of the client side code. The live environment may occur during execution of the client side code in a web browser in an integrated development environment IDE or in any type of web application. The analysis of the IR in a live environment provides a developer with valuable insight as to how the JIT compiler is optimizing the client side code and transforming the client side code into executable code. Modifications that are made to the IR during the live environment are compiled and transformed into executable code that is subsequently executed in the live environment. This allows the developer to analyze the results of the modifications.

Attention now turns to a discussion of an exemplary system of the interactive IR viewer. illustrates a block diagram of an exemplary system of the interactive IR viewer. The system may include a server and a computing device communicatively coupled through a communications framework . Although the system as shown in has a limited number of elements in a certain topology it may be appreciated that the system may include more or less elements in alternate topologies as desired for a given implementation.

The computing device and the server may be any type of electronic device capable of executing programmable instructions such as without limitation a mobile device a personal digital assistant a mobile computing device a smart phone a cellular telephone a handheld computer a server a server array or server farm a web server a network server an Internet server a work station a mini computer a mainframe computer a supercomputer a network appliance a web appliance a distributed computing system multiprocessor systems or combination thereof. The communications framework may be any type of communications link capable of facilitating communications between the computing device and the server utilizing any communications protocol and in any configuration such as without limitation a wired network wireless network or combination thereof. In one or more embodiments the communications framework may be embodied as the Internet.

The computing device may include a document retrieved from the server through the communications framework a web browser and a display device . The web browser is a program that retrieves the document utilizing a network address such as a uniform resource locator URL formats the information of the document and renders the formatted document on the display device . Examples of a web browser include without limitation Internet Explorer Mozilla Firefox Safari Google Chrome and so forth.

The document may be a web document such as a web page that includes code of a markup language such as hypertext markup language HTML dynamic HTML DHTML extensible HTML XHTML extensible markup language XML etc. The document may include document object model DOM objects and one or more scripts . The DOM objects include one or more objects represented in the document according to the DOM convention which is a cross platform and language independent convention for representing and interacting with objects. The DOM objects may include objects that are directly included in document or referenced by the document . The scripts may include code written in a dynamic programming language that enables changes made to the DOM objects .

Attention now turns to which depicts a more detailed description of the components of the web browser and the interactive IR viewer that are used in the JIT compilation of the client side code. The web browser receives client side code that was embedded in the document . The web browser may interpret and then JIT compile the client side code to produce executable code . The web browser may include a parser an interpreter and a JIT compiler .

The parser receives the source code of the client side code and performs token generation or lexical analysis so that the source code is formatted into symbols or tokens. The parser can perform error checking on the tokens to determine whether expressions are formed in accordance with the grammar of the underlying programming language and to check for syntax errors. The parser can output the parsed source code in any suitable form which is input to the interpreter . In one embodiment the parser generates bytecodes . A bytecode includes one or more bytes of data to represent an instruction associated with a virtual machine that executes the client side code .

The interpreter interprets the client side code . The interpreter may be implemented as a JavaScript interpreter a VB interpreter a Python interpreter and so forth. The interpreter may also include a profile generator . The profile generator is configured to analyze patterns in the client side code that occur multiple times to collect statistics and further historical information regarding the client side code which is used to generate profile data . The historical information may be used to detect the presence of frequently executed functions loop bodies helper calls or property accesses found in the client side code. By indicating the presence of such patterns the historical pattern information may be used to more efficiently execute the client side code by generating executable code for common occurring patterns. The output of the interpreter is the profile data which is forwarded to the JIT compiler .

The JIT compiler is a just in time compiler since portions of the bytecodes are compiled as needed rather than being compiler prior to execution. The JIT compiler utilizes the profile data to determine which portions of the bytecodes are to be compiled into executable code and executed. The JIT compiler performs the compilation in various phases. There may be various optimization phases i.e. phase to phase N with each optimization phase generating an intermediate representation IR IR resulting from the applied optimization. The optimizations may include inline optimization global optimization local and global common subexpression elimination loop unrolling and so forth. In addition the JIT compiler performs register allocation and machine code encoding . Register allocation assigns processor registers to program variables. The machine code encoding generates the executable code .

The interactive IR viewer interacts with the JIT compiler to obtain the IR at a selected phase which is then displayed to the developer. The interactive IR viewer may include one or more application programming interfaces APIs a user interface and an engine . The APIs are used to interact with the JIT compiler to obtain an IR of a particular feature function and phase of the JIT compilation requested by a developer.

The user interface facilitates the interaction of the developer to initiate requests for a particular IR. For example as shown in a GET IR API may be used to request the IR corresponding to a particular file function and phase of the JIT compiler . The requested IR may be returned to the IR viewer and rendered on the display device . The developer may modify the IR and the modified IR may be transmitted to the JIT compiler . The modified IR may be transmitted to the JIT compiler through another API call such as the MODIFIED IR API . The executable code resulting from the modified IR and the subsequent execution of the executable code may be analyzed for performance improvements that may result from the modified IR .

The client side code may not be contained in a single file and may include several files. Each file may include various functions methods or other program elements that may be of interest to a developer. In order to specify the IR of an associated program element the developer may utilize a profiler tool that generates information regarding the number of files that make up the client side code and the functions methods classes objects and program elements contained in each file. This profiler information may be used by the developer to select the file function and compilation phase that the developer uses to request an IR. The interactive IR viewer may display the profiler information to the developer to aid the developer in selecting a portion of the client side code.

Attention now turns to a description of further embodiments described with reference to various exemplary methods. It may be appreciated that the representative methods do not necessarily have to be executed in the order presented or in any particular order unless otherwise indicated. Moreover various activities described with respect to the methods can be executed in serial or parallel fashion or any combination of serial and parallel operations. The methods can be implemented using one or more hardware elements and or software elements of the described embodiments or alternative embodiments as desired for a given set of design and performance constraints. For example the methods may be implemented as logic e.g. computer program instructions for execution by a logic device e.g. a general purpose or specific purpose computer .

Simultaneously as the web browser executes the client side code as described above the developer may activate the interactive IR viewer block . The interactive IR viewer may be a plug in to the web browser embedded within the web browser or part of the F12 developer tools embedded within the web browser. A developer may activate the interactive IR viewer through a separate tab that is displayed on the user interface of the web browser through a tool bar or menu through activation of the F12 key or through any other means.

Upon activation of the interactive IR viewer the developer may request the IR of a particular portion of the client side code block . The source code of the client side code associated with the request is displayed to the user along with the corresponding IR block . The selection may specify a particular file of the client side code a function within the particular file and a particular compilation phase.

The requested intermediate representation is obtained from the JIT compiler and displayed to the developer block . The developer may modify the intermediate representation block yes . The modified intermediate representation may then be compiled block and the resulting executable code executed block . The developer may choose not to modify the intermediate representation block no and instead select another intermediate representation to view block no block no . When the user is finished with the interactive IR viewer block yes the intermediate IR viewer finishes processing.

Attention now turns which illustrates another exemplary method of the interactive IR viewer. It should be noted that the method may be representative of some or all of the operations executed by one or more embodiments described herein and that the method can include more or less operations than that which is described in

In one or more embodiments the interactive IR viewer may be a plug in e.g. add on software component snap in to the web browser. In these embodiments when the user activates the web browser the interactive IR viewer registers itself with the web browser and establishes a protocol for exchanging data block . Thereafter the interactive IR viewer is part of the web browser. The developer may activate the interactive IR viewer through a menu option on the web browser through a key stroke e.g. F12 or in any other manner so desired. Once the interactive IR viewer is activated the user interface of the interactive IR viewer is displayed. A developer uses the user interface of the interactive IR viewer to interact with the developer and to display the source code of the client side code and its intermediate representation.

As the web browser is executing the client side code embedded in a document the developer may utilize the user interface of the interactive IR viewer to request the intermediate representation for a particular segment of the client side code. The developer may specify this segment by indicating the file function and phase of interest to the developer block . The interactive IR viewer then obtains the source code corresponding to the requested file and function which is displayed to the developer block .

The interactive IR viewer then obtains the corresponding intermediate representation associated with the requested portion of the source code block . The interactive IR viewer may issue one or more API calls to obtain the requested intermediate representation block . The requested intermediate representation is then rendered on a display block .

The developer may perform one or more actions with the intermediate representation. The developer may modify the intermediate representation by adding deleting or changing the intermediate representation. The user interface may be used to receive the modifications to the IR block . The interactive IR viewer may transmit the modified IR to the JIT compiler through one or more API calls block . The JIT compiler may use the modified IR in the compilation and generate executable code that is executed by the web browser. The user may continue to make additional selections and modifications as intended.

In this example the web page may include script code that includes the function cssRule. The function cssRule finds the rule that is associated with the input string rulestr. The function includes eleven lines of code . Line converts the input string rulestr to all lower case characters. The variable retVal is set to null in line . Line checks if style sheets exist and then searches for the associated rule. The outer loop lines to search each style sheet associated with a set of documents and the inner loop lines searches a style sheet for the rule that corresponds to the input string rulestr.

In this example the developer requested the IR for line of the function cssRule after a particular phase of the JIT compilation. The IR is shown in view . Each line of the IR includes an instruction. In this example the instruction includes a symbol and an operation that generates a value that is associated with the symbol. For example line shows the symbol s set to the result of the LdMethodFld operation performed using the contents of the symbol s. Line shows the symbol s set to the result of the StartCall operation performed with the value 1 . Line shows the symbol s set to the result of the CallI operation performed with the contents of the symbols s and s. Line shows the symbol s set to the result of the Ld A operation performed using the contents of the symbol s. A developer may alter any one of these lines of the IR code shown in view .

Attention now turns to a discussion of an exemplary operating environment. depicts one such exemplary operating environment . It should be noted that the operating environment is exemplary and not intended to suggest any limitation as to the functionality of the embodiments. The embodiments may be applied to an operating environment having one or more client s in communication through a communications framework with one or more server s . The operating environment may be configured in a network environment a distributed environment a multiprocessor environment or a stand alone computing device having access to remote or local storage devices.

A client may be embodied as a hardware device a software module or a combination thereof. The client may be any type of electronic device such as without limitation a mobile device a personal digital assistant a mobile computing device a smart phone a cellular telephone a handheld computer a server a server array or server farm a web server a network server a blade server an Internet server a work station a mini computer a mainframe computer a supercomputer a network appliance a web appliance a distributed computing system multiprocessor systems or combination thereof. The client may also be embodied as a software module having instructions that execute in a single execution path multiple concurrent execution paths e.g. thread process etc. or in any other manner.

A server may be embodied as a hardware device a software module or as a combination thereof. The server may be any type of electronic device capable of executing programmable instructions such as without limitation a mobile device a personal digital assistant a mobile computing device a smart phone a cellular telephone a handheld computer a server a server array or server farm a blade server a web server a network server an Internet server a work station a mini computer a mainframe computer a supercomputer a network appliance a web appliance a distributed computing system multiprocessor systems or combination thereof. The server may also be embodied as a software module having instructions that execute in a single execution path multiple concurrent execution paths e.g. thread process etc. or in any other manner.

The communications framework facilitates communications between the clients and the servers . The communications framework may embody any well known communication techniques such as techniques suitable for use with packet switched networks e.g. public networks such as the Internet private networks such as enterprise intranet and so forth circuit switched networks e.g. the public switched telephone network or a combination of packet switched networks and circuit switched networks with suitable gateways and translators . A client and a server may include various types of standard communication elements designed to be interoperable with the communications framework such as one or more communications interfaces network interfaces network interface cards radios wireless transmitters receivers wired and or wireless communication media physical connectors and so forth. Examples of wired communications media may include a wire cable metal leads printed circuit boards backplanes switch fabrics semiconductor material twisted pair wire coaxial cable fiber optics a propagated signal and so forth. Examples of wireless communications media may include acoustic radio frequency spectrum infrared and other wireless media.

The server may include one or more processors a communication interface and a memory . A processor may be any commercially available processor and may include dual microprocessors and multi processor architectures. The communication interface facilitates wired or wireless communications between the server and other computing devices.

The memory may be any computer readable storage media that may store executable procedures applications and data. The computer readable storage media does not pertain to propagated signals such as modulated data signals transmitted through a carrier wave. It may be any type of memory device e.g. random access memory read only memory etc. magnetic storage volatile storage non volatile storage optical storage DVD CD floppy disk drive and the like. The memory may also include one or more external storage devices or remotely located storage devices. The memory may contain instructions and data as follows 

The client may include one or more processors a communication interface and a memory . A processor may be any commercially available processor and may include dual microprocessors and multi processor architectures. The communication interface facilitates wired or wireless communications between the client and other computing devices.

The memory may be any computer readable storage media that may store executable procedures applications and data. The computer readable storage media does not pertain to propagated signals such as modulated data signals transmitted through a carrier wave. It may be any type of memory device e.g. random access memory read only memory etc. magnetic storage volatile storage non volatile storage optical storage DVD CD floppy disk drive and the like. The memory may also include one or more external storage devices or remotely located storage devices. The memory may contain instructions and data as follows 

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

