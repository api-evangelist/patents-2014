---

title: Opportunistic execution of secondary copy operations
abstract: Rather than relying on pre-defined scheduling of secondary copy operations such as backup jobs, the illustrative opportunistic approach initiates secondary copy operations based on changing operational conditions in a storage management system. An adaptive backup readiness score is based on a number of backup-readiness operational factors. An illustrative enhanced data agent which is associated with the target database application (or other executable component) may monitor the operational factors and determine the backup readiness score based on weights assigned to the respective operational factors. The enhanced data agent may evaluate recent backup jobs to determine which of the operational factors that contributed to the backup readiness score may have been most relevant. Based on the most-relevant analysis, the enhanced data agent may adapt the weights assigned to the monitored operational factors, so that the backup readiness score may be more suitable and responsive to ongoing operational conditions in the system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09645891&OS=09645891&RS=09645891
owner: COMMVAULT SYSTEMS, INC.
number: 09645891
owner_city: Tinton Falls
owner_country: US
publication_date: 20141204
---
Any and all applications if any for which a foreign or domestic priority claim is identified in the Application Data Sheet of the present application are hereby incorporated by reference under 37 CFR 1.57.

Businesses worldwide recognize the commercial value of their data and seek reliable cost effective ways to protect the information stored on their computer networks while minimizing impact on productivity. Protecting information is often part of a routine scheduled process that is performed within an organization. A company might back up critical computing systems such as databases file servers web servers and so on as part of a daily weekly or monthly maintenance schedule. The company may similarly protect computing systems used by each of its employees such as those used by an accounting department marketing department engineering department and so forth.

One issue that arises with storage management systems that protect database applications is the management of the transaction log file s which database applications automatically populate substantially concurrently with the execution of database transactions. A transaction log file may be one or more files collectively log file that capture transaction information for a database application so that in case of a catastrophic failure transactions may be replayed and the database restored. Thus for example every transaction e.g. add change and delete of database records may be captured in a log file. Some database applications accumulate all transaction entries into one consolidated transaction log file others generate a unique file for each transaction. The log file may be stored to the same storage device as the database itself or to another storage device. The log file is generally not part of the database and may be separately safeguarded. Regardless of the actual format location of the log file the log file needs to be periodically backed up to protected media. Moreover it is generally considered good practice to keep log files to a manageable size between backups so that in the event the database needs to be restored a relatively small number of transactions would have to be re run from the log file. Otherwise restoring a database based on a too large log file would keep the database out of service for too long.

Consequently it is generally good practice to back up transaction log files relatively frequently so that downtime for restore operations should they become necessary will be relatively short. The traditional approach is to schedule log file backup jobs e.g. every hour every quarter hour etc. depending on the characteristics of the database application. For example a high volume business critical database application may be supported by more frequent log file backups as compared to a lower volume counterpart. Typically after the log file has been backed up the production log file the one populated at least in part by the database application is truncated and then re populated by the database application until the next backup and truncation and so on.

However a regularly scheduled backup job may collide with a busy heavily loaded system and may take away precious resources that would be better employed in running the production environment a less busy time might be preferable. On the other hand a regularly scheduled backup job also may be unnecessary if the target database application has generated few transactions since the preceding backup. For example a database application may be busy serving search results and reports to users yet may have relatively few add change and delete transactions to be recorded in the log file in which case a log file backup job may take away precious processing resources and may use up backup storage that may be better employed otherwise.

The present inventors devised an opportunistic approach to solve this kind of issue in an illustrative storage management system. Rather than relying on pre defined scheduling of secondary copy operations such as backup jobs the illustrative opportunistic approach initiates secondary copy operations based on changing operational conditions in the storage management system as reflected in an adaptive backup readiness score. A number of backup readiness operational factors are employed to this purpose. An illustrative enhanced data agent which is associated with the target database application may monitor the operational factors and determine the backup readiness score based on weights assigned to the respective operational factors. Some backup readiness scores may trigger a log file backup job to be initiated e.g. based on a score threshold. Thus backup jobs are initiated based on the backup readiness score rather than on a pre defined schedule.

Examples of backup readiness operational factors that may be monitored by the enhanced data agent may include any one or more of the following without limitation i a measure of the amount of storage space occupied by the log file ii a measure of the amount of storage space occupied by the log file since a preceding backup job was initiated iii a number of log file entries generated since the preceding backup job iv a number of database application transactions executed since the preceding backup job was initiated v a measure of elapsed time since the preceding backup job was initiated vi a measure of activity of the database application during a period of time vii a measure of usage of the primary storage device during a period of time viii a measure of usage by the database application of the primary storage device during a period of time and ix a measure of usage of the client computing device during a period of time. Also vendor specific and release specific operational factors may be used as well. In a given storage management system the backup readiness score may be based on a combination of some but not necessarily all these operational factors each factor having its own weight parameter.

The backup readiness score is adaptive. The enhanced data agent may evaluate recent log file backup jobs to determine which of the operational factors that contributed to the backup readiness score may have been most relevant. Based on the most relevant analysis the enhanced data agent may adapt weights assigned to the monitored operational factors e.g. increasing decreasing maintaining so that the backup readiness score may be more suitable and responsive to ongoing operational conditions in the storage management system.

Illustratively a backup readiness operational factor may become most relevant in a particular evaluation cycle when it most often relative to the other operational factors considered in the backup readiness score exceeded its pre defined threshold when the backup jobs were initiated. A repeated over threshold condition for a certain operational factor may indicate that the condition needs more attention going forward for example may need to be more heavily weighted in the backup readiness score so that a backup job may be more likely to be initiated as a result. An operational factor that often exceeds its threshold may weigh more so that triggering of backup jobs more closely hews to that operational factor s behavior. As conditions change in the storage management system as reflected by the operational factors the backup readiness score may trigger backup jobs sooner or later as appropriate. Thus based on the set of monitored operational factors and their respective adaptive weights the illustrative data agent may opportunistically initiate backup jobs that are more consistent with changing system conditions than the regularly scheduled approach of the prior art.

The invention is not limited to the enhanced data agent performing the monitoring evaluating adjusting and or initiating alternatively an enhanced storage manager and or media agent may perform some or all of these operations. Furthermore the invention is not limited to database applications any executable component may benefit from the opportunistic approach described herein including for example a file system an operating system a virtual machine any other application. Likewise the invention is not limited to protecting log files any kind of file or data structure may also benefit from opportunistic secondary copy operations e.g. directories databases etc. The invention also is not limited to backup jobs any secondary copy operation may be opportunistically executed which may include making archive copies making reference copies making a copy of a secondary copy taking snapshots and or lifecycle management operations and hierarchical storage management etc. without limitation.

Systems and methods are disclosed for opportunistic execution of secondary copy operations. Examples of such systems and methods are described in further detail herein in reference to . Components and functionality for opportunistic execution of secondary copy operations may be configured and or incorporated into information management systems such as those described herein in .

With the increasing importance of protecting and leveraging data organizations simply cannot afford to take the risk of losing critical data. Moreover runaway data growth and other modern realities make protecting and managing data an increasingly difficult task. There is therefore a need for efficient powerful and user friendly solutions for protecting and managing data.

Depending on the size of the organization there are typically many data production sources which are under the purview of tens hundreds or even thousands of employees or other individuals. In the past individual employees were sometimes responsible for managing and protecting their data. A patchwork of hardware and software point solutions has been applied in other cases. These solutions were often provided by different vendors and had limited or no interoperability.

Certain embodiments described herein provide systems and methods capable of addressing these and other shortcomings of prior approaches by implementing unified organization wide information management. shows one such information management system which generally includes combinations of hardware and software configured to protect and manage data and metadata which is generated and used by the various computing devices in information management system . The organization that employs the information management system may be a corporation or other business entity non profit organization educational institution household governmental agency or the like.

Generally the systems and associated components described herein may be compatible with and or provide some or all of the functionality of the systems and corresponding components described in one or more of the following U.S. patents and patent application publications assigned to CommVault Systems Inc. each of which is hereby incorporated in its entirety by reference herein 

The information management system can include a variety of different computing devices. For instance as will be described in greater detail herein the information management system can include one or more client computing devices and secondary storage computing devices .

Computing devices can include without limitation one or more workstations personal computers desktop computers or other types of generally fixed computing systems such as mainframe computers and minicomputers. Other computing devices can include mobile or portable computing devices such as one or more laptops tablet computers personal data assistants mobile phones such as smartphones and other mobile or portable computing devices such as embedded computers set top boxes vehicle mounted devices wearable computers etc. Computing devices can include servers such as mail servers file servers database servers and web servers.

In some cases a computing device includes virtualized and or cloud computing resources. For instance one or more virtual machines may be provided to the organization by a third party cloud service vendor. Or in some embodiments computing devices can include one or more virtual machine s running on a physical host computing device or host machine operated by the organization. As one example the organization may use one virtual machine as a database server and another virtual machine as a mail server both virtual machines operating on the same host machine.

A virtual machine includes an operating system and associated virtual resources and is hosted simultaneously with another operating system on a physical host computer or host machine . A hypervisor typically software and also known in the art as a virtual machine monitor or a virtual machine manager or VMM sits between the virtual machine and the hardware of the physical host machine. One example of hypervisor as virtualization software is ESX Server by VMware Inc. of Palo Alto Calif. other examples include Microsoft Virtual Server and Microsoft Windows Server Hyper V both by Microsoft Corporation of Redmond Wash. and Sun xVM by Oracle America Inc. of Santa Clara Calif. In some embodiments the hypervisor may be firmware or hardware or a combination of software and or firmware and or hardware.

The hypervisor provides to each virtual operating system virtual resources such as a virtual processor virtual memory a virtual network device and a virtual disk. Each virtual machine has one or more virtual disks. The hypervisor typically stores the data of virtual disks in files on the file system of the physical host machine called virtual machine disk files in the case of VMware virtual servers or virtual hard disk image files in the case of Microsoft virtual servers . For example VMware s ESX Server provides the Virtual Machine File System VMFS for the storage of virtual machine disk files. A virtual machine reads data from and writes data to its virtual disk much the same way that an actual physical machine reads data from and writes data to an actual disk.

Examples of techniques for implementing information management techniques in a cloud computing environment are described in U.S. Pat. No. 8 285 681 which is incorporated by reference herein. Examples of techniques for implementing information management techniques in a virtualized computing environment are described in U.S. Pat. No. 8 307 177 also incorporated by reference herein.

The information management system can also include a variety of storage devices including primary storage devices and secondary storage devices for example. Storage devices can generally be of any suitable type including without limitation disk drives hard disk arrays semiconductor memory e.g. solid state storage devices network attached storage NAS devices tape libraries or other magnetic non tape storage devices optical media storage devices DNA RNA based memory technology combinations of the same and the like. In some embodiments storage devices can form part of a distributed file system. In some cases storage devices are provided in a cloud e.g. a private cloud or one operated by a third party vendor . A storage device in some cases comprises a disk array or portion thereof.

The illustrated information management system includes one or more client computing device having at least one application executing thereon and one or more primary storage devices storing primary data . The client computing device s and the primary storage devices may generally be referred to in some cases as a primary storage subsystem . A computing device in an information management system that has a data agent installed and operating on it is generally referred to as a client computing device or in the context of a component of the information management system simply as a client .

Depending on the context the term information management system can refer to generally all of the illustrated hardware and software components. Or in other instances the term may refer to only a subset of the illustrated components.

For instance in some cases the information management system generally refers to a combination of specialized components used to protect move manage manipulate analyze and or process data and metadata generated by the client computing devices . However the information management system in some cases does not include the underlying components that generate and or store the primary data such as the client computing devices themselves the applications and operating system operating on the client computing devices and the primary storage devices . As an example information management system may sometimes refer to one or more of the following components and corresponding data structures storage managers data agents and media agents. These components will be described in further detail below.

There are typically a variety of sources in an organization that produce data to be protected and managed. As just one illustrative example in a corporate environment such data sources can be employee workstations and company servers such as a mail server a web server a database server a transaction server or the like. In the information management system the data generation sources include the one or more client computing devices .

The client computing devices may include any of the types of computing devices described above without limitation and in some cases the client computing devices are associated with one or more users and or corresponding user accounts of employees or other individuals.

The information management system generally addresses and handles the data management and protection needs for the data generated by the client computing devices . However the use of this term does not imply that the client computing devices cannot be servers in other respects. For instance a particular client computing device may act as a server with respect to other devices such as other client computing devices . As just a few examples the client computing devices can include mail servers file servers database servers and web servers.

Each client computing device may have one or more applications e.g. software applications executing thereon which generate and manipulate the data that is to be protected from loss and managed. The applications generally facilitate the operations of an organization or multiple affiliated organizations and can include without limitation mail server applications e.g. Microsoft Exchange Server file server applications mail client applications e.g. Microsoft Exchange Client database applications e.g. SQL Oracle SAP Lotus Notes Database word processing applications e.g. Microsoft Word spreadsheet applications financial applications presentation applications graphics and or video applications browser applications mobile applications entertainment applications and so on.

The client computing devices can have at least one operating system e.g. Microsoft Windows Mac OS X iOS IBM z OS Linux other Unix based operating systems etc. installed thereon which may support or host one or more file systems and other applications .

The client computing devices and other components in information management system can be connected to one another via one or more communication pathways . For example a first communication pathway may connect or communicatively couple client computing device and secondary storage computing device a second communication pathway may connect storage manager and client computing device and a third communication pathway may connect storage manager and secondary storage computing device etc. see e.g. and . The communication pathways can include one or more networks or other connection types including one or more of the following without limitation the Internet a wide area network WAN a local area network LAN a Storage Area Network SAN a Fibre Channel connection a Small Computer System Interface SCSI connection a virtual private network VPN a token ring or TCP IP based network an intranet network a point to point link a cellular network a wireless data transmission system a two way cable system an interactive kiosk network a satellite network a broadband network a baseband network a neural network a mesh network an ad hoc network other appropriate wired wireless or partially wired wireless computer or telecommunications networks combinations of the same or the like. The communication pathways in some cases may also include application programming interfaces APIs including e.g. cloud service provider APIs virtual machine management APIs and hosted service provider APIs. The underlying infrastructure of communication paths may be wired and or wireless analog and or digital or any combination thereof and the facilities used may be private public third party provided or any combination thereof without limitation.

Primary data according to some embodiments is production data or other live data generated by the operating system and or applications operating on a client computing device . The primary data is generally stored on the primary storage device s and is organized via a file system supported by the client computing device . For instance the client computing device s and corresponding applications may create access modify write delete and otherwise use primary data . In some cases some or all of the primary data can be stored in cloud storage resources e.g. primary storage device may be a cloud based resource .

Primary data is generally in the native format of the source application . According to certain aspects primary data is an initial or first e.g. created before any other copies or before at least one other copy stored copy of data generated by the source application . Primary data in some cases is created substantially directly from data generated by the corresponding source applications .

The primary storage devices storing the primary data may be relatively fast and or expensive technology e.g. a disk drive a hard disk array solid state memory etc. . In addition primary data may be highly changeable and or may be intended for relatively short term retention e.g. hours days or weeks .

According to some embodiments the client computing device can access primary data from the primary storage device by making conventional file system calls via the operating system. Primary data may include structured data e.g. database files unstructured data e.g. documents and or semi structured data. Some specific examples are described below with respect to .

It can be useful in performing certain tasks to organize the primary data into units of different granularities. In general primary data can include files directories file system volumes data blocks extents or any other hierarchies or organizations of data objects. As used herein a data object can refer to both 1 any file that is currently addressable by a file system or that was previously addressable by the file system e.g. an archive file and 2 a subset of such a file e.g. a data block .

As will be described in further detail it can also be useful in performing certain functions of the information management system to access and modify metadata within the primary data . Metadata generally includes information about data objects or characteristics associated with the data objects. For simplicity herein it is to be understood that unless expressly stated otherwise any reference to primary data generally also includes its associated metadata but references to the metadata do not include the primary data.

Metadata can include without limitation one or more of the following the data owner e.g. the client or user that generates the data the last modified time e.g. the time of the most recent modification of the data object a data object name e.g. a file name a data object size e.g. a number of bytes of data information about the content e.g. an indication as to the existence of a particular search term user supplied tags to from information for email e.g. an email sender recipient etc. creation date file type e.g. format or application type last accessed time application type e.g. type of application that generated the data object location network e.g. a current past or future location of the data object and network pathways to from the data object geographic location e.g. GPS coordinates frequency of change e.g. a period in which the data object is modified business unit e.g. a group or department that generates manages or is otherwise associated with the data object aging information e.g. a schedule such as a time period in which the data object is migrated to secondary or long term storage boot sectors partition layouts file location within a file folder directory structure user permissions owners groups access control lists ACLs system metadata e.g. registry information combinations of the same or other similar information related to the data object.

In addition to metadata generated by or related to file systems and operating systems some of the applications and or other components of the information management system maintain indices of metadata for data objects e.g. metadata associated with individual email messages. Thus each data object may be associated with corresponding metadata. The use of metadata to perform classification and other functions is described in greater detail below.

Each of the client computing devices are generally associated with and or in communication with one or more of the primary storage devices storing corresponding primary data . A client computing device may be considered to be associated with or in communication with a primary storage device if it is capable of one or more of routing and or storing data e.g. primary data to the particular primary storage device coordinating the routing and or storing of data to the particular primary storage device retrieving data from the particular primary storage device coordinating the retrieval of data from the particular primary storage device and modifying and or deleting data retrieved from the particular primary storage device .

The primary storage devices can include any of the different types of storage devices described above or some other kind of suitable storage device. The primary storage devices may have relatively fast I O times and or are relatively expensive in comparison to the secondary storage devices . For example the information management system may generally regularly access data and metadata stored on primary storage devices whereas data and metadata stored on the secondary storage devices is accessed relatively less frequently.

Primary storage device may be dedicated or shared. In some cases each primary storage device is dedicated to an associated client computing device . For instance a primary storage device in one embodiment is a local disk drive of a corresponding client computing device . In other cases one or more primary storage devices can be shared by multiple client computing devices e.g. via a network such as in a cloud storage implementation. As one example a primary storage device can be a disk array shared by a group of client computing devices such as one of the following types of disk arrays EMC Clariion EMC Symmetrix EMC Celerra Dell EqualLogic IBM XIV NetApp FAS HP EVA and HP 3PAR.

The information management system may also include hosted services not shown which may be hosted in some cases by an entity other than the organization that employs the other components of the information management system . For instance the hosted services may be provided by various online service providers to the organization. Such service providers can provide services including social networking services hosted email services or hosted productivity applications or other hosted applications . Hosted services may include software as a service SaaS platform as a service PaaS application service providers ASPs cloud services or other mechanisms for delivering functionality via a network. As it provides services to users each hosted service may generate additional data and metadata under management of the information management system e.g. as primary data . In some cases the hosted services may be accessed using one of the applications . As an example a hosted mail service may be accessed via browser running on a client computing device . The hosted services may be implemented in a variety of computing environments. In some cases they are implemented in an environment having a similar arrangement to the information management system where various physical and logical components are distributed over a network.

The primary data stored on the primary storage devices may be compromised in some cases such as when an employee deliberately or accidentally deletes or overwrites primary data during their normal course of work. Or the primary storage devices can be damaged lost or otherwise corrupted. For recovery and or regulatory compliance purposes it is therefore useful to generate copies of the primary data . Accordingly the information management system includes one or more secondary storage computing devices and one or more secondary storage devices configured to create and store one or more secondary copies of the primary data and associated metadata. The secondary storage computing devices and the secondary storage devices may sometimes be referred to as a secondary storage subsystem .

Creation of secondary copies can help in search and analysis efforts and meet other information management goals such as restoring data and or metadata if an original version e.g. of primary data is lost e.g. by deletion corruption or disaster allowing point in time recovery complying with regulatory data retention and electronic discovery e discovery requirements reducing utilized storage capacity facilitating organization and search of data improving user access to data files across multiple computing devices and or hosted services and implementing data retention policies.

The client computing devices access or receive primary data and communicate the data e.g. over one or more communication pathways for storage in the secondary storage device s .

A secondary copy can comprise a separate stored copy of application data that is derived from one or more earlier created stored copies e.g. derived from primary data or another secondary copy . Secondary copies can include point in time data and may be intended for relatively long term retention e.g. weeks months or years before some or all of the data is moved to other storage or is discarded.

In some cases a secondary copy is a copy of application data created and stored subsequent to at least one other stored instance e.g. subsequent to corresponding primary data or to another secondary copy in a different storage device than at least one previous stored copy and or remotely from at least one previous stored copy. In some other cases secondary copies can be stored in the same storage device as primary data and or other previously stored copies. For example in one embodiment a disk array capable of performing hardware snapshots stores primary data and creates and stores hardware snapshots of the primary data as secondary copies . Secondary copies may be stored in relatively slow and or low cost storage e.g. magnetic tape . A secondary copy may be stored in a backup or archive format or in some other format different than the native source application format or other primary data format.

In some cases secondary copies are indexed so users can browse and restore at another point in time. After creation of a secondary copy representative of certain primary data a pointer or other location indicia e.g. a stub may be placed in primary data or be otherwise associated with primary data to indicate the current location on the secondary storage device s of secondary copy .

Since an instance of a data object or metadata in primary data may change over time as it is modified by an application or hosted service or the operating system the information management system may create and manage multiple secondary copies of a particular data object or metadata each representing the state of the data object in primary data at a particular point in time. Moreover since an instance of a data object in primary data may eventually be deleted from the primary storage device and the file system the information management system may continue to manage point in time representations of that data object even though the instance in primary data no longer exists.

For virtualized computing devices the operating system and other applications of the client computing device s may execute within or under the management of virtualization software e.g. a VMM and the primary storage device s may comprise a virtual disk created on a physical storage device. The information management system may create secondary copies of the files or other data objects in a virtual disk file and or secondary copies of the entire virtual disk file itself e.g. of an entire .vmdk file .

Secondary copies may be distinguished from corresponding primary data in a variety of ways some of which will now be described. First as discussed secondary copies can be stored in a different format e.g. backup archive or other non native format than primary data . For this or other reasons secondary copies may not be directly useable by the applications of the client computing device e.g. via standard system calls or otherwise without modification processing or other intervention by the information management system .

Secondary copies are also in some embodiments stored on a secondary storage device that is inaccessible to the applications running on the client computing devices and or hosted services . Some secondary copies may be offline copies in that they are not readily available e.g. not mounted to tape or disk . Offline copies can include copies of data that the information management system can access without human intervention e.g. tapes within an automated tape library but not yet mounted in a drive and copies that the information management system can access only with at least some human intervention e.g. tapes located at an offsite storage site .

Creating secondary copies can be a challenging task. For instance there can be hundreds or thousands of client computing devices continually generating large volumes of primary data to be protected. Also there can be significant overhead involved in the creation of secondary copies . Moreover secondary storage devices may be special purpose components and interacting with them can require specialized intelligence.

In some cases the client computing devices interact directly with the secondary storage device to create the secondary copies . However in view of the factors described above this approach can negatively impact the ability of the client computing devices to serve the applications and produce primary data . Further the client computing devices may not be optimized for interaction with the secondary storage devices .

Thus in some embodiments the information management system includes one or more software and or hardware components which generally act as intermediaries between the client computing devices and the secondary storage devices . In addition to off loading certain responsibilities from the client computing devices these intermediate components can provide other benefits. For instance as discussed further below with respect to distributing some of the work involved in creating secondary copies can enhance scalability.

The intermediate components can include one or more secondary storage computing devices as shown in and or one or more media agents which can be software modules operating on corresponding secondary storage computing devices or other appropriate computing devices . Media agents are discussed below e.g. with respect to .

The secondary storage computing device s can comprise any of the computing devices described above without limitation. In some cases the secondary storage computing device s include specialized hardware and or software componentry for interacting with the secondary storage devices .

To create a secondary copy involving the copying of data from the primary storage subsystem to the secondary storage subsystem the client computing device in some embodiments communicates the primary data to be copied or a processed version thereof to the designated secondary storage computing device via the communication pathway . The secondary storage computing device in turn conveys the received data or a processed version thereof to the secondary storage device . In some such configurations the communication pathway between the client computing device and the secondary storage computing device comprises a portion of a LAN WAN or SAN. In other cases at least some client computing devices communicate directly with the secondary storage devices e.g. via Fibre Channel or SCSI connections . In some other cases one or more secondary copies are created from existing secondary copies such as in the case of an auxiliary copy operation described in greater detail below.

Some or all primary data objects are associated with corresponding metadata e.g. Meta which may include file system metadata and or application specific metadata. Stored on the secondary storage device s are secondary copy data objects A C which may include copies of or otherwise represent corresponding primary data objects and metadata.

As shown the secondary copy data objects A C can individually represent more than one primary data object. For example secondary copy data object A represents three separate primary data objects C and C represented as C and C respectively and accompanied by the corresponding metadata Meta Meta and Meta respectively . Moreover as indicated by the prime mark a secondary copy object may store a representation of a primary data object and or metadata differently than the original format e.g. in a compressed encrypted deduplicated or other modified format. Likewise secondary data object B represents primary data objects B and A as B and A respectively and accompanied by corresponding metadata Meta Meta and Meta respectively. Also secondary data object C represents primary data objects A B and A as A B and A respectively accompanied by corresponding metadata Meta Meta and Meta respectively.

The information management system can incorporate a variety of different hardware and software components which can in turn be organized with respect to one another in many different configurations depending on the embodiment. There are critical design choices involved in specifying the functional responsibilities of the components and the role of each component in the information management system . For instance as will be discussed such design choices can impact performance as well as the adaptability of the information management system to data growth or other changing circumstances.

As noted the number of components in the information management system and the amount of data under management can be quite large. Managing the components and data is therefore a significant task and a task that can grow in an often unpredictable fashion as the quantity of components and data scale to meet the needs of the organization. For these and other reasons according to certain embodiments responsibility for controlling the information management system or at least a significant portion of that responsibility is allocated to the storage manager . By distributing control functionality in this manner the storage manager can be adapted independently according to changing circumstances. Moreover a computing device for hosting the storage manager can be selected to best suit the functions of the storage manager . These and other advantages are described in further detail below with respect to .

The storage manager may be a software module or other application which in some embodiments operates in conjunction with one or more associated data structures e.g. a dedicated database e.g. management database . In some embodiments storage manager is a computing device comprising circuitry for executing computer instructions and performs the functions described herein. The storage manager generally initiates performs coordinates and or controls storage and other information management operations performed by the information management system e.g. to protect and control the primary data and secondary copies of data and metadata. In general storage manager may be said to manage information management system which includes managing the constituent components e.g. data agents and media agents etc.

As shown by the dashed arrowed lines in the storage manager may communicate with and or control some or all elements of the information management system such as the data agents and media agents . Thus in certain embodiments control information originates from the storage manager and status reporting is transmitted to storage manager by the various managed components whereas payload data and payload metadata is generally communicated between the data agents and the media agents or otherwise between the client computing device s and the secondary storage computing device s e.g. at the direction of and under the management of the storage manager . Control information can generally include parameters and instructions for carrying out information management operations such as without limitation instructions to perform a task associated with an operation timing information specifying when to initiate a task associated with an operation data path information specifying what components to communicate with or access in carrying out an operation and the like. Payload data on the other hand can include the actual data involved in the storage operation such as content data written to a secondary storage device in a secondary copy operation. Payload metadata can include any of the types of metadata described herein and may be written to a storage device along with the payload content data e.g. in the form of a header .

In other embodiments some information management operations are controlled by other components in the information management system e.g. the media agent s or data agent s instead of or in combination with the storage manager .

According to certain embodiments the storage manager provides one or more of the following functions 

The storage manager may maintain a database or storage manager database or management database of management related data and information management policies . The database may include a management index or index or other data structure that stores logical associations between components of the system user preferences and or profiles e.g. preferences regarding encryption compression or deduplication of primary or secondary copy data preferences regarding the scheduling type or other aspects of primary or secondary copy or other operations mappings of particular information management users or user accounts to certain computing devices or other components etc. management tasks media containerization or other useful data. For example the storage manager may use the index to track logical associations between media agents and secondary storage devices and or movement of data from primary storage devices to secondary storage devices . For instance the index may store data associating a client computing device with a particular media agent and or secondary storage device as specified in an information management policy e.g. a storage policy which is defined in more detail below .

Administrators and other people may be able to configure and initiate certain information management operations on an individual basis. But while this may be acceptable for some recovery operations or other relatively less frequent tasks it is often not workable for implementing on going organization wide data protection and management. Thus the information management system may utilize information management policies for specifying and executing information management operations e.g. on an automated basis . Generally an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with storage or other information management operations.

The storage manager database may maintain the information management policies and associated data although the information management policies can be stored in any appropriate location. For instance an information management policy such as a storage policy may be stored as metadata in a media agent database or in a secondary storage device e.g. as an archive copy for use in restore operations or other information management operations depending on the embodiment. Information management policies are described further below.

According to certain embodiments the storage manager database comprises a relational database e.g. an SQL database for tracking metadata such as metadata associated with secondary copy operations e.g. what client computing devices and corresponding data were protected . This and other metadata may additionally be stored in other locations such as at the secondary storage computing devices or on the secondary storage devices allowing data recovery without the use of the storage manager in some cases.

As shown the storage manager may include a jobs agent a user interface and a management agent all of which may be implemented as interconnected software modules or application programs.

The jobs agent in some embodiments initiates controls and or monitors the status of some or all storage or other information management operations previously performed currently being performed or scheduled to be performed by the information management system . For instance the jobs agent may access information management policies to determine when and how to initiate and control secondary copy and other information management operations as will be discussed further.

The user interface may include information processing and display software such as a graphical user interface GUI an application program interface API or other interactive interface s through which users and system processes can retrieve information about the status of information management operations e.g. storage operations or issue instructions to the information management system and its constituent components. Via the user interface users may optionally issue instructions to the components in the information management system regarding performance of storage and recovery operations. For example a user may modify a schedule concerning the number of pending rations. As another example a user may employ the GUI to view the status of pending storage operations or to monitor the status of certain components in the information management system e.g. the amount of capacity left in a storage device .

An information management cell or storage operation cell or cell may generally include a logical and or physical grouping of a combination of hardware and software components associated with performing information management operations on electronic data typically one storage manager and at least one client computing device comprising data agent s and at least one media agent . For instance the components shown in may together form an information management cell. Multiple cells may be organized hierarchically. With this configuration cells may inherit properties from hierarchically superior cells or be controlled by other cells in the hierarchy automatically or otherwise . Alternatively in some embodiments cells may inherit or otherwise be associated with information management policies preferences information management metrics or other properties or characteristics according to their relative position in a hierarchy of cells. Cells may also be delineated and or organized hierarchically according to function geography architectural considerations or other factors useful or desirable in performing information management operations. A first cell may represent a geographic segment of an enterprise such as a Chicago office and a second cell may represent a different geographic segment such as a New York office. Other cells may represent departments within a particular office. Where delineated by function a first cell may perform one or more first types of information management operations e.g. one or more first types of secondary or other copies and a second cell may perform one or more second types of information management operations e.g. one or more second types of secondary or other copies .

The storage manager may also track information that permits it to select designate or otherwise identify content indices deduplication databases or similar databases or resources or data sets within its information management cell or another cell to be searched in response to certain queries. Such queries may be entered by the user via interaction with the user interface . In general the management agent allows multiple information management cells to communicate with one another. For example the information management system in some cases may be one information management cell of a network of multiple cells adjacent to one another or otherwise logically related in a WAN or LAN. With this arrangement the cells may be connected to one another through respective management agents .

For instance the management agent can provide the storage manager with the ability to communicate with other components within the information management system and or other cells within a larger information management system via network protocols and application programming interfaces APIs including e.g. HTTP HTTPS FTP REST virtualization software APIs cloud service provider APIs and hosted service provider APIs. Inter cell communication and hierarchy is described in greater detail in e.g. U.S. Pat. Nos. 7 747 579 and 7 343 453 which are incorporated by reference herein.

As discussed a variety of different types of applications can operate on a given client computing device including operating systems database applications e mail applications and virtual machines just to name a few. And as part of the process of creating and restoring secondary copies the client computing devices may be tasked with processing and preparing the primary data from these various different applications . Moreover the nature of the processing preparation can differ across clients and application types e.g. due to inherent structural and formatting differences among applications .

The one or more data agent s are therefore advantageously configured in some embodiments to assist in the performance of information management operations based on the type of data that is being protected at a client specific and or application specific level.

The data agent may be a software module or component that is generally responsible for managing initiating or otherwise assisting in the performance of information management operations in information management system generally as directed by storage manager . For instance the data agent may take part in performing data storage operations such as the copying archiving migrating and or replicating of primary data stored in the primary storage device s . The data agent may receive control information from the storage manager such as commands to transfer copies of data objects metadata and other payload data to the media agents .

In some embodiments a data agent may be distributed between the client computing device and storage manager and any other intermediate components or may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent . In addition a data agent may perform some functions provided by a media agent or may perform other functions such as encryption and deduplication.

As indicated each data agent may be specialized for a particular application and the system can employ multiple application specific data agents each of which may perform information management operations e.g. perform backup migration and data recovery associated with a different application . For instance different individual data agents may be designed to handle Microsoft Exchange data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data SQL Server data SharePoint data Oracle database data SAP database data virtual machines and or associated data and other types of data.

A file system data agent for example may handle data files and or other file system information. If a client computing device has two or more types of data a specialized data agent may be used for each data type to copy archive migrate and restore the client computing device data. For example to backup migrate and or restore all of the data on a Microsoft Exchange server the client computing device may use a Microsoft Exchange Mailbox data agent to back up the Exchange mailboxes a Microsoft Exchange Database data agent to back up the Exchange databases a Microsoft Exchange Public Folder data agent to back up the Exchange Public Folders and a Microsoft Windows File System data agent to back up the file system of the client computing device . In such embodiments these specialized data agents may be treated as four separate data agents even though they operate on the same client computing device .

Other embodiments may employ one or more generic data agents that can handle and process data from two or more different applications or that can handle and process multiple data types instead of or in addition to using specialized data agents . For example one generic data agent may be used to back up migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data.

Each data agent may be configured to access data and or metadata stored in the primary storage device s associated with the data agent and process the data as appropriate. For example during a secondary copy operation the data agent may arrange or assemble the data and metadata into one or more files having a certain format e.g. a particular backup or archive format before transferring the file s to a media agent or other component. The file s may include a list of files or other metadata. Each data agent can also assist in restoring data or metadata to primary storage devices from a secondary copy . For instance the data agent may operate in conjunction with the storage manager and one or more of the media agents to restore data from secondary storage device s .

As indicated above with respect to off loading certain responsibilities from the client computing devices to intermediate components such as the media agent s can provide a number of benefits including improved client computing device operation faster secondary copy operation performance and enhanced scalability. In one specific example which will be discussed below in further detail the media agent can act as a local cache of copied data and or metadata that it has stored to the secondary storage device s providing improved restore capabilities.

Generally speaking a media agent may be implemented as a software module that manages coordinates and facilitates the transmission of data as directed by the storage manager between a client computing device and one or more secondary storage devices . Whereas the storage manager controls the operation of the information management system the media agent generally provides a portal to secondary storage devices . For instance other components in the system interact with the media agents to gain access to data stored on the secondary storage devices whether it be for the purposes of reading writing modifying or deleting data. Moreover as will be described further media agents can generate and store information relating to characteristics of the stored data and or metadata or can generate and store other types of information that generally provides insight into the contents of the secondary storage devices .

Media agents can comprise separate nodes in the information management system e.g. nodes that are separate from the client computing devices storage manager and or secondary storage devices . In general a node within the information management system can be a logically and or physically separate component and in some cases is a component that is individually addressable or otherwise identifiable. In addition each media agent may operate on a dedicated secondary storage computing device in some cases while in other embodiments a plurality of media agents operate on the same secondary storage computing device .

A media agent and corresponding media agent database may be considered to be associated with a particular secondary storage device if that media agent is capable of one or more of routing and or storing data to the particular secondary storage device coordinating the routing and or storing of data to the particular secondary storage device retrieving data from the particular secondary storage device coordinating the retrieval of data from a particular secondary storage device and modifying and or deleting data retrieved from the particular secondary storage device .

While media agent s are generally associated with one or more secondary storage devices one or more media agents in certain embodiments are physically separate from the secondary storage devices . For instance the media agents may operate on secondary storage computing devices having different housings or packages than the secondary storage devices . In one example a media agent operates on a first server computer and is in communication with a secondary storage device s operating in a separate rack mounted RAID based system.

Where the information management system includes multiple media agents see e.g. a first media agent may provide failover functionality for a second failed media agent . In addition media agents can be dynamically selected for storage operations to provide load balancing. Failover and load balancing are described in greater detail below.

In operation a media agent associated with a particular secondary storage device may instruct the secondary storage device to perform an information management operation. For instance a media agent may instruct a tape library to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or retrieve data to or from that media e.g. for the purpose of restoring the data to a client computing device . As another example a secondary storage device may include an array of hard disk drives or solid state drives organized in a RAID configuration and the media agent may forward a logical unit number LUN and other appropriate information to the array which uses the received information to execute the desired storage operation. The media agent may communicate with a secondary storage device via a suitable communications link such as a SCSI or Fiber Channel link.

As shown each media agent may maintain an associated media agent database . The media agent database may be stored in a disk or other storage device not shown that is local to the secondary storage computing device on which the media agent operates. In other cases the media agent database is stored remotely from the secondary storage computing device .

The media agent database can include among other things an index see e.g. which comprises information generated during secondary copy operations and other storage or information management operations. The index provides a media agent or other component with a fast and efficient mechanism for locating secondary copies or other data stored in the secondary storage devices . In some cases the index does not form a part of and is instead separate from the media agent database .

A media agent index or other data structure associated with the particular media agent may include information about the stored data. For instance for each secondary copy the index may include metadata such as a list of the data objects e.g. files subdirectories database objects mailbox objects etc. a path to the secondary copy on the corresponding secondary storage device location information indicating where the data objects are stored in the secondary storage device when the data objects were created or modified etc. Thus the index includes metadata associated with the secondary copies that is readily available for use without having to be first retrieved from the secondary storage device . In yet further embodiments some or all of the information in index may instead or additionally be stored along with the secondary copies of data in a secondary storage device . In some embodiments the secondary storage devices can include sufficient information to perform a bare metal restore where the operating system of a failed client computing device or other restore target is automatically rebuilt as part of a restore operation.

Because the index maintained in the media agent database may operate as a cache it can also be referred to as an index cache. In such cases information stored in the index cache typically comprises data that reflects certain particulars about storage operations that have occurred relatively recently. After some triggering event such as after a certain period of time elapses or the index cache reaches a particular size the index cache may be copied or migrated to a secondary storage device s . This information may need to be retrieved and uploaded back into the index cache or otherwise restored to a media agent to facilitate retrieval of data from the secondary storage device s . In some embodiments the cached information may include format or containerization information related to archives or other files stored on the storage device s . In this manner the index cache allows for accelerated restores.

In some alternative embodiments the media agent generally acts as a coordinator or facilitator of storage operations between client computing devices and corresponding secondary storage devices but does not actually write the data to the secondary storage device . For instance the storage manager or the media agent may instruct a client computing device and secondary storage device to communicate with one another directly. In such a case the client computing device transmits the data directly or via one or more intermediary components to the secondary storage device according to the received instructions and vice versa. In some such cases the media agent may still receive process and or maintain metadata related to the storage operations. Moreover in these embodiments the payload data can flow through the media agent for the purposes of populating the index cache maintained in the media agent database but not for writing to the secondary storage device .

The media agent and or other components such as the storage manager may in some cases incorporate additional functionality such as data classification content indexing deduplication encryption compression and the like. Further details regarding these and other functions are described below.

As described certain functions of the information management system can be distributed amongst various physical and or logical components in the system. For instance one or more of the storage manager data agents and media agents may operate on computing devices that are physically separate from one another. This architecture can provide a number of benefits.

For instance hardware and software design choices for each distributed component can be targeted to suit its particular function. The secondary computing devices on which the media agents operate can be tailored for interaction with associated secondary storage devices and provide fast index cache operation among other specific tasks. Similarly the client computing device s can be selected to effectively service the applications thereon in order to efficiently produce and store primary data .

Moreover in some cases one or more of the individual components in the information management system can be distributed to multiple separate computing devices. As one example for large file systems where the amount of data stored in the management database is relatively large the database may be migrated to or otherwise reside on a specialized database server e.g. an SQL server separate from a server that implements the other functions of the storage manager . This distributed configuration can provide added protection because the database can be protected with standard database utilities e.g. SQL log shipping or database replication independent from other functions of the storage manager . The database can be efficiently replicated to a remote site for use in the event of a disaster or other data loss at the primary site. Or the database can be replicated to another computing device within the same site such as to a higher performance machine in the event that a storage manager host device can no longer service the needs of a growing information management system .

The distributed architecture also provides both scalability and efficient component utilization. shows an embodiment of the information management system including a plurality of client computing devices and associated data agents as well as a plurality of secondary storage computing devices and associated media agents .

Additional components can be added or subtracted based on the evolving needs of the information management system . For instance depending on where bottlenecks are identified administrators can add additional client computing devices secondary storage computing devices and corresponding media agents and or secondary storage devices . Moreover where multiple fungible components are available load balancing can be implemented to dynamically address identified bottlenecks. As an example the storage manager may dynamically select which media agents and or secondary storage devices to use for storage operations based on a processing load analysis of the media agents and or secondary storage devices respectively.

Moreover each client computing device in some embodiments can communicate with among other components any of the media agents e.g. as directed by the storage manager . And each media agent may be able to communicate with among other components any of the secondary storage devices e.g. as directed by the storage manager . Thus operations can be routed to the secondary storage devices in a dynamic and highly flexible manner to provide load balancing failover and the like. Further examples of scalable systems capable of dynamic storage operations and of systems capable of performing load balancing and fail over are provided in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

In alternative configurations certain components are not distributed and may instead reside and execute on the same computing device. For example in some embodiments one or more data agents and the storage manager operate on the same client computing device . In another embodiment one or more data agents and one or more media agents operate on a single computing device.

In order to protect and leverage stored data the information management system can be configured to perform a variety of information management operations. As will be described these operations can generally include secondary copy and other data movement operations processing and data manipulation operations analysis reporting and management operations. The operations described herein may be performed on any type of computing device e.g. between two computers connected via a LAN to a mobile client telecommunications device connected to a server via a WLAN to any manner of client computing device coupled to a cloud storage target etc. without limitation.

Data movement operations according to certain embodiments are generally operations that involve the copying or migration of data e.g. payload data between different locations in the information management system in an original native and or one or more different formats. For example data movement operations can include operations in which stored data is copied migrated or otherwise transferred from one or more first storage devices to one or more second storage devices such as from primary storage device s to secondary storage device s from secondary storage device s to different secondary storage device s from secondary storage devices to primary storage devices or from primary storage device s to different primary storage device s .

Data movement operations can include by way of example backup operations archive operations information lifecycle management operations such as hierarchical storage management operations replication operations e.g. continuous data replication operations snapshot operations deduplication or single instancing operations auxiliary copy operations and the like. As will be discussed some of these operations involve the copying migration or other movement of data without actually creating multiple distinct copies. Nonetheless some or all of these operations are referred to as copy operations for simplicity.

A backup operation creates a copy of a version of data e.g. one or more files or other data units in primary data at a particular point in time. Each subsequent backup copy may be maintained independently of the first. Further a backup copy in some embodiments is generally stored in a form that is different than the native format e.g. a backup format. This can be in contrast to the version in primary data from which the backup copy is derived and which may instead be stored in a native format of the source application s . In various cases backup copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original application format. For example a backup copy may be stored in a backup format that facilitates compression and or efficient long term storage.

Backup copies can have relatively long retention periods as compared to primary data and may be stored on media with slower retrieval times than primary data and certain other types of secondary copies . On the other hand backups may have relatively shorter retention periods than some other types of secondary copies such as archive copies described below . Backups may sometimes be stored at an offsite location.

Backup operations can include full backups differential backups incremental backups synthetic full backups and or creating a reference copy. A full backup or standard full backup in some embodiments is generally a complete image of the data to be protected. However because full backup copies can consume a relatively large amount of storage it can be useful to use a full backup copy as a baseline and only store changes relative to the full backup copy for subsequent backup copies.

For instance a differential backup operation or cumulative incremental backup operation tracks and stores changes that have occurred since the last full backup. Differential backups can grow quickly in size but can provide relatively efficient restore times because a restore can be completed in some cases using only the full backup copy and the latest differential copy.

An incremental backup operation generally tracks and stores changes since the most recent backup copy of any type which can greatly reduce storage utilization. In some cases however restore times can be relatively long in comparison to full or differential backups because completing a restore operation may involve accessing a full backup in addition to multiple incremental backups.

Synthetic full backups generally consolidate data without directly backing up data from the client computing device. A synthetic full backup is created from the most recent full backup i.e. standard or synthetic and subsequent incremental and or differential backups. The resulting synthetic full backup is identical to what would have been created had the last backup for the subclient been a standard full backup. Unlike standard full incremental and differential backups a synthetic full backup does not actually transfer data from a client computer to the backup media because it operates as a backup consolidator. A synthetic full backup extracts the index data of each participating subclient. Using this index data and the previously backed up user data images it builds new full backup images one for each subclient. The new backup images consolidate the index and user data stored in the related incremental differential and previous full backups in some embodiments creating an archive file at the subclient level.

Any of the above types of backup operations can be at the volume level file level or block level. Volume level backup operations generally involve the copying of a data volume e.g. a logical disk or partition as a whole. In a file level backup the information management system may generally track changes to individual files and includes copies of files in the backup copy. In the case of a block level backup files are broken into constituent blocks and changes are tracked at the block level. Upon restore the information management system reassembles the blocks into files in a transparent fashion.

Far less data may actually be transferred and copied to the secondary storage devices during a file level copy than a volume level copy. Likewise a block level copy may involve the transfer of less data than a file level copy resulting in faster execution times. However restoring a relatively higher granularity copy can result in longer restore times. For instance when restoring a block level copy the process of locating constituent blocks can sometimes result in longer restore times as compared to file level backups. Similar to backup operations the other types of secondary copy operations described herein can also be implemented at either the volume level file level or block level.

For example in some embodiments a reference copy may comprise copy ies of selected objects from backed up data typically to help organize data by keeping contextual information from multiple sources together and or help retain specific data for a longer period of time such as for legal hold needs. A reference copy generally maintains data integrity and when the data is restored it may be viewed in the same format as the source data. In some embodiments a reference copy is based on a specialized client individual subclient and associated information management policies e.g. storage policy retention policy etc. that are administered within information management system .

Because backup operations generally involve maintaining a version of the copied data in primary data and also maintaining backup copies in secondary storage device s they can consume significant storage capacity. To help reduce storage consumption an archive operation according to certain embodiments creates a secondary copy by both copying and removing source data. Or seen another way archive operations can involve moving some or all of the source data to the archive destination. Thus data satisfying criteria for removal e.g. data of a threshold age or size may be removed from source storage. The source data may be primary data or a secondary copy depending on the situation. As with backup copies archive copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the format of the original application or source copy. In addition archive copies may be retained for relatively long periods of time e.g. years and in some cases are never deleted. Archive copies are generally retained for longer periods of time than backup copies for example. In certain embodiments archive copies may be made and kept for extended periods in order to meet compliance regulations.

Moreover when primary data is archived in some cases the corresponding primary data or a portion thereof is deleted when creating the archive copy. Thus archiving can serve the purpose of freeing up space in the primary storage device s and easing the demand on computational resources on client computing device . Similarly when a secondary copy is archived the secondary copy may be deleted and an archive copy can therefore serve the purpose of freeing up space in secondary storage device s . In contrast source copies often remain intact when creating backup copies. Examples of compatible data archiving operations are provided in U.S. Pat. No. 7 107 298 which is incorporated by reference herein.

Snapshot operations can provide a relatively lightweight efficient mechanism for protecting data. From an end user viewpoint a snapshot may be thought of as an instant image of the primary data at a given point in time and may include state and or status information relative to an application that creates manages the primary data . In one embodiment a snapshot may generally capture the directory structure of an object in primary data such as a file or volume or other data set at a particular moment in time and may also preserve file attributes and contents. A snapshot in some cases is created relatively quickly e.g. substantially instantly using a minimum amount of file space but may still function as a conventional file system backup.

A hardware snapshot or hardware based snapshot operation can be a snapshot operation where a target storage device e.g. a primary storage device or a secondary storage device performs the snapshot operation in a self contained fashion substantially independently using hardware firmware and or software operating on the storage device itself. For instance the storage device may be capable of performing snapshot operations upon request generally without intervention or oversight from any of the other components in the information management system . In this manner hardware snapshots can off load other components of information management system from processing involved in snapshot creation and management.

A software snapshot or software based snapshot operation on the other hand can be a snapshot operation in which one or more other components in information management system e.g. client computing devices data agents etc. implement a software layer that manages the snapshot operation via interaction with the target storage device. For instance the component executing the snapshot management software layer may derive a set of pointers and or data that represents the snapshot. The snapshot management software layer may then transmit the same to the target storage device along with appropriate instructions for writing the snapshot.

Some types of snapshots do not actually create another physical copy of all the data as it existed at the particular point in time but may simply create pointers that are able to map files and directories to specific memory locations e.g. to specific disk blocks where the data resides as it existed at the particular point in time. For example a snapshot copy may include a set of pointers derived from the file system or from an application. In some other cases the snapshot may be created at the block level such that creation of the snapshot occurs without awareness of the file system. Each pointer points to a respective stored data block so that collectively the set of pointers reflect the storage location and state of the data object e.g. file s or volume s or data set s at a particular point in time when the snapshot copy was created.

An initial snapshot may use only a small amount of disk space needed to record a mapping or other data structure representing or otherwise tracking the blocks that correspond to the current state of the file system. Additional disk space is usually required only when files and directories are modified later on. Furthermore when files are modified typically only the pointers which map to blocks are copied not the blocks themselves. In some embodiments for example in the case of copy on write snapshots when a block changes in primary storage the block is copied to secondary storage or cached in primary storage before the block is overwritten in primary storage and the pointer to that block is changed to reflect the new location of that block. The snapshot mapping of file system data may also be updated to reflect the changed block s at that particular point in time. In some other cases a snapshot includes a full physical copy of all or substantially all of the data represented by the snapshot. Further examples of snapshot operations are provided in U.S. Pat. No. 7 529 782 which is incorporated by reference herein.

A snapshot copy in many cases can be made quickly and without significantly impacting primary computing resources because large amounts of data need not be copied or moved. In some embodiments a snapshot may exist as a virtual file system parallel to the actual file system. Users in some cases gain read only access to the record of files and directories of the snapshot. By electing to restore primary data from a snapshot taken at a given point in time users may also return the current file system to the state of the file system that existed when the snapshot was taken.

Another type of secondary copy operation is a replication operation. Some types of secondary copies are used to periodically capture images of primary data at particular points in time e.g. backups archives and snapshots . However it can also be useful for recovery purposes to protect primary data in a more continuous fashion by replicating the primary data substantially as changes occur. In some cases a replication copy can be a mirror copy for instance where changes made to primary data are mirrored or substantially immediately copied to another location e.g. to secondary storage device s . By copying each write operation to the replication copy two storage systems are kept synchronized or substantially synchronized so that they are virtually identical at approximately the same time. Where entire disk volumes are mirrored however mirroring can require significant amount of storage space and utilizes a large amount of processing resources.

According to some embodiments storage operations are performed on replicated data that represents a recoverable state or known good state of a particular application running on the source system. For instance in certain embodiments known good replication copies may be viewed as copies of primary data . This feature allows the system to directly access copy restore backup or otherwise manipulate the replication copies as if the data were the live primary data . This can reduce access time storage utilization and impact on source applications among other benefits. Based on known good state information the information management system can replicate sections of application data that represent a recoverable state rather than rote copying of blocks of data. Examples of compatible replication operations e.g. continuous data replication are provided in U.S. Pat. No. 7 617 262 which is incorporated by reference herein.

Another type of data movement operation is deduplication or single instance storage which is useful to reduce the amount of non primary data. For instance some or all of the above described secondary storage operations can involve deduplication in some fashion. New data is read broken down into portions e.g. sub file level blocks files etc. of a selected granularity compared with blocks that are already in secondary storage and only the new blocks are stored. Blocks that already exist are represented as pointers to the already stored data.

In order to streamline the comparison process the information management system may calculate and or store signatures e.g. hashes or cryptographically unique IDs corresponding to the individual data blocks in a database and compare the signatures instead of comparing entire data blocks. In some cases only a single instance of each element is stored and deduplication operations may therefore be referred to interchangeably as single instancing operations. Depending on the implementation however deduplication or single instancing operations can store more than one instance of certain data blocks but nonetheless significantly reduce data redundancy. Depending on the embodiment deduplication blocks can be of fixed or variable length. Using variable length blocks can provide enhanced deduplication by responding to changes in the data stream but can involve complex processing. In some cases the information management system utilizes a technique for dynamically aligning deduplication blocks e.g. fixed length blocks based on changing content in the data stream as described in U.S. Pat. No. 8 364 652 which is incorporated by reference herein.

The information management system can perform deduplication in a variety of manners at a variety of locations in the information management system . For instance in some embodiments the information management system implements target side deduplication by deduplicating data e.g. secondary copies stored in the secondary storage devices . In some such cases the media agents are generally configured to manage the deduplication process. For instance one or more of the media agents maintain a corresponding deduplication database that stores deduplication information e.g. datablock signatures . Examples of such a configuration are provided in U.S. Pat. Pub. No. 2012 0150826 which is incorporated by reference herein. Instead of or in combination with target side deduplication deduplication can also be performed on the source side or client side e.g. to reduce the amount of traffic between the media agents and the client computing device s and or reduce redundant data stored in the primary storage devices . According to various implementations one or more of the storage devices of the target side and or source side of an operation can be cloud based storage devices. Thus the target side and or source side deduplication can be cloud based deduplication. In particular as discussed previously the storage manager may communicate with other components within the information management system via network protocols and cloud service provider APIs to facilitate cloud based deduplication single instancing. Examples of such deduplication techniques are provided in U.S. Pat. Pub. No. 2012 0150818 which is incorporated by reference herein. Some other compatible deduplication single instancing techniques are described in U.S. Pat. Pub. Nos. 2006 0224846 and 2009 0319534 which are incorporated by reference herein.

In some embodiments files and other data over their lifetime move from more expensive quick access storage to less expensive slower access storage. Operations associated with moving data through various tiers of storage are sometimes referred to as information lifecycle management ILM operations.

One type of ILM operation is a hierarchical storage management HSM operation. A HSM operation is generally an operation for automatically moving data between classes of storage devices such as between high cost and low cost storage devices. For instance an HSM operation may involve movement of data from primary storage devices to secondary storage devices or between tiers of secondary storage devices . With each tier the storage devices may be progressively relatively cheaper have relatively slower access restore times etc. For example movement of data between tiers may occur as data becomes less important over time.

In some embodiments an HSM operation is similar to an archive operation in that creating an HSM copy may though not always involve deleting some of the source data e.g. according to one or more criteria related to the source data. For example an HSM copy may include data from primary data or a secondary copy that is larger than a given size threshold or older than a given age threshold and that is stored in a backup format.

Often and unlike some types of archive copies HSM data that is removed or aged from the source is replaced by a logical reference pointer or stub. The reference pointer or stub can be stored in the primary storage device or other source storage device such as a secondary storage device to replace the deleted source data and to point to or otherwise indicate the new location in a secondary storage device .

According to one example files are generally moved between higher and lower cost storage depending on how often the files are accessed. When a user requests access to the HSM data that has been removed or migrated the information management system uses the stub to locate the data and may make recovery of the data appear transparent even though the HSM data may be stored at a location different from other source data. In this manner the data appears to the user e.g. in file system browsing windows and the like as if it still resides in the source location e.g. in a primary storage device . The stub may also include some metadata associated with the corresponding data so that a file system and or application can provide some information about the data object and or a limited functionality version e.g. a preview of the data object.

An HSM copy may be stored in a format other than the native application format e.g. where the data is compressed encrypted deduplicated and or otherwise modified from the original native application format . In some cases copies which involve the removal of data from source storage and the maintenance of stub or other logical reference information on source storage may be referred to generally as on line archive copies . On the other hand copies which involve the removal of data from source storage without the maintenance of stub or other logical reference information on source storage may be referred to as off line archive copies . Examples of HSM and ILM techniques are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

An auxiliary copy is generally a copy operation in which a copy is created of an existing secondary copy . For instance an initial secondary copy may be generated using or otherwise be derived from primary data or other data residing in the secondary storage subsystem whereas an auxiliary copy is generated from the initial secondary copy . Auxiliary copies can be used to create additional standby copies of data and may reside on different secondary storage devices than the initial secondary copies . Thus auxiliary copies can be used for recovery purposes if initial secondary copies become unavailable. Exemplary compatible auxiliary copy techniques are described in further detail in U.S. Pat. No. 8 230 195 which is incorporated by reference herein.

The information management system may also perform disaster recovery operations that make or retain disaster recovery copies often as secondary high availability disk copies. The information management system may create secondary disk copies and store the copies at disaster recovery locations using auxiliary copy or replication operations such as continuous data replication technologies. Depending on the particular data protection goals disaster recovery locations can be remote from the client computing devices and primary storage devices remote from some or all of the secondary storage devices or both.

Data analysis reporting and management operations can be different than data movement operations in that they do not necessarily involve the copying migration or other transfer of data e.g. primary data or secondary copies between different locations in the system. For instance data analysis operations may involve processing e.g. offline processing or modification of already stored primary data and or secondary copies . However in some embodiments data analysis operations are performed in conjunction with data movement operations. Some data analysis operations include content indexing operations and classification operations which can be useful in leveraging the data under management to provide enhanced search and other features. Other data analysis operations such as compression and encryption can provide data reduction and security benefits respectively.

In some embodiments the information management system analyzes and indexes characteristics content and metadata associated with the primary data and or secondary copies . The content indexing can be used to identify files or other data objects having pre defined content e.g. user defined keywords or phrases other keywords phrases that are not defined by a user etc. and or metadata e.g. email metadata such as to from cc bcc attachment name received time etc. .

The information management system generally organizes and catalogues the results in a content index which may be stored within the media agent database for example. The content index can also include the storage locations of or pointer references to the indexed data in the primary data or secondary copies as appropriate. The results may also be stored in the form of a content index database or otherwise elsewhere in the information management system e.g. in the primary storage devices or in the secondary storage device . Such index data provides the storage manager or another component with an efficient mechanism for locating primary data and or secondary copies of data objects that match particular criteria.

For instance search criteria can be specified by a user through user interface of the storage manager . In some cases the information management system analyzes data and or metadata in secondary copies to create an off line content index without significantly impacting the performance of the client computing devices . Depending on the embodiment the system can also implement on line content indexing e.g. of primary data . Examples of compatible content indexing techniques are provided in U.S. Pat. No. 8 170 995 which is incorporated by reference herein.

One or more components can be configured to scan data and or associated metadata for classification purposes to populate a database or other data structure of information which can be referred to as a data classification database or a metabase . Depending on the embodiment the data classification database s can be organized in a variety of different ways including centralization logical sub divisions and or physical sub divisions. For instance one or more centralized data classification databases may be associated with different subsystems or tiers within the information management system . As an example there may be a first centralized metabase associated with the primary storage subsystem and a second centralized metabase associated with the secondary storage subsystem . In other cases there may be one or more metabases associated with individual components e.g. client computing devices and or media agents . In some embodiments a data classification database metabase may reside as one or more data structures within management database or may be otherwise associated with storage manager .

In some cases the metabase s may be included in separate database s and or on separate storage device s from primary data and or secondary copies such that operations related to the metabase do not significantly impact performance on other components in the information management system . In other cases the metabase s may be stored along with primary data and or secondary copies . Files or other data objects can be associated with identifiers e.g. tag entries etc. in the media agent or other indices to facilitate searches of stored data objects. Among a number of other benefits the metabase can also allow efficient automatic identification of files or other data objects to associate with secondary copy or other information management operations e.g. in lieu of scanning an entire file system . Examples of compatible metabases and data classification operations are provided in U.S. Pat. Nos. 8 229 954 and 7 747 579 which are incorporated by reference herein.

The information management system in some cases is configured to process data e.g. files or other data objects secondary copies etc. according to an appropriate encryption algorithm e.g. Blowfish Advanced Encryption Standard AES Triple Data Encryption Standard 3 DES etc. to limit access and provide data security in the information management system . The information management system in some cases encrypts the data at the client level such that the client computing devices e.g. the data agents encrypt the data prior to forwarding the data to other components e.g. before sending the data to media agents during a secondary copy operation. In such cases the client computing device may maintain or have access to an encryption key or passphrase for decrypting the data upon restore. Encryption can also occur when creating copies of secondary copies e.g. when creating auxiliary copies or archive copies. In yet further embodiments the secondary storage devices can implement built in high performance hardware encryption.

Certain embodiments leverage the integrated ubiquitous nature of the information management system to provide useful system wide management and reporting functions. Examples of some compatible management and reporting techniques are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

Operations management can generally include monitoring and managing the health and performance of information management system by without limitation performing error tracking generating granular storage performance metrics e.g. job success failure information deduplication efficiency etc. generating storage modeling and costing information and the like. As an example a storage manager or other component in the information management system may analyze traffic patterns and suggest and or automatically route data via a particular route to minimize congestion. In some embodiments the system can generate predictions relating to storage operations or storage operation information. Such predictions which may be based on a trending analysis may predict various network operations or resource usage such as network traffic levels storage media use use of bandwidth of communication links use of media agent components etc. Further examples of traffic analysis trend analysis prediction generation and the like are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some configurations a master storage manager may track the status of storage operation cells in a hierarchy such as the status of jobs system components system resources and other items by communicating with storage managers or other components in the respective storage operation cells. Moreover the master storage manager may track the status of its associated storage operation cells and information management operations by receiving periodic status updates from the storage managers or other components in the respective cells regarding jobs system components system resources and other items. In some embodiments a master storage manager may store status information and other information regarding its associated storage operation cells and other system information in its index or other location .

The master storage manager or other component may also determine whether certain storage related criteria or other criteria are satisfied and perform an action or trigger event e.g. data migration in response to the criteria being satisfied such as where a storage threshold is met for a particular volume or where inadequate protection exists for certain data. For instance in some embodiments data from one or more storage operation cells is used to dynamically and automatically mitigate recognized risks and or to advise users of risks or suggest actions to mitigate these risks. For example an information management policy may specify certain requirements e.g. that a storage device should maintain a certain amount of free space that secondary copies should occur at a particular interval that data should be aged and migrated to other storage after a particular period that data on a secondary volume should always have a certain level of availability and be restorable within a given time period that data on a secondary volume may be mirrored or otherwise migrated to a specified number of other volumes etc. . If a risk condition or other criterion is triggered the system may notify the user of these conditions and may suggest or automatically implement an action to mitigate or otherwise address the risk. For example the system may indicate that data from a primary copy should be migrated to a secondary storage device to free space on the primary storage device . Examples of the use of risk factors and other triggering criteria are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments the system may also determine whether a metric or other indication satisfies particular storage criteria and if so perform an action. For example as previously described a storage policy or other definition might indicate that a storage manager should initiate a particular action if a storage metric or other indication drops below or otherwise fails to satisfy specified criteria such as a threshold of data protection. Examples of such metrics are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments risk factors may be quantified into certain measurable service or risk levels for ease of comprehension. For example certain applications and associated data may be considered to be more important by an enterprise than other data and services. Financial compliance data for example may be of greater importance than marketing materials etc. Network administrators may assign priority values or weights to certain data and or applications corresponding to the relative importance. The level of compliance of storage operations specified for these applications may also be assigned a certain value. Thus the health impact and overall importance of a service may be determined such as by measuring the compliance value and calculating the product of the priority value and the compliance value to determine the service level and comparing it to certain operational thresholds to determine whether it is acceptable. Further examples of the service level determination are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The system may additionally calculate data costing and data availability associated with information management operation cells according to an embodiment of the invention. For instance data received from the cell may be used in conjunction with hardware related information and other information about system elements to determine the cost of storage and or the availability of particular data in the system. Exemplary information generated could include how fast a particular department is using up available storage space how long data would take to recover over a particular system pathway from a particular secondary storage device costs over time etc. Moreover in some embodiments such information may be used to determine or predict the overall cost associated with the storage of certain information. The cost associated with hosting a certain application may be based at least in part on the type of media on which the data resides for example. Storage devices may be assigned to a particular cost categories for example. Further examples of costing techniques are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

Any of the above types of information e.g. information related to trending predictions job cell or component status risk service level costing etc. can generally be provided to users via the user interface in a single integrated view or console not shown . The console may support a reporting capability that allows for the generation of a variety of reports which may be tailored to a particular aspect of information management. Report types may include scheduling event management media management and data aging. Available reports may also include backup history data aging history auxiliary copy history job history library and drive media in library restore history and storage policy etc. without limitation. Such reports may be specified and created at a certain point in time as a system analysis forecasting or provisioning tool. Integrated reports may also be generated that illustrate storage and performance metrics risks and storage costing information. Moreover users may create their own reports based on specific needs.

The integrated user interface can include an option to show a virtual view of the system that graphically depicts the various components in the system using appropriate icons. As one example the user interface may provide a graphical depiction of one or more primary storage devices the secondary storage devices data agents and or media agents and their relationship to one another in the information management system . The operations management functionality can facilitate planning and decision making. For example in some embodiments a user may view the status of some or all jobs as well as the status of each component of the information management system . Users may then plan and make decisions based on this data. For instance a user may view high level information regarding storage operations for the information management system such as job status component status resource status e.g. communication pathways etc. and other information. The user may also drill down or use other means to obtain more detailed information regarding a particular component job or the like. Further examples of some reporting techniques and associated interfaces providing an integrated view of an information management system are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The information management system can also be configured to perform system wide e discovery operations in some embodiments. In general e discovery operations provide a unified collection and search capability for data in the system such as data stored in the secondary storage devices e.g. backups archives or other secondary copies . For example the information management system may construct and maintain a virtual repository for data stored in the information management system that is integrated across source applications different storage device types etc. According to some embodiments e discovery utilizes other techniques described herein such as data classification and or content indexing.

As indicated previously an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with secondary copy and or other information management operations.

One type of information management policy is a storage policy. According to certain embodiments a storage policy generally comprises a data structure or other information source that defines or includes information sufficient to determine a set of preferences or other criteria for performing information management operations. Storage policies can include one or more of the following items 1 what data will be associated with the storage policy 2 a destination to which the data will be stored 3 datapath information specifying how the data will be communicated to the destination 4 the type of storage operation to be performed and 5 retention information specifying how long the data will be retained at the destination see e.g. .

As an illustrative example data associated with a storage policy can be logically organized into groups. In some cases these logical groupings can be referred to as sub clients . A sub client may represent static or dynamic associations of portions of a data volume. Sub clients may represent mutually exclusive portions. Thus in certain embodiments a portion of data may be given a label and the association is stored as a static entity in an index database or other storage location. Sub clients may also be used as an effective administrative scheme of organizing data according to data type department within the enterprise storage preferences or the like. Depending on the configuration sub clients can correspond to files folders virtual machines databases etc. In one exemplary scenario an administrator may find it preferable to separate e mail data from financial data using two different sub clients.

A storage policy can define where data is stored by specifying a target or destination storage device or group of storage devices . For instance where the secondary storage device includes a group of disk libraries the storage policy may specify a particular disk library for storing the sub clients associated with the policy. As another example where the secondary storage devices include one or more tape libraries the storage policy may specify a particular tape library for storing the sub clients associated with the storage policy and may also specify a drive pool and a tape pool defining a group of tape drives and a group of tapes respectively for use in storing the sub client data. While information in the storage policy can be statically assigned in some cases some or all of the information in the storage policy can also be dynamically determined based on criteria which can be set forth in the storage policy. For instance based on such criteria a particular destination storage device s or other parameter of the storage policy may be determined based on characteristics associated with the data involved in a particular storage operation device availability e.g. availability of a secondary storage device or a media agent network status and conditions e.g. identified bottlenecks user credentials and the like .

Datapath information can also be included in the storage policy. For instance the storage policy may specify network pathways and components to utilize when moving the data to the destination storage device s . In some embodiments the storage policy specifies one or more media agents for conveying data associated with the storage policy between the source e.g. one or more host client computing devices and destination e.g. a particular target secondary storage device .

A storage policy can also specify the type s of operations associated with the storage policy such as a backup archive snapshot auxiliary copy or the like. Retention information can specify how long the data will be kept depending on organizational needs e.g. a number of days months years etc. 

Another type of information management policy is a scheduling policy which specifies when and how often to perform operations. Scheduling parameters may specify with what frequency e.g. hourly weekly daily event based etc. or under what triggering conditions secondary copy or other information management operations will take place. Scheduling policies in some cases are associated with particular components such as particular logical groupings of data associated with a storage policy e.g. a sub client client computing device and the like. In one configuration a separate scheduling policy is maintained for particular logical groupings of data on a client computing device . The scheduling policy specifies that those logical groupings are to be moved to secondary storage devices every hour according to storage policies associated with the respective sub clients.

When adding a new client computing device administrators can manually configure information management policies and or other settings e.g. via the user interface . However this can be an involved process resulting in delays and it may be desirable to begin data protection operations quickly without awaiting human intervention. Thus in some embodiments the information management system automatically applies a default configuration to client computing device . As one example when one or more data agent s are installed on one or more client computing devices the installation script may register the client computing device with the storage manager which in turn applies the default configuration to the new client computing device . In this manner data protection operations can begin substantially immediately. The default configuration can include a default storage policy for example and can specify any appropriate information sufficient to begin data protection operations. This can include a type of data protection operation scheduling information a target secondary storage device data path information e.g. a particular media agent and the like.

Other types of information management policies are possible including one or more audit or security policies. An audit policy is a set of preferences rules and or criteria that protect sensitive data in the information management system . For example an audit policy may define sensitive objects as files or objects that contain particular keywords e.g. confidential or privileged and or are associated with particular keywords e.g. in metadata or particular flags e.g. in metadata identifying a document or email as personal confidential etc. . An audit policy may further specify rules for handling sensitive objects. As an example an audit policy may require that a reviewer approve the transfer of any sensitive objects to a cloud storage site and that if approval is denied for a particular sensitive object the sensitive object should be transferred to a local primary storage device instead. To facilitate this approval the audit policy may further specify how a secondary storage computing device or other system component should notify a reviewer that a sensitive object is slated for transfer.

Another type of information management policy is a provisioning policy. A provisioning policy can include a set of preferences priorities rules and or criteria that specify how client computing devices or groups thereof may utilize system resources such as available storage on cloud storage and or network bandwidth. A provisioning policy specifies for example data quotas for particular client computing devices e.g. a number of gigabytes that can be stored monthly quarterly or annually . The storage manager or other components may enforce the provisioning policy. For instance the media agents may enforce the policy when transferring data to secondary storage devices . If a client computing device exceeds a quota a budget for the client computing device or associated department is adjusted accordingly or an alert may trigger.

While the above types of information management policies have been described as separate policies one or more of these can be generally combined into a single information management policy . For instance a storage policy may also include or otherwise be associated with one or more scheduling audit or provisioning policies or operational parameters thereof. Moreover while storage policies are typically associated with moving and storing data other policies may be associated with other types of information management operations. The following is a non exhaustive list of items the information management policies may specify 

Policies can additionally specify or depend on a variety of historical or current criteria that may be used to determine which rules to apply to a particular data object system component or information management operation such as 

As indicated by the dashed box the second media agent B and the tape library B are off site and may therefore be remotely located from the other components in the information management system e.g. in a different city office building etc. . Indeed off site may refer to a magnetic tape located in storage which must be manually retrieved and loaded into a tape drive to be read. In this manner information stored on the tape library B may provide protection in the event of a disaster or other failure.

The file system sub client and its associated primary data A in certain embodiments generally comprise information generated by the file system and or operating system of the client computing device and can include for example file system data e.g. regular files file tables mount points etc. operating system data e.g. registries event logs etc. and the like. The e mail sub client on the other hand and its associated primary data B include data generated by an e mail application operating on the client computing device and can include mailbox information folder information emails attachments associated database information and the like. As described above the sub clients can be logical containers and the data included in the corresponding primary data A B may or may not be stored contiguously.

The exemplary storage policy A includes backup copy preferences or rule set disaster recovery copy preferences rule set and compliance copy preferences or rule set . The backup copy rule set specifies that it is associated with a file system sub client and an email sub client . Each of these sub clients are associated with the particular client computing device . The backup copy rule set further specifies that the backup operation will be written to the disk library A and designates a particular media agent A to convey the data to the disk library A. Finally the backup copy rule set specifies that backup copies created according to the rule set are scheduled to be generated on an hourly basis and to be retained for 30 days. In some other embodiments scheduling information is not included in the storage policy A and is instead specified by a separate scheduling policy.

The disaster recovery copy rule set is associated with the same two sub clients . However the disaster recovery copy rule set is associated with the tape library B unlike the backup copy rule set . Moreover the disaster recovery copy rule set specifies that a different media agent namely B will be used to convey the data to the tape library B. As indicated disaster recovery copies created according to the rule set will be retained for 60 days and will be generated on a daily basis. Disaster recovery copies generated according to the disaster recovery copy rule set can provide protection in the event of a disaster or other catastrophic data loss that would affect the backup copy A maintained on the disk library A.

The compliance copy rule set is only associated with the email sub client and not the file system sub client . Compliance copies generated according to the compliance copy rule set will therefore not include primary data A from the file system sub client . For instance the organization may be under an obligation to store and maintain copies of email data for a particular period of time e.g. 10 years to comply with state or federal regulations while similar regulations do not apply to the file system data. The compliance copy rule set is associated with the same tape library B and media agent B as the disaster recovery copy rule set although a different storage device or media agent could be used in other embodiments. Finally the compliance copy rule set specifies that copies generated under the compliance copy rule set will be retained for 10 years and will be generated on a quarterly basis.

At step the storage manager initiates a backup operation according to the backup copy rule set . For instance a scheduling service running on the storage manager accesses scheduling information from the backup copy rule set or a separate scheduling policy associated with the client computing device and initiates a backup copy operation on an hourly basis. Thus at the scheduled time slot the storage manager sends instructions to the client computing device i.e. to both data agent A and data agent B to begin the backup operation.

At step the file system data agent A and the email data agent B operating on the client computing device respond to the instructions received from the storage manager by accessing and processing the primary data A B involved in the copy operation which can be found in primary storage device . Because the operation is a backup copy operation the data agent s A B may format the data into a backup format or otherwise process the data.

At step the client computing device communicates the retrieved processed data to the first media agent A as directed by the storage manager according to the backup copy rule set . In some other embodiments the information management system may implement a load balancing availability based or other appropriate algorithm to select from the available set of media agents A B. Regardless of the manner the media agent A is selected the storage manager may further keep a record in the storage manager database of the association between the selected media agent A and the client computing device and or between the selected media agent A and the backup copy A.

The target media agent A receives the data from the client computing device and at step conveys the data to the disk library A to create the backup copy A again at the direction of the storage manager and according to the backup copy rule set . The secondary storage device A can be selected in other ways. For instance the media agent A may have a dedicated association with a particular secondary storage device s or the storage manager or media agent A may select from a plurality of secondary storage devices e.g. according to availability using one of the techniques described in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

The media agent A can also update its index to include data and or metadata related to the backup copy A such as information indicating where the backup copy A resides on the disk library A data and metadata for cache retrieval etc. The storage manager may similarly update its index to include information relating to the storage operation such as information relating to the type of storage operation a physical location associated with one or more copies created by the storage operation the time the storage operation was performed status information relating to the storage operation the components involved in the storage operation and the like. In some cases the storage manager may update its index to include some or all of the information stored in the index of the media agent A. After the 30 day retention period expires the storage manager instructs the media agent A to delete the backup copy A from the disk library A. Indexes and or are updated accordingly.

At step the storage manager initiates the creation of a disaster recovery copy B according to the disaster recovery copy rule set .

At step illustratively based on the instructions received from the storage manager at step the specified media agent B retrieves the most recent backup copy A from the disk library A.

At step again at the direction of the storage manager and as specified in the disaster recovery copy rule set the media agent B uses the retrieved data to create a disaster recovery copy B on the tape library B. In some cases the disaster recovery copy B is a direct mirror copy of the backup copy A and remains in the backup format. In other embodiments the disaster recovery copy B may be generated in some other manner such as by using the primary data A B from the primary storage device as source data. The disaster recovery copy operation is initiated once a day and the disaster recovery copies B are deleted after 60 days indexes are updated accordingly when after each information management operation is executed completed.

At step the storage manager initiates the creation of a compliance copy C according to the compliance copy rule set . For instance the storage manager instructs the media agent B to create the compliance copy C on the tape library B at step as specified in the compliance copy rule set . In the example the compliance copy C is generated using the disaster recovery copy B. In other embodiments the compliance copy C is instead generated using either the primary data B corresponding to the email sub client or using the backup copy A from the disk library A as source data. As specified in the illustrated example compliance copies C are created quarterly and are deleted after ten years and indexes are kept up to date accordingly.

While not shown in at some later point in time a restore operation can be initiated involving one or more of the secondary copies A B C. As one example a user may manually initiate a restore of the backup copy A by interacting with the user interface of the storage manager . The storage manager then accesses data in its index and or the respective storage policy A associated with the selected backup copy A to identify the appropriate media agent A and or secondary storage device A.

In other cases a media agent may be selected for use in the restore operation based on a load balancing algorithm an availability based algorithm or other criteria. The selected media agent A retrieves the data from the disk library A. For instance the media agent A may access its index to identify a location of the backup copy A on the disk library A or may access location information residing on the disk A itself.

When the backup copy A was recently created or accessed the media agent A accesses a cached version of the backup copy A residing in the index without having to access the disk library A for some or all of the data. Once it has retrieved the backup copy A the media agent A communicates the data to the source client computing device . Upon receipt the file system data agent A and the email data agent B may unpackage e.g. restore from a backup format to the native application format the data in the backup copy A and restore the unpackaged data to the primary storage device .

The storage manager may permit a user to specify aspects of the storage policy A. For example the storage policy can be modified to include information governance policies to define how data should be managed in order to comply with a certain regulation or business objective. The various policies may be stored for example in the management database . An information governance policy may comprise a classification policy which is described herein. An information governance policy may align with one or more compliance tasks that are imposed by regulations or business requirements. Examples of information governance policies might include a Sarbanes Oxley policy a HIPAA policy an electronic discovery E Discovery policy and so on.

Information governance policies allow administrators to obtain different perspectives on all of an organization s online and offline data without the need for a dedicated data silo created solely for each different viewpoint. As described previously the data storage systems herein build a centralized index that reflects the contents of a distributed data set that spans numerous clients and storage devices including both primary and secondary copies and online and offline copies. An organization may apply multiple information governance policies in a top down manner over that unified data set and indexing schema in order to permit an organization to view and manipulate the single data set through different lenses each of which is adapted to a particular compliance or business goal. Thus for example by applying an E discovery policy and a Sarbanes Oxley policy two different groups of users in an organization can conduct two very different analyses of the same underlying physical set of data copies which may be distributed throughout the organization and information management system.

A classification policy defines a taxonomy of classification terms or tags relevant to a compliance task and or business objective. A classification policy may also associate a defined tag with a classification rule. A classification rule defines a particular combination of criteria such as users who have created accessed or modified a document or data object file or application types content or metadata keywords clients or storage locations dates of data creation and or access review status or other status within a workflow e.g. reviewed or un reviewed modification times or types of modifications and or any other data attributes in any combination without limitation. A classification rule may also be defined using other classification tags in the taxonomy. The various criteria used to define a classification rule may be combined in any suitable fashion for example via Boolean operators to define a complex classification rule. As an example an E discovery classification policy might define a classification tag privileged that is associated with documents or data objects that 1 were created or modified by legal department staff or 2 were sent to or received from outside counsel via email or 3 contain one of the following keywords privileged or attorney or counsel or other like terms.

One specific type of classification tag which may be added to an index at the time of indexing is an entity tag. An entity tag may be for example any content that matches a defined data mask format. Examples of entity tags might include e.g. social security numbers e.g. any numerical content matching the formatting mask XXX XX XXXX credit card numbers e.g. content having a 13 16 digit string of numbers SKU numbers product numbers etc.

A user may define a classification policy by indicating criteria parameters or descriptors of the policy via a graphical user interface such as a form or page with fields to be filled in pull down menus or entries allowing one or more of several options to be selected buttons sliders hypertext links or other known user interface tools for receiving user input etc. For example a user may define certain entity tags such as a particular product number or project ID code that is relevant in the organization. In some implementations the classification policy can be implemented using cloud based techniques. For example the storage devices may be cloud storage devices and the storage manager may execute cloud service provider API over a network to classify data stored on cloud storage devices.

The formatting and structure of secondary copies can vary depending on the embodiment. In some cases secondary copies are formatted as a series of logical data units or chunks e.g. 512 MB 1 GB 2 GB 4 GB or 8 GB chunks . This can facilitate efficient communication and writing to secondary storage devices e.g. according to resource availability. For example a single secondary copy may be written on a chunk by chunk basis to a single secondary storage device or across multiple secondary storage devices . In some cases users can select different chunk sizes e.g. to improve throughput to tape storage devices.

Generally each chunk can include a header and a payload. The payload can include files or other data units or subsets thereof included in the chunk whereas the chunk header generally includes metadata relating to the chunk some or all of which may be derived from the payload. For example during a secondary copy operation the media agent storage manager or other component may divide the associated files into chunks and generate headers for each chunk by processing the constituent files. The headers can include a variety of information such as file identifier s volume s offset s or other information associated with the payload data items a chunk sequence number etc. Importantly in addition to being stored with the secondary copy on the secondary storage device the chunk headers can also be stored to the index of the associated media agent s and or the index . This is useful in some cases for providing faster processing of secondary copies during restores or other operations. In some cases once a chunk is successfully transferred to a secondary storage device the secondary storage device returns an indication of receipt e.g. to the media agent and or storage manager which may update their respective indexes accordingly. During restore chunks may be processed e.g. by the media agent according to the information in the chunk header to reassemble the files.

Data can also be communicated within the information management system in data channels that connect the client computing devices to the secondary storage devices . These data channels can be referred to as data streams and multiple data streams can be employed to parallelize an information management operation improving data transfer rate among providing other advantages. Example data formatting techniques including techniques involving data streaming chunking and the use of other data structures in creating copies e.g. secondary copies are described in U.S. Pat. Nos. 7 315 923 and 8 156 086 and 8 578 120 each of which is incorporated by reference herein.

Referring to the data stream has the stream header and stream payload aligned into multiple data blocks. In this example the data blocks are of size 64 KB. The first two stream header and stream payload pairs comprise a first data block of size 64 KB. The first stream header indicates that the length of the succeeding stream payload is 63 KB and that it is the start of a data block. The next stream header indicates that the succeeding stream payload has a length of 1 KB and that it is not the start of a new data block. Immediately following stream payload is a pair comprising an identifier header and identifier data . The identifier header includes an indication that the succeeding identifier data includes the identifier for the immediately previous data block. The identifier data includes the identifier that the data agent generated for the data block. The data stream also includes other stream header and stream payload pairs which may be for SI data and or for non SI data.

As an example the data structures illustrated in may have been created as a result of two storage operations involving two client computing devices . For example a first storage operation on a first client computing device could result in the creation of the first chunk folder and a second storage operation on a second client computing device could result in the creation of the second chunk folder . The container files in the first chunk folder would contain the blocks of SI data of the first client computing device . If the two client computing devices have substantially similar data the second storage operation on the data of the second client computing device would result in the media agent storing primarily links to the data blocks of the first client computing device that are already stored in the container files . Accordingly while a first storage operation may result in storing nearly all of the data subject to the storage operation subsequent storage operations involving similar data may result in substantial data storage space savings because links to already stored data blocks can be stored instead of additional instances of data blocks.

If the operating system of the secondary storage computing device on which the media agent operates supports sparse files then when the media agent creates container files it can create them as sparse files. A sparse file is type of file that may include empty space e.g. a sparse file may have real data within it such as at the beginning of the file and or at the end of the file but may also have empty space in it that is not storing actual data such as a contiguous range of bytes all having a value of zero . Having the container files be sparse files allows the media agent to free up space in the container files when blocks of data in the container files no longer need to be stored on the storage devices. In some examples the media agent creates a new container file when a container file either includes 100 blocks of data or when the size of the container file exceeds 50 MB. In other examples the media agent creates a new container file when a container file satisfies other criteria e.g. it contains from approximately 100 to approximately 1000 blocks or when its size exceeds approximately 50 MB to 1 GB .

In some cases a file on which a storage operation is performed may comprise a large number of data blocks. For example a 100 MB file may comprise 400 data blocks of size 256 KB. If such a file is to be stored its data blocks may span more than one container file or even more than one chunk folder. As another example a database file of 20 GB may comprise over 40 000 data blocks of size 512 KB. If such a database file is to be stored its data blocks will likely span multiple container files multiple chunk folders and potentially multiple volume folders. Restoring such files may require accessing multiple container files chunk folders and or volume folders to obtain the requisite data blocks.

Primary storage device secondary storage computing device secondary storage device media agent and media agent database were described in detail above.

Client computing device is analogous to client computing device described in detail above and may further comprise additional features needed to operate in system e.g. data agent . Client computing device may host one or more executable components e.g. database application another application an operating system a file system an operating system etc. When component is a database application client computing device may be configured as a database server. Client computing device may also host corresponding data agent s each data agent being associated with a respective executable component e.g. data agent which is specially configured for and associated with component .

Database application is an executable component in the form of a database application as is well known in the art. Examples of database application may include Oracle Microsoft SQL DB2 etc. As is well known in the art database applications typically track their transactions in a so called log file or transaction log which enables the database application to recover to a previous point in time and or to replay the transactions. Database application illustratively populates and maintains a log file and stores data in database .

Log file is a primary data file analogous to primary data and stored in primary storage device which comprises the transaction log of database application . Log file is considered to be primary data because it comprises data generated by database application while it operates in live production mode. As database application undergoes transactions e.g. creating a new record changing an existing record deleting a record etc. database application tracks the particulars of each respective transaction in log file as is well known in the art. Depending on the vendor configuration and or version of database application log file may take different forms such as a unitary file comprising the transaction records a collection of per transaction files a structured index file and or any combination thereof. In other words log file may be embodied as one or more distinct files but shall be referred to herein in the singular as log file . Log file is populated at least in part by database application .

When database application experiences many transactions which may happen when database is very large log file may grow rapidly. Therefore database operators generally desire to back up the log file and then truncate it to a smaller size with better performance characteristics. Thus secondary copies of log file may be stored to secondary storage such as secondary storage device e.g. copy of log file . . . n.

Database is a primary data file that comprises the database data managed by database application . For example database may comprise financial data commercial transactions emails corporate information etc. without limitation. Database is considered to be primary data because it comprises data generated by database application while it operates in live production mode. As database application undergoes transactions e.g. creating a new record changing an existing record deleting a record etc. database stores these records as is well known in the art. Database is shown here co residing with log file on the same primary storage device but they may reside on separate storage devices without limitation. Log file logs database transactions as managed by database application .

Log file backup copies e.g. . . . are secondary copies of log file which are generated by system in respective secondary copy operations e.g. generated by backup jobs. Any and all of these secondary copies may be appropriately processed e.g. classified deduplicated or single instanced compressed encrypted or any combination thereof etc. without limitation to the present invention. Thus a log file copy may not be identical to the original log file but may be an appropriate representation thereof according to the configuration s of system .

Storage manager is analogous to storage manager described in detail above and may additionally comprise enhancements required to operate within system e.g. enhanced message set to from data agent opportunistic analysis functionality etc. without limitation.

Data agent is analogous to data agent described in detail above and further comprises additional functionality for operating in system e.g. opportunistic analysis module enhanced message set to from storage manager enhanced message set to from media agent etc. Data agent is associated with database application .

Opportunistic analysis module is a functional component of data agent and may be implemented as executable software and or firmware which executes on the underlying client computing device . When it executes according to the illustrative embodiment module is largely responsible for determining when to initiate a backup job of log file according to so called opportunistic principles described in further detail herein see e.g. method . Thus opportunistic analysis module may comprise one or more of the following functionality without limitation 

Opportunistic analysis module is shown herein as a distinct component to ease understanding of the present disclosure however alternative embodiments are also possible within the scope of the present invention. Module may be embodied as a unified module within data agent layered on existing data agent code or may be a logical construct whose functionality is distributed through one or more other functional modules of the data agent and or in any combination thereof. In some alternative embodiments module may be distinct from data agent and or may execute on another computing component that is physically distinct from client computing device such as on a dedicated server that operates in conjunction with data agent but which may or may not be a logical component of data agent .

Dotted arrows and depict logical data pathways. Arrow indicates that log file logs transactions as received from database application . Arrow indicates that log file may be opportunistically backed up according to the illustrative embodiment via data agent and media agent ultimately resulting in a secondary copy . More details are provided in subsequent figures.

At block storage manager may administer for each applicable client e.g. database application clients an option for opportunistic execution of log file backup jobs. A client is a logical component of system which may represent a logical grouping of one or more agents installed on a client computing device such as data agent in some embodiments also including media agent when installed on client computing device . Storage manager may recognize a client as a component of system and in some embodiments may automatically create a client component the first time a data agent e.g. data agent is installed on a client computing device . Because data generated by database application is tracked by the associated data agent so that it may be properly protected in system a client may be said to generate data e.g. transaction log entries database records etc. and to store the generated data to primary storage such as to log file . According to the illustrative embodiment an administrable parameter of a client comprising data agent may be whether to use the opportunistic scheme disclosed herein for generating secondary copies of file . The administration may be by default by script or by a user administrator without limitation.

At block data agent may initialize a number of default values. According to the illustrative embodiment a number of parameters are used in the opportunistic execution scheme disclosed herein. These parameters may be initialized here with default values. These parameters may include without limitation 

Other operational factors may be configured in addition to the illustrative ones shown above without limitation. See also .

At block data agent e.g. using opportunistic analysis module may execute monitoring operations during which time data agent monitors a number of operational factors and generates a backup readiness score as described in more detail in a subsequent figure.

At block which is a decision point data agent may determine whether backup readiness score generated at block exceeds a certain readiness threshold. When the backup readiness score exceeds the readiness threshold control passes to block . On the other hand when the backup readiness score does not pass the threshold monitoring operations continue and control passes back to block . Any appropriate value may be established for the backup readiness threshold e.g. initialized at block such as a value of 100. The threshold value may vary according to the needs of system s operators and also according to the system s configuration. In some alternative embodiments data agent may determine whether the backup readiness score meets other criteria for initiating a secondary copy operation.

At block data agent may initiate a secondary copy operation e.g. a log file backup job based on the backup readiness score at block . Here a secondary copy of log file is generated e.g. copy and stored to secondary storage e.g. secondary storage device . More details are provided in a subsequent figure.

At block data agent may evaluate and adjust weights W W for the plurality of operational factors based on an evaluation period evaluation count N. After the evaluation period and or evaluation count N has elapsed system may enter an adaptive phase as described in more detail in a subsequent figure. Control may then pass back to block to resume monitoring operations this time according to potentially different weights W W. Alternatively method may end after block .

Data agent may monitor any number of operational factors such as without limitation. The set of monitored operational factors may vary from one log file to another log file even within the same system . Likewise a weight associated with a given operational factor also may vary from one log file to another. Backup readiness operational factor s that data agent may monitor relative to a particular log file may comprise any one or more of the following 

The applicable period of time may be recent e.g. the five 5 minutes immediately preceding the present evaluation. Thus for example database application activity or disk access may be measured during the immediately preceding five minutes to determine whether the application and or primary storage disk is relatively lightly loaded a light load may favor executing a backup job so that the backup job may not unduly overload the system on the other hand when the database application is very busy and or the disk is heavily accessed may not be a good time to add a backup job to the system load. Another exemplary operational factor may be a vendor specific parameter associated with at least one of the primary storage device and or the executable component such as database application e.g. where the vendor may be the creator manufacturer service provider etc. such as a limit on file sizes or on the number of secondary copies. Another example of operational factor s may be a version specific parameter associated with the executable component such as database application e.g. a maximum size allowed for a log file etc.

In reference to factor data agent may monitor the amount of disk space used by log file since the last log file backup job as against the amount of disk space allocated thereto. Data agent may further determine whether a predefined threshold has been exceeded e.g. 70 . This may mean that log file is approaching maximum allowed storage and thus needs to be backed up and then truncated so that transaction logging may continue. Illustratively when the threshold has been exceeded block is triggered.

In reference to factor data agent may monitor the number of log files generated since the last backup job in some configurations and or may monitor the number of transactions that have been entered into log file since the last backup job. Data agent may further determine whether this exceeds a pre defined threshold e.g. files transactions. This may mean that after a certain number of transactions it may be time to back up log file and truncate it so that transaction logging may continue. Illustratively when the threshold has been exceeded block is triggered.

In reference to factor data agent may determine whether a predefined amount of time has elapsed since the last log file backup job e.g. 24 hours. Illustratively when the threshold has been exceeded block is triggered. This factor is useful in ensuring that log file is backed up occasionally even if database application operations do not trigger some of the other factors and their respective thresholds. For example the present factor ensures that at a minimum a backup readiness score is generated daily which may in turn cause a backup job to be executed for log file .

In reference to factor data agent may monitor one or more current resources e.g. database disk CPU to determine whether they are lightly loaded so that executing a backup job would be less likely to overload system components. Illustratively when an applicable threshold has been exceeded block may be triggered. For example data agent may monitor database application to determine whether it is busy relative to other times of day e.g. executing fewer than 50 transactions per minute. Data agent may also monitor CPU usage on client computing device e.g. database server e.g. to determine whether it operates at less than 30 load. Data agent also may monitor access e.g. reads writes to primary storage device e.g. to from database e.g. accessing fewer than 500 records per minute. These thresholds are exemplary to illustrate how factor may be configured to favor launching a log file backup job in a lightly loaded system for.

In reference to factor data agent may monitor specific vendor and or version specific parameters which may be associated with database application primary storage device and or other aspects of system such as the number of data agents and or media agents that may be operational. For example fewer backup jobs may be launched in a system that comprises more data agents and fewer media agents to avoid creating bottlenecks. Illustratively when an operational threshold has been exceeded block may be triggered.

Weights W W correspond to factors respectively. When a backup readiness score is generated at block it is based on a weight W W applied to its corresponding factor value resulting from the monitoring operation. As explained elsewhere herein the weights may be adjusted to adapt to system behavior over time see e.g. block . Initially weights W W may default to co equal values see e.g. block . In some implementations of system a weight W may be set to zero when the corresponding factor is irrelevant or undesirable as a driver for generating a backup readiness score and launching backup jobs. For example factor may be associated with a weight W set at zero so that factor may drop out of backup readiness considerations for instance this may occur when the database application generates only one log file and when the number of transactions may not be available to data agent and or may correlate highly with the disk space factor and thus may become irrelevant.

At block data agent may generate a backup readiness score based on the plurality of monitored factors. Block may be triggered by any number of events e.g. after a predefined time period after a threshold associated with one or more factors triggers block etc. without limitation.

Since the operational factors refer to disparate concepts that may be characterized in different ways and on different scales normalization may be needed. For instance a normalized measure of load lightness according to factor may be 1 CPU usage with an illustrative threshold of 59 . An example of this and other factors appears in Table 1 below. Because implementations and configurations vary significantly among systems aspects of the illustrative formula may be administered accordingly. As noted this may be done by a user administrator and or via scripting. Block may end here and control may pass to block .

At block data agent and or storage manager may store factor value s and respective weights e.g. collected at block which factored into the backup readiness score that triggered the present backup job. The reason for saving and storing these figures is that they may be analyzed in a later evaluation at block . These figures may be stored illustratively in a data structure maintained by data agent e.g. a local cache a file in primary storage device etc.

At block data agent may initiate a log file backup job e.g. instruct and interoperate with a media agent e.g. to copy log file to a secondary copy . Data agent may also notify the storage manager e.g. if a communications connection is available thereto otherwise communications to from storage manager may be delayed until a later more suitable time see e.g. block . For example data agent may arrange or assemble the data and metadata in log file into one or more files having a certain format e.g. a particular backup or archive format before transferring the file s to a media agent in the course of the backup job.

Data agent may act independently of storage manager at this point to initiate the backup job. For example according to the illustrative embodiment data agent is the component that initiates the backup job for example communicating with an appropriate media agent such as media agent rather than relying on the storage manager to do the initiating and the job management. An illustrative embodiment of this kind of independent action by a data agent is described in U.S. patent application Ser. No. 14 218 679 entitled Efficient Information Management Performed by a Client in the Absence of a Storage Manager which is incorporated by reference herein. Another illustrative embodiment involving independent action absent a communicative connection to the storage manager is described in U.S. patent application Ser. No. 14 271 302 entitled Information Management by a Media Agent in the Absence of Communications with a Storage Manager and U.S. patent application Ser. No. 14 271 311 with the same title both of which are also incorporated by reference herein. In some alternative embodiments on the other hand data agent may notify storage manager that a backup readiness score exceeds its operational threshold storage manager may then take over control and initiate and manage a log file backup job instead of data agent doing so.

At block media agent may receive the processed log file from data agent and may further process it by indexing it and generating a secondary copy of the log file e.g. etc. which media agent then stores to secondary storage device . Indexed information from this operation may be stored in media agent database and or index cache .

At block data agent may complete the present backup job and may store job results. Because it illustratively operates independently of storage manager to manage the present log file backup job data agent may manage the job monitor the job and collect appropriate job results e.g. error rates completion status etc. Job results may be stored illustratively in a data structure maintained by data agent e.g. a local cache a file in primary storage device etc.

At block data agent may notify storage manager of job results when a communicative connection is available. In configurations where communications between data agent and storage manager are sporadic and or unreliable data agent may collect jobs metadata and job results and report them to storage manager at such time as communications are available. Block may end here and control may pass to block .

At block which is launched upon expiration of the evaluation parameter e.g. after completion of N number of log file backup jobs data agent may perform the following operations.

At block data agent may discover the backup readiness operational factor that was most relevant in the set of preceding log file backup jobs that occurred since the last evaluation or possibly more than one such factor. A most relevant factor may be defined as the backup readiness factor which among the set of evaluated backup jobs most frequently exceeded its threshold. Since exceeding a threshold kicks off a backup readiness score analysis see e.g. block at least one factor exceeds its threshold when a backup job is initiated as a result of the backup readiness score.

According to the illustrative embodiment a backup readiness operational factor that exceeds its threshold more frequently than other factors may indicate that operational conditions are such that more backup jobs may be appropriate to keep the factor from continuing to exceed the threshold. To ameliorate these conditions according to the illustrative approach a most relevant factor should be more heavily weighted going forward so that it may influence the backup readiness score more and potentially cause more backup jobs to occur. In the longer term then this factor may be overtaken by another factor that exceeds its respective threshold more often in another evaluation period becomes the most relevant factor and receives a corresponding increase in its weight relative to the other factors. Hence the adaptive nature of the present approach.

Thus the present scheme of discovering most relevant factors and increasing their going forward weights advantageously enables the illustrative system to adapt to changing conditions. Rather than relying on fixed operational parameters such as regularly scheduled backups found in the prior art the present system opportunistically launches backup jobs based on a backup readiness score which in turn is triggered by any one or more backup readiness factors exceeding a respective threshold. As conditions change and different thresholds become most relevant the system adapts by adjusting weights which then may affect when backup jobs launch. This opportunistic approach provides added flexibility and robustness to the process of backing up log files and also provides information that may be useful to operators in re configuring the system.

In addition to the adaptive behavior the illustrative system also may report on threshold conditions so that system operators may take corrective action as deemed appropriate. For example if it appears that factor on disk space usage frequently exceeds its threshold and kicks off too many backup jobs system operators may increase the allocated disk space or move the log file to a different disk drive. Thus on one hand system operators may rely on the system s own adaptive techniques to manage log file backups with relatively little or no intervention on the other hand system operators may detect systemic configuration problems based on the backup readiness operational factors and may then re configure certain components as they see fit.

An exemplary data set is illustrated in Table 1 below. For example in a case where ten 10 backup jobs occurred since the last evaluation the backup readiness operational factors and their assigned weights might look like the table below. For simplicity factors and are not used in this example. Table 1 is presented here for illustrative purposes. Other factors thresholds and normalization schemes may be chosen depending on the technology and the behavior of the implemented system.

In Table 1 above for each log file backup job the factor s that exceeded their respective threshold when the job was initiated is are shown with an asterisk . In the example of Table 1 the factor that most frequently exceeded its threshold in the ten jobs is the idle CPU percentage factor which exceeded its threshold in eight of the ten jobs. Accordingly data agent designates idle CPU percentage factor the most relevant factor for purposes of the illustrative method. This designation plays a role in the next block.

At block data agent may increase the weight assigned to the discovered most relevant factor s . Accordingly data agent may increase the weight W of factor from 30 to 32 in an illustrative increment.

At block data agent may adjust other factors respective weights based on the preceding increase. Therefore illustratively the relative weights of the other factors will decrease such that W will drop to 39 and W will drop to 29 . As a result of these adjustments the backup readiness score will more heavily skew to the idle CPU factor in future iterations which may cause more backup jobs to be initiated when the CPU utilization is relatively low.

At block data agent may prepare to apply the adjusted factor weights in the next cycle e.g. in monitoring block when the backup readiness score may be generated. Accordingly the adjusted weights may be stored to an appropriate data structure maintained by data agent e.g. a local cache a file in primary storage etc. After block completes block may end and control may return to block for a new monitoring cycle using the adjusted weights as shown in .

In regard to the components blocks operations and or sub operations described in reference to other embodiments are possible within the scope of the present invention such that the above recited components steps blocks operations and or messages requests queries instructions are differently arranged sequenced sub divided organized and or combined. In some embodiments a different component may initiate or execute a given operation.

For example in some alternative embodiments data agent may notify storage manager that a backup readiness score exceeds the operational threshold storage manager may then take over control and initiate and manage a log file backup job. Moreover the secondary copy operations are not limited to a backup job for example archive copies reference copies with or without deduplication and or encryption and or compression and or content classification etc. also may be created based on a job initiated opportunistically as described herein.

An illustrative embodiment may comprise a storage management system for opportunistically initiating a backup job based on a backup readiness score instead of based on a pre defined schedule the storage management system comprising a client computing device comprising a database application and an associated data agent a primary storage device in communication with the client computing device the primary storage device comprising a log file populated by the database application and a secondary storage device comprising a secondary copy of the log file wherein the data agent is configured to monitor a plurality of operational factors associated with at least one of the log file and the database application generate a backup readiness score based on at least one of the operational factors exceeding its respective threshold value and initiate a backup job for the log file based on the backup readiness score wherein the secondary copy of the log file is a result of the backup job.

The above recited storage management system wherein the backup job lacks a pre defined schedule and instead the backup job is initiated when the backup readiness score exceeds a threshold value. The above recited storage management system wherein the backup readiness score is based on the plurality of monitored operational factors. The above recited storage management system wherein the backup readiness score is based on the plurality of monitored operational factors and is further based on a weight assigned to each respective operational factor. The above recited storage management system wherein the backup readiness score is based on the plurality of monitored operational factors and is further based on a weight assigned to each respective operational factor based on an evaluation of a plurality of backup jobs executed since a preceding evaluation. The above recited storage management system wherein the backup job is initiated when the backup readiness score exceeds a threshold value.

The above recited storage management system wherein the data agent is further configured to adjust at least one weight assigned to a corresponding operational factor in the plurality of operational factors based on an evaluation of a plurality of backup jobs executed since a preceding evaluation. The above recited storage management system wherein a second backup job for the log file is based on a second backup readiness score which is based on an increased weight for a first operational factor in the plurality of operational factors wherein the increased weight results from an evaluation of a plurality of executed backup jobs executed since a preceding evaluation. The above recited storage management system wherein a second backup job for the log file is based on a second backup readiness score which is based on an increased weight for a first operational factor in the plurality of operational factors wherein the increased weight results from an evaluation of a plurality of executed backup jobs executed since a preceding evaluation and wherein in the plurality of executed backup jobs the first operational factor most often relative to the other operational factors exceeded its respective threshold value. The above recited storage management system further comprising a media agent associated with the secondary storage device wherein the media agent is configured to store the secondary copy of the log file to the secondary storage device.

The above recited storage management system wherein the plurality of operational factors comprises at least one of i a measure of the amount of storage space occupied by the log file ii a measure of the amount of storage space occupied by the log file since a preceding backup job was initiated iii a number of log file entries generated since the preceding backup job iv a number of database application transactions executed since the preceding backup job was initiated v a measure of elapsed time since the preceding backup job was initiated vi a measure of activity of the database application during a period of time vii a measure of usage of the primary storage device during a period of time viii a measure of usage by the database application of the primary storage device during a period of time and ix a measure of usage of the client computing device during a period of time. The above recited storage management system wherein the plurality of operational factors comprises a vendor specific parameter associated with at least one of the database application and the primary storage device. The above recited storage management system wherein the plurality of operational factors comprises a version specific parameter associated with the database application. The above recited storage management system wherein the system further comprises a storage manager for managing the backup job. The above recited storage management system wherein the backup job comprises at least one of a secondary copy operation a deduplication operation an encryption operation a compression operation.

Another alternative embodiment may comprise a system for opportunistically initiating a backup job based on a backup readiness score instead of based on a pre defined schedule the system comprising a client computing device comprising a database application and an associated data agent a primary storage device in communication with the client computing device the primary storage device comprising a log file populated by the database application and a secondary storage device comprising a secondary copy of the log file wherein the data agent is configured to monitor a plurality of operational factors associated with at least one of the log file and the database application generate a first backup readiness score that is based on the plurality of monitored operational factors and initiate a first backup job for the log file based on the backup readiness score wherein the secondary copy of the log file is a result of the first backup job and wherein the data agent is further configured to evaluate a plurality of executed backup jobs that includes the first backup job wherein in the plurality of executed backup jobs a first operational factor most often relative to the other operational factors exceeded its respective threshold value and initiate a second backup job of the log file based on a second backup readiness score which is based on an increased weight for the first operational factor wherein the increased weight results from the evaluation of the plurality of executed backup jobs.

The above recited system wherein the first backup readiness score is generated based on at least one of the operational factors exceeding its respective threshold value. The above recited system wherein the first backup job is initiated when the backup readiness score exceeds a threshold value. The above recited system wherein the data agent is further configured to increase the weight for the first operational factor and decrease a second weight for a corresponding second operational factor in the plurality of operational factors wherein the decrease also results from the evaluation of the plurality of executed backup jobs. The above recited system wherein the first backup job is initiated when the first backup readiness score exceeds a threshold value and further wherein the second backup job is initiated when the second backup readiness score exceeds the threshold value.

An alternative embodiment may comprise a system for opportunistically generating one or more secondary copies of a file based on a readiness score instead of based on a pre defined schedule the system comprising a client computing device comprising an executable component and an associated data agent a first storage device in communication with the client computing device the primary storage device comprising a file populated at least in part by the executable component and a second storage device comprising a secondary copy of the file wherein the data agent is configured to monitor a plurality of operational factors associated with at least one of the file and the executable component generate a readiness score based on at least one of the operational factors exceeding its respective threshold value and initiate a secondary copy operation for the file based on the readiness score wherein the secondary copy of the log file is a result of the secondary copy operation.

The above recited system wherein the executable component is at least one of an application an operating system a file system and a virtual machine. The above recited system wherein the file comprises a transaction log of the executable component. The above recited system wherein the secondary copy operation lacks a pre defined schedule and instead is initiated when the readiness score passes a threshold value. The above recited system wherein the readiness score is based on the plurality of monitored operational factors. The above recited system wherein the readiness score is based on the plurality of monitored operational factors and is further based on a weight assigned to each respective operational factor. The above recited system wherein the readiness score is based on the plurality of monitored operational factors and is further based on a weight assigned to each respective operational factor based on an evaluation of a plurality of secondary copy operations for the file executed since a preceding evaluation. The above recited system wherein the secondary copy operation is initiated when the readiness score exceeds a threshold value. The above recited system wherein the data agent is further configured to adjust at least one weight assigned to a corresponding operational factor in the plurality of operational factors based on an evaluation of a plurality of secondary copy operations executed since a preceding evaluation. The above recited system wherein a second backup job for the log file is based on a second backup readiness score which is based on an increased weight for a first operational factor in the plurality of operational factors wherein the increased weight results from an evaluation of a plurality of executed backup jobs executed since a preceding evaluation. The above recited system wherein a second backup job for the log file is based on a second backup readiness score which is based on an increased weight for a first operational factor in the plurality of operational factors wherein the increased weight results from an evaluation of a plurality of executed backup jobs executed since a preceding evaluation and wherein in the plurality of executed backup jobs the first operational factor most often relative to the other operational factors exceeded its respective threshold value. The above recited system further comprising a media agent associated with the secondary storage device wherein the media agent is configured to store the secondary copy of the log file to the secondary storage device.

Another exemplary embodiment may comprise a system for opportunistically generating secondary copies of a file based on a readiness score instead of based on a pre defined schedule the system comprising a client computing device comprising an executable component and an associated data agent a first storage device in communication with the client computing device the first storage device comprising a file populated at least in part by executable component and a second storage device comprising a secondary copy of the file wherein the data agent is configured to monitor a plurality of operational factors associated with at least one of the file and the executable component generate a first readiness score that is based on the plurality of monitored operational factors and generate a first secondary copy of the file based on the readiness score and wherein the data agent is further configured to evaluate a plurality of executed secondary copy operations wherein in the plurality of executed secondary copy operations a first operational factor most often relative to the other operational factors exceeded its respective threshold value and generate a second secondary copy of the log file based on a second readiness score which is based on an increased weight for the first operational factor wherein the increased weight results from the evaluation of the plurality of executed secondary copy operations.

The above recited system wherein the first readiness score is generated based on at least one of the operational factors exceeding its respective threshold value. The above recited system wherein the first secondary copy is generated when the readiness score exceeds a threshold value. The above recited system wherein the data agent is further configured to increase the weight for the first operational factor and decrease a second weight for a corresponding second operational factor in the plurality of operational factors wherein the decrease also results from the evaluation of the plurality of executed secondary copy operations. The above recited system wherein the first secondary copy is generated when the first readiness score exceeds a threshold value and further wherein the second secondary copy is generated when the second readiness score exceeds the threshold value. The above recited system wherein the executable component is at least one of an application an operating system a file system and a virtual machine. The above recited system wherein the file comprises a transaction log of the executable component. The above recited system wherein the secondary copy operation lacks a pre defined schedule and instead is initiated when the readiness score passes a threshold value. The above recited system wherein the readiness score is based on the plurality of monitored operational factors and is further based on a weight assigned to each respective operational factor.

An illustrative embodiment may comprise a method for opportunistically initiating a backup job in a storage management system based on a backup readiness score the method comprising executing a database application on a client computing device wherein the database application populates at least part of an associated log file monitoring by a data agent a plurality of operational factors associated with at least one of the database application and the log file populated at least in part by the database application generating by the data agent a first backup readiness score based on the plurality of operational factors initiating by the data agent a first backup job for the log file based on the backup readiness score wherein the first backup job generates a first secondary copy of the log file evaluating by the data agent a plurality of executed backup jobs including the first backup job wherein in the plurality of backup jobs a first operational factor most often exceeded relative to the other operational factors its respective threshold value generating by the data agent a second backup readiness score based on an increased weight for the first operational factor wherein the increased weight results from the evaluating of the plurality of executed backup jobs and initiating by the data agent a second backup job of the log file based on the second backup readiness score wherein the second backup job generates a second secondary copy of the log file.

The above recited method wherein the first backup readiness score is generated when one or more of the operational factors exceeds a respective threshold value. The above recited method further comprising based on the evaluating of the plurality of backup jobs adjusting by the data agent at least one weight associated with a corresponding second operational factor in the plurality of operational factors. The above recited method wherein the first backup job is initiated when the first backup readiness score exceeds a threshold value. The above recited method wherein the first backup job is initiated when the first backup readiness score exceeds a threshold value and further wherein the second backup job is initiated when the second backup readiness score exceeds the threshold value. The above recited method wherein the data agent also executes on the client computing device.

An alternative embodiment may comprise a method for opportunistically initiating a backup job based on a backup readiness score in a storage management system the method comprising executing an executable component on a client computing device wherein the executable component is associated with a file stored in a primary storage device monitoring by a data agent executing on the client computing device a plurality of operational factors associated with at least one of the executable component and the file associated with the executable component generating by the data agent a first backup readiness score based on the plurality of operational factors and initiating by the data agent a first backup job for the file based on the backup readiness score wherein the first backup job generates a first secondary copy of the file.

The above recited method may further comprise evaluating by the data agent a plurality of executed backup jobs including the first backup job wherein the evaluating comprises i identifying a first operational factor which in the plurality of backup jobs most often relative to the other operational factors exceeded its respective threshold value and further comprises ii increasing a weight for the first operational factor generating by the data agent a second backup readiness score based on the increased weight for the first operational factor and initiating by the data agent a second backup job of the file based on the second backup readiness score wherein the second backup job generates a second secondary copy of the file. The above recited method wherein the executable component is a database application. The above recited method wherein the executable component is a database application and wherein the file comprises a transaction file populated by the database application.

Another exemplary embodiment may comprise a method for opportunistically generating one or more secondary copies of a file based on a readiness score in a storage management system the method comprising executing an executable component on a client computing device wherein the executable component populates at least part of an associated file monitoring by a data agent a plurality of operational factors associated with at least one of the executable component and the file generating by the data agent a first readiness score based on the plurality of operational factors initiating by the data agent a first secondary copy operation based on the readiness score wherein the first secondary copy operation generates a first secondary copy of the file evaluating by the data agent a plurality of executed secondary copy operations including the first secondary copy operation wherein in the plurality of executed secondary copy operations a first operational factor most often relative to the other operational factors exceeded its respective threshold value generating by the data agent a second readiness score based on an increased weight for the first operational factor wherein the increased weight results from the evaluating of the plurality of executed secondary copy operations and initiating by the data agent a second secondary copy operation based on the second readiness score wherein the second secondary copy operation generates a second secondary copy of the log file.

The above recited method wherein the first readiness score is generated when one or more of the operational factors exceeds a respective threshold value. The above recited method may further comprise based on the evaluating of the plurality of executed secondary copy operations adjusting by the data agent at least one weight assigned to a corresponding second operational factor in the plurality of operational factors. The above recited method wherein the first secondary copy operation is initiated when the first readiness score exceeds a threshold value. The above recited method wherein the first secondary copy operation is initiated when the first readiness score exceeds a threshold value and further wherein the second secondary copy operation is initiated when the second readiness score exceeds the threshold value. The above recited method wherein the first readiness score is generated based on at least one of the operational factors exceeding its respective threshold value. The above recited method wherein the first secondary copy is generated when the readiness score exceeds a threshold value.

An alternative embodiment may comprise a method comprising generating a first secondary copy of a file in a storage management system wherein the generating is based on a first backup readiness score instead of based on a pre defined schedule wherein the method further comprises executing a database application on a client computing device wherein the database application populates at least part of a file monitoring by a data agent executing on the client computing device a plurality of operational factors associated with at least one of the database application and the file initiating by the data agent based on the backup readiness score a first backup job which generates the first secondary copy of the log file evaluating by the data agent a plurality of executed backup jobs including the first backup job wherein in the plurality of backup jobs a first operational factor most often relative to the other operational factors exceeded its respective threshold value generating by the data agent a second backup readiness score based on an increased weight for the first operational factor wherein the increased weight results from the evaluating of the plurality of executed backup jobs and initiating by the data agent based on the second backup readiness score a second backup job of the file wherein the second backup job generates a second secondary copy of the file.

The above recited method wherein the file comprises at least one of a transaction log file and a database. The above recited method wherein the first backup readiness score is generated when one or more of the operational factors exceeds a respective threshold value. The above recited method may further comprise based on the evaluating of the plurality of backup jobs adjusting by the data agent at least one weight associated with a corresponding second operational factor in the plurality of operational factors before generating the second backup readiness score. The above recited method wherein the first backup job is initiated when the first backup readiness score exceeds a threshold value. The above recited method wherein the first backup job is initiated when the first backup readiness score exceeds a threshold value and further wherein the second backup job is initiated when the second backup readiness score exceeds the threshold value.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling or connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any one of the items in the list all of the items in the list and any combination of the items in the list. Likewise the term and or in reference to a list of two or more items covers all of the following interpretations of the word any one of the items in the list all of the items in the list and any combination of the items in the list.

Depending on the embodiment certain operations acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all are necessary for the practice of the algorithms . Moreover in certain embodiments operations acts functions or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside and execute on servers workstations personal computers computerized tablets PDAs and other computing devices suitable for the purposes described herein. Software and other modules may be accessible via local memory via a network via a browser or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces interactive voice response command line interfaces and other suitable interfaces.

Further the processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. In addition two or more components of a system can be combined into fewer components. Various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems and or computing devices. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Embodiments are also described above with reference to flow chart illustrations and or block diagrams of methods apparatus systems and computer program products. Each block of the flow chart illustrations and or block diagrams and combinations of blocks in the flow chart illustrations and or block diagrams may be implemented by computer program instructions. Such instructions may be provided to a processor of a general purpose computer special purpose computer specially equipped computer e.g. comprising a high performance database server a graphics subsystem etc. or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor s of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flow chart and or block diagram block or blocks.

These computer program instructions may also be stored in a non transitory computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified in the flow chart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computing device or other programmable data processing apparatus to cause a series of operations to be performed on the computing device or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the acts specified in the flow chart and or block diagram block or blocks.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention.

These and other changes can be made to the invention in light of the above Detailed Description. While the above description describes certain examples of the invention and describes the best mode contemplated no matter how detailed the above appears in text the invention can be practiced in many ways. Details of the system may vary considerably in its specific implementation while still being encompassed by the invention disclosed herein. As noted above particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the invention with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the invention to the specific examples disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the invention encompasses not only the disclosed examples but also all equivalent ways of practicing or implementing the invention under the claims.

To reduce the number of claims certain aspects of the invention are presented below in certain claim forms but the applicant contemplates the various aspects of the invention in any number of claim forms. For example while only one aspect of the invention is recited as a means plus function claim under 35 U.S.C sec. 112 f AIA other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 f will begin with the words means for but use of the term for in any other context is not intended to invoke treatment under 35 U.S.C. 112 f . Accordingly the applicant reserves the right to pursue additional claims after filing this application in either this application or in a continuing application.

