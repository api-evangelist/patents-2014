---

title: Visual development environment for implementing logic modules
abstract: Logic modules may be developed to automate or simplify a variety of business tasks and applications. For example, a logic module of a shopping cart process may be developed to handle transactions between an online retail service and online shoppers. As the complexity of logic modules increases, the developmental time and cost can also increase. Accordingly, developers may utilize a visual development environment to simplify logic module design. Provided are exemplary techniques for improving visual development environments, which can in turn increase the efficiency of logic module development.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141349&OS=09141349&RS=09141349
owner: TIBCO Software Inc.
number: 09141349
owner_city: Palo Alto
owner_country: US
publication_date: 20140905
---
This application claims priority from U.S. Patent Application No. 61 890 094 filed on Oct. 11 2013 entitled Visual development environment for implementing logic modules the contents of which are hereby incorporated by reference in their entirety for all purposes.

Enclosed is a detailed description of a framework and visual development environment that enables the efficient development of logic modules that may be instantiated on servers. The visual development environment increases developer productivity through the structured presentation of logic within said logic modules.

These exemplary figures and embodiments are to provide a written detailed description of the subject matter set forth by any claims that issue from the present application. These exemplary figures and embodiments should not be used to limit the scope of any such claims.

Further although similar reference numbers may be used to refer to similar structures for convenience each of the various example embodiments may be considered to be distinct variations.

The run time system may include a plurality of any of the presented elements. The schematic diagram of includes a single one of each element for the purpose of simplicity.

The logic module framework allows developers to design the logic modules by utilizing a visual development environment . Within the visual development environment developers may create and modify scopes that are design time constructs as well as run time constructs that are part of the logic modules . For example the scopes may comprise design time representations of primary and secondary logic as described below with respect to .

In some embodiments the logic module development terminal may communicate with a logic module development server prior to while and or after a developer designs a logic module using the visual development environment. For example the development server may comprise an application programming interface API for interaction with a thin client interface associated with the development terminal . Through the API the development server may provide one or more development terminals with controlled read and or write access to the machine readable media which as described in may contain instructions for instantiating logic modules in a run time system. The API may also allow instances of the visual development environment to be instantiated at one or more development terminals .

The API may be encoded in machine readable media . As a result a given instance of the visual development environment may be enabled and stored at least in part by the machine readable media . In some embodiments an instance of the visual development environment may be enabled and stored at least in part by local machine readable media associated with a development terminal .

As indicated in the figure design time packets may be bi directionally transferred between the development terminal and the development server through a communications channel. The design time packets may be interpreted by the development terminal to render and display design time representations of primary and secondary logic to the developer via the visual interaction element . The development terminal may also send design time packets back to the development server as feedback e.g. based on inputs received by the tactile user interaction interface .

In some embodiments the development server may be a virtual server that is fully integrated with or instantiated on the development terminal . This allows a developer to interact with a visual development environment and to develop logic modules even when the associated development terminal is not connected to a communications channel or network.

When development of a logic module is completed machine interpretable instructions for instantiating deploying and or otherwise running the logic module may be stored in the machine readable media . As described above these instructions may be executed within a run time system. In some embodiments even after instructions representing completed logic modules are stored on the machine readable media the instructions may be retrieved e.g. via the thin client interface in the form of design time packets and further modified through the development terminal .

In some embodiments the development terminal stores and retrieves instructions representing logic modules to and from a different machine readable media than is used within the run time system. For example the development terminal may locally store instructions for instantiating deploying and or otherwise running the logic modules. In these embodiments instructions representing completed logic modules may be automatically or manually transferred from media in the design time system to media in the run time system. For example a developer may routinely transfer e.g. commit instructions representing completed logic modules from the media associated with the design time system to the media associated with the run time system. The storing retrieving and modifying of the instructions representing logic modules may be enabled or otherwise facilitated by the visual development environment.

After browsing the retailer s website the shopper may desire to purchase one or more items presented on the website. The shopper s actions on the retail website may be sent to the cloud based server via HTTP POST commands. The first of these commands may instruct the cloud based server to instantiate the shopping cart process . While the online shopper is shopping online various other actions may be sent to the server and passed to the shopping cart process where they may be interpreted. In this embodiment such actions may include adding items to the virtual shopping cart removing items from the virtual shopping cart and checking out and paying for the items within the virtual shopping cart. The shopping cart process may communicate with the online retail service as required to ensure that the decisions of the online shopper are properly interpreted and handled. When the online shopper requests to complete the purchase the shopping cart process ensures that the online retail service receives the final order. In this way the shopping cart process handles the entire transaction between the online shopper and the online retail service .

The online shopping system may have a mechanism to deactivate a given instance of the shopping cart process when the respective transaction is completed. This may unlock computational resources for other logic modules . Multiple shopping cart processes may be running at a given instant in time such that the online shopping system may service the requests of multiple online shoppers simultaneously. The selection of a cloud based server for this task may increase scalability.

As described above logic modules such as the shopping cart process are key components of various run time systems and the present disclosure describes both systems and methods to develop said logic modules using a visual development environment .

The scope may include one or more event handler windows that may appear when one or more event handlers is defined and associated with the scope. These event handler windows may appear within the bottom portion of the scope . The event handler windows may be at least partially transparent unless the developer focuses on the associated regions. The event handler windows may also be shown as minimized unless the developer elects to expand them.

The event handlers described within event handler windows may be triggered by events. Upon triggering the event handlers may perform activities or logic similar to the primary logic of the scope within the central area . These activities may conditionally be carried out synchronously or asynchronously with the primary activities of the logic defined in the scope depending on the nature of these activities. The triggering events may include user client interactions timers or any other events that may be detected or passed to the logic module under development.

The scope may include one or more fault handler windows that may similarly be at least partially transparent unless the developer focuses on the associated regions. The fault handler windows may be visually presented as hanging off from the scope . Fault handlers windows may also be shown as minimized unless the developer elects to expand them. Fault handlers may be triggered by various faults and upon triggering fault handlers may execute logic.

The scope may include a compensation handler window which is shown as attached i.e. adjunct to the scope . This window may be maximized in a manner similar to the central area of the scope . The compensation hander associated with the compensation handler window provides a mechanism for compensating or undoing certain elements of the primary logic of the scope . As an example if the primary logic dictates creating a file the logic within the compensation handler may delete that file from a file system such that the run time construct associated with the scope may deactivate without leaving behind artifacts or unreleased resources.

During the development process developers may need access the primary logic of a critical path without being distracted by secondary logic such as fault handling and compensation logic. The visual representation of the scope intentionally allows the developer to focus on the primary logic when so desired. The impact is significant when a developer is trying to create a complex logic module using multiple scopes and or scopes that may be nested within one another.

As logic module complexity increases developers may find themselves requiring several scopes. In some embodiments the central area of individual scopes may be minimized by the developer. This effectively minimizes the scope itself although a compensation handler window associated with that scope may still remain visible. is a schematic diagram illustrating a minimized scope without handlers.

Some preferred embodiments have been described in detail hereinabove. It is to be understood that the scope of the disclosure also comprehends embodiments different from those described yet within the scope of the claims. The terminology employed herein is for the purposes of description and not of limitation. Words of inclusion are to be interpreted as non exhaustive in considering the scope of the disclosure. Where the verb may appears it is intended to convey an optional and or permissive condition but its use is not intended to suggest any lack of operability unless otherwise indicated. Persons skilled in the art may make various changes in the methods used to enable the system presently disclosed.

As referred to herein a machine or engine may be a virtual machine computer node instance host or machine in a networked computing environment. Also as referred to herein a networked computing environment is a collection of machines connected by communication channels that facilitate communications between machines and allow for machines to share resources. Network may also refer to a communication medium between processes on the same machine. Also as referred to herein a server is a machine deployed to execute a program operating as a socket listener and may include software instances. Such a machine or engine may represent and or include any form of processing component including general purpose computers dedicated microprocessors or other processing devices capable of processing electronic information. Examples of a processor include digital signal processors DSPs application specific integrated circuits ASICs field programmable gate arrays FPGAs and any other suitable specific or general purpose processors.

Machine readable media may comprise any collection and arrangement of volatile and or non volatile memory components suitable for storing data. For example machine readable media may comprise random access memory RAM devices read only memory ROM devices magnetic storage devices optical storage devices and or any other suitable data storage devices. Machine readable media may represent any number of memory components within local to and or accessible by a processor.

Resources may encompass any types of resources for running logic modules including hardware such as servers clients mainframe computers networks network storage data sources memory central processing unit time scientific instruments and other computing devices as well as software software licenses available network services and other non hardware resources or a combination thereof.

Various terms used herein have special meanings within the present technical field. Whether a particular term should be construed as such a term of art depends on the context in which that term is used. Connected to in communication with or other similar terms should generally be construed broadly to include situations both where communications and connections are direct between referenced elements or through one or more intermediaries between the referenced elements including through the internet or some other communicating network. Network system environment and other similar terms generally refer to networked computing systems that embody one or more aspects of the present disclosure. These and other terms are to be construed in light of the context in which they are used in the present disclosure and as those terms would be understood by one of ordinary skill in the art would understand those terms in the disclosed context. The above definitions are not exclusive of other meanings that might be imparted to those terms based on the disclosed context.

Words of comparison measurement and timing such as at the time equivalent during complete and the like should be understood to mean substantially at the time substantially equivalent substantially during substantially complete etc. where substantially means that such comparisons measurements and timings are practicable to accomplish the implicitly or expressly stated desired result.

The title background and headings are provided in compliance with regulations and or for the convenience of the reader. They include no admissions as to the scope and content of prior art and no limitations applicable to all disclosed embodiments.

