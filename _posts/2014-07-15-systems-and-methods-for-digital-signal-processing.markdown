---

title: Systems and methods for digital signal processing
abstract: Systems and methods are provided for audio processing. A system includes: a component manager and a pipeline manager. The component manager is configured to communicate with a host system and manage one or more components for processing an audio stream. A component is associated with one or more audio processing functions. The pipeline manager is configured to manage one or more connections among the components. The connections indicate a processing flow involving the components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09405826&OS=09405826&RS=09405826
owner: MARVELL INTERNATIONAL LTD.
number: 09405826
owner_city: Hamilton
owner_country: BM
publication_date: 20140715
---
This disclosure claims priority to and benefit from U.S. Provisional Patent Application No. 61 846 373 filed on Jul. 15 2013 the entirety of which is incorporated herein by reference.

The technology described in this patent document relates generally to signal processing and more particularly to digital signal processing.

Digital signal processing DSP is often implemented for audio signal processing of electronic devices e.g. mobile phones . DSP usually involves mathematical manipulation of audio signals to modify or improve the signals in some way. For example DSP related firmware uses different sets of application programming interfaces APIs to determine a signal processing task e.g. playback recording and a calling sequence of different functions can be established to perform the task.

In accordance with the teachings described herein systems and methods are provided for audio processing. A system includes a component manager and a pipeline manager. The component manager is configured to communicate with a host system and manage one or more components for processing an audio stream. A component is associated with one or more audio processing functions. The pipeline manager is configured to manage one or more connections among the components. The connections indicate a processing flow involving the components.

In one embodiment a method is provided for audio processing. Communications with a host system are carried out. One or more components are generated for audio processing based at least in part on the communication with the host system. A component is associated with one or more audio processing functions. One or more connections are established among the components. The connections indicate a processing flow involving the components. The audio stream is processed using the components and the connections.

In another embodiment a system for audio processing includes one or more processors for digital signal processing and a computer readable storage medium. The processors are configured to communicate with a host system manage one or more components for processing an audio stream a component being associated with one or more audio processing functions and manage one or more connections among the components the connections indicating a processing flow involving the components. The computer readable storage medium is configured to store data related to the components and data related to the connections.

Using APIs and calling sequences for DSP tasks has some disadvantages. For example for each new task APIs often need to be modified and selected to provide a new interface to a host central processing unit CPU which may cause inefficiency of signal processing. In addition in conventional DSP processing systems data commands and control commands are often both treated as private commands and the host CPU often needs to know details of the DSP implementation to provide correct command sequences for different DSP tasks.

Particularly a component manager communicates with the host system and creates e.g. dynamically the media system components . Each media system component includes one or more audio processing functions. The component manager links the media system components by establishing connections between the components and the connections indicate a processing flow involving the components . The component manager can also release e.g. dynamically one or more components based on actual needs for signal processing. For a particular DSP task the host system does not need to know the DSP implementation details for generating a command sequence. Instead a processing flow is set up for the task through the connections between the components . A pipeline manager maintains the connections between the components and changes e.g. dynamically the connections based on the communication with the host system .

In some embodiments a DSP task includes playback of an audio signal. The component manager creates the components that include a collection component a decode component and a playback component. In addition the component manager generates connections among these created components and a processing flow is determined accordingly to carry out the playback of the audio signal. For example the collection component is connected to the decode component that is connected to the playback component. The collection component collects an audio signal first and the decode component decodes the collected audio signal. Then the playback component performs playback of the decoded audio signal.

Once the components are created they can be reused for processing different audio streams and the connections among the components may be changed accordingly. As an example the host system includes one or more central processing units CPUs and the DSP processing system includes one or more DSP processors.

A kernel driver within the host system provides an interface for transferring commands and or data between the components and user applications running on the host system . The host system and the DSP processing system exchange control commands and data. For example an inter processor communication interface and a shared memory are used for physical connections between the host system and the DSP processing system .

For the exchange of control commands a data structure in the shared memory is determined. When the host system needs to send a control command to the DSP processing system the host system prepares the control command according to the determined data structure and stores the control command in the shared memory . Then the host system sends an interrupt to the DSP processing system through the inter processor communication interface . When the DSP processing system begins operations in response to the interrupt the DSP processing system reads the data structure stored in the shared memory and analyzes the data structure within an interrupt processing routine to obtain the control command sent from the host system . Similarly when the DSP processing system needs to send a control command to the host system the DSP processing system prepares the control command according to the data structure and stores the control command in the shared memory . Then the host system reads the data structure stored in the shared memory and analyzes the data structure to obtain the control command sent from the DSP processing system .

For the exchange of data the host system prepares a set of descriptors associated with a buffer that stores data to be exchanged. The host system sends the descriptors to the DSP processing system through a control command transferring process as described above. The DSP processing system analyzes one or more control commands received from the host system and extracts the descriptors from the received control commands. Then the DSP processing system acquires the data to be exchanged from the buffer using the extracted descriptors.

This written description uses examples to disclose the invention include the best mode and also to enable a person skilled in the art to make and use the invention. The patentable scope of the invention may include other examples that occur to those skilled in the art. Other implementations may also be used however such as firmware or appropriately designed hardware configured to carry out the methods and systems described herein. For example the systems and methods described herein may be implemented in an independent processing engine as a co processor or as a hardware accelerator. In yet another example the systems and methods described herein may be provided on many different types of computer readable media including computer storage mechanisms e.g. CD ROM diskette RAM flash memory computer s hard drive etc. that contain instructions e.g. software for use in execution by one or more processors to perform the methods operations and implement the systems described herein.

