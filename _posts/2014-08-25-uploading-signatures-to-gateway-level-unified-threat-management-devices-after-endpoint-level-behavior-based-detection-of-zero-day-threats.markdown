---

title: Uploading signatures to gateway level unified threat management devices after endpoint level behavior based detection of zero day threats
abstract: Zero day threats are detected at gateway level and blocked from entering a network. A database containing signatures identifying malware is maintained at the gateway. Inbound network traffic is scanned using the signatures, and files containing malware are detected and blocked by the gateway. When a file is received by a given endpoint in the network, behavior based malware detection is used to determine whether the file contains a zero day threat. Whenever a file is adjudicated by an endpoint as containing a zero day threat, the endpoint generates an identifying signature, and transmits the signature to the gateway in real time. The gateway thus receives signatures identifying multiple zero day threats from multiple endpoints, and subsequently scans inbound network traffic for the received signatures. From that point, the gateway detects files containing the zero day threats, and blocks them from being routed to endpoints in the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09332023&OS=09332023&RS=09332023
owner: 
number: 09332023
owner_city: 
owner_country: 
publication_date: 20140825
---
This disclosure pertains generally to computer security and more specifically to uploading signatures to gateway level unified threat management devices after endpoint level behavior based detection of zero day threats.

Unified Threat Management UTM at a gateway level is a network security practice which has gained widespread currency as a primary network gateway defense solution for enterprises and other organizations. UTM can be thought of as the evolution of the traditional firewall into an inclusive gateway level security product able to perform multiple security functions within a single network appliance located at the gateway between the enterprise level private network and the Internet or other public wide area network . These security functions can include network firewalling network intrusion prevention and anti malware scanning anti spam processing virtual private network VPN content filtering load balancing data leak prevention and on appliance reporting.

Anti malware and intrusion prevention scanning functionality is typically included in a UTM system on a gateway level device. These systems detect and block network threats and malware such as viruses worms and Trojans before they enter the enterprise network by scanning incoming files in the data flow and detecting known malware signatures in the files. As the term is used herein a malware signature means a string of bits or binary pattern that identifies a known virus or other malware. It can be in the form of a hash a number derived from a string of text which in its simplest form is a static calculated numerical value of a snippet of code unique to the malware. Malware signatures are sometimes also referred to as definitions or DAT files. Signature based detection involves scanning files to detect malware signatures from a dictionary of known signatures. This can be effective but cannot defend against malware unless samples have already been obtained and signatures created. Malware authors have tried to stay a step ahead of such scanning by writing viruses which encrypt parts of themselves or otherwise modify themselves as a method of disguise so as to not match malware signatures in the dictionary.

In some cases generic malware signatures can be created that identify variants by accounting for slight variations of known malicious code in files. For example virus researchers can identify common areas that all versions of malware in a given family share and create a single generic signature for that family of malware. Such generic signatures often contain non contiguous code using wildcard characters where differences are present between variations thereby allowing the scanner to detect viruses even if they are padded with extra meaningless code.

Signature based scanning by the UTM system can detect and block known viruses and other threats which have already been identified and for which a signature has already been created and supplied to the UTM system. This is effective against known threats for which a signature has already been created but it is possible for computers to be attacked by new malware which has not yet been identified or analyzed and is not similar enough to known malware to be identified by a generic signature. A zero day threat sometimes called zero hour or day zero is an attack that exploits a previously unknown vulnerability in a computer application or is otherwise not known prior to the attack such that developers and computer security professionals have not had time to create a signature of the malware or otherwise address and patch the vulnerability. It is called a zero day threat because there have been zero days to fix the flaw and thus a signature or patch is not yet available.

Although zero day threats cannot be detected by scanning files for known malware signatures the behavior of a program can be monitored with behavior based techniques to detect when the program executes activities or engages in behavior indicative of its being malware. However because files do not run at the gateway level but instead only once they have reached the target endpoint device e.g. the client or server within the private network UTM systems cannot analyze the behavior of the files and thus cannot detect malicious or suspicious behavior to identify zero day threats such as a new malicious binary or shellcode. Instead only an endpoint based anti malware product can detect a virus or network threat by its behavior because the programs only run on the endpoints.

For this reason conventional security networking topology using UTM requires both the UTM system at the gateway level to keep known threats out of the enterprise network altogether and a separate endpoint based anti malware software program residing on each computer in the network to perform behavior based detection so as to protect against zero day threats. In order to infect a computer the malware or network threat payload must pass through the UTM system at the gateway level which is the first battle line of the enterprise. However because the UTM system is relying on existing signatures as explained above it cannot detect zero day threats for which no signature is yet known. These threats therefore arrive at the target endpoint computer where it is hoped they will be detected by endpoint behavior based anti malware software which is the second battle line. However under this two battle line scenario a zero day attacker could attempt to target multiple machines in the same network hoping that at least one of the computer users neglected to install or maintain their local endpoint software. Even if the endpoint security software is installed on every targeted end point each targeted machine still needs to detect the threat separately based on the behavior of the file and separately take protective action to neutralize the detected threat. Even if this is successful it uses an abundance of computing resources at each separate computer on the network.

Zero day threats are detected at gateway level and blocked from entering a private network. The private network consists of a gateway device and multiple endpoint computers. In one embodiment the gateway device can run a first operating system while one or more of the endpoint computer s run s a second different operating system. Different ones of the multiple endpoint computers can run two or more different operating systems. Regardless the gateway device routes inbound and outbound network traffic to and from the endpoint computers of the private network. A database or other storage mechanism containing multiple signatures identifying known malware is maintained at the gateway device. Inbound network traffic is scanned using the multiple maintained signatures and files containing known malware are detected in the inbound network traffic by the gateway device. Detected files containing known malware are blocked from being routed to any endpoint computer in the private network by the gateway device. During the course of routing inbound traffic to endpoint computers of the private network sometimes a file containing a specific zero day threat is received but the zero day threat is not detected by the gateway device. This is because no signature identifying the zero day threat is present in the collection of malware signatures at the time the zero day threat arrives at the gateway device in the inbound network traffic. As a result the file containing the specific zero day threat is routed by the gateway device to a specific target endpoint computer in the private network.

When a file is received by a given endpoint computer in the private network from the gateway device the endpoint computer can perform behavior based malware detection on the file in order to determine whether the file is malicious or benign. Performing behavior based detection on a file can take the form of running the file on the endpoint computer and monitoring the behavior of the file in real time as it runs to determine whether the file attempts any behaviors indicative of maliciousness. For example the file can be run in a sandbox on the endpoint computer such that the sandbox provides controlled access to resources of the endpoint computer. Monitoring the behavior of the file as it runs on the endpoint computer can be implemented for example by intercepting system calls made by the file as it runs e.g. hooking an Application Programming Interface API of the operating system of the endpoint computer . The monitoring of the file as it runs on the endpoint computer can be used to detect if the file attempts to execute behaviors or combinations of behaviors indicative of maliciousness such as one or more of the following opening viewing deleting and or modifying at least one system file formatting a storage device executing an unrecoverable disk operation making a modification to logic of at least one executable file script or macro modifying start up or other critical system settings scripting of an e mail or an instant messaging client to send executable content and initiating network communications.

When a file subject to behavior based detection by an endpoint computer contains a zero day threat the endpoint computer can detect the threat using the behavior based analysis as described above and adjudicate the file as being malicious. More specifically a file can be adjudicated as containing a zero day threat in response to the file attempting one or more actions for example a specific combination of actions indicative of maliciousness when the file runs on the endpoint computer. In some embodiments different actions indicative of maliciousness can be assigned different weights and a file can be adjudicated as containing a zero day threat after exceeding a given suspiciousness threshold as a result of attempting specific weighted actions when running on the endpoint computer. Once a file is adjudicated as being a zero day threat the endpoint computer automatically generates a signature identifying the zero day threat. The endpoint computer can programmatically generate the signature without human input or authoring based on e.g. at least one action taken by the file and or content of the file for example by creating an MD5 or other hash of the zero day threat.

Whenever any endpoint computer in the private network generates a signature identifying a zero day threat the endpoint computer transmits the signature to the gateway device in real time. Thus the gateway device receives signatures identifying multiple zero day threats from multiple ones of the endpoint computers in the private network. Each received signature identifying a zero day threat is added to the collection of signatures identifying malware maintained by the gateway device. Subsequently to adding a given received signature identifying a given zero day threat to the plurality of signatures maintained by the gateway device inbound network traffic is scanned for the given received signature. The gateway device can thereby detect files containing the given zero day threat in the inbound network traffic and block the detected files containing the given zero day threat from being routed to any endpoint computer in the private network.

The features and advantages described in this summary and in the following detailed description are not all inclusive and particularly many additional features and advantages will be apparent to one of ordinary skill in the relevant art in view of the drawings specification and claims hereof. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter resort to the claims being necessary to determine such inventive subject matter.

The Figures depict various embodiments for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

The illustrated private network comprises multiple clients A B and N as well as multiple servers A and N. Although illustrates three clients and two servers as an example in practice many more or fewer clients and or servers can be deployed in the private network . The endpoint computers present in the private network can comprise any combination of desktop computers and or mobile computing devices acting in the capacity of clients and or servers as desired.

In a gateway component of the zero day threat management system is illustrated as residing on the gateway device . As used herein a gateway device means a component such as a router or proxy server that routes traffic between networks . In the illustrated example inbound and outbound network traffic to and from the private network is routed by the gateway device . further illustrates an endpoint component of the zero day threat management system residing on each client and on each server in the private network . It is to be understood that this is an example only and in various embodiments various functionalities of the zero day threat management system can be instantiated on other types of computing devices and be distributed between multiple computing devices e.g. network appliances clients and or servers .

Clients and servers can be implemented using computer systems such as the one illustrated in and described below. The clients and servers are communicatively coupled to the private network for example via a network interface or modem as described below in conjunction with . All communication between the computers in the private network and computers outside of the private network e.g. webservers in the public network e.g. Internet computers in other enterprise level networks etc. passes through the gateway . Although the gateway is illustrated as a single entity in some embodiments the gateway can be implemented using multiple hardware components.

Clients are able to access applications and or data on servers using for example a web browser or other client software not shown . Clients can be in the form of desktop computers laptop computers or mobile computing devices comprising portable computer systems capable of connecting to a network and running applications. Such mobile computing devices are sometimes referred to as smartphones although some mobile phones not so designated also have these capabilities. Tablet computers laptop computers hybrids convertible laptops smart watches and other types of wearable computing devices are all examples of mobile computing devices.

As illustrated one component of the computer system is a bus . The bus communicatively couples other components of the computer system such as at least one processor system memory e.g. random access memory RAM read only memory ROM flash memory an input output I O controller an audio output interface communicatively coupled to an audio output device such as a speaker a display adapter communicatively coupled to a video output device such as a display screen one or more interfaces such as Universal Serial Bus USB receptacles serial ports parallel ports not illustrated etc. a keyboard controller communicatively coupled to a keyboard a storage interface communicatively coupled to one or more hard disk s or other form s of storage media a host bus adapter HBA interface card A configured to connect with a Fibre Channel FC network an HBA interface card B configured to connect to a SCSI bus an optical disk drive configured to receive an optical disk a mouse or other pointing device coupled to the bus e.g. via a USB receptacle a modem coupled to bus e.g. via a serial port and one or more wired and or wireless network interface s coupled e.g. directly to bus .

Other components not illustrated may be connected in a similar manner e.g. document scanners digital cameras printers etc. . Conversely all of the components illustrated in need not be present e.g. smartphones and tablets typically do not have optical disk drives external keyboards or external pointing devices although various external components can be coupled to mobile computing devices via e.g. USB receptacles . The various components can be interconnected in different ways from that shown in .

The bus allows data communication between the processor and system memory which as noted above may include ROM and or flash memory as well as RAM. The RAM is typically the main memory into which the operating system and application programs are loaded. The ROM and or flash memory can contain among other code the Basic Input Output system BIOS which controls certain basic hardware operations. Application programs can be stored on a local computer readable medium e.g. hard disk optical disk and loaded into system memory and executed by the processor . Application programs can also be loaded into system memory from a remote location i.e. a remotely located computer system for example via the network interface or modem . In the zero day threat management system is illustrated as residing in system memory . The workings of the zero day threat management system are explained in greater detail below in conjunction with .

The storage interface is coupled to one or more hard disks and or other standard storage media . The hard disk s may be a part of computer system or may be physically separate and accessed through other interface systems.

The network interface and or modem can be directly or indirectly communicatively coupled to a network such as the Internet . Such coupling can be wired or wireless.

As illustrated in the gateway component of the zero day threat management system operates in conjunction with a UTM . Although the gateway component of the zero day threat management system and UTM are illustrated as separate components in some embodiments the gateway component can be implemented as a component of a UTM whereas in other embodiments the two entities can share some functionalities. An endpoint component of the zero day threat management system operates on each endpoint computer in the private network .

Returning now to the operation of a zero day threat management system is described according to some embodiments. The scanning module of the gateway component of the zero day threat management system runs on the gateway device and scans inbound network traffic for malware signatures of known malware. The signature maintaining module of the gateway component of the zero day threat management system can maintain a database or other storage mechanism of known malware signatures on the gateway device . The scanning module uses these signatures to scan files in the inbound network traffic originating from outside the private network e.g. from the Internet as illustrated or from another private or public network not illustrated . However this can have a significant negative impact on performance by slowing down network throughput and creating a bottleneck. In some embodiments some of the inbound network traffic is not scanned for example files originating from trusted domains or trusted individual users. Which specific files in the inbound network traffic to scan varies between embodiments. In one embodiment the scanning module scans all inbound traffic.

This scanning functionality detects known threats for which a signature has already been created and distributed to the gateway device . The blocking module of the gateway component of the zero day threat management system blocks these known threats at the gateway before they can infect any of the endpoint computers . However any viruses or other threats for which a signature does not yet exist cannot be detected by scanning the inbound network traffic and thus are not blocked at the gateway . As noted above and explained in more detail below it is not practicable to perform behavior based malware detection at the gateway device so any zero day threats or other unknown malware are not detected by the UTM or gateway component of the zero day threat management system . Therefore the routing module of the gateway component of the zero day threat management system routes them to the target endpoint computers in the private network in the course of normal routing of unblocked inbound network traffic.

On each endpoint computer in the private network the receiving module of the endpoint component of the zero day threat management system receives non blocked files that are routed to the specific endpoint computer . As noted above in some embodiments select inbound network traffic is trusted at a gateway level for example files from sources on a whitelist of trusted domains. Such files are in effect adjudicated as being benign at the gateway level. However files that reach a given endpoint without having been specifically adjudicated as benign by the gateway component of the zero day threat management system are subject to behavior based testing at the endpoint . In some embodiments no incoming files are whitelisted at a gateway level and thus there are no exemptions from endpoint level behavior based analysis. Regardless when a runnable file e.g. a computer program in the form of an executable image script late binding object or other format that can be executed or interpreted in order to cause the computer to perform instructions reaches a given endpoint computer in the private network the behavior based detecting module of the corresponding endpoint component of the zero day threat management system can use behavior based detection techniques to determine whether the file is malicious or benign.

More specifically the file running module of the endpoint component of the zero day threat management system allows the file to run in a controlled manner on the endpoint so that it can be monitored. In some embodiments the file is run in a sandbox which provides tightly controlled access to the endpoint s resources such that the running program is given restricted or no access to non virtualized critical resources on the endpoint . As described in more detail below while the program runs system calls e.g. operating system native APIs to perform actions of interest are intercepted or otherwise filtered. When attempts to execute malicious behaviors are detected the actions are noted and the attempts can be blocked and or the execution of the program can be terminated.

The behavior monitoring module of the endpoint component of the zero day threat management system monitors the behavior of the running file in real time to determine whether it attempts certain behaviors or combinations of behaviors considered indicative of maliciousness. The behavior monitoring module intercepts or otherwise filters the system calls that can perform specific actions indicative of maliciousness and monitors what the program is attempting to do. Which specific behaviors are considered indicative of a file being malware can vary between embodiments but examples include actions such as opening viewing deleting and or modifying system or other sensitive files formatting disk drives or executing other unrecoverable disk operations making modifications to the logic of executable files scripts or macros modifying start up or other critical system settings scripting of e mail or instant messaging clients to send executable content and initiating network communications.

Based on the behavior of the file when it runs the adjudicating module of the endpoint component of the zero day threat management system adjudicates the file as being malicious or benign. In some embodiments attempting a specific action or combination of actions results in the file being adjudicated as malware. In some embodiments different actions can be weighted differently and a file that exceeds a given suspiciousness threshold based on its actions is adjudicated as being malicious. The specific value to use as a threshold is a variable design parameter. In any case behavior based detection is used to detect zero day threats at an endpoint level.

It is to be understood that it is not practicable for the UTM or the gateway component of the zero day threat management system to utilize the above described techniques to apply behavior based detection to files in inbound network traffic at the gateway level for a number of reasons. Using behavior based techniques to determine whether a program is malicious or benign involves actually running the program and monitoring its behavior. The gateway device frequently does not have the same operating system as some or all of the target endpoint computers in the private network . For example many current gateway devices on which UTMs are deployed are based on versions of Linux or UNIX whereas endpoint computers in a private network often run a variety of other operating systems such as Windows MAC OS Android iOS etc. For example suppose the gateway device is Linux based and the incoming network traffic includes a file in the Portable Executable PE format which is the Windows file format for executable content e.g. executable images object code DLLs etc. . In order to monitor and analyze the behavior of the PE file to determine whether or not it is malicious the PE file has to be run under Windows with the Windows specific system calls e.g. Windows Native API that perform the behaviors to be monitored being hooked or otherwise filtered. Yet in this example the gateway device is a Linux environment not a Windows based computer . It is to be understood that a Linux based gateway device and a PE file targeted to a Windows based endpoint computer is only one example of an incompatibility between the operating systems of the gateway and endpoints targeted by the incoming files . For example the gateway could be based on e.g. Windows NT and the incoming network traffic could include files in the Executable and Linkable Format ELF format used by Linux targeted to Linux based endpoint computers or files in the Mach Object Mach O file format could be targeted to MAC OS based endpoints . The point is that the gateway device runs a single operating system and endpoint point computers in the private network can run one or more different operating systems making it unfeasible to run incoming executable files at the gateway . Even if files in different operating system formats were to be run and monitored at the gateway e.g. in a plurality of emulators this would utilize a great deal of computing resources at the gateway causing a serious degradation of performance and creating a very significant bottleneck.

Once the adjudicating module determines that a specific file comprises malware e.g. a zero day threat the signature generating module of the endpoint component of the zero day threat management system automatically generates a signature identifying the malware. The signature is created programmatically without human input or authoring based on the content of the malicious file and or its source and or actions that it took. The signature can include identifying information such as the file s MD5 or other hash or checksum the malicious payload s regular expression the source IP address TCP and or UDP ports utilized etc. The specific content of the signature can vary based on the nature of the detected malware as well as between embodiments.

When the signature generating module generates a signature for a newly identified e.g. zero day threat the signature transmitting module of the endpoint component of the zero day threat management system transmits the signature from the endpoint computer to the gateway component of the zero day threat management system on the gateway device in real time. Thus whenever any endpoint computer in the private network detects a new zero day threat using behavior based detection the endpoint immediately generates a signature for the newly identified malware and shares the signature in real time with the security layer e.g. the UTM and gateway component of the zero day threat management system at the gateway level. As described below the UTM and gateway component can subsequently detect any additional transmissions of the zero day threat in the inbound network traffic by scanning for the signature . This allows the zero day threat to be blocked at the gateway after having been identified by a single endpoint within the private network .

More specifically the signature receiving module of the gateway component of the zero day threat management system receives signatures of zero day threats generated by the plurality of endpoint computers in the private network . The signature adding module of the gateway component of the zero day threat management system adds the newly received signatures to the signature database or other storage mechanism at the gateway level. The scanning module now scans files in the inbound network traffic for the new signature and therefore subsequently detects any additional instances of the zero day threat targeted to endpoint computers in the private network . In other words because the signature of the zero day threat is now in the signature database the zero day threat is detected at the gateway by the gateway level scanning module . The blocking module at the gateway level thus blocks the zero day threat from entering the private network .

The zero day threat management system thus provides detect once block many functionality for zero day threats in which a threat that is detected by behavior based analysis a single time on any endpoint anywhere in the private network is from that moment forward detected and blocked using signature based scanning at the gateway . Because the gateway component of the zero day threat management system receives and deploys all signatures generated by endpoints anywhere in private network the security functionality at the gateway can detect and block zero day threats which conventionally can only be detected by endpoint level behavior based analysis. The zero day threat management system can prevent transmission of the zero day threat at a gateway level and thus protect the whole private network whereas conventional gateway level security cannot protect against zero day threats at all and conventional endpoint security can only protect a single computer . Thus the zero day threat management system creates significant improvements to the functioning of both the gateway device and the endpoint computers .

As will be understood by those familiar with the art the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the portions modules agents managers components functions procedures actions layers features attributes methodologies data structures and other aspects are not mandatory or significant and the mechanisms that implement the invention or its features may have different names divisions and or formats. The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or limiting to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain relevant principles and their practical applications to thereby enable others skilled in the art to best utilize various embodiments with or without various modifications as may be suited to the particular use contemplated.

