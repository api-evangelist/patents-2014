---

title: Data processing apparatus, transmitting apparatus, transmission control method, scheduling method, and computer product
abstract: A data processing apparatus includes a processor configured to receive an interrupt request that is a trigger for execution of an interrupt process executed by the processor; store the received interrupt request to a recording area; calculate based on a time when the interrupt request is received and particular time information read from the recording area, a predicted time when a subsequent interrupt request is to be received; detect a thread to be executed by the processor, among executable threads of the processor; judge based on the calculated predicted time and a current time, whether there is a possibility of the interrupt process being executed while the detected thread is under execution; decide based on a judgment result, whether to execute the detected thread on the processor; and execute the detected thread on the processor, based on a decision result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274827&OS=09274827&RS=09274827
owner: FUJITSU LIMITED
number: 09274827
owner_city: Kawasaki
owner_country: JP
publication_date: 20140626
---
This application is a continuation application of International Application PCT JP2011 080510 filed on Dec. 28 2011 and designating the U.S. the entire contents of which are incorporated herein by reference.

The embodiments discussed herein are related to a data processing apparatus a transmitting apparatus a transmission control method a scheduling method and a computer product.

Recently multi programming technologies are present that cause multiple programs to run on a single central processing unit CPU . Specifically an operating system OS has a function of dividing the processing period of the CPU. Threads are assigned to the resulting sub periods whereby the CPU runs the multiple threads. A program is executed in units of threads.

For example according to a related technology an electronic device has a normal mode and an energy saving mode as operation modes and switches the operation modes with consideration of the power consumed for a transition process and a recovery process to switch the operation mode for example refer to Japanese Laid Open Patent Publication No. 2006 72991 .

Nonetheless with the conventional technologies above the bus becomes occupied when a thread that frequently performs data transmission to memory is executed. Here even if a CPU receives an interrupt request and attempts to cause another CPU to execute an interrupt process the CPU cannot cause the other CPU to execute the interrupt process until the bus is released causing response performance to drop. Further when a thread that frequently issues an interrupt prohibit instruction is executed the interrupt process cannot be executed causing the response performance to drop.

According to an aspect of an embodiment a data processing apparatus includes a processor configured to receive an interrupt request that is a trigger for execution of an interrupt process executed by the processor store the received interrupt request to a recording area calculate based on a time when the interrupt request is received and particular time information read from the recording area a predicted time when a subsequent interrupt request is to be received detect a thread to be executed by the processor among executable threads of the processor judge based on the calculated predicted time and a current time whether there is a possibility of the interrupt process being executed while the detected thread is under execution decide based on a judgment result whether to execute the detected thread on the processor and execute the detected thread on the processor based on a decision result.

The object and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the claims.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention.

Embodiments of a data processing apparatus a transmitting apparatus a transmission control method a scheduling method and a computer product will be described in detail with reference to the accompanying drawings.

Hereinafter a thread that frequently accesses the bus will be called a bus occupying thread . Similarly a thread that frequently issues an interrupt prohibit instruction will be called an interrupt prohibiting thread. A method of judging whether bus access interrupt prohibit instruction issuance is frequent will be described with reference to .

Here improved response performance by prompt execution of the interrupt process by the data processing apparatus according to the present embodiment is assumed as an object. As common settings in A and B of an interrupt request is issued at times t0 and t1 respectively and the CPU 0 executes the interrupt process in response to the interrupt request. When the interrupt request is received at time t1 the CPU 0 calculates time t3 as a predicted time when the next interrupt request will be issued. A of depicts the execution state of a thread in a case where the interrupt inhibiting cause has not been excluded and B depicts the execution state of the thread in a case where the interrupt inhibiting cause has been excluded.

In A of when the timing of thread switching arrives at time t2 the CPU 0 executes an interrupt process inhibiting thread among threads stored to an executable queue. The executable queue is a queue that stores threads that are in an executable state. If an interrupt request is issued at time t3 the execution of the interrupt process is delayed by the interrupt process inhibiting thread causing the response performance to drop.

In B of when the timing of thread switching arrives at time t2 the CPU 0 judges from time t3 predicted time and time t2 current time whether there is a possibility of the interrupt process being executed while the interrupt process inhibiting thread which is scheduled for execution is under execution. In the example depicted in the CPU 0 judges that the possibility exists and without executing the interrupt process inhibiting thread executes another thread. As a result at time t3 even if an interrupt request is issued the interrupt process can be executed promptly to improve the response performance.

Thus the data processing apparatus obtains the predicted time when an interrupt request will next occur and when executing a thread if the current time is near the predicted time the data processing apparatus does not execute the thread. As a result the data processing apparatus can improve the response performance since the interrupt process for an interrupt request is not inhibited.

The CPUs govern overall control of the data processing apparatus . The CPUs include the CPU 0 to CPU n where n is an integer of 0 or greater. The CPUs may have dedicated cache memory. The data processing apparatus may be a multi core processor system having multiple cores. A multi core processor system is a computer system that includes a processor equipped with cores in plural. Provided that the cores are equipped in plural the cores may be provided as a single processor equipped with multiple cores or a group of single core processors connected in parallel. In the present embodiment description will be given taking an example where CPUs that are single core processors are connected in parallel.

The interrupt controller receives an interrupt signal from hardware such as the display the keyboard etc. and gives notification to any one of the CPUs . The ROM stores programs such as a boot program. The RAM is used as a work area of the CPUs . The flash ROM is flash ROM having a high read out speed and is NOR type flash memory for example. The flash ROM stores system software such as the OS and applications. For example when the OS is updated the data processing apparatus receives the new OS via the I F and updates the old OS stored in the flash ROM with the new OS received.

The flash ROM controller under the control of the CPUs controls the reading and writing of data with respect to the flash ROM . The flash ROM is flash ROM that stores data has a primary purpose of portability and may be for example NAND type flash memory. The flash ROM stores the data written thereto under the control of the flash ROM controller . Examples of the data include image data and video data obtained by the user of the data processing apparatus via the I F as well as a scheduling program and a transmission control program according to the present embodiment. A memory card SD card and the like may be adopted as the flash ROM .

The DMA controller is an apparatus that transmits data without involvement of the CPUs . For example the DMA controller transmits data from the RAM to a buffer of the display .

The display displays for example data such as text images functional information etc. in addition to a cursor icons and or tool boxes. A thin film transistor TFT liquid crystal display and the like may be employed as the display .

The I F is connected to a network such as a local area network LAN a wide area network WAN and the Internet through a communication line and is connected to other apparatuses through the network . The I F administers an internal interface with the network and controls the input and output of data with respect to external apparatuses. For example a modem or a LAN adaptor may be employed as the I F .

The keyboard includes for example keys for inputting letters numerals and various instructions and performs the input of data. Alternatively a touch panel type input pad or numeric keypad etc. may be adopted. The bus arbitration circuit arbitrates access of the bus .

Functions of the data processing apparatus will be described. is a block diagram of a functional configuration of the data processing apparatus. The data processing apparatus includes a memory unit a receiving unit a storing unit a calculating unit a detecting unit an obtaining unit a judging unit a deciding unit an executing unit a determining unit and a control unit . Functions of the receiving unit to the control unit are implemented by executing on the CPU 0 a program recorded in a memory apparatus. The memory apparatus for example is the ROM the RAM the flash ROM and the flash ROM depicted in . Although in functions of the receiving unit to the control unit are depicted as functions of the CPU 0 the functions may be of another CPU other than the CPU 0.

The data processing apparatus is configured to access the contents recorded in the memory unit such as a parameter table a thread table an interrupt information table and a CPU interrupt instruction state table . The memory unit is a memory apparatus such as the RAM the flash ROM and the flash ROM .

The parameter table records constants and thresholds used in the present embodiment. Details of the contents of the parameter table will be described with reference to . The thread table records information that indicates whether execution of the interrupt process will be inhibited. Details of the contents of the thread table will be described with reference to . The interrupt information table records information related to the interrupt process and for example records the time when an interrupt request is received and the predicted time of the next interrupt request. Details of the contents of the interrupt information table will be described with reference to . The CPU interrupt instruction state table records states that indicate whether the interrupt process can be executed. Details of the contents of the CPU interrupt instruction state table will be described with reference to .

The memory unit records information that indicates whether an executable thread inhibits execution of the interrupt process. An executable thread is a thread that is in an executable state. For example the memory unit records to each thread an identifier that indicates that the thread inhibits the interrupt process or an identifier that indicates that the thread does not inhibit the interrupt process. Further the memory unit may records for all threads that have a possibility of being executed by the data processing apparatus information that indicates whether the thread inhibits the interrupt process.

The receiving unit receives interrupt requests that are triggers for execution of the interrupt process. For example when the user manipulates the keyboard the receiving unit receives an interrupt request from the CPU connected to the interrupt controller . The processor is the CPU 0 for example. The function of the receiving unit enables the data processing apparatus to discriminate triggers causing execution of the interrupt process. Received information is recorded to a recording area such as in the RAM the flash ROM and the flash ROM .

The storing unit stores to a recording area the time at which an interrupt request is received by the receiving unit . For example if an interrupt request is received by the receiving unit at 12 00 10 the storing unit records 12 00 10. Operation of the storing unit enables the data processing apparatus to refer to the times at which past interrupt requests were received.

If the CPU has received an interrupt request the calculating unit calculates a predicted time at which the next interrupt request is to be received based on the time at which the interrupt request was received and particular time information read out from a recording area. The particular time information may be for example a given period the time at which the previous interrupt request was received or an interval at which past interrupt requests were received.

As a calculation method of the predicted time the calculating unit may add a given period to the time at which an interrupt request is received and regard the resulting time as the predicted time for example. Further for example the calculating unit may add to the time at which an interrupt request is received the difference of the time at which the interrupt request is received and the time recorded to a recording area by the storing unit as the time at which the previous interrupt request was received and regard the resulting time as the predicted time. Further the calculating unit may add to the time at which an interrupt request is received the average of the interval at which past interrupt requests were received and the difference of the time at which the interrupt request is received and the time recorded to a recording area by the storing unit as the time at which the previous interrupt request was received. Concerning the average the calculating unit may obtain a weighted average by using as a weight a count of the interrupt requests received at the interval at which past interrupt requests were received.

For example 12 00 10 is stored in a recording area as the time at which an interrupt request was received and an interrupt request is received at 12 00 20. In this case the calculating unit calculates the predicted time as 12 00 20 12 00 20 12 00 10 12 00 30. Operation of the calculating unit enables the data processing apparatus to predict an occurrence time at which an interrupt request is to occur next. The calculated predicted time is recorded to a recording area such as in the RAM the flash ROM and the flash ROM .

The detecting unit detects a thread to be executed by the CPU among executable threads at the CPU. For example the detecting unit detects a bus occupying thread. When multiple CPUs are present the detecting unit may detect a thread to be executed by any one of the CPUs. For example among the CPU 0 to the CPU n the detecting unit detects a thread to be executed by the CPU 0.

The function of the detecting unit enables the data processing apparatus obtain a timing to detect whether there is a possibility of the interrupt process being inhibited. Identification information a pointer etc. of a detected thread is recorded to a recording area such as in the RAM the flash ROM and the flash ROM .

The obtaining unit obtains an access count of the number of times that the CPU accesses the bus consequent to the execution of an executable thread. As a method of obtaining the access count of the bus for example the bus arbitration circuit may count the number of accesses and when multiple CPUs access the bus the bus arbitration circuit may count the number of accesses passing through the bus from an access source address. Further the obtaining unit obtains an interrupt prohibit instruction execution count of the number of interrupt prohibit instructions executed by the CPU consequent to the execution of an executable thread. For example the obtaining unit obtains an execution count of interrupt prohibit instructions counted by the CPU 0. Obtained information is recorded to a recording area such as in the RAM the flash ROM and the flash ROM .

If a thread has been detected by the detecting unit the judging unit judges based on the predicted time calculated by the calculating unit and the current time whether there is a possibility of the interrupt process being executed while the detected thread is under execution.

For example the judging unit judges that there is a possibility of the interrupt process being executed while the detected thread is under execution when the current time is between a time that is the predicted time less a threshold and a time that is the predicted time plus the threshold. Further the judging unit may judge that there is a possibility of the interrupt process being executed while the detected thread is under operation when a time that is the predicted time plus the time of the time slice when the thread is switched is between a time that is the predicted time less the threshold and a time that is the predicted time plus the threshold.

For example the calculating unit is assumed to have calculated the predicted time as 12 00 20 the detecting unit is assumed to detect a bus occupying thread at 12 00 19.5 and the threshold is assumed to be 0.5 second . In this case the judging unit judges that there is a possibility of the interrupt process being executed while the detected thread is under execution because 12 00 20 0.5 12 00 19.5.

The judging unit may refer to information that is recorded in the memory unit and indicates whether a thread inhibits execution of the interrupt process to judge whether the detected thread will inhibit execution of the interrupt process. For example when an identifier that indicates inhibition of execution of the interrupt process is recorded for the detected thread the judging unit judges that execution of the interrupt process will be inhibited.

The judging unit may judge whether the detected thread will inhibit execution of the interrupt process based on the access count obtained by the obtaining unit . For example when the obtained access count is greater than or equal to a threshold the judging unit judges that execution of the interrupt process will be inhibited. If configuration is such that the obtaining unit obtains the access count for unit time periods and calculates an average access count when an access count that exceeds the average is obtained the judging unit judges that the detected thread will inhibit execution of the interrupt process.

The judging unit may judge whether the detected thread will inhibit execution of the interrupt process based on the interrupt prohibit instruction execution count obtained by the obtaining unit . For example if the obtained interrupt prohibit instruction execution count is greater than or equal to a threshold the judging unit may judge that execution of the interrupt process will be inhibited. Here the threshold is a value specified by the designer or user of the data processing apparatus for example. Alternatively the obtaining unit obtains the interrupt prohibit instruction execution count for unit time periods and calculates an average interrupt prohibit instruction execution count. Subsequently when an interrupt prohibit instruction execution count that exceeds the average is obtained the judging unit may judge that the detected thread will inhibit execution of the interrupt process.

Operation of the judging unit enables the data processing apparatus to judge whether to execute a detected thread. Judgment results are recorded to a recording area such as in the RAM the flash ROM and the flash ROM .

The deciding unit decides whether to execute the detected thread on the CPU based on the judgment results of the judging unit . For example if the judging unit has judged that there is no possibility of the interrupt process being executed while the detected thread is under execution the deciding unit decides to execute the detected thread on the CPU. If the judging unit has judged that there is a possibility of the interrupt process being executed while the detected thread is under execution the deciding unit decides to not execute the detected thread on the CPU. If the judging unit judges that the detected thread will not inhibit execution of the interrupt process the deciding unit decides to execute the detected thread on the CPU.

If the judging unit judges that there is a possibility of the interrupt process being executed while the detected thread is under execution and that the detected thread will inhibit execution of the interrupt process the deciding unit may decide to not execute the detected thread on the CPU.

The judging unit is assumed to judge that there is a possibility of the interrupt process being executed while the detected thread is under execution and is further assumed to judge based on the interrupt prohibit instruction execution count that the detected thread will inhibit execution of the interrupt process. In this case the deciding unit may decide to execute the detected thread or the interrupt process on any one of the CPUs and to execute the other on another CPU.

For example the judging unit is assumed to judge that the interrupt prohibit instruction execution count of the detected thread is greater than or equal to a threshold and that execution of the interrupt process will be inhibited. In this case for example the deciding unit decides to execute the detected thread on the CPU 0 and decides to execute the interrupt process on the CPU 1. Further the deciding unit may decide to execute the detected thread on the CPU 1 and to execute the interrupt process on the CPU 0. Decision results are recorded to a recording area such as in the RAM the flash ROM and the flash ROM .

The executing unit executes the detected thread on the CPU based on the decision results of the deciding unit . For example if the deciding unit decides to execute the detected thread the executing unit executes the detected thread on the CPU 0.

If the deciding unit decides to not execute the detected thread the executing unit may execute on the CPU a thread among executable threads excluding the detected thread. As the thread the executing unit may execute a low priority thread an idle thread that does nothing etc.

The executing unit may execute the detected thread or the interrupt process on any one of the CPUs and execute the other on another CPU. For example the executing unit executes the detected thread on the CPU 0 and executes the interrupt process on the CPU 1.

When the receiving unit receives an interrupt request the determining unit determines based on the time at which the interrupt request is received and particular time information read from a recording area a time frame when the next interrupt request is to be received. The particular time information is the same as the particular time information of the calculating unit and therefore description thereof is omitted. As a method of determining the time frame the determining unit for example as a calculation method of the predicted time may determine a period from a time that is the time at which the interrupt request is received less a given period until a time that is the time at which the interrupt request is received plus the given period to be the time frame when the next interrupt request is to be received. Further for example the determining unit may determine as the time frame a period from a time that is the time when the interrupt request is received less a difference of the time at which the interrupt request is received and a time stored in a recording area of the storing unit until a time that is the time when the interrupt request is received plus the difference.

The function of the determining unit enables the data processing apparatus to obtain a time frame when an interrupt request will next occur. Information concerning determined time frames is recorded to a recording area such as in the RAM the flash ROM and the flash ROM .

The control unit controls the transmitting apparatus such that during data transmission a divisor for dividing the data unit for transmission by the transmitting apparatus during the time frame determined by the determining unit is greater than the divisor at a time point outside the time frame. The transmitting apparatus is an apparatus that transmits data and for example is the DMA controller . For example when the DMA controller is transmitting data without dividing the data the control unit performs control such that during the determined time frame the data are divided into 2 and transmitted. The function of the control unit enables the data processing apparatus to make the data units for transmission smaller during the time frame when an interrupt request has been predicted to occur whereby the interrupt process can be easily executed.

The timer circuit is a circuit that measures the elapsed time. The timer circuit for example upon receiving a measurement start request measures the time that elapses and when a given time has elapsed issues a timer interrupt to the CPU 0.

The memory unit records the divisor for dividing data into data units for transmission. For example if no time frame during which an interrupt request is to be received from the CPU 0 has been received the memory unit records 1 as the divisor. Further the memory unit records the state of the divisor as an identifier that indicates that the divisor increases or an identifier that indicates that the divisor decreases. For example 0 is used as the identifier that indicates that the divisor increases and 1 is used as the identifier that indicates that the divisor decreases. The function of the memory unit enables the DMA controller to record the current state of the divisor.

The obtaining unit obtains from a receiving apparatus the time frame during which an interrupt request is to be received at the receiving apparatus. The receiving apparatus of the interrupt request is for example a CPU. For example the obtaining unit obtains 12 00 19.5 to 12 00 20.5 as the time frame during which an interrupt request is to be received. The obtaining unit may further obtain the predicted time when an interrupt request is to be received. For example the obtaining unit receives 12 00 20 as the predicted time. The function of the obtaining unit enables the DMA controller to obtain a time frame for dividing data into data units for transmission.

The changing unit changes the divisor during the time frame obtained by the obtaining unit to be greater than the divisor recorded in the memory unit . For example the divisor is assumed to be 1 when no time frame during which an interrupt request is to be received has been received and the obtaining unit is assumed to obtain 12 00 19.5 to 12 00 20.5 as a time frame during which an interrupt request is to be received. In this case the changing unit changes the divisor for dividing data into data units for transmission from 12 00 19.5 to 12 00 20.5 to 2. The changing unit may further change the divisor in response to completion notification from the timer circuit .

During the time frame from the start time of the time frame until the predicted time the changing unit changes the divisor to be a value greater than that before the change and during the time frame from the predicted time until the end time of the time frame the changing unit changes the divisor to be a value smaller than that before the change.

For example the start time is assumed to be 12 00 19.5 the end time is assumed to be 12 00 20.5 and the predicted time is assumed to be 12 00 20. First at 12 00 19.5 the changing unit changes the divisor to 2. Next at 12 00 19.75 the changing unit changes the divisor to 3. At 12 00 20.25 the changing unit changes the divisor to 2. Finally at 12 00 20.5 the changing unit changes the divisor to 1. Thus by the function of the changing unit the DMA controller sets a large divisor for the time when an interrupt request is predicted to occur whereby at the predicted time a release count of the number of times that the bus is released is increased and the interrupt process is easily executed.

The transmitting unit divides the data by the divisor that has been changed by the changing unit and transmits the data. For example if the divisor has been changed to 2 by the changing unit the transmitting unit divides the data unit by 2.

The interrupt prohibit instruction execution count threshold field stores 1 threshold for judging whether a thread scheduled for execution is an interrupt inhibiting cause. For example a thread that has executed an interrupt prohibit instruction a number of times that is greater than or equal to the value stored in the interrupt prohibit instruction execution count threshold field is judged to be a thread that inhibits execution of the interrupt process. The maximum divisor field stores the maximum divisor for data transmission to prevent bus occupation. The specified process non execution interval field stores a value related to a period for improving interrupt responsiveness and for judging whether a thread scheduled for execution is an interrupt inhibiting cause.

The thread table has 4 fields respectively for a thread ID the bus access count the interrupt prohibit instruction execution count and an interrupt process inhibiting thread flag. The thread ID field stores identification information of a thread that is an interrupt inhibiting cause. The bus access count field stores the number of times that a thread that is an interrupt inhibiting cause has accessed the bus . The interrupt prohibit instruction execution count field stores the number of times that a thread that is an interrupt inhibiting cause has executed an interrupt prohibit instruction.

The interrupt process inhibiting thread flag field stores an identifier that indicates whether a thread inhibits execution of the interrupt process. For example Yes is an identifier that indicates that execution of the interrupt process is inhibited and No is an identifier that indicates that execution of the interrupt process is not inhibited. If a thread for which the interrupt process inhibiting thread flag is Yes is to be executed the data processing apparatus without executing the thread transfers execution privilege to another thread. The setting of the interrupt process inhibiting thread flag may be determined by the designer at the time of design of the data processing apparatus or may be set by the user of the data processing apparatus .

For example the record indicates that for thread 0 the bus access count is cc times the interrupt prohibit instruction execution count is ee times and further indicates that thread 0 is a thread that inhibits execution of the interrupt process. For example if cc times is greater than or equal to the value aa times in the bus access count threshold field depicted in thread 0 is a bus occupying thread. Similarly the record indicates that for thread 1 the bus access count is dd times the interrupt prohibit instruction execution count is ff times and further indicates that thread 1 is a thread that does not inhibit the interrupt process. For example if ff times is greater than or equal to the value bb times of the interrupt prohibit instruction execution count threshold depicted in the thread 1 is an interrupt prohibiting thread.

The interrupt information table has 7 fields respectively for an interrupt ID a thread ID operation contents an interrupt interval a previous interrupt time a next interrupt predicted time and interrupt count within a constant period. The interrupt ID field stores identification information of the interrupt process. The thread ID field stores the thread ID that corresponds to the interrupt ID field. The operation contents field stores operation contents of the user. The interrupt interval field stores a time interval at which an interrupt request occurs. The previous interrupt time field stores the time at which the previous interrupt request occurred. The predicted time of the next interrupt field stores the predicted time at which the next interrupt request will occur. The interrupt count within a constant period field stores the number of times an interrupt request occurs within a constant period.

For example the record indicates that the interrupt process indicated by the interrupt ID int 0 belongs to thread 2 and that the operation contents performed by the interrupt process is the skipping of a track of music being played. The record further indicates that the interrupt interval is 10 seconds the previous interrupt request occurred at 12 00 10 and the predicted time of the next interrupt request is 12 00 20.

For example the record indicates that the CPU 0 is in a state that does not enable execution of the interrupt process. Further the record indicates that the CPU 1 is in a state that enables execution of the interrupt process. Similarly the record indicates that the CPU n is in a state that does not enable execution of the interrupt process.

At time t2 in A of the CPU 0 judges whether the predicted time of the next interrupt the specified process non execution interval the current time next interrupt predicted time the specified process non execution interval is true. The state depicted in satisfies the condition. Here A of depicts a case where a bus occupying thread is executed at time t2 and B of depicts a case where the bus occupying thread is not executed at time t2 based on judgment results.

In A of although an interrupt request occurs at time t3 the bus is occupied by the bus occupying thread and therefore execution of the interrupt process corresponding to the interrupt request is delayed and the response performance drops. In B of an interrupt request occurs at time t3 and the interrupt process corresponding to the interrupt request is executed at time t3 and therefore the response performance improves.

At time t2 in B of the CPU 0 judges whether the predicted time of the next interrupt the specified process non execution interval the current time next interrupt predicted time the specified process non execution interval is true. The state depicted in satisfies the condition. Here A of depicts a case where the data unit of the DMA controller is not divided and B of depicts a case where the data unit of the DMA controller is divided based on judgment results.

In A of although an interrupt request occurs at time t3 the bus is occupied by the DMA controller and therefore execution of the interrupt process corresponding to the interrupt request is delayed and the response performance drops. In B of an interrupt request occurs at time t3 and since the DMA controller is not occupying the bus the interrupt process corresponding to the interrupt request is executed at time t3 whereby the response performance improves.

At time t2 in A of the CPU 0 judges whether the predicted time of the next interrupt the specified process non execution interval the current time next interrupt predicted time the specified process non execution interval is true. A of depicts a case where the interrupt process and the interrupt prohibiting thread are executed on the same CPU and B of depicts a case where the interrupt process and the interrupt prohibiting thread are executed on different CPUs based on judgment results.

In A of although an interrupt request occurs at time t3 an interrupt prohibit instruction is being executed and therefore the interrupt process corresponding to the interrupt request is delayed and the response performance drops. In B of although the CPU 0 is executing the interrupt prohibiting thread at the time t3 since the interrupt prohibit instruction is not being executed by the CPU 1 CPU 1 executes the interrupt process corresponding to the interrupt request whereby the response performance improves.

The CPU 0 further calculates the predicted time of the next interrupt by Equation 2 . next interrupt predicted time current occurrence time interrupt interval 2 

The CPU 0 without calculating Equation 1 the first time an interrupt request occurs stores 0 into the interrupt interval field stores the first occurrence time of the interrupt request into the previous interrupt time field and stores 1 into the interrupt count within a constant period field. For example if an interrupt request occurs at 12 00 00 while music is being played the CPU 0 stores 12 00 00 into the previous interrupt time field.

Next as indicated in A of the interrupt request is assumed to occur at 12 00 10. Here the CPU 0 uses Equation 1 to calculate the interrupt interval. interrupt interval 0 1 1 12 00 10 12 00 00 1 interrupt interval 10 1 10 second 

Therefore the CPU 0 stores 10 into the interrupt interval field stores the second occurrence time of the interrupt request into the previous interrupt time field and increments by 1 and stores 2 into the interrupt count within a constant period field. The CPU 0 further calculates the predicted time of the next interrupt by Equation 2 as indicated below. next interrupt predicted time 12 00 10 10 next interrupt predicted time 12 00 20

Therefore the CPU 0 stores 12 00 20 into the predicted time of the next interrupt field. In B of from the state depicted in A of the interrupt request is assumed to occur at 12 00 15. Here the CPU 0 uses Equation 1 calculate the interrupt interval. interrupt interval 10 2 1 12 00 15 12 00 10 2 interrupt interval 10 5 2 7.5 second 

Therefore the CPU 0 stores 7.5 into the interrupt interval field stores the third occurrence time of the interrupt request into the previous interrupt time field and increments by 1 and stores 3 into the interrupt count within a constant period field. The CPU 0 further calculates the predicted time of the next interrupt by Equation 2 as indicated below. next interrupt predicted time 12 00 15 7.5 next interrupt predicted time 12 00 22.5

Therefore the CPU 0 stores 12 00 22.5 into the predicted time of the next interrupt. In C of from the state depicted in B of the interrupt request is assumed to occur at 12 00 30. Here the CPU 0 uses Equation 1 to calculate the interrupt interval. interrupt interval 7.5 3 1 12 00 30 12 00 15 3 interrupt interval 15 15 3 10 second 

Therefore the CPU 0 stores 10 into the interrupt interval field stores the fourth occurrence time of the interrupt request into the previous interrupt time field and increments by 1 and stores 4 into the interrupt count within a constant period field. The CPU 0 further calculates the predicted time of the next interrupt by Equation 2 as indicated below. next interrupt predicted time 12 00 30 10 next interrupt predicted time 12 00 40

Therefore the CPU 0 stores 12 00 40 into the predicted time of the next interrupt. Thus the CPU 0 uses past interrupt occurrence times to calculate the predicted time of the next interrupt occurrence. Next an example of data transmission division will be described.

At time t0 if the condition the predicted time of the next interrupt the specified process non execution interval the current time next interrupt predicted time the specified process non execution interval is satisfied the CPU 0 sends to the DMA controller a setting request for a setting to a division mode of a data transmission mode. Having received the setting request the DMA controller performs the data transmission by dividing the data by 2.

The DMA controller divides the time from time t0 until the predicted time by the maximum divisor 1 and increases the divisor stepwise. In the example depicted in the time from time t0 until the predicted time is assumed to be divided by 3 where an elapse of of the time from time t0 is at t1 and an elapse of of the time is at t2. Further the DMA controller is assumed to regard the elapse of of the time after the predicted time to be at t3 an elapse of of the time to be at t4 and the elapse of the specified process non execution interval from predicted time to be at t5.

At time t0 the DMA controller sets the divisor to 2. As a result from time t0 until time t1 the DMA controller performs data transmission by dividing the data by 2. At time t1 the DMA controller sets the divisor to 3. As a result from time t1 until time t2 the DMA controller performs data transmission by dividing the data by 3. At time t2 the DMA controller sets the divisor to 4. As a result from time t2 until time t3 the DMA controller performs data transmission by dividing the data by 4.

At time t3 the DMA controller sets the divisor to 3. As a result from time t3 until time t4 the DMA controller performs data transmission by dividing the data by 3. At time t4 the DMA controller sets the divisor to 2. As a result from time t4 until time t5 the DMA controller performs data transmission by dividing the data by 2.

Thus by setting the divisor at the predicted time to be the greatest value the data processing apparatus can increase the divisor near the predicted time when an interrupt request is most likely to occur to easily respond to the interrupt request. In flowcharts of a procedure of an exclusion process for interrupt process inhibition will be described.

The CPU 0 checks whether an event has been received step S . If no event has been received step S no event the CPU 0 transitions to the operation at step S after the elapse of a given period. If thread switching event has been received the CPU 0 executes a process at thread switching step S and returns to the operation at step S. Details of the process at thread switching will be described with reference to .

If an interrupt prohibit instruction execution start event has been received step S interrupt prohibit instruction execution start the CPU 0 updates 1 in the state type field of the CPU interrupt instruction state table for the CPU 0 to 0 step S and transitions to the operation at step S.

If an interrupt prohibit instruction execution end event has been received step S interrupt prohibit instruction execution end the CPU 0 updates 0 in the state type field of the CPU interrupt instruction state table for the CPU 0 to 1 step S and transitions to the operation at step S. Detection methods for an interrupt prohibit instruction execution start and an interrupt prohibit instruction execution end can be performed by the OS since the thread call an interrupt prohibit instruction in the Application Programming Interface API .

If a timer interrupt event has been received step S timer interrupt the CPU 0 sends to the DMA controller a setting request for setting to a normal mode of the data transmission mode step S and transitions to the operation at step S. A timer interrupt sent by the timer circuit .

If an interrupt request event has been received step S interrupt request the CPU 0 stores into the interrupt information table the time at which the interrupt request is received step S . The CPU 0 executes an interrupt process corresponding to the interrupt request step S and transitions to the operation at step S.

If a thread execution completion event has been received step S thread execution completion the CPU 0 executes a process at thread execution completion step S and transitions to the operation at step S. Thus by executing the exclusion process for the interrupt inhibiting cause depicted in the data processing apparatus can execute a process that corresponds to each event.

The CPU 0 judges whether the predicted time of the next interrupt less the specified process non execution interval the current time next interrupt predicted time the specified process non execution interval is satisfied step S . If the condition is satisfied step S YES the CPU 0 judges whether the interrupt process inhibiting thread flag field of the execution scheduled thread is YES or if the bus access count is greater than or equal to the bus access count threshold step S .

If the interrupt process inhibiting thread flag field is YES or if the bus access count is greater than or equal to the bus access count threshold step S YES the CPU 0 transfers the execution privilege to the next thread in the executable queue step S and transitions to the operation at step S. Consequent to the execution of the operation at step S the execution scheduled thread becomes the next thread in the executable queue.

If the interrupt process inhibiting thread flag field is NO and the bus access count is less than the bus access count threshold step S NO the CPU 0 judges if the interrupt prohibit instruction execution count of the execution scheduled thread is greater than or equal to the interrupt prohibit instruction execution count threshold step S . If the interrupt prohibit instruction execution count is greater than or equal to the interrupt prohibit instruction execution count threshold step S YES the CPU 0 transfers the interrupt process to a CPU whose state type field is 1 among the CPUs other than the CPU that is to execute the execution scheduled thread step S .

After the completion of step S or if the interrupt prohibit instruction execution count is less than the interrupt prohibit instruction execution count threshold step S NO the CPU 0 judges whether the data transmission mode of the DMA controller has been switched to the division mode step S . If not step S NO the CPU 0 sends to the DMA controller a setting request for setting to the division mode of the data transmission mode step S . Subsequently the CPU 0 sends a measurement start request to the timer circuit step S .

Upon completion of the operation at step S or if the condition at step S is not satisfied step S NO or if switching to the division mode has been completed step S YES the CPU 0 executes the execution scheduled thread step S and ends the process at thread switching. Thus execution of the process at thread switching depicted in enables the data processing apparatus to exclude inhibiting causes and to expedite execution of an interrupt process corresponding to an interrupt request for an inhibiting thread.

The CPU 0 judges whether a thread whose execution is to be completed is a thread that is registered in the interrupt information table step S . If so step S YES the CPU 0 calculates the predicted time of the next interrupt step S . More specifically the CPU 0 calculates Equations 1 and 2 as the operation at step S. The CPU 0 sends to the DMA controller a setting request for setting to the normal mode of the data transmission mode step S and ends the process at thread execution completion.

If the thread is not a thread that is registered in the interrupt information table step S NO the CPU 0 updates the interrupt prohibit instruction execution count field of the thread table step S . The CPU 0 notifies the bus arbitration circuit to register the bus access count of the thread table step S and ends the process at thread execution completion. The bus arbitration circuit having received the notification updates the bus access count of the thread table .

Thus execution of the process at thread execution completion depicted in enables the data processing apparatus to update the predicted time of the next interrupt the interrupt prohibit instruction count and the bus access count with respect to a thread whose execution has been completed.

If the period has elapsed step S YES the timer circuit notifies the CPU 0 of a timer interrupt step S and transitions to the operation at step S. By the operation at step S the CPU 0 executes step S timer interrupt. Thus the process of the timer circuit depicted in enables the data processing apparatus to detects the time of the interrupt predicted time the specified process non execution interval.

The bus arbitration circuit increments the bus access count field of the thread that has accessed the bus step S and transitions to the operation at step S. Thus the process of the bus arbitration circuit depicted in enables the data processing apparatus to obtain a bus access count for each thread.

The DMA controller increments the divisor step S and judges whether the switching unit time has elapsed step S . If not step S NO the DMA controller again executes the operation at step S after a given period has elapsed.

If the switching unit time has elapsed step S YES the DMA controller increments the divisor step S and judges whether the divisor is less than the maximum divisor step S . If so step S YES the DMA controller transitions to the operation at step S. By the operations at steps S to S operations for the period from time t0 to t2 depicted in are executed.

If the divisor is greater than or equal to the maximum divisor step S NO the DMA controller judges whether the switching unit time has elapsed step S . Further the DMA controller sets the divisor state to 1 subsequent to the operation at step S NO. If the switching unit time has not elapsed step S NO the DMA controller again executes the operation at step S after a given period has elapsed. Consequent to the operation at step S execution of the operations for the period from time t2 until the predicted time depicted in is performed.

If the switching unit time has elapsed step S YES the DMA controller judges whether the switching unit time has elapsed step S . If not step S NO the DMA controller again executes the operation at step S after a given period has elapsed. If the switching unit time has elapsed step S YES the DMA controller increments the divisor step S .

The DMA controller judges whether the divisor is greater than 1 step S . If the divisor is greater than 1 step S YES the DMA controller transitions to the operation at step S. If the divisor is less than or equal to 1 step S NO the DMA controller transitions to the operation at step S. Further the DMA controller sets the divisor state to 0 subsequent to the operation at S NO. Consequent to the operations at steps S to S execution of the operations for the period from the predicted time until time t5 depicted in is performed.

Although not depicted in if a setting request for setting to the normal mode is received by the CPU 0 the DMA controller sets the divisor to 1 the divisor state to 0 and transitions to the operation at step S. Thus the process of the DMA controller depicted in enables the data processing apparatus to maximize the divisor near the predicted time.

The servers are management servers of a server group servers to of a cloud . The client is a notebook personal computer PC . The client is a desktop PC. The client is a mobile telephone. As a mobile telephone the client may be smartphone a personal handyphone system PHS terminal etc. The client is a tablet terminal.

The server the servers the servers to and the clients to depicted in for example as the data processing apparatus described in the embodiment executes the data processing apparatus according to the embodiment. For example at the server if a thread that executes an interrupt prohibit instruction is executed an execution of the interrupt process at the server enables the response performance to be improved.

As described according to the data processing apparatus the scheduling method and the computer product a predicted time when an interrupt request will next occur is obtained and when a thread is to be executed if the current time is near the predicted time the thread is not executed. As a result the data processing apparatus is able to improve response performance since the interrupt process is not inhibited.

Further when a thread is to be executed the data processing apparatus may refer to information that indicates whether execution of the interrupt process will be inhibited to determine whether to execute a thread. As a result if the thread does not inhibit execution of the interrupt process the data processing apparatus can continue to execute the thread even if there is a possibility of the interrupt process occurring.

When there is a possibility of the interrupt process being executed while the detected thread is under execution and the detected thread is judged to inhibit execution of the interrupt process configuration may be such that the data processing apparatus does not execute the detected thread on a CPU. As a result the data processing apparatus can improve the accuracy of judging to not execute a thread because the interrupt process will be inhibited.

The data processing apparatus may judge whether a thread will inhibit execution of the interrupt process based on the access count by the thread to the bus. As a result concerning a thread whose access count to the bus suddenly increases during execution the data processing apparatus can judge that execution of the interrupt process will be inhibited and therefore can limit the timing when the thread is not executed to when the possibility of the interrupt process being inhibited is high.

The data processing apparatus may judge whether a thread will inhibit execution of the interrupt process based on the interrupt prohibit instruction execution count of the thread. As a result concerning a thread whose interrupt prohibit instruction count suddenly increases during execution the data processing apparatus judges that execution of the interrupt process will be inhibited and therefore can limit the timing when the thread is not executed to when the possibility of the interrupt process being inhibited is high.

When execution of the interrupt process is judged to be inhibited based on the interrupt prohibit instruction execution count the data processing apparatus may use separate CPUS to execute the thread and to execute the interrupt process. As a result compared to a method of not executing the tread as a method of preventing inhibition of the interrupt process execution of the thread is possible and therefore operation according to the actual scheduling can be performed.

According to the data processing apparatus the transmitting apparatus the transmission control method and the computer product a time frame when an interrupt request will next occur is determined and during the time frame transmission data units of the DMA controller are made small. As a result during the time frame the release count of the bus increases thereby causing the execution timing of the interrupt process to be expedited and enabling the data processing apparatus to improve response performance.

The transmitting apparatus obtains the time frame when an interrupt request will next occur and the predicted time and may minimize the size of the data unit for transmission at the predicted time. As a result the release count of the bus increases near the predicted time thereby causing the execution timing of the interrupt process to be expedited and enabling the data processing apparatus to further improve response performance. During a time frame when no interrupt request is expected to be received the size of the data unit for transmission is increased whereby transmission speed increases enabling the data processing apparatus to improve processing performance.

Although a method of increasing the clock frequency of the CPU is another method of improving response performance this method consumes a lot of power. With the scheduling method and the transmission control method of the present embodiment power consumption does not become large enabling response performance to be improved while maintaining the same power consumption.

The scheduling method described in the present embodiment may be implemented by executing a prepared program on a computer such as a personal computer and a workstation. The program is stored on a non transitory computer readable recording medium such as a hard disk a flexible disk a CD ROM an MO and a DVD read out from the computer readable medium and executed by the computer. The program may be distributed through a network such as the Internet.

The DMA controller described in the present embodiment can be realized by an application specific integrated circuit ASIC such as a standard cell or a structured ASIC or a programmable logic device PLD such as a field programmable gate array FPGA . Specifically for example functional units the timer circuit to the transmitting unit of the DMA controller are defined in hardware description language HDL which is logically synthesized and applied to the ASIC the PLD etc. thereby enabling manufacture of the DMA controller .

All examples and conditional language provided herein are intended for pedagogical purposes of aiding the reader in understanding the invention and the concepts contributed by the inventor to further the art and are not to be construed as limitations to such specifically recited examples and conditions nor does the organization of such examples in the specification relate to a showing of the superiority and inferiority of the invention. Although one or more embodiments of the present invention have been described in detail it should be understood that the various changes substitutions and alterations could be made hereto without departing from the spirit and scope of the invention.

