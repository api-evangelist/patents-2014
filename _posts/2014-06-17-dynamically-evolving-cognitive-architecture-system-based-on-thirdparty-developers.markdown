---

title: Dynamically evolving cognitive architecture system based on third-party developers
abstract: A dynamically evolving cognitive architecture system based on third-party developers is described. A system forms an intent based on a user input, and creates a plan based on the intent. The plan includes a first action object that transforms a first concept object associated with the intent into a second concept object and also includes a second action object that transforms the second concept object into a third concept object associated with a goal of the intent. The first action object and the second action object are selected from multiple action objects. The system executes the plan, and outputs a value associated with the third concept object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519461&OS=09519461&RS=09519461
owner: VIV LABS, INC.
number: 09519461
owner_city: San Jose
owner_country: US
publication_date: 20140617
---
This application claims the benefit of U.S. Provisional Patent Application 61 837 354 entitled A COGNITIVE ARCHITECTURE AND MARKETPLACE FOR DYNAMICALLY EVOLVING SYSTEMS by Bastea Forte et al. filed Jun. 20 2013 U.S. Provisional Patent Application 61 888 907 entitled INTERACTIVE COMPONENTS OF A COGNITIVE ARCHITECTURE FOR DYNAMICALLY EVOLVING SYSTEMS by Bastea Forte et al. filed Oct. 9 2013 and U.S. Provisional Patent Application 61 917 541 entitled QUALITY AND MARKETPLACE MECHANISMS FOR A COGNITIVE ARCHITECTURE FOR DYNAMICALLY EVOLVING SYSTEMS by Bastea Forte et al. filed Dec. 18 2013 the entire contents of which are all incorporated herein by reference.

Some consumers and enterprises may desire functionality that is the result of combinations of services available on the World Wide Web or in the cloud. Some applications on mobile devices and or web sites offer combinations of third party services to end users so that an end user s needs may be met by a combination of many services thereby providing a unified experience that offers ease of use and highly variable functionality. Most of these software services are built with a specific purpose in mind. For example an enterprise s product manager studies a target audience formulates a set of use cases and then works with a software engineering group to code logic and implement a service for the specified use cases. The enterprise pushes the resulting code package to a server where it remains unchanged until the next software release serving up the designed functionality to its end user population.

Embodiments herein provide dynamically evolving cognitive architecture systems based on third party developers. At a minimum the system functions with two action objects and three concept objects. For example the system forms an intent based on a user input and creates a plan based on that intent. The plan includes a first action object that transforms a first concept object associated with the intent into a second concept object. The plan further includes a second action object that transforms the second concept object into a third concept object associated with a goal of the intent. The first action object and the second action object are selected from multiple action objects. The system executes the plan and outputs a value associated with the third concept object.

In a dynamically evolving cognitive architecture system based on third party developers the full functionality is not known in advance and is not designed by any one developer of the system. While some use cases are actively intended by developers of the system many other use cases are fulfilled by the system itself in response to novel user requests. In essence the system effectively writes a program to solve an end user request. The system is continually taught by the world via third party developers the system knows more than it is taught and the system learns autonomously every day by evaluating system behavior and observing usage patterns. Unlike traditionally deployed systems which are fixed in functionality a dynamically evolving cognitive architecture system based on third party developers is continually changed at runtime by a distributed set of third party developers from self interested enterprises around the globe. A third party developer is a software developer entity that is independent of the dynamically evolving cognitive architecture system independent of the end users of the dynamically evolving cognitive architecture system and independent of other third party developers.

Third party developers provide the system with many types of objects through a set of tools editors and other mechanisms. These objects include concept objects that are structural definitions representing entities in the world. These objects also include action objects which are similar to Application Programming Interfaces APIs or web service interfaces that define a set of concept object input dependencies perform some computation or transaction and return a set of zero or more resulting concept object values. These objects also include functions which define specific logic that implement an action object interface created by a self interested party and monitors which are specific types of action objects and associated functions that allow external services to keep track of the world looking for certain conditions. Once the conditions become true associated action objects are injected into the system for execution.

These objects additionally include tasks for which a third party developer specifies groupings of particular inference chains of action objects that make up an action object in a hierarchical way and data which provides instantiations of concept objects such as product catalogs business listings contact records and so forth. The objects further include linguistic data because there are many ways to interact with the system. Third party developers may add new vocabulary synonyms and linguistic structures to the system that the system maps to concept objects and action objects to support the use case where natural language input is involved. The objects additionally include dialog and dialog templates provided by third party developers which contains all output strings and logic the system requires to communicate ideas back to the end user either through visual interfaces or through eyes free interfaces and layout templates provided by third party developers which describe visually how the system presents information on a variety of devices. The objects may also include delight nuggets which are domain oriented logic that enables the system to respond to situations in a way that surprises and delights an end user providing additional information or suggestions that please and help the end user.

Third party developers provide these new concepts actions data monitors and so forth to the system in a self interested way with the intent of making available certain new capabilities with which an end user may interact. As each new capability is added to the system an end user may access the new functionality and may do more than the end user was capable of doing before. The system knows more than it is taught meaning that if a third party developer adds ten new capabilities the system will through dynamic combinations of services be able to do far more than ten new things. Given a request from an end user the system in a sense writes automatic integration code that links individual capabilities into new dynamic plans that provide value for the end user.

In an embodiment the system represents a cloud computing system that includes a first client a second client and a first server and a second server that may be provided by a hosting company. The clients and the servers communicate via a network . The first server includes components in an embodiment.

Although depicts the system with two clients two servers and one network the system may include any number of clients any number of servers and or any number of networks . The clients and the servers may each be substantially similar to the system depicted in and described below. depicts the system components residing completely on the first server but the system components may reside completely on the first server completely on the second server completely on the clients completely on another server that is not depicted in or in any combination of partially on the servers partially on the clients and partially on the other server.

One of the server components may include a concept action network . A concept action network is the schema for the present capabilities and knowledge of the system and a structured collection of known types fortified with atomic actions on those types. The concept action network organizes and facilitates the interoperating execution of Internet enabled services and may be represented as a mathematical graph with constraints defining its structure. Third party developers may interact with the concept action network by extending the concept action network with new concept objects new action objects and new implemented services. End users may interact with the concept action network to accomplish end user tasks.

An Internet enabled service is a collection of functional interfaces to data retrievals such as a local business search or querying a shopping cart nontrivial computations such as computing a symbolic integral and real world actions such as booking a reservation at a hotel or turning on a light in a smart enabled home. These functional interfaces are exposed to the public Internet via well defined interfaces using standard protocols. When depicted as a mathematical graph the concept action network consists of nodes and edges. These nodes in a concept action network include concept objects and action objects. A concept object is a model of a real world entity such as a restaurant or coupling thereof such as a reservation with a restaurant and a time. An action object is a model of an atomic unit of work that declares its external dependencies as input concept objects and produces a predetermined type of output concept object. The concept action network may catalog similar Internet enabled services under a common schema providing interoperability. The concept action network may be depicted as a well defined strongly typed mathematical graph structure that defines precisely a space of known capabilities.

The server may also include a planner component. When provided with an intent a planner produces a static plan of execution which is a collection of input signals and a goal representing the semantics of an end user s desired task or step. A plan is a directed and acyclic coupling of concept action network nodes. Being directed and acyclic ensures that the plan is executable and that every step in the plan makes progress to the goal. Plans may include multiple instances of concept action network nodes such as two distinct businesses in the case that one task includes as a component another task of finding the nearest coffee shop to the nearest movie theater. The planner also revises plans when dynamic execution deems necessary.

The server may include several registry components. A function registry maps function values to action objects. Function values bundle declarative metadata about some action implementation with an invokable endpoint. A strategy registry is a registry of selection strategies and instantiation strategies both of which are used to satisfy the cardinality constraints of action inputs without bothering the end user. Strategies are keyed off the execution context in which they apply. A dialog registry is a registry of dialog templates keyed off the execution context in which they apply and guarded by additional dynamic context triggers. A follow up registry is a registry of follow up plan intents goals used to suggest follow up actions to an end user under specific situations. Entries in the follow up registry are also keyed off the execution context in which they apply and guarded by additional dynamic context triggers. A layout registry stores third party developer layout descriptions which the system uses for rendering outputs based on concept object values to be rendered such as the example of the wine recommendation described in .

An end user data store is an end user specific storage of preferences and instrumented usage data used to store both the raw data about decisions an end user makes and official explicit preferences. A global data store is a cross user storage of default preferences and aggregate usage data that is updated in batches offline from end user specific data. A service scheduler determines the order in which services will be called for a particular action invocation. The service scheduler balances the cost and quality of each service to maximize precision and recall. A session state is the state for a specific session of execution. A short term end user memory is made up of recently completed plans and currently interrupted plans that are pending additional input.

An execution session is a place for data which is usually ephemeral which an execution engine uses. For example as a plan executes the wine recommendation example in the execution engine stores the intermediate food classification concept object values in the execution session . An end user interface is the user s view into the system and associates an end user with an execution session. The end user interface enables the end user s intent to be elicited at each step of interaction. A metrics store is a data store housing all the raw end user agnostic runtime data such as service invocation attempts successes failures latency overhead dialog selection counts and rendering overhead end user request counts and overhead and strategy selection counts and overhead etc.

The server will also include developer tools in an embodiment. Developer tools are a set of editors debuggers etc. that enable creation and updating of the data supporting the runtime environment. A modeler creates and updates concept objects such as updating primitive and structured types and action objects such as updating input output metadata schema definitions. A function editor creates and updates provider specific implementations of action objects which may involve writing some code in a sandboxed scripting language that may be partially generated and validated against action objects. A dialog editor creates and updates dialog scripts that specify output messaging and logic for various aspects of the system which in an embodiment likely involves a simple templating language with conditional code variables etc. An analytics viewer provides insight into the data stored in the metrics store and generates reports which may include things like performance time of various components over time domain distribution of end user requests and speed and success performance analytics for service providers etc. A follow up editor associates follow up goals with a contextual trigger in which the follow up goals should become active and recommended to an end user. A follow up trigger may evaluate the execution context that led to the current goal user preferences or environmental conditions. A strategy editor writes instantiation strategies and selection strategies in a sandboxed scripting language and registers those strategies with the appropriate context in which they should be triggered.

In an embodiment the server will include the execution engine that interacts with nearly all components of the dynamically evolving cognitive architecture system based on third party developers . For example the execution engine weaves together the end user intent with the planner strategy registry dialog registry end user data store function registry and session state to set up and complete tasks. The execution engine also handles interrupted tasks and resumes interruptions when more data is elicited. The execution engine is instrumented which allows the execution engine to collect dynamic data like end user preferences and the success rates of using particular services. When action object preconditions are not met the execution engine may dynamically adapt and or interactively elicit feedback from an end user in order to continue with new information. Furthermore the execution engine intelligently schedules evaluation of services within the execution order semantics. When parallel or alternative paths exist in an executable plan the execution engine dynamically determines whether to proceed along one or more paths or whether to prompt for additional end user input before proceeding. These determinations are made from a variety of sources including past result precision recall performance and both global and local user feedback.

A natural language intent interpreter provides a flexible platform for inferring intent structures from natural language queries. The natural language intent interpreter allows the consideration of multiple sources of data including but not limited to modeled vocabulary via exact and approximate language agnostic matching implicitly gathered usage data such as popularity measurement explicitly annotated training data via machine learning and contextual data for example an end user s current location. Additionally the natural language intent interpreter is dynamically reactive to both the upstream producers such as speech recognizers and downstream consumers such as planners and executors of its data.

Furthermore the natural language intent interpreter is a flexible framework for handling a deep vertical integration between the concept action network and all producers and interpreters of natural language. Also the natural language intent interpreter acts as a conduit through which for example a normally black box speech recognizer may access concept action network level usage data or relationships to function more accurately. Similarly the natural language intent interpreter leverages concept action network level information through its clients such as the planner a downstream consumer of the natural language intent interpreter to function more quickly and accurately. The planner in turn may access internal metadata from either the natural language intent interpreter itself or its upstream producers such as a speech recognizer. Speech recognition is facilitated by concept action network specific natural language models which are in turn bolstered with data generated from concept action network specific planning algorithms which are tuned and guided by dynamic execution data.

An intent is formed based on a user input block . For example and without limitation this may include the natural language intent interpreter responding to a user saying I want to buy a good bottle wine that goes well with chicken parmesan by forming an intent as a wine recommendation based on the concept object for a menu item chicken parmesan. The concept action network provides the ability to represent an end user query or task specification in a format amenable to automated reasoning and automated satisfaction servicing. The concept action network enables queries and tasks from potentially many input sources to be represented in a single mathematical structure that does not contain natural language or other potentially ambiguous constructs. Below is an example of an unambiguous intent expressed in terms of a concept action network .

The system forms intents from concept action network elements such as concept objects and action objects based on their significance to the task at hand and these objects may be instantiated with known data values that may aid in accomplishing the task. The system annotates intents as source signals and a goal the collection of which form an intent. Signals are a formalization of what user data does the user provide and a goal is likewise a formalization of what does the user want to accomplish. An intent is an unambiguous mathematical representation of these formalizations. Forming the intent may include outputting dialog that requests an additional user input. For example the system may provide dialog to ask the user if the requested wine recommendation is for a wine that the user wants to drink after the wine is ordered and subsequently delivered or if the requested wine recommendation is for a wine that the user wants to purchase from a local supplier within a short driving distance and then drink the same day. Although this example describes the natural language intent interpreter forming an intent based on a user input provided via speaking the user input may not be based on natural language and the user input may be provided via any of multiple modalities such as typed entry of text via a real or virtual keyboard or similar substitutions touch and mouse gestures speech and combinations of the above.

Given a concept action network and an intent the planner may automatically reason about the existence of a sequence of concept action network prescribed steps that may service an intent. These steps of sequences produced by planning are denoted as plans or programs for the concept action network that when executed with respect to the execution semantics satisfies the goal within an end user s intent.

A first plan is created based on an intent wherein the first plan includes a first action object that transforms a first concept object associated with the intent into a second concept object and also includes a second action object that transforms the second concept object into a third concept object associated with a goal of the intent. The first action object and the second action object are selected from multiple action objects block . By way of example and without limitation this may include the planner creating a plan based on the intent by selecting the action objects and from multiple action objects in the concept action network . The action object transforms the concept object for a specific menu item such as chicken parmesan into the concept object for a list of ingredients such as chicken cheese and tomato sauce. The action object transforms the list of ingredients concept object into the concept object for a food category such as chicken based pasta dishes. The action object transforms the food category concept object into a concept object for a wine recommendation such as a specific red wine. The concept object may include data which provides instantiations of a concept object for a specific menu item such as chicken parmesan the concept object may include data which provides instantiations of a concept object for a list of ingredients such as chicken cheese and tomato sauce and the concept object may include data which provides instantiations of a concept object for a food category such as chicken based pasta dishes. Forming the intent may associate user data in the user input with a concept object such as associating the user saying chicken parmesan with the concept object for a specific menu item such as chicken parmesan. Different third party developers may have provided each of the concept objects and and the action objects and to the concept action network because the system provides interoperability between the objects .

A second plan is optionally created based on an intent wherein the second plan includes a third action object that transforms a first concept object associated with an intent into a fourth concept object and also includes a fourth action object that transforms the fourth concept object into the third concept object associated with a goal of the intent wherein the third action object and the fourth action object are selected from multiple action objects block . In embodiments this may include the planner creating another plan based on the same intent wherein the other plan includes action objects selected from the multiple action objects in the concept action network to sequentially transform the concept object for a specific menu item such as chicken parmesan eventually into the concept object for a wine recommendation such as a specific red wine.

Given the likely case of the existence of an exponentially large number of feasible plans the planner may automatically identify the most efficient or desirable plan. The planner may optimize plans using independently configurable metrics including such as plan size and plan execution cost where cost may include notions of time actual money required to invoke a service step or fit with end user preference models. The system may determine the simplest plan given an intent. The planner efficiently enumerates the possible plans that satisfy an intent defined as includes steps that connect all signals to the given goal and selects which plan best satisfies some criteria defined as a mathematical objective function over plans. The definition of the objective function is independent of the planner . One instantiation of this objective function is simplest plan in which the planner finds the plan with the fewest number of steps.

A first plan is optionally selected for execution based on comparison of a first plan to a second plan based on an action object cost an action object quality and or a number of planned action objects block . For example and without limitation this may include the planner selecting the plan for executing the action objects and based on three planned action objects for the plan to execute the action objects and and five planned action objects for the other plan. Given the likely case of the existence of an exponentially large number of these plans the planner identifies the most efficient or desirable plan.

A first plan is executed block . By way of example and without limitation this may include the execution engine executing the plan to execute the action objects and for recommending a wine for pairing with chicken parmesan using the additional user input to identify a local supplier of the specific red wine. The execution engine may execute a plan for recommending a wine for pairing with chicken parmesan based on an input parameter of an action object mapped to a web service parameter and a web service result mapped to an output value of the corresponding action object. Executing a plan may include using a user decision a user preference and or user application contextual information to transform a concept object into another concept object. For example the system may identify a supplier of the specific red wine that is located geographically second closest to the user s current location as a favorite supplier of wine for the user based on previous purchases.

A value associated with a third concept object is output block . In embodiments this may include the system outputting the name of a specific red wine which the system outputs as a recommendation for pairing with chicken parmesan through a visual interface or through an eyes free interface. The system may select another action object from the concept action network and execute the other action object to transform the concept object associated with the goal of the intent into another concept object. For example the system may also recommend purchasing the specific red wine from a local supplier that is the third closest geographically to the user because the third closest supplier is selling the specific red wine at a lower sales price than the sales price of the specific red wine at the suppliers that are closer geographically to the user. Another third party developer may provide another action object after the system forms the intent based on the user input and before the system outputs the value associated with the third concept object as the system and the concept action network evolve dynamically without the need to stop providing services at runtime while being updated with additional service capabilities during the dynamic evolution.

Although depicts the blocks occurring in a specific order the blocks may occur in another order. In other implementations each of the blocks may also be executed in combination with other blocks and or some blocks may be divided into a different set of blocks.

An extension is a strong relationship between concept objects corresponding to the classic is a relationship in computing and philosophy. Concept objects related by extension are expected to be substitutable. For example if a restaurant extends a business a restaurant is expected to have all of the components of a business and is expected to be able to be used anywhere a business is expected. Concept objects may extend more than one other concept object as the concept action network supports multiple inheritances.

A property is a strong relationship between concept objects that corresponds to the has a or containment relation. For example a business Business has a property for its phone number PhoneNumber . Properties may represent a one to many relationship such as a business having multiple phone numbers and these properties may carry cardinality restrictions.

Action connection edges include inputs and outputs. Inputs connect concept objects such as a restaurant to action object inputs such as BookReservation. Action object inputs are models of what an action object requires in order to execute properly. Action object outputs connect corresponding action objects to the concept objects corresponding to their output type such as reservation. Outputs represent what an action object produces when it executes as expected. The precise structure of the concept action network acts as the central implementation point for many components of the system .

In some situations the system enables concept objects to be directly transformed into other concept objects without action objects. For example if a call action object needs a PhoneNumber and the planner selects a business concept object the planner separates or selects the phone number component of the business concept object and feeds the phone number component to the call action object. The resulting sequence for this part of the plan is beginning concept object concept object component action object and resulting concept object or business concept object PhoneNumber concept object Call action object and InProgressCall concept object. There are three main cases of concept object to concept object transformations without action objects property projections extensions and contextualizations. Property projections include copying or selecting once piece of an existing concept object as another concept object such as selecting a PhoneNumber concept object from a Business concept object. Extensions include treating a specific concept object as its more general form such as treating a Restaurant concept object as a Business concept object. Contextualization includes treating a general concept object as a more specific form of concept object such as assigning the role of ArrivalAirport to a generic instance of Airport. None of these transformations actually involve manipulation of data they only prescribe viewing the concept object from a different perspective. The property extension and contextualization relationships are parts of the declarative declaration of a concept object such that they are third party contributions.

A third party developer may edit these objects using conventional developer tools such as code editors or dedicated tools specifically built for editing the concept action network . Third party developers may contribute code to a versioned object storage system that optionally supports collaborative development and may allow third party developers to track versions of their code as well as fork or merge changes from one set of objects to another much as with standard revision control systems. The object representations shows possible syntax for describing a few concept objects which include primitive and structure types with optional extensions and properties. The object representations shows a sample action object including inputs input types input constraints and outputs.

An example of an element of these semantics is the evaluation of property edge. Property edges exist between concept objects and are interpreted as selective forms of data copying. The execution of a property edge involves selecting a component or piece of one concept object and copying it into another concept object. To execute a property edge between a concept object A and a concept object B the execution engine copies the component of the concept object A corresponding to the property associated with the edge from within the concept object A and instantiates the component in the slot reserved by the concept object B. The execution engine may implement these semantics as server side software. The example concept action network nodes and edges are depicted during the process of execution by the execution engine .

The execution engine implements execution of action objects via functions which are also contributed by third party developers. Functions are represented in a programming language or declarative form that enables a third party developer to fully specify how an action object is implemented in terms of data manipulations external web service calls and so on. In the case where functions are implemented in a traditional imperative or functional programming language concept action network functions may correspond to methods or functions in the programming language. Concept objects may be mapped to values within the programming language. The programming environment may also offer additional features to facilitate use of web services threading error handling and returning of output values as concept object values and indications of concept object types via metadata where resource management may be facilitated by the execution engine . In other cases function executable code may be synthesized by a declarative description of the function s operation such as the mapping of input parameters to web service parameters and the mapping of web service results to output values. Based on this declarative description the function may be run via an interpreter or compiled into executable code.

When data values are vended by multiple functions declaratively modeled hierarchical equivalence policies may analyze values pairwise to determine whether the data values are equivalent are not equivalent or are of unknown equivalence. These equivalence policies may delegate to sub policies or use a set of predefined predicates for primitive value comparisons.

During the course of execution the execution engine may annotate data sources with metadata to indicate their source. For example provenance may include an end user who entered the data the name of a service foreign keys on a remote system and the copyright data associated with a piece of information. As data flows throughout nodes during execution the execution engine tracks the provenance of the data so that the ultimate result contains representations or links to the full combined set of sources that contributed to a result. This information may be made available to an end user in some user interfaces. The system may also use the provenance data stylistically when rendering and to indicate follow up actions.

In an embodiment a preference library collects two types of preference data end user explicit and end usage implicit. An example of end user explicit data is quick completion of regular order preferences such as when an end user starts to order a sandwich and immediately seeing the autocomplete showing the exact type and condiments from previous orders such that the end user has a quick option to complete a full order as a shortcut for the same order as the order last time. Another example of end user explicit data is the recommendation of restaurants based on known food type preferences such as when an end user either tags foods that the end user likes in the interface in the same way a like button works for social networks or explicitly tells the system about specific favorite food dishes so that the system may use this information to locate restaurants serving variants of this food that are known either by menu data or mentions from reviews. End user explicit data may also include things to do recommendations such as when an end user clicks on a quick menu of options for favorite social cultural or category based things the end user likes to do and the system then uses this data to recommend a set of preference matched events local attractions or other candidate geographically relevant activities with a single click of a button. A further example of end user explicit data is travel preferences such as when the system collects all travel preference data and applies the data to relevant planning and booking such as frequent flyer information seat preferences hotel amenities such as extra pillows ocean views or rooms with entertainment systems with kids games and general such as hotels with a spa hotels on the beach on so on. This may include the system prompting the user to determine the type of trip being planned such as individual travel for which the system uses personal preferences or a family based trip such as when the kids going when it a romantic trip or when it is an adventure trip

In an embodiment end usage implicit data may include any items ever selected via a generic menu of options becoming an implicit favorite any specifically requested item categorized and assigned as a favorite within that category and any ordered item in understood categories considered a favorite such as when an end user orders pizza this data implies that the end user likes pizza. Another example of usage implicit data may be if an end user frequently reserves flights that leave in the morning hours during weekdays the system understands that the end user prefers morning flights during the week. Likewise if an end user reserves the same restaurant over and over the system assumes that the end user likes this restaurant and subsequently recommends restaurants similar to this restaurant when the end user is in unfamiliar geographies. Similarly if an end user is at a certain location for four nights in a row at 2 00 AM the system infers that the end user lives at that location or if an end user travels between point A in the morning to point B and back the same route in the evening many times the system infers that the end user works at point B.

Global learning is the confirmation of hypothesis by contextual user trends. The system prompts an end user for a direction when an end user input may have multiple meanings. The system reviews those disambiguation samples examine the context and learn what most people choose in order to avoid asking next time for similar inputs.

The system shows not only obvious follow up possibilities but longer tail inputs that enable a rapid plan sketch to be entered allowing the planner to fill in all of the missing steps to the end goal. For example an end user selects phone call as the first step the planner suggests phone number as a closely associated input possibility via the end user interface which enables the end user to discover suggestions such as menu item. These suggestions enable an end user to enter the plan sketch lasagna phone call via the end user interface and the planner writes a sequence of steps that amount to find someone who sells has lasagna and call that someone. 

The Explorer UI elicits a goal from an end user such as sorting suggested goals by relevance prioritizing the output of actions. The Explorer UI may elicit a sub goal a property of the original requested goal such as the name of a director name for a movie from a user or continue with the original goal. The Explorer UI suggests signals by walking the concept action network graph from the goal via extensions and action objects and finding primitive inputs without suggesting inputs that have already been selected and are not multi cardinal. The Explorer UI repeats suggesting signals and finding primitive signals until an end user indicates a selection or until there are no more available signals. After an end user indicates their selection the execution engine executes the plan using the inputs and the goal. If the there is an interruption the Explorer UI prompts for the interruption if the interrupted concept object is a primitive otherwise the Explorer UI sets the goal to the interrupted concept object and begins suggesting signals and finding primitive signals. The example user interface elicits an intent structure centered around locating a movie.

Intent is not only possible from explicit indications but may be inferred via integration with other mobile touch or window desktop applications. All user interaction may be via multiple modalities such as typed entry of text via a real or virtual keyboard or similar substitutions touch and mouse gestures speech and combinations of the above. Any entity within an end user application that is selected or represented may be starting points for interactions that involve a set of concept objects and action objects in the concept action network . Selection of pieces of information via an indication such as typing in a text box having keyboard focus on a window or an object on screen a mouse or touch gesture on a displayed object or a natural language reference to an object may be used to select concept object values. An end user application may also represent contextual information such as a document that is currently being edited a geospatial location contact information such as name address or phone number or any other piece of information offered to stored or elicited from an end user by an end user application. Such pieces of information may be referred to as cues.

Given a set of cues from an end user s use of an end user application at any given point the system may link cues to corresponding concept action network objects or to intents in several ways. The system may link cues or sets of cues to 1 corresponding concept objects action objects renderings or other information within the concept action network 2 formal descriptions of intents 3 natural language hints that may be used to describe intents and 4 combinations of the above such as a formally represented intent combined with additional hints or inputs in natural language and several additional concept objects corresponding to some of the cues.

For example within any end user application that shows business listings such as a touch based map application a web based or mobile phone application restaurant review portal or a search results page an end user may select a business using appropriate modality and then see business details. This selection allows integration with concept action network based follow ups. In another example while using a mapping application an end user may ask what are the hours of that African restaurant in Adams Morgan the end user application based on the context of the user looking at a map of that part of Washington D.C. provides neighborhood restrictions on the lookup of restaurants and the system infers intent and provides execution. In addition the mapping application may maintain references to concept object values for all objects on display and provide those as cues directly to provide concept action network based follow ups. In yet another example on any representation of an object within an end user application the end user application may offer contextual follow ups such as menus based on actions that correspond to actions and follow ups within the concept action network . Illustrating this example an end user clicks on a calendar item and sees a list or menu of additional actions for that calendar item such as invite others create social network invitation etc.

The execution engine may interact with an end user through dialog. Dialog is modeled declaratively and may consist of a string template of dialog content possibly including dependent references to other dialog declarations or runtime values the general phase of execution in which the template applies such as before an action evaluation accompanying a selection prompt or at a successful result view the specific execution context in which the template applies such as a restaurant the PhoneNumber projected from an EventVenue and the GeoRegion constraint to the FindBusiness action zero or more contextual conditions such as input output modality time of day location user preferences or previous usage history. The system abstracts the details of selection and presentation from end users and third party developers taking into account past renderings the active output modality user preferences and information coverage gain amongst other things.

The system automatically renders concept object values often taking the form of query results with respect to declarative specifications. This automatic rendering is beneficial because it allows for different modalities it requires third party developers to think about the data model in a multimodal compatible manner and it requires third party developers to be explicit about relationships between data. The system may mix and match different pieces of concept objects from different sources such as injected layout exponential personal capabilities and presentation adaptive layout for mode situation and or context. Automatically rendering concept object values with respect to declarative specifications enables the intelligent summarization of results such as removing repeated data presenting the most relevant fragments of data and enables intelligent graceful degradation in the presence of bad incomplete data to highlight contextual relevance. The system may intelligently highlight results based on what an end user requested such as highlighting selected pizza category restaurants and enables provenance aware rendering such as highlighting branded data or merged data. Fully modeling the layout provides essential advantages. The system structures data in a more linguistic manner and different representations of the same content support multiple platform and form factors.

The system renders data based on statically typed structural data such as concept objects from the concept action network as well as contextual information such as the rendering modality and environment user preferences modeling details including structural data about the concept objects relative placement constraints hints about importance of displaying different pieces of content or properties within concept objects and the set of available templates or forms and other rendering data. The goal includes a plan for what to render and how to render it for a given modality. During a planning phase the system performs optimization over possible renderings to best fit a desired set of goals which may be implemented by optimizing an objective function and renders the goals based on constraints relative placement and or templates.

Rendering layout may be performed server side and optimized for lower latency or higher quality of service interactive use. The system may minimize the amount of data sent to the clients while still maintaining the original data structure on the first server by pre computing what data is shown to an end user in each frame. Interactive components may trigger a roundtrip to the first server with the option of prefetching and pipelining the interactive responses. The system implements learning based prefetching based on an interactive user interface. By analyzing user interaction usage the system determines which interactive elements or types of interactive elements should be pre fetched pipelined to the clients and in what order which allows for the optimal balance. In an embodiment the layout may be hierarchical automatic and template based. A set of templates may be designed to layout images text and buttons on a screen. These templates may have various priorities and hints assigned to text button image regions. The system automatically lays out concept objects without explicit layout information on the concept object itself by matching the appropriate concept priorities hints to template priorities and hints.

In addition to displaying results in dedicated applications such as a dedicated interactive user interface the system may embed results dialog and interactions with concept action network execution within end user applications wherever it may be useful for an end user. An interaction that begins from within an end user application may also display its results there. For example the system may overlay results on combine results with or interleave results with objects displayed in an existing end user application. The system may display dialog or textual interactions within the same interaction patterns of an end user application. Examples include forms dialog boxes touch keyboard or mouse oriented menus graphical placements of objects in visual positions such as maps or charts and stylistic elements such as making a contact or address appear in a certain format.

Since individual services are typically built by different third party developers a key challenge is to reconcile three goals the easy integration of third party services into the system by third party developers a high level of interoperability between these services and a high level of quality of services offered to end users. Historically most approaches to such a challenge are to offer a platform where third party developers contribute their services and interoperability is possible via the platform. However one challenge is that such platforms for integrating third party services may only be successful when all stakeholders have incentives to use the platform cooperatively so each participant receives desired benefits end users have a rewarding experience making use of the best service for each situation. Third party developers are compensated for value they offer end users or other parties. Other contributors such as data providers and end users who edit or contribute content are also incentivized to help improve user experience. Advertisers may reach appropriate audiences effectively.

Mechanisms for building a marketplace of data and services are described in the context of a platform that supports the marketplace. For example the platform may be the dynamically evolving cognitive architecture system based on third party developers described above or any other software framework that allows contributions of services and interoperability between these contributions. The platform offers a collaboratively extensible environment for description of data and interoperable services built from objects and relations between objects and uses services to handle requests. A platform may include software services hosted by third parties which are not part of the platform objects which include data types passed to and from services operations that may be performed by the platform user interface and dialog descriptions cues for natural language processing functions that are executable or declarative software code that implement operations and that may access data or other services and data which may be any information stored by the platform and accessed by functions. A platform may also include developer tools such as editors for objects and mechanisms for data ingestion or upload allow contributors to offer new functionality and a shared visible repository for the declarations of these objects. This may be a centralized or distributed storage system such as a database. Contributors are people or organizations offering data services and or objects for use in a platform. Advertisers are a type of contributor that may offer content for delivery to end users in exchange for compensation. Compensation to contributors may take many forms including real or virtual currency and or other benefits such as public recognition and or increased opportunities for use of a platform.

Invocation may be a single use of a function on behalf of an end user. For example a platform runs executable software code on a specific input possibly via remote services such as looking up a city name from a postal code via a geocoding service. A request from an end user may be expressed as an intent to achieve a desired outcome that may be achieved by a combination of invocations. An object makes a contribution to the handling of a request if it is a function and it is invoked or if it is another object and its definition is used to service a request. A visit is a view of a web page by an end user or other form of digitally mediated user attention such as an end user impression of an advertisement or interaction with a widget or game. Traffic is quantitatively measured visits or contributions to services. Measurements may be in aggregate numbers of visits level of engagement by an end user or other more complex numeric representations of total contributions and visits.

The marketplace for services is a set of processes and technical mechanisms to encourage effective use of the platform. The processes and mechanisms are designed to achieve the goals of high quality of individual services in terms of data quality and completeness features and any other aspects that affect end user experience. Another marketplace goal is interoperability with other services so that contributors may derive benefits from others contributed objects and data both via explicit dependencies and via automated means supported by a platform. Other marketplace goals include software code reuse and consistency so that contributors may do this with less software engineering effort accurate indications of suitability via metadata and dynamic measurements so that a platform may accurately determine when services are suitable for a request and performance including low latency low cost to serve requests and other metrics.

The parties within a marketplace are the end users a platform operator and contributors of several types. The contributors may play several roles in the marketplace. Content application program interface providers desire branding to sell advertising and or to sell access to restricted content. Data providers and data curators want recognition payment for all content and or payment for enhanced or premium content. Transaction providers desire branding and transactions via selling of some good or service. Advertisers desire traffic from qualified end users. A single person or organization may play more than one of these roles.

A platform may offer technical mechanisms for handling an end user request and invoking and combining services to respond to it. A challenge of a marketplace is to select and prioritize the services that are used so that goals of different parties are met. Selection relies on accurate accounting of service usage and contributions. A platform may be instrumented to maintain current information such as contributions per contributor and per object and per group of objects including invocation contexts number of invocation times implicitly and explicitly expressed end user experience metrics and performance metrics.

Traffic management may include desired limits on whether a service or object may handle a request. For example restrictions may be expressed by number of requests by type of request by rate such as a number of requests per minute. In addition these quotas may be expressed individually per end user or for sets of end users. A traffic quota for an object is a representation of such desired traffic constraints for contributions from an object or service. A platform may provide mechanisms for enforcement of traffic quotas.

In many situations a platform may choose services to meet explicitly known constraints. These may include contractual goals on service use in which specific contributors may have traffic or data driven constraints such as number of requests per hour or requests containing a specific keyword or involving a certain geographic region. A platform may use standard mechanisms to ensure execution meets specific contractual needs such as using certain services white labeling avoiding certain services and packaging of dependent services. End user expressed approvals are approvals made by an end user either in response to a request or via a previous selection of a service via existing phone social network applications or via explicit preference over services or categories of services. Contributed services may be reviewed by a single reviewing authority such as the platform operator to determine if they meet desired goals for authority based approvals. Services may have provisional approval for specific traffic levels or for specific periods of time or be unconditionally approved for use at any level. A platform may directly use traffic management facilities to ensure these goals are met for explicit selection mechanisms.

Assuming a service meets explicitly specified restrictions a platform may control traffic via implicit means via a continuous process that begins by the assignment of initial traffic quotas via a policy. The automatic traffic control mechanism may maintain a set of current quotas which are enforced by a platform. Handling of requests may result in new analytics data which a platform may use to update a set of current quotas. The initial quotas for services or objects may involve the speculative assignment of traffic based on initial indicators. A platform may dynamically rank objects and services according to the analytics provided by the platform and dynamically adjust traffic quotas. Analytics signals that may contribute to traffic quota assignment include performance including latency automatically measured response quality such as via known sentinel queries or contributed test cases from contributors or users precision recall based on implicit user feedback such as frequency of follow up queries precision recall based on explicit user feedback such as a thumbs up or thumbs down selected by an end user in a user interface after receiving a response evaluations from human evaluators such as from paid evaluators or from other third party services and proxy ranking off other indicators such as a contributor s web domain ranking or the ranking of that contributor s applications in an a publicly browsable app store.

A traffic assignment policy whereby quotas are determined from these signals may be fixed set of rules or determined via more complex algorithms including machine learning based approaches. A few other processes may supplement the processes described above such as automatic reporting of analytics and ranking data in a forum for third party developers end users and the public to peruse and to offer recognition to exceptional contributions. Another process may be the curation of services and objects based on review approvals for categories or services and peer reviews curation. Yet another process may include service tiers in which a platform maintains metadata on all services and objects so that different levels of stability are simultaneously available such as bleeding edge beta and stable. End users may opt into the tier of their choice. Further processes may include promotion and discovery of services such as end user facing features for discovery of available services based on suitability intent elicitation from end user based on available services and prioritization based on payment category of service such as free paid freemium etc.

A marketplace may support accounting and controls on all contributions from services and objects enabling parties in the marketplace to enter into a variety of transactions End users may pay to use services or objects contributors may pay other contributors on which they depend contributors may pay end users or other curators for help improving their services contributors may pay the platform operator for operations of their services and advertisers may pay the platform operator to obtain traffic or visits. In each of these cases payment may be any form of compensation immediately or in the form of an agreement. Examples of end user transactions include free but limited quantity or via promotion purchase per request or by subscription and freemium for which limited features are free and premium features require a fee. The platform may charge contributors based on a variety of metrics such as the number of objects contributed the number of objects making contributions to end user requests traffic levels and the amount of data stored.

A platform operator may adjust traffic quotas based on a variety of compensation from advertisers. A key approach may be via bid and auction mechanisms using real or virtual currency. A platform may select bids via an auction mechanism which may include ranking based on a variety of factors including bid price contributor object or group scores user preferences current situation time of day geographic location current or upcoming calendar events etc. and known preference history based on specific attributes preferred services. Advertisers may bid for traffic that captures contextual moments that fall outside of traditional keyword matching sponsored links such as hotels bidding to be the first choice offer for airline weather delays near airports bars bidding to offer drink specials to 21 35 year olds in the vicinity with a Klout score over 55 restaurants bidding to offer drink dinner specials to sports fans in the time and location vicinity of large games or events. In another example the platform may use a trusted personality algorithm to promote timely sponsored service suggestions based not only on intent inference but also using known preference history based on specific attributes preferred services and context information such as time of day and location information. Offers may be filtered through probability of attractiveness filters and delivered via proactive suggestions from the assistant via dialog alert.

An exemplary hardware device in which the subject matter may be implemented shall be described. Those of ordinary skill in the art will appreciate that the elements illustrated in may vary depending on the system implementation. With reference to an exemplary system for implementing the subject matter disclosed herein includes a hardware device including a processing unit a memory a storage a data entry module a display adapter a communication interface and a bus that couples elements to the processing unit .

The bus may comprise any type of bus architecture. Examples include a memory bus a peripheral bus a local bus etc. The processing unit is an instruction execution machine apparatus or device and may comprise a microprocessor a digital signal processor a graphics processing unit an application specific integrated circuit ASIC a field programmable gate array FPGA etc. The processing unit may be configured to execute program instructions stored in the memory and or the storage and or received via the data entry module .

The memory may include a read only memory ROM and a random access memory RAM . The memory may be configured to store program instructions and data during operation of the device . In various embodiments the memory may include any of a variety of memory technologies such as static random access memory SRAM or dynamic RAM DRAM including variants such as dual data rate synchronous DRAM DDR SDRAM error correcting code synchronous DRAM ECC SDRAM or RAMBUS DRAM RDRAM for example. The memory may also include nonvolatile memory technologies such as nonvolatile flash RAM NVRAM or ROM. In some embodiments it is contemplated that the memory may include a combination of technologies such as the foregoing as well as other technologies not specifically mentioned. When the subject matter is implemented in a computer system a basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer system such as during start up is stored in the ROM .

The storage may include a flash memory data storage device for reading from and writing to flash memory a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and or an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD or other optical media. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the hardware device .

It is noted that the methods described herein may be embodied in executable instructions stored in a computer readable medium for use by or in connection with an instruction execution machine apparatus or device such as a computer based or processor containing machine apparatus or device. It will be appreciated by those skilled in the art that for some embodiments other types of computer readable media may be used which may store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges RAM ROM and the like may also be used in the exemplary operating environment. As used here a computer readable medium may include one or more of any suitable media for storing the executable instructions of a computer program in one or more of an electronic magnetic optical and electromagnetic format such that the instruction execution machine system apparatus or device may read or fetch the instructions from the computer readable medium and execute the instructions for carrying out the described methods. A non exhaustive list of conventional exemplary computer readable medium includes a portable computer diskette a RAM a ROM an erasable programmable read only memory EPROM or flash memory optical storage devices including a portable compact disc CD a portable digital video disc DVD a high definition DVD HD DVD a BLU RAY disc and the like.

A number of program modules may be stored on the storage the ROM or the RAM including an operating system one or more applications programs program data and other program modules . A user may enter commands and information into the hardware device through data entry module . The data entry module may include mechanisms such as a keyboard a touch screen a pointing device etc. Other external input devices not shown are connected to the hardware device via an external data entry interface . By way of example and not limitation external input devices may include a microphone joystick game pad satellite dish scanner or the like. In some embodiments external input devices may include video or audio input devices such as a video camera a still camera etc. The data entry module may be configured to receive input from one or more users of the device and to deliver such input to the processing unit and or the memory via the bus .

A display is also connected to the bus via the display adapter . The display may be configured to display output of the device to one or more users. In some embodiments a given device such as a touch screen for example may function as both the data entry module and the display . External display devices may also be connected to the bus via the external display interface . Other peripheral output devices not shown such as speakers and printers may be connected to the hardware device .

The hardware device may operate in a networked environment using logical connections to one or more remote nodes not shown via the communication interface . The remote node may be another computer a server a router a peer device or other common network node and typically includes many or all of the elements described above relative to the hardware device . The communication interface may interface with a wireless network and or a wired network. Examples of wireless networks include for example a BLUETOOTH network a wireless personal area network a wireless 802.11 local area network LAN and or wireless telephony network e.g. a cellular PCS or GSM network . Examples of wired networks include for example a LAN a fiber optic network a wired personal area network a telephony network and or a wide area network WAN . Such networking environments are commonplace in intranets the Internet offices enterprise wide computer networks and the like. In some embodiments the communication interface may include logic configured to support direct memory access DMA transfers between the memory and other devices.

In a networked environment program modules depicted relative to the hardware device or portions thereof may be stored in a remote storage device such as for example on a server. It will be appreciated that other hardware and or software to establish a communications link between the hardware device and other devices may be used.

It should be understood that the arrangement of the hardware device illustrated in is but one possible implementation and that other arrangements are possible. It should also be understood that the various system components and means defined by the claims described below and illustrated in the various block diagrams represent logical components that are configured to perform the functionality described herein. For example one or more of these system components and means may be realized in whole or in part by at least some of the components illustrated in the arrangement of the hardware device .

In addition while at least one of these components are implemented at least partially as an electronic hardware component and therefore constitutes a machine the other components may be implemented in software hardware or a combination of software and hardware. More particularly at least one component defined by the claims is implemented at least partially as an electronic hardware component such as an instruction execution machine e.g. a processor based or processor containing machine and or as specialized circuits or circuitry e.g. discrete logic gates interconnected to perform a specialized function such as those illustrated in .

Other components may be implemented in software hardware or a combination of software and hardware. Moreover some or all of these other components may be combined some may be omitted altogether and additional components may be added while still achieving the functionality described herein. Thus the subject matter described herein may be embodied in many different variations and all such variations are contemplated to be within the scope of what is claimed.

In the descriptions above the subject matter is described with reference to acts and symbolic representations of operations that are performed by one or more devices unless indicated otherwise. As such it is understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the device in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the subject matter is described in a context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operations described hereinafter may also be implemented in hardware.

To facilitate an understanding of the subject matter described above many aspects are described in terms of sequences of actions. At least one of these aspects defined by the claims is performed by an electronic hardware component. For example it will be recognized that the various actions may be performed by specialized circuits or circuitry by program instructions being executed by one or more processors or by a combination of both. The description herein of any sequence of actions is not intended to imply that the specific order described for performing that sequence must be followed. All methods described herein may be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

